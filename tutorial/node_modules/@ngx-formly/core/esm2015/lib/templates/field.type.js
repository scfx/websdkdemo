/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
/**
 * @abstract
 * @template F
 */
import * as ɵngcc0 from '@angular/core';
export class FieldType {
    /**
     * @return {?}
     */
    get model() { return this.field.model; }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get form() { return (/** @type {?} */ (this.field.parent.formControl)); }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get options() { return this.field.options; }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get key() { return this.field.key; }
    /**
     * @return {?}
     */
    get formControl() { return this.field.formControl; }
    /**
     * @return {?}
     */
    get to() { return this.field.templateOptions || {}; }
    /**
     * @return {?}
     */
    get showError() { return this.options.showError(this); }
    /**
     * @return {?}
     */
    get id() { return this.field.id; }
    /**
     * @return {?}
     */
    get formState() { return this.options.formState || {}; }
}
FieldType.ɵfac = function FieldType_Factory(t) { return new (t || FieldType)(); };
FieldType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldType, inputs: { model: "model", form: "form", options: "options", field: "field" } });
FieldType.propDecorators = {
    field: [{ type: Input }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }]
};

if (false) {
    /** @type {?} */
    FieldType.prototype.field;
    /** @type {?} */
    FieldType.prototype.defaultOptions;
}
/**
 * @deprecated use `FieldType` instead
 * @abstract
 */
export class Field extends FieldType {
    constructor() {
        super();
        console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQudHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvY29yZS9saWIvdGVtcGxhdGVzL2ZpZWxkLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEM7QUFBSTtBQUFhO0FBQWU7O0FBR2hDLE1BQU0sT0FBZ0IsU0FBUztBQUFHO0FBQVE7QUFBbUI7QUFBUSxJQUluRSxJQUNJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxQztBQUFRO0FBQW9CO0FBQW1CO0FBQVEsSUFBckQsSUFBSSxLQUFLLENBQUMsQ0FBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0NBQXdDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSx5REFBeUQsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3SjtBQUNPO0FBQ1E7QUFBUSxJQURyQixJQUNJLElBQUksS0FBSyxPQUFPLG1CQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQSxDQUFDLENBQUMsQ0FBQztBQUNsRTtBQUFRO0FBQXVCO0FBQW1CO0FBQVEsSUFBeEQsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUNBQXVDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSx5REFBeUQsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6SjtBQUNPO0FBQ1E7QUFBUSxJQURyQixJQUNJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM5QztBQUFRO0FBQTBCO0FBQW1CO0FBQVEsSUFBM0QsSUFBSSxPQUFPLENBQUMsT0FBcUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUkseURBQXlELENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEw7QUFDTztBQUFtQjtBQUFRLElBQWhDLElBQUksR0FBRyxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RDO0FBQ087QUFBbUI7QUFBUSxJQUFoQyxJQUFJLFdBQVcsS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUN0RDtBQUNPO0FBQW1CO0FBQVEsSUFBaEMsSUFBSSxFQUFFLEtBQUssT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZEO0FBQ087QUFBbUI7QUFBUSxJQUFoQyxJQUFJLFNBQVMsS0FBYyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRTtBQUNPO0FBQW1CO0FBQVEsSUFBaEMsSUFBSSxFQUFFLEtBQWEsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDNUM7QUFDTztBQUFtQjtBQUFRLElBQWhDLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxRDs7MkpBQUM7QUFDRDtBQUV3QixvQkE3QnJCLEtBQUs7QUFBSyxvQkFHVixLQUFLO0FBQ04sbUJBR0MsS0FBSztBQUNOLHNCQUdDLEtBQUs7QUFDUDtBQUFFO0FBQUM7QUFBYTtBQUFxQixJQVpwQywwQkFBa0I7QUFDcEI7QUFBcUIsSUFBbkIsbUNBQW1CO0FBQ3JCO0FBQ0M7QUFBSTtBQUM0QjtBQUM5QjtBQTBCSCxNQUFNLE9BQWdCLEtBQU0sU0FBUSxTQUFTO0FBQzdDLElBQUU7QUFDRixRQUFJLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLGlGQUFpRixDQUFDLENBQUM7QUFDcEcsSUFBRSxDQUFDO0FBQ0gsQ0FBQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkVHlwZTxGIGV4dGVuZHMgRm9ybWx5RmllbGRDb25maWcgPSBGb3JtbHlGaWVsZENvbmZpZz4ge1xuICBASW5wdXQoKSBmaWVsZDogRjtcbiAgZGVmYXVsdE9wdGlvbnM/OiBGO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBtb2RlbCgpIHsgcmV0dXJuIHRoaXMuZmllbGQubW9kZWw7IH1cbiAgc2V0IG1vZGVsKG06IGFueSkgeyBjb25zb2xlLndhcm4oYE5neEZvcm1seTogcGFzc2luZyAnbW9kZWwnIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBASW5wdXQoKVxuICBnZXQgZm9ybSgpIHsgcmV0dXJuIDxGb3JtR3JvdXA+IHRoaXMuZmllbGQucGFyZW50LmZvcm1Db250cm9sOyB9XG4gIHNldCBmb3JtKGZvcm0pIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ2Zvcm0nIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBASW5wdXQoKVxuICBnZXQgb3B0aW9ucygpIHsgcmV0dXJuIHRoaXMuZmllbGQub3B0aW9uczsgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zOiBGWydvcHRpb25zJ10pIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ29wdGlvbnMnIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBnZXQga2V5KCkgeyByZXR1cm4gdGhpcy5maWVsZC5rZXk7IH1cblxuICBnZXQgZm9ybUNvbnRyb2woKSB7IHJldHVybiB0aGlzLmZpZWxkLmZvcm1Db250cm9sOyB9XG5cbiAgZ2V0IHRvKCkgeyByZXR1cm4gdGhpcy5maWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307IH1cblxuICBnZXQgc2hvd0Vycm9yKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5vcHRpb25zLnNob3dFcnJvcih0aGlzKTsgfVxuXG4gIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5maWVsZC5pZDsgfVxuXG4gIGdldCBmb3JtU3RhdGUoKSB7IHJldHVybiB0aGlzLm9wdGlvbnMuZm9ybVN0YXRlIHx8IHt9OyB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBGaWVsZFR5cGVgIGluc3RlYWRcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkIGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zb2xlLndhcm4oYE5neEZvcm1seTogJ0ZpZWxkJyBoYXMgYmVlbiByZW5hbWVkIHRvICdGaWVsZFR5cGUnLCBleHRlbmQgJ0ZpZWxkVHlwZScgaW5zdGVhZC5gKTtcbiAgfVxufVxuIl19