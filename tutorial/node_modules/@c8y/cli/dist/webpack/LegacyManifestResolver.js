"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyManifestResolver = void 0;
const plugin_1 = require("./plugin/plugin");
const path_1 = require("path");
const RESOLVER_NAME = 'CumulocityLegacyManifestResolver';
class LegacyManifestResolver {
    apply(resolver) {
        let localPlugins = [];
        try {
            localPlugins = resolver.fileSystem.readdirSync('plugins').map(p => path_1.resolve('./plugins', p));
        }
        catch (e) {
            // do nothing
        }
        const legacyManifestRegex = new RegExp(`^${plugin_1.LEGACY_MANIFEST}`);
        resolver.hooks.resolve.tapAsync(RESOLVER_NAME, (request, resolveContext, callback) => {
            if (!legacyManifestRegex.test(request.request)) {
                return callback();
            }
            const [, ...parts] = request.request.split('/');
            const matchers = [
                new RegExp(`[/\\\\]${parts.join('-')}$`),
                new RegExp(`[/\\\\]${parts.slice(1).join('-')}$`)
            ];
            const [part0] = parts;
            const inLocalPlugins = localPlugins.find(p => matchers.some(m => p.match(m)));
            const finalRequest = inLocalPlugins;
            if (parts.indexOf('c8yBranding') > -1) {
                const ix = parts.indexOf('c8yBranding');
                request.request = `@c8y/style/${parts.slice(ix + 1).join('/')}`;
            }
            else if (finalRequest) {
                request.request = path_1.join(finalRequest, 'cumulocity.json');
            }
            else {
                request.request = `${plugin_1.NG1_PACKAGE}/${(part0 === 'core' ? parts.slice(1) : parts).join('-')}/cumulocity.json`;
            }
            return resolver.doResolve(resolver.hooks.undescribedRawFile, request, `${RESOLVER_NAME} ${request.request}`, resolveContext, callback);
        });
    }
}
exports.LegacyManifestResolver = LegacyManifestResolver;
//# sourceMappingURL=LegacyManifestResolver.js.map