//
// Forms
// --------------------------------------------------
// Normalize non-controls
//
// Restyle and baseline non-control form elements.
fieldset {
  margin: 0;
  padding: 0;
  min-width: 0;
  border: 0;
}

fieldset.c8y-fieldset{
  
    display: block;
    margin-inline-start: 2px;
    margin-inline-end: 2px;
    border: solid 1px @component-border;
    padding-block-start: 0.25rem;
    padding-inline-end: 0.75em;
    padding-block-end: 0;
    padding-inline-start: 0.75em;
    min-inline-size: min-content;
    margin: 1rem 0;
    &.expanded{
      margin: 1rem -1.15rem;
    }
  
  legend {
    padding-inline-start: 4px; 
    padding-inline-end: 4px;
    width: auto;
    margin:0;
    text-transform: none;
  }
  
  legend[align="left"] {
    justify-self: left;
  }
  
  legend[align="center"] {
    justify-self: center;
  }
  
  legend[align="right"] {
    justify-self: right;
  }
}

legend,
.legend {
  display: block;
  margin: @margin-md 0 @margin-sm 0;
  padding: 0;
  width: 100%;
  border: 0;
  color: @legend-color;
  text-transform: @legend-text-transform;
  font-weight: @legend-font-weight;
  font-size: @legend-font-size;
  line-height: inherit;
  // only works on .legend
  // in some browsers <legend> doesn't have ::after and ::before
  &.form-block {
    display: flex;
    align-items: center;
    flex-flow: row nowrap;
    &:after {
      align-self: center;
      flex: 1 1 auto;
      margin-left: 8px;
      border-top-width: 1px;
      border-top-style: solid;
      content: '';
      opacity: 0.5;
    }
    &.center {
      &:before {
        align-self: center;
        flex: 1 1 auto;
        margin-right: 8px;
        border-top-width: 1px;
        border-top-style: solid;
        content: '';
        opacity: 0.5;
      }
    }
    &.last-record{
      max-width: 180px;
      margin-left: auto;
      margin-right: auto;
      > [class^="dlt-c8y-icon-"],
      > [class*=" dlt-c8y-icon-"]{
        font-size: .5rem;
      }
    }
  }
  > .dot {
    margin-right: 5px;
    width: 30px;
    height: 30px;
    font-size: 14px;
    line-height: 32px;
  }
}

label {
  display: inline-block;
  margin-bottom: @margin-xs;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  color: @label-text-color;
  text-transform: @label-transform;
  font-weight: @label-font-weight;
  font-size: @label-font-size;
  font-family: @font-family-base-css-var;
  > a {
    display: inline-block;
    font-size: inherit;
  }
  // use the pointer cursor when the label holds or contains tooltip
  &[tooltip],
  [tooltip],
  [uib-tooltip] {
    cursor: pointer;
  }
  .form-group & {
    display: block;
  }

  fieldset[disabled] & {
    &:not(.c8y-checkbox):not(.c8y-radio) {
      opacity: @input-disabled-opacity;
    }
  }
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.
// Override content-box in Normalize (* isn't specific enough)
input[type='search'] {
  .box-sizing(border-box);
}

// Position radios and checkboxes better
input[type='radio'],
input[type='checkbox'] {
  margin: 1px 0 0;
  margin-top: 1px \9; // IE8-9
  font-size: 16px;
  line-height: normal;
}

.plain input[type='checkbox'] {
  margin: 3px 0 0;
}

input[type='file'] {
  display: block;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Adjust output element
output {
  display: block;
  //padding-top: (@padding-base-vertical + 1);
  color: @input-color;
  font-size: @font-size-base;
  line-height: inherit;
}

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
.form-control {
  display: block;
  padding: @form-control-padding-base-vertical @form-control-padding-base-horizontal;
  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  border: 0; //@input-border-width solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  box-shadow: inset 0 0 0 @input-border-width @input-border;
  color: @input-color;
  font-family: @form-control-font-family;
  font-size: @font-size-base;
  font-weight: @form-control-font-weight;
  line-height: @form-control-line-height; // .box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075));
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  .form-control-focus();
  .placeholder(); // Placeholder
  //
  // Disabled and read-only inputs
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  fieldset[disabled] & {
    opacity: @input-disabled-opacity;
  }
  &[readonly],
  &[readonly]:focus {
    color: @text-muted;
    background-color: @component-background;
    opacity: 1;
  }
  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
  // Reset height for `textarea`s
  textarea & {
    height: auto;
  }
}

textarea.form-control {
  height: auto;
  resize: vertical;
  min-height: @input-height-base;
  .c8y-scrollbar();
  &.no-resize {
    resize: none;
  }
}


// color picker

.c8y-colorpicker{
  position: relative;
  width: 20px;
  height: 20px;
  input{
    width: 20px;
    height: 20px;
    left:0;
    top:0;
    box-sizing: border-box;
    opacity: 0;
    position: absolute;
    z-index: 10;
    + span{
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      border-radius: 50%;
      position: absolute;
      z-index: 9;
    }
    &:focus + span{
      box-shadow: 0 0 0 2px @input-border-focus;
    }
  }
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.
input[type='search'] {
  -webkit-appearance: none;
  appearance: none;
}

// global restyling for selects
select,
select.form-control {
  .form-control();
  &[multiple],
  &[size] {
    height: auto;
    background-image: none;
  }
}

.c8y-select-wrapper {
  position: relative;
  select {
    padding-right: 24px !important;
    background-image: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    &::-ms-expand {
      display: none;
    }
  }
  &:after {
    .c8y-glyph();
    content: @c8y-glyph-caret;
    position: absolute;
    z-index: 2;
    right: 5px;
    top: 50%;
    transform: translate(0, -50%);
    font-size: 18px;
    color: @form-control-icon-color;
    pointer-events: none;
  }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, wrap form-groups in the predefined grid classes.
.form-group {
  margin-bottom: @form-group-margin-bottom;
  display: block;
}

// remove margin-bottom when adding form-group to a table cell
td.form-group,
th.form-group {
  margin-bottom: 0;
}

// Checkboxes and radios
//

label.c8y-checkbox,
label.c8y-radio {
  position: relative;
  display: flex;
  align-items: center;
  margin: 0;
  text-transform: none;
  font-weight: @form-control-font-weight;
  font-size: inherit;
  line-height: @input-height-base;
  color: @input-color;
  cursor: pointer;
  input[type='checkbox'],
  input[type='radio'] {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    margin: 0;
    opacity: 0;
  }
  input + span {
    position: relative;
    display: inline-block;
    z-index: 2;
  }
  input[type='checkbox'] + span,
  input[type='radio'] + span {
    display: inline-block;
    margin: 0;
    flex-shrink: 0;
    width: @checkbox-size;
    height: @checkbox-size;
    box-shadow: inset 0 0 0 1px @input-border;
    border-radius: @input-border-radius;
    background-color: @input-bg;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    position: relative;
    + span {
      margin-left: 8px;
      line-height: @line-height-base;
    }
  }

  input[type='radio'] + span {
    border-radius: 50%;
  }
  &:hover,
  input:focus {
    + span {
      box-shadow: inset 0 0 0 2px @input-border-focus;
      background-color: @input-focus-background-color;
      color: @input-focus-color;
    }
  }
  input[type='checkbox']:checked + span::after {
    content: '';
    color: @brand-primary-css-var;
    height: 5px;
    width: 9px;
    border-left: 2px solid;
    border-bottom: 2px solid;
    transform: rotate(-45deg);
    left: 3.7px;
    top: 4.4px;
    display: block;
    position: absolute;
  }

  input[type='radio']:checked + span::after {
    content: '';
    position: absolute;
    display: inline-block;
    line-height: inherit;
    left: 50%;
    top: 50%;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    font-size: 10px;
    width: 8px;
    height: 8px;
    background-color: @brand-primary-css-var;
    pointer-events: none;
  }

  //checkbox indeterminate
  input[type='checkbox']:indeterminate + span::after {
    content: '';
    color: @brand-primary-css-var;
    height: 5px;
    width: 8px;
    border-left: 0;
    border-bottom: 2px solid;
    left: 4px;
    top: 4.4px;
    display: block;
    position: absolute;
  }

  //disabled
  input[disabled],
  input[disabled]:checked {
    cursor: @cursor-disabled;
    ~ span {
      cursor: @cursor-disabled;
      opacity: @input-disabled-opacity;
    }
  }

  input[readonly],
  input[readonly]:checked {
    pointer-events: none;
    ~ span {
      opacity: @input-disabled-opacity;
    }
  }
  &.disabled,
  [disabled] & {
    cursor: @cursor-disabled;
    span {
      cursor: @cursor-disabled;
      opacity: @input-disabled-opacity;
      &::before {
        opacity: 1;
      }
    }
  }
  &.checkbox-inline,
  &.radio-inline {
    display: inline-flex;
    padding: 0;
    &:not(:last-child) {
      margin-right: 8px;
    }
  }
  &.has-error{
    input + span{
      box-shadow: inset 0 0 0 2px @input-validation-error;
    }
  }
}



// Form control help & feedback states
//

// set feedback min height to avoid field jumping

c8y-error-feedback,
c8y-messages, 
.c8y-messages {
  display: block;
  min-height: @form-group-margin-bottom;
  margin-bottom: calc(~'@{form-group-margin-bottom} * -1');
  .has-error.form-group--tooltip-validation &,
  .input-group-array .has-error &{
    display: none;
    .form-control-feedback-message:not(.ng-inactive){
      padding-top: 3px;
      &::before{
        color:@tooltip-color;
      }
    }
  }
  .has-error.form-group--tooltip-validation:hover &,
  .input-group-array .has-error:hover &{
    display: block;
    position: absolute;
    z-index: 10;
    background-color: @dark-danger;
    color: @tooltip-color;
    border-radius: @tooltip-radius;
    padding: 2px 5px 3px;
    bottom:44px;
    left: 8px;
    max-width: calc(100% - 16px);
    &:after{
      content: '';
      position: absolute;
      bottom: -5px;
      left: 50%;
      margin-top: 0;
      width: 0;
      height: 0;
      border-style: solid;
      border-color: transparent;
      border-width: @tooltip-arrow-width @tooltip-arrow-width 0;
      border-top-color: @dark-danger;
      opacity: @tooltip-opacity;
    }
  }
}

.form-group .help-block,
.form-group .form-control-feedback-message {
  display: block;
  position: relative;
  line-height: 1.2;
  font-size: @font-size-small;
  min-height: calc(~'@{form-validation-bottom-margin} + 4');
}
.help-block {
  font-style: italic;
}



// icon in feedback message

.form-control-feedback-message,
.input-group + .help-block,
select ~ .help-block,
c8y-field-input ~ .help-block,
textarea ~ .help-block,
input ~ .help-block,
file-picker ~ .help-block,
.form-control ~ .help-block {
  &:before {
    display: inline-block;
    position: absolute;
    left: 1px;
    top: calc(~'@{margin-xs} * 0.5');
    font: normal normal normal 14px/1 '@{icon-font-family}';
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-size: 16px;
  }
}

// Apply contextual and semantic states to individual form controls.
.form-control-feedback-message:not(.ng-inactive),
.input-group + .help-block,
select ~ .help-block,
textarea ~ .help-block,
file-picker ~ .help-block,
.form-control ~ .help-block,
c8y-field-input ~ .help-block,
input ~ .help-block {
  position: relative;
  padding-top: @margin-xs;
  padding-left: 20px;
}

// margin for schemaforms
c8y-field-input ~ .help-block{
  margin-bottom: -18px;
}

file-picker ~ .help-block{
  margin-top: -24px;
}

.has-success:not(.schema-form-text) {
  .form-control-validation(@gray-text; @input-validation-success; transparent);
  .form-control-feedback-message {
    &:before {
      content: @alert-success-icon;
    }
  }
}

.has-warning {
  .form-control-validation(@gray-text; @input-validation-warning;transparent);
  .form-control-feedback-message {
    &:before {
      content: @alert-warning-icon;
    }
  }
}

.has-error {
  .form-control-validation(@gray-text; @input-validation-error;transparent);
  .form-control-feedback-message {
    &:before {
      content: @alert-danger-icon;
    }
  }
}

.form-control-feedback-message.has-error {
  line-height: 1.2;
  margin-bottom: 8px;
  &:before {
    color: @input-validation-error;
    content: @alert-danger-icon;
  }
}

.has-info {
  .form-control-validation(@gray-text; @input-validation-info;transparent);
  .form-control-feedback-message {
    &:before {
      content: @alert-info-icon;
    }
  }
}

textarea ~ .help-block:not(:empty),
file-picker ~ .help-block:not(:empty),
select ~ .help-block:not(:empty),
input ~ .help-block:not(:empty),
c8y-field-input ~ .help-block:not(:empty),
.form-control ~ .help-block:not(:empty),
.input-group ~ .help-block:not(:empty) {
  &:before {
    content: @alert-info-icon;
    color: @input-validation-info;
  }
}

// legacy compliant
.form-control.ng-invalid.ng-invalid-required.ng-touched,
.form-control.ng-invalid.ng-touched {
  box-shadow: inset 1px 0 0 0 @input-border, inset -1px 0 0 0 @input-border,
    inset 0 1px 0 0 @input-border, inset 0 -4px 0 @input-validation-error;
  &:focus {
    box-shadow: inset 2px 0 0 0 @input-border-focus, inset -2px 0 0 0 @input-border-focus,
      inset 0 2px 0 0 @input-border-focus, inset 0 -4px 0 @input-validation-error;
  }

  + * > .form-control-feedback-message:not(:empty) {
    &:before {
      color: @input-validation-error;
      content: @alert-danger-icon;
    }
  }
}






// error message for drop-zone
.drop-zone .has-errors .form-control-feedback-message {
  font-size: @font-size-base;
  &:not(:empty):before {
    color: @input-validation-error;
    content: @alert-danger-icon;
  }
}

// Feedback icon
// hidden - it was deprecated
.form-control-feedback {
  display: none !important;
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.
.form-control-static {
  margin: 1px 0 0; // Size it appropriately next to real form controls
  padding-top: @form-control-padding-base-vertical;
  padding-bottom: @form-control-padding-base-vertical;
  min-height: @input-height-base;
  line-height: @form-control-line-height;
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
.form-group-sm > label {
  font-size: @font-size-small;
  margin-bottom:0;
}

.form-group-sm .form-control,
.form-group-sm .form-control-static,
.input-sm {
  &:not(.c8y-radio):not(.c8y-checkbox) {
    padding: @form-control-padding-small-vertical @form-control-padding-small-horizontal;
    height: @input-height-small;
    font-size: @font-size-small;
  }
}

.form-group-lg > label {
  font-size: @font-size-large;
}

.form-group-lg .form-control,
.form-group-lg .form-control-static,
.input-lg {
  &:not(.c8y-radio):not(.c8y-checkbox) {
    padding: @form-control-padding-large-vertical @form-control-padding-large-horizontal;
    height: @input-height-large;
    font-size: @font-size-large;
    max-height: unset !important;
  }
}

// disable editing in forms
.form-read-only {
  position: relative;
  // covers all inputs within the form
  &:after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1000;
    content: '';
  }

  &.hidden-labels {
    .form-group > label {
      display: none;
    }
  }
  .form-group {
    margin: 0;
    label {
      color: @label-text-color!important;
      opacity: 1 !important;
      margin: 0; // remove bottom margin
    }
  }
  .form-control,
  .form-control.input-sm,
  .form-control.input-lg {
    padding: 0;
    box-shadow: none;
    resize: none;
    opacity: 1 !important;
    background-color: transparent;
    &.ng-empty {
      display: none;
    }
  }
  textarea.form-control {
    line-height: 1.42857143;
    height: auto;
  }
  .btn:not(.form-edit-btn) {
    display: none;
  }
  .form-edit-btn {
    display: inline-block;
  }
  input[type='number'] {
    -moz-appearance: textfield;
    -webkit-appearance: none;
    appearance: none;
  }
}

// hide the .form-edit-btn outside a .form-read-only container
.form-edit-btn {
  position: relative;
  z-index: 1001;
  cursor: pointer;
  padding: 0;
  margin: 0;
  background: none;
  border: 0;
  color: @link-color;
  font-size: @font-size-small;
  &:hover {
    color: @link-hover-color;
    text-decoration: none;
  }
  &:focus {
    outline: none;
    box-shadow: inset 0 -2px 0 @input-border-focus;
  }
  display: none;
}

// Editable inputs
label.editable {
  position: relative;
  margin: 0;
  padding: 0;
  color: @input-color;
  display: flex;
  align-items: flex-start;
  text-transform: none;
  font-weight: inherit;
  font-size: inherit;
  cursor: pointer;
  .form-control{
    max-width: 100%;
    min-width: 4ch;
    -moz-appearance: textfield;
    appearance: textfield;
    &::-webkit-inner-spin-button, 
    &::-webkit-outer-spin-button { 
      -webkit-appearance: none; 
      margin: 0; 
    }
    &[c8y-textarea-autoresize]{
      transition: border-color 0.15s ease-in-out, 
                  box-shadow 0.15s ease-in-out,
                  padding .35s ease!important;
    }
    
  }
  &:after {
    position: relative;
    display: inline-block;
    color: @component-brand-primary;
    .dlt-c8y-icon();
    content: @dlt-c8y-icon-pencil;
    margin-top: .7rem;
  }

  .form-control + span {
    display: none; // hide old implementation
  }

  &:not(.updated) {
    .form-control {
      transition: all 0.35s ease;
      position: relative;
      z-index: 9;
      &[c8y-textarea-autoresize]{
        transition: border-color 0.15s ease-in-out, 
                    box-shadow 0.15s ease-in-out,
                    padding .35s ease!important;
      }  
      &:not(:focus):not(:hover) {
        z-index: 2;
        padding-left: 0;
        padding-right: 0;
        background-color: transparent;
        box-shadow: none;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }
  }
  &.updated{
    width: 100%;
    &:after {
      display: none;
    }
  }
  &.updated .form-control,
  .form-control:focus {
    min-width: 100%;
    opacity: 1;
    transition: all 0.25s ease;
    margin-right: -24px;
    ~ span {
      display: none;
    }
  }

  &:not(.updated):hover {
    .form-control{
      min-width: 100%;
    }
    &:after {
      opacity: 0;
    }
    .form-control:not(:focus) {
      background-color: transparent;
    }
  }
  .form-control.ng-invalid-required + span,
  .form-control.ng-invalid-required + span span {
    color: @state-danger-text!important;
    &:after {
      color: @state-danger-text!important;
    }
  }

  .has-error &,
  .has-warning &,
  .has-info &,
  .has-success & {
    &:after {
      display: none;
    }
    .form-control {
      padding: @form-control-padding-base-vertical @form-control-padding-base-horizontal!important;
    }
  }
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.
.form-inline {
  // Kick in the inline
  @media (min-width: @screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
      max-height: 32px !important;

      > label {
        margin-right: @margin-sm;
      }
      + .form-group {
        margin-left: @margin-sm;
      }
    }

    label {
      display: inline-block;
      margin-bottom: 0;
    }

    .form-control {
      display: inline-block;
      width: auto;
      vertical-align: middle;
    }

    .form-control-static {
      display: inline-block;
    }
    .input-group {
      width: auto;
      display: inline-flex;
      vertical-align: middle;
      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }
    .c8y-select-wrapper {
      display: inline-block;
      vertical-align: middle;
    }

    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;
      label {
        padding-left: 0;
      }
    }
    .radio input[type='radio'],
    .checkbox input[type='checkbox'] {
      position: relative;
      margin-left: 0;
    } // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
    .has-feedback .form-control-feedback-message {
      top: @input-height-base;
    }
  }
}

// Legacy radio and checkboxes

.radio,
.checkbox {
  label {
    padding-left: 0;
    display: inline-flex;
    align-items: center;
    margin: 0 0 8px 0;
    > input[type='radio'],
    > input[type='checkbox'] {
      flex-grow: 0;
      margin: 0 8px 0 0;
      height: 18px;
      + span {
        flex-grow: 1;
        font-weight: normal;
      }
    }
  }
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
.form-horizontal {
  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (@padding-base-vertical + 1); // Default padding plus a border
  } // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: calc(@line-height-computed + (@padding-base-vertical + 1));
  } // Make form groups behave like rows
  .form-group {
    .make-row();
    .form-group {
      position: relative;
      margin-right: 0;
      margin-left: 0;
      .form-control-feedback {
        right: 5px;
      }
    }
  } // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: @screen-sm-min) {
    .control-label {
      margin-bottom: 0;
      padding-top: (@padding-base-vertical + 2); // Default padding plus a border
    }
  } // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: (floor((@grid-gutter-width / 2)) + 5);
  } // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: @screen-sm-min) {
      .control-label {
        padding-top: ((@padding-large-vertical * @line-height-large) + 1);
        font-size: @font-size-large;
      }
    }
  }
  .form-group-sm {
    @media (min-width: @screen-sm-min) {
      .control-label {
        padding-top: (@padding-small-vertical + 1);
        font-size: @font-size-small;
      }
    }
  }
}

// Slide form action buttons into the viewport on long forms

.btn-save-wrapper {
  animation-duration: 0.5s;
  &.changed-remove-active {
    animation-duration: 0;
  }
}

.btn-save-wrapper.changed {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: (@zindex-navbar-fixed - 1);
  padding: 16px 48px; //defaults to device management vertical tabs spacing
  background-color: @component-background;
  transition: left 0.4s ease-in-out; //horizontal tabs

  .boxShadowHelper(3, top); //box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
  .mcontainerHorizontal & {
    left: 0;
    padding: 10px 15px;
  }
  .open & {
    left: @navigatorWidth;
  }
}

.open {
  .has-tabs.page-tabs-vertical + .container-fluid {
    .btn-save-wrapper.changed {
      left: @navigatorWidth + @nav-tabs-vertical-width;
    }
  }
}
