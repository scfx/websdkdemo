import { IFetchClient } from '../core';
export interface ICometdConfig {
    url: string;
    logLevel?: string;
    requestHeaders?: any;
    appendMessageTypeToURL?: boolean;
    stickyReconnect?: boolean;
}
export declare class Realtime {
    private client;
    private url;
    private cometd;
    /**
     * Allows to set up a realtime (websocket or long-polling) connection to the platform.
     * @param client The fetch client instance to use
     * @param url The URL to connect to
     * @param handshakeCallback A function which is called on succeeded or failed handshake
     */
    constructor(client: IFetchClient, url?: string, handshakeCallback?: any);
    /**
     * Subscribes to a realtime channel to listen for data.
     * @param channel The channel to connect to
     * @param callback A function to call when data is received
     */
    subscribe(channel: string, callback: (data: any) => void): object;
    /**
     * Cancels the listening to a channel.
     * @param subscription The subscription object returned by subscribe()
     */
    unsubscribe(subscription: object): object;
    /**
     * Disconnects the current connection.
     */
    disconnect(): void;
    private checkConnection;
    private handshake;
    private metaHandshake;
}
