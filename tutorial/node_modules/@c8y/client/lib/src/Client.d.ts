import { IAuthentication, ICredentials } from './core';
import { Realtime } from './realtime';
import { FetchClient, AlarmService, ApplicationService, AuditService, DeviceRegistrationBulkService, DeviceRegistrationService, EventService, InventoryBinaryService, InventoryRoleService, InventoryService, MeasurementService, OperationBulkService, OperationService, SystemOptionsService, TenantOptionsService, TenantSecurityOptionsService, TenantLoginOptionsService, TenantService, UserGroupService, UserRoleService, UserService, IdentityService, SmartGroupsService, SmartRulesService } from './services';
export interface IBootstrapOptions {
    deviceId: string;
    basicAuthToken: string;
    timeout?: number;
    expire?: number;
    baseUrl?: string;
}
export declare class Client {
    /**
     * Authenticates the given user. Determines the tenant by itself via a call to tenant/currentTenant.
     *
     * **Example**
     * ```typescript
     *
     * let client: Client;
     * (async () => {
     *  client = await Client.authenticate({
     *    user: 'testuser',
     *    password: 'password1337!'
     *  }, 'https://acme.cumulocity.com');
     *
     *  //you have access to the client api now
     *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });
     * })();
     * ```
     */
    static authenticate(credentials: ICredentials, baseUrl?: string): Promise<Client>;
    /**
     * Allows to use http to register a device on the platform.
     *
     * **Deprecated** Please use MQTT to bootstrap a device.
     */
    static deviceBootstrap(options: IBootstrapOptions): Promise<Client>;
    /**
     * Retrieves microservice credentials for the subscribed tenants
     * using provided bootstrap credentials
     *
     * **Example**
     * ```typescript
     *
     * (async () => {
     *  const subscriptions = await Client.getMicroserviceSubscriptions({
     *    tenant: process.env.C8Y_BOOTSTRAP_TENANT,
     *    user: process.env.C8Y_BOOTSTRAP_USER,
     *    password: process.env.C8Y_BOOTSTRAP_PASSWORD
     *  }, process.env.C8Y_BASEURL);
     *
     *  const clients = subscriptions.map(subscription => new Client(new BasicAuth(subscription), process.env.C8Y_BASEURL));
     *  // you have access to the client api now
     *  const promiseArray = clients.map(client => client.options.tenant.detail({
     *    category: process.env.APPLICATION_KEY,
     *    key: 'someSetting'
     *  }));
     * })();
     * ```
     */
    static getMicroserviceSubscriptions(bootstrapCredentials: ICredentials, baseUrl: string): Promise<ICredentials[]>;
    alarm: AlarmService;
    application: ApplicationService;
    audit: AuditService;
    core: FetchClient;
    deviceRegistration: DeviceRegistrationService;
    deviceRegistrationBulk: DeviceRegistrationBulkService;
    event: EventService;
    inventory: InventoryService;
    inventoryRole: InventoryRoleService;
    inventoryBinary: InventoryBinaryService;
    measurement: MeasurementService;
    operation: OperationService;
    operationBulk: OperationBulkService;
    options: {
        security: TenantSecurityOptionsService;
        system: SystemOptionsService;
        login: TenantLoginOptionsService;
        tenant: TenantOptionsService;
    };
    realtime: Realtime;
    role: InventoryRoleService;
    tenant: TenantService;
    user: UserService;
    userGroup: UserGroupService;
    userRole: UserRoleService;
    identity: IdentityService;
    smartGroups: SmartGroupsService;
    smartRules: SmartRulesService;
    /**
     * Initializes a new Client, which allows to request data from the API. Differently
     * to Client.authenticate([...]) it needs a tenant given and does not verify if the
     * login is correct.
     *
     * **Example**
     * ```typescript
     *
     * const auth = new BasicAuth({
     *   user: 'youruser',
     *   password: 'yourpassword',
     *   tenant: 'acme'
     * }); // use CookieAuth() if your platform uses oauth (only in browser!)
     *
     * const baseUrl = 'https://acme.cumulocity.com';
     * const client = new Client(auth, baseUrl);
     * (async () => {
     *   const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });
     * })();
     * ```
     *
     * @param auth The Authentication strategy to use (e.g. new BasicAuth())
     * @param baseUrl The URL to request (optional in browser, mandatory in node)
     */
    constructor(auth: IAuthentication, baseUrl?: string);
    /**
     * Allows to change the current Authentication
     * @param auth The new Authentication information.
     */
    setAuth(auth: IAuthentication): void;
}
