/// <reference types="node" />
import { Stream } from 'stream';
import { IFetchClient, IResult } from '../core';
import { IDeviceRegistrationBulkResult } from './IDeviceRegistrationBulkResult';
/**
 * This class allows for bulk registering devices.
 */
export declare class DeviceRegistrationBulkService {
    protected client: IFetchClient;
    /**
     * Instantiate class and assign client
     * @param {IFetchClient} client
     */
    constructor(client: IFetchClient);
    /**
     * A new device registration as bulk.
     *
     * @param {Stream | Buffer} csv
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const csvString = `
     *  ID,CREDENTIALS,TENANT,TYPE,NAME,ICCID,IDTYPE,PATH,SHELL
     *  e2eDeviceRegistrationId,e2epassword123!,e2edocker,c8y_e2eDevice,e2eDevice,123456789,89456,e2eDeviceGroup,1
     *  900001,e2epassword123!,e2edocker,c8y_e2eDevice1,e2eDevice1,123456789,89456,e2eDeviceGroup,1
     *  900002,e2epassword123!,e2edocker,c8y_e2eDevice2,e2eDevice2,123456789,89456,e2eDeviceGroup,1`.trim();
     *
     *  const csvBuffer = Buffer.from(csvString):
     *
     *  (async () => {
     *    const {data, res} = await deviceRegistrationBulkService.create(csvBuffer);
     *  })();
     * ```
     */
    create(inputFile: Stream | Buffer | File | Blob): Promise<IResult<IDeviceRegistrationBulkResult>>;
}
