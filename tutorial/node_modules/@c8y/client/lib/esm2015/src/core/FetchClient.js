var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fetch from 'cross-fetch';
let auths = new WeakMap(); // tslint:disable-line
export class FetchClient {
    constructor(authOrBaseUrl, baseUrl) {
        this.baseUrl = baseUrl;
        this.tenant = '';
        this.defaultHeaders = {};
        if (typeof authOrBaseUrl === 'string') {
            baseUrl = authOrBaseUrl;
        }
        else {
            this.setAuth(authOrBaseUrl);
        }
        this.baseUrl = this.resolveServerUrl(baseUrl);
    }
    setAuth(auth) {
        auths.set(this, auth);
    }
    fetch(url, init) {
        return __awaiter(this, void 0, void 0, function* () {
            let fetchFn = fetch;
            try {
                fetchFn = window.fetch || fetchFn;
            }
            catch (e) { /* do nothing */ }
            const fullUrl = this.getUrl(url, init);
            const options = this.getFetchOptions(init);
            return fetchFn(fullUrl, options);
        });
    }
    getUrl(url = '', options) {
        const params = options && options.params;
        let paramPart = '';
        if (params && Object.keys(params).length) {
            paramPart = Object.keys(params)
                .map((k) => {
                let vals = params[k];
                const encodedKey = encodeURIComponent(k);
                if (!Array.isArray(vals)) {
                    vals = [vals];
                }
                return vals.map((v) => `${encodedKey}=${encodeURIComponent(v)}`).join('&');
            })
                .join('&');
            paramPart = `?${paramPart}`;
        }
        const baseUrl = this.baseUrl.replace(/\/+$/, '').replace(/^\/+/, '');
        const partialUrl = url.replace(/\/+$/, '').replace(/^\/+/, '');
        return `${baseUrl}/${partialUrl}${paramPart}`;
    }
    getFetchOptions(options = {}) {
        const auth = auths.get(this);
        options.headers = Object.assign({}, this.defaultHeaders, options.headers, { UseXBasic: true });
        delete options.params;
        options = auth ? auth.getFetchOptions(options) : options;
        return options;
    }
    getCometdHandshake(config = {}) {
        const auth = auths.get(this);
        return auth ? auth.getCometdHandshake(config) : config;
    }
    resolveServerUrl(baseUrl = '') {
        if (baseUrl && baseUrl.startsWith('http')) {
            return baseUrl.replace(/\/+$/, '');
        }
        try {
            const location = window.location;
            return `${location.protocol}//${location.host}/${baseUrl.replace(/\/+$/, '')}`;
        }
        catch (ex) {
            throw Error('Your environment does not support relative URLs. Please provide a base URL.');
        }
    }
}
//# sourceMappingURL=FetchClient.js.map