var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * This class allwos for managing external identifiers.
 */
export class IdentityService {
    constructor(client) {
        this.baseUrl = 'identity';
        this.propertyName = 'externalIds';
        this.client = client;
    }
    /**
     * Gets the list of identities filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying identity.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await identityService.list(filter);
     *   })();
     * ```
     */
    list(managedObjectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = { accept: 'application/json' };
            const url = this.getExternalIdsOfGlobalIdUrl(managedObjectId);
            const res = yield this.fetch(url, { headers });
            const json = yield res.json();
            const data = json[this.propertyName];
            return { res, data };
        });
    }
    /**
     * Creates a new identity.
     *
     * @param {IExternalIdentity} identity Identity object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *   const linkedManagedObjectId = '123';
     *   const identity: IExternalIdentity = {
     *      type: 'type',
     *      externalId: '1',
     *      managedObject: {
     *        id: linkedManagedObjectId
     *      }
     *    };
     *
     *    (async () => {
     *      const {data, res} = await identityService.create(identity);
     *   })();
     * ```
     */
    create(identity) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const method = 'POST';
            const body = JSON.stringify(identity);
            const url = this.getExternalIdsOfGlobalIdUrl(identity.managedObject.id);
            const res = yield this.fetch(url, { headers, method, body });
            const data = yield res.json();
            return { res, data };
        });
    }
    /**
     * Gets the details of an identity.
     *
     * @param {IExternalIdentity} identity Identity object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const identity: IExternalIdentity = {
     *      type: 'type',
     *      externalId: '1'
     *    };
     *
     *    (async () => {
     *      const {data, res} = await identityService.detail(identity);
     *   })();
     * ```
     */
    detail(identity) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = { accept: 'application/json' };
            const url = this.getExternalIdUrl(identity);
            const res = yield this.fetch(url, { headers });
            const data = yield res.json();
            return { res, data };
        });
    }
    /**
     * Removes an identity with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IExternalIdentity} identity Identity object with mandantory fragments.
     *
     * **Example**
     * ```typescript
     *
     *   const identity: IExternalIdentity = {
     *      type: 'type',
     *      externalId: '1'
     *    };
     *
     *    (async () => {
     *      const {data, res} = await identityService.delete(identity);
     *   })();
     * ```
     */
    delete(identity) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = { accept: 'application/json' };
            const method = 'DELETE';
            const url = this.getExternalIdUrl(identity);
            const res = yield this.fetch(url, { headers, method });
            return { res, data: null };
        });
    }
    fetch(url, init) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.fetch(url, init);
            if (res.status >= 400) {
                let data = null;
                try {
                    data = yield res.json();
                }
                catch (ex) {
                    try {
                        data = yield res.text();
                    }
                    catch (ex) {
                        // do nothing
                    }
                }
                throw { res, data };
            }
            return res;
        });
    }
    getExternalIdsOfGlobalIdUrl(managedObjectId) {
        return `/${this.baseUrl}/globalIds/${managedObjectId}/externalIds`;
    }
    getExternalIdUrl(identity) {
        return `/${this.baseUrl}/externalIds/${identity.type}/${identity.externalId}`;
    }
}
//# sourceMappingURL=IdentityService.js.map