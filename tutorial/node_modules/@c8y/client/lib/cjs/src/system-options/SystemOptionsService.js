"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemOptionsService = void 0;
const core_1 = require("../core");
class SystemOptionsService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'tenant/system';
        this.listUrl = 'options';
        this.propertyName = 'options';
    }
    /**
     * Gets the details of given system option.
     *
     * @param {string|number|IIdentified} option System option object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const option: ISystemOption = {
     *      category: 'alarm.type.mapping',
     *      key: 'temp_to_high'
     *    };
     *
     *    (async () => {
     *      const {data, res} = await systemOptionsService.detail(option);
     *   })();
     * ```
     */
    detail(option) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, option);
        });
    }
    /**
     * Gets the list of system options filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying system options.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await systemOptionsService.list(filter);
     *   })();
     * ```
     */
    list(filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = { 'content-type': 'application/json' };
            const url = this.listUrl;
            const res = yield this.fetch(url, { headers, params: filter });
            const json = yield res.json();
            const data = json[this.propertyName];
            return { res, data };
        });
    }
    getDetailUrl(option) {
        return `${this.listUrl}/${option.category}/${option.key}`;
    }
    onBeforeCreate(obj) {
        return obj;
    }
}
exports.SystemOptionsService = SystemOptionsService;
//# sourceMappingURL=SystemOptionsService.js.map