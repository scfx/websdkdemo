"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CookieAuth = void 0;
const FetchClient_1 = require("./FetchClient");
/**
 * Allows to use Cookies for Authorization to the
 * Cumulocity API.
 */
class CookieAuth {
    constructor() {
        this.logoutUrl = 'user/logout';
    }
    updateCredentials({ user } = {}) {
        this.user = user;
        return undefined;
    }
    getFetchOptions(options) {
        const xsrfToken = this.getCookieValue('XSRF-TOKEN');
        const headers = { 'X-XSRF-TOKEN': xsrfToken };
        options.headers = Object.assign(headers, options.headers);
        return options;
    }
    getCometdHandshake(config = {}) {
        const KEY = 'com.cumulocity.authn';
        const xsrfToken = this.getCookieValue('XSRF-TOKEN');
        const ext = (config.ext = config.ext || {});
        ext[KEY] = Object.assign(ext[KEY] || {}, { xsrfToken });
        return config;
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.user) {
                delete this.user;
            }
            const client = new FetchClient_1.FetchClient();
            client.setAuth(this);
            const method = 'POST';
            const body = JSON.stringify({});
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            return client.fetch(this.logoutUrl, { headers, body, method });
        });
    }
    getCookieValue(name) {
        const value = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
        return value ? value.pop() : '';
    }
}
exports.CookieAuth = CookieAuth;
//# sourceMappingURL=CookieAuth.js.map