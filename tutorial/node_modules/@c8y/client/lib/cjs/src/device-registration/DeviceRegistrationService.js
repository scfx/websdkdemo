"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceRegistrationService = void 0;
const b2a_1 = require("b2a");
const core_1 = require("../core");
const DeviceRegistrationStatus_1 = require("./DeviceRegistrationStatus");
/**
 * This class allows registration of a new device.
 */
class DeviceRegistrationService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'devicecontrol';
        this.listUrl = 'newDeviceRequests';
        this.propertyName = 'newDeviceRequests';
    }
    /**
     * Gets the details of device registration.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const entityId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await deviceRegistrationService.detail(entityId);
     *    })();
     * ```
     */
    detail(entityOrId) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, entityOrId);
        });
    }
    /**
     * Creates a new device registration.
     *
     * @param {IDeviceRegistrationCreate} entity Device registration object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const mandantoryObject: IDeviceRegistrationCreate = {
     *      id: 1,
     *    };
     *
     *    (async () => {
     *      const {data, res} = await deviceRegistrationService.create(mandantoryObject);
     *    })();
     * ```
     */
    create(entity) {
        const _super = Object.create(null, {
            create: { get: () => super.create }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.create.call(this, entity);
        });
    }
    /**
     * Gets the list of device registrations by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying registrations.
     *
     * **Example**
     * ```typescript
     *
     *   const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await deviceRegistrationService.list(filter);
     *   })();
     * ```
     */
    list(filter = {}) {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this, filter);
        });
    }
    /**
     * Removes an registration with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId entity or id of the registration.
     *
     * **Example**
     * ```typescript
     *
     *   const id = 'abc';
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.delete(id);
     *     // data will be null
     *   })();
     * ```
     */
    delete(entityOrId) {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, entityOrId);
        });
    }
    /**
     * Accepts the device registration for given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId entity or id of registration.
     *
     * **Example**
     * ```typescript
     *
     *   const id = 'abc';
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.accept(id);
     *   })();
     * ```
     */
    accept(entityOrId) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = this.getIdString(entityOrId);
            const update = Object.getPrototypeOf(this).update.bind(this);
            return update({ id, status: DeviceRegistrationStatus_1.DeviceRegistrationStatus.ACCEPTED });
        });
    }
    /**
     * Bootstraps the device with given id.
     *
     * @param entityOrId entity or id of registration.
     * @param options for details see [[IDeviceBootstrapOptions]]
     *
     * **Example**
     * ```typescript
     *
     *   const id: 'abc';
     *   const options: IDeviceBootstrapOptions = {
     *     basicAuthToken: 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk',
     *     basicAuth: {
     *       user: 'username',
     *       pass: 'password'
     *     }
     *   };
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.bootstrap(id, options);
     *   })();
     * ```
     */
    bootstrap(entityOrId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = this.getIdString(entityOrId);
            const body = JSON.stringify({ id });
            const url = `${this.baseUrl}/deviceCredentials`;
            const { basicAuth } = options;
            let { basicAuthToken } = options;
            if (basicAuth) {
                const { user, pass } = basicAuth;
                basicAuthToken = b2a_1.btoa(`${user}:${pass}`);
            }
            const headers = {
                Authorization: `Basic ${basicAuthToken}`,
                accept: 'application/json',
                'content-type': 'application/json',
            };
            const method = 'POST';
            const res = yield this.client.fetch(url, { body, headers, method });
            const data = yield res.json();
            if (res.status > 400) {
                throw { res, data };
            }
            return { res, data };
        });
    }
    onBeforeCreate(entity) {
        return entity;
    }
    onBeforeUpdate(entity) {
        const noIdEntity = Object.assign({}, entity);
        delete noIdEntity.id;
        return noIdEntity;
    }
}
exports.DeviceRegistrationService = DeviceRegistrationService;
//# sourceMappingURL=DeviceRegistrationService.js.map