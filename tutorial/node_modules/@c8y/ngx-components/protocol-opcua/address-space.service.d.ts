import { FetchClient } from '@c8y/client';
import { Observable } from 'rxjs';
export declare class AddressSpaceService {
    private nodeNavigationData$;
    private client;
    private microserviceUrl;
    private header;
    constructor(fetchClient: FetchClient);
    resetTreeToRootNode(): void;
    triggerNodeToOpen(nodeNavigationData: NodeNavigationData): void;
    getNodeNavData$(): Observable<NodeNavigationData>;
    getNode(serverId: string, nodeId?: string): Promise<import("@c8y/client").IFetchResponse>;
    getRootNode(serverId: string): Promise<import("@c8y/client").IFetchResponse>;
    getNodeById(serverId: string, nodeId: string): Promise<import("@c8y/client").IFetchResponse>;
    getChildrenOf(node: AddressSpaceNode, serverId: string): Promise<import("@c8y/client").IFetchResponse>;
    childrenAvailable(nodeReferences: AdressSpaceNodeReference[]): boolean;
    getSearchedNodes(searchKey: string, serverId: string): Promise<any>;
    getIcon(nodeClassName: string): any;
}
export interface AddressSpaceNode {
    nodeId: string;
    currentlyLoadingChildren?: boolean;
    nodeClass?: number;
    nodeClassName?: string;
    browseName?: string;
    displayName?: string;
    description?: any;
    references?: AdressSpaceNodeReference[];
    ancestorNodeIds?: [string[]];
    children: AddressSpaceNode[];
    expanded: boolean;
    absolutePaths: [string[]];
    relativePath?: string[];
    parentNode?: AddressSpaceNode;
}
export interface AdressSpaceNodeReference {
    referenceId: string;
    targetId: string;
    inverse: boolean;
    hierarchical: boolean;
}
export interface SearchedNode {
    absolutePath: string[];
    ancestorNodeIds: [string[]];
    displayName: string;
    nodeClassName: string;
    nodeId: string;
}
export interface NodeNavigationData {
    node: AddressSpaceNode;
    selectedAncestorIds: string[];
}
