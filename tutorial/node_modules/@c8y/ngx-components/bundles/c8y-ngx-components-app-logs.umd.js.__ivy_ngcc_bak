(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/client'), require('rxjs'), require('rxjs/operators'), require('@c8y/ngx-components'), require('ngx-bootstrap/buttons')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/app-logs', ['exports', '@angular/core', '@c8y/client', 'rxjs', 'rxjs/operators', '@c8y/ngx-components', 'ngx-bootstrap/buttons'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["app-logs"] = {}), global.ng.core, global.client, global.rxjs, global.rxjs.operators, global.c8y["ngx-components"], global.buttons));
})(this, (function (exports, core, client, rxjs, operators, ngxComponents, buttons) { 'use strict';

    var AppLogsService = /** @class */ (function () {
        function AppLogsService(client) {
            this.client = client;
            this.BASE_PATH_APPLICATION = 'application/applications';
            this.header = {
                Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
            };
        }
        AppLogsService.prototype.getLogs$ = function (appId, instanceName, params) {
            if (params === void 0) { params = {}; }
            var url = this.BASE_PATH_APPLICATION + "/" + appId + "/logs/" + instanceName;
            var defaultConfig = {
                headers: this.header,
                method: 'GET'
            };
            var formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
            var formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
            var modifiedParams = Object.assign(Object.assign(Object.assign({}, params), (formattedDateFrom && { dateFrom: formattedDateFrom })), (formattedDateTo && { dateTo: formattedDateTo }));
            var config = params ? Object.assign(Object.assign({}, defaultConfig), { params: modifiedParams }) : Object.assign({}, defaultConfig);
            return rxjs.from(this.client.fetch(url, config)).pipe(operators.flatMap(function (res) { return res.json(); }));
        };
        AppLogsService.prototype.formatDate = function (dateToFormat) {
            return new Date(dateToFormat).toISOString();
        };
        return AppLogsService;
    }());
    AppLogsService.decorators = [
        { type: core.Injectable }
    ];
    AppLogsService.ctorParameters = function () { return [
        { type: client.FetchClient }
    ]; };

    var AppLogsAutoRefreshComponent = /** @class */ (function () {
        function AppLogsAutoRefreshComponent(appLogsService) {
            this.appLogsService = appLogsService;
            this.cancel$ = new rxjs.Subject();
            this.isAutoRefreshDisabled = false;
            this.logsToOutput = this.getEmptyLogsJson();
            this.isAutoRefreshOn = true;
            this.onNewLogs = new core.EventEmitter();
            this.isRealtimeEnabled = new core.EventEmitter();
            this.toggleState = function (currentState) { return !currentState; };
        }
        Object.defineProperty(AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", {
            set: function (areDisabled) {
                this.isAutoRefreshDisabled = areDisabled;
                if (areDisabled && this.isAutoRefreshOn) {
                    this.isAutoRefreshOn = false;
                    this.cancel$.next(false);
                }
            },
            enumerable: false,
            configurable: true
        });
        AppLogsAutoRefreshComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var clicks$ = rxjs.fromEvent(this.button.nativeElement, 'click').pipe(operators.merge(this.cancel$), operators.debounce(function () { return rxjs.interval(300); }), operators.scan(this.toggleState, false), operators.tap(function (isAutoRefreshOn) { return _this.setButtonState(isAutoRefreshOn); }), operators.switchMap(function (isOn) { return (isOn ? _this.watchForNewLogs() : rxjs.NEVER); }));
            this.subscription = clicks$.subscribe();
        };
        AppLogsAutoRefreshComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        AppLogsAutoRefreshComponent.prototype.setButtonState = function (isAutoRefreshOn) {
            this.isAutoRefreshOn = isAutoRefreshOn;
            this.isRealtimeEnabled.emit(isAutoRefreshOn);
        };
        AppLogsAutoRefreshComponent.prototype.watchForNewLogs = function () {
            var _this = this;
            return this.startPolling().pipe(operators.takeUntil(this.cancel$.pipe(operators.filter(function (isAutoRefreshOn) { return isAutoRefreshOn === false; }))), operators.finalize(function () {
                _this.isAutoRefreshOn = false;
            }));
        };
        AppLogsAutoRefreshComponent.prototype.startPolling = function () {
            var _this = this;
            return rxjs.of(1).pipe(operators.switchMap(function () { return _this.getNewLogs().pipe(operators.catchError(function (er) { return rxjs.of(_this.getEmptyLogsJson()); })); }), operators.tap(function (logs) { return _this.updateLogsToOutput(logs); }), operators.delay(10000), operators.repeat());
        };
        AppLogsAutoRefreshComponent.prototype.getNewLogs = function () {
            return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
        };
        AppLogsAutoRefreshComponent.prototype.getAppId = function () {
            return this.mo.applicationId;
        };
        AppLogsAutoRefreshComponent.prototype.getInstanceName = function () {
            return this.selectedInstance.name;
        };
        AppLogsAutoRefreshComponent.prototype.updateLogsToOutput = function (newLogs) {
            var dateFrom = newLogs.dateFrom, dateTo = newLogs.dateTo;
            if (dateFrom && dateTo) {
                this.logsToOutput = Object.assign({}, newLogs);
                this.onNewLogs.emit(this.logsToOutput);
            }
        };
        AppLogsAutoRefreshComponent.prototype.getEmptyLogsJson = function () {
            return {
                dateFrom: null,
                dateTo: null,
                logs: '',
                truncated: false
            };
        };
        return AppLogsAutoRefreshComponent;
    }());
    AppLogsAutoRefreshComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-app-logs-auto-refresh',
                    template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
                },] }
    ];
    AppLogsAutoRefreshComponent.ctorParameters = function () { return [
        { type: AppLogsService }
    ]; };
    AppLogsAutoRefreshComponent.propDecorators = {
        selectedInstance: [{ type: core.Input }],
        mo: [{ type: core.Input }],
        buttonsDisabled: [{ type: core.Input }],
        onNewLogs: [{ type: core.Output }],
        isRealtimeEnabled: [{ type: core.Output }],
        button: [{ type: core.ViewChild, args: ['autoRefresh', { static: true },] }]
    };

    var AppLogsAutoRefreshModule = /** @class */ (function () {
        function AppLogsAutoRefreshModule() {
        }
        return AppLogsAutoRefreshModule;
    }());
    AppLogsAutoRefreshModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [AppLogsAutoRefreshComponent],
                    exports: [AppLogsAutoRefreshComponent],
                    imports: [ngxComponents.CommonModule, buttons.ButtonsModule],
                    entryComponents: [AppLogsAutoRefreshComponent],
                    providers: [AppLogsService]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AppLogsAutoRefreshComponent = AppLogsAutoRefreshComponent;
    exports.AppLogsAutoRefreshModule = AppLogsAutoRefreshModule;
    exports.AppLogsService = AppLogsService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-app-logs.umd.js.map
