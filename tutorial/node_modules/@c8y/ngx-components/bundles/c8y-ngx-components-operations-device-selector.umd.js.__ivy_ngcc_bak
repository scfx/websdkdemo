(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components/device-grid'), require('@c8y/ngx-components'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/device-selector', ['exports', '@angular/core', '@c8y/ngx-components/device-grid', '@c8y/ngx-components', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["device-selector"] = {}), global.ng.core, global.c8y["ngx-components"]["device-grid"], global.c8y["ngx-components"], global.rxjs, global.rxjs.operators));
})(this, (function (exports, core, deviceGrid, ngxComponents, rxjs, operators) { 'use strict';

    var DeviceSelectorComponent = /** @class */ (function () {
        function DeviceSelectorComponent() {
            this.typeColumn = new deviceGrid.TypeDeviceGridColumn();
            this.onDeviceQueryStringChange = new core.EventEmitter();
            this.columns = [
                new deviceGrid.StatusDeviceGridColumn(),
                new deviceGrid.NameDeviceGridColumn(),
                this.typeColumn,
                new deviceGrid.ModelDeviceGridColumn(),
                new deviceGrid.GroupDeviceGridColumn(),
                new deviceGrid.RegistrationDateDeviceGridColumn(),
                new deviceGrid.AlarmsDeviceGridColumn()
            ];
            this.unsubscribe$ = new rxjs.Subject();
        }
        DeviceSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.deviceTypes) {
                this.deviceTypes
                    .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.unsubscribe$))
                    .subscribe(function (types) {
                    _this.deviceGrid.updateFiltering([_this.typeColumn.name], {
                        type: types && types.length
                            ? ngxComponents.FilteringActionType.ApplyFilter
                            : ngxComponents.FilteringActionType.ResetFilter,
                        payload: types
                            ? {
                                filteringModifier: {
                                    externalFilterQuery: {
                                        types: types
                                    }
                                }
                            }
                            : undefined
                    });
                });
            }
        };
        DeviceSelectorComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next(true);
            this.unsubscribe$.complete();
        };
        return DeviceSelectorComponent;
    }());
    DeviceSelectorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-selector',
                    template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n"
                },] }
    ];
    DeviceSelectorComponent.propDecorators = {
        deviceGrid: [{ type: core.ViewChild, args: [deviceGrid.DeviceGridComponent, { static: true },] }],
        deviceTypes: [{ type: core.Input }],
        onDeviceQueryStringChange: [{ type: core.Output }]
    };

    /**
     * This module provides a component for selecting devices based on filters.
     */
    var DeviceSelectorModule = /** @class */ (function () {
        function DeviceSelectorModule() {
        }
        return DeviceSelectorModule;
    }());
    DeviceSelectorModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [ngxComponents.CoreModule, deviceGrid.DeviceGridModule],
                    declarations: [DeviceSelectorComponent],
                    exports: [DeviceSelectorComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DeviceSelectorComponent = DeviceSelectorComponent;
    exports.DeviceSelectorModule = DeviceSelectorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-device-selector.umd.js.map
