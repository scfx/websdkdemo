(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/forms'),require('@c8y/ngx-components'),require('@angular/common'),require('@c8y/ngx-components/operations/bulk-operation-scheduler'),exports, require('@angular/core'), require('@angular/forms'), require('@c8y/ngx-components'), require('lodash-es'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('@c8y/ngx-components/operations/bulk-operation-scheduler')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/details', ['@angular/core','@angular/forms','@c8y/ngx-components','@angular/common','@c8y/ngx-components/operations/bulk-operation-scheduler','exports', '@angular/core', '@angular/forms', '@c8y/ngx-components', 'lodash-es', '@c8y/ngx-components/operations/bulk-operations-service', '@c8y/ngx-components/operations/bulk-operation-scheduler'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.forms,global.c8y.ngxComponents,global.ng.common,global.c8y.ngxComponents.operations.bulkOperationScheduler,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations.details = {}), global.ng.core, global.ng.forms, global.c8y["ngx-components"], global.lodashEs, global.c8y["ngx-components"].operations["bulk-operations-service"], global.c8y["ngx-components"].operations["bulk-operation-scheduler"]));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,exports, core, forms, ngxComponents, lodashEs, bulkOperationsService, bulkOperationScheduler) { 
function OperationDetailsComponent_c8y_messages_6_c8y_message_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-message", 1);
    ɵngcc0.ɵɵtext(1, " This field is required. ");
    ɵngcc0.ɵɵelementEnd();
} }
function OperationDetailsComponent_c8y_messages_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-messages");
    ɵngcc0.ɵɵtemplate(1, OperationDetailsComponent_c8y_messages_6_c8y_message_1_Template, 2, 0, "c8y-message", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.fgOperationDescription.controls.description.errors.required);
} }
'use strict';

    var OperationDetailsComponent = /** @class */ (function () {
        function OperationDetailsComponent(formBuilder) {
            var _a;
            this.formBuilder = formBuilder;
            this.titlePlaceholder = ngxComponents.gettext('e.g. Reset factory settings');
            this.descriptionPlaceholder = ngxComponents.gettext('e.g. Reset factory settings of all devices of model XYZ');
            this.placeholders = (_a = {},
                _a[bulkOperationsService.BulkOperationType.SOFTWARE] = {
                    title: ngxComponents.gettext('e.g. Cloud connectivity software'),
                    description: ngxComponents.gettext('e.g. Cloud connectivity software applied to devices with type c8y_Linux')
                },
                _a[bulkOperationsService.BulkOperationType.FIRMWARE] = {
                    title: ngxComponents.gettext('e.g. Firmware for hardware revision b'),
                    description: ngxComponents.gettext('e.g. Firmware for hardware revision b applied to devices with type c8y_Linux')
                },
                _a[bulkOperationsService.BulkOperationType.CONFIGURATION] = {
                    title: ngxComponents.gettext('e.g. Host configuration c8y_Linux'),
                    description: ngxComponents.gettext('e.g. Host configuration applied to devices with type c8y_Linux')
                },
                _a[bulkOperationsService.BulkOperationType.DEVICE_PROFILE] = {
                    title: ngxComponents.gettext('e.g. Device profile for c8y_Linux devices'),
                    description: ngxComponents.gettext('e.g. Device profile applied to devices with type c8y_Linux')
                },
                _a);
        }
        Object.defineProperty(OperationDetailsComponent.prototype, "bulkOperationType", {
            set: function (bulkOperationType) {
                this.titlePlaceholder = lodashEs.get(this.placeholders[bulkOperationType], 'title');
                this.descriptionPlaceholder = lodashEs.get(this.placeholders[bulkOperationType], 'description');
            },
            enumerable: false,
            configurable: true
        });
        OperationDetailsComponent.prototype.ngOnInit = function () {
            var config = {
                description: ['', forms.Validators.required],
                note: [''],
                schedule: []
            };
            this.fgOperationDescription = this.formBuilder.group(config);
        };
OperationDetailsComponent.ɵfac = function OperationDetailsComponent_Factory(t) { return new (t || OperationDetailsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder)); };
OperationDetailsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OperationDetailsComponent, selectors: [["c8y-operation-details"]], inputs: { bulkOperationType: "bulkOperationType" }, decls: 13, vars: 8, consts: [[3, "formGroup"], ["translate", ""], ["formControlName", "description", "required", "", 1, "form-control", 3, "placeholder"], [4, "ngIf"], ["formControlName", "note", "rows", "3", 1, "form-control", 3, "placeholder"], ["formControlName", "schedule"], ["translate", "", 4, "ngIf"]], template: function OperationDetailsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(2, "label", 1);
        ɵngcc0.ɵɵtext(3, "Title");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "input", 2);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵtemplate(6, OperationDetailsComponent_c8y_messages_6_Template, 2, 1, "c8y-messages", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(8, "label", 1);
        ɵngcc0.ɵɵtext(9, "Description");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "textarea", 4);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "c8y-operation-scheduler", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.fgOperationDescription);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(5, 4, ctx.titlePlaceholder));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fgOperationDescription == null ? null : ctx.fgOperationDescription.controls == null ? null : ctx.fgOperationDescription.controls.description == null ? null : ctx.fgOperationDescription.controls.description.errors);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(11, 6, ctx.descriptionPlaceholder));
    } }, directives: [ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc2.FormGroupComponent, ɵngcc2.C8yTranslateDirective, ɵngcc1.DefaultValueAccessor, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc1.RequiredValidator, ɵngcc3.NgIf, ɵngcc4.OperationSchedulerComponent, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationDetailsComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-operation-details',
                template: "<div [formGroup]=\"fgOperationDescription\">\n  <c8y-form-group>\n    <label translate>Title</label>\n    <input\n      formControlName=\"description\"\n      class=\"form-control\"\n      [placeholder]=\"titlePlaceholder | translate\"\n      required\n    />\n    <c8y-messages *ngIf=\"fgOperationDescription?.controls?.description?.errors\">\n      <c8y-message *ngIf=\"fgOperationDescription.controls.description.errors.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label translate>Description</label>\n    <textarea\n      formControlName=\"note\"\n      class=\"form-control\"\n      [placeholder]=\"descriptionPlaceholder | translate\"\n      rows=\"3\"\n    ></textarea>\n  </c8y-form-group>\n  <c8y-operation-scheduler formControlName=\"schedule\"></c8y-operation-scheduler>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }]; }, { bulkOperationType: [{
            type: core.Input
        }] }); })();
        return OperationDetailsComponent;
    }());
    OperationDetailsComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    OperationDetailsComponent.propDecorators = {
        bulkOperationType: [{ type: core.Input }]
    };

    /**
     * This module provides a component for entering operation details.
     */
    var OperationDetailsModule = /** @class */ (function () {
        function OperationDetailsModule() {
        }
OperationDetailsModule.ɵfac = function OperationDetailsModule_Factory(t) { return new (t || OperationDetailsModule)(); };
OperationDetailsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OperationDetailsModule });
OperationDetailsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ngxComponents.CoreModule, ngxComponents.FormsModule, forms.ReactiveFormsModule, bulkOperationScheduler.BulkOperationSchedulerModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationDetailsModule, [{
        type: core.NgModule,
        args: [{
                imports: [ngxComponents.CoreModule, ngxComponents.FormsModule, forms.ReactiveFormsModule, bulkOperationScheduler.BulkOperationSchedulerModule],
                declarations: [OperationDetailsComponent],
                exports: [OperationDetailsComponent]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OperationDetailsModule, { declarations: [OperationDetailsComponent], imports: [ɵngcc2.CoreModule, ɵngcc2.FormsModule, ɵngcc1.ReactiveFormsModule, ɵngcc4.BulkOperationSchedulerModule], exports: [OperationDetailsComponent] }); })();
        return OperationDetailsModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OperationDetailsComponent = OperationDetailsComponent;
    exports.OperationDetailsModule = OperationDetailsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-operations-details.umd.js.map