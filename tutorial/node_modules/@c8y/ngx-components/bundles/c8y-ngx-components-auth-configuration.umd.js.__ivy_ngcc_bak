(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/client'), require('lodash-es'), require('@angular/forms'), require('@angular/router'), require('ngx-bootstrap/popover'), require('rxjs/operators'), require('rxjs'), require('@ngx-translate/core')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/auth-configuration', ['exports', '@angular/core', '@c8y/ngx-components', '@c8y/client', 'lodash-es', '@angular/forms', '@angular/router', 'ngx-bootstrap/popover', 'rxjs/operators', 'rxjs', '@ngx-translate/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["auth-configuration"] = {}), global.ng.core, global.c8y["ngx-components"], global.client, global.lodashEs, global.ng.forms, global.ng.router, global.popover, global.rxjs.operators, global.rxjs, global.core$1));
})(this, (function (exports, core, ngxComponents, client, lodashEs, forms, router, popover, operators, rxjs, core$1) { 'use strict';

    var BasicAuthSettingsComponent = /** @class */ (function () {
        function BasicAuthSettingsComponent(tenantLoginOptionsService, tenantUiService) {
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.tenantUiService = tenantUiService;
            this.preferredLoginOptionType = client.TenantLoginOptionType.BASIC;
            this.tenantLoginOptionTypeEnum = client.TenantLoginOptionType;
        }
        BasicAuthSettingsComponent.prototype.ngOnChanges = function (changes) {
            if (changes.authConfiguration && changes.authConfiguration.currentValue) {
                var loginOptions = changes.authConfiguration.currentValue.loginOptions;
                var basic = loginOptions.find(this.tenantUiService.isBasic) || {};
                basic.authenticationRestrictions = lodashEs.defaults({}, lodashEs.omitBy(basic.authenticationRestrictions, lodashEs.isEmpty), {
                    forbiddenUserAgents: [''],
                    trustedUserAgents: [''],
                    forbiddenClients: []
                });
                this.forbiddenUserAgents = basic.authenticationRestrictions.forbiddenUserAgents.map(function (val) { return ({ value: val }); });
                this.trustedUserAgents = basic.authenticationRestrictions.trustedUserAgents.map(function (val) { return ({ value: val }); });
                this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;
            }
        };
        BasicAuthSettingsComponent.prototype.ngDoCheck = function () {
            if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {
                this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;
            }
        };
        Object.defineProperty(BasicAuthSettingsComponent.prototype, "forbiddenWebBrowsers", {
            get: function () {
                return this.authenticationRestrictions.forbiddenClients.includes('WEB_BROWSERS');
            },
            set: function (value) {
                this.authenticationRestrictions.forbiddenClients = value ? ['WEB_BROWSERS'] : [];
            },
            enumerable: false,
            configurable: true
        });
        BasicAuthSettingsComponent.prototype.forbiddenUserAgentsChanged = function (_a) {
            var event = _a.event, index = _a.index;
            this.forbiddenUserAgents[index].value = event;
            this.authenticationRestrictions.forbiddenUserAgents[index] = event;
        };
        BasicAuthSettingsComponent.prototype.forbiddenUserAgentsRemove = function (index) {
            this.authenticationRestrictions.forbiddenUserAgents.splice(index, 1);
            this.remove(this.forbiddenUserAgents, index);
        };
        BasicAuthSettingsComponent.prototype.trustedUserAgentsChanged = function (_a) {
            var event = _a.event, index = _a.index;
            this.trustedUserAgents[index].value = event;
            this.authenticationRestrictions.trustedUserAgents[index] = event;
        };
        BasicAuthSettingsComponent.prototype.trustedUserAgentsRemove = function (index) {
            this.authenticationRestrictions.trustedUserAgents.splice(index, 1);
            this.remove(this.trustedUserAgents, index);
        };
        Object.defineProperty(BasicAuthSettingsComponent.prototype, "authenticationRestrictions", {
            get: function () {
                return this.authConfiguration.loginOptions.find(this.tenantUiService.isBasic)
                    .authenticationRestrictions;
            },
            enumerable: false,
            configurable: true
        });
        BasicAuthSettingsComponent.prototype.add = function (collection) {
            collection.push({ value: '' });
        };
        BasicAuthSettingsComponent.prototype.remove = function (collection, index) {
            collection.splice(index, 1);
            if (!collection.length) {
                collection.push({ value: '' });
            }
        };
        return BasicAuthSettingsComponent;
    }());
    BasicAuthSettingsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-basic-auth-settings',
                    template: "<div class=\"card-block separator-top\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Basic Auth restrictions' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label class=\"c8y-switch\" title=\"{{ 'Forbidden for web browsers' | translate }}\">\n            <input\n              type=\"checkbox\"\n              name=\"forbiddenWebBrowsers\"\n              [(ngModel)]=\"forbiddenWebBrowsers\"\n            />\n            <span></span>\n            <span>{{ 'Forbidden for web browsers' | translate }}</span>\n          </label>\n          <div class=\"alert alert-warning\" *ngIf=\"preferredLoginOptionType === tenantLoginOptionTypeEnum.BASIC && forbiddenWebBrowsers\">\n            {{ 'You are about to forbid browsers from using Basic authentication. This will prevent users from using web applications on your tenant because you are going to set Basic authentication as the preferred login mode.' | translate }}\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <label title=\"{{ 'Forbidden user agents' | translate }}\">{{ 'Forbidden user agents' | translate }}</label>\n        <div\n          class=\"input-group m-t-8\"\n          *ngFor=\"\n            let forbiddenUserAgent of forbiddenUserAgents;\n            index as i;\n            last as isLast\n          \"\n        >\n          <input\n            type=\"text\"\n            [name]=\"'forbiddenUserAgent' + i\"\n            [ngModel]=\"forbiddenUserAgent.value\"\n            (ngModelChange)=\"forbiddenUserAgentsChanged({event: $event, index: i})\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} forbidden-agent\"\n          />\n          <div class=\"input-group-btn col-sm-2\">\n            <button\n              title=\"{{ 'Remove' | translate }}\"\n              type=\"button\"\n              (click)=\"forbiddenUserAgentsRemove(i)\"\n              class=\"btn btn-clean text-primary\"\n            >\n              <i class=\"dlt-c8y-icon-minus-circle text-danger\"></i>\n            </button>\n            <button\n              title=\"{{ 'Add' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-clean text-primary\"\n              (click)=\"add(forbiddenUserAgents)\"\n              *ngIf=\"isLast\"\n            >\n              <i class=\"dlt-c8y-icon-plus-circle\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-sm-6\">\n        <label title=\"{{ 'Trusted user agents' | translate }}\">{{ 'Trusted user agents' | translate }}</label>\n        <div\n          class=\"input-group m-t-8\"\n          *ngFor=\"\n            let trustedUserAgent of trustedUserAgents;\n            index as i;\n            last as isLast\n          \"\n        >\n          <input\n            type=\"text\"\n            [name]=\"'trustedUserAgent' + i\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} trusted-agent\"\n            [ngModel]=\"trustedUserAgent.value\"\n            (ngModelChange)=\"trustedUserAgentsChanged({event: $event, index: i})\"\n          />\n          <div class=\"input-group-btn col-sm-2\">\n            <button\n              title=\"{{ 'Remove' | translate }}\"\n              type=\"button\"\n              (click)=\"trustedUserAgentsRemove(i)\"\n              class=\"btn btn-clean text-primary\"\n            >\n              <i class=\"dlt-c8y-icon-minus-circle text-danger\"></i>\n            </button>\n            <button\n              title=\"{{ 'Add' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-clean text-primary\"\n              (click)=\"add(trustedUserAgents)\"\n              *ngIf=\"isLast\"\n            >\n              <i class=\"dlt-c8y-icon-plus-circle\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    BasicAuthSettingsComponent.ctorParameters = function () { return [
        { type: client.TenantLoginOptionsService },
        { type: ngxComponents.TenantUiService }
    ]; };
    BasicAuthSettingsComponent.propDecorators = {
        authConfiguration: [{ type: core.Input }]
    };

    var TabsFactory = /** @class */ (function () {
        function TabsFactory(router) {
            this.router = router;
        }
        TabsFactory.prototype.get = function () {
            var tabs = [];
            if (this.router.url.match(/auth-configuration/g)) {
                tabs.push({
                    path: 'auth-configuration/basic_settings',
                    label: ngxComponents.gettext('Basic settings'),
                    icon: 'c8y-icon dlt-c8y-icon-unlock-alt',
                    priority: 1100,
                    orientation: 'horizontal'
                });
                tabs.push({
                    path: 'auth-configuration/single_sign-on',
                    label: ngxComponents.gettext('Single sign-on'),
                    icon: 'c8y-icon dlt-c8y-icon-sign-in',
                    priority: 1050,
                    orientation: 'horizontal'
                });
            }
            return tabs;
        };
        return TabsFactory;
    }());
    TabsFactory.decorators = [
        { type: core.Injectable }
    ];
    TabsFactory.ctorParameters = function () { return [
        { type: router.Router }
    ]; };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var NavigationFactory = /** @class */ (function () {
        function NavigationFactory(permissions) {
            this.permissions = permissions;
            this.navs = [];
        }
        NavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                var userHasPermission;
                return __generator(this, function (_a) {
                    userHasPermission = this.permissions.hasAnyRole([
                        'ROLE_TENANT_ADMIN',
                        'ROLE_TENANT_MANAGEMENT_ADMIN'
                    ]);
                    if (this.navs.length === 0 && userHasPermission) {
                        this.navs.push(new ngxComponents.NavigatorNode({
                            label: ngxComponents.gettext('Authentication'),
                            icon: 'c8y-shield',
                            path: '/auth-configuration',
                            parent: ngxComponents.gettext('Settings'),
                            priority: 2000
                        }));
                    }
                    return [2 /*return*/, this.navs];
                });
            });
        };
        return NavigationFactory;
    }());
    NavigationFactory.decorators = [
        { type: core.Injectable }
    ];
    NavigationFactory.ctorParameters = function () { return [
        { type: ngxComponents.Permissions }
    ]; };

    var AuthConfigurationGuard = /** @class */ (function () {
        function AuthConfigurationGuard(permissions) {
            this.permissions = permissions;
        }
        AuthConfigurationGuard.prototype.canActivate = function () {
            return this.permissions.hasAnyRole([
                'ROLE_TENANT_ADMIN',
                'ROLE_TENANT_MANAGEMENT_ADMIN'
            ]);
        };
        return AuthConfigurationGuard;
    }());
    AuthConfigurationGuard.decorators = [
        { type: core.Injectable }
    ];
    AuthConfigurationGuard.ctorParameters = function () { return [
        { type: ngxComponents.Permissions }
    ]; };

    var AuthConfigurationService = /** @class */ (function () {
        function AuthConfigurationService(tenantLoginOptionsService, tenantOptionsService, systemOptionsService, applicationService, tenantUiService) {
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.tenantOptionsService = tenantOptionsService;
            this.systemOptionsService = systemOptionsService;
            this.applicationService = applicationService;
            this.tenantUiService = tenantUiService;
            this.systemOptionsWithDefaultValue = [
                { category: 'password', key: 'limit.validity', value: null },
                { category: 'password', key: 'enforce.strength', value: 'false' },
                { category: 'two-factor-authentication', key: 'tenant-scope-settings.enabled', value: 'false' },
                { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
                { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
                { category: 'two-factor-authentication', key: 'enforced.group', value: '' }
            ];
            this.tenantOptionsWithDefaultValue = [
                { category: 'password', key: 'limit.validity', value: '0' },
                { category: 'password', key: 'strength.validity', value: 'false' },
                { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
                { category: 'two-factor-authentication', key: 'token.validity', value: '43200' },
                { category: 'two-factor-authentication', key: 'pin.validity', value: '30' },
                { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
                { category: 'two-factor-authentication', key: 'strategy', value: 'SMS' },
                { category: 'oauth.internal', key: 'basic-token.lifespan.seconds', value: null }
            ];
        }
        AuthConfigurationService.prototype.getAuthConfiguration$ = function () {
            var loginOptions$ = this.getLoginOptions$();
            return rxjs.forkJoin({
                loginOptions: loginOptions$,
                tenantOptions: this.getTenantOptions$(),
                systemOptions: this.getSystemOptions$(),
                smsGatewayAvailable: this.isSmsApplicationAvailable$(),
                preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)
            });
        };
        AuthConfigurationService.prototype.save = function (newAuthConfiguration, previousAuthConfiguration) {
            var _this = this;
            var tenantOptions = this.prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration);
            var updateTenantOptions = tenantOptions.map(function (tenantOption) { return _this.tenantOptionsService.create(tenantOption); });
            var basicLoginOption = this.prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration);
            var oauthInternalLoginOption = this.prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration);
            return Promise.all([
                this.saveOrUpdateLoginOption(basicLoginOption),
                this.saveOrUpdateLoginOption(oauthInternalLoginOption),
                updateTenantOptions
            ]);
        };
        AuthConfigurationService.prototype.saveOrUpdateLoginOption = function (loginOption) {
            return loginOption.id
                ? this.tenantLoginOptionsService.update(loginOption)
                : this.tenantLoginOptionsService.create(loginOption);
        };
        AuthConfigurationService.prototype.prepareBasicLoginOption = function (newAuthConfiguration, previousAuthConfiguration) {
            var basicLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, client.TenantLoginOptionType.BASIC);
            basicLoginOption.authenticationRestrictions =
                this.authenticationRestriction(newAuthConfiguration);
            basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, client.TenantLoginOptionType.BASIC);
            basicLoginOption = this.removeReadOnlyFields(basicLoginOption);
            return basicLoginOption;
        };
        AuthConfigurationService.prototype.prepareOauthInternalLoginOption = function (newAuthConfiguration, previousAuthConfiguration) {
            var oauthInternalLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, client.TenantLoginOptionType.OAUTH2_INTERNAL);
            var sessionConfiguration = this.sessionConfiguration(newAuthConfiguration);
            sessionConfiguration !== null
                ? (oauthInternalLoginOption.sessionConfiguration = sessionConfiguration)
                : delete oauthInternalLoginOption.sessionConfiguration;
            oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, client.TenantLoginOptionType.OAUTH2_INTERNAL);
            oauthInternalLoginOption = this.removeReadOnlyFields(oauthInternalLoginOption);
            return oauthInternalLoginOption;
        };
        AuthConfigurationService.prototype.originalLoginOptionWithDefaults = function (previousAuthConfiguration, loginOptionType) {
            return lodashEs.defaults({}, previousAuthConfiguration.loginOptions.find(function (loginOption) { return loginOption.type === loginOptionType; }), this.getDefaultLoginOption(loginOptionType));
        };
        AuthConfigurationService.prototype.sessionConfiguration = function (authConfiguration) {
            return authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
                .sessionConfiguration;
        };
        AuthConfigurationService.prototype.authenticationRestriction = function (authConfiguration) {
            var authenticationRestrictions = authConfiguration.loginOptions.find(this.tenantUiService.isBasic).authenticationRestrictions;
            return {
                trustedUserAgents: authenticationRestrictions.trustedUserAgents.filter(function (value) { return value; }),
                forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents.filter(function (value) { return value; }),
                forbiddenClients: authenticationRestrictions.forbiddenClients.filter(function (value) { return value; })
            };
        };
        AuthConfigurationService.prototype.visibleOnLoginPage = function (authConfiguration, loginOptionType) {
            return authConfiguration.preferredLoginOptionType === loginOptionType;
        };
        AuthConfigurationService.prototype.removeReadOnlyFields = function (tenantLoginOption) {
            return lodashEs.omit(tenantLoginOption, [
                'self',
                'strengthValidity',
                'tfaStrategy',
                'greenMinLength',
                'enforceStrength',
                'strengthValidity',
                '_type'
            ]);
        };
        AuthConfigurationService.prototype.prepareTenantOptions = function (newAuthConfiguration, previousAuthConfiguration) {
            var getValue = function (authCfg, tenantOption) { return authCfg.tenantOptions[tenantOption.category][tenantOption.key]; };
            var hasChanged = function (tenantOption) { return getValue(newAuthConfiguration, tenantOption) !==
                getValue(previousAuthConfiguration, tenantOption); };
            return this.tenantOptionsWithDefaultValue
                .filter(function (tenantOption) { return getValue(newAuthConfiguration, tenantOption) !== null; })
                .filter(function (tenantOption) { return hasChanged(tenantOption); })
                .map(function (tenantOption) { return ({
                category: tenantOption.category,
                key: tenantOption.key,
                value: getValue(newAuthConfiguration, tenantOption).toString()
            }); });
        };
        AuthConfigurationService.prototype.getLoginOptions$ = function () {
            var _this = this;
            return rxjs.from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(operators.map(function (res) { return res.data; }), operators.map(function (loginOptions) { return _this.addDefaultLoginOptions(loginOptions); }));
        };
        AuthConfigurationService.prototype.getPreferredLoginOptionType$ = function (loginOptions$) {
            var _this = this;
            return loginOptions$.pipe(operators.map(function (loginOptions) {
                return _this.tenantUiService.getPreferredLoginOption(loginOptions).type;
            }));
        };
        AuthConfigurationService.prototype.addDefaultLoginOptions = function (loginOptions) {
            if (!loginOptions.find(this.tenantUiService.isBasic)) {
                loginOptions.push(this.getDefaultLoginOption(client.TenantLoginOptionType.BASIC));
            }
            if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {
                loginOptions.push(this.getDefaultLoginOption(client.TenantLoginOptionType.OAUTH2_INTERNAL));
            }
            return loginOptions;
        };
        AuthConfigurationService.prototype.getTenantOptions$ = function () {
            var _this = this;
            return rxjs.forkJoin(this.tenantOptionsWithDefaultValue.map(function (option) { return rxjs.from(_this.tenantOptionsService.detail(option)).pipe(operators.map(function (res) { return res.data; }), operators.catchError(function () { return rxjs.of(option); })); })).pipe(operators.map(function (options) { return _this.getOptionsObject(options); }));
        };
        AuthConfigurationService.prototype.getSystemOptions$ = function () {
            var _this = this;
            return rxjs.forkJoin(this.systemOptionsWithDefaultValue.map(function (option) { return rxjs.from(_this.systemOptionsService.detail(option)).pipe(operators.map(function (res) { return res.data; }), operators.catchError(function () { return rxjs.of(option); })); })).pipe(operators.map(function (options) { return _this.getOptionsObject(options); }));
        };
        AuthConfigurationService.prototype.isSmsApplicationAvailable$ = function () {
            return rxjs.from(this.applicationService.isAvailable('sms-gateway')).pipe(operators.map(function (res) { return res.data; }));
        };
        AuthConfigurationService.prototype.getOptionsObject = function (options) {
            var _this = this;
            return options.reduce(function (optionsObject, option) {
                optionsObject[option.category] = optionsObject[option.category] || {};
                optionsObject[option.category][option.key] = _this.getValue(option);
                return optionsObject;
            }, {});
        };
        AuthConfigurationService.prototype.getValue = function (option) {
            try {
                return JSON.parse(option.value);
            }
            catch (e) {
                return option.value;
            }
        };
        AuthConfigurationService.prototype.getDefaultLoginOption = function (tenantLoginOptionType) {
            return {
                userManagementSource: client.UserManagementSource.INTERNAL,
                grantType: client.GrantType.PASSWORD,
                providerName: 'Cumulocity',
                visibleOnLoginPage: false,
                type: tenantLoginOptionType
            };
        };
        return AuthConfigurationService;
    }());
    AuthConfigurationService.decorators = [
        { type: core.Injectable }
    ];
    AuthConfigurationService.ctorParameters = function () { return [
        { type: client.TenantLoginOptionsService },
        { type: client.TenantOptionsService },
        { type: client.SystemOptionsService },
        { type: client.ApplicationService },
        { type: ngxComponents.TenantUiService }
    ]; };

    var AuthConfigurationComponent = /** @class */ (function () {
        function AuthConfigurationComponent(authConfigurationService, tenantLoginOptionsService, modalService, loginService, alertService) {
            var _this = this;
            this.authConfigurationService = authConfigurationService;
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.modalService = modalService;
            this.loginService = loginService;
            this.alertService = alertService;
            this.reloading$ = new rxjs.BehaviorSubject(false);
            this.reload = new core.EventEmitter();
            this.authConfiguration$ = this.reload.pipe(operators.tap(function () { return _this.reloading$.next(true); }), operators.switchMap(function () { return _this.authConfigurationService.getAuthConfiguration$(); }), operators.tap(function () { return _this.reloading$.next(false); }), operators.shareReplay(1));
        }
        AuthConfigurationComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.authConfigurationSubscription = this.authConfiguration$.subscribe(function (authConfiguration) {
                _this.authConfiguration = authConfiguration;
                _this.previousAuthConfiguration = lodashEs.cloneDeep(_this.authConfiguration);
            });
            this.loadAuthConfig();
        };
        AuthConfigurationComponent.prototype.loadAuthConfig = function () {
            this.reload.next();
        };
        AuthConfigurationComponent.prototype.ngOnDestroy = function () {
            this.authConfigurationSubscription.unsubscribe();
        };
        AuthConfigurationComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, this.modalService.confirmLogout()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.authConfigurationService.save(this.authConfiguration, this.previousAuthConfiguration)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.logout(true)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _a.sent();
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return AuthConfigurationComponent;
    }());
    AuthConfigurationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-auth-configuration',
                    template: "<c8y-title>{{ 'Authentication' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"loadAuthConfig()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<form role=\"form\" class=\"card card--fullpage\" #authConfigurationForm=\"ngForm\" novalidate>\n  <div class=\"card-header separator\">\n    <div class=\"card-title\">\n      {{ 'Authentication' | translate }}\n    </div>\n  </div>\n  <div class=\"inner-scroll\" *ngIf=\"authConfiguration\">\n    <c8y-login-settings [authConfiguration]=\"authConfiguration\"></c8y-login-settings>\n    <c8y-basic-auth-settings [authConfiguration]=\"authConfiguration\"></c8y-basic-auth-settings>\n    <c8y-session-configuration [authConfiguration]=\"authConfiguration\"></c8y-session-configuration>\n    <c8y-auth-tfa [authConfiguration]=\"authConfiguration\"></c8y-auth-tfa>\n  </div>\n  <div class=\"card-footer separator\">\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!authConfigurationForm.form.valid || authConfigurationForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
                },] }
    ];
    AuthConfigurationComponent.ctorParameters = function () { return [
        { type: AuthConfigurationService },
        { type: client.TenantLoginOptionsService },
        { type: ngxComponents.ModalService },
        { type: ngxComponents.LoginService },
        { type: ngxComponents.AlertService }
    ]; };

    // tslint:disable:no-string-literal
    var TfaStateEnum;
    (function (TfaStateEnum) {
        TfaStateEnum[TfaStateEnum["TFA_UNDEFINED_BY_SYSTEM"] = 0] = "TFA_UNDEFINED_BY_SYSTEM";
        TfaStateEnum[TfaStateEnum["TFA_ENFORCED_FOR_GROUP"] = 1] = "TFA_ENFORCED_FOR_GROUP";
        TfaStateEnum[TfaStateEnum["TFA_ENABLED_BY_SYSTEM"] = 2] = "TFA_ENABLED_BY_SYSTEM";
        TfaStateEnum[TfaStateEnum["TFA_ENFORCED_BY_SYSTEM"] = 3] = "TFA_ENFORCED_BY_SYSTEM";
    })(TfaStateEnum || (TfaStateEnum = {}));
    var TfaSettingsComponent = /** @class */ (function () {
        function TfaSettingsComponent() {
            this.preferredLoginOptionType = client.TenantLoginOptionType.BASIC;
            this.tfaStateEnum = TfaStateEnum;
            this.tfaStrategyEnum = client.TfaStrategy;
            this.tenantLoginOptionTypeEnum = client.TenantLoginOptionType;
            this.TOTP_REQUIRES_OAUTH_POPOVER = ngxComponents.gettext('TOTP requires OAI-Secure login mode.');
            this.SMS_APP_NOT_SUBSCRIBED_POPOVER = ngxComponents.gettext('SMS strategy requires messaging application to be subscribed.');
            this.TFA_IS_ENFORCED_BY_SYSTEM_POPOVER = ngxComponents.gettext('The setting is enforced on the platform level.');
            this.TFA_IS_ENABLED_BY_SYSTEM_POPOVER = ngxComponents.gettext('The setting is enabled on the platform level.');
            this.TOKEN_VALIDITY_DETERMINED_BY_JWT_POPOVER = ngxComponents.gettext("In OAI-Secure login mode, the token's validity limit is determined by the JWT token and cannot be edited here.");
            this.TFA_IS_ENABLED_BY_ENFORCE_FOR_GROUP_POPOVER = ngxComponents.gettext('The setting is enabled on the platform level because it is enforced for particular roles.');
        }
        TfaSettingsComponent.prototype.ngOnChanges = function (changes) {
            if (changes.authConfiguration && changes.authConfiguration.currentValue) {
                this.smsGatewayAvailable = changes.authConfiguration.currentValue.smsGatewayAvailable;
                this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;
            }
        };
        TfaSettingsComponent.prototype.ngDoCheck = function () {
            if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {
                this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;
                this.tenantTfaStrategy = this.tfaBySmsCanBeSet ? client.TfaStrategy.SMS : client.TfaStrategy.TOTP;
            }
        };
        Object.defineProperty(TfaSettingsComponent.prototype, "tenantTfaTokenValidity", {
            get: function () {
                return this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tenantTfaPinValidity", {
            get: function () {
                return this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tenantTfaEnabled", {
            get: function () {
                return this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tenantTfaEnforced", {
            get: function () {
                return this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tenantTfaStrategy", {
            get: function () {
                return this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "systemTfaEnforcedGroup", {
            get: function () {
                return this.authConfiguration.systemOptions['two-factor-authentication']['enforced.group'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "systemTfaTenantScopeSettingEnabled", {
            get: function () {
                return this.authConfiguration.systemOptions['two-factor-authentication']['tenant-scope-settings.enabled'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "systemTfaEnabled", {
            get: function () {
                return this.authConfiguration.systemOptions['two-factor-authentication']['enabled'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "systemTfaEnforced", {
            get: function () {
                return this.authConfiguration.systemOptions['two-factor-authentication']['enforced'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tfaState", {
            get: function () {
                if (this.systemTfaEnforced) {
                    return this.tfaStateEnum.TFA_ENFORCED_BY_SYSTEM;
                }
                if (!lodashEs.isEmpty(this.systemTfaEnforcedGroup)) {
                    return this.tfaStateEnum.TFA_ENFORCED_FOR_GROUP;
                }
                if (this.systemTfaEnabled) {
                    return this.tfaStateEnum.TFA_ENABLED_BY_SYSTEM;
                }
                return this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tfaBySmsCanBeSet", {
            get: function () {
                return (this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) && this.smsGatewayAvailable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TfaSettingsComponent.prototype, "tfaByTotpCanBeSet", {
            get: function () {
                return ((this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) &&
                    this.preferredLoginOptionType === client.TenantLoginOptionType.OAUTH2_INTERNAL);
            },
            enumerable: false,
            configurable: true
        });
        return TfaSettingsComponent;
    }());
    TfaSettingsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-auth-tfa',
                    template: "<div\n  class=\"card-block separator-top\"\n  *ngIf=\"preferredLoginOptionType !== tenantLoginOptionTypeEnum.OAUTH2\"\n>\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Two-factor authentication' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <c8y-form-group>\n      <label\n        class=\"c8y-switch\"\n        title=\"{{ 'Enable two-factor authentication' | translate }}\"\n        *ngIf=\"\n          tfaState === tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM;\n          else enabledOrEnforcedOnSystemLevelTemplate\n        \"\n      >\n        <input type=\"checkbox\" [(ngModel)]=\"tenantTfaEnabled\" name=\"tenantTfaEnabled\" />\n        <span></span>\n        <span>{{ 'Enable' | translate }}</span>\n      </label>\n\n      <ng-template #enabledOrEnforcedOnSystemLevelTemplate>\n        <div [ngSwitch]=\"tfaState\">\n          <span *ngSwitchCase=\"tfaStateEnum.TFA_ENABLED_BY_SYSTEM\">\n            {{ 'Two-factor authentication is enabled on all users' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ TFA_IS_ENABLED_BY_SYSTEM_POPOVER | translate }}\"\n              [outsideClick]=\"true\"\n              placement=\"bottom\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </span>\n          <div *ngSwitchCase=\"tfaStateEnum.TFA_ENFORCED_BY_SYSTEM\">\n            <span>\n              {{ 'Two-factor authentication is enforced on all users' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                placement=\"bottom\"\n                [outsideClick]=\"true\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </span>\n          </div>\n          <div *ngSwitchCase=\"tfaStateEnum.TFA_ENFORCED_FOR_GROUP\">\n            <span>\n              <span translate [translateParams]=\"{ role: systemTfaEnforcedGroup }\" ngNonBindable>\n                Two-factor authentication is enabled on all users and enforced on users with role\n                {{ role }}.\n              </span>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENABLED_BY_ENFORCE_FOR_GROUP_POPOVER | translate }}\"\n                [outsideClick]=\"true\"\n                placement=\"bottom\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </ng-template>\n    </c8y-form-group>\n\n    <fieldset *ngIf=\"tfaBySmsCanBeSet || tfaByTotpCanBeSet\">\n      <div class=\"row\">\n        <c8y-form-group class=\"col-sm-6\">\n          <label title=\"{{ 'TFA strategy' | translate }}\">\n            {{ 'TFA strategy' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ SMS_APP_NOT_SUBSCRIBED_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"!tfaBySmsCanBeSet\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ TOTP_REQUIRES_OAUTH_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"!tfaByTotpCanBeSet\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </label>\n\n          <div class=\"c8y-select-wrapper\">\n            <select class=\"form-control\" [(ngModel)]=\"tenantTfaStrategy\" name=\"tenantTfaStrategy\">\n              <option value=\"{{ tfaStrategyEnum.SMS }}\" translate [disabled]=\"!tfaBySmsCanBeSet\">\n                SMS based\n              </option>\n              <option value=\"{{ tfaStrategyEnum.TOTP }}\" translate [disabled]=\"!tfaByTotpCanBeSet\">\n                Google Authenticator (TOTP)\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </c8y-form-group>\n      </div>\n\n      <div\n        class=\"row\"\n        *ngIf=\"\n          tenantTfaStrategy === tfaStrategyEnum.TOTP &&\n          tfaState !== tfaStateEnum.TFA_ENFORCED_BY_SYSTEM\n        \"\n      >\n        <label title=\"{{ 'Enforcement' | translate }}\">{{ 'Enforcement' | translate }}</label>\n        <div class=\"form-control-static\">\n          <label\n            title=\"{{ 'Enforce two-factor authentication on all users' | translate }}\"\n            class=\"c8y-switch\"\n          >\n            <input type=\"checkbox\" name=\"tenantTfaEnforced\" [(ngModel)]=\"tenantTfaEnforced\" />\n            <span></span>\n            <span>{{ 'Enforce two-factor authentication on all users' | translate }}</span>\n          </label>\n        </div>\n      </div>\n\n      <div class=\"row\" *ngIf=\"tenantTfaStrategy === tfaStrategyEnum.SMS\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Token validity limit' | translate }}\"\n              >{{ 'Token validity limit' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                *ngIf=\"!systemTfaTenantScopeSettingEnabled\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TOKEN_VALIDITY_DETERMINED_BY_JWT_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                *ngIf=\"\n                  systemTfaTenantScopeSettingEnabled &&\n                  preferredLoginOptionType === tenantLoginOptionTypeEnum.OAUTH2_INTERNAL\n                \"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control text-right\"\n                name=\"tenantTfaTokenValidity\"\n                [(ngModel)]=\"tenantTfaTokenValidity\"\n                [disabled]=\"\n                  !systemTfaTenantScopeSettingEnabled ||\n                  preferredLoginOptionType === tenantLoginOptionTypeEnum.OAUTH2_INTERNAL\n                \"\n                [required]=\"systemTfaTenantScopeSettingEnabled\"\n                [max]=\"999999\"\n                [min]=\"0\"\n              />\n              <span class=\"input-group-addon\" translate>minutes</span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Verification code validity limit' | translate }}\">\n              {{ 'Verification code validity limit' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                [outsideClick]=\"true\"\n                placement=\"right\"\n                *ngIf=\"!systemTfaTenantScopeSettingEnabled\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control text-right\"\n                name=\"tenantTfaPinValidity\"\n                [(ngModel)]=\"tenantTfaPinValidity\"\n                [disabled]=\"!systemTfaTenantScopeSettingEnabled\"\n                [required]=\"systemTfaTenantScopeSettingEnabled\"\n                [max]=\"999999\"\n                [min]=\"0\"\n              />\n              <span class=\"input-group-addon\" translate>minutes</span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n    </fieldset>\n    <div\n      *ngIf=\"\n        preferredLoginOptionType !== tenantLoginOptionTypeEnum.OAUTH2_INTERNAL &&\n        !smsGatewayAvailable\n      \"\n    >\n      <div class=\"alert alert-warning\">\n        <strong>{{ 'None of TFA strategy can be set.' | translate }}</strong><br />\n        {{ SMS_APP_NOT_SUBSCRIBED_POPOVER | translate }}<br />\n        {{ TOTP_REQUIRES_OAUTH_POPOVER | translate }}\n      </div>\n    </div>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    TfaSettingsComponent.propDecorators = {
        authConfiguration: [{ type: core.Input }]
    };

    var SessionConfigurationComponent = /** @class */ (function () {
        function SessionConfigurationComponent(tenantUiService, translateService) {
            this.tenantUiService = tenantUiService;
            this.translateService = translateService;
            this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = ngxComponents.gettext('The value must be greater than "Token lifespan" and not less than {{ minAbsoluteTimeout }}.');
            this.RENEWAL_TIMEOUT_VALIDATION_MESSAGE = ngxComponents.gettext('The value must be less than "Token lifespan".');
            this.MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE = ngxComponents.gettext('The value must be less than "Session absolute timeout".');
            this.MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE = ngxComponents.gettext('The value must be greater than "Session renewal timeout".');
            this.USER_AGENT_VALIDATION_REQUIRED_POPOVER = ngxComponents.gettext('If selected, then every request needs to use the same "User-Agent" header as the first request which initiated the session.');
            this.MIN_ABSOLUTE_TIMEOUT = 15 * 60;
            this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = this.translateService.instant(this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE, { minAbsoluteTimeout: this.MIN_ABSOLUTE_TIMEOUT });
        }
        SessionConfigurationComponent.prototype.ngOnChanges = function (changes) {
            if (changes.authConfiguration && changes.authConfiguration.currentValue) {
                var oauthInternal = changes.authConfiguration.currentValue.loginOptions.find(this.tenantUiService.isOauthInternal) || {};
                this.originalSessionConfiguration = lodashEs.cloneDeep(oauthInternal.sessionConfiguration);
                this.sessionConfiguration = oauthInternal.sessionConfiguration;
                this.previousTokenLifespan = this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];
            }
        };
        Object.defineProperty(SessionConfigurationComponent.prototype, "renewalTimeoutSeconds", {
            get: function () {
                var sessionConfiguration = this.sessionConfiguration;
                return this.convertToSeconds(sessionConfiguration.renewalTimeoutMillis);
            },
            set: function (value) {
                this.sessionConfiguration.renewalTimeoutMillis = this.convertToMillis(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "absoluteTimeoutSeconds", {
            get: function () {
                var sessionConfiguration = this.sessionConfiguration;
                return this.convertToSeconds(sessionConfiguration.absoluteTimeoutMillis);
            },
            set: function (value) {
                this.sessionConfiguration.absoluteTimeoutMillis = this.convertToMillis(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "maximumNumberOfParallelSessions", {
            get: function () {
                return this.sessionConfiguration.maximumNumberOfParallelSessions;
            },
            set: function (value) {
                this.sessionConfiguration.maximumNumberOfParallelSessions = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "userAgentValidationRequired", {
            get: function () {
                return this.sessionConfiguration.userAgentValidationRequired;
            },
            set: function (value) {
                this.sessionConfiguration.userAgentValidationRequired = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "basicTokenLifespan", {
            get: function () {
                return this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];
            },
            set: function (value) {
                this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "useSessionConfiguration", {
            get: function () {
                return !!this.sessionConfiguration;
            },
            set: function (value) {
                this.sessionConfiguration = value ? lodashEs.defaults({}, this.originalSessionConfiguration, {
                    absoluteTimeoutMillis: 1209600000,
                    renewalTimeoutMillis: 86400000,
                    maximumNumberOfParallelSessions: 5,
                    userAgentValidationRequired: false
                }) : null;
                this.basicTokenLifespan = this.previousTokenLifespan || 172800; // 2 days
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "absoluteTimeoutConstraints", {
            get: function () {
                return {
                    min: Math.max(this.MIN_ABSOLUTE_TIMEOUT, this.basicTokenLifespan + 1)
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "renewalTimeoutConstraints", {
            get: function () {
                return {
                    min: this.MIN_ABSOLUTE_TIMEOUT / 2,
                    max: this.basicTokenLifespan ? this.basicTokenLifespan - 1 : null
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "basicTokenLifespanConstraints", {
            get: function () {
                return {
                    min: this.renewalTimeoutSeconds ? this.renewalTimeoutSeconds + 1 : null,
                    max: this.absoluteTimeoutSeconds ? this.absoluteTimeoutSeconds - 1 : null
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SessionConfigurationComponent.prototype, "sessionConfiguration", {
            get: function () {
                return this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
                    .sessionConfiguration;
            },
            set: function (value) {
                this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
                    .sessionConfiguration = value;
            },
            enumerable: false,
            configurable: true
        });
        SessionConfigurationComponent.prototype.convertToMillis = function (seconds) {
            return lodashEs.isFinite(seconds) ? seconds * 1000 : null;
        };
        SessionConfigurationComponent.prototype.convertToSeconds = function (milliseconds) {
            return lodashEs.isFinite(milliseconds) ? Math.ceil(milliseconds / 1000) : null;
        };
        return SessionConfigurationComponent;
    }());
    SessionConfigurationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-session-configuration',
                    template: "<div class=\"card-block separator-top overflow-auto\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'OAI-Secure session configuration' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label class=\"c8y-switch\" title=\"{{ 'Use session configuration' | translate }}\">\n            <input\n              type=\"checkbox\"\n              name=\"useSessionConfiguration\"\n              [(ngModel)]=\"useSessionConfiguration\"\n            />\n            <span></span>\n            <span>{{ 'Use session configuration' | translate }}</span>\n          </label>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <fieldset *ngIf=\"sessionConfiguration\">\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label class=\"c8y-switch\" title=\"{{ 'User agent validation required' | translate }}\">\n              <input\n                type=\"checkbox\"\n                name=\"userAgentValidationRequired\"\n                [(ngModel)]=\"userAgentValidationRequired\"\n              />\n              <span></span>\n              <span>{{ 'User agent validation required' | translate }}</span>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ USER_AGENT_VALIDATION_REQUIRED_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                container=\"body\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n          </c8y-form-group>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Session absolute timeout' | translate }}\">{{ 'Session absolute timeout' | translate }}\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"absoluteTimeoutSeconds\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"absoluteTimeoutSeconds\"\n                [required]=\"useSessionConfiguration\"\n                [min]=\"absoluteTimeoutConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"min\"\n                text=\"{{ ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Session renewal timeout' | translate }}\">{{ 'Session renewal timeout' | translate }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"renewalTimeoutSeconds\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"renewalTimeoutSeconds\"\n                [required]=\"useSessionConfiguration\"\n                [max]=\"renewalTimeoutConstraints.max\"\n                [min]=\"renewalTimeoutConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"max\"\n                text=\"{{ RENEWAL_TIMEOUT_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Maximum parallel sessions per user' | translate }}\">{{\n              'Maximum parallel sessions per user' | translate\n            }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"maximumNumberOfParallelSessions\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"maximumNumberOfParallelSessions\"\n                [required]=\"useSessionConfiguration\"\n                [min]=\"1\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>sessions</span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Token lifespan' | translate }}\">{{\n              'Token lifespan' | translate\n            }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"basicTokenLifespan\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"basicTokenLifespan\"\n                [required]=\"useSessionConfiguration\"\n                [max]=\"basicTokenLifespanConstraints.max\"\n                [min]=\"basicTokenLifespanConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"max\"\n                text=\"{{ MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n              <c8y-message\n                name=\"min\"\n                text=\"{{ MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </fieldset>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    SessionConfigurationComponent.ctorParameters = function () { return [
        { type: ngxComponents.TenantUiService },
        { type: core$1.TranslateService }
    ]; };
    SessionConfigurationComponent.propDecorators = {
        authConfiguration: [{ type: core.Input }]
    };

    var LoginSettingsComponent = /** @class */ (function () {
        function LoginSettingsComponent(tenantUiService) {
            this.tenantUiService = tenantUiService;
            this.PREFERRED_LOGIN_MODE_POPOVER = ngxComponents.gettext('Main difference is the storage of the authentication information. With Basic Auth, it is saved in a session storage and with OAI-Secure in a HttpOnly cookie. OAI-Secure grant is recommended as the authentication information is not accessible via JavaScript. Single sign-on redirect allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.');
            this.ENFORCED_BY_PLATFORM_POPOVER = ngxComponents.gettext('The setting is enforced on the platform level.');
            this.tenantLoginOptionTypeEnum = client.TenantLoginOptionType;
            this.PASSWORD_CATEGORY = 'password';
            this.LIMIT_VALIDITY_KEY = 'limit.validity';
            this.TENANT_STRENGTH_VALIDITY_KEY = 'strength.validity';
            this.SYSTEM_STRENGTH_VALIDITY_KEY = 'enforce.strength';
        }
        LoginSettingsComponent.prototype.ngOnChanges = function (changes) {
            if (changes.authConfiguration && changes.authConfiguration.currentValue) {
                this.isOauth2 = !!changes.authConfiguration.currentValue.loginOptions.find(this.tenantUiService.isOauth2);
            }
        };
        Object.defineProperty(LoginSettingsComponent.prototype, "systemPasswordLimitValidity", {
            get: function () {
                return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoginSettingsComponent.prototype, "passwordLimitValidity", {
            get: function () {
                return this.systemPasswordLimitValidity !== null ?
                    this.systemPasswordLimitValidity : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];
            },
            set: function (value) {
                if (this.systemPasswordLimitValidity === null) {
                    this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY] = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoginSettingsComponent.prototype, "systemPasswordEnforceStrength", {
            get: function () {
                return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.SYSTEM_STRENGTH_VALIDITY_KEY];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoginSettingsComponent.prototype, "passwordEnforceStrength", {
            get: function () {
                return this.systemPasswordEnforceStrength ?
                    this.systemPasswordEnforceStrength : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY];
            },
            set: function (value) {
                if (!this.systemPasswordEnforceStrength) {
                    this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY] = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        return LoginSettingsComponent;
    }());
    LoginSettingsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-login-settings',
                    template: "<div class=\"card-block separator-top overflow-auto\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Login settings' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row  m-b-8\">\n      <c8y-form-group class=\"col-sm-6\">\n        <label title=\"{{ 'Preferred login mode' | translate }}\">\n          {{ 'Preferred login mode' | translate }}\n          <button\n            class=\"btn btn-clean\"\n            popover=\"{{ PREFERRED_LOGIN_MODE_POPOVER | translate }}\"\n            placement=\"right\"\n            [outsideClick]=\"true\"\n          >\n            <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n          </button>\n        </label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"preferredLoginOptionType\"\n            name=\"preferredLoginOptionType\"\n            [(ngModel)]=\"authConfiguration.preferredLoginOptionType\"\n          >\n            <option value=\"{{tenantLoginOptionTypeEnum.BASIC}}\" translate>Basic Auth</option>\n            <option value=\"{{tenantLoginOptionTypeEnum.OAUTH2_INTERNAL}}\" translate>OAI-Secure</option>\n            <option value=\"{{tenantLoginOptionTypeEnum.OAUTH2}}\" [disabled]=\"!isOauth2\" translate>\n              Single sign-on redirect\n            </option>\n          </select>\n        </div>\n      </c8y-form-group>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label title=\"{{ 'Password validity limit' | translate }}\"\n            >{{ 'Password validity limit' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ ENFORCED_BY_PLATFORM_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"systemPasswordLimitValidity\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              name=\"passwordLimitValidity\"\n              class=\"form-control text-right\"\n              [(ngModel)]=\"passwordLimitValidity\"\n              min=\"0\"\n              max=\"999999\"\n              step=\"1\"\n              required\n              [disabled]=\"systemPasswordLimitValidity\"\n            />\n            <span class=\"input-group-addon\" translate>days</span>\n          </div>\n          <p class=\"help-block\">\n            {{ 'Default: 0 (unlimited validity)' | translate }}\n          </p>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label title=\"{{ 'Password strength' | translate }}\"\n            >{{ 'Password strength' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ ENFORCED_BY_PLATFORM_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"systemPasswordEnforceStrength\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <div>\n            <label\n              title=\"{{ 'Enforce that all passwords are strong (green)' | translate }}\"\n              class=\"c8y-switch\"\n            >\n              <input\n                type=\"checkbox\"\n                name=\"passwordEnforceStrength\"\n                [(ngModel)]=\"passwordEnforceStrength\"\n                [disabled]=\"systemPasswordEnforceStrength\"\n              />\n              <span></span>\n              <span>{{ 'Enforce strong passwords (green)' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                },] }
    ];
    LoginSettingsComponent.ctorParameters = function () { return [
        { type: ngxComponents.TenantUiService }
    ]; };
    LoginSettingsComponent.propDecorators = {
        authConfiguration: [{ type: core.Input }]
    };

    var ɵ0 = [
        {
            path: 'auth-configuration',
            redirectTo: 'auth-configuration/basic_settings',
            pathMatch: 'full'
        },
        {
            path: 'auth-configuration/basic_settings',
            component: AuthConfigurationComponent,
            canActivate: [AuthConfigurationGuard]
        }
    ];
    var AuthConfigurationModule = /** @class */ (function () {
        function AuthConfigurationModule() {
        }
        return AuthConfigurationModule;
    }());
    AuthConfigurationModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        SessionConfigurationComponent,
                        LoginSettingsComponent,
                        BasicAuthSettingsComponent,
                        AuthConfigurationComponent,
                        TfaSettingsComponent
                    ],
                    exports: [],
                    imports: [ngxComponents.CoreModule, popover.PopoverModule],
                    providers: [
                        AuthConfigurationService,
                        AuthConfigurationGuard,
                        { provide: ngxComponents.HOOK_TABS, useClass: TabsFactory, multi: true },
                        {
                            provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                            useClass: NavigationFactory,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AuthConfigurationModule = AuthConfigurationModule;
    exports.TabsFactory = TabsFactory;
    exports["ɵ0"] = ɵ0;
    exports["ɵa"] = SessionConfigurationComponent;
    exports["ɵb"] = LoginSettingsComponent;
    exports["ɵc"] = BasicAuthSettingsComponent;
    exports["ɵd"] = AuthConfigurationComponent;
    exports["ɵe"] = AuthConfigurationService;
    exports["ɵf"] = TfaSettingsComponent;
    exports["ɵg"] = AuthConfigurationGuard;
    exports["ɵh"] = NavigationFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-auth-configuration.umd.js.map
