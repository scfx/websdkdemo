(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/tooltip'), require('ngx-bootstrap/dropdown'), require('@c8y/ngx-components'), require('@angular/cdk/coercion')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/status-filter', ['exports', '@angular/core', 'ngx-bootstrap/tooltip', 'ngx-bootstrap/dropdown', '@c8y/ngx-components', '@angular/cdk/coercion'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["status-filter"] = {}), global.ng.core, global.tooltip, global.dropdown, global.c8y["ngx-components"], global.ng.cdk.coercion));
})(this, (function (exports, core, tooltip, dropdown, ngxComponents, coercion) { 'use strict';

    var StatusFilterComponent = /** @class */ (function () {
        function StatusFilterComponent() {
            this.statusOptions = [];
            this.onFilterChanged = new core.EventEmitter();
            this.isAllButtonSelected = true;
        }
        Object.defineProperty(StatusFilterComponent.prototype, "options", {
            /** List of filter options to be displayed */
            set: function (options) {
                this.statusOptions = (options || []).map(function (option) { return ({ selected: false, option: option }); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StatusFilterComponent.prototype, "_multiple", {
            /**
             * Allows multiple options to be active simultaneosly.
             */
            set: function (multiple) {
                this.multiple = coercion.coerceBooleanProperty(multiple);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StatusFilterComponent.prototype, "_small", {
            /** Display the filter as a small button group */
            set: function (small) {
                this.small = coercion.coerceBooleanProperty(small);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StatusFilterComponent.prototype, "displaySmall", {
            get: function () {
                return this.small;
            },
            enumerable: false,
            configurable: true
        });
        StatusFilterComponent.prototype.changeFilter = function (option) {
            this.isAllButtonSelected = false;
            var emitNeeded = false;
            if (this.multiple) {
                option.selected = !option.selected;
                emitNeeded = true;
            }
            else if (!option.selected) {
                option.selected = true;
                this.statusOptions.filter(function (op) { return op !== option; }).forEach(function (op) { return (op.selected = false); });
                emitNeeded = true;
            }
            if (emitNeeded) {
                this.emitSelectedOptions();
            }
        };
        StatusFilterComponent.prototype.removeFilter = function () {
            this.isAllButtonSelected = true;
            this.statusOptions.forEach(function (op) { return (op.selected = false); });
            this.emitSelectedOptions();
        };
        /**
         * Allows the filter to be initalliy displayed with some preset filters.
         *
         * @param filters An `IStatusOption` array defining filter options to be preset.
         * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
         */
        StatusFilterComponent.prototype.preset = function (filters, emit) {
            var _this = this;
            if (emit === void 0) { emit = true; }
            var firstSelected = false;
            this.statusOptions.forEach(function (option) { return (option.selected = false); });
            this.statusOptions
                .filter(function (option) { return (filters || []).map(function (o) { return o.label; }).includes(option.option.label); })
                .filter(function () {
                // only first option passed will be set in single selection mode
                var include = _this.multiple || !firstSelected;
                if (include) {
                    firstSelected = true;
                }
                return include;
            })
                .forEach(function (option) { return (option.selected = true); });
            this.isAllButtonSelected = !(filters && filters.length);
            if (emit) {
                this.emitSelectedOptions();
            }
        };
        StatusFilterComponent.prototype.reset = function () {
            this.removeFilter();
        };
        StatusFilterComponent.prototype.activeFilters = function () {
            return this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; });
        };
        StatusFilterComponent.prototype.isFilterApplied = function () {
            return this.statusOptions.some(function (option) { return option.selected; });
        };
        StatusFilterComponent.prototype.emitSelectedOptions = function () {
            this.onFilterChanged.emit(this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; }));
        };
        return StatusFilterComponent;
    }());
    StatusFilterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-status-filter',
                    template: "<div dropdown \n  placement=\"bottom left\" \n  class=\"dropdown c8y-child-assets-selector\"\n>\n  <button id=\"status-filter\" \n    dropdownToggle \n    type=\"button\" \n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    title=\"{{ 'Status filter' | translate}}\"\n    aria-controls=\"dropdown-status-filter\">\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul id=\"dropdown-status-filter\" \n    *dropdownMenu \n    class=\"dropdown-menu\"\n    role=\"menu\" \n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\" >\n      <button\n        (click)=\"changeFilter(option)\"\n      >\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button\n        title=\"{{ 'All' | translate }}\"\n        (click)=\"removeFilter()\"\n      >\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>"
                },] }
    ];
    StatusFilterComponent.propDecorators = {
        options: [{ type: core.Input }],
        _multiple: [{ type: core.Input, args: ['multiple',] }],
        _small: [{ type: core.Input, args: ['small',] }],
        displaySmall: [{ type: core.HostBinding, args: ['class.btn-group-sm',] }],
        onFilterChanged: [{ type: core.Output }]
    };

    /**
     * This module provides a component for selecting status filter.
     */
    var StatusFilterModule = /** @class */ (function () {
        function StatusFilterModule() {
        }
        return StatusFilterModule;
    }());
    StatusFilterModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [ngxComponents.CoreModule, tooltip.TooltipModule, dropdown.BsDropdownModule],
                    declarations: [StatusFilterComponent],
                    entryComponents: [StatusFilterComponent],
                    exports: [StatusFilterComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.StatusFilterComponent = StatusFilterComponent;
    exports.StatusFilterModule = StatusFilterModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-status-filter.umd.js.map
