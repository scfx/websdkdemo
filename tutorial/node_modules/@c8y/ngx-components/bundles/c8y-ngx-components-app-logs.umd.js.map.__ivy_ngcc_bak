{"version":3,"file":"c8y-ngx-components-app-logs.umd.js","sources":["../../app-logs/app-logs.service.ts","../../app-logs/app-logs-auto-refresh.component.ts","../../app-logs/app-logs-auto-refresh.module.ts","../../app-logs/c8y-ngx-components-app-logs.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LogsJSON } from './logs.model';\nimport { FetchClient, IFetchOptions } from '@c8y/client';\nimport { Observable, from } from 'rxjs';\nimport { flatMap } from 'rxjs/operators';\n\ninterface RequestParams {\n  dateFrom?;\n  dateTo?;\n  limit?;\n}\n\n@Injectable()\nexport class AppLogsService {\n  private BASE_PATH_APPLICATION: string = 'application/applications';\n  private header: any;\n\n  constructor(private client: FetchClient) {\n    this.header = {\n      Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'\n    };\n  }\n\n  getLogs$(appId: string, instanceName: string, params: RequestParams = {}): Observable<LogsJSON> {\n    const url = `${this.BASE_PATH_APPLICATION}/${appId}/logs/${instanceName}`;\n    const defaultConfig: IFetchOptions = {\n      headers: this.header,\n      method: 'GET'\n    };\n    const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;\n    const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;\n    const modifiedParams = {\n      ...params,\n      ...(formattedDateFrom && { dateFrom: formattedDateFrom }),\n      ...(formattedDateTo && { dateTo: formattedDateTo })\n    };\n\n    const config = params ? { ...defaultConfig, params: modifiedParams } : { ...defaultConfig };\n    return from(this.client.fetch(url, config)).pipe(flatMap(res => res.json()));\n  }\n\n  formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { LogsJSON } from './logs.model';\nimport { AppLogsService } from './app-logs.service';\nimport { Observable, fromEvent, Subject, of, interval, NEVER, Subscription } from 'rxjs';\nimport {\n  filter,\n  catchError,\n  tap,\n  debounce,\n  switchMap,\n  takeUntil,\n  finalize,\n  delay,\n  repeat,\n  merge,\n  scan\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-app-logs-auto-refresh',\n  templateUrl: './app-logs-auto-refresh.component.html'\n})\nexport class AppLogsAutoRefreshComponent {\n  cancel$: Subject<boolean> = new Subject<boolean>();\n  isAutoRefreshDisabled: boolean = false;\n  logsToOutput: LogsJSON = this.getEmptyLogsJson();\n  isAutoRefreshOn: boolean = true;\n\n  @Input() selectedInstance: any;\n  @Input() mo: any;\n  @Input() set buttonsDisabled(areDisabled: boolean) {\n    this.isAutoRefreshDisabled = areDisabled;\n    if (areDisabled && this.isAutoRefreshOn) {\n      this.isAutoRefreshOn = false;\n      this.cancel$.next(false);\n    }\n  }\n  @Output() onNewLogs = new EventEmitter<LogsJSON>();\n  @Output() isRealtimeEnabled = new EventEmitter<boolean>();\n  @ViewChild('autoRefresh', { static: true }) button: ElementRef;\n\n  private subscription: Subscription;\n\n  constructor(private appLogsService: AppLogsService) {}\n\n  ngAfterViewInit() {\n    const clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(\n      merge(this.cancel$),\n      debounce(() => interval(300)),\n      scan(this.toggleState, false),\n      tap(isAutoRefreshOn => this.setButtonState(isAutoRefreshOn)),\n      switchMap(isOn => (isOn ? this.watchForNewLogs() : NEVER))\n    );\n    this.subscription = clicks$.subscribe();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  private toggleState = currentState => !currentState;\n\n  private setButtonState(isAutoRefreshOn: boolean) {\n    this.isAutoRefreshOn = isAutoRefreshOn;\n    this.isRealtimeEnabled.emit(isAutoRefreshOn);\n  }\n\n  private watchForNewLogs() {\n    return this.startPolling().pipe(\n      takeUntil(this.cancel$.pipe(filter(isAutoRefreshOn => isAutoRefreshOn === false))),\n      finalize(() => {\n        this.isAutoRefreshOn = false;\n      })\n    );\n  }\n\n  private startPolling() {\n    return of(1).pipe(\n      switchMap(() => this.getNewLogs().pipe(catchError(er => of(this.getEmptyLogsJson())))),\n      tap(logs => this.updateLogsToOutput(logs)),\n      delay(10000),\n      repeat()\n    );\n  }\n\n  private getNewLogs(): Observable<LogsJSON> {\n    return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());\n  }\n\n  private getAppId(): string {\n    return this.mo.applicationId;\n  }\n  private getInstanceName(): string {\n    return this.selectedInstance.name;\n  }\n\n  private updateLogsToOutput(newLogs) {\n    const { dateFrom, dateTo } = newLogs;\n    if (dateFrom && dateTo) {\n      this.logsToOutput = { ...newLogs };\n      this.onNewLogs.emit(this.logsToOutput);\n    }\n  }\n\n  private getEmptyLogsJson(): LogsJSON {\n    return {\n      dateFrom: null,\n      dateTo: null,\n      logs: '',\n      truncated: false\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@c8y/ngx-components';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { AppLogsAutoRefreshComponent } from './app-logs-auto-refresh.component';\nimport { AppLogsService } from './app-logs.service';\n\n@NgModule({\n  declarations: [AppLogsAutoRefreshComponent],\n  exports: [AppLogsAutoRefreshComponent],\n  imports: [CommonModule, ButtonsModule],\n  entryComponents: [AppLogsAutoRefreshComponent],\n  providers: [AppLogsService]\n})\nexport class AppLogsAutoRefreshModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["from","flatMap","Injectable","FetchClient","Subject","EventEmitter","fromEvent","merge","debounce","interval","scan","tap","switchMap","NEVER","takeUntil","filter","finalize","of","catchError","delay","repeat","Component","Input","Output","ViewChild","NgModule","CommonModule","ButtonsModule"],"mappings":"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"}