(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@ngx-translate/core'), require('lodash-es'), require('rxjs'), require('@c8y/ngx-components/operations/bulk-operation-stepper'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('@c8y/client'), require('@c8y/ngx-components/repository'), require('rxjs/operators'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/stepper-bulk-type-firmware', ['exports', '@angular/core', '@c8y/ngx-components', '@ngx-translate/core', 'lodash-es', 'rxjs', '@c8y/ngx-components/operations/bulk-operation-stepper', '@c8y/ngx-components/operations/bulk-operations-service', '@c8y/client', '@c8y/ngx-components/repository', 'rxjs/operators', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["stepper-bulk-type-firmware"] = {}), global.ng.core, global.c8y["ngx-components"], global.core$1, global.lodashEs, global.rxjs, global.c8y["ngx-components"].operations["bulk-operation-stepper"], global.c8y["ngx-components"].operations["bulk-operations-service"], global.client, global.c8y["ngx-components"].repository, global.rxjs.operators, global.ng.forms));
})(this, (function (exports, core, ngxComponents, core$1, lodashEs, rxjs, bulkOperationStepper, bulkOperationsService, client, repository, operators, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var StepperBulkTypeFirmwareComponent = /** @class */ (function (_super) {
        __extends(StepperBulkTypeFirmwareComponent, _super);
        function StepperBulkTypeFirmwareComponent(bulkOperationService, translate) {
            var _this = _super.call(this) || this;
            _this.bulkOperationService = bulkOperationService;
            _this.translate = translate;
            _this.descriptionTemplate = ngxComponents.gettext('{{ name }} (version {{ version }})');
            _this.textFilter$ = new rxjs.BehaviorSubject('');
            _this.stepData = {
                firmware: undefined,
                versionOrPatch: undefined
            };
            return _this;
        }
        StepperBulkTypeFirmwareComponent.prototype.goToVersionOrPatchStep = function (_a) {
            var stepper = _a.stepper;
            var selectedFirmware = this.stepData.firmware;
            this.bulkOperationService.setFirmwareId(selectedFirmware.id);
            this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
            stepper.next();
        };
        StepperBulkTypeFirmwareComponent.prototype.onVersionOrPatchSelected = function (versionOrPatch) {
            this.stepData.versionOrPatch = versionOrPatch;
        };
        StepperBulkTypeFirmwareComponent.prototype.onFirmwareSelected = function (fw) {
            this.stepData.firmware = fw;
        };
        StepperBulkTypeFirmwareComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        StepperBulkTypeFirmwareComponent.prototype.retrieveOperationPrototype = function () {
            var selectedFirmware = this.stepData.firmware;
            var selectedVersionOrPatch = this.stepData.versionOrPatch;
            if (!selectedFirmware || !selectedVersionOrPatch) {
                return;
            }
            var firmware = {
                name: selectedFirmware.name,
                version: selectedVersionOrPatch.c8y_Firmware.version,
                url: selectedVersionOrPatch.c8y_Firmware.url
            };
            if (selectedVersionOrPatch.c8y_Patch) {
                firmware.isPatch = true;
                firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
            }
            var name = selectedFirmware.name;
            var version = selectedVersionOrPatch.c8y_Firmware.version;
            var description = "Update firmware to: " + name + " (version: " + version + ").";
            return {
                name: ngxComponents.gettext('Firmware update'),
                description: this.translate.instant(this.descriptionTemplate, {
                    name: lodashEs.get(this.stepData, 'firmware.name'),
                    version: lodashEs.get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
                }),
                prototype: {
                    description: description,
                    c8y_Firmware: firmware
                }
            };
        };
        StepperBulkTypeFirmwareComponent.prototype.onSelectionChange = function (event) {
            this.textFilter$.next('');
            _super.prototype.onSelectionChange.call(this, event);
        };
        return StepperBulkTypeFirmwareComponent;
    }(bulkOperationStepper.BaseStepperComponent));
    StepperBulkTypeFirmwareComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-stepper-firmware',
                    template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <h4 class=\"text-center m-b-16 text-gray\" translate>\n            Select version or patch\n          </h4>\n          <p class=\"text-center p-b-8 text-truncate\">\n            <strong [title]=\"stepData?.firmware?.name\">{{ stepData?.firmware?.name }}</strong\n            ><br />\n            <small [title]=\"stepData?.firmware?.description\">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-h\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-version-or-patch-step\n            [selected]=\"stepData?.versionOrPatch\"\n            (versionOrPatch)=\"onVersionOrPatchSelected($event)\">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
                },] }
    ];
    StepperBulkTypeFirmwareComponent.ctorParameters = function () { return [
        { type: bulkOperationsService.BulkOperationsService },
        { type: core$1.TranslateService }
    ]; };

    var VersionOrPatchComponent = /** @class */ (function () {
        function VersionOrPatchComponent(repositoryService, inventoryService, bulkOpsService) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.inventoryService = inventoryService;
            this.bulkOpsService = bulkOpsService;
            this.versionOrPatch = new core.EventEmitter();
            this.elementCount = 0;
            this.DD_LOW_COUNT = 10;
            this.firmware$ = this.bulkOpsService.firmwareId.pipe(operators.distinctUntilChanged(), operators.switchMap(function (id) { return rxjs.defer(function () { return _this.inventoryService.detail(id).then(function (result) { return result.data; }); }).pipe(operators.catchError(function (error) { return rxjs.of(error); })); }), operators.shareReplay(1));
            this.baseVersions$ = this.firmware$.pipe(operators.distinctUntilKeyChanged('id'), operators.switchMap(function (firmware) { return _this.repositoryService.listBaseVersions(firmware); }), operators.tap(function (resp) {
                _this.elementCount = resp.data ? resp.data.length : 0;
            }), operators.shareReplay(1));
            this.isLegacy$ = this.firmware$.pipe(operators.map(function (firmware) { return _this.repositoryService.isLegacyEntry(firmware); }), operators.shareReplay(1));
            this.expanded = {};
            this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
        }
        VersionOrPatchComponent.prototype.getBinaryName$ = function (binaryUrl) {
            return this.repositoryService.getBinaryName$(binaryUrl);
        };
        VersionOrPatchComponent.prototype.getBaseVersionAndPatches$ = function (baseVersion) {
            var _this = this;
            return this.firmware$.pipe(operators.distinctUntilKeyChanged('id'), operators.switchMap(function (firmware) { return _this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion); }), operators.shareReplay(1));
        };
        VersionOrPatchComponent.prototype.getPatchVersionsCount$ = function (baseVersion) {
            var _this = this;
            return this.firmware$.pipe(operators.distinctUntilKeyChanged('id'), operators.switchMap(function () { return _this.firmware$; }), operators.switchMap(function (firmware) { return _this.repositoryService.getPatchVersionsCount$(firmware, baseVersion); }), operators.shareReplay(1));
        };
        VersionOrPatchComponent.prototype.selectVersionOrPatch = function (selected, versionOrPatch) {
            if (selected) {
                this.versionOrPatch.emit(versionOrPatch);
            }
        };
        return VersionOrPatchComponent;
    }());
    VersionOrPatchComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-version-or-patch-step',
                    template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    VersionOrPatchComponent.ctorParameters = function () { return [
        { type: repository.RepositoryService },
        { type: client.InventoryService },
        { type: bulkOperationsService.BulkOperationsService }
    ]; };
    VersionOrPatchComponent.propDecorators = {
        selected: [{ type: core.Input }],
        versionOrPatch: [{ type: core.Output }]
    };
    __decorate([
        ngxComponents.memoize()
    ], VersionOrPatchComponent.prototype, "getBinaryName$", null);
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);

    var SelectFirmwareComponent = /** @class */ (function () {
        function SelectFirmwareComponent(repositoryService, bulkOpsService, translate) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.bulkOpsService = bulkOpsService;
            this.translate = translate;
            this.firmware = new core.EventEmitter();
            this.elementCount = 0;
            this.DD_LOW_COUNT = 10;
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.firmwares$ = this.textFilter$
                .pipe(operators.debounceTime(400), operators.distinctUntilChanged())
                .pipe(operators.switchMap(function (text) { return _this.getFirmwares(text); }), operators.tap(function (resp) {
                _this.elementCount = resp.data ? resp.data.length : 0;
            }), operators.shareReplay(1));
            this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
            this.DEVICE_TYPE_NOT_AVAILABLE = ngxComponents.gettext('No device type available.');
            this.DESCRIPTION_NOT_AVAILABLE = ngxComponents.gettext('No description available.');
        }
        SelectFirmwareComponent.prototype.ngOnInit = function () {
            this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
        };
        SelectFirmwareComponent.prototype.selectFirmware = function (selected, fw) {
            if (selected) {
                this.firmware.emit(fw);
            }
        };
        SelectFirmwareComponent.prototype.getBaseVersionsCount$ = function (firmware) {
            var _this = this;
            return this.firmwares$.pipe(operators.switchMap(function () { return _this.repositoryService.getBaseVersionsCount$(firmware); }), operators.shareReplay(1));
        };
        SelectFirmwareComponent.prototype.getDescriptionTitle = function (firmware) {
            return lodashEs.get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
        };
        SelectFirmwareComponent.prototype.getDeviceTypeTitle = function (firmware) {
            return lodashEs.get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
        };
        SelectFirmwareComponent.prototype.getFirmwares = function (partialName) {
            return this.repositoryService.listRepositoryEntries(repository.RepositoryType.FIRMWARE, { partialName: partialName });
        };
        return SelectFirmwareComponent;
    }());
    SelectFirmwareComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-select-firmware-step',
                    template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select firmware' | translate }}</h4>\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          title=\"{{ 'Filter firmware\u2026' | translate }}\"\n          placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n          [ngModel]=\"textFilter$ | async\"\n          (ngModelChange)=\"textFilter$.next($event)\"\n        />\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n          <i\n            c8yIcon=\"times\"\n            class=\"text-muted\"\n            *ngIf=\"(textFilter$ | async).length > 0\"\n            (click)=\"textFilter$.next('')\"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf=\"(textFilter$ | async).length > 0 && elementCount===0\">\n</c8y-search-result-empty>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\">\n        <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectFirmware($event, firmware)\" [selected]=\"firmware === selected\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class=\"col-4\">\n              <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n                <small *ngIf=\"firmware.description; else noDesc\">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class=\"text-muted\" translate>No description available.</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class=\"text-muted\" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning\">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf=\"!isLegacy(firmware)\">\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    SelectFirmwareComponent.ctorParameters = function () { return [
        { type: repository.RepositoryService },
        { type: bulkOperationsService.BulkOperationsService },
        { type: core$1.TranslateService }
    ]; };
    SelectFirmwareComponent.propDecorators = {
        selected: [{ type: core.Input }],
        firmware: [{ type: core.Output }]
    };
    __decorate([
        ngxComponents.memoize(lodashEs.property('id'))
    ], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);

    var ɵ0 = {
        type: bulkOperationsService.BulkOperationType.FIRMWARE,
        c8yIcon: 'c8y-firmware',
        name: ngxComponents.gettext('Firmware update'),
        path: bulkOperationsService.baseUrl + "firmware",
        component: StepperBulkTypeFirmwareComponent,
        fragments: ['c8y_Firmware'],
        selected: false
    };
    /** Module for the 'Firmware update' operation type stepper */
    var StepperBulkTypeFirmwareModule = /** @class */ (function () {
        function StepperBulkTypeFirmwareModule() {
        }
        return StepperBulkTypeFirmwareModule;
    }());
    StepperBulkTypeFirmwareModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        StepperBulkTypeFirmwareComponent,
                        VersionOrPatchComponent,
                        SelectFirmwareComponent
                    ],
                    imports: [
                        ngxComponents.CoreModule,
                        ngxComponents.FormsModule,
                        forms.ReactiveFormsModule,
                        bulkOperationStepper.BulkOperationStepperModule,
                        repository.RepositoryModule
                    ],
                    providers: [
                        {
                            provide: bulkOperationsService.HOOK_LIST_BULK_TYPE,
                            useValue: ɵ0,
                            multi: true
                        }
                    ],
                    entryComponents: [StepperBulkTypeFirmwareComponent],
                    exports: [StepperBulkTypeFirmwareComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SelectFirmwareComponent = SelectFirmwareComponent;
    exports.StepperBulkTypeFirmwareComponent = StepperBulkTypeFirmwareComponent;
    exports.StepperBulkTypeFirmwareModule = StepperBulkTypeFirmwareModule;
    exports.VersionOrPatchComponent = VersionOrPatchComponent;
    exports["ɵ0"] = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-firmware.umd.js.map
