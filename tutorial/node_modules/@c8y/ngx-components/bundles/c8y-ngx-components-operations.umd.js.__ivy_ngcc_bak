(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@c8y/ngx-components'), require('@c8y/ngx-components/operations/bulk-operations-stepper-container'), require('@c8y/ngx-components/operations/bulk-operation-from-single'), require('@c8y/ngx-components/operations/bulk-operations-list'), require('@c8y/ngx-components/operations/stepper-bulk-type-configuration'), require('@c8y/ngx-components/operations/stepper-bulk-type-device-profile'), require('@c8y/ngx-components/operations/stepper-bulk-type-firmware'), require('@c8y/ngx-components/operations/stepper-bulk-type-software')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations', ['exports', '@angular/core', '@angular/router', '@c8y/ngx-components', '@c8y/ngx-components/operations/bulk-operations-stepper-container', '@c8y/ngx-components/operations/bulk-operation-from-single', '@c8y/ngx-components/operations/bulk-operations-list', '@c8y/ngx-components/operations/stepper-bulk-type-configuration', '@c8y/ngx-components/operations/stepper-bulk-type-device-profile', '@c8y/ngx-components/operations/stepper-bulk-type-firmware', '@c8y/ngx-components/operations/stepper-bulk-type-software'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = {}), global.ng.core, global.ng.router, global.c8y["ngx-components"], global.c8y["ngx-components"].operations["bulk-operations-stepper-container"], global.c8y["ngx-components"].operations["bulk-operation-from-single"], global.c8y["ngx-components"].operations["bulk-operations-list"], global.c8y["ngx-components"].operations["stepper-bulk-type-configuration"], global.c8y["ngx-components"].operations["stepper-bulk-type-device-profile"], global.c8y["ngx-components"].operations["stepper-bulk-type-firmware"], global.c8y["ngx-components"].operations["stepper-bulk-type-software"]));
})(this, (function (exports, core, router, ngxComponents, bulkOperationsStepperContainer, bulkOperationFromSingle, bulkOperationsList, stepperBulkTypeConfiguration, stepperBulkTypeDeviceProfile, stepperBulkTypeFirmware, stepperBulkTypeSoftware) { 'use strict';

    var TabsFactory = /** @class */ (function () {
        function TabsFactory(router) {
            this.router = router;
        }
        TabsFactory.prototype.get = function () {
            var tabs = [];
            if (this.router.url.match(/devicecontrol/g)) {
                tabs.push({
                    path: 'devicecontrol/single',
                    label: ngxComponents.gettext('Single operations'),
                    icon: 'c8y-icon c8y-icon-device-control',
                    priority: 1100,
                    orientation: 'horizontal'
                });
                tabs.push({
                    path: 'devicecontrol/bulk',
                    label: ngxComponents.gettext('Bulk operations'),
                    icon: 'c8y-icon c8y-icon-energy',
                    priority: 1050,
                    orientation: 'horizontal'
                });
            }
            return tabs;
        };
        return TabsFactory;
    }());
    TabsFactory.decorators = [
        { type: core.Injectable }
    ];
    TabsFactory.ctorParameters = function () { return [
        { type: router.Router }
    ]; };

    var routes = [
        {
            path: 'devicecontrol',
            redirectTo: 'devicecontrol/single',
            pathMatch: 'full'
        }
    ];
    /**
     * This module sets up the 'Device control' view. To use the module as it is you need to also
     * import the '@c8y/ng1-modules/devicemanagement-deviceControlList/cumulocity.json' ng1 module
     * in a hybrid application. By importing it in your custom application you will have:
     * - a 'Device control' entry in the 'Overviews' section of navigator
     * - 'Bulk operations' tab on the 'Device control' page
     * - list view of existing bulk operations with expandable details and options to filter
     * - guided stepper dialogs to schedule new bulk operations of supported types
     * (Configuration update, Firmware update, Software update, Apply device profile).
     *
     * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve
     * the results you wish to have in your application, e.g.:
     * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}
     * to have an overview of existing bulk operation with expandable details
     * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing
     * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},
     * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},
     * {@link StepperBulkTypeDeviceProfileModule}) to have the option
     * to create new bulk operation in a guided stepper dialog.
     *
     * ```typescript
     * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
     * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
     *
     * @NgModule({
     *   imports: [
     *     [...]
     *     BulkOperationsServiceModule,
     *     BulkOperationsListModule
     *   ],
     *   [...]
     * })
     * export class CustomOperationsModule {}```
     * respectively
     * ```typescript
     * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
     * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
     * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
     * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
     *
     * @NgModule({
     *   imports: [
     *     [...]
     *     BulkOperationsServiceModule,
     *     BulkOperationsListModule,
     *     BulkOperationsStepperContainerModule,
     *     StepperBulkTypeSoftwareModule
     *   ],
     *   [...]
     * })
     * export class CustomOperationsModule {}```
     * You can provide your own bulk operation stepper by registering a component via the `HOOK_LIST_BULK_TYPE`:
     *
     * ```typescript
     * import {
     *   HOOK_LIST_BULK_TYPE,
     *   baseUrl
     * } from '@c8y/ngx-components/operations/bulk-operations-service';
     *
     * [...]
     *
     * providers: [
     *   {
     *     provide: HOOK_LIST_BULK_TYPE,
     *     useValue: {
     *       type: 'my-bulk-op-type',
     *       c8yIcon: 'c8y-tools',
     *       name: 'My bulk op type',
     *       path: `${baseUrl}my-type`,
     *       component: StepperMyBulkTypeComponent,
     *       fragments: ['c8y_MyType'],
     *       selected: false
     *     },
     *     multi: true
     *   }
     * ]```
     */
    var OperationsModule = /** @class */ (function () {
        function OperationsModule() {
        }
        return OperationsModule;
    }());
    OperationsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        ngxComponents.CoreModule,
                        router.RouterModule.forChild(routes),
                        bulkOperationFromSingle.BulkOperationFromSingleModule,
                        bulkOperationsList.BulkOperationsListModule,
                        bulkOperationsStepperContainer.BulkOperationsStepperContainerModule,
                        stepperBulkTypeConfiguration.StepperBulkTypeConfigurationModule,
                        stepperBulkTypeFirmware.StepperBulkTypeFirmwareModule,
                        stepperBulkTypeSoftware.StepperBulkTypeSoftwareModule,
                        stepperBulkTypeDeviceProfile.StepperBulkTypeDeviceProfileModule
                    ],
                    providers: [{ provide: ngxComponents.HOOK_TABS, useClass: TabsFactory, multi: true }]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OperationsModule = OperationsModule;
    exports.TabsFactory = TabsFactory;
    exports.routes = routes;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-operations.umd.js.map
