{"version":3,"file":"c8y-ngx-components-sms-gateway.umd.js","sources":["../../sms-gateway/pattern-messages.data.ts","../../sms-gateway/sms-gateway.guard.ts","../../sms-gateway/sms-gateway.module.ts","../../sms-gateway/c8y-ngx-components-sms-gateway.ts"],"names":["gettext","Injectable","Permissions","ApplicationService","NgModule","ProviderConfigurationModule","HOOK_PATTERN_MESSAGES"],"mappings":"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","sourcesContent":["import { gettext } from '@c8y/ngx-components';\n\nexport const MESSAGES = {\n  '^Sender name$': {\n    gettext: gettext('Sender name')\n  },\n  '^Sender name used for sent SMS$': {\n    gettext: gettext('Sender name used for sent SMS')\n  },\n  '^Sender address$': {\n    gettext: gettext('Sender address')\n  },\n  '^Sender address used for sent SMS$': {\n    gettext: gettext('Sender address used for sent SMS')\n  },\n  '^Username$': {\n    gettext: gettext('Username')\n  },\n  '^Password$': {\n    gettext: gettext('Password')\n  },\n  '^Licence key$': {\n    gettext: gettext('License key')\n  },\n  '^Key$': {\n    gettext: gettext('Key')\n  },\n  '^API base URL$': {\n    gettext: gettext('API base URL')\n  },\n  '^API URL$': {\n    gettext: gettext('API URL')\n  },\n  '^oauth$': {\n    gettext: gettext('OAuth')\n  },\n  '^basic$': {\n    gettext: gettext('Basic')\n  },\n  '^Authentication method$': {\n    gettext: gettext('Authentication method')\n  },\n  '^Defines which authentication method is used with the provider$': {\n    gettext: gettext('Defines which authentication method is used with the provider')\n  },\n  '^Static headers$': {\n    gettext: gettext('Static headers')\n  },\n  '^Static headers that should be added to requests towards the provider$': {\n    gettext: gettext('Static headers that should be added to requests towards the provider')\n  },\n  '^OAuth token URL$': {\n    gettext: gettext('OAuth token URL')\n  },\n  '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {\n    gettext: gettext(\n      'URL where the OAuth token is requested from (required if OAuth method is chosen)'\n    )\n  },\n  '^OAuth toke mime type$': {\n    gettext: gettext('OAuth token mime type')\n  },\n  '^Overrides the OAuth token response mime type$': {\n    gettext: gettext('Overrides the OAuth token response mime type')\n  },\n  '^OAuth access toke type$': {\n    gettext: gettext('OAuth access token type')\n  },\n  '^Overrides the OAuth access token type$': {\n    gettext: gettext('Overrides the OAuth access token type')\n  },\n  '^Global configuration$': {\n    gettext: gettext('Global configuration')\n  },\n  '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {\n    gettext: gettext(\n      'Enables or disables the settings globally for all tenants (only possible in management tenant)'\n    )\n  },\n  '^API key$': {\n    gettext: gettext('API key')\n  },\n  '^Inherit to subtenants$': {\n    gettext: gettext('Inherit to subtenants')\n  },\n  \"^Enables or disables if this tenant's configuration may be inherited to subtenants$\": {\n    gettext: gettext(\n      'Enables or disables the option to inherit the tenant configuration to subtenants'\n    )\n  },\n  '^Login$': {\n    gettext: gettext('Login')\n  },\n  '^Source business unit ID$': {\n    gettext: gettext('Source business unit ID')\n  },\n  '^Client ID$': {\n    gettext: gettext('Client ID')\n  },\n  '^Client secret$': {\n    gettext: gettext('Client secret')\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SmsGatewayGuard implements CanActivate {\n  private static readonly applicationName = 'sms-gateway';\n  private showSMSProvider: Promise<boolean>;\n\n  constructor(private permissions: Permissions, private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSMSProvider === undefined) {\n      const hasRole: Promise<boolean> = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));\n\n      this.showSMSProvider = hasRole.then(\n        (hasPermissions: boolean) =>\n          hasPermissions &&\n          this.applicationService\n            .isAvailable(SmsGatewayGuard.applicationName)\n            .then(result => result && result.data)\n      );\n    }\n\n    return this.showSMSProvider;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { gettext, HOOK_PATTERN_MESSAGES, ProviderConfigurationModule } from '@c8y/ngx-components';\nimport { MESSAGES } from './pattern-messages.data';\nimport { SmsGatewayGuard } from './sms-gateway.guard';\n\n@NgModule({\n  imports: [\n    ProviderConfigurationModule.config([\n      {\n        navigation: {\n          label: gettext('SMS provider'),\n          path: 'smsgateway',\n          icon: 'envelope-o',\n          parent: gettext('Settings'),\n          priority: 1000,\n          canActivate: [SmsGatewayGuard]\n        },\n        layout: {\n          pageTitle: gettext('SMS provider'),\n          cardTitle: gettext('Credentials'),\n          description: gettext(\n            'Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'\n          ),\n          providerName: gettext('SMS provider'),\n          providerNamePlaceholder: gettext('Select or type to filter providers'),\n          providerNameNoMatchesHint: gettext('Select one of the existing providers.'),\n          deleteRoles: ['ROLE_SMS_ADMIN'],\n          deleteBtnLabel: gettext('Delete'),\n          saveRoles: ['ROLE_SMS_ADMIN'],\n          saveBtnLabel: gettext('Save'),\n          configurationUpdatedSuccessMsg: gettext('Credentials updated.'),\n          deleteConfigurationModalTitle: gettext('Delete credentials'),\n          deleteConfigurationModalBody: gettext(\n            `You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?`\n          ),\n          deleteConfigurationModalOkBtnLabel: gettext('Delete'),\n          configurationDeletedSuccessMsg: gettext('Credentials deleted.')\n        },\n        endpoint: {\n          definitionsEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'definitions'\n          },\n          configurationEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'configuration'\n          }\n        }\n      }\n    ])\n  ],\n  providers: [SmsGatewayGuard, { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true }]\n})\nexport class SmsGatewayModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}