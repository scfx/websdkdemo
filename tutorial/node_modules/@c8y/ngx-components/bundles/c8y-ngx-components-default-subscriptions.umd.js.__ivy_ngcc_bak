(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@c8y/ngx-components'), require('lodash-es'), require('rxjs/operators'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/default-subscriptions', ['exports', '@angular/core', '@angular/forms', '@c8y/ngx-components', 'lodash-es', 'rxjs/operators', '@c8y/client'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["default-subscriptions"] = {}), global.ng.core, global.ng.forms, global.c8y["ngx-components"], global.lodashEs, global.rxjs.operators, global.client));
})(this, (function (exports, core, forms, ngxComponents, lodashEs, operators, client) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /** The context for evaluating default subscriptions configuration */
    exports.DefaultSubscriptionsContext = void 0;
    (function (DefaultSubscriptionsContext) {
        /** Current tenant context (only current tenant options are taken into account). */
        DefaultSubscriptionsContext[DefaultSubscriptionsContext["CURRENT_TENANT"] = 0] = "CURRENT_TENANT";
        /** Parent tenant context (only parent tenant options are taken into account). */
        DefaultSubscriptionsContext[DefaultSubscriptionsContext["PARENT_TENANT"] = 1] = "PARENT_TENANT";
    })(exports.DefaultSubscriptionsContext || (exports.DefaultSubscriptionsContext = {}));

    var DefaultSubscriptionsService = /** @class */ (function () {
        function DefaultSubscriptionsService(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
            this.applicationService = applicationService;
            this.tenantService = tenantService;
            this.tenantOptionsService = tenantOptionsService;
            this.humanizeAppNamePipe = humanizeAppNamePipe;
        }
        /**
         * Gets the list of applications which can be used in default subscriptions, i.e.:
         * - current tenant's all own applications,
         * - inherited applications, which do not have the same names as current tenant's own apps.
         * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
         * @returns The list of applications, which can be used in default subscriptions.
         */
        DefaultSubscriptionsService.prototype.getSubscribableTenantApps = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, allApps, ownApps, inheritedApps, filteredApps, filteredAppsWithHumanizedNames, sortedAppsWithHumanizedNames, sortedApps;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantService.current()];
                        case 1:
                            currentTenant = (_a.sent()).data;
                            return [4 /*yield*/, this.applicationService.listByTenant(null, { pageSize: 2000 })];
                        case 2:
                            allApps = (_a.sent()).data;
                            ownApps = allApps.filter(function (app) { return app.owner.tenant.id === currentTenant.name; });
                            inheritedApps = allApps.filter(function (app) { return app.owner.tenant.id !== currentTenant.name; });
                            filteredApps = __spreadArray([], __read(ownApps));
                            inheritedApps.forEach(function (inheritedApp) {
                                if (!filteredApps.some(function (filteredApp) { return filteredApp.name === inheritedApp.name; })) {
                                    filteredApps.push(inheritedApp);
                                }
                            });
                            return [4 /*yield*/, Promise.all(filteredApps.map(function (app) { return __awaiter(_this, void 0, void 0, function () {
                                    var humanizedName;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.humanizeAppNamePipe
                                                    .transform(app.name)
                                                    .pipe(operators.debounceTime(250), operators.take(1))
                                                    .toPromise()];
                                            case 1:
                                                humanizedName = _a.sent();
                                                return [2 /*return*/, { app: app, humanizedName: humanizedName }];
                                        }
                                    });
                                }); }))];
                        case 3:
                            filteredAppsWithHumanizedNames = _a.sent();
                            sortedAppsWithHumanizedNames = lodashEs.sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
                            sortedApps = sortedAppsWithHumanizedNames.map(function (_a) {
                                var app = _a.app;
                                return app;
                            });
                            return [2 /*return*/, sortedApps];
                    }
                });
            });
        };
        /**
         * Gets the default subscriptions configuration inherited from parent tenant.
         * @returns The default subscriptions object with settings from parent tenant.
         */
        DefaultSubscriptionsService.prototype.getDefaultSubscriptionsEvaluatedFromParentTenant = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getDefaultSubscriptions(exports.DefaultSubscriptionsContext.PARENT_TENANT)];
                });
            });
        };
        /**
         * Gets the default subscriptions configuration from the current tenant.
         * @returns The default subscriptions object with settings from the current tenant.
         */
        DefaultSubscriptionsService.prototype.getDefaultSubscriptionsFromCurrentTenant = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getDefaultSubscriptions(exports.DefaultSubscriptionsContext.CURRENT_TENANT)];
                });
            });
        };
        /**
         * Saves given default subscriptions configuration to the current tenant
         * (either sets, updates, or deletes corresponding tenant options).
         * @param defaultSubscriptions The default subscriptions configuration to be saved.
         */
        DefaultSubscriptionsService.prototype.saveDefaultSubscriptionsToCurrentTenant = function (defaultSubscriptions) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.saveOnCreationSubscriptions(defaultSubscriptions)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.saveOnUpgradeSubscriptions(defaultSubscriptions)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Gets default subscriptions in the context of current or parent tenant.
         * @param contextTenant Tells whether to use current or parent tenant as context.
         */
        DefaultSubscriptionsService.prototype.getDefaultSubscriptions = function (contextTenant) {
            return __awaiter(this, void 0, void 0, function () {
                var tenantOptionsParams, overridable, _a, onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices, onCreationSubscriptions, onUpgradeAppsDefault, onUpgradeMicroservicesDefault, onUpgradeSubscriptions, defaultSubscriptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            switch (contextTenant) {
                                case exports.DefaultSubscriptionsContext.CURRENT_TENANT:
                                    tenantOptionsParams = { evaluate: 'current' };
                                    overridable = true;
                                    break;
                                case exports.DefaultSubscriptionsContext.PARENT_TENANT:
                                    tenantOptionsParams = { evaluate: 'inherited' };
                                    overridable = false;
                                    break;
                            }
                            return [4 /*yield*/, this.getTenantOptions(tenantOptionsParams)];
                        case 1:
                            _a = _b.sent(), onCreationApps = _a.onCreationApps, onCreationMicroservices = _a.onCreationMicroservices, onUpgradeAppsEnabled = _a.onUpgradeAppsEnabled, onUpgradeApps = _a.onUpgradeApps, onUpgradeMicroservicesEnabled = _a.onUpgradeMicroservicesEnabled, onUpgradeMicroservices = _a.onUpgradeMicroservices;
                            onCreationSubscriptions = this.namesToPartialApps({
                                appsNamesStr: onCreationApps,
                                microservicesNamesStr: onCreationMicroservices
                            });
                            onUpgradeAppsDefault = overridable ? null : onCreationApps;
                            onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
                            onUpgradeSubscriptions = this.namesToPartialApps({
                                appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                                microservicesNamesStr: onUpgradeMicroservicesEnabled
                                    ? onUpgradeMicroservices
                                    : onUpgradeMicroservicesDefault
                            });
                            defaultSubscriptions = {
                                onCreationSubscriptions: onCreationSubscriptions,
                                onUpgradeSubscriptions: onUpgradeSubscriptions
                            };
                            if (overridable) {
                                defaultSubscriptions.overrideOnCreationSubscriptions =
                                    onCreationApps !== null || onCreationMicroservices !== null;
                                defaultSubscriptions.overrideOnUpgradeSubscriptions =
                                    onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
                            }
                            return [2 /*return*/, defaultSubscriptions];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.getTenantOptions = function (params) {
            if (params === void 0) { params = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = {};
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'default.tenant.applications'
                                }, null, params)];
                        case 1:
                            _a.onCreationApps = _b.sent();
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'default.tenant.microservices'
                                }, null, params)];
                        case 2:
                            _a.onCreationMicroservices = _b.sent();
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.applications.enabled'
                                }, false, params)];
                        case 3:
                            _a.onUpgradeAppsEnabled = _b.sent();
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.applications'
                                }, null, params)];
                        case 4:
                            _a.onUpgradeApps = _b.sent();
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices.enabled'
                                }, false, params)];
                        case 5:
                            _a.onUpgradeMicroservicesEnabled = _b.sent();
                            return [4 /*yield*/, this.getTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices'
                                }, null, params)];
                        case 6: return [2 /*return*/, (_a.onUpgradeMicroservices = _b.sent(),
                                _a)];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.saveOnCreationSubscriptions = function (defaultSubscriptions) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!defaultSubscriptions.overrideOnCreationSubscriptions) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'default.tenant.applications',
                                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                                })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'default.tenant.microservices',
                                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                                })];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 3: return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.applications'
                            })];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.unsetTenantOption({
                                    category: 'configuration',
                                    key: 'default.tenant.microservices'
                                })];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.saveOnUpgradeSubscriptions = function (defaultSubscriptions) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!defaultSubscriptions.overrideOnUpgradeSubscriptions) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.applications.enabled',
                                    value: 'true'
                                })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices.enabled',
                                    value: 'true'
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.applications',
                                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                                })];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.setTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices',
                                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                                })];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 10];
                        case 5: return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications.enabled'
                            })];
                        case 6:
                            _a.sent();
                            return [4 /*yield*/, this.unsetTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices.enabled'
                                })];
                        case 7:
                            _a.sent();
                            return [4 /*yield*/, this.unsetTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.applications'
                                })];
                        case 8:
                            _a.sent();
                            return [4 /*yield*/, this.unsetTenantOption({
                                    category: 'configuration',
                                    key: 'on-update.tenant.microservices'
                                })];
                        case 9:
                            _a.sent();
                            _a.label = 10;
                        case 10: return [2 /*return*/];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.getTenantOption = function (option, defaultValue, params) {
            if (defaultValue === void 0) { defaultValue = null; }
            if (params === void 0) { params = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var value, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.tenantOptionsService.detail(option, params)];
                        case 1:
                            value = (_a.sent()).data.value;
                            value = JSON.parse(value);
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            value = !lodashEs.isUndefined(value) ? value : defaultValue;
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, value];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.setTenantOption = function (option) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.tenantOptionsService.update(option)];
                });
            });
        };
        DefaultSubscriptionsService.prototype.unsetTenantOption = function (option) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.tenantOptionsService.delete(option)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_2 = _a.sent();
                            if (!ex_2 || !ex_2.res || ex_2.res.status !== 404) {
                                throw ex_2;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        DefaultSubscriptionsService.prototype.namesToPartialApps = function (_a) {
            var appsNamesStr = _a.appsNamesStr, microservicesNamesStr = _a.microservicesNamesStr;
            if (appsNamesStr === null && microservicesNamesStr === null) {
                return null;
            }
            return __spreadArray(__spreadArray([], __read((appsNamesStr || '')
                .split(',')
                .filter(function (name) { return name.length; })
                .map(function (name) { return ({ name: name.trim() }); }))), __read((microservicesNamesStr || '')
                .split(',')
                .filter(function (name) { return name.length; })
                .map(function (name) { return ({
                name: name.trim(),
                type: client.ApplicationType.MICROSERVICE
            }); })));
        };
        DefaultSubscriptionsService.prototype.partialAppsListToAppsNames = function (apps) {
            return apps
                .filter(function (app) { return app.type !== client.ApplicationType.MICROSERVICE; })
                .map(function (app) { return app.name; })
                .join(',');
        };
        DefaultSubscriptionsService.prototype.partialAppsToMicroservicesNames = function (apps) {
            return apps
                .filter(function (app) { return app.type === client.ApplicationType.MICROSERVICE; })
                .map(function (app) { return app.name; })
                .join(',');
        };
        return DefaultSubscriptionsService;
    }());
    DefaultSubscriptionsService.decorators = [
        { type: core.Injectable }
    ];
    DefaultSubscriptionsService.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: client.TenantService },
        { type: client.TenantOptionsService },
        { type: ngxComponents.HumanizeAppNamePipe }
    ]; };

    /**
     * The component shows the main view for managing default subscriptions configuration.
     */
    var DefaultSubscriptionsComponent = /** @class */ (function () {
        function DefaultSubscriptionsComponent(fb, defaultSubscriptionsService, alertService) {
            this.fb = fb;
            this.defaultSubscriptionsService = defaultSubscriptionsService;
            this.alertService = alertService;
            /** Hint text for disabled checkboxes. */
            this.disabledCheckboxHint = ngxComponents.gettext('Select "Override inherited" to enable.');
        }
        /** Initializes the loading of the form and the current settings. */
        DefaultSubscriptionsComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.loading = true;
                            return [4 /*yield*/, this.initForm()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loadDefaultSubscriptions()];
                        case 2:
                            _a.sent();
                            this.loading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /** Loads the list of apps, builds the form and hooks value change events for override switches. */
        DefaultSubscriptionsComponent.prototype.initForm = function () {
            return __awaiter(this, void 0, void 0, function () {
                var apps, appRows;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.form = this.fb.group({
                                overrideOnCreationSubscriptions: [''],
                                overrideOnUpgradeSubscriptions: [''],
                                appRows: this.fb.array([])
                            });
                            return [4 /*yield*/, this.defaultSubscriptionsService.getSubscribableTenantApps()];
                        case 1:
                            apps = _a.sent();
                            appRows = this.form.controls.appRows;
                            apps.forEach(function (app) {
                                appRows.push(_this.fb.group({
                                    app: [app],
                                    subscribedOnCreation: [''],
                                    subscribedOnUpgrade: ['']
                                }));
                            });
                            this.form
                                .get('overrideOnCreationSubscriptions')
                                .valueChanges.subscribe(function (value) { return _this.onOverrideOnCreationSubscriptionsChange(value); });
                            this.form
                                .get('overrideOnUpgradeSubscriptions')
                                .valueChanges.subscribe(function (value) { return _this.onOverrideOnUpgradeSubscriptionsChange(value); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Checks if given application row should be displayed.
         * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.
         */
        DefaultSubscriptionsComponent.prototype.shouldShowAppRow = function (appRowRawValue) {
            var subscribedOnCreation = appRowRawValue.subscribedOnCreation, subscribedOnUpgrade = appRowRawValue.subscribedOnUpgrade;
            var _a = this.form.value, overrideOnCreationSubscriptions = _a.overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions = _a.overrideOnUpgradeSubscriptions;
            return (subscribedOnCreation ||
                subscribedOnUpgrade ||
                overrideOnCreationSubscriptions ||
                overrideOnUpgradeSubscriptions);
        };
        /** Checks if there are no application rows to be displayed. */
        DefaultSubscriptionsComponent.prototype.isEmptyView = function () {
            var _this = this;
            return !this.form
                .getRawValue()
                .appRows.some(function (appRowRawValue) { return _this.shouldShowAppRow(appRowRawValue); });
        };
        /**
         * Checks if given application is subscribed (present in the given list of applications).
         * @param app Application object to check.
         * @param subscribedApps The list of application objects to check against.
         * @returns True, if the application is present in the list.
         */
        DefaultSubscriptionsComponent.prototype.isSubscribed = function (app, subscribedApps) {
            return subscribedApps && subscribedApps.some(function (subscribedApp) { return subscribedApp.name === app.name; });
        };
        /** Saves the current value of form object to backend. */
        DefaultSubscriptionsComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var defaultSubscriptions, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            defaultSubscriptions = this.getDefaultSubscriptionsForSave();
                            return [4 /*yield*/, this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions)];
                        case 1:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Saved.'));
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        DefaultSubscriptionsComponent.prototype.onOverrideOnCreationSubscriptionsChange = function (overrideOnCreationSubscriptions) {
            var appRowsControls = this.form.controls.appRows.controls;
            if (overrideOnCreationSubscriptions) {
                this.enableSubscribeOnCreationCheckboxes();
                return;
            }
            this.disableSubscribeOnCreationCheckboxes();
            this.restoreSubscribeOnCreationFromParent();
        };
        DefaultSubscriptionsComponent.prototype.enableSubscribeOnCreationCheckboxes = function () {
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });
            });
        };
        DefaultSubscriptionsComponent.prototype.disableSubscribeOnCreationCheckboxes = function () {
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });
            });
        };
        DefaultSubscriptionsComponent.prototype.restoreSubscribeOnCreationFromParent = function () {
            var _this = this;
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.patchValue({
                    subscribedOnCreation: _this.isSubscribed(appRowControl.value.app, _this.parentDefaultSubscriptions.onCreationSubscriptions)
                });
            });
        };
        DefaultSubscriptionsComponent.prototype.onOverrideOnUpgradeSubscriptionsChange = function (overrideOnUpgradeSubscriptions) {
            var appRowsControls = this.form.controls.appRows.controls;
            if (overrideOnUpgradeSubscriptions) {
                this.enableSubscribeOnUpgradeCheckboxes();
                return;
            }
            this.disableSubscribeOnUpgradeCheckboxes();
            this.restoreSubscribeOnUpgradeFromParent();
        };
        DefaultSubscriptionsComponent.prototype.enableSubscribeOnUpgradeCheckboxes = function () {
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });
            });
        };
        DefaultSubscriptionsComponent.prototype.disableSubscribeOnUpgradeCheckboxes = function () {
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });
            });
        };
        DefaultSubscriptionsComponent.prototype.restoreSubscribeOnUpgradeFromParent = function () {
            var _this = this;
            var appRowsControls = this.form.controls.appRows.controls;
            appRowsControls.forEach(function (appRowControl) {
                appRowControl.patchValue({
                    subscribedOnUpgrade: _this.isSubscribed(appRowControl.value.app, _this.parentDefaultSubscriptions.onUpgradeSubscriptions)
                });
            });
        };
        DefaultSubscriptionsComponent.prototype.loadDefaultSubscriptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _c, overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions, onCreationSubscriptions, onUpgradeSubscriptions;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant()];
                        case 1:
                            _a.parentDefaultSubscriptions = _d.sent();
                            _b = this;
                            return [4 /*yield*/, this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant()];
                        case 2:
                            _b.currentDefaultSubscriptions = _d.sent();
                            _c = this.currentDefaultSubscriptions, overrideOnCreationSubscriptions = _c.overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions = _c.overrideOnUpgradeSubscriptions;
                            onCreationSubscriptions = overrideOnCreationSubscriptions
                                ? this.currentDefaultSubscriptions.onCreationSubscriptions
                                : this.parentDefaultSubscriptions.onCreationSubscriptions;
                            onUpgradeSubscriptions = overrideOnUpgradeSubscriptions
                                ? this.currentDefaultSubscriptions.onUpgradeSubscriptions
                                : this.parentDefaultSubscriptions.onUpgradeSubscriptions;
                            this.form.patchValue({
                                overrideOnCreationSubscriptions: overrideOnCreationSubscriptions,
                                overrideOnUpgradeSubscriptions: overrideOnUpgradeSubscriptions
                            });
                            this.form.controls.appRows.controls.forEach(function (appRowControl) {
                                appRowControl.patchValue({
                                    subscribedOnCreation: _this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),
                                    subscribedOnUpgrade: _this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        DefaultSubscriptionsComponent.prototype.getDefaultSubscriptionsForSave = function () {
            var value = this.form.value;
            return {
                overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,
                onCreationSubscriptions: value.overrideOnCreationSubscriptions
                    ? value.appRows.filter(function (app) { return app.subscribedOnCreation; }).map(function (app) { return app.app; })
                    : null,
                overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,
                onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions
                    ? value.appRows.filter(function (app) { return app.subscribedOnUpgrade; }).map(function (app) { return app.app; })
                    : null
            };
        };
        return DefaultSubscriptionsComponent;
    }());
    DefaultSubscriptionsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-default-subscriptions',
                    template: "<c8y-title>{{ 'Default subscriptions' | translate }}</c8y-title>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"save()\">\n  <div class=\"card card--fullpage col-lg-max\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Applications</h4>\n    </div>\n    <div class=\"inner-scroll\">\n      <div class=\"sticky-top separator-bottom\">\n        <div class=\"flex-row\">\n          <div class=\"col-sm-6 col-xs-6 p-l-24 p-l-xs-16\">\n            <p translate>\n              Configure default subscriptions in the platform, both for tenant creation and for\n              platform upgrade. To display a full list of available applications, override inherited\n              settings.\n            </p>\n          </div>\n          <div class=\"col-sm-6 col-xs-6 bg-gray-white p-16 text-center separator-bottom\">\n            <div class=\"row\">\n              <div class=\"col-sm-6 col-xs-6\">\n                <p><strong translate>Subscribed on tenant creation</strong></p>\n                <div>\n                  <label class=\"c8y-switch\" title=\"{{ 'Override inherited' | translate }}\">\n                    <input type=\"checkbox\" formControlName=\"overrideOnCreationSubscriptions\" />\n                    <span></span>\n                    <span>\n                      {{ 'Override inherited' | translate }}\n                    </span>\n                  </label>\n                </div>\n              </div>\n              <div class=\"col-sm-6 col-xs-6\">\n                <p><strong translate>Subscribed on platform upgrade</strong></p>\n                <div>\n                  <label class=\"c8y-switch\" title=\"{{ 'Override inherited' | translate }}\">\n                    <input type=\"checkbox\" formControlName=\"overrideOnUpgradeSubscriptions\" />\n                    <span></span>\n                    <span>\n                      {{ 'Override inherited' | translate }}\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-block\" *ngIf=\"loading\"></div>\n      <div class=\"card-block card-block d-flex a-i-center j-c-center d-col\" *ngIf=\"loading\">\n        <c8y-loading></c8y-loading>\n        <span translate>Loading application subscriptions\u2026</span>\n      </div>\n      <div class=\"card-block\" *ngIf=\"loading\"></div>\n\n      <ng-container formArrayName=\"appRows\">\n        <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n        <div class=\"card-block bg-white\" *ngIf=\"!loading && isEmptyView()\">\n          <div class=\"c8y-empty-state\">\n            <h1 class=\"c8y-icon c8y-icon-c8y-data c8y-icon-duocolor\"></h1>\n            <h3 translate>No application subscriptions yet.</h3>\n            <p translate>\n              Select \"Override inherited\" to define the list of subscribed applications.\n            </p>\n          </div>\n        </div>\n        <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n\n        <div *ngFor=\"let appRowControl of form.get('appRows')['controls']; let i = index\">\n          <ng-container\n            *ngIf=\"shouldShowAppRow(appRowControl.getRawValue())\"\n            formArrayName=\"{{ i }}\"\n          >\n            <div class=\"flex-row a-i-stretch\">\n              <div class=\"col-sm-6 col-xs-6 separator-bottom\">\n                <div class=\"c8y-list__item__block\">\n                  <div class=\"c8y-list__item__appicon\">\n                    <c8y-app-icon\n                      [app]=\"appRowControl.value.app\"\n                      [name]=\"appRowControl.value.app.name\"\n                      [contextPath]=\"appRowControl.value.app.contextPath\"\n                    ></c8y-app-icon>\n                  </div>\n                  <div class=\"c8y-list__item__body\">\n                    <div class=\"content-flex-30\">\n                      <div class=\"col-6\">\n                        <p\n                          class=\"text-truncate\"\n                          title=\"{{ appRowControl.value.app | humanizeAppName | async }}\"\n                        >\n                          {{ appRowControl.value.app | humanizeAppName | async }}\n                        </p>\n                        <small class=\"text-muted\">{{ appRowControl.value.app.contextPath }}</small>\n                      </div>\n                      <div class=\"col-6 text-right-sm\">\n                        <p>\n                          <span class=\"text-label-small m-r-4\" translate> Tenant ID </span>\n                          {{ appRowControl.value.app.owner.tenant.id }}\n                        </p>\n                        <!-- TODO: uncomment when company name is available\n                            <p>\n                            <span class=\"text-label-small m-r-4\" translate>Company</span>\n                            <small class=\"text-muted\">company name</small>\n                          </p> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div\n                class=\"\n                  col-sm-3 col-xs-3\n                  bg-gray-white\n                  separator-bottom\n                  d-flex\n                  j-c-center\n                  a-i-center\n                \"\n              >\n                <label\n                  class=\"c8y-checkbox\"\n                  [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnCreation.disabled }\"\n                >\n                  <input type=\"checkbox\" formControlName=\"subscribedOnCreation\" />\n                  <span *ngIf=\"!appRowControl.controls.subscribedOnCreation.disabled\"></span>\n                  <span\n                    *ngIf=\"appRowControl.controls.subscribedOnCreation.disabled\"\n                    title=\"{{ disabledCheckboxHint | translate }}\"\n                  ></span>\n                </label>\n              </div>\n\n              <div\n                class=\"\n                  col-sm-3 col-xs-3\n                  bg-gray-white\n                  separator-bottom\n                  d-flex\n                  j-c-center\n                  a-i-center\n                \"\n              >\n                <label\n                  class=\"c8y-checkbox\"\n                  [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnUpgrade.disabled }\"\n                >\n                  <input type=\"checkbox\" formControlName=\"subscribedOnUpgrade\" />\n                  <span *ngIf=\"!appRowControl.controls.subscribedOnUpgrade.disabled\"></span>\n                  <span\n                    *ngIf=\"appRowControl.controls.subscribedOnUpgrade.disabled\"\n                    title=\"{{ disabledCheckboxHint | translate }}\"\n                  ></span>\n                </label>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"card-footer separator\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || form.pristine\"\n        title=\"{{ 'Save default subscriptions' | translate }}\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</form>\n"
                },] }
    ];
    DefaultSubscriptionsComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: DefaultSubscriptionsService },
        { type: ngxComponents.AlertService }
    ]; };

    var DefaultSubscriptionsGuard = /** @class */ (function () {
        function DefaultSubscriptionsGuard(tenantUiService) {
            this.tenantUiService = tenantUiService;
        }
        /**
         * Checks if default subscriptions feature should be active,
         * i.e. whether the current tenant is the management or an enterprise tenant.
         * **Note: the check is executed only once in the runtime.**
         *
         * @returns True, if the feature should be active.
         */
        DefaultSubscriptionsGuard.prototype.canActivate = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(this.active === undefined)) return [3 /*break*/, 4];
                            _a = this;
                            return [4 /*yield*/, this.tenantUiService.isManagementTenant()];
                        case 1:
                            _b = (_c.sent());
                            if (_b) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.tenantUiService.isEnterpriseTenant()];
                        case 2:
                            _b = (_c.sent());
                            _c.label = 3;
                        case 3:
                            _a.active = _b;
                            _c.label = 4;
                        case 4: return [2 /*return*/, this.active];
                    }
                });
            });
        };
        return DefaultSubscriptionsGuard;
    }());
    DefaultSubscriptionsGuard.decorators = [
        { type: core.Injectable }
    ];
    DefaultSubscriptionsGuard.ctorParameters = function () { return [
        { type: ngxComponents.TenantUiService }
    ]; };

    var DefaultSubscriptionsNavigationFactory = /** @class */ (function () {
        function DefaultSubscriptionsNavigationFactory(defaultSubscriptionsGuard) {
            this.defaultSubscriptionsGuard = defaultSubscriptionsGuard;
            this.navNode = new ngxComponents.NavigatorNode({
                label: ngxComponents.gettext('Default subscriptions'),
                path: '/default-subscriptions',
                icon: 'c8y-c8y-data',
                parent: ngxComponents.gettext('Ecosystem'),
                priority: 100
            });
        }
        /** Returns the navigation node if the feature is active. */
        DefaultSubscriptionsNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.defaultSubscriptionsGuard.canActivate()];
                        case 1:
                            if (_a.sent()) {
                                return [2 /*return*/, this.navNode];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        return DefaultSubscriptionsNavigationFactory;
    }());
    DefaultSubscriptionsNavigationFactory.decorators = [
        { type: core.Injectable }
    ];
    DefaultSubscriptionsNavigationFactory.ctorParameters = function () { return [
        { type: DefaultSubscriptionsGuard }
    ]; };

    var ɵ0 = [
        {
            path: 'default-subscriptions',
            component: DefaultSubscriptionsComponent,
            canActivate: [DefaultSubscriptionsGuard]
        }
    ];
    var DefaultSubscriptionsModule = /** @class */ (function () {
        function DefaultSubscriptionsModule() {
        }
        return DefaultSubscriptionsModule;
    }());
    DefaultSubscriptionsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [ngxComponents.CoreModule, forms.ReactiveFormsModule],
                    declarations: [DefaultSubscriptionsComponent],
                    entryComponents: [DefaultSubscriptionsComponent],
                    exports: [DefaultSubscriptionsComponent],
                    providers: [
                        DefaultSubscriptionsService,
                        DefaultSubscriptionsGuard,
                        {
                            provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                            useClass: DefaultSubscriptionsNavigationFactory,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DefaultSubscriptionsComponent = DefaultSubscriptionsComponent;
    exports.DefaultSubscriptionsModule = DefaultSubscriptionsModule;
    exports.DefaultSubscriptionsService = DefaultSubscriptionsService;
    exports["ɵ0"] = ɵ0;
    exports["ɵa"] = DefaultSubscriptionsGuard;
    exports["ɵb"] = DefaultSubscriptionsNavigationFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-default-subscriptions.umd.js.map
