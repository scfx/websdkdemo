{"version":3,"file":"breadcrumb.service.d.ts","sources":["breadcrumb.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';\nimport { StateService } from '../common/state-service.abstract';\nimport { Breadcrumb } from './breadcrumb.model';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type BreadcrumbExtension = Breadcrumb | Breadcrumb[] | ExtensionFactory<Breadcrumb>;\nexport declare const HOOK_BREADCRUMB: InjectionToken<unknown>;\nexport declare class BreadcrumbService extends StateService implements ExtensionPoint<BreadcrumbExtension> {\n    private injector;\n    items$: Observable<Breadcrumb[]>;\n    factories: BreadcrumbExtension[];\n    readonly refreshTrigger: Subject<unknown>;\n    readonly state$: BehaviorSubject<Set<Breadcrumb>>;\n    private preferredPath;\n    constructor(injector: Injector, router: Router);\n    get state(): Set<Breadcrumb>;\n    /**\n     * Adds a new item to the action bar in the header.\n     * @param item The item to add.\n     */\n    add(item: Breadcrumb): void;\n    /**\n     * Removes an action bar item from the header.\n     * @param item The item to remove.\n     */\n    remove(item: Breadcrumb): void;\n    /**\n     * Refresh the extension factories\n     */\n    refresh(): void;\n    /**\n     * Sets the crumb that contains that path to the top.\n     * @param path The path to prefer.\n     */\n    selectPreferredByPath(path: string): void;\n    sortByPreferredPath(breadcrumbs: any): any;\n}\n"]}