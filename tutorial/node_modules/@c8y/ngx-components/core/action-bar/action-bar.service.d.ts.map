{"version":3,"file":"action-bar.service.d.ts","sources":["action-bar.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';\nimport { StateService } from '../common/state-service.abstract';\nimport { ActionBarItem } from './action-bar.model';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type ActionBarExtension = ActionBarItem | ActionBarItem[] | ExtensionFactory<ActionBarItem>;\n/**\n * A hook to add ActionBarItems using the multi provider extension concept.\n *\n * @example\n * ```typescript\n * providers: [\n *   {\n *     provide: HOOK_ACTION_BAR,\n *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],\n *     multi: true\n *   }\n * ]\n * ```\n *\n */\nexport declare const HOOK_ACTION_BAR: InjectionToken<ActionBarExtension>;\n/**\n * A service which defines action-bar items via the multi provider concept.\n *\n * @example\n * ```typescript\n * // preferred way, multi provider concept:\n * providers: [\n *   {\n *     provide: HOOK_ACTION_BAR,\n *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],\n *     multi: true\n *   }\n * ]\n *\n * // use services:\n * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });\n * ```\n */\nexport declare class ActionBarService extends StateService implements ExtensionPoint<ActionBarExtension> {\n    private injector;\n    items$: Observable<ActionBarItem[]>;\n    factories: ActionBarExtension[];\n    readonly refreshTrigger: Subject<unknown>;\n    protected state$: BehaviorSubject<Set<ActionBarItem>>;\n    /**\n     * @ignore\n     */\n    constructor(injector: Injector, router: Router);\n    /**\n     * Returns the current state.\n     * @readonly\n     * @returns The current set of actions.\n     */\n    get state(): Set<ActionBarItem>;\n    /**\n     * Refreshes the current store.\n     */\n    refresh(): void;\n    /**\n     * Adds a new item to the action bar in the header and emits a state change.\n     * @param item The item to add.\n     */\n    add(item: ActionBarItem): void;\n    /**\n     * Removes an action bar item from the header and emits a state change.\n     * @param item The item to remove.\n     */\n    remove(item: ActionBarItem): void;\n}\n"]}