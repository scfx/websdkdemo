{"version":3,"file":"data-grid.component.d.ts","sources":["data-grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, OnChanges, QueryList, ViewContainerRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { IResultList } from '@c8y/client';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoadMoreComponent } from '../common/load-more.component';\nimport { LoadMoreMode } from '../common/load-more.model';\nimport { CellRendererSpec } from './column/cell-renderer';\nimport { ColumnDirective } from './column/column.directive';\nimport { FilteringFormRendererSpec, FilteringModifier } from './column/filtering-form-renderer';\nimport { ActionControl, BuiltInActionType, BulkActionControl, Column, DataGrid, DisplayOptions, FilteringActionType, Pagination, Row, ServerSideDataCallback, SortOrder, GridConfig, HeaderActionControl } from './data-grid.model';\nimport { GridDataSource } from './grid-data-source';\nexport declare class DataGridComponent implements DataGrid, OnChanges, AfterViewInit {\n    private sanitizer;\n    private hostRef;\n    private cd;\n    private cfr;\n    /** The title for the data grid, it's displayed in the grid's header. */\n    title: string;\n    /** The label for load more button. */\n    loadMoreItemsLabel: string;\n    /** The label for loading indicator. */\n    loadingItemsLabel: string;\n    /** Determines whether text search input is shown in the grid's header. */\n    showSearch: boolean;\n    /** Takes an event emitter. When an event is emitted, the grid will be reloaded. */\n    refresh: EventEmitter<any>;\n    columns: Column[];\n    /** The list of columns to be displayed in the grid. */\n    set _columns(columns: Column[]);\n    dataSource: GridDataSource;\n    rows: Row[];\n    /** The list of rows to be displayed in the grid (used for client side data). */\n    set _rows(rows: Row[]);\n    filteringLabelsParams: {\n        filteredItemsCount: number;\n        allItemsCount: number;\n    };\n    pagination: Pagination;\n    paginationLabelParams: {\n        pageFirstItemIdx: number;\n        pageLastItemIdx: number;\n        itemsTotal: number;\n    };\n    readonly possiblePageSizes: number[];\n    readonly minPossiblePageSize: number;\n    /** Pagination settings, e.g. allows for setting current page or page size. */\n    set _pagination(pagination: Pagination);\n    infiniteScroll: LoadMoreMode;\n    /** Sets load more mode. */\n    set _infiniteScroll(infiniteScroll: LoadMoreMode);\n    serverSideDataCallback: ServerSideDataCallback;\n    /**\n     * Sets a callback function which will be invoked whenever data needs to be loaded from server.\n     * The function should take [[DataSourceModifier]] and return [[ServerSideDataResult]].\n     */\n    set _serverSideDataCallback(serverSideDataCallback: ServerSideDataCallback);\n    selectable: boolean;\n    /** Determines whether items can be selected by clicking a checkbox in the first column. */\n    set _selectable(selectable: boolean);\n    selectionPrimaryKey: string;\n    /** Determines which item's property will be used to distinguish selection status. */\n    set _selectionPrimaryKey(selectionPrimaryKey: string);\n    displayOptions: DisplayOptions;\n    /** Sets display options. */\n    set _displayOptions(displayOptions: DisplayOptions);\n    actionControls: ActionControl[];\n    /** Sets action controls (actions available for individual items). */\n    set _actionControls(actionControls: ActionControl[]);\n    bulkActionControls: BulkActionControl[];\n    /** Sets bulk action controls (actions available for items selected by user). */\n    set _bulkActionControls(bulkActionControls: BulkActionControl[]);\n    headerActionControls: HeaderActionControl[];\n    /** Sets header action controls (actions available from data grid header). */\n    set _headerActionControls(headerActionControls: HeaderActionControl[]);\n    /** Sets initial search text. */\n    searchText: string;\n    /** Shows the warning for the sub-assets counter */\n    showCounterWarning: boolean;\n    /** Emits an event when mouse is over a row. */\n    rowMouseOver: EventEmitter<object>;\n    /** Emits an event when mouse leaves a row. */\n    rowMouseLeave: EventEmitter<object>;\n    /** Emits an event when a row is clicked. */\n    rowClick: EventEmitter<object>;\n    /** Emits an event when grid's configuration is changed. */\n    onConfigChange: EventEmitter<GridConfig>;\n    /** Emits an event when a filter is applied in a column. */\n    onFilter: EventEmitter<object>;\n    /** Emits an event when items selection changes. The array contains keys of selected items (key property is defined by `selectionPrimaryKey`). */\n    itemsSelect: EventEmitter<string[]>;\n    /** Emits an event when reload button is clicked. */\n    onReload: EventEmitter<any>;\n    columnRenderers: QueryList<ColumnDirective>;\n    scrollContainer: ElementRef;\n    infiniteScrollContainer: ViewContainerRef;\n    loadMoreComponent: LoadMoreComponent;\n    columnNames: any[];\n    styles: {\n        tableCursor: string;\n        gridTemplateColumns: any;\n        gridInfiniteScrollColumn: any;\n    };\n    searchText$: EventEmitter<string>;\n    filteringApplied: boolean;\n    totalPagesCount$: BehaviorSubject<number>;\n    hidePagination$: import(\"rxjs\").Observable<boolean>;\n    selectedItemIds: string[];\n    currentPageSelectionState: {\n        allSelected: boolean;\n        allDeselected: boolean;\n    };\n    builtInActionType: {\n        Edit: BuiltInActionType;\n        Delete: BuiltInActionType;\n        Export: BuiltInActionType;\n    };\n    resizeHandleMouseDown$: EventEmitter<any>;\n    resizeHandleContainerMouseMove$: EventEmitter<any>;\n    resizeHandleContainerMouseUp$: EventEmitter<any>;\n    private headerBeingResized;\n    private thRefs;\n    private thEls;\n    private recreateLoadMoreComponent;\n    private unsubscribe$;\n    /**\n     * Event emitter used for loading data grid data with debounce.\n     * This is used to avoid having multiple this.loadData() function calls.\n     */\n    private triggerLoadData;\n    constructor(sanitizer: DomSanitizer, hostRef: ElementRef, cd: ChangeDetectorRef, cfr: ComponentFactoryResolver);\n    ngOnInit(): void;\n    ngOnChanges(event: any): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    trackByName(index: any, item: any): any;\n    resolveCellValue(row: any, path: any): any;\n    changeSortOrder(columnName: any): void;\n    updateSorting(columnNames: string[], sortOrder: SortOrder): void;\n    applyFilter(columnName: any, dropdown: any, filteringModifier: any): void;\n    resetFilter(columnName: any, dropdown: any): void;\n    clearFilters(): void;\n    updateFiltering(columnNames: string[], action: {\n        type: FilteringActionType;\n        payload?: {\n            filteringModifier: FilteringModifier;\n        };\n    }, reload?: boolean): void;\n    updateFilteringApplied(): void;\n    isColumnFilteringApplied(column: Column): boolean;\n    updatePagination({ itemsPerPage, page }: {\n        itemsPerPage: any;\n        page: any;\n    }): void;\n    clickReload(): void;\n    reload(): void;\n    loadNextPage(): Promise<IResultList<object>>;\n    getCellRendererSpec({ value, row, columnName }: {\n        value: any;\n        row: any;\n        columnName: any;\n    }): CellRendererSpec;\n    getHeaderCellRendererSpec({ value, columnName }: {\n        value: any;\n        columnName: any;\n    }): CellRendererSpec;\n    getFilteringFormRendererSpec({ column, dropdown }: {\n        column: any;\n        dropdown: any;\n    }): FilteringFormRendererSpec;\n    setAllItemsSelected(selected: any): void;\n    setAllItemsInCurrentPageSelected(selected: any): void;\n    setItemsSelected(items: any[], selected: any): void;\n    cancel(): void;\n    isItemSelected(item: any): boolean;\n    onColumnDrop({ previousIndex, currentIndex }: {\n        previousIndex: any;\n        currentIndex: any;\n    }): void;\n    updateGridColumnsSize(): void;\n    private loadData;\n    private emitConfigChange;\n    private updateColumns;\n    private withColumnDefaults;\n    private updateColumnNames;\n    private setupResizeHandle;\n    private clearMouseHighlights;\n    private _getCellRendererSpec;\n    private getColumnRenderer;\n    private updateFilteringLabelsParams;\n    private updatePaginationLabelParams;\n    private createLoadMoreComponent;\n    private scrollToTop;\n}\n"]}