export declare const MESSAGES: {
    '^Access is denied$': {
        gettext: any;
    };
    '^Alarm created$': {
        gettext: any;
    };
    '^Alarm updated$': {
        gettext: any;
    };
    '^API is not available with the new domain$': {
        gettext: any;
    };
    '^Application with given name already exist$': {
        gettext: any;
    };
    '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Apply software changes: (.+?)\\.?$': {
        gettext: any;
        placeholders: {
            softwareChanges: {
                capture: string;
                translate: {
                    'install "(.+?)" \\(version: (.+?)\\)': {
                        gettext: any;
                        placeholders: {
                            softwareName: string;
                            softwareVersion: string;
                        };
                    };
                    'install "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: any;
                        placeholders: {
                            softwareName: string;
                        };
                    };
                    'delete "(.+?)" \\(version: (.+?)\\)': {
                        gettext: any;
                        placeholders: {
                            softwareName: string;
                            softwareVersion: string;
                        };
                    };
                    'delete "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: any;
                        placeholders: {
                            softwareName: string;
                        };
                    };
                };
            };
        };
    };
    '^Assign device profile (.+?) to device (.+?)$': {
        gettext: any;
        placeholders: {
            profileName: string;
            deviceName: string;
        };
    };
    '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
        gettext: any;
        placeholders: {
            tenant: string;
            valuesList: string;
        };
    };
    '^Authentication failed! : User account is locked$': {
        gettext: any;
    };
    '^Availability monitoring record$': {
        gettext: any;
    };
    '^Can not activate a certificate which is either expired or not yet valid$': {
        gettext: any;
    };
    '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
        gettext: any;
        placeholders: {
            fingerprint: string;
        };
    };
    '^Cannot change password. : Provided token does not exist.$': {
        gettext: any;
    };
    '^Cannot deploy module (.*)$': {
        gettext: any;
        placeholders: {
            errorMessage: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$": {
        gettext: any;
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: any;
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
            keyword: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$": {
        gettext: any;
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
        };
    };
    "^Cannot deploy module (.+?)! : Deployment failed in module '(.+?)' in expression '(.+?)' : Exception compiling script '(.+?)' of dialect '(.+?)': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$": {
        gettext: any;
        placeholders: {
            moduleName: string;
            expression: string;
            scriptName: string;
            scriptDialect: string;
            missingSyntax: string;
            affectedStatement: string;
        };
    };
    "^Cannot execute bulk operation on empty group. Group with id='(\\d+?)' doesn't have child assets.$": {
        gettext: any;
        placeholders: {
            groupId: string;
        };
    };
    "^Cannot execute bulk operation on empty group. DynamicGroup with id='(\\d+?)' doesn't have child assets$": {
        gettext: any;
        placeholders: {
            groupId: string;
        };
    };
    '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
        gettext: any;
        placeholders: {
            failureReason: string;
        };
    };
    '^Cannot reschedule bulk operation. All its operations are successful$': {
        gettext: any;
    };
    '^Cannot reset user password : Cannot find user with such email.$': {
        gettext: any;
    };
    '^Cannot update/delete application binary via this endpoint$': {
        gettext: any;
    };
    "^Can't delete user because it is used by another managed object$": {
        gettext: any;
    };
    '^Cep module created$': {
        gettext: any;
    };
    '^Cep module updated$': {
        gettext: any;
    };
    '^Cep module deleted$': {
        gettext: any;
    };
    '^Cep module "(.+?)" created$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Cep module "(.+?)" updated$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Cep module "(.+?)" deleted$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Command state is invalid: (.+)$': {
        gettext: any;
        placeholders: {
            violations: {
                capture: string;
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: any;
                        placeholders: {
                            field: string;
                        };
                    };
                };
            };
        };
    };
    '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
        gettext: any;
        placeholders: {
            endpointName: string;
            keyType: string;
            fingerprint: string;
            host: string;
            port: string;
        };
    };
    '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
        gettext: any;
        placeholders: {
            endpointName: string;
            userName: string;
        };
    };
    '^Could not save object remoteAccessUpdate: (.+)$': {
        gettext: string;
        placeholders: {
            errorMessages: {
                capture: string;
                translate: {
                    'Could not recognize host-key format': {
                        gettext: any;
                    };
                    'Could not recognize key-pair format': {
                        gettext: any;
                    };
                };
            };
        };
    };
    '^Could not update user. : Error persisting user (.+?)!$': {
        gettext: any;
        placeholders: {
            username: string;
        };
    };
    '\u02C6Create bulk operation$': {
        gettext: any;
    };
    '^Create bulk operation: (.+)$': {
        gettext: any;
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: any;
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    '^Creation ramp must be greater than (\\d+?)$': {
        gettext: any;
        placeholders: {
            minSeconds: string;
        };
    };
    '^Created container$': {
        gettext: any;
    };
    '^Created pod: (.+)$': {
        gettext: any;
        placeholders: {
            imageName: string;
        };
    };
    '^CSV file contained empty dataset$': {
        gettext: any;
    };
    '^Cycle detected for route (.+?)!$': {
        gettext: any;
        placeholders: {
            route: string;
        };
    };
    '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
        gettext: any;
    };
    '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
        gettext: any;
    };
    '^Delete bulk operation$': {
        gettext: any;
    };
    '^Delete bulk operation: (.+)$': {
        gettext: any;
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: any;
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    "^Device id '(.+?)' contains '(.+?)' character which is not permitted.$": {
        gettext: any;
        placeholders: {
            deviceId: string;
            invalidCharacter: string;
        };
    };
    "^Device name: '(.+?)', alarm text: '(.+?)'$": {
        gettext: any;
        placeholders: {
            deviceName: string;
            alarmText: string;
        };
    };
    '^Display name$': {
        gettext: any;
    };
    '^Domain name in uploaded certificate differs from the one in use$': {
        gettext: any;
    };
    '^Domain name is already in use by another tenant!$': {
        gettext: any;
    };
    '^Duplicated connector for instanceUrl (.+?)!$': {
        gettext: any;
        placeholders: {
            targetUrl: string;
        };
    };
    '^Duplicated connector for name (.+?)!$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Entry is outside of the target dir: (.+)$': {
        gettext: any;
        placeholders: {
            path: string;
        };
    };
    '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
        gettext: any;
        placeholders: {
            minCharactersCount: string;
            maxCharactersCount: string;
        };
    };
    '^Error during password validation. : Your password has been used already. Choose another.$': {
        gettext: any;
    };
    "^Error in statement (.+?):(.+?)! : Incorrect syntax near '(.+?)' near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: any;
        placeholders: {
            moduleName: string;
            statementNumber: string;
            expression: string;
            keyword: string;
        };
    };
    '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
        gettext: any;
        placeholders: {
            type: string;
            value: string;
        };
    };
    '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
        gettext: any;
        placeholders: {
            applicationId: string;
        };
    };
    '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
        gettext: any;
    };
    '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
        gettext: any;
    };
    '^Failed to extract certificate from PKCS12$': {
        gettext: any;
    };
    '^Failed to update domain at the platform$': {
        gettext: any;
    };
    "^Finding device data from database failed : No managedObject for id '(.+?)'!$": {
        gettext: any;
        placeholders: {
            deviceId: string;
        };
    };
    '^Following mandatory fields should be included: (.+?)$': {
        gettext: any;
        placeholders: {
            fields: string;
        };
    };
    '^Global Role updated$': {
        gettext: any;
    };
    '^Global Role (.+?) updated$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Global Role (.+?) updated: (.+)$': {
        gettext: any;
        placeholders: {
            name: string;
            updatesList: {
                capture: string;
                translate: {
                    'applications \\[([^\\]]+?)\\] added': {
                        gettext: any;
                        placeholders: {
                            list: string;
                        };
                    };
                    'applications \\[([^\\]]+?)\\] removed': {
                        gettext: any;
                        placeholders: {
                            list: string;
                        };
                    };
                    'roles \\[([^\\]]+?)\\] added': {
                        gettext: any;
                        placeholders: {
                            list: string;
                        };
                    };
                    'roles \\[([^\\]]+?)\\] removed': {
                        gettext: any;
                        placeholders: {
                            list: string;
                        };
                    };
                };
            };
        };
    };
    '^Global Roles$': {
        gettext: any;
    };
    '^Operation updated: (.+)$': {
        gettext: any;
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            status: string;
                        };
                    };
                    "description='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            description: string;
                        };
                    };
                    "device name='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            deviceName: string;
                        };
                    };
                    "failure reason='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            failureReason: string;
                        };
                    };
                };
            };
        };
    };
    '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
        gettext: any;
        placeholders: {
            type: string;
            value: string;
        };
    };
    '^Invalid credentials! : Bad credentials$': {
        gettext: any;
    };
    '^Invalid credentials! : No phone number provided$': {
        gettext: any;
    };
    '^Inventory Role removed$': {
        gettext: any;
    };
    '^Inventory Role (.+?) removed': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Inventory Role updated$': {
        gettext: any;
    };
    '^Inventory Role (.+?) updated': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
        gettext: any;
    };
    '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
        gettext: any;
    };
    '^Log file requested$': {
        gettext: any;
    };
    '^Managed object deleted$': {
        gettext: any;
    };
    '^Managed object "(.+?)" deleted$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Maximum file size exceeded$': {
        gettext: any;
    };
    "^Message with ID (.+?) doesn't exist in smart rest template (.+?)$": {
        gettext: any;
        placeholders: {
            messageId: string;
            templateId: string;
        };
    };
    '^NewDeviceRequest for id = (.+?) already exists.$': {
        gettext: any;
        placeholders: {
            id: string;
        };
    };
    '^No communication with device since (.+?)$': {
        gettext: any;
        placeholders: {
            timestamp: string;
        };
    };
    '^No data received from device within required interval.$': {
        gettext: any;
    };
    '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
        gettext: any;
    };
    '^Not within any context!$': {
        gettext: any;
    };
    '^Maximum age cannot be bigger than 10 years.$': {
        gettext: any;
    };
    '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
        gettext: any;
        placeholders: {
            maxLength: string;
        };
    };
    '^Microservice not available.*$': {
        gettext: any;
    };
    '^Operation created$': {
        gettext: any;
    };
    '^Operation updated$': {
        gettext: any;
    };
    "^Operation created: status='(.+?)'.": {
        gettext: any;
        placeholders: {
            status: string;
        };
    };
    '^Option created$': {
        gettext: any;
    };
    '^Option "(.+?)" created$': {
        gettext: any;
        placeholders: {
            option: string;
        };
    };
    '^Option deleted$': {
        gettext: any;
    };
    '^Option "(.+?)" deleted$': {
        gettext: any;
        placeholders: {
            option: string;
        };
    };
    '^Owner field error. : Cannot introduce cyclic dependency.': {
        gettext: any;
    };
    '^Password change is temporary blocked.$': {
        gettext: any;
    };
    '^Password cipher does not match': {
        gettext: any;
    };
    '^Platform application cannot be added to, nor removed from any tenant.$': {
        gettext: any;
    };
    '^Private key must be provided in KEY_PAIR credentials$': {
        gettext: any;
    };
    '^Private key cipher does not match': {
        gettext: any;
    };
    '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
        gettext: any;
        placeholders: {
            protocol: string;
            credentialsType: string;
        };
    };
    '^pulling image "(.+)"$': {
        gettext: any;
        placeholders: {
            imageName: string;
        };
    };
    '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
        gettext: any;
    };
    '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
        gettext: any;
        placeholders: {
            id: string;
        };
    };
    '^Retrieve configuration snapshot from device (.+?)': {
        gettext: any;
        placeholders: {
            deviceName: string;
        };
    };
    '^Retrieve (.+?) configuration snapshot from device (.+?)': {
        gettext: any;
        placeholders: {
            configurationType: string;
            deviceName: string;
        };
    };
    '^Scaled up replica set (.+) to (\\d+)$': {
        gettext: any;
        placeholders: {
            replicaSetName: string;
            scaleNumber: string;
        };
    };
    '^Send configuration snapshot (.+?) of configuration type (.+?) to device (.+?)': {
        gettext: any;
        placeholders: {
            snapshotName: string;
            configurationType: string;
            deviceName: string;
        };
    };
    '^Send configuration snapshot (.+?) to device (.+?)': {
        gettext: any;
        placeholders: {
            snapshotName: string;
            deviceName: string;
        };
    };
    '^Simulator state is invalid: (.+)$': {
        gettext: any;
        placeholders: {
            violations: {
                capture: string;
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: any;
                        placeholders: {
                            field: string;
                        };
                    };
                    '(\\w+?) - must be less than or equal to (\\d+)': {
                        gettext: any;
                        placeholders: {
                            field: string;
                            maxValue: string;
                        };
                    };
                    '(\\w+?) - should not contain null values': {
                        gettext: any;
                        placeholders: {
                            field: string;
                        };
                    };
                };
            };
        };
    };
    "^Smart rest template (.+?) doesn't exist$": {
        gettext: any;
        placeholders: {
            templateId: string;
        };
    };
    '^Smart rule created$': {
        gettext: any;
    };
    '^Smart rule updated$': {
        gettext: any;
    };
    '^Smart rule enabled$': {
        gettext: any;
    };
    '^Smart rule disabled$': {
        gettext: any;
    };
    '^Smart rule deleted$': {
        gettext: any;
    };
    '^Smart rule "(.+?)" created$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" updated$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" enabled$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" disabled$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" deleted$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Started container$': {
        gettext: any;
    };
    '^Successfully assigned (.+) to (.+)$': {
        gettext: any;
        placeholders: {
            imageName: string;
            address: string;
        };
    };
    '^Successfully pulled image "(.+)"$': {
        gettext: any;
        placeholders: {
            imageName: string;
        };
    };
    '^Tenant creation failed. : Tenant with given id already exists.$': {
        gettext: any;
    };
    '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
        gettext: any;
        placeholders: {
            tenantId: string;
        };
    };
    '^Tenant "(.+?)" activated$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant (.+?) has sub-tenants, please remove them first!$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant activated$': {
        gettext: any;
    };
    '^Tenant "(.+?)" created$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant created$': {
        gettext: any;
    };
    '^Tenant "(.+?)" deleted$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant deleted$': {
        gettext: any;
    };
    '^Tenant "(.+?)" suspended$': {
        gettext: any;
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant suspended$': {
        gettext: any;
    };
    '^Tenant "(.+?)" updated: (.+?)$': {
        gettext: any;
        placeholders: {
            tenant: string;
            properties: string;
        };
    };
    '^Tenant updated$': {
        gettext: any;
    };
    '^Too Many Requests$': {
        gettext: any;
    };
    "^User alias equals username '(.+)'$": {
        gettext: any;
    };
    '^User created$': {
        gettext: any;
    };
    '^User (.+?) created$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^User deleted$': {
        gettext: any;
    };
    '^User (.+?) deleted$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^User updated$': {
        gettext: any;
    };
    '^User (.+?) updated: (.+)$': {
        gettext: any;
        placeholders: {
            name: string;
            updatesList: {
                capture: string;
                translate: {
                    "delegatedBy='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            delegate: string;
                        };
                    };
                    "owner='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            owner: string;
                        };
                    };
                    'inventory assignment \\[(.+?)\\] added': {
                        gettext: any;
                        placeholders: {
                            inventoryAssignment: string;
                        };
                    };
                    'inventory assignment \\[(.+?)\\] removed': {
                        gettext: any;
                        placeholders: {
                            inventoryAssignment: string;
                        };
                    };
                    'applications \\[(.+?)\\] added$': {
                        gettext: any;
                        placeholders: {
                            applicationsList: string;
                        };
                    };
                    'applications \\[(.+?)\\] removed$': {
                        gettext: any;
                        placeholders: {
                            applicationsList: string;
                        };
                    };
                    'global roles \\[(.+?)\\] added$': {
                        gettext: any;
                        placeholders: {
                            globalRolesList: string;
                        };
                    };
                    'global roles \\[(.+?)\\] removed$': {
                        gettext: any;
                        placeholders: {
                            globalRolesList: string;
                        };
                    };
                };
            };
        };
    };
    "^User with username '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: any;
        placeholders: {
            username: string;
        };
    };
    "^User with username or alias '(.+)' already exists! : Duplicated: (.+)$": {
        gettext: any;
        placeholders: {
            usernameOrAlias: string;
        };
    };
    "^User with email '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: any;
        placeholders: {
            email: string;
        };
    };
    '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
        gettext: any;
        placeholders: {
            option: string;
        };
    };
    '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
        gettext: any;
        placeholders: {
            option: string;
        };
    };
    '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
        gettext: any;
    };
    '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
        gettext: any;
    };
    '^You have reached devices limit. No more devices can be registered.$': {
        gettext: any;
    };
    '^(.+) succeeded for volume "(.+)"': {
        gettext: any;
        placeholders: {
            operation: string;
            volume: string;
        };
    };
    "^Exception on tenant (.+) in statement '(.+)': Invocation exception when invoking method '(.+)' of class '(.+)' passing parameters \\[(.+)\\] for statement '(.+)': (.+) : (.+)$": {
        gettext: any;
        placeholders: {
            tenantId: string;
            moduleName: string;
            methodName: string;
            classPath: string;
            parameters: string;
            statement: string;
            exceptionType: string;
            exceptionMessage: string;
        };
    };
    '^No nodes are available that match all of the predicates: (.+).$': {
        gettext: any;
        placeholders: {
            predicates: string;
        };
    };
    '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: any;
        placeholders: {
            requestMethod: string;
            uri: string;
            protocol: string;
        };
    };
    '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: any;
        placeholders: {
            requestMethod: string;
            uri: string;
            protocol: string;
        };
    };
    '^Error syncing pod$': {
        gettext: any;
    };
    '^Failed create pod sandbox.$': {
        gettext: any;
    };
    '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
        gettext: any;
        placeholders: {
            tenantId: string;
            statement: string;
            httpStatusCode: string;
            message: string;
        };
    };
    "^User '(.+)' is managed by a remote identity management service defined by an administrator, direct update is forbidden$": {
        gettext: any;
        placeholders: {
            userName: string;
        };
    };
    '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
        gettext: any;
        placeholders: {
            parentDeviceName: string;
            parentDeviceId: string;
        };
    };
    '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
        gettext: any;
        placeholders: {
            parentDeviceName: string;
            parentDeviceId: string;
        };
    };
    '^Added child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: any;
        placeholders: {
            name: string;
            id: string;
        };
    };
    '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: any;
        placeholders: {
            name: string;
            id: string;
        };
    };
    '^Change value of "(.+)" to (.+) (.+).$': {
        gettext: any;
        placeholders: {
            name: string;
            value: string;
            unit: string;
        };
    };
    '^Change value of "(.+)" to (.+).$': {
        gettext: any;
        placeholders: {
            name: string;
            value: string;
        };
    };
    '^Change status of "(.+)" to "(.+)".$': {
        gettext: any;
        placeholders: {
            name: string;
            label: string;
        };
    };
    '^Send message "(.+)".$': {
        gettext: any;
        placeholders: {
            str: string;
        };
    };
    '^Close relay (.+).$': {
        gettext: any;
        placeholders: {
            number: string;
        };
    };
    '^Open relay (.+).$': {
        gettext: any;
        placeholders: {
            number: string;
        };
    };
    '^Change trace status to (.+).$': {
        gettext: any;
        placeholders: {
            state: string;
        };
    };
    '^Change relay status to (.+).$': {
        gettext: any;
        placeholders: {
            status: string;
        };
    };
    '^Closing relay (.+).$': {
        gettext: any;
        placeholders: {
            number: string;
        };
    };
    '^Opening relay (.+).$': {
        gettext: any;
        placeholders: {
            number: string;
        };
    };
    '^Update bulk operation$': {
        gettext: any;
    };
    '^Update bulk operation: (.+)$': {
        gettext: any;
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: any;
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: any;
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    '^Update firmware to: "?(.+?)"? \\(version: (.+)\\)\\.?$': {
        gettext: any;
        placeholders: {
            name: string;
            version: string;
        };
    };
    '^Update firmware to: "?(.+?)"?\\.?$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Update configuration to (.+).$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Apply device profile: (.+).?$': {
        gettext: any;
        placeholders: {
            name: string;
        };
    };
    '^Execute generic command: (.+).?$': {
        gettext: any;
        placeholders: {
            command: string;
        };
    };
    '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
        gettext: any;
    };
    '^Failed to refresh application. : Cannot refresh application without active version id.$': {
        gettext: any;
    };
    '^Scaled down replica set (.+) to (\\d+)$': {
        gettext: any;
        placeholders: {
            replicaSetName: string;
            scaleNumber: string;
        };
    };
    '^Deleted pod: (.+)$': {
        gettext: any;
        placeholders: {
            imageName: string;
        };
    };
    '^Container image "(.+)" already present on machine$': {
        gettext: any;
        placeholders: {
            imageName: string;
        };
    };
    '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
        gettext: any;
    };
};
