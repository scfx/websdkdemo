{"version":3,"file":"translate.loader.d.ts","sources":["translate.loader.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { OptionsService } from '../common/options.service';\nimport { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';\nexport declare class TranslateCustomLoader implements TranslateLoader {\n    private http;\n    private optionsService;\n    private cachedLocaleDictionaryService;\n    private path;\n    private languages;\n    constructor(http: HttpClient, optionsService: OptionsService, cachedLocaleDictionaryService: CachedLocaleDictionaryService, path?: string, languages?: any);\n    getTranslation(lang: string): Observable<any>;\n    /**\n     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.\n     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.\n     */\n    getDictionaryWithTrimmedKeys(dictionary: object): any;\n}\nexport declare function trimTranslationKey(key: any): any;\n"]}