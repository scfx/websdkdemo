import { Subject } from 'rxjs';
import { OptionsService } from '../../common/options.service';
import { Cookie, CookieBannerSettings, CookiePreferences } from './cookie-banner.model';
/**
 * This service is handling the cookie banner and cookie preferences related logic.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CookieBannerService {
    private options;
    readonly STORAGE_KEY: string;
    readonly COOKIE_BANNER = "cookieBanner";
    readonly COOKIE_PREFERENCES_CONFIG = "cookiePreferences";
    isCookieBannerShowed$: Subject<boolean>;
    cookieDescriptions: {
        required: any;
        functional: any;
        marketing: any;
    };
    constructor(options: OptionsService);
    /**
     * Returns Cookie preferences configuration.
     * @returns {object} Return an object with cookie preferences configuration defined in application options.
     */
    getCookiePreferencesConfig(): CookiePreferences;
    /**
     * Returns Cookie banner configuration.
     * @returns {object} Return an object with cookie banner configuration defined in application options.
     */
    getCookieBannerSettings(): CookieBannerSettings;
    /**
     * Converts the cookie preferences to boolean. Sets the cookie preferences configuration in local storage.
     * @param {object} cookiePreferences Object with cookie preferences configuration
     */
    setCookies(cookiePreferences: CookiePreferences): void;
    /**
     * Verifies that cookie banner should be shown.
     * @returns {boolean} Returns if the cookie banner should be shown.
     */
    shouldShowCookieBanner(): boolean;
    /**
     * Gets the cookie preferences configuration from local storage.
     * @returns {object} Object with cookie preferences configuration.
     */
    getUserCookiePreferences(): CookiePreferences;
    /**
     * Verifies that cookie preferences configuration is defined.
     * @returns {boolean} Returns if the cookie preferences configuration is defined.
     */
    isConfigCookiePreferencesDefined(): boolean;
    /**
     * Verifies that functional cookies are enabled.
     * @returns {boolean} True when functional cookies are enabled.
     */
    isFunctionalCookieEnabled(): boolean;
    /**
     * Description of cookies.
     * @param {'required' | 'functional' | 'marketing'} cookieType Takes one of the following options: 'required', 'functional', 'marketing'.
     * @returns {string} The default cookie description, if not explicitly defined in application options.
     */
    getCookieDescription(cookieType: 'required' | 'functional' | 'marketing'): string;
    /**
     * Transforms cookie preferences configuration object to an array of cookie preferences objects. Each object in returned array contains cookie 'name', 'value' and 'isReadonly' property.
     * @param {object} cookiePreferences.
     * @returns {Array} Array shows if the cookie is Readonly.
     */
    transformCookiePreferencesToList(cookiePreferences: CookiePreferences): Cookie[];
    /**
     * Transforms an array of cookie preferences objects to cookie preferences configuration object.
     * @param {Array} cookiePreferencesList Array of cookie preferences.
     * @returns {object} An object with cookie preferences configuration.
     */
    transformCookiePreferencesListToCookiePreferences(cookiePreferencesList: Cookie[]): CookiePreferences;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<CookieBannerService, never>;
}

//# sourceMappingURL=cookie-banner.service.d.ts.map