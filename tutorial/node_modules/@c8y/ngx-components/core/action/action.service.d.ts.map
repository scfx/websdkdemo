{"version":3,"file":"action.service.d.ts","sources":["action.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Injector, InjectionToken } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { StateService } from '../common/state-service.abstract';\nimport { Action } from './action.model';\nimport { ExtensionPoint, ExtensionFactory } from '../common/extension-hooks';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type ActionExtension = Action | Action[] | ExtensionFactory<Action>;\n/**\n * A hook to add an action using the multi-provider extension concept.\n */\nexport declare const HOOK_ACTION: InjectionToken<unknown>;\n/**\n * A service which defines global actions.\n */\nexport declare class ActionService extends StateService implements ExtensionPoint<ActionExtension> {\n    private injector;\n    items$: Observable<Action[]>;\n    factories: ActionExtension[];\n    readonly refreshTrigger: Subject<unknown>;\n    readonly state$: BehaviorSubject<Set<Action>>;\n    constructor(injector: Injector, router: Router);\n    /**\n     * Refresh the extension factories\n     */\n    refresh(): void;\n    /**\n     * Returns the current state.\n     * @readonly\n     * @returns The current set of actions.\n     */\n    get state(): Set<Action>;\n    /**\n     * Adds a new item to the actions in the header and emits a state change.\n     * @param item The item to add.\n     */\n    add(item: Action): void;\n    /**\n     * Removes an action from the header and emits a state change.\n     * @param item The item to remove.\n     */\n    remove(item: Action): void;\n}\n"]}