import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';
import { ContextRouteService } from './context-route.service';
import { Route, RouteFactory } from './router.models';
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare type RouteExtension = Route | Route[] | ExtensionFactory<Route>;
/**
 * A hook to use for Multi Provider extension.
 * @deprecated: Use HOOK_ROUTE
 */
export declare const HOOK_ONCE_ROUTE: InjectionToken<unknown>;
/**
 * A hook to use for Multi Provider extension.
 */
export declare const HOOK_ROUTE: InjectionToken<RouteFactory>;
/**
 * A service which defines routes
 */
export declare class RouterService implements ExtensionPoint<RouteExtension> {
    private injector;
    router: Router;
    private contextRouteService;
    items$: Observable<Route[]>;
    readonly refreshTrigger: Subject<unknown>;
    readonly state: Map<string, Route>;
    factories: RouteExtension[];
    constructor(injector: Injector, router: Router, contextRouteService: ContextRouteService);
    /**
     * Refresh the current context
     */
    refresh(): void;
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route: Route | Route[]): void;
    private getComponentsViaDeprecatedHook;
    private addRoutes;
    private convertRoute;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<RouterService, never>;
}

//# sourceMappingURL=router.service.d.ts.map