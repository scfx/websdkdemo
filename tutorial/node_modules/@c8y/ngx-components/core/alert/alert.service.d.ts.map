{"version":3,"file":"alert.service.d.ts","sources":["alert.service.d.ts"],"names":[],"mappingssourcesContent":["import { Alert } from './alert.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { StateService } from '../common/state-service.abstract';\ndeclare type alertType = 'success' | 'warning' | 'danger' | 'info' | 'system';\n/**\n * A service which allows to display alerts.\n */\nexport declare class AlertService extends StateService {\n    /**\n     * Returns all alerts.\n     * @readonly\n     */\n    get state(): Alert[];\n    /**\n     * @ignore\n     */\n    state$: BehaviorSubject<Alert[]>;\n    private MAX_ALERTS;\n    private ALERT_TIMEOUT;\n    /**\n     * Adds a new alert to the current state.\n     */\n    add(alert: Alert): void;\n    /**\n     * Adds a alert by text.\n     */\n    addByText(type: alertType, txt: string, detailedData?: string): void;\n    /**\n     * Returns all alerts.\n     * @deprecated Use alertService.alerts instead.\n     */\n    list(): Alert[];\n    /**\n     * Remove an alert from the current state.\n     */\n    remove(alert: Alert): void;\n    /**\n     * Updates matching alert with provided values.\n     */\n    update(alert: Alert, fieldsToUpdate: Partial<Alert>): void;\n    /**\n     * Removes last danger alert.\n     * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.\n     *\n     * ```js\n     *  try {\n     *    // something that might throw a danger server msg\n     *  } catch (ex) {\n     *   this.alertService.removeLastDanger();\n     *  }\n     * ```\n     */\n    removeLastDanger(): void;\n    /**\n     * Shorthand for a save successful alert.\n     * @param savedObject The object which was saved.\n     * @return A function that can be executed to show the msg.\n     */\n    saveSuccess(savedObject: string): () => void;\n    /**\n     * Shorthand for a create successful alert.\n     * @param createdObject The object which was created.\n     * @return A function that can be executed to show the msg.\n     */\n    createSuccess(createdObject: any): () => void;\n    /**\n     * Clears all alerts.\n     */\n    clearAll(): void;\n    /**\n     * A shorthand to display a simple success message.\n     * @param text The success text.\n     * @param detailedData The text with additional information.\n     */\n    success(text: string, detailedData?: string): void;\n    /**\n     * A shorthand to display a simple danger message.\n     * @param text The danger text.\n     * @param detailedData The text with additional information.\n     */\n    danger(text: string, detailedData?: string): void;\n    /**\n     * A shorthand to display a simple info message.\n     * @param text The info text.\n     * @param detailedData The text with additional information.\n     */\n    info(text: string, detailedData?: string): void;\n    /**\n     * A shorthand to display a simple warning message.\n     * @param text The warning text.\n     * @param detailedData The text with additional information.\n     */\n    warning(text: string, detailedData?: string): void;\n    /**\n     * Creates alert from standard api errors.\n     * Should be used for errors generated by @c8y/client services.\n     * @param {IResult}  error The error from server.\n     * @param {alertType} type The type of alert.\n     */\n    addServerFailure(error: any, type?: alertType): void;\n    /**\n     * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.\n     * Callbacks are same if they refer to the same function.\n     */\n    areSame(alert1: Alert, alert2: Alert): boolean;\n    private changeAlerts;\n    private addAlert;\n    private hideAutomaticallyIfNeeded;\n    private removeOldestIfMax;\n}\nexport {};\n"]}