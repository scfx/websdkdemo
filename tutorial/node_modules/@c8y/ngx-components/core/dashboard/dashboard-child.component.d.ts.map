{"version":3,"file":"dashboard-child.component.d.ts","sources":["dashboard-child.component.d.ts"],"names":[],"mappingssourcesContent":["import { CdkDrag, CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { ElementRef, EventEmitter } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardChildDimension, Widget } from './dashboard.model';\n/**\n * A dashboard child allows to position elements\n * correctly on a grid. The user can then resize and\n * rearrange the elements, as long as they are not `frozen`.\n *\n * By setting `c8y-dashboard-child-actions` and\n * `c8y-dashboard-child-title` on the element you can add\n * custom actions or a custom title to the current child.\n *\n * By adding the correct branded classes, you can define\n * the look and feel of the child. By default it is displayed\n * as a card.\n *\n * Example:\n *\n * ```html\n *   <c8y-dashboard-child\n *     #cpWidget3\n *     [isFrozen]=\"isFrozen\"\n *     [x]=\"0\"\n *     [y]=\"3\"\n *     [width]=\"4\"\n *     [height]=\"4\"\n *     [class]=\"'card-dashboard panel-content-transparent'\"\n *   >\n *     <c8y-dashboard-child-title *ngIf=\"showTitle\">\n *       <span>Transparent!</span>\n *     </c8y-dashboard-child-title>\n *     <c8y-dashboard-child-action>\n *       <a href=\"\" (click)=\"showTitle = !showTitle; (false)\">\n *         <i [c8yIcon]=\"'heading'\"></i> Hide/show title\n *       </a>\n *     </c8y-dashboard-child-action>\n *     <c8y-dashboard-child-action>\n *       <a href=\"\" (click)=\"cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)\">\n *         <i [c8yIcon]=\"cpWidget3.isFrozen ? 'lock' : 'unlock'\"></i> Toggle freeze\n *       </a>\n *     </c8y-dashboard-child-action>\n *     x: {{ cpWidget3.x }}<br />\n *     y: {{ cpWidget3.y }}<br />\n *     width: {{ cpWidget3.width }}<br />\n *     height: {{ cpWidget3.height }}<br />\n *   </c8y-dashboard-child>\n * ```\n */\nexport declare class DashboardChildComponent implements DashboardChildDimension {\n    dashboard: DashboardComponent;\n    private sanitizer;\n    element: ElementRef;\n    actions: any[];\n    dragSource: CdkDrag;\n    isResize: boolean;\n    isDragging: boolean;\n    klasses: {};\n    _pxWidth: string;\n    _pxHeight: string;\n    /**\n     * The x position of the child.\n     */\n    x: any;\n    /**\n     * The y position of the child.\n     */\n    y: any;\n    /**\n     * The width of the component in grid-columns.\n     */\n    width: number;\n    /**\n     * The height of the component in grid-rows.\n     */\n    height: number;\n    /**\n     * The data object can be used as a dataTransfer object for events of the child.\n     */\n    data: Widget | any;\n    /**\n     * The margin of the child in pixel.\n     */\n    margin: number;\n    /**\n     * If a dashboard is frozen, all children cannot be moved\n     * or resized.\n     */\n    isFrozen: boolean;\n    /**\n     * The child content is initialized, as soon it is scrolled into viewport\n     */\n    useIntersection: boolean;\n    /**\n     * An event fired if a child change is started (dragging or resizing)\n     */\n    changeStart: EventEmitter<DashboardChildComponent>;\n    /**\n     * An event fired if a child change is ended\n     */\n    changeEnd: EventEmitter<DashboardChildComponent>;\n    /**\n     * All classes added to this child\n     */\n    class: string[] | {\n        [key: string]: boolean;\n    };\n    /**\n     * Updates the pixel width of the child (used for resizing)\n     */\n    set pxWidth(value: any);\n    /**\n     * Updates the pixel height of the child (used for resizing)\n     */\n    set pxHeight(value: any);\n    /**\n     * An indicator if the child is intersected (that mean visible for the user)\n     */\n    intersected: boolean;\n    /**\n     * nasty workaround for that issue:\n     * https://github.com/angular/angular/issues/9343\n     */\n    get inlineStyle(): import(\"@angular/platform-browser\").SafeStyle;\n    /**\n     * The observable subscription which is listen to\n     * on changes (drag or resize).\n     */\n    changeSubscription: Subscription;\n    constructor(dashboard: DashboardComponent, sanitizer: DomSanitizer, element: ElementRef);\n    ngOnChanges(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    setDynamicDimension(): void;\n    resizeStarted($event: CdkDragStart): void;\n    dragStarted($event: CdkDragStart): void;\n    reset($event?: CdkDragEnd): void;\n    ngOnDestroy(): void;\n    private removeSelfFromDashboard;\n    private getOrder;\n    private childInView;\n}\n"]}