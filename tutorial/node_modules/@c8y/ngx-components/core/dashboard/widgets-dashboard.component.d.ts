import { EventEmitter } from '@angular/core';
import { BreadcrumbItem } from '../..';
import { DashboardComponent } from './dashboard.component';
import { DashboardChange, DashboardSettings, Widget, WidgetChange } from './dashboard.model';
import * as ɵngcc0 from '@angular/core';
export declare class WidgetsDashboardComponent {
    widgets: Widget[];
    context: any;
    contextDashboard: any;
    set _settings(settings: Partial<DashboardSettings>);
    breadcrumb: BreadcrumbItem;
    settings: DashboardSettings;
    onAddWidget: EventEmitter<DashboardComponent>;
    onEditWidget: EventEmitter<WidgetChange>;
    onDeleteWidget: EventEmitter<WidgetChange>;
    onChangeDashboard: EventEmitter<DashboardChange>;
    onEditDashboard: EventEmitter<DashboardComponent>;
    onDeleteDashboard: EventEmitter<DashboardComponent>;
    onFreeze: EventEmitter<DashboardSettings>;
    onChangeStart: EventEmitter<WidgetChange>;
    onChangeEnd: EventEmitter<WidgetChange>;
    toggleFullscreen(): void;
    fullScreen(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<WidgetsDashboardComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<WidgetsDashboardComponent, "c8y-widgets-dashboard", never, { "contextDashboard": "contextDashboard"; "_settings": "settings"; "widgets": "widgets"; "context": "context"; "breadcrumb": "breadcrumb"; }, { "onAddWidget": "onAddWidget"; "onEditWidget": "onEditWidget"; "onDeleteWidget": "onDeleteWidget"; "onChangeDashboard": "onChangeDashboard"; "onEditDashboard": "onEditDashboard"; "onDeleteDashboard": "onDeleteDashboard"; "onFreeze": "onFreeze"; "onChangeStart": "onChangeStart"; "onChangeEnd": "onChangeEnd"; }, never, never>;
}

//# sourceMappingURL=widgets-dashboard.component.d.ts.map