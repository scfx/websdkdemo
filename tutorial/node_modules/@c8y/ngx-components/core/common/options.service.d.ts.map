{"version":3,"file":"options.service.d.ts","sources":["options.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { ApplicationOptions } from './ApplicationOptions';\nimport { ExtensionFactory } from './extension-hooks';\nimport { SystemOptionsService, TenantOptionsService } from '@c8y/ngx-components/api';\nexport declare const HOOK_OPTIONS: InjectionToken<ExtensionFactory<ApplicationOptions>>;\n/**\n * A service that allows to set or get application options\n * which configure the default behavior of the UI.\n */\nexport declare class OptionsService extends ApplicationOptions {\n    private systemOptionsService;\n    private tenantOptionService;\n    [key: string]: any;\n    constructor(options: any, systemOptionsService: SystemOptionsService, tenantOptionService: TenantOptionsService);\n    /**\n     * Returns an application option used to configure the UI.\n     * @param optionKey The application options key.\n     * @param defaultValue A value to return if non is set.\n     */\n    get(optionKey: keyof OptionsService, defaultValue?: any): any;\n    /**\n     * Sets an application option.\n     * @param key The key to set.\n     * @param value The value to set.\n     */\n    set(key: string, value: any): void;\n    /**\n     * Gets support url from tenant options.\n     * If response returns '404 not found' it gets the support url from application options.\n     * If the support link within application options is not provided the UI will use the system options.\n     * Is the support link explicitly set to false it will be hidden.\n     *\n     * @returns Returns support url or false.\n     */\n    getSupportUrl(): Promise<string | boolean>;\n    /**\n     * Returns if the tenant allows to show the activate-support user menu entry.\n     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.\n     */\n    getActivateSupportUser(): Promise<boolean>;\n    /**\n     * Gets a value from the system service and parses it.\n     *\n     * @param category The category for this option.\n     * @param key The key for that option.\n     * @param defaultValue The default if the option was not found.\n     */\n    getSystemOption(category: string, key: string, defaultValue?: any): Promise<any>;\n    /**\n     * Gets a value from the tenant service and parses it.\n     *\n     * @param category The category for this option.\n     * @param key The key for that option.\n     * @param defaultValue The default if the option was not found.\n     */\n    getTenantOption(category: string, key: string, defaultValue?: any): Promise<any>;\n    private setupOptions;\n    private getOptionFromService;\n    private parseOptionRawValue;\n}\n"]}