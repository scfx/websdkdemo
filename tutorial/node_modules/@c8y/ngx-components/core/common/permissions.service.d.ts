import { AppStateService } from './ui-state.service';
import { InventoryService } from '@c8y/client';
import { UserService } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class Permissions {
    private appState;
    private inventory;
    private user;
    constructor(appState: AppStateService, inventory: InventoryService, user: UserService);
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {object} mo The managed object for which we are checking whether the user has access.
     */
    canEdit(roleIds: any, mo: any): Promise<boolean>;
    hasRole(roleId: string): boolean;
    hasAllRoles(roleIds: string[]): boolean;
    hasAnyRole(roleIds: string[]): boolean;
    protected checkIfOwner(mo: any): Promise<boolean>;
    protected checkWithRequest(mo: any): Promise<boolean>;
    private checkIfCanEdit;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<Permissions, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<Permissions>;
}

//# sourceMappingURL=permissions.service.d.ts.map