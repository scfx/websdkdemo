import { DecimalPipe as NgDecimalPipe } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export declare const NUMBER_FORMAT_REGEXP: RegExp;
/**
 * Formats a value according to digit options and locale rules.
 * Extends the behavior of Angular's <code>number</code> pipe by
 * providing an option to define if a truncated value should be
 * rounded up or down (with the <code>number</code> pipe the
 * value will be rounded using the "to-nearest" method).
 *
 * ```html
 * <span>{{ 3.45612 | c8yNumber: 'ceil':'1.1-3' }}</span> <!-- 3.457 -->
 * <span>{{ 3.46 | c8yNumber: 'ceil':'1.3-3' }}</span> <!-- 3.460 -->
 * <span>{{ 3.45685 | c8yNumber: 'floor':'1.1-3' }}</span> <!-- 3.456 -->```
 */
export declare class NumberPipe extends NgDecimalPipe {
    constructor(locale: string);
    transform(value: number | string, round: 'ceil' | 'floor' | null | undefined, digitsInfo?: string, locale?: string): string | null;
    transform(value: null | undefined, round: 'ceil' | 'floor' | null | undefined, digitsInfo?: string, locale?: string): null;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NumberPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDeclaration<NumberPipe, "c8yNumber">;
}

//# sourceMappingURL=number.pipe.d.ts.map