{"version":3,"file":"forOf.directive.d.ts","sources":["forOf.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { IIdentified, IResultList } from '@c8y/client';\nimport { Observable } from 'rxjs';\nimport { RealtimeService } from '../realtime/realtime.service';\nimport { LoadMoreMode } from './load-more.model';\nimport { ForOfRealtimeOptions } from './forOf.model';\n/**\n * A directive to iterate over IResultList<T> data from @c8y/client.\n * Depending on the [c8yForLoadMore] a load more button is:\n *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be\n *          change with maxIterations settings).\n *  - show: Shows a load more button for the user to decide\n *  - none: Doesn't perform any load more action.\n *  - hidden: Loads more data automatically but with no visible button for the user.\n *\n * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to\n * filter the data displayed currently as well as the data loaded by subsequent requests.\n *\n * Example:\n * ```html\n * <div *c8yFor=\"let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;\">\n *  {{ i + 1 }}. {{device.name}}\n * </div>\n * ```\n * The above example will list all entities that are applied to `devices`:\n * ```typescript\n * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })\n * ```\n * It will display the first 10 items, if there is more space left on the screen, and there are more\n * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen\n * it will stop and switch to `show` mode.\n *\n * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up\n * request done by the load more component:\n * ```typescript\n * this.filterPipe = pipe(\n *    map((data: []) => {\n *     return data.filter(\n *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1\n *    );\n *  })\n * );\n * ```\n * The pipe must be an rxjs pipe and can take any operator.\n *\n * Example with realtime support and items count output (e.g. for handling empty state and header):\n *\n * ```html\n * <c8y-list-group>\n *   <div class=\"c8y-empty-state\" *ngIf=\"count === 0\">\n *     (...)\n *   </div>\n *\n *   <div class=\"page-sticky-header hidden-xs c8y-list__item c8y-list--timeline\" *ngIf=\"count > 0\">\n *     (...)\n *   </div>\n *\n *   <ng-template\n *     c8yFor\n *     let-operation\n *     [c8yForOf]=\"items$\"\n *     [c8yForPipe]=\"filterPipe\"\n *     [c8yForRealtime]=\"realtime\"\n *     [c8yForRealtimeOptions]=\"realtimeOptions\"\n *     (c8yForCount)=\"count = $event\"\n *   >\n *     <c8y-li-timeline>\n *       (...)\n *     </c8y-li-timeline>\n *   </ng-template>\n * </c8y-list-group>\n * ```\n *\n * ```typescript\n * @Component({\n *   (...)\n * })\n * export class ExampleComponent {\n *   @Input() deviceId: IIdentified;\n *   items$ = this.operationService.list({\n *     deviceId: this.deviceId,\n *     fragmentType: 'c8y_MyOperation',\n *     dateFrom: new Date(0).toISOString(),\n *     dateTo: new Date(Date.now()).toISOString(),\n *     revert: true,\n *     withTotalPages: true\n *   });\n *   filterPipe = pipe(map((ops: IOperation[]) => ops.filter(op => op.c8y_MyOperation)));\n *   realtimeOptions: ForOfRealtimeOptions = {\n *     entityOrId: this.deviceId,\n *     removeOnUpdate: true,\n *     insertOnUpdate: true\n *   } as ForOfRealtimeOptions;\n *   count: number;\n *\n *   constructor(\n *     private operationService: OperationService,\n *     public realtime: OperationRealtimeService\n *   ) {}\n * }\n * ```\n */\nexport declare class ForOfDirective {\n    private tpl;\n    private vcr;\n    private componentFactoryResolver;\n    private cachedData;\n    private paging;\n    private loadMoreMode;\n    private dataPipe;\n    private itemDataPipe;\n    private pagingSub;\n    private obs$;\n    private loadMore;\n    private loadingTemplate;\n    private maxIterations;\n    private notFoundTemplate;\n    private loadNextLabel;\n    private realtime;\n    private realtimeOptions;\n    private comparator;\n    private unsubscribe$;\n    private virtualScrollInstance;\n    private get shouldUseLoadMoreButton();\n    private get hasMoreData();\n    private get length();\n    /**\n     * The data setter. Must be a response from @c8y/data or an observable.\n     * You can pass an observable with null to explicitly clear the list.\n     */\n    set c8yForOf(fetchData: IResultList<IIdentified> | Observable<IResultList<IIdentified>>);\n    /**\n     * The mode setter:\n     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be\n     *          change with maxIterations settings).\n     *  - show: Shows a load more button for the user to decide\n     *  - none: Doesn't perform any load more action.\n     *  - hidden: Loads more data automatically but with no visible button for the user.\n     */\n    set c8yForLoadMore(type: LoadMoreMode);\n    /**\n     * The pipe setter to attach any rxjs pipe to the current and more loaded data.\n     */\n    set c8yForPipe(dataPipe: any);\n    /**\n     * A template to use if no data is found at all (e.g. if you apply a filter pipe).\n     */\n    set c8yForNotFound(notFoundTemplate: TemplateRef<any>);\n    /**\n     * The maximum numbers of iterations to call data from the api.\n     */\n    set c8yForMaxIterations(maxIterations: number);\n    /**\n     * A custom loading component.\n     */\n    set c8yForLoadingTemplate(loadingTemplate: TemplateRef<any>);\n    /**\n     * Load next text label.\n     */\n    set c8yForLoadNextLabel(loadNextLabel: string);\n    /**\n     * A RealtimeService instance.\n     */\n    set c8yForRealtime(source: RealtimeService<any>);\n    /**\n     * Realtime options.\n     */\n    set c8yForRealtimeOptions(realtimeOptions: ForOfRealtimeOptions);\n    /**\n     * A comparator function for comparing list items. Used to determine\n     * the position at which a new element should be added to the list.\n     */\n    set c8yForComparator(comparator: (itemA: object, itemB: object) => number);\n    /**\n     * Enable virtual scroll rendering method.\n     */\n    private c8yForEnableVirtualScroll;\n    /**\n     * Provides fixed item size for virtual scroll window strategy.\n     */\n    private c8yForVirtualScrollElementSize;\n    /**\n     * Sets mode of virtual scroller instance.\n     * window is used for case when whole viewport is scrolled.\n     * fixed can be used on inner-scroll containers.\n     */\n    private c8yForVirtualScrollStrategy;\n    /**\n     * When used fixed strategy, there needs to be fixed height set on scrolling container.\n     */\n    private c8yForVirtualScrollContainerHeight;\n    /**\n     * The number of items currently loaded in the list.\n     */\n    private c8yForCount;\n    private count;\n    constructor(tpl: TemplateRef<any>, vcr: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver);\n    ngOnInit(): void;\n    private ngOnChanges;\n    private ngOnDestroy;\n    private handleRealtime;\n    /**\n     * On create notification:\n     * - if item passes data pipe, then insert it.\n     * @private\n     */\n    private handleRealtimeCreate;\n    /**\n     * On update notification:\n     * - if item is displayed and passes data pipe, then update it,\n     * - if item is displayed and doesn't pass data pipe, then remove it (if `removeOnUpdate` is true),\n     * - if item is not displayed and passes data pipe, then insert it (if `insertOnUpdate` is true),\n     * - if item is not displayed and doesn't pass data pipe, then ignore it.\n     * @private\n     */\n    private handleRealtimeUpdate;\n    /**\n     * On delete notification:\n     * - remove item from the list (if not there, it will be just ignored).\n     * @private\n     */\n    private handleRealtimeDelete;\n    private render;\n    private append;\n    private loadMoreData;\n    private createLoadMoreButtonComponent;\n    private createVirtualScrollWrapperComponent;\n    private insert;\n    private update;\n    private remove;\n    private updateCount;\n    private isDisplayed;\n    private forMatchingEmbeddedViewRef;\n    private checkForDuplicates;\n    private unsubscribePaging;\n    private setVirtualScrollContents;\n    private appendVirtualScrollContent;\n}\n"]}