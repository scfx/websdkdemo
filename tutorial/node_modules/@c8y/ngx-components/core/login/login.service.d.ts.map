{"version":3,"file":"login.service.d.ts","sources":["login.service.d.ts"],"names":[],"mappingssourcesContent":["import { BasicAuth, CookieAuth, FetchClient, IAuthentication, ICredentials, ITenantLoginOption, Realtime, TenantLoginOptionsService, TenantService, UserService } from '@c8y/client';\nimport { AppStateService } from '../common/ui-state.service';\nimport { AlertService } from '../alert/alert.service';\nimport { ApiService } from '@c8y/ngx-components/api';\nimport { TenantUiService } from '../common/tenant-ui.service';\nimport { LocationStrategy } from '@angular/common';\nimport { ModalService } from '../modal/modal.service';\n/**\n * Service to manage the login.\n */\nexport declare class LoginService {\n    private client;\n    private basicAuth;\n    private cookieAuth;\n    private ui;\n    private user;\n    private tenant;\n    private realtime;\n    private alert;\n    private api;\n    private tenantUiService;\n    private tenantLoginOptionsService;\n    private modalService;\n    private location;\n    rememberMe: boolean;\n    TOKEN_KEY: string;\n    TFATOKEN_KEY: string;\n    loginMode: ITenantLoginOption;\n    managementLoginMode: ITenantLoginOption;\n    oauthOptions: ITenantLoginOption;\n    isFirstLogin: boolean;\n    GREEN_MIN_LENGTH_DEFAULT: number;\n    ERROR_MESSAGES: {\n        minlength: any;\n        password_missmatch: any;\n        maxlength: any;\n        password_strength: any;\n        remote_error: any;\n        email: any;\n        password_change: any;\n        password_reset_token_expired: any;\n        tfa_pin_invalid: any;\n        pattern_phonenumber: any;\n        pattern_newPassword: any;\n        international_number_required: any;\n        phone_number_error: any;\n        pinAlreadySent: any;\n        passwordConfirm: any;\n        tfaExpired: any;\n    };\n    private SUCCESS_MESSAGES;\n    private passwordStrengthSetting;\n    private localhostRegExp;\n    private localhostIpRegExp;\n    private showTenantRegExp;\n    constructor(client: FetchClient, basicAuth: BasicAuth, cookieAuth: CookieAuth, ui: AppStateService, user: UserService, tenant: TenantService, realtime: Realtime, alert: AlertService, api: ApiService, tenantUiService: TenantUiService, tenantLoginOptionsService: TenantLoginOptionsService, modalService: ModalService, location: LocationStrategy);\n    /**\n     * Returns the current tenant.\n     * @return The tenant name.\n     */\n    getTenant(): string;\n    initLoginOptions(): void;\n    redirectToOauth(): void;\n    autoLogout(): void;\n    /**\n     * Gets the minimal number of characters that a password should have to be considered a “green” strong one.\n     * @return The min length for password or default value.\n     */\n    getGreenMinLength(): Promise<number>;\n    /**\n     * Checks if password strength is enforced for system\n     * by retrieving value of `enforceStrength` property from loginOptions response\n     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.\n     * If false, it takes value from memory,\n     * if true, it refresh the app state value and then retrives data.\n     * @return boolean value, true if enforced, false otherwise.\n     */\n    getEnforcePasswordStrength(refresh?: any): Promise<boolean>;\n    /**\n     * Checks if password strength is enforced for particular tenant\n     * by retrieving value of `strengthValidity` property from loginOptions response\n     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.\n     * If false, it takes value from memory,\n     * if true, it refresh the app state value and then retrives data.\n     * @return boolean value, true if enforced, false otherwise.\n     */\n    getPasswordStrengthValidity(refresh?: any): Promise<boolean>;\n    /**\n     * Function determines if enforced strength checks should be enabled for current tenant\n     * based on properties retrieved from loginOptions\n     * @param options object containing specific options:\n     *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call\n     * @return boolean value, true if strength is enforced for tenant, false otherwise.\n     */\n    getPasswordStrengthEnforced(options?: any): Promise<boolean>;\n    /**\n     * Clears all backend errors.\n     */\n    cleanMessages(): void;\n    /**\n     * Adds a new success message\n     * @param successKey The key of the success message as used in SUCCESS_MESSAGES\n     */\n    addSuccessMessage(successKey: string): void;\n    /**\n     * Returns the current strategy. Defaults to cookie, if a token\n     * is found in local or session storage we switch to basic auth.\n     * @returns The current auth strategy.\n     */\n    getAuthStrategy(): IAuthentication;\n    /**\n     * Forces the use of basic auth as strategy with this credentials.\n     * @param credentials The credentials to use.\n     */\n    useBasicAuth(credentials: ICredentials): BasicAuth;\n    /**\n     * Tries to login a user with the given credentials.\n     * If successful, the current tenant and user is set. If not an error\n     * is thrown. It also verifies if the user is allowed to open the\n     * current app.\n     * @param auth The authentication strategy used.\n     * @param credentials The credentials to try to login.\n     */\n    login(auth?: IAuthentication, credentials?: ICredentials): Promise<void>;\n    /**\n     * Saves tenant, user and support user info to the app state.\n     * @param tenant The current tenant object.\n     * @param user The current user object.\n     * @param supportUserName The current support user name.\n     */\n    authFulfilled(tenant?: any, user?: any, supportUserName?: any): Promise<void>;\n    /**\n     * Switch the login mode to CookieAuth if the\n     * user has configured to use it in loginOptions.\n     * @param credentials The credentials for that login\n     */\n    switchLoginMode(credentials?: ICredentials): Promise<boolean>;\n    generateOauthToken(credentials?: ICredentials): Promise<import(\"@c8y/client\").IFetchResponse>;\n    isPasswordGrantLogin(credentials?: ICredentials): boolean;\n    /**\n     * Verifies if the provided credentials use a support user to log in or not.\n     * @param credentials Credentials to check.\n     * @returns {boolean} Returns true if user is a support user.\n     */\n    isSupportUser(credentials?: ICredentials): boolean;\n    /**\n     * Verifies if the tenant input field should be shown\n     * or not.\n     * @returns If true, show the tenant input.\n     */\n    showTenant(): boolean;\n    /**\n     * Verifies if the tenant setup should be shown\n     * or not.\n     * @returns If true, show the tenant input.\n     */\n    showTenantSetup(): boolean;\n    /**\n     * Logs the user out\n     * @param reload If set to false, the page will not reload\n     */\n    logout(reload?: boolean): Promise<void>;\n    /**\n     * Resets the stored auth-data\n     */\n    reset(): Promise<[void, import(\"@c8y/client\").IFetchResponse]>;\n    /**\n     * Saves the TFA token to local or session storage.\n     * @param tfaToken The tfa token to save.\n     * @param storage The storage to use (local or session).\n     */\n    saveTFAToken(tfaToken: string, storage: Storage): void;\n    /**\n     * Request the manifest -> on 401 user has no access to that application\n     * and we throw the error up to the login form.\n     */\n    verifyAppAccess(): Promise<void>;\n    redirectToDomain(domain: any): void;\n    /**\n     * Sets the tenant to the client and updates the credentials on the\n     * auth strategy.\n     * @param credentials The name of the tenant.\n     * @param authStrategy The authentication strategy used.\n     * @return Returns the token if basic auth, otherwise undefined.\n     */\n    private setCredentials;\n    /**\n     * Verifies if the current user is a developer or not.\n     * Running on localhost means development mode.\n     */\n    private isLocal;\n    /**\n     * Save the token to local or session storage.\n     * @param token The token to save.\n     * @param storage The storage to use (local or session).\n     */\n    private saveToken;\n    private storeBasicAuthToken;\n    private cleanLocalStorage;\n    private cleanSessionStorage;\n    private isShowTenant;\n    private redirect;\n    private getBasicAuthLoginOption;\n    /**\n     * Gets support user name from credentials.\n     * @param credentials Credentials object (defaults to the stored one).\n     * @returns Support user name.\n     */\n    private getSupportUserName;\n    /**\n     * Gets credentials object from the stored token.\n     * @returns Credentials object.\n     */\n    private getStoredCredentials;\n    /**\n     * Gets stored token from local storage or session storage.\n     * @returns Stored token.\n     */\n    private getStoredToken;\n    /**\n     * Gets stored TFA token from local storage or session storage.\n     * @returns Stored TFA token.\n     */\n    private getStoredTfaToken;\n    /**\n     * Decodes token to credentials object.\n     * @param token Token to decode.\n     * @returns Credentials object.\n     */\n    private decodeToken;\n    private getUrlForOauth;\n    private setManagementLoginModeIfSupportUser;\n}\n"]}