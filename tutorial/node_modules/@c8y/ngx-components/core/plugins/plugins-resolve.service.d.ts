import { Compiler, Injector } from '@angular/core';
import { ActionBarService } from '../action-bar/action-bar.service';
import { ActionService } from '../action/action.service';
import { BreadcrumbService } from '../breadcrumb/breadcrumb.service';
import { DocsService } from '../docs/docs.service';
import { DynamicComponentService } from '../dynamic-component/dynamic-component.service';
import { NavigatorService } from '../navigator/navigator.service';
import { RouterService } from '../router/router.service';
import { SearchService } from '../search/search.service';
import { TabsService } from '../tabs/tabs.service';
import * as ɵngcc0 from '@angular/core';
export declare class PluginsResolveService {
    private tabs;
    private navigator;
    private action;
    private actionBar;
    private breadcrumb;
    private dynamicComponent;
    private search;
    private c8yRouter;
    private docs;
    private compiler;
    private injector;
    private allHooks;
    constructor(tabs: TabsService, navigator: NavigatorService, action: ActionService, actionBar: ActionBarService, breadcrumb: BreadcrumbService, dynamicComponent: DynamicComponentService, search: SearchService, c8yRouter: RouterService, docs: DocsService, compiler: Compiler, injector: Injector);
    /**
     * Loads plugins by resolving the remote NgModules and injecting it. Also attaching
     * the hooks onto the root injector.
     * @param remoteModules The remote plugins to load as factory name mapping array.
     */
    resolveRemotePlugins(remoteModules: Array<{
        factory: any;
        name: any;
    }>): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PluginsResolveService, never>;
}

//# sourceMappingURL=plugins-resolve.service.d.ts.map