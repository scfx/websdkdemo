{"version":3,"file":"stepper.component.d.ts","sources":["stepper.component.d.ts"],"names":[],"mappingssourcesContent":["import { TemplateRef, QueryList, AfterContentInit, OnDestroy, EventEmitter, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { CdkStepper, StepState } from '@angular/cdk/stepper';\nimport { C8yStepperIcon } from './stepper-icon.directive';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * C8yStepper extends the CdkStepper. You can use cdk based functionality and inputs.\n * Additional to that you are able to modify the behavior and also the look and feel when\n * using the C8yStepper.\n *\n * The C8yStepper is used to present any step-based process to the user.\n * A stepper, C8yStepper and/or CdkStepper is the parent of cdk-steps.\n * Each cdk-step represents one step in the whole process that you want to provide to the user.\n *\n * The C8yStepper will create, based on the given cdk-steps, a kind of stepper-progress which looks like this:\n * (1)---(2)---(3)---(n)\n * The stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.\n * You are able to override icons for each step in the stepper-progress with a template. You are also able to activate\n * default-icons for states like 'edit' and 'done'.\n *\n * To force users through every provided step, set the stepper to 'linear'.\n * This will disable the possibility to move for example from step one to step three.\n *\n * Whenever it comes to validation try to use formGroups. It is possible to\n * assign a formGroup to a cdk-step input called [stepControl], which automatically respects the\n * validation-rules that you created for this formGroup. If fields are required but not filled or\n * any other validation, like a pattern, is not matched the formGroup will be invalid. In this case\n * stepping in a linear stepper to the next step gets impossible.\n *\n * If there is the need to execute asynchronous code you have at least two possibilities.\n * First: As you learned, a cdk-step works with formGroups and Validators, so you are able to use\n * asyncValidators as well.\n * Second: The C8yStepper provides an event-emitter onStepChange which is called whenever a step-button (1)--(2)--(n)\n * in the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can\n * use this EventEmitter to call for example a custom navigate-method which performs first any async-call and then moves\n * on to the given step.\n *\n * @example\n * ```\n * <c8y-stepper\n * (onStepChange)=\"navigate($event)\"\n * [disableDefaultIcons]=\"{ edit: true, done: false }\"\n * [customClasses]=\"['m-l-40', 'm-r-40', 'm-t-32']\"\n * linear\n * >\n * <!-- override icons -->\n * <ng-template c8yStepperIcon=\"final\">\n *   <span [c8yIcon]=\"'hand-peace-o'\"></span>\n * </ng-template>\n *\n * <cdk-step [stepControl]=\"formGroupStepOne\" label=\"Name of the hero\">\n *   <div class=\"m-l-40 m-r-40 m-t-32\">\n *     <h4 class=\"p-b-8\" translate>What is the name of your hero?</h4>\n *     <c8y-form-group>\n *      <div [formGroup]=\"formGroupStepOne\">\n *       <input\n *         class=\"form-control\"\n *         type=\"text\"\n *         formControlName=\"name\"\n *         placeholder=\"Mister X\"\n *         #nameRef\n *         required\n *       />\n *       <c8y-messages>\n *         <c8y-message *ngIf=\"!formGroupStepOne.untouched && !nameRef.value\" translate\n *           >Enter the name of the Superhero</c8y-message\n *         >\n *       </c8y-messages>\n *      </div>\n *     </c8y-form-group>\n *   </div>\n *   <c8y-stepper-buttons></c8y-stepper-buttons>\n * </cdk-step>\n * <cdk-step>\n *  ...\n * </cdk-step state=\"final\">\n * </c8y-stepper>\n * ```\n */\nexport declare class C8yStepper extends CdkStepper implements AfterContentInit, OnDestroy {\n    private dir;\n    private changeDetectorRef;\n    private elementRef?;\n    /**\n     * Optional\n     * Indicator if icons for edit and done state should be shown in step-header buttons\n     */\n    disableDefaultIcons?: {\n        edit: boolean;\n        done: boolean;\n    };\n    /**\n     * Optional\n     * Possibility to add any kind of custom css classes to the step-header\n     */\n    customClasses?: [string];\n    /**\n     * Will emit the step index number whenever a step-header button was clicked\n     * It listens to the stepIndex Subject.\n     */\n    onStepChange: EventEmitter<number>;\n    /**\n     * Holding a QueryList of C8yStepperIcons\n     * These are templateRefs which overrides any step-header button icon with matching state of cdk-step\n     *\n     * @example:\n     * ```\n     * <!-- override icons -->\n     *  <ng-template c8yStepperIcon=\"final\">\n     *   <span [c8yIcon]=\"'hand-peace-o'\"></span>\n     *  </ng-template>\n     *\n     * <cdk-step state=\"final\" label=\"Job done!\">\n     *  <div class=\"m-l-40 m-r-40 m-t-32\">\n     *    <h4 class=\"p-b-32\" style=\"text-align: center;\" translate>\n     *     Your Superhero is now ready to save the world!\n     *   </h4>\n     *  </div>\n     *  <c8y-stepper-buttons\n     *    [hidden]=\"!isModal\"\n     *    (onBack)=\"close()\"\n     *    [labels]=\"{ back: 'Got it!' }\"\n     *  ></c8y-stepper-buttons>\n     *  <c8y-stepper-buttons [hidden]=\"isModal\"></c8y-stepper-buttons>\n     * </cdk-step>\n     * ```\n     */\n    _icons: QueryList<C8yStepperIcon>;\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: {\n        [key: string]: TemplateRef<any>;\n    };\n    private _stepIndex;\n    private _stepIndexSubscription;\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Manipulates the state based on the disabledDefaultIcons Input()\n     * Changing edit or done to false will change the icons within step-header buttons\n     * @param index step index\n     * @param state step state, like 'done', 'edit', 'error'\n     */\n    getIndicatorType(index: number, state: StepState): string;\n    /**\n     * Pushs the step index to the subject\n     * @param index step index\n     */\n    setIndex(index: number): void;\n}\n"]}