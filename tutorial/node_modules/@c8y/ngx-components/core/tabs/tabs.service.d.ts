import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { Tab } from './tab.model';
import { OptionsService } from '../common/options.service';
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare type TabExtension = Tab | Tab[] | ExtensionFactory<Tab>;
/**
 * A hook to use for Multi Provider extension.
 */
export declare const HOOK_TABS: InjectionToken<TabExtension[]>;
/**
 * A service which defines the used tabs.
 */
export declare class TabsService extends StateService implements ExtensionPoint<TabExtension> {
    private injector;
    private translateService;
    private options;
    items$: Observable<Tab[]>;
    orientation$: Observable<string>;
    readonly refreshTrigger: Subject<unknown>;
    readonly state$: BehaviorSubject<Set<Tab>>;
    /**
     * Additional factories that can be added by plugins.
     */
    factories: TabExtension[];
    constructor(injector: Injector, router: Router, translateService: TranslateService, options: OptionsService);
    prepareTabs(tabs: any): any;
    sortTabs(tabs: any): any;
    /**
     * Refresh the extension factories
     */
    refresh(): void;
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state(): Set<Tab>;
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item: Tab): void;
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    remove(item: Tab): void;
    get firstTab$(): Observable<unknown>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TabsService, never>;
}

//# sourceMappingURL=tabs.service.d.ts.map