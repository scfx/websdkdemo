import { Injector, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { WizardComponent } from './wizard.component';
import { WizardEntry, WizardExtension } from './wizard.model';
export declare class WizardService extends StateService implements ExtensionPoint<WizardExtension> {
    private bsModalService;
    private injector;
    private router;
    /** Wizard list observable. It emits the current list of the wizard entries. */
    readonly items$: Observable<WizardEntry[]>;
    /** Wizard header subject. It emits header template. */
    readonly headerTemplate$: Subject<{
        wizardId: string;
        template: TemplateRef<any>;
    }>;
    /** Wizard body subject. It emits body template. */
    readonly bodyTemplate$: Subject<{
        wizardId: string;
        template: TemplateRef<any>;
    }>;
    /** Wizard footer subject. It emits footer template. */
    readonly footerTemplate$: Subject<{
        wizardId: string;
        template: TemplateRef<any>;
    }>;
    /**
     * @ignore
     */
    readonly state$: BehaviorSubject<Set<WizardEntry>>;
    /** Refresh the extension factories subject. */
    readonly refreshTrigger: Subject<unknown>;
    /** Additional factories that can be added by plugins. */
    factories: WizardExtension[];
    constructor(bsModalService: BsModalService, injector: Injector, router: Router);
    /**
     * Returns the current state.
     * @returns The current set of entries.
     * @readonly
     */
    get state(): Set<WizardEntry>;
    /**
     * Refresh the extension factories.
     */
    refresh(): void;
    /**
     * Adds a new entry in the wizard.
     * @param entry Wizard entry to add.
     */
    add(entry: WizardEntry): void;
    /**
     * Removes entry from the wizard.
     * @param entry Wizard entry to remove.
     */
    remove(entry: WizardEntry): void;
    /**
     * List of wizard entries matching the given id.
     * @param id
     * @returns observable with list of wizard entries.
     */
    getEntriesListById(id: string): Observable<WizardEntry[]>;
    /**
     * Shows a wizard modal.
     * @param modalOptions Modal options.
     * @returns a reference to the modal.
     */
    show(modalOptions?: ModalOptions): BsModalRef<WizardComponent>;
}
