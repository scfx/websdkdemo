{"version":3,"file":"wizard.component.d.ts","sources":["wizard.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Wizard, WizardConfig, WizardEntry } from './wizard.model';\nimport { WizardService } from './wizard.service';\n/**\n * A generic component that is intended to serve as the building block of more wizards.\n *\n * **Example**\n * ```html\n * <button\n *    title=\"Add application\"\n *    class=\"btn btn-primary\"\n *    (click)=\"addApplication()\"\n *  >\n *    Add application\n *  </button>\n * ```\n *\n * ```ts\n * import { Component } from '@angular/core';\n * import { WizardConfig, WizardService, Wizard } from '@c8y/ngx-components';\n * import { ModalOptions } from 'ngx-bootstrap/modal';\n *\n * @Component({\n *  selector: 'c8y-add-application-wizard',\n *  templateUrl: './templatePath'\n * })\n * export class AddApplicationWizardComponent {\n *   constructor(private wizardService: WizardService) {}\n *\n *   addApplication() {\n *     const wizardConfig: WizardConfig = {\n *       headerText: 'Add Application',\n *       headerIcon: 'c8y-icon-modules',\n *       bodyHeaderText: 'Select methods',\n *       bodyHeaderIcon: 'c8y-icon-modules'\n *     };\n *\n *     const initialState: Wizard = {\n *       wizardConfig,\n *       id: 'uploadApplication'\n *     };\n *\n *     const modalOptions: ModalOptions = { initialState };\n *\n *     this.wizardService.show(modalOptions);\n *   }\n * }\n * ```\n */\nexport declare class WizardComponent implements Wizard, OnInit {\n    wizardService: WizardService;\n    bsModalRef: BsModalRef;\n    header: TemplateRef<any>;\n    body: TemplateRef<any>;\n    footer: TemplateRef<any>;\n    /**\n     * The id parameter identifies the particular wizard and can be used to refer to it when hooking wizard entries.\n     * Example: \"wizardId\".\n     */\n    id: string;\n    /**\n     * A configuration object that allows you to set header values, both text and icon.\n     */\n    wizardConfig: WizardConfig;\n    /**\n     * The event that is emitted when the wizard is closed.\n     */\n    onClose: EventEmitter<any>;\n    /**\n     * The event that is emitted when the wizard is reseted.\n     */\n    onReset: EventEmitter<any>;\n    /**\n     * The event that is emitted when the wizard entry is clicked.\n     */\n    onSelect: EventEmitter<WizardEntry>;\n    readonly headerTemplate$: import(\"rxjs\").Observable<{\n        wizardId: string;\n        template: TemplateRef<any>;\n    }>;\n    readonly bodyTemplate$: import(\"rxjs\").Observable<{\n        wizardId: string;\n        template: TemplateRef<any>;\n    }>;\n    readonly footerTemplate$: import(\"rxjs\").Observable<{\n        wizardId: string;\n        template: TemplateRef<any>;\n    }>;\n    constructor(wizardService: WizardService, bsModalRef: BsModalRef);\n    ngOnInit(): void;\n    /**\n     * Resets the wizard.\n     * @param result Custom result object which will be emitted via onReset output.\n     */\n    reset(result?: any): void;\n    /**\n     * Closes the wizard.\n     * @param result Custom result object which will be emitted via onClose output.\n     */\n    close(result?: any): void;\n    private emitTemplates;\n}\n"]}