import { BehaviorSubject } from 'rxjs';
import { ICustomProperties } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { OptionsService } from '../common/options.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
export declare class GainsightService {
    private appState;
    private options;
    private cookieBannerService;
    private userPreferencesService;
    /**
     * A subject that emits the tag function as soon as a new tag is set.
     */
    tagFunction$: BehaviorSubject<any>;
    readonly USER_PREFERENCES_KEY = "gainsightEnabled";
    private readonly GAINSIGHT_URL;
    private readonly GAINSIGHT_GLOBAL_SCOPE;
    private readonly SCRIPT_EXECUTION_WAIT_TIME;
    private readonly OPTIONS_KEY_CATEGORY;
    private readonly OPTIONS_KEY_NAME;
    private isScriptLoaded;
    private gainsightKey;
    constructor(appState: AppStateService, options: OptionsService, cookieBannerService: CookieBannerService, userPreferencesService: UserPreferencesService);
    isGainsightDisabledInUserPreferences(): Promise<boolean>;
    setFunctionalCookie(value: boolean): void;
    getGainsightKey(): Promise<string>;
    /**
     * Returns the tag global function which can be used to identify user
     * or add special events.
     */
    get tagFunction(): any;
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param currentTenant The current tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    loadTag(currentTenant: any, identify?: boolean): Promise<void>;
    /**
     * Identifies the user/account at Gainsight.
     * @param user The user which is given to Gainsight.
     * @param tenant The tenant which is given to Gainsight.
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    identify(user: any, tenant: any, instanceId: any, versionUI?: any, versionBE?: any): void;
    triggerEvent(eventName: string, props?: object): void;
    /**
     * Checks if the Gainsight's tag should be loaded.
     * The decision to load Gainsight will depend on custom properties and functional cookies.
     * @param customProperties Tenant's customProperties.
     */
    shouldLoadGainsightTag(customProperties: ICustomProperties): boolean;
    canEditProductExperienceSettings(): Promise<boolean>;
    private isGainsightDisabled;
    private isCustomBranding;
    private loadScriptTag;
    private getInstanceIdFromUrl;
}
