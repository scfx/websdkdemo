import { SimpleChanges } from '@angular/core';
import { ISessionConfiguration } from '@c8y/client';
import { TenantUiService } from '@c8y/ngx-components';
import { AuthConfiguration } from './auth-configuration.model';
import { TranslateService } from '@ngx-translate/core';
export declare class SessionConfigurationComponent {
    private tenantUiService;
    private translateService;
    authConfiguration: AuthConfiguration;
    ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE: any;
    RENEWAL_TIMEOUT_VALIDATION_MESSAGE: any;
    MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE: any;
    MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE: any;
    USER_AGENT_VALIDATION_REQUIRED_POPOVER: any;
    private MIN_ABSOLUTE_TIMEOUT;
    private originalSessionConfiguration;
    private previousTokenLifespan;
    constructor(tenantUiService: TenantUiService, translateService: TranslateService);
    ngOnChanges(changes: SimpleChanges): void;
    get renewalTimeoutSeconds(): number;
    set renewalTimeoutSeconds(value: number);
    get absoluteTimeoutSeconds(): number;
    set absoluteTimeoutSeconds(value: number);
    get maximumNumberOfParallelSessions(): number;
    set maximumNumberOfParallelSessions(value: number);
    get userAgentValidationRequired(): boolean;
    set userAgentValidationRequired(value: boolean);
    get basicTokenLifespan(): any;
    set basicTokenLifespan(value: any);
    get useSessionConfiguration(): boolean;
    set useSessionConfiguration(value: boolean);
    get absoluteTimeoutConstraints(): {
        min: number;
    };
    get renewalTimeoutConstraints(): {
        min: number;
        max: number;
    };
    get basicTokenLifespanConstraints(): {
        min: number;
        max: number;
    };
    get sessionConfiguration(): ISessionConfiguration;
    set sessionConfiguration(value: ISessionConfiguration);
    private convertToMillis;
    private convertToSeconds;
}
