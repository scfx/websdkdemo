import { OnInit, QueryList } from '@angular/core';
import { IOperationBulk, IResultList } from '@c8y/client';
import { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';
import { BehaviorSubject, Observable } from 'rxjs';
import { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationsService, OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationModalsService } from './modals/bulk-operation-modals.service';
import { BulkOperationListItemComponent } from './bulk-operation-list-item.component';
import * as ɵngcc0 from '@angular/core';
export declare class BulkOperationsListComponent implements OnInit {
    realtime: OperationBulkRealtimeService;
    private bulkOperationsService;
    private bulkOperationModalsService;
    bulkTypes: OperationType[];
    selectedTypeFilters: OperationType[];
    bulkOperationStatusOptions: IStatusOption[];
    filterPipe: any;
    refreshLoading: boolean;
    statusFilter$: BehaviorSubject<IStatusOption[]>;
    typeFilter$: BehaviorSubject<OperationType[]>;
    timeFilter$: BehaviorSubject<any>;
    reload$: BehaviorSubject<void>;
    listItems: QueryList<BulkOperationListItemComponent>;
    statusFilter: StatusFilterComponent;
    datePicker: DatePickerComponent;
    bulkOperations$: Observable<IResultList<IOperationBulk>>;
    private allFilterFragments;
    constructor(realtime: OperationBulkRealtimeService, bulkOperationsService: BulkOperationsService, bulkOperationModalsService: BulkOperationModalsService);
    ngOnInit(): void;
    filterByType(bulkOperations: IOperationBulk[], typeFilter: any): IOperationBulk[];
    resetFilter(): void;
    isFilterApplied(): any;
    filter(statusFilters: any, timeFilter: any): Promise<IResultList<IOperationBulk>>;
    getBulkOperations(filter?: any): Promise<IResultList<IOperationBulk>>;
    getTypeFilters(): OperationType[];
    addBulkOperation(): void;
    openFailedOperation(failedParentId: any): void;
    compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number;
    private flattenFilterFragments;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<BulkOperationsListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<BulkOperationsListComponent, "c8y-bulk-operations", never, {}, {}, never, never>;
}

//# sourceMappingURL=bulk-operations-list.component.d.ts.map