{"version":3,"file":"bulk-operations.service.d.ts","sources":["bulk-operations.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Location } from '@angular/common';\nimport { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IdReference, IManagedObject, InventoryService, IOperation, IOperationBulk, IResult, OperationBulkService, OperationService } from '@c8y/client';\nimport { OperationDetails } from './operation-details.model';\nimport { OperationType } from './operation-type.model';\nimport { BulkOperationType } from './bulk-operation.model';\nexport declare const baseUrl = \"devicecontrol/bulk/creation/\";\nexport declare const HOOK_LIST_BULK_TYPE: InjectionToken<OperationType | OperationType[]>;\nexport declare class BulkOperationsService {\n    private operationBulkService;\n    private operationService;\n    private inventoryService;\n    private location;\n    readonly DD_LOW_COUNT: number;\n    firmwareId: Subject<IdReference>;\n    private bulkTypes;\n    constructor(operationBulkService: OperationBulkService, operationService: OperationService, inventoryService: InventoryService, location: Location, bulkTypes: Array<OperationType | OperationType[]>);\n    getBulkOperations(customFilter?: {}): Promise<import(\"@c8y/client\").IResultList<IOperationBulk>>;\n    getBulkOperationById(bulkOperationId: string | number): Promise<IResult<IOperationBulk>>;\n    createBulkOperation(bulkOperation: Partial<IOperationBulk>): Promise<IResult<IOperationBulk>>;\n    deleteBulkOperation(bulkOperationId: any): Promise<IResult<null>>;\n    updateBulkOperation(bulkOperation: Partial<IOperationBulk>): Promise<IResult<IOperationBulk>>;\n    getOperation(id: string): Promise<IResult<IOperation>>;\n    returnToBulkOperationOverview(): void;\n    setBulkTypes(list: OperationType[]): void;\n    getBulkTypes(): OperationType[];\n    setFirmwareId(id: IdReference): void;\n    createGroup(deviceQueryDataString: string): Promise<IResult<IManagedObject>>;\n    scheduleBulkOperation(deviceQueryString: string, details: OperationDetails): Promise<void>;\n    getSingleOperationsByStatus(status: any, bulkOperationId: any): Promise<import(\"@c8y/client\").IResultList<IOperation>>;\n    createSingleOperation(operation: IOperation): Promise<IResult<IOperation>>;\n    updateSingleOperation(partialUpdateObject: Partial<IOperation>): Promise<IResult<IOperation>>;\n    getManagedObject(deviceId: IdReference): Promise<IResult<IManagedObject>>;\n    retrieveBulkOperationType(operation: IOperation): BulkOperationType;\n}\n"]}