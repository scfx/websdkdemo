{"version":3,"file":"select-software-step.component.d.ts","sources":["select-software-step.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, QueryList } from '@angular/core';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { ListItemRadioComponent } from '@c8y/ngx-components';\nimport { RepositoryService } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ISelectedSoftware } from './select-software.model';\nexport declare class SelectSoftwareStepComponent {\n    private repositoryService;\n    private translate;\n    software: EventEmitter<ISelectedSoftware>;\n    textFilter$: BehaviorSubject<string>;\n    deviceType$: BehaviorSubject<string>;\n    deviceTypes: any[];\n    selectedDeviceType: {\n        name: string;\n    };\n    isLegacy: any;\n    software$: Observable<IResultList<IManagedObject>>;\n    readonly NO_DEVICE_TYPE_AVAILABLE: any;\n    radioButtons: QueryList<ListItemRadioComponent>;\n    private deviceTypeSubscription;\n    constructor(repositoryService: RepositoryService, translate: TranslateService);\n    getBaseVersionsCount$(software: IManagedObject): Observable<number>;\n    getVersions(software: IManagedObject): Promise<IResultList<IManagedObject>>;\n    getDeviceTypeTitle(software: IManagedObject): string;\n    loadDeviceTypes(): void;\n    ngOnDestroy(): void;\n    resetSelection(): void;\n    selectSoftware({ option, software }: {\n        option: any;\n        software: any;\n    }): void;\n    emitSoftware({ option, software }: {\n        option: any;\n        software: any;\n    }): void;\n    private getSoftware;\n}\n"]}