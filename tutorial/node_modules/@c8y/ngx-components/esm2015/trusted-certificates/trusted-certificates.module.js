import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { TrustedCertificatesComponent } from './trusted-certificates.component';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AddTrustedCertificateComponent } from './add-trusted-certificate.component';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { TrustedCertificatesNavigationFactory } from './trusted-certificates-navigation.factory';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from 'ngx-bootstrap/dropdown';
const trustedCertificatesRoutes = [
    {
        path: 'trusted-certificates',
        component: TrustedCertificatesComponent
    }
];
export class TrustedCertificatesModule {
}
TrustedCertificatesModule.ɵfac = function TrustedCertificatesModule_Factory(t) { return new (t || TrustedCertificatesModule)(); };
TrustedCertificatesModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TrustedCertificatesModule });
TrustedCertificatesModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: TrustedCertificatesNavigationFactory,
            multi: true
        }
    ], imports: [[
            CoreModule,
            CommonModule,
            RouterModule.forRoot(trustedCertificatesRoutes, { useHash: true }),
            BsDropdownModule.forRoot(),
            TooltipModule,
            ReactiveFormsModule,
            ButtonsModule,
            PopoverModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TrustedCertificatesModule, [{
        type: NgModule,
        args: [{
                declarations: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
                exports: [],
                imports: [
                    CoreModule,
                    CommonModule,
                    RouterModule.forRoot(trustedCertificatesRoutes, { useHash: true }),
                    BsDropdownModule.forRoot(),
                    TooltipModule,
                    ReactiveFormsModule,
                    ButtonsModule,
                    PopoverModule
                ],
                entryComponents: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: TrustedCertificatesNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TrustedCertificatesModule, { declarations: function () { return [TrustedCertificatesComponent, AddTrustedCertificateComponent]; }, imports: function () { return [CoreModule,
        CommonModule, ɵngcc1.RouterModule, ɵngcc2.BsDropdownModule, TooltipModule,
        ReactiveFormsModule,
        ButtonsModule,
        PopoverModule]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1c3RlZC1jZXJ0aWZpY2F0ZXMubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi90cnVzdGVkLWNlcnRpZmljYXRlcy90cnVzdGVkLWNlcnRpZmljYXRlcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQVMsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7OztBQUVqRyxNQUFNLHlCQUF5QixHQUFZO0FBQzNDLElBQUU7QUFDRixRQUFJLElBQUksRUFBRSxzQkFBc0I7QUFDaEMsUUFBSSxTQUFTLEVBQUUsNEJBQTRCO0FBQzNDLEtBQUc7QUFDSCxDQUFDLENBQUM7QUF3QkYsTUFBTSxPQUFPLHlCQUF5QjtBQUFHO3FEQXRCeEMsUUFBUSxTQUFDLGtCQUNSLFlBQVksRUFBRSxDQUFDO0FBQTRCLEVBQUUsOEJBQThCLENBQUMsa0JBQzVFLE9BQU8sRUFBRSxFQUFFLGtCQUNYLE9BQU8sRUFBRTtFQUNQLFVBQVUsc0JBQ1YsWUFBWSxzQkFDWixZQUFZLENBQUM7RUFBTyxDQUFDO2tCQUF5QixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUNsRSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7S0FDMUIsYUFBYTs7TUFDYjtNQUFtQjtJQUNuQixhQUFhO2FBQ2IsYUFBYSxrQkFDZCxrQkFDRCxlQUFlLEVBQUU7QUFBQyw0QkFBNEIsRUFBRTtvQkFBOEIsQ0FBQztZQUMvRSxTQUFTLEVBQUU7WUFDVDtXQUNFLE9BQU8sRUFBRTtjQUFvQjt5QkFDN0IsUUFBUSxFQUFFLG9DQUFvQywwQkFDOUMsS0FBSyxFQUFFLElBQUk7U0FDWjtHQUNGO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGUsIFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIENvcmVNb2R1bGUsIEhPT0tfTkFWSUdBVE9SX05PREVTIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcnVzdGVkQ2VydGlmaWNhdGVzQ29tcG9uZW50IH0gZnJvbSAnLi90cnVzdGVkLWNlcnRpZmljYXRlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudCB9IGZyb20gJy4vYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1dHRvbnNNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2J1dHRvbnMnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFRydXN0ZWRDZXJ0aWZpY2F0ZXNOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vdHJ1c3RlZC1jZXJ0aWZpY2F0ZXMtbmF2aWdhdGlvbi5mYWN0b3J5JztcblxuY29uc3QgdHJ1c3RlZENlcnRpZmljYXRlc1JvdXRlczogUm91dGVbXSA9IFtcbiAge1xuICAgIHBhdGg6ICd0cnVzdGVkLWNlcnRpZmljYXRlcycsXG4gICAgY29tcG9uZW50OiBUcnVzdGVkQ2VydGlmaWNhdGVzQ29tcG9uZW50XG4gIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RydXN0ZWRDZXJ0aWZpY2F0ZXNDb21wb25lbnQsIEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLmZvclJvb3QodHJ1c3RlZENlcnRpZmljYXRlc1JvdXRlcywgeyB1c2VIYXNoOiB0cnVlIH0pLFxuICAgIEJzRHJvcGRvd25Nb2R1bGUuZm9yUm9vdCgpLFxuICAgIFRvb2x0aXBNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdXR0b25zTW9kdWxlLFxuICAgIFBvcG92ZXJNb2R1bGVcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbVHJ1c3RlZENlcnRpZmljYXRlc0NvbXBvbmVudCwgQWRkVHJ1c3RlZENlcnRpZmljYXRlQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogVHJ1c3RlZENlcnRpZmljYXRlc05hdmlnYXRpb25GYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVHJ1c3RlZENlcnRpZmljYXRlc01vZHVsZSB7fVxuIl19