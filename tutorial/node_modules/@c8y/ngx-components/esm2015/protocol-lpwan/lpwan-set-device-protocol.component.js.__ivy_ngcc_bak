import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';
import { AlertService, gettext } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';
export class LpwanAssignDeviceProtocolComponent {
    constructor(lpwanService, alertService, router, inventoryService) {
        this.lpwanService = lpwanService;
        this.alertService = alertService;
        this.router = router;
        this.inventoryService = inventoryService;
        this.filterProtocols = pipe();
        this.pattern = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
            this.setPipe('');
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterProtocols = pipe(map((protocols) => protocols.filter(protocol => (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&
            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1))));
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newProtocol = null;
            try {
                yield this.loadDevice();
                this.availableProtocols = yield this.lpwanService.getAvailableProtocols(this.device);
                this.currentProtocol = yield this.lpwanService.getCurrentProtocol(this.device);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
            const { data } = yield this.inventoryService.detail(deviceId);
            this.device = data;
        });
    }
    apply(selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const moUpdated = (yield this.lpwanService.applyProtocol(this.device, selectedProtocol)).res.status === 200;
                yield this.reload();
                this.alertService.success(gettext('Device protocol set.'));
                this.lpwanSetDeviceProtocolForm.reset('dirty');
                if (moUpdated) {
                    this.refreshCache();
                }
            }
            catch (ex) {
                this.alertService.danger(gettext('Could not set device protocol.'));
            }
        });
    }
    refreshCache() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.lpwanService.refreshCache(this.device);
            }
            catch (ex) {
                // do nothing (refreshing is an optional step)
            }
        });
    }
}
LpwanAssignDeviceProtocolComponent.decorators = [
    { type: Component, args: [{
                selector: 'set-device-protocol',
                template: "<form #lpwanSetDeviceProtocolForm=\"ngForm\">\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\">\n            {{ 'LPWAN device protocol' | translate }}\n          </h4>\n        </div>\n        <div class=\"p-16\">\n          <div *ngIf=\"loading\">\n            <c8y-loading></c8y-loading>\n          </div>\n\n          <div *ngIf=\"!loading\">\n            <div class=\"form-group\">\n              <label translate>Current device protocol</label>\n              <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n                {{ device.type }}\n              </p>\n              <p class=\"form-control-static\" *ngIf=\"currentProtocol\">\n                {{ currentProtocol.name }}\n              </p>\n            </div>\n            <c8y-form-group>\n              <c8y-typeahead\n                [(ngModel)]=\"newProtocol\"\n                placeholder=\"{{ 'Select new device protocol' | translate }}\"\n                (onSearch)=\"setPipe($event)\"\n                name=\"newProtocol\"\n                [allowFreeEntries]=\"false\"\n              >\n                <c8y-li\n                  *c8yFor=\"\n                    let protocol of availableProtocols;\n                    loadMore: 'hidden';\n                    pipe: filterProtocols\n                  \"\n                  class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                  (click)=\"newProtocol = protocol; setPipe('')\"\n                >\n                  <c8y-highlight [text]=\"protocol.name\" [pattern]=\"pattern\"></c8y-highlight>\n                </c8y-li>\n              </c8y-typeahead>\n              <c8y-messages\n                ><c8y-message\n                  name=\"notExisting\"\n                  [text]=\"'Select one of the protocols.' | translate\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            [disabled]=\"!newProtocol\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C"
            },] }
];
LpwanAssignDeviceProtocolComponent.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService },
    { type: AlertService },
    { type: Router },
    { type: InventoryService }
];
LpwanAssignDeviceProtocolComponent.propDecorators = {
    lpwanSetDeviceProtocolForm: [{ type: ViewChild, args: ['lpwanSetDeviceProtocolForm', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1scHdhbi9scHdhbi1zZXQtZGV2aWNlLXByb3RvY29sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEYsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RCxPQUFPLEVBQWtCLGdCQUFnQixFQUFlLE1BQU0sYUFBYSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU1yQyxNQUFNLE9BQU8sa0NBQWtDO0lBVzdDLFlBQ1UsWUFBMkMsRUFDM0MsWUFBMEIsRUFDMUIsTUFBYyxFQUNkLGdCQUFrQztRQUhsQyxpQkFBWSxHQUFaLFlBQVksQ0FBK0I7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFSNUMsb0JBQWUsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUN6QixZQUFPLEdBQUcsRUFBRSxDQUFDO0lBUVYsQ0FBQztJQUNFLFFBQVE7O1lBQ1osTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQixDQUFDO0tBQUE7SUFFRCxPQUFPLENBQUMsU0FBaUI7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FB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WTtZQUVaLE1BQU07WUFEVSxnQkFBZ0I7Ozt5Q0FrQnRDLFNBQVMsU0FBQyw0QkFBNEIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMcHdhblNldERldmljZVByb3RvY29sU2VydmljZSB9IGZyb20gJy4vbHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIElSZXN1bHRMaXN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2V0LWRldmljZS1wcm90b2NvbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9scHdhbi1zZXQtZGV2aWNlLXByb3RvY29sLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBMcHdhbkFzc2lnbkRldmljZVByb3RvY29sQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZGV2aWNlOiBJTWFuYWdlZE9iamVjdDtcbiAgY3VycmVudFByb3RvY29sOiBJTWFuYWdlZE9iamVjdDtcbiAgYXZhaWxhYmxlUHJvdG9jb2xzOiBJUmVzdWx0TGlzdDxJTWFuYWdlZE9iamVjdD47XG4gIG5ld1Byb3RvY29sOiBJTWFuYWdlZE9iamVjdDtcblxuICBmaWx0ZXJQcm90b2NvbHMgPSBwaXBlKCk7XG4gIHBhdHRlcm4gPSAnJztcbiAgQFZpZXdDaGlsZCgnbHB3YW5TZXREZXZpY2VQcm90b2NvbEZvcm0nLCB7IHN0YXRpYzogZmFsc2UgfSkgbHB3YW5TZXREZXZpY2VQcm90b2NvbEZvcm06IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxwd2FuU2VydmljZTogTHB3YW5TZXREZXZpY2VQcm90b2NvbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZVxuICApIHt9XG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgdGhpcy5zZXRQaXBlKCcnKTtcbiAgfVxuXG4gIHNldFBpcGUoZmlsdGVyU3RyOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBhdHRlcm4gPSBmaWx0ZXJTdHI7XG4gICAgdGhpcy5maWx0ZXJQcm90b2NvbHMgPSBwaXBlKFxuICAgICAgbWFwKChwcm90b2NvbHM6IElNYW5hZ2VkT2JqZWN0W10pID0+XG4gICAgICAgIHByb3RvY29scy5maWx0ZXIoXG4gICAgICAgICAgcHJvdG9jb2wgPT5cbiAgICAgICAgICAgICghdGhpcy5jdXJyZW50UHJvdG9jb2wgfHwgdGhpcy5jdXJyZW50UHJvdG9jb2wuaWQgIT09IHByb3RvY29sLmlkKSAmJlxuICAgICAgICAgICAgKCFmaWx0ZXJTdHIgfHwgcHJvdG9jb2wubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyU3RyLnRvTG93ZXJDYXNlKCkpID4gLTEpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcmVsb2FkKCkge1xuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy5uZXdQcm90b2NvbCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZERldmljZSgpO1xuICAgICAgdGhpcy5hdmFpbGFibGVQcm90b2NvbHMgPSBhd2FpdCB0aGlzLmxwd2FuU2VydmljZS5nZXRBdmFpbGFibGVQcm90b2NvbHModGhpcy5kZXZpY2UpO1xuICAgICAgdGhpcy5jdXJyZW50UHJvdG9jb2wgPSBhd2FpdCB0aGlzLmxwd2FuU2VydmljZS5nZXRDdXJyZW50UHJvdG9jb2wodGhpcy5kZXZpY2UpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9hZERldmljZSgpIHtcbiAgICBjb25zdCBkZXZpY2VJZCA9IHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnVybC5tYXRjaCgvXFxkKy8pWzBdO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChkZXZpY2VJZCk7XG4gICAgdGhpcy5kZXZpY2UgPSBkYXRhO1xuICB9XG5cbiAgYXN5bmMgYXBwbHkoc2VsZWN0ZWRQcm90b2NvbCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb1VwZGF0ZWQgPVxuICAgICAgICAoYXdhaXQgdGhpcy5scHdhblNlcnZpY2UuYXBwbHlQcm90b2NvbCh0aGlzLmRldmljZSwgc2VsZWN0ZWRQcm90b2NvbCkpLnJlcy5zdGF0dXMgPT09IDIwMDtcbiAgICAgIGF3YWl0IHRoaXMucmVsb2FkKCk7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0RldmljZSBwcm90b2NvbCBzZXQuJykpO1xuICAgICAgdGhpcy5scHdhblNldERldmljZVByb3RvY29sRm9ybS5yZXNldCgnZGlydHknKTtcbiAgICAgIGlmIChtb1VwZGF0ZWQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoQ2FjaGUoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZGFuZ2VyKGdldHRleHQoJ0NvdWxkIG5vdCBzZXQgZGV2aWNlIHByb3RvY29sLicpKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyByZWZyZXNoQ2FjaGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubHB3YW5TZXJ2aWNlLnJlZnJlc2hDYWNoZSh0aGlzLmRldmljZSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmcgKHJlZnJlc2hpbmcgaXMgYW4gb3B0aW9uYWwgc3RlcClcbiAgICB9XG4gIH1cbn1cbiJdfQ==