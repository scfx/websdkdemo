import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { Permissions } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
export class SmsGatewayGuard {
    constructor(permissions, applicationService) {
        this.permissions = permissions;
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showSMSProvider === undefined) {
            const hasRole = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));
            this.showSMSProvider = hasRole.then((hasPermissions) => hasPermissions &&
                this.applicationService
                    .isAvailable(SmsGatewayGuard.applicationName)
                    .then(result => result && result.data));
        }
        return this.showSMSProvider;
    }
}
SmsGatewayGuard.ɵfac = function SmsGatewayGuard_Factory(t) { return new (t || SmsGatewayGuard)(ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ɵngcc2.ApplicationService)); };
SmsGatewayGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SmsGatewayGuard, factory: SmsGatewayGuard.ɵfac });
SmsGatewayGuard.applicationName = 'sms-gateway';
SmsGatewayGuard.ctorParameters = () => [
    { type: Permissions },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SmsGatewayGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Permissions }, { type: ɵngcc2.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21zLWdhdGV3YXkuZ3VhcmQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Ntcy1nYXRld2F5L3Ntcy1nYXRld2F5Lmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUdsRCxNQUFNLE9BQU8sZUFBZTtBQUFHLElBSTdCLFlBQW9CLFdBQXdCLEVBQVUsa0JBQXNDO0FBQUksUUFBNUUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFBQyxRQUFTLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxJQUFFLENBQUM7QUFDbEcsSUFDRSxXQUFXLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtBQUFJLFFBQ3ZFLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7QUFDNUMsWUFBTSxNQUFNLE9BQU8sR0FBcUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ25HLFlBQ00sSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUNqQyxDQUFDLGNBQXVCLEVBQUUsRUFBRSxDQUMxQixjQUFjO0FBQ3hCLGdCQUFVLElBQUksQ0FBQyxrQkFBa0I7QUFDakMscUJBQWEsV0FBVyxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUM7QUFDekQscUJBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDM0MsQ0FBQztBQUNSLFNBQUs7QUFDTCxRQUNJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFDSDs7MkhBQUM7QUFwQnlCLCtCQUFlLEdBQUcsYUFBYSxDQUFDLEFBRHhEO0FBQUM7RUFERixVQUFVLFpBQ2lDLFlBSG5DLFdBQVc7QUFBSSxZQURmLGtCQUFrQjtBQUFHOzs7aUhBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFBlcm1pc3Npb25zIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTbXNHYXRld2F5R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFwcGxpY2F0aW9uTmFtZSA9ICdzbXMtZ2F0ZXdheSc7XG4gIHByaXZhdGUgc2hvd1NNU1Byb3ZpZGVyOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLCBwcml2YXRlIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLnNob3dTTVNQcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBoYXNSb2xlOiBQcm9taXNlPGJvb2xlYW4+ID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMucGVybWlzc2lvbnMuaGFzUm9sZSgnUk9MRV9TTVNfUkVBRCcpKTtcblxuICAgICAgdGhpcy5zaG93U01TUHJvdmlkZXIgPSBoYXNSb2xlLnRoZW4oXG4gICAgICAgIChoYXNQZXJtaXNzaW9uczogYm9vbGVhbikgPT5cbiAgICAgICAgICBoYXNQZXJtaXNzaW9ucyAmJlxuICAgICAgICAgIHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAuaXNBdmFpbGFibGUoU21zR2F0ZXdheUd1YXJkLmFwcGxpY2F0aW9uTmFtZSlcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQgJiYgcmVzdWx0LmRhdGEpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNob3dTTVNQcm92aWRlcjtcbiAgfVxufVxuIl19