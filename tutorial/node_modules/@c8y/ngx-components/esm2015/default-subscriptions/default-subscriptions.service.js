import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { isUndefined, sortBy } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { ApplicationType, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';
import { HumanizeAppNamePipe } from '@c8y/ngx-components';
import { DefaultSubscriptionsContext as DefaultSubscriptionsContextTenant } from './default-subscriptions.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class DefaultSubscriptionsService {
    constructor(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    getSubscribableTenantApps() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            const allApps = (yield this.applicationService.listByTenant(null, { pageSize: 2000 })).data;
            const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);
            const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);
            const filteredApps = [...ownApps];
            inheritedApps.forEach(inheritedApp => {
                if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {
                    filteredApps.push(inheritedApp);
                }
            });
            const filteredAppsWithHumanizedNames = yield Promise.all(filteredApps.map((app) => __awaiter(this, void 0, void 0, function* () {
                const humanizedName = yield this.humanizeAppNamePipe
                    .transform(app.name)
                    .pipe(debounceTime(250), take(1))
                    .toPromise();
                return { app, humanizedName };
            })));
            const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
            const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);
            return sortedApps;
        });
    }
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    getDefaultSubscriptionsEvaluatedFromParentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.PARENT_TENANT);
        });
    }
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    getDefaultSubscriptionsFromCurrentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.CURRENT_TENANT);
        });
    }
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveOnCreationSubscriptions(defaultSubscriptions);
            yield this.saveOnUpgradeSubscriptions(defaultSubscriptions);
        });
    }
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    getDefaultSubscriptions(contextTenant) {
        return __awaiter(this, void 0, void 0, function* () {
            let tenantOptionsParams;
            let overridable;
            switch (contextTenant) {
                case DefaultSubscriptionsContextTenant.CURRENT_TENANT:
                    tenantOptionsParams = { evaluate: 'current' };
                    overridable = true;
                    break;
                case DefaultSubscriptionsContextTenant.PARENT_TENANT:
                    tenantOptionsParams = { evaluate: 'inherited' };
                    overridable = false;
                    break;
            }
            const { onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices } = yield this.getTenantOptions(tenantOptionsParams);
            const onCreationSubscriptions = this.namesToPartialApps({
                appsNamesStr: onCreationApps,
                microservicesNamesStr: onCreationMicroservices
            });
            const onUpgradeAppsDefault = overridable ? null : onCreationApps;
            const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
            const onUpgradeSubscriptions = this.namesToPartialApps({
                appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                microservicesNamesStr: onUpgradeMicroservicesEnabled
                    ? onUpgradeMicroservices
                    : onUpgradeMicroservicesDefault
            });
            const defaultSubscriptions = {
                onCreationSubscriptions,
                onUpgradeSubscriptions
            };
            if (overridable) {
                defaultSubscriptions.overrideOnCreationSubscriptions =
                    onCreationApps !== null || onCreationMicroservices !== null;
                defaultSubscriptions.overrideOnUpgradeSubscriptions =
                    onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
            }
            return defaultSubscriptions;
        });
    }
    getTenantOptions(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                onCreationApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                }, null, params),
                onCreationMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                }, null, params),
                onUpgradeAppsEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                }, false, params),
                onUpgradeApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                }, null, params),
                onUpgradeMicroservicesEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                }, false, params),
                onUpgradeMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                }, null, params)
            };
        });
    }
    saveOnCreationSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnCreationSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                });
            }
        });
    }
    saveOnUpgradeSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                });
            }
        });
    }
    getTenantOption(option, defaultValue = null, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let value;
            try {
                value = (yield this.tenantOptionsService.detail(option, params)).data.value;
                value = JSON.parse(value);
            }
            catch (ex) {
                value = !isUndefined(value) ? value : defaultValue;
            }
            return value;
        });
    }
    setTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tenantOptionsService.update(option);
        });
    }
    unsetTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.tenantOptionsService.delete(option);
            }
            catch (ex) {
                if (!ex || !ex.res || ex.res.status !== 404) {
                    throw ex;
                }
            }
        });
    }
    namesToPartialApps({ appsNamesStr, microservicesNamesStr }) {
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return [
            ...(appsNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({ name: name.trim() })),
            ...(microservicesNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({
                name: name.trim(),
                type: ApplicationType.MICROSERVICE
            }))
        ];
    }
    partialAppsListToAppsNames(apps) {
        return apps
            .filter(app => app.type !== ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
    partialAppsToMicroservicesNames(apps) {
        return apps
            .filter(app => app.type === ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
}
DefaultSubscriptionsService.ɵfac = function DefaultSubscriptionsService_Factory(t) { return new (t || DefaultSubscriptionsService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc1.TenantService), ɵngcc0.ɵɵinject(ɵngcc1.TenantOptionsService), ɵngcc0.ɵɵinject(ɵngcc2.HumanizeAppNamePipe)); };
DefaultSubscriptionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DefaultSubscriptionsService, factory: DefaultSubscriptionsService.ɵfac });
DefaultSubscriptionsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: TenantService },
    { type: TenantOptionsService },
    { type: HumanizeAppNamePipe }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }, { type: ɵngcc1.TenantService }, { type: ɵngcc1.TenantOptionsService }, { type: ɵngcc2.HumanizeAppNamePipe }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zdWJzY3JpcHRpb25zLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RlZmF1bHQtc3Vic2NyaXB0aW9ucy9kZWZhdWx0LXN1YnNjcmlwdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBELE9BQU8sRUFFTCxlQUFlLEVBQ2Ysa0JBQWtCLEVBRWxCLGFBQWEsRUFDYixvQkFBb0IsRUFDckIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFMUQsT0FBTyxFQUdMLDJCQUEyQixJQUFJLGlDQUFpQyxFQUNqRSxNQUFNLCtCQUErQixDQUFDOzs7O0FBR3ZDLE1BQU0sT0FBTywyQkFBMkI7QUFDeEMsSUFBRSxZQUNVLGtCQUFzQyxFQUN0QyxhQUE0QixFQUM1QixvQkFBMEMsRUFDMUMsbUJBQXdDO0FBQ2pELFFBSlMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBQ3ZDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFDN0IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtBQUFDLFFBQzNDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFDcEQsSUFBSyxDQUFDO0FBQ04sSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURDO0FBQ0wsSUFBUSx5QkFBeUI7QUFBSztBQUNELFlBQWpDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3BFLFlBQ0ksTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDaEcsWUFBSSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0RixZQUFJLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVGLFlBQ0ksTUFBTSxZQUFZLEdBQW1CLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUN0RCxZQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7QUFDekMsZ0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNyRixvQkFBUSxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLGlCQUFPO0FBQ1AsWUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFlBQ0ksTUFBTSw4QkFBOEIsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ3RELFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBTSxHQUFHLEVBQUMsRUFBRTtBQUNVLGdCQUFyQyxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUI7QUFDNUQscUJBQVcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDOUIscUJBQVcsSUFBSSxDQUNILFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSO0FBQ1gscUJBQVcsU0FBUyxFQUFFLENBQUM7QUFDdkIsZ0JBQVEsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsQ0FBQztBQUN0QyxZQUFNLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztBQUNOLFlBQUksTUFBTSw0QkFBNEIsR0FBRyxNQUFNLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ25HLFlBQUksTUFBTSxVQUFVLEdBQUcsNEJBQTRCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUUsWUFDSSxPQUFPLFVBQVUsQ0FBQztBQUN0QixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBUSxnREFBZ0Q7QUFBSztBQUM5QixZQUEzQixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxpQ0FBaUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6RixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBUSx3Q0FBd0M7QUFBSztBQUN0QixZQUEzQixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxpQ0FBaUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMxRixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFRLHVDQUF1QyxDQUFDLG9CQUEwQztBQUMxRjtBQUE4RCxZQUExRCxNQUFNLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2pFLFlBQUksTUFBTSxJQUFJLENBQUMsMEJBQTBCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNoRSxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBZ0IsdUJBQXVCLENBQ25DLGFBQWdEO0FBQ2pEO0FBQ3lCLFlBQXhCLElBQUksbUJBQTJCLENBQUM7QUFDcEMsWUFBSSxJQUFJLFdBQW9CLENBQUM7QUFDN0IsWUFDSSxRQUFRLGFBQWEsRUFBRTtBQUMzQixnQkFBTSxLQUFLLGlDQUFpQyxDQUFDLGNBQWM7QUFDM0Qsb0JBQVEsbUJBQW1CLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFDdEQsb0JBQVEsV0FBVyxHQUFHLElBQUksQ0FBQztBQUMzQixvQkFBUSxNQUFNO0FBQ2QsZ0JBQ00sS0FBSyxpQ0FBaUMsQ0FBQyxhQUFhO0FBQzFELG9CQUFRLG1CQUFtQixHQUFHLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBQ3hELG9CQUFRLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDNUIsb0JBQVEsTUFBTTtBQUNkLGFBQUs7QUFDTCxZQUNJLE1BQU0sRUFDSixjQUFjLEVBQ2QsdUJBQXVCLEVBQ3ZCLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsNkJBQTZCLEVBQzdCLHNCQUFzQixFQUN2QixHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDekQsWUFDSSxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUM1RCxnQkFBTSxZQUFZLEVBQUUsY0FBYztBQUNsQyxnQkFBTSxxQkFBcUIsRUFBRSx1QkFBdUI7QUFDcEQsYUFBSyxDQUFDLENBQUM7QUFDUCxZQUNJLE1BQU0sb0JBQW9CLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztBQUNyRSxZQUFJLE1BQU0sNkJBQTZCLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO0FBQ3ZGLFlBQUksTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7QUFDM0QsZ0JBQU0sWUFBWSxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtBQUMvRSxnQkFBTSxxQkFBcUIsRUFBRSw2QkFBNkI7QUFDMUQsb0JBQVEsQ0FBQyxDQUFDLHNCQUFzQjtBQUNoQyxvQkFBUSxDQUFDLENBQUMsNkJBQTZCO0FBQ3ZDLGFBQUssQ0FBQyxDQUFDO0FBQ1AsWUFDSSxNQUFNLG9CQUFvQixHQUF5QjtBQUN2RCxnQkFBTSx1QkFBdUI7QUFDN0IsZ0JBQU0sc0JBQXNCO0FBQzVCLGFBQUssQ0FBQztBQUNOLFlBQ0ksSUFBSSxXQUFXLEVBQUU7QUFDckIsZ0JBQU0sb0JBQW9CLENBQUMsK0JBQStCO0FBQzFELG9CQUFRLGNBQWMsS0FBSyxJQUFJLElBQUksdUJBQXVCLEtBQUssSUFBSSxDQUFDO0FBQ3BFLGdCQUFNLG9CQUFvQixDQUFDLDhCQUE4QjtBQUN6RCxvQkFBUSxvQkFBb0IsSUFBSSw2QkFBNkIsQ0FBQztBQUM5RCxhQUFLO0FBQ0wsWUFDSSxPQUFPLG9CQUFvQixDQUFDO0FBQ2hDLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNnQixnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsRUFBRTtBQUM1QztBQUNpRCxZQUQ3QyxPQUFPO0FBQ1gsZ0JBQU0sY0FBYyxFQUFFLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FDeEM7QUFDUixvQkFBVSxRQUFRLEVBQUUsZUFBZTtBQUNuQyxvQkFBVSxHQUFHLEVBQUUsNkJBQTZCO0FBQzVDLGlCQUFTLEVBQ0QsSUFBSSxFQUNKLE1BQU0sQ0FDUDtBQUNQLGdCQUFNLHVCQUF1QixFQUFFLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FDakQ7QUFDUixvQkFBVSxRQUFRLEVBQUUsZUFBZTtBQUNuQyxvQkFBVSxHQUFHLEVBQUUsOEJBQThCO0FBQzdDLGlCQUFTLEVBQ0QsSUFBSSxFQUNKLE1BQU0sQ0FDUDtBQUNQLGdCQUFNLG9CQUFvQixFQUFFLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FDOUM7QUFDUixvQkFBVSxRQUFRLEVBQUUsZUFBZTtBQUNuQyxvQkFBVSxHQUFHLEVBQUUsdUNBQXVDO0FBQ3RELGlCQUFTLEVBQ0QsS0FBSyxFQUNMLE1BQU0sQ0FDUDtBQUNQLGdCQUFNLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQ3ZDO0FBQ1Isb0JBQVUsUUFBUSxFQUFFLGVBQWU7QUFDbkMsb0JBQVUsR0FBRyxFQUFFLCtCQUErQjtBQUM5QyxpQkFBUyxFQUNELElBQUksRUFDSixNQUFNLENBQ1A7QUFDUCxnQkFBTSw2QkFBNkIsRUFBRSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQ3ZEO0FBQ1Isb0JBQVUsUUFBUSxFQUFFLGVBQWU7QUFDbkMsb0JBQVUsR0FBRyxFQUFFLHdDQUF3QztBQUN2RCxpQkFBUyxFQUNELEtBQUssRUFDTCxNQUFNLENBQ1A7QUFDUCxnQkFBTSxzQkFBc0IsRUFBRSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQ2hEO0FBQ1Isb0JBQVUsUUFBUSxFQUFFLGVBQWU7QUFDbkMsb0JBQVUsR0FBRyxFQUFFLGdDQUFnQztBQUMvQyxpQkFBUyxFQUNELElBQUksRUFDSixNQUFNLENBQ1A7QUFDUCxhQUFLLENBQUM7QUFDTixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDZ0IsMkJBQTJCLENBQUMsb0JBQTBDO0FBQ3RGO0FBQThELFlBQTFELElBQUksb0JBQW9CLENBQUMsK0JBQStCLEVBQUU7QUFDOUQsZ0JBQU0sTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ2pDLG9CQUFRLFFBQVEsRUFBRSxlQUFlO0FBQ2pDLG9CQUFRLEdBQUcsRUFBRSw2QkFBNkI7QUFDMUMsb0JBQVEsS0FBSyxFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxvQkFBb0IsQ0FBQyx1QkFBdUIsQ0FBQztBQUM1RixpQkFBTyxDQUFDLENBQUM7QUFDVCxnQkFBTSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDakMsb0JBQVEsUUFBUSxFQUFFLGVBQWU7QUFDakMsb0JBQVEsR0FBRyxFQUFFLDhCQUE4QjtBQUMzQyxvQkFBUSxLQUFLLEVBQUUsSUFBSSxDQUFDLCtCQUErQixDQUFDLG9CQUFvQixDQUFDLHVCQUF1QixDQUFDO0FBQ2pHLGlCQUFPLENBQUMsQ0FBQztBQUNULGFBQUs7QUFBQyxpQkFBSztBQUNYLGdCQUFNLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQ25DLG9CQUFRLFFBQVEsRUFBRSxlQUFlO0FBQ2pDLG9CQUFRLEdBQUcsRUFBRSw2QkFBNkI7QUFDMUMsaUJBQU8sQ0FBQyxDQUFDO0FBQ1QsZ0JBQU0sTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUM7QUFDbkMsb0JBQVEsUUFBUSxFQUFFLGVBQWU7QUFDakMsb0JBQVEsR0FBRyxFQUFFLDhCQUE4QjtBQUMzQyxpQkFBTyxDQUFDLENBQUM7QUFDVCxhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ2dCLDBCQUEwQixDQUFDLG9CQUEwQztBQUNyRjtBQUE4RCxZQUExRCxJQUFJLG9CQUFvQixDQUFDLDhCQUE4QixFQUFFO0FBQzdELGdCQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNqQyxvQkFBUSxRQUFRLEVBQUUsZUFBZTtBQUNqQyxvQkFBUSxHQUFHLEVBQUUsdUNBQXVDO0FBQ3BELG9CQUFRLEtBQUssRUFBRSxNQUFNO0FBQ3JCLGlCQUFPLENBQUMsQ0FBQztBQUNULGdCQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNqQyxvQkFBUSxRQUFRLEVBQUUsZUFBZTtBQUNqQyxvQkFBUSxHQUFHLEVBQUUsd0NBQXdDO0FBQ3JELG9CQUFRLEtBQUssRUFBRSxNQUFNO0FBQ3JCLGlCQUFPLENBQUMsQ0FBQztBQUNULGdCQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNqQyxvQkFBUSxRQUFRLEVBQUUsZUFBZTtBQUNqQyxvQkFBUSxHQUFHLEVBQUUsK0JBQStCO0FBQzVDLG9CQUFRLEtBQUssRUFBRSxJQUFJLENBQUMsMEJBQTBCLENBQUMsb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7QUFDM0YsaUJBQU8sQ0FBQyxDQUFDO0FBQ1QsZ0JBQU0sTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ2pDLG9CQUFRLFFBQVEsRUFBRSxlQUFlO0FBQ2pDLG9CQUFRLEdBQUcsRUFBRSxnQ0FBZ0M7QUFDN0Msb0JBQVEsS0FBSyxFQUFFLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxvQkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQztBQUNoRyxpQkFBTyxDQUFDLENBQUM7QUFDVCxhQUFLO0FBQUMsaUJBQUs7QUFDWCxnQkFBTSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztBQUNuQyxvQkFBUSxRQUFRLEVBQUUsZUFBZTtBQUNqQyxvQkFBUSxHQUFHLEVBQUUsdUNBQXVDO0FBQ3BELGlCQUFPLENBQUMsQ0FBQztBQUNULGdCQUFNLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQ25DLG9CQUFRLFFBQVEsRUFBRSxlQUFlO0FBQ2pDLG9CQUFRLEdBQUcsRUFBRSx3Q0FBd0M7QUFDckQsaUJBQU8sQ0FBQyxDQUFDO0FBQ1QsZ0JBQU0sTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUM7QUFDbkMsb0JBQVEsUUFBUSxFQUFFLGVBQWU7QUFDakMsb0JBQVEsR0FBRyxFQUFFLCtCQUErQjtBQUM1QyxpQkFBTyxDQUFDLENBQUM7QUFDVCxnQkFBTSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztBQUNuQyxvQkFBUSxRQUFRLEVBQUUsZUFBZTtBQUNqQyxvQkFBUSxHQUFHLEVBQUUsZ0NBQWdDO0FBQzdDLGlCQUFPLENBQUMsQ0FBQztBQUNULGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDZ0IsZUFBZSxDQUFDLE1BQXFCLEVBQUUsWUFBWSxHQUFHLElBQUksRUFBRSxNQUFNLEdBQUcsRUFBRTtBQUN2RjtBQUVxQyxZQUZqQyxJQUFJLEtBQUssQ0FBQztBQUNkLFlBQUksSUFBSTtBQUNSLGdCQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ2xGLGdCQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLGFBQUs7QUFBQyxZQUFBLE9BQU8sRUFBRSxFQUFFO0FBQ2pCLGdCQUFNLEtBQUssR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDekQsYUFBSztBQUNMLFlBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ2dCLGVBQWUsQ0FBQyxNQUFxQjtBQUNyRDtBQUdJLFlBSEEsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BELFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNnQixpQkFBaUIsQ0FBQyxNQUFxQjtBQUN2RDtBQUNvRCxZQURoRCxJQUFJO0FBQ1IsZ0JBQU0sTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JELGFBQUs7QUFBQyxZQUFBLE9BQU8sRUFBRSxFQUFFO0FBQ2pCLGdCQUFNLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtBQUNuRCxvQkFBUSxNQUFNLEVBQUUsQ0FBQztBQUNqQixpQkFBTztBQUNQLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDVSxrQkFBa0IsQ0FBQyxFQUN6QixZQUFZLEVBQ1oscUJBQXFCLEVBSXRCO0FBQUksUUFDSCxJQUFJLFlBQVksS0FBSyxJQUFJLElBQUkscUJBQXFCLEtBQUssSUFBSSxFQUFFO0FBQ2pFLFlBQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsU0FBSztBQUNMLFFBQ0ksT0FBTztBQUNYLFlBQU0sR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUM7QUFDN0IsaUJBQVMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNuQixpQkFBUyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3BDLGlCQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3QyxZQUFNLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxFQUFFLENBQUM7QUFDdEMsaUJBQVMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNuQixpQkFBUyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3BDLGlCQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsZ0JBQVUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDM0IsZ0JBQVUsSUFBSSxFQUFFLGVBQWUsQ0FBQyxZQUFZO0FBQzVDLGFBQVMsQ0FBQyxDQUFDO0FBQ1gsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDVSwwQkFBMEIsQ0FBQyxJQUFxQjtBQUFJLFFBQzFELE9BQU8sSUFBSTtBQUNmLGFBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsWUFBWSxDQUFDO0FBQy9ELGFBQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUMzQixhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixJQUFFLENBQUM7QUFDSCxJQUNVLCtCQUErQixDQUFDLElBQXFCO0FBQUksUUFDL0QsT0FBTyxJQUFJO0FBQ2YsYUFBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxZQUFZLENBQUM7QUFDL0QsYUFBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzNCLGFBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNIO3VEQTdUQyxVQUFVOytKQUNUO0FBQUM7QUFDVSxZQWZYLGtCQUFrQjtBQUNsQixZQUNBLGFBQWE7QUFDYixZQUFBLG9CQUFvQjtBQUNuQixZQUNNLG1CQUFtQjtBQUFHOzs7Z01BQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzVW5kZWZpbmVkLCBzb3J0QnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBJQXBwbGljYXRpb24sXG4gIEFwcGxpY2F0aW9uVHlwZSxcbiAgQXBwbGljYXRpb25TZXJ2aWNlLFxuICBJU3lzdGVtT3B0aW9uLFxuICBUZW5hbnRTZXJ2aWNlLFxuICBUZW5hbnRPcHRpb25zU2VydmljZVxufSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBIdW1hbml6ZUFwcE5hbWVQaXBlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7XG4gIFBhcnRpYWxBcHBzTGlzdCxcbiAgRGVmYXVsdFN1YnNjcmlwdGlvbnMsXG4gIERlZmF1bHRTdWJzY3JpcHRpb25zQ29udGV4dCBhcyBEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbnRleHRUZW5hbnRcbn0gZnJvbSAnLi9kZWZhdWx0LXN1YnNjcmlwdGlvbnMubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVmYXVsdFN1YnNjcmlwdGlvbnNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IFRlbmFudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0ZW5hbnRPcHRpb25zU2VydmljZTogVGVuYW50T3B0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBodW1hbml6ZUFwcE5hbWVQaXBlOiBIdW1hbml6ZUFwcE5hbWVQaXBlXG4gICkge31cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGlzdCBvZiBhcHBsaWNhdGlvbnMgd2hpY2ggY2FuIGJlIHVzZWQgaW4gZGVmYXVsdCBzdWJzY3JpcHRpb25zLCBpLmUuOlxuICAgKiAtIGN1cnJlbnQgdGVuYW50J3MgYWxsIG93biBhcHBsaWNhdGlvbnMsXG4gICAqIC0gaW5oZXJpdGVkIGFwcGxpY2F0aW9ucywgd2hpY2ggZG8gbm90IGhhdmUgdGhlIHNhbWUgbmFtZXMgYXMgY3VycmVudCB0ZW5hbnQncyBvd24gYXBwcy5cbiAgICogVGhlIGxpc3QgaXMgc29ydGVkIGFscGhhYmV0aWNhbGx5IGJ5IGh1bWFuaXplZCBhcHAgbmFtZSBhbmQgY29udGFpbnMgdXAgdG8gMjAwMCBpdGVtcy5cbiAgICogQHJldHVybnMgVGhlIGxpc3Qgb2YgYXBwbGljYXRpb25zLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBkZWZhdWx0IHN1YnNjcmlwdGlvbnMuXG4gICAqL1xuICBhc3luYyBnZXRTdWJzY3JpYmFibGVUZW5hbnRBcHBzKCk6IFByb21pc2U8SUFwcGxpY2F0aW9uW10+IHtcbiAgICBjb25zdCBjdXJyZW50VGVuYW50ID0gKGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5jdXJyZW50KCkpLmRhdGE7XG5cbiAgICBjb25zdCBhbGxBcHBzID0gKGF3YWl0IHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlLmxpc3RCeVRlbmFudChudWxsLCB7IHBhZ2VTaXplOiAyMDAwIH0pKS5kYXRhO1xuICAgIGNvbnN0IG93bkFwcHMgPSBhbGxBcHBzLmZpbHRlcihhcHAgPT4gYXBwLm93bmVyLnRlbmFudC5pZCA9PT0gY3VycmVudFRlbmFudC5uYW1lKTtcbiAgICBjb25zdCBpbmhlcml0ZWRBcHBzID0gYWxsQXBwcy5maWx0ZXIoYXBwID0+IGFwcC5vd25lci50ZW5hbnQuaWQgIT09IGN1cnJlbnRUZW5hbnQubmFtZSk7XG5cbiAgICBjb25zdCBmaWx0ZXJlZEFwcHM6IElBcHBsaWNhdGlvbltdID0gWy4uLm93bkFwcHNdO1xuICAgIGluaGVyaXRlZEFwcHMuZm9yRWFjaChpbmhlcml0ZWRBcHAgPT4ge1xuICAgICAgaWYgKCFmaWx0ZXJlZEFwcHMuc29tZShmaWx0ZXJlZEFwcCA9PiBmaWx0ZXJlZEFwcC5uYW1lID09PSBpbmhlcml0ZWRBcHAubmFtZSkpIHtcbiAgICAgICAgZmlsdGVyZWRBcHBzLnB1c2goaW5oZXJpdGVkQXBwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGZpbHRlcmVkQXBwc1dpdGhIdW1hbml6ZWROYW1lcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZmlsdGVyZWRBcHBzLm1hcChhc3luYyBhcHAgPT4ge1xuICAgICAgICBjb25zdCBodW1hbml6ZWROYW1lID0gYXdhaXQgdGhpcy5odW1hbml6ZUFwcE5hbWVQaXBlXG4gICAgICAgICAgLnRyYW5zZm9ybShhcHAubmFtZSlcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSgyNTApLFxuICAgICAgICAgICAgdGFrZSgxKVxuICAgICAgICAgIClcbiAgICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgICAgIHJldHVybiB7IGFwcCwgaHVtYW5pemVkTmFtZSB9O1xuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IHNvcnRlZEFwcHNXaXRoSHVtYW5pemVkTmFtZXMgPSBzb3J0QnkoZmlsdGVyZWRBcHBzV2l0aEh1bWFuaXplZE5hbWVzLCBbJ2h1bWFuaXplZE5hbWUnXSk7XG4gICAgY29uc3Qgc29ydGVkQXBwcyA9IHNvcnRlZEFwcHNXaXRoSHVtYW5pemVkTmFtZXMubWFwKCh7IGFwcCB9KSA9PiBhcHApO1xuXG4gICAgcmV0dXJuIHNvcnRlZEFwcHM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZGVmYXVsdCBzdWJzY3JpcHRpb25zIGNvbmZpZ3VyYXRpb24gaW5oZXJpdGVkIGZyb20gcGFyZW50IHRlbmFudC5cbiAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgc3Vic2NyaXB0aW9ucyBvYmplY3Qgd2l0aCBzZXR0aW5ncyBmcm9tIHBhcmVudCB0ZW5hbnQuXG4gICAqL1xuICBhc3luYyBnZXREZWZhdWx0U3Vic2NyaXB0aW9uc0V2YWx1YXRlZEZyb21QYXJlbnRUZW5hbnQoKTogUHJvbWlzZTxEZWZhdWx0U3Vic2NyaXB0aW9ucz4ge1xuICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRTdWJzY3JpcHRpb25zKERlZmF1bHRTdWJzY3JpcHRpb25zQ29udGV4dFRlbmFudC5QQVJFTlRfVEVOQU5UKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBkZWZhdWx0IHN1YnNjcmlwdGlvbnMgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBjdXJyZW50IHRlbmFudC5cbiAgICogQHJldHVybnMgVGhlIGRlZmF1bHQgc3Vic2NyaXB0aW9ucyBvYmplY3Qgd2l0aCBzZXR0aW5ncyBmcm9tIHRoZSBjdXJyZW50IHRlbmFudC5cbiAgICovXG4gIGFzeW5jIGdldERlZmF1bHRTdWJzY3JpcHRpb25zRnJvbUN1cnJlbnRUZW5hbnQoKTogUHJvbWlzZTxEZWZhdWx0U3Vic2NyaXB0aW9ucz4ge1xuICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRTdWJzY3JpcHRpb25zKERlZmF1bHRTdWJzY3JpcHRpb25zQ29udGV4dFRlbmFudC5DVVJSRU5UX1RFTkFOVCk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgZ2l2ZW4gZGVmYXVsdCBzdWJzY3JpcHRpb25zIGNvbmZpZ3VyYXRpb24gdG8gdGhlIGN1cnJlbnQgdGVuYW50XG4gICAqIChlaXRoZXIgc2V0cywgdXBkYXRlcywgb3IgZGVsZXRlcyBjb3JyZXNwb25kaW5nIHRlbmFudCBvcHRpb25zKS5cbiAgICogQHBhcmFtIGRlZmF1bHRTdWJzY3JpcHRpb25zIFRoZSBkZWZhdWx0IHN1YnNjcmlwdGlvbnMgY29uZmlndXJhdGlvbiB0byBiZSBzYXZlZC5cbiAgICovXG4gIGFzeW5jIHNhdmVEZWZhdWx0U3Vic2NyaXB0aW9uc1RvQ3VycmVudFRlbmFudChkZWZhdWx0U3Vic2NyaXB0aW9uczogRGVmYXVsdFN1YnNjcmlwdGlvbnMpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVPbkNyZWF0aW9uU3Vic2NyaXB0aW9ucyhkZWZhdWx0U3Vic2NyaXB0aW9ucyk7XG4gICAgYXdhaXQgdGhpcy5zYXZlT25VcGdyYWRlU3Vic2NyaXB0aW9ucyhkZWZhdWx0U3Vic2NyaXB0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBkZWZhdWx0IHN1YnNjcmlwdGlvbnMgaW4gdGhlIGNvbnRleHQgb2YgY3VycmVudCBvciBwYXJlbnQgdGVuYW50LlxuICAgKiBAcGFyYW0gY29udGV4dFRlbmFudCBUZWxscyB3aGV0aGVyIHRvIHVzZSBjdXJyZW50IG9yIHBhcmVudCB0ZW5hbnQgYXMgY29udGV4dC5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0RGVmYXVsdFN1YnNjcmlwdGlvbnMoXG4gICAgY29udGV4dFRlbmFudDogRGVmYXVsdFN1YnNjcmlwdGlvbnNDb250ZXh0VGVuYW50XG4gICk6IFByb21pc2U8RGVmYXVsdFN1YnNjcmlwdGlvbnM+IHtcbiAgICBsZXQgdGVuYW50T3B0aW9uc1BhcmFtczogb2JqZWN0O1xuICAgIGxldCBvdmVycmlkYWJsZTogYm9vbGVhbjtcblxuICAgIHN3aXRjaCAoY29udGV4dFRlbmFudCkge1xuICAgICAgY2FzZSBEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbnRleHRUZW5hbnQuQ1VSUkVOVF9URU5BTlQ6XG4gICAgICAgIHRlbmFudE9wdGlvbnNQYXJhbXMgPSB7IGV2YWx1YXRlOiAnY3VycmVudCcgfTtcbiAgICAgICAgb3ZlcnJpZGFibGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbnRleHRUZW5hbnQuUEFSRU5UX1RFTkFOVDpcbiAgICAgICAgdGVuYW50T3B0aW9uc1BhcmFtcyA9IHsgZXZhbHVhdGU6ICdpbmhlcml0ZWQnIH07XG4gICAgICAgIG92ZXJyaWRhYmxlID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIG9uQ3JlYXRpb25BcHBzLFxuICAgICAgb25DcmVhdGlvbk1pY3Jvc2VydmljZXMsXG4gICAgICBvblVwZ3JhZGVBcHBzRW5hYmxlZCxcbiAgICAgIG9uVXBncmFkZUFwcHMsXG4gICAgICBvblVwZ3JhZGVNaWNyb3NlcnZpY2VzRW5hYmxlZCxcbiAgICAgIG9uVXBncmFkZU1pY3Jvc2VydmljZXNcbiAgICB9ID0gYXdhaXQgdGhpcy5nZXRUZW5hbnRPcHRpb25zKHRlbmFudE9wdGlvbnNQYXJhbXMpO1xuXG4gICAgY29uc3Qgb25DcmVhdGlvblN1YnNjcmlwdGlvbnMgPSB0aGlzLm5hbWVzVG9QYXJ0aWFsQXBwcyh7XG4gICAgICBhcHBzTmFtZXNTdHI6IG9uQ3JlYXRpb25BcHBzLFxuICAgICAgbWljcm9zZXJ2aWNlc05hbWVzU3RyOiBvbkNyZWF0aW9uTWljcm9zZXJ2aWNlc1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb25VcGdyYWRlQXBwc0RlZmF1bHQgPSBvdmVycmlkYWJsZSA/IG51bGwgOiBvbkNyZWF0aW9uQXBwcztcbiAgICBjb25zdCBvblVwZ3JhZGVNaWNyb3NlcnZpY2VzRGVmYXVsdCA9IG92ZXJyaWRhYmxlID8gbnVsbCA6IG9uQ3JlYXRpb25NaWNyb3NlcnZpY2VzO1xuICAgIGNvbnN0IG9uVXBncmFkZVN1YnNjcmlwdGlvbnMgPSB0aGlzLm5hbWVzVG9QYXJ0aWFsQXBwcyh7XG4gICAgICBhcHBzTmFtZXNTdHI6IG9uVXBncmFkZUFwcHNFbmFibGVkID8gb25VcGdyYWRlQXBwcyA6IG9uVXBncmFkZUFwcHNEZWZhdWx0LFxuICAgICAgbWljcm9zZXJ2aWNlc05hbWVzU3RyOiBvblVwZ3JhZGVNaWNyb3NlcnZpY2VzRW5hYmxlZFxuICAgICAgICA/IG9uVXBncmFkZU1pY3Jvc2VydmljZXNcbiAgICAgICAgOiBvblVwZ3JhZGVNaWNyb3NlcnZpY2VzRGVmYXVsdFxuICAgIH0pO1xuXG4gICAgY29uc3QgZGVmYXVsdFN1YnNjcmlwdGlvbnM6IERlZmF1bHRTdWJzY3JpcHRpb25zID0ge1xuICAgICAgb25DcmVhdGlvblN1YnNjcmlwdGlvbnMsXG4gICAgICBvblVwZ3JhZGVTdWJzY3JpcHRpb25zXG4gICAgfTtcblxuICAgIGlmIChvdmVycmlkYWJsZSkge1xuICAgICAgZGVmYXVsdFN1YnNjcmlwdGlvbnMub3ZlcnJpZGVPbkNyZWF0aW9uU3Vic2NyaXB0aW9ucyA9XG4gICAgICAgIG9uQ3JlYXRpb25BcHBzICE9PSBudWxsIHx8IG9uQ3JlYXRpb25NaWNyb3NlcnZpY2VzICE9PSBudWxsO1xuICAgICAgZGVmYXVsdFN1YnNjcmlwdGlvbnMub3ZlcnJpZGVPblVwZ3JhZGVTdWJzY3JpcHRpb25zID1cbiAgICAgICAgb25VcGdyYWRlQXBwc0VuYWJsZWQgfHwgb25VcGdyYWRlTWljcm9zZXJ2aWNlc0VuYWJsZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRTdWJzY3JpcHRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRUZW5hbnRPcHRpb25zKHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQ3JlYXRpb25BcHBzOiBhd2FpdCB0aGlzLmdldFRlbmFudE9wdGlvbihcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICAga2V5OiAnZGVmYXVsdC50ZW5hbnQuYXBwbGljYXRpb25zJ1xuICAgICAgICB9LFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJhbXNcbiAgICAgICksXG4gICAgICBvbkNyZWF0aW9uTWljcm9zZXJ2aWNlczogYXdhaXQgdGhpcy5nZXRUZW5hbnRPcHRpb24oXG4gICAgICAgIHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIGtleTogJ2RlZmF1bHQudGVuYW50Lm1pY3Jvc2VydmljZXMnXG4gICAgICAgIH0sXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmFtc1xuICAgICAgKSxcbiAgICAgIG9uVXBncmFkZUFwcHNFbmFibGVkOiBhd2FpdCB0aGlzLmdldFRlbmFudE9wdGlvbihcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICAga2V5OiAnb24tdXBkYXRlLnRlbmFudC5hcHBsaWNhdGlvbnMuZW5hYmxlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHBhcmFtc1xuICAgICAgKSxcbiAgICAgIG9uVXBncmFkZUFwcHM6IGF3YWl0IHRoaXMuZ2V0VGVuYW50T3B0aW9uKFxuICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50LmFwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyYW1zXG4gICAgICApLFxuICAgICAgb25VcGdyYWRlTWljcm9zZXJ2aWNlc0VuYWJsZWQ6IGF3YWl0IHRoaXMuZ2V0VGVuYW50T3B0aW9uKFxuICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50Lm1pY3Jvc2VydmljZXMuZW5hYmxlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHBhcmFtc1xuICAgICAgKSxcbiAgICAgIG9uVXBncmFkZU1pY3Jvc2VydmljZXM6IGF3YWl0IHRoaXMuZ2V0VGVuYW50T3B0aW9uKFxuICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50Lm1pY3Jvc2VydmljZXMnXG4gICAgICAgIH0sXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmFtc1xuICAgICAgKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNhdmVPbkNyZWF0aW9uU3Vic2NyaXB0aW9ucyhkZWZhdWx0U3Vic2NyaXB0aW9uczogRGVmYXVsdFN1YnNjcmlwdGlvbnMpIHtcbiAgICBpZiAoZGVmYXVsdFN1YnNjcmlwdGlvbnMub3ZlcnJpZGVPbkNyZWF0aW9uU3Vic2NyaXB0aW9ucykge1xuICAgICAgYXdhaXQgdGhpcy5zZXRUZW5hbnRPcHRpb24oe1xuICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBrZXk6ICdkZWZhdWx0LnRlbmFudC5hcHBsaWNhdGlvbnMnLFxuICAgICAgICB2YWx1ZTogdGhpcy5wYXJ0aWFsQXBwc0xpc3RUb0FwcHNOYW1lcyhkZWZhdWx0U3Vic2NyaXB0aW9ucy5vbkNyZWF0aW9uU3Vic2NyaXB0aW9ucylcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5zZXRUZW5hbnRPcHRpb24oe1xuICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBrZXk6ICdkZWZhdWx0LnRlbmFudC5taWNyb3NlcnZpY2VzJyxcbiAgICAgICAgdmFsdWU6IHRoaXMucGFydGlhbEFwcHNUb01pY3Jvc2VydmljZXNOYW1lcyhkZWZhdWx0U3Vic2NyaXB0aW9ucy5vbkNyZWF0aW9uU3Vic2NyaXB0aW9ucylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLnVuc2V0VGVuYW50T3B0aW9uKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAga2V5OiAnZGVmYXVsdC50ZW5hbnQuYXBwbGljYXRpb25zJ1xuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLnVuc2V0VGVuYW50T3B0aW9uKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAga2V5OiAnZGVmYXVsdC50ZW5hbnQubWljcm9zZXJ2aWNlcydcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2F2ZU9uVXBncmFkZVN1YnNjcmlwdGlvbnMoZGVmYXVsdFN1YnNjcmlwdGlvbnM6IERlZmF1bHRTdWJzY3JpcHRpb25zKSB7XG4gICAgaWYgKGRlZmF1bHRTdWJzY3JpcHRpb25zLm92ZXJyaWRlT25VcGdyYWRlU3Vic2NyaXB0aW9ucykge1xuICAgICAgYXdhaXQgdGhpcy5zZXRUZW5hbnRPcHRpb24oe1xuICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50LmFwcGxpY2F0aW9ucy5lbmFibGVkJyxcbiAgICAgICAgdmFsdWU6ICd0cnVlJ1xuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLnNldFRlbmFudE9wdGlvbih7XG4gICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgIGtleTogJ29uLXVwZGF0ZS50ZW5hbnQubWljcm9zZXJ2aWNlcy5lbmFibGVkJyxcbiAgICAgICAgdmFsdWU6ICd0cnVlJ1xuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLnNldFRlbmFudE9wdGlvbih7XG4gICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgIGtleTogJ29uLXVwZGF0ZS50ZW5hbnQuYXBwbGljYXRpb25zJyxcbiAgICAgICAgdmFsdWU6IHRoaXMucGFydGlhbEFwcHNMaXN0VG9BcHBzTmFtZXMoZGVmYXVsdFN1YnNjcmlwdGlvbnMub25VcGdyYWRlU3Vic2NyaXB0aW9ucylcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5zZXRUZW5hbnRPcHRpb24oe1xuICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50Lm1pY3Jvc2VydmljZXMnLFxuICAgICAgICB2YWx1ZTogdGhpcy5wYXJ0aWFsQXBwc1RvTWljcm9zZXJ2aWNlc05hbWVzKGRlZmF1bHRTdWJzY3JpcHRpb25zLm9uVXBncmFkZVN1YnNjcmlwdGlvbnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy51bnNldFRlbmFudE9wdGlvbih7XG4gICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgIGtleTogJ29uLXVwZGF0ZS50ZW5hbnQuYXBwbGljYXRpb25zLmVuYWJsZWQnXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMudW5zZXRUZW5hbnRPcHRpb24oe1xuICAgICAgICBjYXRlZ29yeTogJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBrZXk6ICdvbi11cGRhdGUudGVuYW50Lm1pY3Jvc2VydmljZXMuZW5hYmxlZCdcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy51bnNldFRlbmFudE9wdGlvbih7XG4gICAgICAgIGNhdGVnb3J5OiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgIGtleTogJ29uLXVwZGF0ZS50ZW5hbnQuYXBwbGljYXRpb25zJ1xuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLnVuc2V0VGVuYW50T3B0aW9uKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAga2V5OiAnb24tdXBkYXRlLnRlbmFudC5taWNyb3NlcnZpY2VzJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRUZW5hbnRPcHRpb24ob3B0aW9uOiBJU3lzdGVtT3B0aW9uLCBkZWZhdWx0VmFsdWUgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSAoYXdhaXQgdGhpcy50ZW5hbnRPcHRpb25zU2VydmljZS5kZXRhaWwob3B0aW9uLCBwYXJhbXMpKS5kYXRhLnZhbHVlO1xuICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdmFsdWUgPSAhaXNVbmRlZmluZWQodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2V0VGVuYW50T3B0aW9uKG9wdGlvbjogSVN5c3RlbU9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRlbmFudE9wdGlvbnNTZXJ2aWNlLnVwZGF0ZShvcHRpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1bnNldFRlbmFudE9wdGlvbihvcHRpb246IElTeXN0ZW1PcHRpb24pIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy50ZW5hbnRPcHRpb25zU2VydmljZS5kZWxldGUob3B0aW9uKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgaWYgKCFleCB8fCAhZXgucmVzIHx8IGV4LnJlcy5zdGF0dXMgIT09IDQwNCkge1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG5hbWVzVG9QYXJ0aWFsQXBwcyh7XG4gICAgYXBwc05hbWVzU3RyLFxuICAgIG1pY3Jvc2VydmljZXNOYW1lc1N0clxuICB9OiB7XG4gICAgYXBwc05hbWVzU3RyPzogc3RyaW5nO1xuICAgIG1pY3Jvc2VydmljZXNOYW1lc1N0cj86IHN0cmluZztcbiAgfSk6IFBhcnRpYWxBcHBzTGlzdCB7XG4gICAgaWYgKGFwcHNOYW1lc1N0ciA9PT0gbnVsbCAmJiBtaWNyb3NlcnZpY2VzTmFtZXNTdHIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAuLi4oYXBwc05hbWVzU3RyIHx8ICcnKVxuICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAuZmlsdGVyKG5hbWUgPT4gbmFtZS5sZW5ndGgpXG4gICAgICAgIC5tYXAobmFtZSA9PiAoeyBuYW1lOiBuYW1lLnRyaW0oKSB9KSksXG4gICAgICAuLi4obWljcm9zZXJ2aWNlc05hbWVzU3RyIHx8ICcnKVxuICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAuZmlsdGVyKG5hbWUgPT4gbmFtZS5sZW5ndGgpXG4gICAgICAgIC5tYXAobmFtZSA9PiAoe1xuICAgICAgICAgIG5hbWU6IG5hbWUudHJpbSgpLFxuICAgICAgICAgIHR5cGU6IEFwcGxpY2F0aW9uVHlwZS5NSUNST1NFUlZJQ0VcbiAgICAgICAgfSkpXG4gICAgXTtcbiAgfVxuXG4gIHByaXZhdGUgcGFydGlhbEFwcHNMaXN0VG9BcHBzTmFtZXMoYXBwczogUGFydGlhbEFwcHNMaXN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYXBwc1xuICAgICAgLmZpbHRlcihhcHAgPT4gYXBwLnR5cGUgIT09IEFwcGxpY2F0aW9uVHlwZS5NSUNST1NFUlZJQ0UpXG4gICAgICAubWFwKGFwcCA9PiBhcHAubmFtZSlcbiAgICAgIC5qb2luKCcsJyk7XG4gIH1cblxuICBwcml2YXRlIHBhcnRpYWxBcHBzVG9NaWNyb3NlcnZpY2VzTmFtZXMoYXBwczogUGFydGlhbEFwcHNMaXN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYXBwc1xuICAgICAgLmZpbHRlcihhcHAgPT4gYXBwLnR5cGUgPT09IEFwcGxpY2F0aW9uVHlwZS5NSUNST1NFUlZJQ0UpXG4gICAgICAubWFwKGFwcCA9PiBhcHAubmFtZSlcbiAgICAgIC5qb2luKCcsJyk7XG4gIH1cbn1cbiJdfQ==