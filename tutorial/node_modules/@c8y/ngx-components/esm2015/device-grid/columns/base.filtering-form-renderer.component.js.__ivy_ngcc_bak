import { Component, forwardRef, ViewChild, HostListener } from '@angular/core';
import { get, cloneDeep } from 'lodash-es';
import { FilteringFormRendererContext } from '@c8y/ngx-components';
import { SchemaFormComponent } from '../schema-form.component';
export class BaseFilteringFormRendererComponent {
    constructor(context) {
        this.context = context;
    }
    onEnterKeyDown(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        this.schema = cloneDeep(column.filteringConfig.schema);
        this.form = cloneDeep(column.filteringConfig.form);
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    }
    ngAfterViewInit() {
        setTimeout(() => {
            try {
                this.schemaFormComponent.elementRef.nativeElement.querySelector('input').focus();
            }
            catch (e) {
                // intended empty
            }
        }, 10);
    }
    canApply() {
        return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
}
BaseFilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            },] }
];
BaseFilteringFormRendererComponent.ctorParameters = () => [
    { type: FilteringFormRendererContext }
];
BaseFilteringFormRendererComponent.propDecorators = {
    schemaFormComponent: [{ type: ViewChild, args: [forwardRef(() => SchemaFormComponent), { static: false },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2UtZ3JpZC9jb2x1bW5zL2Jhc2UuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFVLFNBQVMsRUFBRSxZQUFZLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFNL0QsTUFBTSxPQUFPLGtDQUFrQztJQVE3QyxZQUFtQixPQUFxQztRQUFyQyxZQUFPLEdBQVAsT0FBTyxDQUE4QjtJQUFHLENBQUM7SUFFakIsY0FBYyxDQUFDLEtBQW9CO1FBQzVFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUMyQyxlQUFlLENBQUMsS0FBb0I7UUFDOUUsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFxQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLG1CQUFtQixJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxZQUFZLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3pFLENBQUM7SUFFRCxlQUFlO1FBQ2IsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2xGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsaUJBQWlCO2FBQ2xCO1FBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ3ZCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULDBsQkFBNEQ7YUFDN0Q7OztZQU5RLDRCQUE0Qjs7O2tDQVFsQyxTQUFTLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzZCQVNsRSxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDOzhCQUl4QyxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGZvcndhcmRSZWYsIE9uSW5pdCwgVmlld0NoaWxkLCBIb3N0TGlzdGVuZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldCwgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFNjaGVtYUZvcm1Db21wb25lbnQgfSBmcm9tICcuLi9zY2hlbWEtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4uL2RldmljZS1ncmlkLm1vZGVscyc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJy4vYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBTY2hlbWFGb3JtQ29tcG9uZW50KSwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIHNjaGVtYUZvcm1Db21wb25lbnQ6IGFueTtcbiAgc2NoZW1hO1xuICBmb3JtO1xuICBtb2RlbDtcbiAgb3B0aW9ucztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCkge31cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSkgb25FbnRlcktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmFwcGx5RmlsdGVyKCk7XG4gIH1cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lc2NhcGUnLCBbJyRldmVudCddKSBvbkVzY2FwZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnJlc2V0RmlsdGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBjb2x1bW46IERldmljZUdyaWRDb2x1bW4gPSB0aGlzLmNvbnRleHQucHJvcGVydHk7XG4gICAgdGhpcy5zY2hlbWEgPSBjbG9uZURlZXAoY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5zY2hlbWEpO1xuICAgIHRoaXMuZm9ybSA9IGNsb25lRGVlcChjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLmZvcm0pO1xuICAgIHRoaXMubW9kZWwgPSBjbG9uZURlZXAoY29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgfHwge30pO1xuICAgIHRoaXMub3B0aW9ucyA9IHsgZm9ybURlZmF1bHRzOiB7IG5nTW9kZWxPcHRpb25zOiB7IGRlYm91bmNlOiAxMDAgfSB9IH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnNjaGVtYUZvcm1Db21wb25lbnQuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuZm9jdXMoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaW50ZW5kZWQgZW1wdHlcbiAgICAgIH1cbiAgICB9LCAxMCk7XG4gIH1cblxuICBjYW5BcHBseSgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMuc2NoZW1hRm9ybUNvbXBvbmVudCwgJyRjb21wb25lbnRTY29wZS52bS5uZ0Zvcm0uJGludmFsaWQnKTtcbiAgfVxuXG4gIGFwcGx5RmlsdGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5hcHBseUZpbHRlcih7XG4gICAgICBleHRlcm5hbEZpbHRlclF1ZXJ5OiB0aGlzLm1vZGVsXG4gICAgfSk7XG4gIH1cblxuICByZXNldEZpbHRlcigpIHtcbiAgICB0aGlzLmNvbnRleHQucmVzZXRGaWx0ZXIoKTtcbiAgfVxufVxuIl19