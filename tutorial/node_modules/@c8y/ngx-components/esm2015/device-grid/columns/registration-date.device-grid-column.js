import { BaseDeviceGridColumn } from './base.device-grid-column';
import { RegistrationDateCellRendererComponent } from './registration-date.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
export class RegistrationDateDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.path = 'creationTime';
        this.name = 'registrationDate';
        this.header = gettext('Registration date');
        this.cellRendererComponent = RegistrationDateCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    registrationDate: {
                        type: 'object',
                        properties: {
                            after: {
                                type: 'string',
                                format: 'datetime'
                            },
                            before: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            form: [
                {
                    key: 'registrationDate.after',
                    title: gettext('Show devices registered after'),
                    maxDateKey: 'registrationDate.before'
                },
                {
                    key: 'registrationDate.before',
                    title: gettext('And before`date`'),
                    minDateKey: 'registrationDate.after'
                }
            ],
            getFilter(model) {
                const filter = {};
                const dates = model && model.registrationDate;
                if (dates && (dates.after || dates.before)) {
                    filter.__and = [];
                    if (dates.after) {
                        const after = self.formatDate(dates.after);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __gt: after },
                                [`${self.path}.date`]: { __gt: after }
                            }
                        });
                    }
                    if (dates.before) {
                        const before = self.formatDate(dates.before);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __lt: before },
                                [`${self.path}.date`]: { __lt: before }
                            }
                        });
                    }
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]
        };
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cmF0aW9uLWRhdGUuZGV2aWNlLWdyaWQtY29sdW1uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2aWNlLWdyaWQvY29sdW1ucy9yZWdpc3RyYXRpb24tZGF0ZS5kZXZpY2UtZ3JpZC1jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDcEcsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RCxNQUFNLE9BQU8sZ0NBQWlDLFNBQVEsb0JBQW9CO0lBQ3hFLFlBQVksbUJBQWtDO1FBQzVDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTNCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUVsQixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHFDQUFxQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxRQUFRO2dCQUNkLFVBQVUsRUFBRTtvQkFDVixnQkFBZ0IsRUFBRTt3QkFDaEIsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsVUFBVSxFQUFFOzRCQUNWLEtBQUssRUFBRTtnQ0FDTCxJQUFJLEVBQUUsUUFBUTtnQ0FDZCxNQUFNLEVBQUUsVUFBVTs2QkFDbkI7NEJBQ0QsTUFBTSxFQUFFO2dDQUNOLElBQUksRUFBRSxRQUFRO2dDQUNkLE1BQU0sRUFBRSxVQUFVOzZCQUNuQjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKO29CQUNFLEdBQUcsRUFBRSx3QkFBd0I7b0JBQzdCLEtBQUssRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7b0JBQy9DLFVBQVUsRUFBRSx5QkFBeUI7aUJBQ3RDO2dCQUNEO29CQUNFLEdBQUcsRUFBRSx5QkFBeUI7b0JBQzlCLEtBQUssRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUM7b0JBQ2xDLFVBQVUsRUFBRSx3QkFBd0I7aUJBQ3JDO2FBQ0Y7WUFDRCxTQUFTLENBQUMsS0FBSztnQkFDYixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzlDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO29CQUNsQixJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7d0JBQ2YsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzNDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzRCQUNoQixJQUFJLEVBQUU7Z0NBQ0osQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO2dDQUM1QixDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFOzZCQUN2Qzt5QkFDRixDQUFDLENBQUM7cUJBQ0o7b0JBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO3dCQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLElBQUksRUFBRTtnQ0FDSixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7Z0NBQzdCLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7NkJBQ3hDO3lCQUNGLENBQUMsQ0FBQztxQkFDSjtpQkFDRjtnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN6RSxDQUFDO0lBQ0osQ0FBQztJQUVTLFVBQVUsQ0FBQyxZQUFvQjtRQUN2QyxPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9iYXNlLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9yZWdpc3RyYXRpb24tZGF0ZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBDb2x1bW5Db25maWcgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuZXhwb3J0IGNsYXNzIFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uIGV4dGVuZHMgQmFzZURldmljZUdyaWRDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMucGF0aCA9ICdjcmVhdGlvblRpbWUnO1xuICAgIHRoaXMubmFtZSA9ICdyZWdpc3RyYXRpb25EYXRlJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1JlZ2lzdHJhdGlvbiBkYXRlJyk7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHJlZ2lzdHJhdGlvbkRhdGU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBhZnRlcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGV0aW1lJ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBiZWZvcmU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICdkYXRldGltZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZvcm06IFtcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3JlZ2lzdHJhdGlvbkRhdGUuYWZ0ZXInLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdTaG93IGRldmljZXMgcmVnaXN0ZXJlZCBhZnRlcicpLFxuICAgICAgICAgIG1heERhdGVLZXk6ICdyZWdpc3RyYXRpb25EYXRlLmJlZm9yZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3JlZ2lzdHJhdGlvbkRhdGUuYmVmb3JlJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnQW5kIGJlZm9yZWBkYXRlYCcpLFxuICAgICAgICAgIG1pbkRhdGVLZXk6ICdyZWdpc3RyYXRpb25EYXRlLmFmdGVyJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyKG1vZGVsKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0ge307XG4gICAgICAgIGNvbnN0IGRhdGVzID0gbW9kZWwgJiYgbW9kZWwucmVnaXN0cmF0aW9uRGF0ZTtcbiAgICAgICAgaWYgKGRhdGVzICYmIChkYXRlcy5hZnRlciB8fCBkYXRlcy5iZWZvcmUpKSB7XG4gICAgICAgICAgZmlsdGVyLl9fYW5kID0gW107XG4gICAgICAgICAgaWYgKGRhdGVzLmFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IHNlbGYuZm9ybWF0RGF0ZShkYXRlcy5hZnRlcik7XG4gICAgICAgICAgICBmaWx0ZXIuX19hbmQucHVzaCh7XG4gICAgICAgICAgICAgIF9fb3I6IHtcbiAgICAgICAgICAgICAgICBbc2VsZi5wYXRoXTogeyBfX2d0OiBhZnRlciB9LFxuICAgICAgICAgICAgICAgIFtgJHtzZWxmLnBhdGh9LmRhdGVgXTogeyBfX2d0OiBhZnRlciB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGF0ZXMuYmVmb3JlKSB7XG4gICAgICAgICAgICBjb25zdCBiZWZvcmUgPSBzZWxmLmZvcm1hdERhdGUoZGF0ZXMuYmVmb3JlKTtcbiAgICAgICAgICAgIGZpbHRlci5fX2FuZC5wdXNoKHtcbiAgICAgICAgICAgICAgX19vcjoge1xuICAgICAgICAgICAgICAgIFtzZWxmLnBhdGhdOiB7IF9fbHQ6IGJlZm9yZSB9LFxuICAgICAgICAgICAgICAgIFtgJHtzZWxmLnBhdGh9LmRhdGVgXTogeyBfX2x0OiBiZWZvcmUgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiBgJHt0aGlzLnBhdGh9LmRhdGVgIH0sIHsgcGF0aDogdGhpcy5wYXRoIH1dXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBmb3JtYXREYXRlKGRhdGVUb0Zvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVRvRm9ybWF0KS50b0lTT1N0cmluZygpO1xuICB9XG59XG4iXX0=