import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataGridComponent, FilteringActionType, gettext } from '@c8y/ngx-components';
import { DeviceGridService } from './device-grid.service';
export class DeviceGridComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        /** The title for the data grid, it's displayed in the grid's header. */
        this.title = gettext('Devices');
        /** The label for load more button. */
        this.loadMoreItemsLabel = gettext('Load more devices');
        /** The label for loading indicator. */
        this.loadingItemsLabel = gettext('Loading devicesâ€¦');
        /** Determines whether items can be selected by clicking a checkbox in the first column. */
        this.selectable = false;
        /** Sets the base query which is appended to the request for data. */
        this.baseQuery = {};
        this.childDeviceGrid = false;
        /** Sets the withChildren query which is appended to the request. */
        this.withChildren = false;
        /** Emits an event when columns configuration changes. */
        this.onColumnsChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        /** Emits an event when items selection changes. The array contains ids of selected items. */
        this.itemsSelect = new EventEmitter();
        this.actionControls = [];
        this.columns = this.deviceGridService.getDefaultColumns();
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    /** The list of columns to be displayed in the grid. If not given, it defaults to standard columns. */
    set _columns(value) {
        if (value) {
            this.columns = this.deviceGridService.getUserConfiguredColumns(value);
        }
        else {
            this.columns = this.deviceGridService.getUserConfiguredColumns(this.deviceGridService.getDefaultColumns());
        }
    }
    /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.deviceGridService.getDefaultPagination();
        }
    }
    /** Sets load more mode. */
    set _infiniteScroll(infiniteScroll) {
        this.infiniteScroll = infiniteScroll;
        this.pagination = this.deviceGridService.getInfiniteScrollPagination();
    }
    /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.deviceGridService.getDefaultActionControls();
        }
    }
    /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        }
    }
    /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */
    set _headerActionControls(value) {
        if (value) {
            this.headerActionControls = value;
        }
        else {
            this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        }
    }
    ngOnInit() {
        this.setActionControls();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            let filteredSize;
            let size;
            if (this.childDeviceGrid) {
                const { res, data, paging } = yield this.deviceGridService.getChildDeviceData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren, this.parentDeviceId);
                filteredSize = yield this.deviceGridService.getCountChildDevices(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.parentDeviceId);
                size = yield this.deviceGridService.getTotalChildDevices(this.baseQuery, this.parentDeviceId);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            else {
                const { res, data, paging } = yield this.deviceGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren);
                filteredSize = yield this.deviceGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery);
                size = yield this.deviceGridService.getTotal(this.baseQuery);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            this.onColumnsChange.emit(dataSourceModifier.columns);
            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery));
            if (this.dataCallback) {
                serverSideDataResult = this.dataCallback(serverSideDataResult);
            }
            return serverSideDataResult;
        });
    }
    setActionControls() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.childDeviceGrid) {
                const deleteAction = {
                    type: "DELETE" /* Delete */,
                    callback: (device) => this.onDeleteDevice(device)
                };
                this.actionControls.push(deleteAction);
            }
            else {
                this.actionControls = this.deviceGridService.getDefaultActionControls();
            }
        });
    }
    onDeleteDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deviceGridService.delete(device);
            this.refresh.emit();
        });
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    }
    configChange(config) {
        this.deviceGridService.saveConfig(config);
    }
}
DeviceGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  (onConfigChange)=\"configChange($event)\"\n  [refresh]=\"refresh\"\n  [headerActionControls]=\"headerActionControls\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
            },] }
];
DeviceGridComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
DeviceGridComponent.propDecorators = {
    dataCallback: [{ type: Input }],
    refresh: [{ type: Input }],
    title: [{ type: Input }],
    loadMoreItemsLabel: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _infiniteScroll: [{ type: Input, args: ['infiniteScroll',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    baseQuery: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    _headerActionControls: [{ type: Input, args: ['headerActionControls',] }],
    childDeviceGrid: [{ type: Input }],
    parentDeviceId: [{ type: Input }],
    withChildren: [{ type: Input }],
    onColumnsChange: [{ type: Output }],
    onDeviceQueryStringChange: [{ type: Output }],
    itemsSelect: [{ type: Output }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,