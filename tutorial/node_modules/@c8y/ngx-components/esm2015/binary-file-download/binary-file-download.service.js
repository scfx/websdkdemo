import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { InventoryBinaryService, InventoryService } from '@c8y/client';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { isUndefined } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@ngx-translate/core';
export class BinaryFileDownloadService {
    constructor(router, route, inventoryService, alertService, modalService, translate, inventoryBinary) {
        this.router = router;
        this.route = route;
        this.inventoryService = inventoryService;
        this.alertService = alertService;
        this.modalService = modalService;
        this.translate = translate;
        this.inventoryBinary = inventoryBinary;
    }
    run() {
        this.router.events
            .pipe(filter(event => {
            return event instanceof NavigationEnd && this.route.snapshot.queryParams.download;
        }), map(() => this.route.snapshot.queryParams.download))
            .subscribe((downloadId) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.inventoryService.detail(downloadId);
                if (!isUndefined(data.c8y_IsBinary)) {
                    this.showDownloadModal(data);
                }
                else {
                    const alertMessage = this.translate.instant(gettext('Could not download the file: object with ID "{{ id }}" is not a valid binary.'), { id: data.id });
                    this.alertService.danger(alertMessage);
                }
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        }));
    }
    showDownloadModal(binaryMo) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const modalBody = this.translate.instant(gettext('You are about to download file "{{ fileName }}". Do you want to proceed?'), { fileName: binaryMo.name });
                yield this.modalService.confirm(gettext('File download'), modalBody, Status.INFO, {
                    ok: gettext('Download')
                });
                const arrayBuffer = yield this.getArrayBuffer(binaryMo.id);
                const fileBinary = new File([arrayBuffer], binaryMo.name, { type: binaryMo.contentType });
                saveAs(fileBinary);
            }
            catch (e) {
                // empty body :(
                console.log({ e });
            }
        });
    }
    getArrayBuffer(binaryId) {
        return __awaiter(this, void 0, void 0, function* () {
            let arrayBuffer;
            try {
                const res = yield this.inventoryBinary.download(binaryId);
                arrayBuffer = yield res.arrayBuffer();
            }
            catch (ex) {
                const msg = gettext('Could not get the binary.');
                this.alertService.danger(msg);
            }
            return arrayBuffer;
        });
    }
}
BinaryFileDownloadService.ɵfac = function BinaryFileDownloadService_Factory(t) { return new (t || BinaryFileDownloadService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc3.AlertService), ɵngcc0.ɵɵinject(ɵngcc3.ModalService), ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryBinaryService)); };
BinaryFileDownloadService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BinaryFileDownloadService, factory: BinaryFileDownloadService.ɵfac });
BinaryFileDownloadService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: InventoryService },
    { type: AlertService },
    { type: ModalService },
    { type: TranslateService },
    { type: InventoryBinaryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BinaryFileDownloadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc1.ActivatedRoute }, { type: ɵngcc2.InventoryService }, { type: ɵngcc3.AlertService }, { type: ɵngcc3.ModalService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc2.InventoryBinaryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LWZpbGUtZG93bmxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYmluYXJ5LWZpbGUtZG93bmxvYWQvYmluYXJ5LWZpbGUtZG93bmxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBa0Isc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkYsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7O0FBR3ZELE1BQU0sT0FBTyx5QkFBeUI7QUFDdEMsSUFBRSxZQUNVLE1BQWMsRUFDZCxLQUFxQixFQUNyQixnQkFBa0MsRUFDbEMsWUFBMEIsRUFDMUIsWUFBMEIsRUFDMUIsU0FBMkIsRUFDM0IsZUFBdUM7QUFDaEQsUUFQUyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDZixVQUFLLEdBQUwsS0FBSyxDQUFnQjtBQUFDLFFBQ3RCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBQzNCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7QUFBQyxRQUM1QixvQkFBZSxH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LFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRSxnQkFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUMsYUFBSztBQUFDLFlBQUEsT0FBTyxFQUFFLEVBQUU7QUFDakIsZ0JBQU0sTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDdkQsZ0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsYUFBSztBQUNMLFlBQ0ksT0FBTyxXQUFXLENBQUM7QUFDdkIsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIO3FEQXRFQyxVQUFVO3lKQUNUO0FBQUM7QUFDVSxZQVZKLE1BQU07QUFBSSxZQUFhLGNBQWM7QUFBSSxZQUVELGdCQUFnQjtBQUFJLFlBQzVELFlBQVk7QUFBSSxZQUFPLFlBQVk7QUFBSSxZQUd2QyxnQkFBZ0I7QUFBSSxZQUpKLHNCQUFzQjtBQUFHOzs7cVJBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkVuZCwgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5QmluYXJ5U2VydmljZSwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCwgTW9kYWxTZXJ2aWNlLCBTdGF0dXMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmluYXJ5RmlsZURvd25sb2FkU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IE1vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeUJpbmFyeTogSW52ZW50b3J5QmluYXJ5U2VydmljZVxuICApIHt9XG5cbiAgcnVuKCkge1xuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihldmVudCA9PiB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCAmJiB0aGlzLnJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zLmRvd25sb2FkO1xuICAgICAgICB9KSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMucm91dGUuc25hcHNob3QucXVlcnlQYXJhbXMuZG93bmxvYWQpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKGFzeW5jIGRvd25sb2FkSWQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChkb3dubG9hZElkKTtcbiAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGRhdGEuYzh5X0lzQmluYXJ5KSkge1xuICAgICAgICAgICAgdGhpcy5zaG93RG93bmxvYWRNb2RhbChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYWxlcnRNZXNzYWdlID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudChcbiAgICAgICAgICAgICAgZ2V0dGV4dChcbiAgICAgICAgICAgICAgICAnQ291bGQgbm90IGRvd25sb2FkIHRoZSBmaWxlOiBvYmplY3Qgd2l0aCBJRCBcInt7IGlkIH19XCIgaXMgbm90IGEgdmFsaWQgYmluYXJ5LidcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgeyBpZDogZGF0YS5pZCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZGFuZ2VyKGFsZXJ0TWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNob3dEb3dubG9hZE1vZGFsKGJpbmFyeU1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb2RhbEJvZHkgPSB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KFxuICAgICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIGRvd25sb2FkIGZpbGUgXCJ7eyBmaWxlTmFtZSB9fVwiLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpLFxuICAgICAgICB7IGZpbGVOYW1lOiBiaW5hcnlNby5uYW1lIH1cbiAgICAgICk7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsU2VydmljZS5jb25maXJtKGdldHRleHQoJ0ZpbGUgZG93bmxvYWQnKSwgbW9kYWxCb2R5LCBTdGF0dXMuSU5GTywge1xuICAgICAgICBvazogZ2V0dGV4dCgnRG93bmxvYWQnKVxuICAgICAgfSk7XG4gICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMuZ2V0QXJyYXlCdWZmZXIoYmluYXJ5TW8uaWQpO1xuICAgICAgY29uc3QgZmlsZUJpbmFyeSA9IG5ldyBGaWxlKFthcnJheUJ1ZmZlcl0sIGJpbmFyeU1vLm5hbWUsIHsgdHlwZTogYmluYXJ5TW8uY29udGVudFR5cGUgfSk7XG4gICAgICBzYXZlQXMoZmlsZUJpbmFyeSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZW1wdHkgYm9keSA6KFxuICAgICAgY29uc29sZS5sb2coeyBlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0QXJyYXlCdWZmZXIoYmluYXJ5SWQpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgbGV0IGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlcjtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlCaW5hcnkuZG93bmxvYWQoYmluYXJ5SWQpO1xuICAgICAgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXMuYXJyYXlCdWZmZXIoKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc3QgbXNnID0gZ2V0dGV4dCgnQ291bGQgbm90IGdldCB0aGUgYmluYXJ5LicpO1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZGFuZ2VyKG1zZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5QnVmZmVyO1xuICB9XG59XG4iXX0=