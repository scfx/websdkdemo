import { Injectable } from '@angular/core';
import { ApplicationService, GrantType, SystemOptionsService, TenantLoginOptionsService, TenantLoginOptionType, TenantOptionsService, UserManagementSource } from '@c8y/client';
import { catchError, map } from 'rxjs/operators';
import { forkJoin, from, of } from 'rxjs';
import { defaults, omit } from 'lodash-es';
import { TenantUiService } from '@c8y/ngx-components';
export class AuthConfigurationService {
    constructor(tenantLoginOptionsService, tenantOptionsService, systemOptionsService, applicationService, tenantUiService) {
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantOptionsService = tenantOptionsService;
        this.systemOptionsService = systemOptionsService;
        this.applicationService = applicationService;
        this.tenantUiService = tenantUiService;
        this.systemOptionsWithDefaultValue = [
            { category: 'password', key: 'limit.validity', value: null },
            { category: 'password', key: 'enforce.strength', value: 'false' },
            { category: 'two-factor-authentication', key: 'tenant-scope-settings.enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
            { category: 'two-factor-authentication', key: 'enforced.group', value: '' }
        ];
        this.tenantOptionsWithDefaultValue = [
            { category: 'password', key: 'limit.validity', value: '0' },
            { category: 'password', key: 'strength.validity', value: 'false' },
            { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'token.validity', value: '43200' },
            { category: 'two-factor-authentication', key: 'pin.validity', value: '30' },
            { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
            { category: 'two-factor-authentication', key: 'strategy', value: 'SMS' },
            { category: 'oauth.internal', key: 'basic-token.lifespan.seconds', value: null }
        ];
    }
    getAuthConfiguration$() {
        const loginOptions$ = this.getLoginOptions$();
        return forkJoin({
            loginOptions: loginOptions$,
            tenantOptions: this.getTenantOptions$(),
            systemOptions: this.getSystemOptions$(),
            smsGatewayAvailable: this.isSmsApplicationAvailable$(),
            preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)
        });
    }
    save(newAuthConfiguration, previousAuthConfiguration) {
        const tenantOptions = this.prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration);
        const updateTenantOptions = tenantOptions.map(tenantOption => this.tenantOptionsService.create(tenantOption));
        const basicLoginOption = this.prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration);
        const oauthInternalLoginOption = this.prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration);
        return Promise.all([
            this.saveOrUpdateLoginOption(basicLoginOption),
            this.saveOrUpdateLoginOption(oauthInternalLoginOption),
            updateTenantOptions
        ]);
    }
    saveOrUpdateLoginOption(loginOption) {
        return loginOption.id
            ? this.tenantLoginOptionsService.update(loginOption)
            : this.tenantLoginOptionsService.create(loginOption);
    }
    prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let basicLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption.authenticationRestrictions =
            this.authenticationRestriction(newAuthConfiguration);
        basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption = this.removeReadOnlyFields(basicLoginOption);
        return basicLoginOption;
    }
    prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let oauthInternalLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        const sessionConfiguration = this.sessionConfiguration(newAuthConfiguration);
        sessionConfiguration !== null
            ? (oauthInternalLoginOption.sessionConfiguration = sessionConfiguration)
            : delete oauthInternalLoginOption.sessionConfiguration;
        oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        oauthInternalLoginOption = this.removeReadOnlyFields(oauthInternalLoginOption);
        return oauthInternalLoginOption;
    }
    originalLoginOptionWithDefaults(previousAuthConfiguration, loginOptionType) {
        return defaults({}, previousAuthConfiguration.loginOptions.find(loginOption => loginOption.type === loginOptionType), this.getDefaultLoginOption(loginOptionType));
    }
    sessionConfiguration(authConfiguration) {
        return authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
            .sessionConfiguration;
    }
    authenticationRestriction(authConfiguration) {
        const authenticationRestrictions = authConfiguration.loginOptions.find(this.tenantUiService.isBasic).authenticationRestrictions;
        return {
            trustedUserAgents: authenticationRestrictions.trustedUserAgents.filter(value => value),
            forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents.filter(value => value),
            forbiddenClients: authenticationRestrictions.forbiddenClients.filter(value => value)
        };
    }
    visibleOnLoginPage(authConfiguration, loginOptionType) {
        return authConfiguration.preferredLoginOptionType === loginOptionType;
    }
    removeReadOnlyFields(tenantLoginOption) {
        return omit(tenantLoginOption, [
            'self',
            'strengthValidity',
            'tfaStrategy',
            'greenMinLength',
            'enforceStrength',
            'strengthValidity',
            '_type'
        ]);
    }
    prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration) {
        const getValue = (authCfg, tenantOption) => authCfg.tenantOptions[tenantOption.category][tenantOption.key];
        const hasChanged = tenantOption => getValue(newAuthConfiguration, tenantOption) !==
            getValue(previousAuthConfiguration, tenantOption);
        return this.tenantOptionsWithDefaultValue
            .filter(tenantOption => getValue(newAuthConfiguration, tenantOption) !== null)
            .filter(tenantOption => hasChanged(tenantOption))
            .map(tenantOption => ({
            category: tenantOption.category,
            key: tenantOption.key,
            value: getValue(newAuthConfiguration, tenantOption).toString()
        }));
    }
    getLoginOptions$() {
        return from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(map(res => res.data), map(loginOptions => this.addDefaultLoginOptions(loginOptions)));
    }
    getPreferredLoginOptionType$(loginOptions$) {
        return loginOptions$.pipe(map(loginOptions => {
            return this.tenantUiService.getPreferredLoginOption(loginOptions).type;
        }));
    }
    addDefaultLoginOptions(loginOptions) {
        if (!loginOptions.find(this.tenantUiService.isBasic)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.BASIC));
        }
        if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.OAUTH2_INTERNAL));
        }
        return loginOptions;
    }
    getTenantOptions$() {
        return forkJoin(this.tenantOptionsWithDefaultValue.map((option) => from(this.tenantOptionsService.detail(option)).pipe(map(res => res.data), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    getSystemOptions$() {
        return forkJoin(this.systemOptionsWithDefaultValue.map((option) => from(this.systemOptionsService.detail(option)).pipe(map(res => res.data), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    isSmsApplicationAvailable$() {
        return from(this.applicationService.isAvailable('sms-gateway')).pipe(map(res => res.data));
    }
    getOptionsObject(options) {
        return options.reduce((optionsObject, option) => {
            optionsObject[option.category] = optionsObject[option.category] || {};
            optionsObject[option.category][option.key] = this.getValue(option);
            return optionsObject;
        }, {});
    }
    getValue(option) {
        try {
            return JSON.parse(option.value);
        }
        catch (e) {
            return option.value;
        }
    }
    getDefaultLoginOption(tenantLoginOptionType) {
        return {
            userManagementSource: UserManagementSource.INTERNAL,
            grantType: GrantType.PASSWORD,
            providerName: 'Cumulocity',
            visibleOnLoginPage: false,
            type: tenantLoginOptionType
        };
    }
}
AuthConfigurationService.decorators = [
    { type: Injectable }
];
AuthConfigurationService.ctorParameters = () => [
    { type: TenantLoginOptionsService },
    { type: TenantOptionsService },
    { type: SystemOptionsService },
    { type: ApplicationService },
    { type: TenantUiService }
];
//# sourceMappingURL=data:application/json;base64,