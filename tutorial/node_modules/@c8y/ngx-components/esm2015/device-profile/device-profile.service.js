import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService, OperationService, OperationStatus, QueriesUtil } from '@c8y/client';
import { AlertService } from '@c8y/ngx-components';
import { sortBy, toArray, get } from 'lodash-es';
import { gettext } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class DeviceProfileService {
    constructor(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.NOT_INSTALLED_WARNING = gettext('Not installed on the device');
        this.VERSION_MISSMATCH_WARNING = gettext('Version mismatch');
        this.SAME_URL_WARNING = gettext('Installed configuration has the same URL but different name or type than the one in the profile');
        this.queriesUtil = new QueriesUtil();
    }
    createDeviceProfile(deviceProfile) {
        if (get(deviceProfile, 'c8y_Filter.type') === '') {
            delete deviceProfile.c8y_Filter.type;
        }
        return this.inventoryService.create(deviceProfile);
    }
    getDeviceProfilesByDeviceType(deviceType) {
        const deviceTypeFilter = {
            __or: [
                { 'c8y_Filter.type': deviceType },
                { 'c8y_Filter.type': '' },
                { __not: { __has: 'c8y_Filter.type' } }
            ]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    }
    getDeviceProfiles(andQuery) {
        let query = {
            type: 'c8y_Profile'
        };
        const filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    }
    getProfileOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: 'c8y_DeviceProfile',
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 1
            };
            const operation = (yield this.operationService.list(filter)).data[0];
            return operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;
        });
    }
    createProfileOperation(device, deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationCfg = {
                deviceId: device.id,
                profileId: deviceProfile.id,
                profileName: deviceProfile.name,
                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                description: `Assign device profile ${deviceProfile.name} to device ${device.name}`
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getFirmwareItems(device, selectedProfile) {
        const deviceFirmware = device.c8y_Firmware;
        const profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        const deviceItems = [];
        const profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
    }
    getSoftwareItems(device, selectedProfile) {
        const deviceSoftware = device.c8y_SoftwareList;
        const profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
    }
    getConfigurationItems(device, selectedProfile) {
        const deviceConfiguration = [];
        Object.keys(device).forEach(key => {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        const profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
    }
    getAlert(itemType) {
        const notInstalled = (comparisionResult) => {
            return !comparisionResult.device ? this.NOT_INSTALLED_WARNING : '';
        };
        switch (itemType) {
            case 'firmware':
            case 'software':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails
                        ? this.VERSION_MISSMATCH_WARNING
                        : notInstalled(comparisionResult);
                };
            case 'configuration':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        (comparisionResult.device.itemName !== comparisionResult.profile.itemName ||
                            comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)
                        ? this.SAME_URL_WARNING
                        : notInstalled(comparisionResult);
                };
            default:
                return notInstalled;
        }
    }
    createProfileComparison(deviceItems = [], profileItems = [], mergeByProperty, propertyNameWithDetails, getAlert) {
        const comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
        const extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
        return sortBy(toArray(extendedComparisonObj), 'name');
    }
    createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails) {
        return deviceItems.reduce((comapritionItem, deviceItem) => Object.assign(comapritionItem, {
            [deviceItem[mergeByProperty]]: {
                device: {
                    itemName: deviceItem.name,
                    itemDetails: deviceItem[propertyNameWithDetails],
                    itemUrl: deviceItem.url
                },
                profile: undefined
            }
        }), {});
    }
    extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
        profileItems.forEach(profileItem => {
            const comparisionResult = {
                profile: {
                    itemName: profileItem.name,
                    itemDetails: profileItem[propertyNameWithDetails],
                    itemUrl: profileItem.url
                },
                device: comparisonObj[profileItem[mergeByProperty]]
                    ? comparisonObj[profileItem[mergeByProperty]].device
                    : undefined
            };
            comparisionResult.comparisonAlert = getAlert(comparisionResult);
            comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
        });
        return comparisonObj;
    }
}
DeviceProfileService.ɵfac = function DeviceProfileService_Factory(t) { return new (t || DeviceProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
DeviceProfileService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileService, factory: DeviceProfileService.ɵfac });
DeviceProfileService.ctorParameters = () => [
    { type: InventoryService },
    { type: OperationService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.OperationService }, { type: ɵngcc2.AlertService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,