import { Component, EventEmitter } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { QueriesUtil } from '@c8y/client';
import { Subject } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';
export class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
}
SelectConfigurationModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-select-configuration-modal',
                template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
            },] }
];
SelectConfigurationModalComponent.ctorParameters = () => [
    { type: RepositoryService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLXByb2ZpbGUvc2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxPQUFPLEVBQXVELE1BQU0scUJBQXFCLENBQUM7QUFDbkcsT0FBTyxFQUFrQixXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU1uRixNQUFNLE9BQU8saUNBQWlDO0lBYzVDLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBYnhELFVBQUssR0FBVyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNoRCxTQUFJLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDcEMsbUJBQWMsR0FBc0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2hELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDaEMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN4QyxDQUFDO1FBQ0Ysa0JBQWEsR0FBd0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU3RCxvQkFBZSxHQUFRLEVBQUUsQ0FBQztRQUMxQixnQkFBVyxHQUFRLEVBQUUs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RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgSVNlbGVjdE1vZGFsT2JqZWN0LCBJU2VsZWN0TW9kYWxPcHRpb24sIE1vZGFsTGFiZWxzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgUXVlcmllc1V0aWwgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlLCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zZWxlY3QtY29uZmlndXJhdGlvbi1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWxlY3QtY29uZmlndXJhdGlvbi1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0Q29uZmlndXJhdGlvbk1vZGFsQ29tcG9uZW50IHtcbiAgdGl0bGU6IHN0cmluZyA9IGdldHRleHQoJ1NlbGVjdCBjb25maWd1cmF0aW9uJyk7XG4gIGxvYWQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuICBjb25maWd1cmF0aW9uczogT2JzZXJ2YWJsZTxhbnlbXT4gPSB0aGlzLmxvYWQucGlwZShcbiAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRJdGVtcygpKSxcbiAgICBtYXAoKHsgZGF0YSB9KSA9PiB0aGlzLmFnZ3JlZ2F0ZShkYXRhKSlcbiAgKTtcbiAgcmVzdWx0RW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueVtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBzZWxlY3RlZDogYW55W107XG4gIGRldmljZVR5cGVRdWVyeTogYW55ID0ge307XG4gIHNlYXJjaFF1ZXJ5OiBhbnkgPSB7fTtcbiAgbGFiZWxzOiBNb2RhbExhYmVscyA9IHsgb2s6IGdldHRleHQoJ1NhdmUnKSB9O1xuICBwcml2YXRlIHF1ZXJpZXNVdGlsOiBRdWVyaWVzVXRpbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSkge1xuICAgIHRoaXMucXVlcmllc1V0aWwgPSBuZXcgUXVlcmllc1V0aWwoKTtcbiAgfVxuXG4gIHNlYXJjaChzZWFyY2hUZXJtKSB7XG4gICAgaWYgKCFzZWFyY2hUZXJtKSB7XG4gICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VhcmNoUXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZE9yRmlsdGVyKFxuICAgICAgICB7IG5hbWU6IGAqJHtzZWFyY2hUZXJtfSpgIH0sXG4gICAgICAgIHsgY29uZmlndXJhdGlvblR5cGU6IGAqJHtzZWFyY2hUZXJtfSpgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9hZC5uZXh0KCk7XG4gIH1cblxuICByZXN1bHQoc2VsZWN0ZWRJdGVtcykge1xuICAgIHRoaXMucmVzdWx0RW1pdHRlci5lbWl0KHNlbGVjdGVkSXRlbXMpO1xuICB9XG5cbiAgZ2V0SXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeVNlcnZpY2UubGlzdFJlcG9zaXRvcnlFbnRyaWVzKFJlcG9zaXRvcnlUeXBlLkNPTkZJR1VSQVRJT04sIHtcbiAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJpZXNVdGlsLmFkZE9yRmlsdGVyKHRoaXMuZGV2aWNlVHlwZVF1ZXJ5LCB0aGlzLnNlYXJjaFF1ZXJ5KSxcbiAgICAgIHBhcmFtczogeyBwYWdlU2l6ZTogMTAwIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFnZ3JlZ2F0ZShtb3M6IElNYW5hZ2VkT2JqZWN0W10pOiBJU2VsZWN0TW9kYWxPYmplY3RbXSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRJdGVtczogYW55W10gPSB0aGlzLnNlbGVjdGVkO1xuICAgIHJldHVybiBtb3MucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgIGN1cnIuY29uZmlndXJhdGlvblR5cGUgPSBjdXJyLmNvbmZpZ3VyYXRpb25UeXBlIHx8IGN1cnIubmFtZTtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID1cbiAgICAgICAgc2VsZWN0ZWRJdGVtcyAmJiBzZWxlY3RlZEl0ZW1zLmZpbHRlcih2YWwgPT4gdmFsLnVybCA9PT0gY3Vyci51cmwpLmxlbmd0aCA+IDA7XG4gICAgICBjb25zdCBzZWxlY3RNb2RhbE9wdGlvbjogSVNlbGVjdE1vZGFsT3B0aW9uID0ge1xuICAgICAgICBib2R5OiBbeyB2YWx1ZTogY3Vyci5uYW1lIH1dLFxuICAgICAgICBvYmo6IGN1cnIsXG4gICAgICAgIHNlbGVjdGVkXG4gICAgICB9O1xuICAgICAgbGV0IHNlbGVjdE1vZGFsT2JqZWN0OiBJU2VsZWN0TW9kYWxPYmplY3QgPSBhY2MuZmluZChcbiAgICAgICAgdmFsID0+IHZhbC5ib2R5WzBdLnZhbHVlID09PSBjdXJyLmNvbmZpZ3VyYXRpb25UeXBlXG4gICAgICApIGFzIElTZWxlY3RNb2RhbE9iamVjdDtcbiAgICAgIGlmIChzZWxlY3RNb2RhbE9iamVjdCkge1xuICAgICAgICBzZWxlY3RNb2RhbE9iamVjdC5vcHRpb25zLnB1c2goc2VsZWN0TW9kYWxPcHRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0TW9kYWxPYmplY3QgPSB7XG4gICAgICAgICAgZ3JvdXBJZDogY3Vyci5pZCxcbiAgICAgICAgICBib2R5OiBbeyB2YWx1ZTogY3Vyci5jb25maWd1cmF0aW9uVHlwZSB9XSxcbiAgICAgICAgICBvcHRpb25zOiBbc2VsZWN0TW9kYWxPcHRpb25dXG4gICAgICAgIH07XG4gICAgICAgIGFjYy5wdXNoKHNlbGVjdE1vZGFsT2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICB9XG59XG4iXX0=