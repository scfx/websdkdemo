import { Injectable } from '@angular/core';
import { TenantUiService } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
export class TenantListGuard {
    constructor(tenantUiService) {
        this.tenantUiService = tenantUiService;
    }
    /**
     * Checks if tenant list should be active,
     * i.e. whether the current tenant can read other tenants.
     * **Note: the check is executed only once in the runtime.**
     *
     * @returns True, if the feature should be active.
     */
    canActivate() {
        if (this.active === undefined) {
            this.active = this.tenantUiService.canReadTenants();
        }
        return this.active;
    }
}
TenantListGuard.ɵfac = function TenantListGuard_Factory(t) { return new (t || TenantListGuard)(ɵngcc0.ɵɵinject(ɵngcc1.TenantUiService)); };
TenantListGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TenantListGuard, factory: TenantListGuard.ɵfac });
TenantListGuard.ctorParameters = () => [
    { type: TenantUiService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantListGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TenantUiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWxpc3QuZ3VhcmQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3RlbmFudHMvdGVuYW50LWxpc3QvdGVuYW50LWxpc3QuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUd0RCxNQUFNLE9BQU8sZUFBZTtBQUFHLElBRzdCLFlBQW9CLGVBQWdDO0FBQUksUUFBcEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsSUFBRSxDQUFDO0FBQzFELElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSDtBQUFPO0FBRUosT0FEQztBQUNMLElBQUUsV0FBVztBQUFLLFFBQ2QsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtBQUNuQyxZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMxRCxTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0g7MkNBbkJDLFVBQVU7MkhBQ1Q7QUFBQztBQUF5QyxZQUhuQyxlQUFlO0FBQUc7OztnRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVGVuYW50VWlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZW5hbnRMaXN0R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgYWN0aXZlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGVuYW50VWlTZXJ2aWNlOiBUZW5hbnRVaVNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0ZW5hbnQgbGlzdCBzaG91bGQgYmUgYWN0aXZlLFxuICAgKiBpLmUuIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGVuYW50IGNhbiByZWFkIG90aGVyIHRlbmFudHMuXG4gICAqICoqTm90ZTogdGhlIGNoZWNrIGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBpbiB0aGUgcnVudGltZS4qKlxuICAgKlxuICAgKiBAcmV0dXJucyBUcnVlLCBpZiB0aGUgZmVhdHVyZSBzaG91bGQgYmUgYWN0aXZlLlxuICAgKi9cbiAgY2FuQWN0aXZhdGUoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuYWN0aXZlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy50ZW5hbnRVaVNlcnZpY2UuY2FuUmVhZFRlbmFudHMoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xuICB9XG59XG4iXX0=