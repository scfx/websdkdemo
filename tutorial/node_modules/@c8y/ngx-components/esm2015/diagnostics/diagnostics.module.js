import { DiagnosticsTabGuard } from './diagnostics-tab.guard';
import { ListGroupModule } from '@c8y/ngx-components';
import { RouterModule } from '@angular/router';
import { DiagnosticsService } from './diagnostics.service';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DiagnosticsComponent } from './diagnostics.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'diagnostics',
        component: DiagnosticsComponent,
        label: gettext('Diagnostics'),
        icon: 'stethoscope',
        canActivate: [DiagnosticsTabGuard],
        priority: 200
    }
];
export class DiagnosticsModule {
}
DiagnosticsModule.ɵfac = function DiagnosticsModule_Factory(t) { return new (t || DiagnosticsModule)(); };
DiagnosticsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DiagnosticsModule });
DiagnosticsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        DiagnosticsService,
        BsDropdownConfig,
        DiagnosticsTabGuard,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            RouterModule,
            CommonModule,
            ListGroupModule,
            RepositoryModule,
            BsDropdownModule,
            TooltipModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    RouterModule,
                    CommonModule,
                    ListGroupModule,
                    RepositoryModule,
                    BsDropdownModule,
                    TooltipModule
                ],
                declarations: [DiagnosticsComponent],
                exports: [DiagnosticsComponent],
                providers: [
                    DiagnosticsService,
                    BsDropdownConfig,
                    DiagnosticsTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DiagnosticsModule, { declarations: function () { return [DiagnosticsComponent]; }, imports: function () { return [CoreModule,
        RouterModule,
        CommonModule,
        ListGroupModule,
        RepositoryModule,
        BsDropdownModule,
        TooltipModule]; }, exports: function () { return [DiagnosticsComponent]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9kaWFnbm9zdGljcy9kaWFnbm9zdGljcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQVMsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQUNsRSxXQW1CZ0I7QUFDaEIsSUFBUTtBQUNSLFFBQVUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO0FBQ3JDLFFBQVUsSUFBSSxFQUFFLGFBQWE7QUFDN0IsUUFBVSxTQUFTLEVBQUUsb0JBQW9CO0FBQ3pDLFFBQVUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdkMsUUFBVSxJQUFJLEVBQUUsYUFBYTtBQUM3QixRQUFVLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO0FBQzVDLFFBQVUsUUFBUSxFQUFFLEdBQUc7QUFDdkIsS0FBUztBQUNULENBQWtCO0FBS2xCLE1BQU0sT0FBTyxpQkFBaUI7QUFBRzs2Q0FqQ2hDLFFBQVEsU0FBQyxrQkFDUixPQUFPLEVBQUU7SUFDUCxVQUFVLHNCQUNWLFlBQVksc0JBQ1osWUFBWTtXQUNaLGVBQWUsc0JBQ2YsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtrQkFDaEI7S0FBYSxrQkFDZDs7RUFDRCxZQUFZLEVBQUUsQ0FBQztJQUFvQixDQUFDLGtCQUNwQztJQUFPLEVBQUUsQ0FBQztHQUFvQixDQUFDO1lBQy9CO0VBQVMsRUFBRTtFQUNULGtCQUFrQjtnQkFDbEI7TUFBZ0Isc0JBQ2hCO2tCQUFtQjtVQUNuQjtNQUNFLE9BQU8sRUFBRSxVQUFVOztVQUNuQixRQUFRLElBVUksMEJBQ1osS0FBSyxFQUFFLElBQUksc0JBQ1osa0JBQ0Y7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0RkFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWFnbm9zdGljc1RhYkd1YXJkIH0gZnJvbSAnLi9kaWFnbm9zdGljcy10YWIuZ3VhcmQnO1xuaW1wb3J0IHsgTGlzdEdyb3VwTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NTZXJ2aWNlIH0gZnJvbSAnLi9kaWFnbm9zdGljcy5zZXJ2aWNlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIEhPT0tfUk9VVEUsIFJvdXRlLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NDb21wb25lbnQgfSBmcm9tICcuL2RpYWdub3N0aWNzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSwgQnNEcm9wZG93bkNvbmZpZyB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgTGlzdEdyb3VwTW9kdWxlLFxuICAgIFJlcG9zaXRvcnlNb2R1bGUsXG4gICAgQnNEcm9wZG93bk1vZHVsZSxcbiAgICBUb29sdGlwTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW0RpYWdub3N0aWNzQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0RpYWdub3N0aWNzQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgRGlhZ25vc3RpY3NTZXJ2aWNlLFxuICAgIEJzRHJvcGRvd25Db25maWcsXG4gICAgRGlhZ25vc3RpY3NUYWJHdWFyZCxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZSxcbiAgICAgICAgICBwYXRoOiAnZGlhZ25vc3RpY3MnLFxuICAgICAgICAgIGNvbXBvbmVudDogRGlhZ25vc3RpY3NDb21wb25lbnQsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ0RpYWdub3N0aWNzJyksXG4gICAgICAgICAgaWNvbjogJ3N0ZXRob3Njb3BlJyxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW0RpYWdub3N0aWNzVGFiR3VhcmRdLFxuICAgICAgICAgIHByaW9yaXR5OiAyMDBcbiAgICAgICAgfVxuICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGlhZ25vc3RpY3NNb2R1bGUge31cbiJdfQ==