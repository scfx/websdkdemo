import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { LoginService } from '../login/login.service';
import { UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
export class TotpChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        /**
         * Calls the verify endpoint if set to true (default true)
         */
        this.verify = true;
        /**
         * Emits the token on success.
         */
        this.onSuccess = new EventEmitter();
        this.model = {
            token: ''
        };
        this.loading = false;
        this.hasError = false;
    }
    verifyCode() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                if (this.verify) {
                    yield this.users.verifyTotpCode(this.model.token);
                }
                this.onSuccess.emit(this.model.token);
            }
            catch (e) {
                this.hasError = true;
                this.alert.removeLastDanger();
                this.loading = false;
            }
        });
    }
}
TotpChallengeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-totp-challenge',
                template: "<form #totpForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"verifyCode()\" novalidate>\n  <c8y-form-group [hasError]=\"hasError\" [novalidation]=\"true\" [ngClass]=\"hasError ? 'p-b-24' : ''\">\n    <label translate for=\"totpToken\">\n      Verification code\n    </label>\n\n    <input\n      id=\"totpToken\"\n      [(ngModel)]=\"model.token\"\n      name=\"totpToken\"\n      type=\"text\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      autocomplete=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n\n    <c8y-messages>\n      <c8y-message *ngIf=\"hasError\" translate>\n        Invalid verification code. In case of key loss, please contact your platform administrator.\n      </c8y-message>\n    </c8y-messages>\n    <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n      In case of key loss, please contact your platform administrator.\n    </p>\n  </c8y-form-group>\n  <button *ngIf=\"!loading\"\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!totpForm.form.valid\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Verify' | translate }}\n  </button>\n\n  <button *ngIf=\"loading\"\n    title=\"{{ 'Verifying\u2026' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block btn-pending\"\n  >\n    {{ 'Verifying\u2026' | translate }}\n  </button>\n</form>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
TotpChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
TotpChallengeComponent.propDecorators = {
    verify: [{ type: Input }],
    onSuccess: [{ type: Output }],
    loading: [{ type: Input }],
    hasError: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1jaGFsbGVuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi90b3RwLWNoYWxsZW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFTdEQsTUFBTSxPQUFPLHNCQUFzQjtJQWtCakMsWUFDUyxZQUEwQixFQUN6QixLQUFrQixFQUNsQixLQUFtQjtRQUZwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFwQjdCOztXQUVHO1FBQ00sV0FBTSxHQUFHLElBQUksQ0FBQztRQUN2Qjs7V0FFRztRQUNPLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXpDLFVBQUssR0FBRztZQUNOLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQztRQUVGLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztJQU1kLENBQUM7SUFFRSxVQUFVOztZQUNkLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2YsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDtnQkFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDdEI7UUFDSCxDQUFDO0tBQUE7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsNjhDQUE4QztnQkFDOUMsYUFBYSxFQUFFLENBQUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFFO2FBQ3RFOzs7WUFUUSxZQUFZO1lBQ1osV0FBVztZQUNYLFlBQVk7OztxQkFhbEIsS0FBSzt3QkFJTCxNQUFNO3NCQUtOLEtBQUs7dUJBRUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZXdQYXNzd29yZCB9IGZyb20gJy4vcGFzc3dvcmQubW9kZWwnO1xuaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciwgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSwgSUNyZWRlbnRpYWxzIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi4vbG9naW4vbG9naW4ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdG90cC1jaGFsbGVuZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vdG90cC1jaGFsbGVuZ2UuY29tcG9uZW50Lmh0bWwnLFxuICB2aWV3UHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lciwgdXNlRXhpc3Rpbmc6IE5nRm9ybSB9IF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBUb3RwQ2hhbGxlbmdlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIENhbGxzIHRoZSB2ZXJpZnkgZW5kcG9pbnQgaWYgc2V0IHRvIHRydWUgKGRlZmF1bHQgdHJ1ZSlcbiAgICovXG4gIEBJbnB1dCgpIHZlcmlmeSA9IHRydWU7XG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgdG9rZW4gb24gc3VjY2Vzcy5cbiAgICovXG4gIEBPdXRwdXQoKSBvblN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgbW9kZWwgPSB7XG4gICAgdG9rZW46ICcnXG4gIH07XG4gIEBJbnB1dCgpXG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgaGFzRXJyb3IgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSB1c2VyczogVXNlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyB2ZXJpZnlDb2RlKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMudmVyaWZ5KSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXNlcnMudmVyaWZ5VG90cENvZGUodGhpcy5tb2RlbC50b2tlbik7XG4gICAgICB9XG4gICAgICB0aGlzLm9uU3VjY2Vzcy5lbWl0KHRoaXMubW9kZWwudG9rZW4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgdGhpcy5hbGVydC5yZW1vdmVMYXN0RGFuZ2VyKCk7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==