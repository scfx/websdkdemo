import { Directive, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
export class PasswordConfirm {
    constructor(passwordConfirm) {
        this.passwordConfirm = passwordConfirm;
    }
    validate(abControl) {
        const value = abControl.value;
        const controlToCompareWith = abControl.root.get(this.passwordConfirm);
        if (controlToCompareWith && value !== controlToCompareWith.value) {
            return { passwordConfirm: true };
        }
        return null;
    }
}
PasswordConfirm.decorators = [
    { type: Directive, args: [{
                selector: '[passwordConfirm]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: PasswordConfirm,
                        multi: true
                    }
                ]
            },] }
];
PasswordConfirm.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['passwordConfirm',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNvbmZpcm0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQThCLE1BQU0sZ0JBQWdCLENBQUM7QUFhM0UsTUFBTSxPQUFPLGVBQWU7SUFFMUIsWUFBaUQsZUFBdUI7UUFBdkIsb0JBQWUsR0FBZixlQUFlLENBQVE7SUFDeEUsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUEwQjtRQUNqQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3RFLElBQUksb0JBQW9CLElBQUksS0FBSyxLQUFLLG9CQUFvQixDQUFDLEtBQUssRUFBRTtZQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUF2QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLGVBQWU7d0JBQzVCLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0Y7Ozt5Q0FJYyxTQUFTLFNBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1twYXNzd29yZENvbmZpcm1dJyxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgICAgdXNlRXhpc3Rpbmc6IFBhc3N3b3JkQ29uZmlybSxcclxuICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1cclxuICBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRDb25maXJtIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcclxuXHJcbiAgY29uc3RydWN0b3IoQEF0dHJpYnV0ZSgncGFzc3dvcmRDb25maXJtJykgcHVibGljIHBhc3N3b3JkQ29uZmlybTogc3RyaW5nKSB7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZShhYkNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uc3QgdmFsdWUgPSBhYkNvbnRyb2wudmFsdWU7XHJcbiAgICBjb25zdCBjb250cm9sVG9Db21wYXJlV2l0aCA9IGFiQ29udHJvbC5yb290LmdldCh0aGlzLnBhc3N3b3JkQ29uZmlybSk7XHJcbiAgICBpZiAoY29udHJvbFRvQ29tcGFyZVdpdGggJiYgdmFsdWUgIT09IGNvbnRyb2xUb0NvbXBhcmVXaXRoLnZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB7IHBhc3N3b3JkQ29uZmlybTogdHJ1ZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==