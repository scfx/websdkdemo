import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n';
export class TotpSetupComponent {
    constructor(user, alert) {
        this.user = user;
        this.alert = alert;
    }
    get qrCodeImage() {
        return this.totpSecret ? this.totpSecret.secretQrUrl : '';
    }
    get secret() {
        return this.totpSecret ? this.totpSecret.rawSecret : '';
    }
    get qrData() {
        // TODO: waiting for BE:, now we need extract it from secretQrUrl
        // https://cumulocity.atlassian.net/browse/MTM-36387
        // return this.totpSecret ? this.totpSecret.qrData : '';
        const otpAuth = this.qrCodeImage.split('chl=')[1];
        if (!otpAuth) {
            this.alert.danger(gettext('Failed to generate a QR code.'));
            return '';
        }
        return decodeURIComponent(otpAuth);
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.user.generateTotpSecret();
                this.totpSecret = data;
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
}
TotpSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-totp-setup',
                template: "<div class=\"text-center\">\n  <p\n    class=\"lead m-b-16\"\n    translate\n  >\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n\n  <qrcode\n    *ngIf=\"totpSecret\"\n    [width]=\"300\"\n    [qrdata]=\"qrData\"\n    [cssClass]=\"'m-b-16'\"\n    [errorCorrectionLevel]=\"'M'\"\n  ></qrcode>\n  <p class=\"text-center text-muted\">\n    {{secret}}\n  </p>\n</div>\n"
            },] }
];
TotpSetupComponent.ctorParameters = () => [
    { type: UserService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1zZXR1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3RvdHAtc2V0dXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBUyxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFNbEMsTUFBTSxPQUFPLGtCQUFrQjtJQXVCN0IsWUFBb0IsSUFBaUIsRUFBVSxLQUFtQjtRQUE5QyxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBYztJQUFHLENBQUM7SUFwQnRFLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixpRUFBaUU7UUFDakUsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQztZQUM1RCxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBSUssUUFBUTs7WUFDWixJQUFJO2dCQUNGLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7YUFDeEI7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQztLQUFBOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLG9hQUEwQzthQUMzQzs7O1lBUGUsV0FBVztZQUNsQixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElUb3RwLCBVc2VyU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdG90cC1zZXR1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLXNldHVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUb3RwU2V0dXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICB0b3RwU2VjcmV0OiBJVG90cDtcblxuICBnZXQgcXJDb2RlSW1hZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudG90cFNlY3JldCA/IHRoaXMudG90cFNlY3JldC5zZWNyZXRRclVybCA6ICcnO1xuICB9XG5cbiAgZ2V0IHNlY3JldCgpIHtcbiAgICByZXR1cm4gdGhpcy50b3RwU2VjcmV0ID8gdGhpcy50b3RwU2VjcmV0LnJhd1NlY3JldCA6ICcnO1xuICB9XG5cbiAgZ2V0IHFyRGF0YSgpIHtcbiAgICAvLyBUT0RPOiB3YWl0aW5nIGZvciBCRTosIG5vdyB3ZSBuZWVkIGV4dHJhY3QgaXQgZnJvbSBzZWNyZXRRclVybFxuICAgIC8vIGh0dHBzOi8vY3VtdWxvY2l0eS5hdGxhc3NpYW4ubmV0L2Jyb3dzZS9NVE0tMzYzODdcbiAgICAvLyByZXR1cm4gdGhpcy50b3RwU2VjcmV0ID8gdGhpcy50b3RwU2VjcmV0LnFyRGF0YSA6ICcnO1xuICAgIGNvbnN0IG90cEF1dGggPSB0aGlzLnFyQ29kZUltYWdlLnNwbGl0KCdjaGw9JylbMV07XG4gICAgaWYgKCFvdHBBdXRoKSB7XG4gICAgICB0aGlzLmFsZXJ0LmRhbmdlcihnZXR0ZXh0KCdGYWlsZWQgdG8gZ2VuZXJhdGUgYSBRUiBjb2RlLicpKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChvdHBBdXRoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlcjogVXNlclNlcnZpY2UsIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLnVzZXIuZ2VuZXJhdGVUb3RwU2VjcmV0KCk7XG4gICAgICB0aGlzLnRvdHBTZWNyZXQgPSBkYXRhO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgIH1cbiAgfVxufVxuIl19