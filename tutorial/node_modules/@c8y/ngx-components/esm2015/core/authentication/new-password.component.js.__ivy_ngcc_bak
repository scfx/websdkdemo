import { __awaiter } from "tslib";
import { Component, EventEmitter, Output } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { LoginService } from '../login/login.service';
export class NewPasswordComponent {
    constructor(loginService) {
        this.loginService = loginService;
        this.password = new EventEmitter();
        this.model = {};
        this.changePassword = false;
        this.passwordEnforced = false;
    }
    ngOnInit() {
        this.loadPasswordStrengthSettings();
        this.loginService.getGreenMinLength().then(value => {
            this.minlength = value;
        });
    }
    newPasswordChanged() {
        this.password.emit({
            password: this.model.newPassword,
            passwordStrength: this.model.strength
        });
    }
    loadPasswordStrengthSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.passwordEnforced = yield this.loginService.getPasswordStrengthEnforced({ refresh: true });
        });
    }
    showPasswordStrength() {
        return this.model.newPassword && this.model.newPassword.length >= this.minlength;
    }
    toggleChangePassword() {
        this.changePassword = !this.changePassword;
        if (!this.changePassword) {
            this.password.emit({});
            this.model = {};
        }
    }
}
NewPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-new-password',
                template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\" class=\"row content-flex-50\">\n  <div class=\"col-7\">\n    <c8y-form-group>\n      <label for=\"newPassword\" translate>Password</label>\n      <input\n        id=\"newPassword\"\n        name=\"newPassword\"\n        type=\"password\"\n        #newPassword=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPassword\"\n        (change)=\"newPasswordChanged()\"\n        (input)=\"newPasswordConfirm.control.updateValueAndValidity()\"\n        required\n        c8yDefaultValidation=\"password\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label for=\"newConfirmPassword\" translate>Confirm password</label>\n      <input\n        id=\"newConfirmPassword\"\n        name=\"newPasswordConfirm\"\n        type=\"password\"\n        #newPasswordConfirm=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPasswordConfirm\"\n        required\n        passwordConfirm=\"newPassword\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n  </div>\n  <div class=\"col-5\">\n    <c8y-password-strength\n      [password]=\"model.newPassword\"\n      (strength)=\"model.strength = $event\"\n    ></c8y-password-strength>\n\n    <c8y-password-check-list\n      class=\"m-t-32\"\n      [password]=\"model.newPassword\"\n      [hidden]=\"!passwordEnforced\"\n    ></c8y-password-check-list>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
NewPasswordComponent.ctorParameters = () => [
    { type: LoginService }
];
NewPasswordComponent.propDecorators = {
    password: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYXV0aGVudGljYXRpb24vbmV3LXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFPdEQsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUNVLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBUDFCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUMxRCxVQUFLLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLG1CQUFjLEdBQVksS0FBSyxDQUFDO1FBQ2hDLHFCQUFnQixHQUFZLEtBQUssQ0FBQztJQU1sQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVc7WUFDaEMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ3RDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFSyw0QkFBNEI7O1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRyxDQUFDO0tBQUE7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qiw2eURBQTRDO2dCQUM1QyxhQUFhLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDcEU7OztZQU5RLFlBQVk7Ozt1QkFRbEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmV3UGFzc3dvcmQgfSBmcm9tICcuL3Bhc3N3b3JkLm1vZGVsJztcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL2xvZ2luLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbmV3LXBhc3N3b3JkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL25ldy1wYXNzd29yZC5jb21wb25lbnQuaHRtbCcsXG4gIHZpZXdQcm92aWRlcnM6IFt7IHByb3ZpZGU6IENvbnRyb2xDb250YWluZXIsIHVzZUV4aXN0aW5nOiBOZ0Zvcm0gfV1cbn0pXG5leHBvcnQgY2xhc3MgTmV3UGFzc3dvcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAT3V0cHV0KCkgcGFzc3dvcmQgPSBuZXcgRXZlbnRFbWl0dGVyPE5ld1Bhc3N3b3JkIHwge30+KCk7XG4gIG1vZGVsOiBhbnkgPSB7fTtcbiAgY2hhbmdlUGFzc3dvcmQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcGFzc3dvcmRFbmZvcmNlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBtaW5sZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sb2FkUGFzc3dvcmRTdHJlbmd0aFNldHRpbmdzKCk7XG4gICAgdGhpcy5sb2dpblNlcnZpY2UuZ2V0R3JlZW5NaW5MZW5ndGgoKS50aGVuKHZhbHVlID0+IHtcbiAgICAgIHRoaXMubWlubGVuZ3RoID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICBuZXdQYXNzd29yZENoYW5nZWQoKSB7XG4gICAgdGhpcy5wYXNzd29yZC5lbWl0KHtcbiAgICAgIHBhc3N3b3JkOiB0aGlzLm1vZGVsLm5ld1Bhc3N3b3JkLFxuICAgICAgcGFzc3dvcmRTdHJlbmd0aDogdGhpcy5tb2RlbC5zdHJlbmd0aFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhc3N3b3JkU3RyZW5ndGhTZXR0aW5ncygpIHtcbiAgICB0aGlzLnBhc3N3b3JkRW5mb3JjZWQgPSBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS5nZXRQYXNzd29yZFN0cmVuZ3RoRW5mb3JjZWQoeyByZWZyZXNoOiB0cnVlIH0pO1xuICB9XG5cbiAgc2hvd1Bhc3N3b3JkU3RyZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwubmV3UGFzc3dvcmQgJiYgdGhpcy5tb2RlbC5uZXdQYXNzd29yZC5sZW5ndGggPj0gdGhpcy5taW5sZW5ndGg7XG4gIH1cblxuICB0b2dnbGVDaGFuZ2VQYXNzd29yZCgpIHtcbiAgICB0aGlzLmNoYW5nZVBhc3N3b3JkID0gIXRoaXMuY2hhbmdlUGFzc3dvcmQ7XG4gICAgaWYgKCF0aGlzLmNoYW5nZVBhc3N3b3JkKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkLmVtaXQoe30pO1xuICAgICAgdGhpcy5tb2RlbCA9IHt9O1xuICAgIH1cbiAgfVxufVxuIl19