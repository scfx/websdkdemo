import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { CommonModule as C8YCommonModule } from '../common/common.module';
import { DropAreaModule } from '../drop-area/drop-area.module';
import { FormsModule } from '../forms/index';
import { C8yTranslateModule } from './../i18n/c8y-translate.module';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { FieldFile } from './file/file.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
import * as ɵngcc0 from '@angular/core';
export const FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldFile,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(type => type['CONFIG']).reduce((formlyConfig, typeConfig) => (Object.assign(Object.assign({}, formlyConfig), { types: [...formlyConfig.types, ...(typeConfig.types || [])], wrappers: [...formlyConfig.wrappers, ...(typeConfig.wrappers || [])] })), { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
export class DynamicFormsUIThemeModule {
}
DynamicFormsUIThemeModule.ɵfac = function DynamicFormsUIThemeModule_Factory(t) { return new (t || DynamicFormsUIThemeModule)(); };
DynamicFormsUIThemeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicFormsUIThemeModule });
DynamicFormsUIThemeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: FORMLY_CONFIG,
            useFactory: fieldTypeFactory,
            multi: true
        }
    ], imports: [[
            CommonModule,
            C8YCommonModule,
            PopoverModule,
            ReactiveFormsModule,
            C8yTranslateModule,
            DropAreaModule,
            FormsModule,
            FormlyModule,
            FormlySelectModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicFormsUIThemeModule, [{
        type: NgModule,
        args: [{
                declarations: [...FIELD_TYPES],
                entryComponents: [...FIELD_TYPES],
                imports: [
                    CommonModule,
                    C8YCommonModule,
                    PopoverModule,
                    ReactiveFormsModule,
                    C8yTranslateModule,
                    DropAreaModule,
                    FormsModule,
                    FormlyModule,
                    FormlySelectModule
                ],
                providers: [
                    {
                        provide: FORMLY_CONFIG,
                        useFactory: fieldTypeFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicFormsUIThemeModule, { declarations: function () { return [FieldCheckbox,
        ArrayTypeComponent,
        WrapperFormField,
        FieldFile,
        FieldInput,
        FieldRadio,
        ObjectTypeComponent]; }, imports: function () { return [CommonModule,
        C8YCommonModule,
        PopoverModule,
        ReactiveFormsModule,
        C8yTranslateModule,
        DropAreaModule,
        FormsModule,
        FormlyModule,
        FormlySelectModule]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy9keW5hbWljLWZvcm1zLXVpLXRoZW1lLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQTJCLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksSUFBSSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFFMUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUEyQjtBQUNuRCxJQUFFLGFBQWE7QUFDZixJQUFFLGtCQUFrQjtBQUNwQixJQUFFLGdCQUFnQjtBQUNsQixJQUFFLFNBQVM7QUFDWCxJQUFFLFVBQVU7QUFDWixJQUFFLFVBQVU7QUFDWixJQUFFLG1CQUFtQjtBQUNyQixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCO0FBQ2hDLElBQUUsNkNBQTZDO0FBQy9DLElBQUUsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUNuRCxDQUFDLFlBQTBCLEVBQUUsVUFBd0IsRUFBRSxFQUFFLENBQ3ZELENBQUMsZ0NBQ0ksWUFBWSxLQUNmLEtBQUssRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUMzRCxRQUFRLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsR0FDcEQsQ0FBQSxFQUNwQixFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUM1QixDQUFDO0FBQ0osQ0FBQztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQXVCSCxNQUFNLE9BQU8seUJBQXlCO0FBQUc7cURBdEJ4QyxRQUFRLFNBQUMsa0JBQ1IsWUFBWSxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDOUIsZUFBZSxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsa0JBQ2pDLE9BQU8sRUFBRSxzQkFDUCxZQUFZO1lBQ1osZUFBZSxzQkFDZixhQUFhLHNCQUNiOztPQUFtQixzQkFDbkI7V0FBa0Isc0JBQ2xCO0tBQWM7R0FDZDtJQUFXO09BQ1gsWUFBWTtlQUNaO0lBQWtCLGtCQUNuQjthQUNELFNBQVMsRUFBRTthQUNUO09BQ0UsT0FBTyxFQUFFO0NBQWE7RUFDdEIsVUFBVSxFQUFFO0lBQWdCLDBCQUM1QjtJQUFLLEVBQUUsSUFBSTtpQkFDWixrQkFDRixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0NBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbmZpZ09wdGlvbiwgRmllbGRUeXBlLCBGb3JtbHlNb2R1bGUsIEZPUk1MWV9DT05GSUcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seVNlbGVjdE1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0JztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIGFzIEM4WUNvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IERyb3BBcmVhTW9kdWxlIH0gZnJvbSAnLi4vZHJvcC1hcmVhL2Ryb3AtYXJlYS5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICcuLi9mb3Jtcy9pbmRleCc7XG5pbXBvcnQgeyBDOHlUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICcuLy4uL2kxOG4vYzh5LXRyYW5zbGF0ZS5tb2R1bGUnO1xuaW1wb3J0IHsgQXJyYXlUeXBlQ29tcG9uZW50IH0gZnJvbSAnLi9hcnJheS9hcnJheS50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZENoZWNrYm94IH0gZnJvbSAnLi9jaGVja2JveC9jaGVja2JveC50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZEZpbGUgfSBmcm9tICcuL2ZpbGUvZmlsZS50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXcmFwcGVyRm9ybUZpZWxkIH0gZnJvbSAnLi9mb3JtLWZpZWxkL2Zvcm0tZmllbGQud3JhcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRJbnB1dCB9IGZyb20gJy4vaW5wdXQvaW5wdXQudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZUNvbXBvbmVudCB9IGZyb20gJy4vb2JqZWN0L29iamVjdC50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZFJhZGlvIH0gZnJvbSAnLi9yYWRpby9yYWRpby50eXBlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBGSUVMRF9UWVBFUzogQXJyYXk8VHlwZTxGaWVsZFR5cGU+PiA9IFtcbiAgRmllbGRDaGVja2JveCxcbiAgQXJyYXlUeXBlQ29tcG9uZW50LFxuICBXcmFwcGVyRm9ybUZpZWxkLFxuICBGaWVsZEZpbGUsXG4gIEZpZWxkSW5wdXQsXG4gIEZpZWxkUmFkaW8sXG4gIE9iamVjdFR5cGVDb21wb25lbnRcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWVsZFR5cGVGYWN0b3J5KCkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgcmV0dXJuIEZJRUxEX1RZUEVTLm1hcCh0eXBlID0+IHR5cGVbJ0NPTkZJRyddKS5yZWR1Y2UoXG4gICAgKGZvcm1seUNvbmZpZzogQ29uZmlnT3B0aW9uLCB0eXBlQ29uZmlnOiBDb25maWdPcHRpb24pID0+XG4gICAgICAoe1xuICAgICAgICAuLi5mb3JtbHlDb25maWcsXG4gICAgICAgIHR5cGVzOiBbLi4uZm9ybWx5Q29uZmlnLnR5cGVzLCAuLi4odHlwZUNvbmZpZy50eXBlcyB8fCBbXSldLFxuICAgICAgICB3cmFwcGVyczogWy4uLmZvcm1seUNvbmZpZy53cmFwcGVycywgLi4uKHR5cGVDb25maWcud3JhcHBlcnMgfHwgW10pXVxuICAgICAgfSBhcyBDb25maWdPcHRpb24pLFxuICAgIHsgdHlwZXM6IFtdLCB3cmFwcGVyczogW10gfVxuICApO1xufVxuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGRlY2xhcmVzIGZpZWxkIHR5cGUgY29tcG9uZW50cyBmb3IgZHluYW1pYyBmb3JtcyB0aGF0IG1hdGNoIEM4WSBzdHlsZWd1aWRlLlxuICpcbiAqIEBkeW5hbWljXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWy4uLkZJRUxEX1RZUEVTXSxcbiAgZW50cnlDb21wb25lbnRzOiBbLi4uRklFTERfVFlQRVNdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEM4WUNvbW1vbk1vZHVsZSxcbiAgICBQb3BvdmVyTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgQzh5VHJhbnNsYXRlTW9kdWxlLFxuICAgIERyb3BBcmVhTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIEZvcm1seU1vZHVsZSxcbiAgICBGb3JtbHlTZWxlY3RNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogRk9STUxZX0NPTkZJRyxcbiAgICAgIHVzZUZhY3Rvcnk6IGZpZWxkVHlwZUZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybXNVSVRoZW1lTW9kdWxlIHt9XG4iXX0=