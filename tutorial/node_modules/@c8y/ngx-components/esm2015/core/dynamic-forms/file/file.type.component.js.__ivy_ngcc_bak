import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
export class FieldFile extends FieldType {
    constructor() {
        super(...arguments);
        this.dropAreaInputs = [
            'title',
            'message',
            'icon',
            'loadingMessage',
            'alwaysShow',
            'clickToOpen',
            'loading',
            'progress',
            'maxAllowedFiles',
            'files',
            'accept'
        ];
    }
    ngOnInit() {
        this.dropAreaInputs
            .filter(input => this.to[input] !== undefined)
            .forEach(input => (this.dropArea[input] = this.to[input]));
    }
}
FieldFile.CONFIG = {
    types: [
        {
            name: 'file',
            component: FieldFile
        }
    ]
};
FieldFile.decorators = [
    { type: Component, args: [{
                selector: 'c8y-field-file',
                template: "<div class=\"form-group\" role=\"group\" [attr.aria-labelledby]=\"id + '-fieldset'\">\n  <div id=\"{{ id + '-fieldset' }}\" class=\"legend form-block\" *ngIf=\"to.label || to.description\">\n    {{ to.label }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n    </button>\n  </div>\n\n  <c8y-drop-area #dropArea class=\"drop-area-sm\" [formControl]=\"formControl\"> </c8y-drop-area>\n\n  <div\n    class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
FieldFile.propDecorators = {
    dropArea: [{ type: ViewChild, args: ['dropArea', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS50eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy9maWxlL2ZpbGUudHlwZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFnQixTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVEzRCxNQUFNLE9BQU8sU0FBVSxTQUFRLFNBQVM7SUFMeEM7O1FBZVcsbUJBQWMsR0FBYTtZQUNsQyxPQUFPO1lBQ1AsU0FBUztZQUNULE1BQU07WUFDTixnQkFBZ0I7WUFDaEIsWUFBWTtZQUNaLGFBQWE7WUFDYixTQUFTO1lBQ1QsVUFBVTtZQUNWLGlCQUFpQjtZQUNqQixPQUFPO1lBQ1AsUUFBUTtTQUNULENBQUM7SUFTSixDQUFDO0lBTEMsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjO2FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxDQUFDO2FBQzdDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOztBQTdCZSxnQkFBTSxHQUFpQjtJQUNyQyxLQUFLLEVBQUU7UUFDTDtZQUNFLElBQUksRUFBRSxNQUFNO1lBQ1osU0FBUyxFQUFFLFNBQVM7U0FDckI7S0FDRjtDQUNGLENBQUM7O1lBYkgsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLDIxQkFBeUM7Z0JBQ3pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7dUJBeUJFLFNBQVMsU0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZ09wdGlvbiwgRmllbGRUeXBlIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBEcm9wQXJlYUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Ryb3AtYXJlYSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1maWVsZC1maWxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbGUudHlwZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEZpZWxkRmlsZSBleHRlbmRzIEZpZWxkVHlwZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHN0YXRpYyByZWFkb25seSBDT05GSUc6IENvbmZpZ09wdGlvbiA9IHtcbiAgICB0eXBlczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnZmlsZScsXG4gICAgICAgIGNvbXBvbmVudDogRmllbGRGaWxlXG4gICAgICB9XG4gICAgXVxuICB9O1xuXG4gIHJlYWRvbmx5IGRyb3BBcmVhSW5wdXRzOiBzdHJpbmdbXSA9IFtcbiAgICAndGl0bGUnLFxuICAgICdtZXNzYWdlJyxcbiAgICAnaWNvbicsXG4gICAgJ2xvYWRpbmdNZXNzYWdlJyxcbiAgICAnYWx3YXlzU2hvdycsXG4gICAgJ2NsaWNrVG9PcGVuJyxcbiAgICAnbG9hZGluZycsXG4gICAgJ3Byb2dyZXNzJyxcbiAgICAnbWF4QWxsb3dlZEZpbGVzJyxcbiAgICAnZmlsZXMnLFxuICAgICdhY2NlcHQnXG4gIF07XG5cbiAgQFZpZXdDaGlsZCgnZHJvcEFyZWEnLCB7IHN0YXRpYzogdHJ1ZSB9KSBkcm9wQXJlYTogRHJvcEFyZWFDb21wb25lbnQ7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5kcm9wQXJlYUlucHV0c1xuICAgICAgLmZpbHRlcihpbnB1dCA9PiB0aGlzLnRvW2lucHV0XSAhPT0gdW5kZWZpbmVkKVxuICAgICAgLmZvckVhY2goaW5wdXQgPT4gKHRoaXMuZHJvcEFyZWFbaW5wdXRdID0gdGhpcy50b1tpbnB1dF0pKTtcbiAgfVxufVxuIl19