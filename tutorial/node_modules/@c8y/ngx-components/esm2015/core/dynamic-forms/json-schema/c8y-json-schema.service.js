import { Injectable } from '@angular/core';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class C8yJSONSchema extends FormlyJsonschema {
    toFieldConfig(schema, options) {
        const config = super.toFieldConfig(schema, this.c8yOptions((options || {}).map));
        if (Array.isArray(config.fieldGroup)) {
            config.fieldGroup.forEach((field) => {
                if (field.type === 'array' && field.templateOptions.required) {
                    field.fieldArray.templateOptions.required = true;
                }
            });
        }
        return config;
    }
    c8yOptions(map) {
        return {
            map(mappedField, mapSource) {
                let result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = Object.assign(Object.assign({}, result), { defaultValue: mapSource.const, templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = Object.assign(Object.assign({}, result), { type: 'radio' });
                }
                /** fields with `contentMediaType` or `contentEncoding` are represented as file inputs */
                if (mapSource.contentMediaType || mapSource.contentEncoding) {
                    result = Object.assign(Object.assign({}, result), { type: 'file', templateOptions: Object.assign(Object.assign({}, result.templateOptions), { accept: mapSource.contentMediaType, maxAllowedFiles: 1, contentEncoding: mapSource.contentEncoding }) });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    }
}
C8yJSONSchema.ɵfac = /*@__PURE__*/ function () { let ɵC8yJSONSchema_BaseFactory; return function C8yJSONSchema_Factory(t) { return (ɵC8yJSONSchema_BaseFactory || (ɵC8yJSONSchema_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(C8yJSONSchema)))(t || C8yJSONSchema); }; }();
C8yJSONSchema.ɵprov = i0.ɵɵdefineInjectable({ factory: function C8yJSONSchema_Factory() { return new C8yJSONSchema(); }, token: C8yJSONSchema, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(C8yJSONSchema, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzh5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy9qc29uLXNjaGVtYS9jOHktanNvbi1zY2hlbWEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFOztBQUtBLE1BQU0sT0FBTyxhQUFjLFNBQVEsZ0JBQWdCO0FBQ25ELElBQUUsYUFBYSxDQUFDLE1BQW1CLEVBQUUsT0FBYTtBQUFJLFFBQ2xELE1BQU0sTUFBTSxHQUFzQixLQUFLLENBQUMsYUFBYSxDQUNuRCxNQUFNLEVBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDckMsQ0FBQztBQUNOLFFBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUMxQyxZQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBd0IsRUFBRSxFQUFFO0FBQzdELGdCQUFRLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUU7QUFDdEUsb0JBQVUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztBQUMzRCxpQkFBUztBQUNULFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxTQUFLO0FBQ0wsUUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSCxJQUNVLFVBQVUsQ0FDaEIsR0FBa0Y7QUFDbkYsUUFDQyxPQUFPO0FBQ1gsWUFBTSxHQUFHLENBQUMsV0FBOEIsRUFBRSxTQUFzQjtBQUNoRSxnQkFBUSxJQUFJLE1BQU0sR0FBc0IsV0FBVyxDQUFDO0FBQ3BELGdCQUNRLGtEQUFrRDtBQUMxRCxnQkFBUSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDN0Isb0JBQVUsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsWUFBWSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQzdCLGVBQWUsa0NBQU8sTUFBTSxDQUFDLGVBQWUsS0FBRSxJQUFJLEVBQUUsUUFBUSxNQUM3RCxDQUFDO0FBQ1osaUJBQVM7QUFDVCxnQkFDUSxzREFBc0Q7QUFDOUQsZ0JBQVEsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO0FBQ2pDLG9CQUFVLE1BQU0sbUNBQ0QsTUFBTSxLQUNULGVBQWUsa0NBQU8sTUFBTSxDQUFDLGVBQWUsS0FBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLE1BQ3BGLENBQUM7QUFDWixpQkFBUztBQUNULGdCQUNRLDRDQUE0QztBQUNwRCxnQkFBUSxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUU7QUFDaEMsb0JBQVUsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsZUFBZSxrQ0FDVixNQUFNLENBQUMsZUFBZSxLQUN6QixXQUFXLEVBQUcsU0FBUyxDQUFDLFFBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUUzRCxDQUFDO0FBQ1osaUJBQVM7QUFDVCxnQkFDUSxxREFBcUQ7QUFDN0QsZ0JBQVEsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFO0FBQzVCLG9CQUFVLE1BQU0sbUNBQ0QsTUFBTSxLQUNULElBQUksRUFBRSxPQUFPLEdBQ2QsQ0FBQztBQUNaLGlCQUFTO0FBQ1QsZ0JBQ1EseUZBQXlGO0FBQ2pHLGdCQUFRLElBQUksU0FBUyxDQUFDLGdCQUFnQixJQUFJLFNBQVMsQ0FBQyxlQUFlLEVBQUU7QUFDckUsb0JBQVUsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsSUFBSSxFQUFFLE1BQU0sRUFDWixlQUFlLGtDQUNWLE1BQU0sQ0FBQyxlQUFlLEtBQ3pCLE1BQU0sRUFBRSxTQUFTLENBQUMsZ0JBQWdCLEVBQ2xDLGVBQWUsRUFBRSxDQUFDLEVBQ2xCLGVBQWUsRUFBRSxTQUFTLENBQUMsZUFBZSxNQUU3QyxDQUFDO0FBQ1osaUJBQVM7QUFDVCxnQkFDUSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3JELFlBQU0sQ0FBQztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzBRQUFDO0FBQ0Q7eUNBakZDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTTtDQUNuQjs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seUpzb25zY2hlbWEgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hJztcbmltcG9ydCB7IEpTT05TY2hlbWE3IH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDOHlKU09OU2NoZW1hIGV4dGVuZHMgRm9ybWx5SnNvbnNjaGVtYSB7XG4gIHRvRmllbGRDb25maWcoc2NoZW1hOiBKU09OU2NoZW1hNywgb3B0aW9ucz86IGFueSk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICBjb25zdCBjb25maWc6IEZvcm1seUZpZWxkQ29uZmlnID0gc3VwZXIudG9GaWVsZENvbmZpZyhcbiAgICAgIHNjaGVtYSxcbiAgICAgIHRoaXMuYzh5T3B0aW9ucygob3B0aW9ucyB8fCB7fSkubWFwKVxuICAgICk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLmZpZWxkR3JvdXApKSB7XG4gICAgICBjb25maWcuZmllbGRHcm91cC5mb3JFYWNoKChmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHtcbiAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdhcnJheScgJiYgZmllbGQudGVtcGxhdGVPcHRpb25zLnJlcXVpcmVkKSB7XG4gICAgICAgICAgZmllbGQuZmllbGRBcnJheS50ZW1wbGF0ZU9wdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIHByaXZhdGUgYzh5T3B0aW9ucyhcbiAgICBtYXA6IChtYXBwZWRGaWVsZDogRm9ybWx5RmllbGRDb25maWcsIG1hcFNvdXJjZTogSlNPTlNjaGVtYTcpID0+IEZvcm1seUZpZWxkQ29uZmlnXG4gICkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXAobWFwcGVkRmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBtYXBTb3VyY2U6IEpTT05TY2hlbWE3KSB7XG4gICAgICAgIGxldCByZXN1bHQ6IEZvcm1seUZpZWxkQ29uZmlnID0gbWFwcGVkRmllbGQ7XG5cbiAgICAgICAgLyoqIGBjb25zdGAgdHlwZSBpcyByZXByZXNlbnRlZCBhcyBoaWRkZW4gaW5wdXQgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS5jb25zdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogbWFwU291cmNlLmNvbnN0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7IC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsIHR5cGU6ICdoaWRkZW4nIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIGB3cml0ZU9ubHlgIGZpZWxkIHJlcHJlc2VudGVkIGFzIHBhc3N3b3JkIGlucHV0ICovXG4gICAgICAgIGlmIChtYXBTb3VyY2Uud3JpdGVPbmx5KSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7IC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsIHR5cGU6ICdwYXNzd29yZCcsIGF1dG9jb21wbGV0ZTogJ29mZicgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogYGV4YW1wbGVzYCB2YWx1ZXMgdXNlZCBhcyBwbGFjZWhvbGRlciAqL1xuICAgICAgICBpZiAobWFwU291cmNlLmV4YW1wbGVzKSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgIC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAobWFwU291cmNlLmV4YW1wbGVzIGFzIHN0cmluZ1tdKS5qb2luKCcsICcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBgZW51bWAgZmllbGQgcmVwcmVzZW50ZWQgYXMgcmFkaW8gYnV0dG9uIGdyb3VwICovXG4gICAgICAgIGlmIChtYXBTb3VyY2UuZW51bSkge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIHR5cGU6ICdyYWRpbydcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIGZpZWxkcyB3aXRoIGBjb250ZW50TWVkaWFUeXBlYCBvciBgY29udGVudEVuY29kaW5nYCBhcmUgcmVwcmVzZW50ZWQgYXMgZmlsZSBpbnB1dHMgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS5jb250ZW50TWVkaWFUeXBlIHx8IG1hcFNvdXJjZS5jb250ZW50RW5jb2RpbmcpIHtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgLi4ucmVzdWx0LnRlbXBsYXRlT3B0aW9ucyxcbiAgICAgICAgICAgICAgYWNjZXB0OiBtYXBTb3VyY2UuY29udGVudE1lZGlhVHlwZSxcbiAgICAgICAgICAgICAgbWF4QWxsb3dlZEZpbGVzOiAxLFxuICAgICAgICAgICAgICBjb250ZW50RW5jb2Rpbmc6IG1hcFNvdXJjZS5jb250ZW50RW5jb2RpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcCA/IG1hcChyZXN1bHQsIG1hcFNvdXJjZSkgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19