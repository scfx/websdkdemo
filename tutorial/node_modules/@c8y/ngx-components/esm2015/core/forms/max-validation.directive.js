import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import { isUndefined, isFinite } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
export class MaxValidationDirective {
    constructor() {
        this.max = '';
    }
    validate(control) {
        const parsedMax = parseInt(this.max, 10);
        if (isUndefined(control.value) || !isFinite(parsedMax)) {
            return null;
        }
        let valid = true;
        valid = !(control.value > parsedMax);
        return valid ? null : { max: { value: parsedMax } };
    }
}
MaxValidationDirective.ɵfac = function MaxValidationDirective_Factory(t) { return new (t || MaxValidationDirective)(); };
MaxValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MaxValidationDirective, selectors: [["", "max", ""]], inputs: { max: "max" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: MaxValidationDirective, multi: true }])] });
MaxValidationDirective.propDecorators = {
    max: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaxValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[max]',
                providers: [{ provide: NG_VALIDATORS, useExisting: MaxValidationDirective, multi: true }]
            }]
    }], function () { return []; }, { max: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL21heC12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLGFBQWEsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQU1sRCxNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFKdEM7QUFDRyxRQUlRLFFBQUcsR0FBVyxFQUFFLENBQUM7QUFDNUIsSUFXQSxDQUFDO0FBQ0QsSUFYRSxRQUFRLENBQUMsT0FBd0I7QUFBSSxRQUNuQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3QyxRQUFJLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUM1RCxZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFNBQUs7QUFDTCxRQUNJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNyQixRQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQztBQUN6QyxRQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBQ0g7a0RBakJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsT0FBTyxrQkFDakI7UUFBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsY0FDeEYsOEtBQ0k7QUFBQztBQUEwQyxrQkFDN0MsS0FBSztBQUFJOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1VuZGVmaW5lZCwgaXNGaW5pdGUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWF4XScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogTWF4VmFsaWRhdGlvbkRpcmVjdGl2ZSwgbXVsdGk6IHRydWV9XVxufSlcbmV4cG9ydCBjbGFzcyBNYXhWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgQElucHV0KCkgbWF4OiBzdHJpbmcgPSAnJztcblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7W2tleTogc3RyaW5nXTogYW55fSB8IG51bGwge1xuICAgIGNvbnN0IHBhcnNlZE1heCA9IHBhcnNlSW50KHRoaXMubWF4LCAxMCk7XG4gICAgaWYgKGlzVW5kZWZpbmVkKGNvbnRyb2wudmFsdWUpIHx8ICFpc0Zpbml0ZShwYXJzZWRNYXgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgIHZhbGlkID0gIShjb250cm9sLnZhbHVlID4gcGFyc2VkTWF4KTtcbiAgICByZXR1cm4gdmFsaWQgPyBudWxsIDoge21heDogeyB2YWx1ZTogcGFyc2VkTWF4IH0gfTtcbiAgfVxufVxuIl19