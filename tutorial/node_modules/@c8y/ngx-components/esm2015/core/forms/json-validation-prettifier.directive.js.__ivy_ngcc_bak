import { Directive, EventEmitter, Output } from '@angular/core';
import { NgControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { gettext } from '../i18n/index';
export class JsonValidationPrettifierDirective {
    constructor(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    ngOnInit() {
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(() => this.clearValidationMessage()), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(value => {
            this.validateInputAndPrettify(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
    validateInputAndPrettify(value) {
        if (value) {
            try {
                const validJsonObject = JSON.parse(value);
                const pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    }
    setErrorAndValidationMessage() {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    }
    clearValidationMessage() {
        this.invalidJSON.emit(undefined);
    }
}
JsonValidationPrettifierDirective.decorators = [
    { type: Directive, args: [{
                selector: 'textarea[prettyValidJson]'
            },] }
];
JsonValidationPrettifierDirective.ctorParameters = () => [
    { type: NgControl }
];
JsonValidationPrettifierDirective.propDecorators = {
    invalidJSON: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9qc29uLXZhbGlkYXRpb24tcHJldHRpZmllci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLGdCQUFnQixDQUFDO0FBRTVELE9BQU8sRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUt4QyxNQUFNLE9BQU8saUNBQWlDO0lBTzVDLFlBQVksTUFBaUI7UUFObkIsZ0JBQVcsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV6RCxZQUFPLEdBQVcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDMUQscUJBQWdCLEdBQVcsSUFBSSxDQUFDO1FBSXRDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZO2FBQy9DLElBQUksQ0FDSCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsRUFDeEMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUNuQyxvQkFBb0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsS0FBSztRQUM1QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUk7Z0JBQ0YsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQztZQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO2FBQ3JDO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sNEJBQTRCO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLHNCQUFzQjtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUFuREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7OztZQVJRLFNBQVM7OzswQkFVZixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2luZGV4JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndGV4dGFyZWFbcHJldHR5VmFsaWRKc29uXSdcbn0pXG5leHBvcnQgY2xhc3MgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCkgaW52YWxpZEpTT046IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwcml2YXRlIGFic3RyYWN0Q3RybDogQWJzdHJhY3RDb250cm9sO1xuICBwcml2YXRlIG1lc3NhZ2U6IHN0cmluZyA9IGdldHRleHQoJ011c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4nKTtcbiAgcHJpdmF0ZSBkZWJvdW5jZVRpbWVJbk1zOiBudW1iZXIgPSAxMDAwO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKG5nQ3RybDogTmdDb250cm9sKSB7XG4gICAgdGhpcy5hYnN0cmFjdEN0cmwgPSBuZ0N0cmwuY29udHJvbDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5hYnN0cmFjdEN0cmwudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZSgpKSxcbiAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMuZGVib3VuY2VUaW1lSW5NcyksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbiAmJiAhdGhpcy5zdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdmFsaWRKc29uT2JqZWN0ID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IEpTT04uc3RyaW5naWZ5KHZhbGlkSnNvbk9iamVjdCwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgdGhpcy5hYnN0cmFjdEN0cmwuc2V0VmFsdWUocHJldHR5KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpIHtcbiAgICB0aGlzLmFic3RyYWN0Q3RybC5zZXRFcnJvcnMoeyBpbnZhbGlkQm9keVRlbXBsYXRlOiB0cnVlIH0pO1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh0aGlzLm1lc3NhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh1bmRlZmluZWQpO1xuICB9XG59XG4iXX0=