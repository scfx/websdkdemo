import { Directive, Input } from '@angular/core';
import { FormControl, NG_VALIDATORS, Validators } from '@angular/forms';
/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export class EmailsValidatorDirective {
    constructor() {
        this._enabled = false;
        this.separator = ',';
    }
    /**
     * Tracks changes to the emails attribute bound to this directive.
     */
    set emails(value) {
        this._enabled = value === '' || value === true || value === 'true';
        if (this._onChange) {
            this._onChange();
        }
    }
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    validate(control) {
        if (!this._enabled) {
            return null;
        }
        const value = control.value || '';
        const emails = value.split(this.separator).map(email => email.trim());
        const invalid = emails.some(email => Validators.email(new FormControl(email)));
        return invalid ? { emails: true } : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
}
EmailsValidatorDirective.ɵfac = function EmailsValidatorDirective_Factory(t) { return new (t || EmailsValidatorDirective)(); };
EmailsValidatorDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EmailsValidatorDirective, selectors: [["", "emails", "", "formControlName", ""], ["", "emails", "", "formControl", ""], ["", "emails", "", "ngModel", ""]], inputs: { emails: "emails" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }])] });
EmailsValidatorDirective.propDecorators = {
    emails: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmailsValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
                providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }]
            }]
    }], function () { return []; }, { emails: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZm9ybXMvZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUNMLFdBQVcsRUFFWCxhQUFhLEVBR2IsVUFBVSxFQUNYLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtBQUFHLElBSnhDO0FBQ0csUUFJTyxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQ1UsY0FBUyxHQUFXLEdBQUcsQ0FBQztBQUNsQyxJQWlDQSxDQUFDO0FBQ0QsSUFqQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLElBQ0ksTUFBTSxDQUFDLEtBQXVCO0FBQ3BDLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQztBQUN2RSxRQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN4QixZQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN2QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxRQUFRLENBQUMsT0FBd0I7QUFBSSxRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN4QixZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFNBQUs7QUFDTCxRQUNJLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0FBQ3RDLFFBQUksTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUUsUUFBSSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkYsUUFBSSxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSx5QkFBeUIsQ0FBQyxFQUFjO0FBQUksUUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7b0RBekNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUU7cUNBQW1FLGtCQUM3RSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxjQUM1RixvT0FDSTtBQUFDO0FBQTRDLHFCQVEvQyxLQUFLO0FBQ1A7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybUNvbnRyb2wsXG4gIEFic3RyYWN0Q29udHJvbCxcbiAgTkdfVkFMSURBVE9SUyxcbiAgVmFsaWRhdGlvbkVycm9ycyxcbiAgVmFsaWRhdG9yLFxuICBWYWxpZGF0b3JzXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGFkZHMgdGhlIGBlbWFpbHNgIHZhbGlkYXRvciB0byBjb250cm9scyBtYXJrZWQgd2l0aCB0aGVcbiAqIGBlbWFpbHNgIGF0dHJpYnV0ZS4gVGhlIGRpcmVjdGl2ZSBpcyBwcm92aWRlZCB3aXRoIHRoZSBgTkdfVkFMSURBVE9SU2AgbXVsdGktcHJvdmlkZXIgbGlzdC5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIGVtYWlscz5cbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIGVtYWlscz1cInRydWVcIj5cbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIFtlbWFpbHNdPVwidHJ1ZVwiPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlbWFpbHNdW2Zvcm1Db250cm9sTmFtZV0sW2VtYWlsc11bZm9ybUNvbnRyb2xdLFtlbWFpbHNdW25nTW9kZWxdJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogRW1haWxzVmFsaWRhdG9yRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZSB9XVxufSlcbmV4cG9ydCBjbGFzcyBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBwcml2YXRlIF9lbmFibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX29uQ2hhbmdlPzogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzZXBhcmF0b3I6IHN0cmluZyA9ICcsJztcblxuICAvKipcbiAgICogVHJhY2tzIGNoYW5nZXMgdG8gdGhlIGVtYWlscyBhdHRyaWJ1dGUgYm91bmQgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgZW1haWxzKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgIGlmICh0aGlzLl9vbkNoYW5nZSkge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRoYXQgdmFsaWRhdGVzIHdoZXRoZXIgZW1haWwgYWRkcmVzc2VzIGFyZSB2YWxpZC5cbiAgICogUmV0dXJucyB0aGUgdmFsaWRhdGlvbiByZXN1bHQgaWYgZW5hYmxlZCwgb3RoZXJ3aXNlIG51bGwuXG4gICAqL1xuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IGNvbnRyb2wudmFsdWUgfHwgJyc7XG4gICAgY29uc3QgZW1haWxzID0gdmFsdWUuc3BsaXQodGhpcy5zZXBhcmF0b3IpLm1hcChlbWFpbCA9PiBlbWFpbC50cmltKCkpO1xuICAgIGNvbnN0IGludmFsaWQgPSBlbWFpbHMuc29tZShlbWFpbCA9PiBWYWxpZGF0b3JzLmVtYWlsKG5ldyBGb3JtQ29udHJvbChlbWFpbCkpKTtcbiAgICByZXR1cm4gaW52YWxpZCA/IHsgZW1haWxzOiB0cnVlIH0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgdmFsaWRhdG9yIGlucHV0cyBjaGFuZ2UuXG4gICAqL1xuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxufVxuIl19