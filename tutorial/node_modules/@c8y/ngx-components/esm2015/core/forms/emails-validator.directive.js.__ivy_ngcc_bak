import { Directive, Input } from '@angular/core';
import { FormControl, NG_VALIDATORS, Validators } from '@angular/forms';
/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
export class EmailsValidatorDirective {
    constructor() {
        this._enabled = false;
        this.separator = ',';
    }
    /**
     * Tracks changes to the emails attribute bound to this directive.
     */
    set emails(value) {
        this._enabled = value === '' || value === true || value === 'true';
        if (this._onChange) {
            this._onChange();
        }
    }
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    validate(control) {
        if (!this._enabled) {
            return null;
        }
        const value = control.value || '';
        const emails = value.split(this.separator).map(email => email.trim());
        const invalid = emails.some(email => Validators.email(new FormControl(email)));
        return invalid ? { emails: true } : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
}
EmailsValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
                providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }]
            },] }
];
EmailsValidatorDirective.propDecorators = {
    emails: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL2VtYWlscy12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFDTCxXQUFXLEVBRVgsYUFBYSxFQUdiLFVBQVUsRUFDWCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCOzs7Ozs7Ozs7OztHQVdHO0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtJQUpyQztRQUtVLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsY0FBUyxHQUFXLEdBQUcsQ0FBQztJQWtDbEMsQ0FBQztJQWhDQzs7T0FFRztJQUNILElBQ0ksTUFBTSxDQUFDLEtBQXVCO1FBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxNQUFNLENBQUM7UUFDbkUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRLENBQUMsT0FBd0I7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvRSxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCx5QkFBeUIsQ0FBQyxFQUFjO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1FQUFtRTtnQkFDN0UsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSx3QkFBd0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDNUY7OztxQkFTRSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybUNvbnRyb2wsXG4gIEFic3RyYWN0Q29udHJvbCxcbiAgTkdfVkFMSURBVE9SUyxcbiAgVmFsaWRhdGlvbkVycm9ycyxcbiAgVmFsaWRhdG9yLFxuICBWYWxpZGF0b3JzXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGFkZHMgdGhlIGBlbWFpbHNgIHZhbGlkYXRvciB0byBjb250cm9scyBtYXJrZWQgd2l0aCB0aGVcbiAqIGBlbWFpbHNgIGF0dHJpYnV0ZS4gVGhlIGRpcmVjdGl2ZSBpcyBwcm92aWRlZCB3aXRoIHRoZSBgTkdfVkFMSURBVE9SU2AgbXVsdGktcHJvdmlkZXIgbGlzdC5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIGVtYWlscz5cbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIGVtYWlscz1cInRydWVcIj5cbiAqIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbHNcIiBuZ01vZGVsIFtlbWFpbHNdPVwidHJ1ZVwiPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlbWFpbHNdW2Zvcm1Db250cm9sTmFtZV0sW2VtYWlsc11bZm9ybUNvbnRyb2xdLFtlbWFpbHNdW25nTW9kZWxdJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogRW1haWxzVmFsaWRhdG9yRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZSB9XVxufSlcbmV4cG9ydCBjbGFzcyBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBwcml2YXRlIF9lbmFibGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX29uQ2hhbmdlPzogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzZXBhcmF0b3I6IHN0cmluZyA9ICcsJztcblxuICAvKipcbiAgICogVHJhY2tzIGNoYW5nZXMgdG8gdGhlIGVtYWlscyBhdHRyaWJ1dGUgYm91bmQgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgZW1haWxzKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgIGlmICh0aGlzLl9vbkNoYW5nZSkge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRoYXQgdmFsaWRhdGVzIHdoZXRoZXIgZW1haWwgYWRkcmVzc2VzIGFyZSB2YWxpZC5cbiAgICogUmV0dXJucyB0aGUgdmFsaWRhdGlvbiByZXN1bHQgaWYgZW5hYmxlZCwgb3RoZXJ3aXNlIG51bGwuXG4gICAqL1xuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IGNvbnRyb2wudmFsdWUgfHwgJyc7XG4gICAgY29uc3QgZW1haWxzID0gdmFsdWUuc3BsaXQodGhpcy5zZXBhcmF0b3IpLm1hcChlbWFpbCA9PiBlbWFpbC50cmltKCkpO1xuICAgIGNvbnN0IGludmFsaWQgPSBlbWFpbHMuc29tZShlbWFpbCA9PiBWYWxpZGF0b3JzLmVtYWlsKG5ldyBGb3JtQ29udHJvbChlbWFpbCkpKTtcbiAgICByZXR1cm4gaW52YWxpZCA/IHsgZW1haWxzOiB0cnVlIH0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgdmFsaWRhdG9yIGlucHV0cyBjaGFuZ2UuXG4gICAqL1xuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxufVxuIl19