import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
export class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        if (this.el && this.el.nativeElement && this.el.nativeElement.required !== undefined) {
            const required = this.el.nativeElement.required && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== required) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, required));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
}
RequiredInputPlaceholderDirective.ɵfac = function RequiredInputPlaceholderDirective_Factory(t) { return new (t || RequiredInputPlaceholderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService)); };
RequiredInputPlaceholderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RequiredInputPlaceholderDirective, selectors: [["input", "required", ""]] });
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RequiredInputPlaceholderDirective, [{
        type: Directive,
        args: [{
                selector: 'input[required]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL3JlcXVpcmVkLWlucHV0LXBsYWNlaG9sZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBS3ZELE1BQU0sT0FBTyxpQ0FBaUM7QUFBRyxJQUkvQyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUNuQixrQkFBb0M7QUFDN0MsUUFIUyxPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsUUFDZixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFDcEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFrQjtBQUNoRCxRQVBVLDJCQUFzQixHQUFZLEtBQUssQ0FBQztBQUNsRCxRQU9LLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDckcsSUFBRSxDQUFDO0FBQ0gsSUFDRSxrQkFBa0I7QUFBSyxRQUNyQixJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxRixZQUFNLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztBQUN0RixZQUFNLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztBQUM1RCxZQUNNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDckUsZ0JBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNsRixhQUFPO0FBQ1AsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1UscUJBQXFCLENBQUMsV0FBVyxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsS0FBSztBQUNsRSxRQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLFFBQUksTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDckYsUUFBSSxNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDcEUsUUFBSSxJQUFJLGlCQUFpQixHQUFHLENBQUMsRUFBRTtBQUMvQixZQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRSxTQUFLO0FBQ0wsUUFBSSxJQUFJLGlCQUFpQixLQUFLLENBQUMsRUFBRTtBQUNqQyxZQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDdkIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQixZQUFNLE9BQU8sV0FBVyxDQUFDO0FBQ3pCLFNBQUs7QUFDTCxRQUFJLE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ2hGLElBQUUsQ0FBQztBQUNILElBQ1UsaUJBQWlCLENBQUMsV0FBVztBQUN2QyxRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNsRixRQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ25DLElBQUUsQ0FBQztBQUNIOzZEQTlDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGlCQUFpQixjQUM1QjtxS0FDSTtBQUFDO0FBQTJELFlBUDdDLFVBQVU7QUFBSSxZQUFGLFNBQVM7QUFBSSxZQUVwQyxnQkFBZ0I7QUFBRzs7Ozs7OzBJQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W3JlcXVpcmVkXSdcbn0pXG5leHBvcnQgY2xhc3MgUmVxdWlyZWRJbnB1dFBsYWNlaG9sZGVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gIHByaXZhdGUgc2hvdWxkU2tpcFJlcXVpcmVkSGludDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVxOiBib29sZWFuO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRlU2VydmljZVxuICApIHtcbiAgICAgdGhpcy5zaG91bGRTa2lwUmVxdWlyZWRIaW50ID0gISF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgnW3BsYWNlaG9sZGVyLW5vLXJlcXVpcmVkLWhpbnRdJyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZWwgJiYgdGhpcy5lbC5uYXRpdmVFbGVtZW50ICYmIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCByZXF1aXJlZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZXF1aXJlZCAmJiAhdGhpcy5zaG91bGRTa2lwUmVxdWlyZWRIaW50O1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGxhY2Vob2xkZXI7XG5cbiAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyICE9PSBwbGFjZWhvbGRlciB8fCB0aGlzLnJlcSAhPT0gcmVxdWlyZWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQbGFjZWhvbGRlcih0aGlzLmdldFRleHRGb3JQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgcmVxdWlyZWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRleHRGb3JQbGFjZWhvbGRlcihwbGFjZWhvbGRlciA9ICcnLCByZXF1aXJlZCA9IGZhbHNlKSB7XG4gICAgdGhpcy5yZXEgPSByZXF1aXJlZDtcbiAgICBjb25zdCByZXF1aXJlZFRleHQgPSBgKCR7dGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChnZXR0ZXh0KCdyZXF1aXJlZCcpKX0pYDtcbiAgICBjb25zdCByZXF1aXJlZFRleHRJbmRleCA9IHBsYWNlaG9sZGVyLmxhc3RJbmRleE9mKHJlcXVpcmVkVGV4dCk7XG4gICAgaWYgKHJlcXVpcmVkVGV4dEluZGV4ID4gMCkge1xuICAgICAgcGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlci5zbGljZSgwLCByZXF1aXJlZFRleHRJbmRleCAtIDEpO1xuICAgIH1cbiAgICBpZiAocmVxdWlyZWRUZXh0SW5kZXggPT09IDApIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gJyc7XG4gICAgfVxuICAgIGlmICghcmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyLnRyaW0oKSA/IGAke3BsYWNlaG9sZGVyfSAke3JlcXVpcmVkVGV4dH1gIDogcmVxdWlyZWRUZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQbGFjZWhvbGRlcihwbGFjZWhvbGRlcikge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXIpO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgfVxufVxuIl19