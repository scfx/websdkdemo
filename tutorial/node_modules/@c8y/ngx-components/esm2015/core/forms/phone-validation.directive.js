import { NG_VALIDATORS } from '@angular/forms';
import { Directive } from '@angular/core';
import { parsePhoneNumberFromString } from 'libphonenumber-js/max';
import * as ɵngcc0 from '@angular/core';
export class PhoneValidationDirective {
    validate(control) {
        const valid = this.validateInternationalPhoneNumber(control);
        return valid ? null : {
            internationalPhoneNumber: true
        };
    }
    validateInternationalPhoneNumber(control) {
        let numberValid;
        try {
            const phoneNumber = parsePhoneNumberFromString(control.value);
            numberValid = phoneNumber.isValid();
            if (numberValid && control.value !== phoneNumber.format('E.164')) {
                control.setValue(phoneNumber.format('E.164'), { emitEvent: false, emitModelToViewChange: false });
            }
        }
        catch (e) {
            numberValid = !control.value;
        }
        return numberValid;
    }
}
PhoneValidationDirective.ɵfac = function PhoneValidationDirective_Factory(t) { return new (t || PhoneValidationDirective)(); };
PhoneValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PhoneValidationDirective, selectors: [["", "c8yPhoneValidation", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }])] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PhoneValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yPhoneValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective, multi: true }]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZm9ybXMvcGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBOEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQU1uRSxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFFdEMsUUFBUSxDQUFDLE9BQXdCO0FBQUksUUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLFFBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUIsWUFBTSx3QkFBd0IsRUFBRSxJQUFJO0FBQ3BDLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ1UsZ0NBQWdDLENBQUMsT0FBd0I7QUFDbkUsUUFBSSxJQUFJLFdBQVcsQ0FBQztBQUNwQixRQUFJLElBQUk7QUFDUixZQUFNLE1BQU0sV0FBVyxHQUFHLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRSxZQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDMUMsWUFBTSxJQUFJLFdBQVcsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDeEUsZ0JBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzFHLGFBQU87QUFDUCxTQUFLO0FBQUMsUUFBQSxPQUFPLENBQUMsRUFBRTtBQUNoQixZQUFNLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDbkMsU0FBSztBQUNMLFFBQUksT0FBTyxXQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0g7b0RBMUJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsc0JBQXNCO1VBQ2hDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDLGNBQzFGOzs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR19WQUxJREFUT1JTLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcGFyc2VQaG9uZU51bWJlckZyb21TdHJpbmcgfSBmcm9tICdsaWJwaG9uZW51bWJlci1qcy9tYXgnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5UGhvbmVWYWxpZGF0aW9uXScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogUGhvbmVWYWxpZGF0aW9uRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZX1dXG59KVxuZXhwb3J0IGNsYXNzIFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG5cbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKToge1trZXk6IHN0cmluZ106IGFueX0gfCBudWxsIHtcbiAgICBjb25zdCB2YWxpZCA9IHRoaXMudmFsaWRhdGVJbnRlcm5hdGlvbmFsUGhvbmVOdW1iZXIoY29udHJvbCk7XG4gICAgcmV0dXJuIHZhbGlkID8gbnVsbCA6IHtcbiAgICAgIGludGVybmF0aW9uYWxQaG9uZU51bWJlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlSW50ZXJuYXRpb25hbFBob25lTnVtYmVyKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkge1xuICAgIGxldCBudW1iZXJWYWxpZDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGhvbmVOdW1iZXIgPSBwYXJzZVBob25lTnVtYmVyRnJvbVN0cmluZyhjb250cm9sLnZhbHVlKTtcbiAgICAgIG51bWJlclZhbGlkID0gcGhvbmVOdW1iZXIuaXNWYWxpZCgpO1xuICAgICAgaWYgKG51bWJlclZhbGlkICYmIGNvbnRyb2wudmFsdWUgIT09IHBob25lTnVtYmVyLmZvcm1hdCgnRS4xNjQnKSkge1xuICAgICAgICBjb250cm9sLnNldFZhbHVlKHBob25lTnVtYmVyLmZvcm1hdCgnRS4xNjQnKSwgeyBlbWl0RXZlbnQ6IGZhbHNlLCBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2U6IGZhbHNlIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG51bWJlclZhbGlkID0gIWNvbnRyb2wudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXJWYWxpZDtcbiAgfVxufVxuIl19