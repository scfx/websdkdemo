import { Directive, EventEmitter, Output } from '@angular/core';
import { NgControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { gettext } from '../i18n/index';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class JsonValidationPrettifierDirective {
    constructor(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    ngOnInit() {
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(() => this.clearValidationMessage()), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(value => {
            this.validateInputAndPrettify(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
    validateInputAndPrettify(value) {
        if (value) {
            try {
                const validJsonObject = JSON.parse(value);
                const pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    }
    setErrorAndValidationMessage() {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    }
    clearValidationMessage() {
        this.invalidJSON.emit(undefined);
    }
}
JsonValidationPrettifierDirective.ɵfac = function JsonValidationPrettifierDirective_Factory(t) { return new (t || JsonValidationPrettifierDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl)); };
JsonValidationPrettifierDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: JsonValidationPrettifierDirective, selectors: [["textarea", "prettyValidJson", ""]], outputs: { invalidJSON: "invalidJSON" } });
JsonValidationPrettifierDirective.ctorParameters = () => [
    { type: NgControl }
];
JsonValidationPrettifierDirective.propDecorators = {
    invalidJSON: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonValidationPrettifierDirective, [{
        type: Directive,
        args: [{
                selector: 'textarea[prettyValidJson]'
            }]
    }], function () { return [{ type: ɵngcc1.NgControl }]; }, { invalidJSON: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL2pzb24tdmFsaWRhdGlvbi1wcmV0dGlmaWVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFLeEMsTUFBTSxPQUFPLGlDQUFpQztBQUFHLElBTy9DLFlBQVksTUFBaUI7QUFDL0IsUUFQWSxnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ25FLFFBQ1UsWUFBTyxHQUFXLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ3BFLFFBQVUscUJBQWdCLEdBQVcsSUFBSSxDQUFDO0FBQzFDLFFBR0ksSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7QUFDdEQsYUFBTyxJQUFJLENBQ0gsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQ3hDLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFDbkMsb0JBQW9CLEVBQUUsQ0FDdkI7QUFDUCxhQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFRLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxRQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtBQUN4RCxZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0Usd0JBQXdCLENBQUMsS0FBSztBQUNoQyxRQUFJLElBQUksS0FBSyxFQUFFO0FBQ2YsWUFBTSxJQUFJO0FBQ1YsZ0JBQVEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxnQkFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckUsZ0JBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0MsYUFBTztBQUFDLFlBQUEsT0FBTyxFQUFFLEVBQUU7QUFDbkIsZ0JBQVEsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDNUMsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLDRCQUE0QjtBQUN0QyxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMvRCxRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSCxJQUNVLHNCQUFzQjtBQUNoQyxRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLElBQUUsQ0FBQztBQUNIOzZEQXBEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDJCQUEyQixjQUN0Qzt3TkFDSTtBQUFDO0FBQTJELFlBVHhELFNBQVM7QUFBRztBQUFHO0FBRVQsMEJBUVosTUFBTTtBQUFJOzs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2luZGV4JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndGV4dGFyZWFbcHJldHR5VmFsaWRKc29uXSdcbn0pXG5leHBvcnQgY2xhc3MgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCkgaW52YWxpZEpTT046IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwcml2YXRlIGFic3RyYWN0Q3RybDogQWJzdHJhY3RDb250cm9sO1xuICBwcml2YXRlIG1lc3NhZ2U6IHN0cmluZyA9IGdldHRleHQoJ011c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4nKTtcbiAgcHJpdmF0ZSBkZWJvdW5jZVRpbWVJbk1zOiBudW1iZXIgPSAxMDAwO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKG5nQ3RybDogTmdDb250cm9sKSB7XG4gICAgdGhpcy5hYnN0cmFjdEN0cmwgPSBuZ0N0cmwuY29udHJvbDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5hYnN0cmFjdEN0cmwudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZSgpKSxcbiAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMuZGVib3VuY2VUaW1lSW5NcyksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbiAmJiAhdGhpcy5zdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdmFsaWRKc29uT2JqZWN0ID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IEpTT04uc3RyaW5naWZ5KHZhbGlkSnNvbk9iamVjdCwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgdGhpcy5hYnN0cmFjdEN0cmwuc2V0VmFsdWUocHJldHR5KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpIHtcbiAgICB0aGlzLmFic3RyYWN0Q3RybC5zZXRFcnJvcnMoeyBpbnZhbGlkQm9keVRlbXBsYXRlOiB0cnVlIH0pO1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh0aGlzLm1lc3NhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh1bmRlZmluZWQpO1xuICB9XG59XG4iXX0=