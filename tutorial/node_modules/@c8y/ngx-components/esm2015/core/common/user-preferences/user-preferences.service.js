import { Injectable } from '@angular/core';
import { InventoryService, UserService } from '@c8y/client';
import { from } from 'rxjs';
import { switchMap, first } from 'rxjs/operators';
import { UserPreferencesStorageLocal } from './user-preferences-storage-local';
import { UserPreferencesStorageInventory } from './user-preferences-store-inventory';
import { AppStateService } from '../ui-state.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '../ui-state.service';
export class UserPreferencesService {
    constructor(user, inventory, appState) {
        this.user = user;
        this.inventory = inventory;
        this.appState = appState;
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.storage = {
            local: new UserPreferencesStorageLocal(),
            inventory: new UserPreferencesStorageInventory(this.inventory)
        };
        this.currentUser = this.appState.currentUser;
    }
    get(key) {
        return this.currentUser.pipe(first(), switchMap((user) => this.getForUser(key, user)));
    }
    set(key, value) {
        return new Promise((resolve, reject) => {
            this.currentUser.pipe(first()).subscribe((user) => {
                resolve(this.setForUser(key, value, user));
            }, reject);
        });
    }
    getForUser(key, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return from(storage.get(rawKey));
    }
    setForUser(key, value, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return Promise.resolve(storage.set(rawKey, value));
    }
    getRawKey(key, user) {
        const username = user.userName.replace(/\./g, '__');
        return `${key}${username}`;
    }
    getStorage(user) {
        return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
            this.storage.inventory : this.storage.local;
    }
}
UserPreferencesService.ɵfac = function UserPreferencesService_Factory(t) { return new (t || UserPreferencesService)(ɵngcc0.ɵɵinject(ɵngcc1.UserService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.AppStateService)); };
UserPreferencesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: UserPreferencesService, factory: UserPreferencesService.ɵfac });
UserPreferencesService.ctorParameters = () => [
    { type: UserService },
    { type: InventoryService },
    { type: AppStateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserPreferencesService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.UserService }, { type: ɵngcc1.InventoryService }, { type: ɵngcc2.AppStateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi91c2VyLXByZWZlcmVuY2VzL3VzZXItcHJlZmVyZW5jZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUQsT0FBTyxFQUFjLElBQUksRUFBUyxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUd0RCxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBTUUsWUFDVSxJQUFpQixFQUNqQixTQUEyQixFQUMzQixRQUF5QjtBQUNsQyxRQUhTLFNBQUksR0FBSixJQUFJLENBQWE7QUFBQyxRQUNsQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtBQUFDLFFBQzVCLGFBQVEsR0FBUixRQUFRLENBQWlCO0FBQ3JDLFFBVFUsc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDaEQsUUFTSSxJQUFJLENBQUMsT0FBTyxHQUFHO0FBQ25CLFlBQU0sS0FBSyxFQUFFLElBQUksMkJBQTJCLEVBQUU7QUFDOUMsWUFBTSxTQUFTLEVBQUUsSUFBSSwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3BFLFNBQUssQ0FBQztBQUNOLFFBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSCxJQUNFLEdBQUcsQ0FBQyxHQUFHO0FBQUksUUFDVCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUMxQixLQUFLLEVBQUUsRUFDUCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQ2hELENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSztBQUFJLFFBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7QUFDM0MsWUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDbkIsS0FBSyxFQUFFLENBQ1IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUMzQixnQkFBUSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkQsWUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0UsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJO0FBQUksUUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0MsUUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFDLFFBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLElBQUUsQ0FBQztBQUNILElBQ0UsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSTtBQUFJLFFBQzdCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdDLFFBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQyxRQUFJLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUNILElBQ1UsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJO0FBQzdCLFFBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hELFFBQUksT0FBTyxHQUFHLEdBQUcsR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSCxJQUNVLFVBQVUsQ0FBQyxJQUFJO0FBQ3pCLFFBQUksT0FBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRixZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSDtrREExREMsVUFBVTtnSkFDVDtBQUFDO0FBQ1UsWUFWYyxXQUFXO0FBQUksWUFBakMsZ0JBQWdCO0FBQUksWUFNcEIsZUFBZTtBQUFHOzs7aUpBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludmVudG9yeVNlcnZpY2UsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgSVVzZXIgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBuZXZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1N0b3JhZ2VMb2NhbCB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy1zdG9yYWdlLWxvY2FsJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1N0b3JhZ2VJbnZlbnRvcnkgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZXMtc3RvcmUtaW52ZW50b3J5JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL3VpLXN0YXRlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzU2VydmljZSB7XG4gIGN1cnJlbnRVc2VyOiBPYnNlcnZhYmxlPElVc2VyPjtcbiAgcHJpdmF0ZSBMT0NBTF9TVE9SQUdFX0tFWSA9ICd1c2VyUHJlZmVyZW5jZXMnO1xuICBwcml2YXRlIHN0b3JhZ2U6IHtcbiAgICBsb2NhbDogVXNlclByZWZlcmVuY2VzU3RvcmFnZUxvY2FsLFxuICAgIGludmVudG9yeTogVXNlclByZWZlcmVuY2VzU3RvcmFnZUludmVudG9yeVxuICB9O1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHVzZXI6IFVzZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnN0b3JhZ2UgPSB7XG4gICAgICBsb2NhbDogbmV3IFVzZXJQcmVmZXJlbmNlc1N0b3JhZ2VMb2NhbCgpLFxuICAgICAgaW52ZW50b3J5OiBuZXcgVXNlclByZWZlcmVuY2VzU3RvcmFnZUludmVudG9yeSh0aGlzLmludmVudG9yeSlcbiAgICB9O1xuICAgIHRoaXMuY3VycmVudFVzZXIgPSB0aGlzLmFwcFN0YXRlLmN1cnJlbnRVc2VyO1xuICB9XG5cbiAgZ2V0KGtleSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFVzZXIucGlwZShcbiAgICAgIGZpcnN0KCksXG4gICAgICBzd2l0Y2hNYXAoKHVzZXIpID0+IHRoaXMuZ2V0Rm9yVXNlcihrZXksIHVzZXIpKVxuICAgICk7XG4gIH1cblxuICBzZXQoa2V5LCB2YWx1ZSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFVzZXIucGlwZShcbiAgICAgICAgZmlyc3QoKVxuICAgICAgKS5zdWJzY3JpYmUoKHVzZXIpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0aGlzLnNldEZvclVzZXIoa2V5LCB2YWx1ZSwgdXNlcikpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEZvclVzZXIoa2V5LCB1c2VyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCByYXdLZXkgPSB0aGlzLmdldFJhd0tleShrZXksIHVzZXIpO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmdldFN0b3JhZ2UodXNlcik7XG4gICAgcmV0dXJuIGZyb20oc3RvcmFnZS5nZXQocmF3S2V5KSk7XG4gIH1cblxuICBzZXRGb3JVc2VyKGtleSwgdmFsdWUsIHVzZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJhd0tleSA9IHRoaXMuZ2V0UmF3S2V5KGtleSwgdXNlcik7XG4gICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSh1c2VyKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0b3JhZ2Uuc2V0KHJhd0tleSwgdmFsdWUpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmF3S2V5KGtleSwgdXNlcikge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gdXNlci51c2VyTmFtZS5yZXBsYWNlKC9cXC4vZywgJ19fJyk7XG4gICAgcmV0dXJuIGAke2tleX0ke3VzZXJuYW1lfWA7XG4gIH1cblxuICBwcml2YXRlIGdldFN0b3JhZ2UodXNlcikge1xuICAgIHJldHVybiAgdGhpcy51c2VyLmhhc0FsbFJvbGVzKHVzZXIsIFsnUk9MRV9JTlZFTlRPUllfUkVBRCcsICdST0xFX0lOVkVOVE9SWV9BRE1JTiddKSA/XG4gICAgICB0aGlzLnN0b3JhZ2UuaW52ZW50b3J5IDogdGhpcy5zdG9yYWdlLmxvY2FsO1xuICB9XG5cbn1cbiJdfQ==