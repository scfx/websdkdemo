import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash';
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
export class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    transform(appNameOrApp = 'Cumulocity') {
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || this.humanize(appName);
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    }
    humanize(str = '') {
        const result = str.replace(/_/g, ' ').split('');
        result[0] = (result[0] || '').toUpperCase();
        return result.join('');
    }
}
HumanizeAppNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'humanizeAppName' },] }
];
HumanizeAppNamePipe.ctorParameters = () => [
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL2h1bWFuaXplLWFwcC1uYW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHeEQ7Ozs7RUFJRTtBQUVGLE1BQU0sT0FBTyxtQkFBbUI7SUFROUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFOOUMsaUJBQVksR0FBRztZQUNyQixjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtTQUN0QyxDQUFDO0lBRXVELENBQUM7SUFFMUQsU0FBUyxDQUFDLGVBQW9CLFlBQVk7UUFDeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5QyxJQUFJLElBQUksQ0FBQztRQUNULElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNsQyxJQUFJLEdBQUcsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNMLElBQUksR0FBRyxPQUFPLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sVUFBVSxDQUFDLFlBQW1DO1FBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDbkMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDekIsR0FBRyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7WUFDaEMsWUFBWTtTQUNiLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU8sZUFBZSxDQUFDLE1BQU07UUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxXQUFXLENBQUMsWUFBbUM7UUFDckQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxRQUFRLENBQUMsTUFBYyxFQUFFO1FBQy9CLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7OztZQTVDRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7OztZQVh4QixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQXBwbGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IGdldCwgZmluZCwgbmVnYXRlLCBpc1VuZGVmaW5lZCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBIdW1hbml6ZVBpcGUgfSBmcm9tICcuL2h1bWFuaXplLnBpcGUnO1xuXG4vKlxuICogSHVtYW5pemUgYW4gYXBwbGljYXRpb24gbmFtZSBhbmQgdHJhbnNsYXRlcyBpdC5cbiAqIFVzYWdlOlxuICogICBhcHBOYW1lT3JBcHAgfCBodW1hbml6ZUFwcE5hbWUgfCBhc3luY1xuKi9cbkBQaXBlKHsgbmFtZTogJ2h1bWFuaXplQXBwTmFtZScgfSlcbmV4cG9ydCBjbGFzcyBIdW1hbml6ZUFwcE5hbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgcHJpdmF0ZSBpbnRlcm5hbEFwcHMgPSB7XG4gICAgYWRtaW5pc3RyYXRpb246ICdBZG1pbmlzdHJhdGlvbicsXG4gICAgY29ja3BpdDogJ0NvY2twaXQnLFxuICAgIGRldmljZW1hbmFnZW1lbnQ6ICdEZXZpY2UgbWFuYWdlbWVudCdcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgdHJhbnNmb3JtKGFwcE5hbWVPckFwcDogYW55ID0gJ0N1bXVsb2NpdHknKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRBcHBOYW1lKGFwcE5hbWVPckFwcCk7XG5cbiAgICBsZXQgdGV4dDtcbiAgICBpZiAodGhpcy5pc1B1YmxpY0FwcChhcHBOYW1lT3JBcHApKSB7XG4gICAgICB0ZXh0ID0gZ2V0dGV4dCgne3sgYXBwTmFtZSB8IHRyYW5zbGF0ZSB9fSAocHVibGljKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gYXBwTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5zdHJlYW0odGV4dCwgeyBhcHBOYW1lIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBcHBOYW1lKGFwcE5hbWVPckFwcDogSUFwcGxpY2F0aW9uIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRGaXJzdERlZmluZWQoW1xuICAgICAgZ2V0KGFwcE5hbWVPckFwcCwgJ25hbWUnKSxcbiAgICAgIGdldChhcHBOYW1lT3JBcHAsICdjb250ZXh0UGF0aCcpLFxuICAgICAgYXBwTmFtZU9yQXBwXG4gICAgXSkgfHwgJyc7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxBcHBzW2FwcE5hbWVdIHx8IHRoaXMuaHVtYW5pemUoYXBwTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIGdldEZpcnN0RGVmaW5lZCh2YWx1ZXMpIHtcbiAgICByZXR1cm4gZmluZCh2YWx1ZXMsIG5lZ2F0ZShpc1VuZGVmaW5lZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1B1YmxpY0FwcChhcHBOYW1lT3JBcHA6IElBcHBsaWNhdGlvbiB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKGdldChhcHBOYW1lT3JBcHAsICdwdWJsaWMnKSk7XG4gIH1cblxuICBwcml2YXRlIGh1bWFuaXplKHN0cjogc3RyaW5nID0gJycpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN0ci5yZXBsYWNlKC9fL2csICcgJykuc3BsaXQoJycpO1xuICAgIHJlc3VsdFswXSA9IChyZXN1bHRbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgfVxufVxuIl19