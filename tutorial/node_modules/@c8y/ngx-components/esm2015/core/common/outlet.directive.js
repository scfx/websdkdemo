import { assign } from 'lodash-es';
import { ComponentFactoryResolver, Directive, ElementRef, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
 * @example
 * <div *c8yOutlet="template"></div>
 * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
 * <div *c8yOutlet="nodes"></div>
 *
 *
 * note: If template is instance of HTMLElement (for example, node compiled by angularJS) then there can be
 * only single instance rendered, as only one instance of HTMLElement can exist in DOM.
 * If there is need for displaying same element multiple times, please make sure to inject into
 * this element createCopy function, which should return another instance of given element.
 *
 */
import * as ɵngcc0 from '@angular/core';
export class OutletDirective {
    constructor(viewContainer, resolver, renderer, el) {
        this.viewContainer = viewContainer;
        this.resolver = resolver;
        this.renderer = renderer;
        this.el = el;
        this.properties = {};
    }
    /**
     * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
     * @example
     * <div *c8yOutlet="template"></div>
     * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
     * <div *c8yOutlet="nodes"></div>
     */
    set c8yOutlet(template) {
        if (!template) {
            return;
        }
        if (this._element instanceof Element) {
            this.renderer.removeChild(this._element.parentElement, this._element);
        }
        this.viewContainer.clear();
        // case TemplateRef -> <div *c8yOutlet="template"></div>
        if (template instanceof TemplateRef) {
            this.viewContainer.createEmbeddedView(template);
            // case DOM Element -> <div *c8yOutlet="nodes"></div>
        }
        else if (template instanceof Element) {
            const parent = this.renderer.parentNode(this.el.nativeElement);
            this.destroy();
            /**
             * Because compiled element can be used only once, we need to create copy of it
             * in order to display it in multiple locations.
             * For example standard "More" menu, and its RWD version.
             */
            if (template.createCopy) {
                this._element = template.createCopy();
            }
            else {
                this._element = template;
            }
            this.renderer.insertBefore(parent, this._element, this.el.nativeElement);
            // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
        }
        else {
            const factory = this.resolver.resolveComponentFactory(template);
            const component = this.viewContainer.createComponent(factory);
            assign(component.instance, this.properties);
        }
    }
    set c8yOutletProperties(value) {
        this.properties = value;
    }
    ngOnDestroy() {
        this.destroy();
    }
    destroy() {
        if (this._element) {
            const _parent = this.renderer.parentNode(this._element);
            this.renderer.removeChild(_parent, this._element);
        }
    }
}
OutletDirective.ɵfac = function OutletDirective_Factory(t) { return new (t || OutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OutletDirective, selectors: [["", "c8yOutlet", ""]], inputs: { c8yOutlet: "c8yOutlet", c8yOutletProperties: "c8yOutletProperties" } });
OutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef }
];
OutletDirective.propDecorators = {
    c8yOutlet: [{ type: Input }],
    c8yOutletProperties: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OutletDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yOutlet]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { c8yOutlet: [{
            type: Input
        }], c8yOutletProperties: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vb3V0bGV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFFTCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFFWCxnQkFBZ0IsRUFDZixNQUFNLGVBQWUsQ0FBQztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFHRSxZQUNVLGFBQStCLEVBQy9CLFFBQWtDLEVBQ2xDLFFBQW1CLEVBQ25CLEVBQWM7QUFDdkIsUUFKUyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7QUFBQyxRQUNoQyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtBQUFDLFFBQ25DLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUNwQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQzFCLFFBUlUsZUFBVSxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQU9NLENBQUM7QUFDUCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFFLElBQWEsU0FBUyxDQUFDLFFBQWdEO0FBQ3pFLFFBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNuQixZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLFlBQVksT0FBTyxFQUFFO0FBQzFDLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdFLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0IsUUFDSSx3REFBd0Q7QUFDNUQsUUFBSSxJQUFJLFFBQVEsWUFBWSxXQUFXLEVBQUU7QUFDekMsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RELFlBQ0kscURBQXFEO0FBQ3pELFNBQUs7QUFBQyxhQUFLLElBQUksUUFBUSxZQUFZLE9BQU8sRUFBRTtBQUM1QyxZQUFNLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckUsWUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckIsWUFDTTtBQUNOO0FBQ007QUFDTTtBQUVKLGVBREM7QUFDVCxZQUFNLElBQUssUUFBZ0IsQ0FBQyxVQUFVLEVBQUU7QUFDeEMsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsR0FBSSxRQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3ZELGFBQU87QUFBQyxpQkFBSztBQUNiLGdCQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ2pDLGFBQU87QUFDUCxZQUNNLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0UsWUFDSSx5RkFBeUY7QUFDN0YsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLE1BQU0sT0FBTyxHQUEwQixJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdGLFlBQU0sTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEUsWUFBTSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEQsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBYSxtQkFBbUIsQ0FBQyxLQUFLO0FBQ3hDLFFBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQUssUUFDZCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFDVSxPQUFPO0FBQ2pCLFFBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3ZCLFlBQU0sTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7MkNBMUVDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsYUFBYSxlQUN4Qjs2TUFDSTtBQUFDO0FBQ1UsWUFyQmQsZ0JBQWdCO0FBQ2YsWUFSRCx3QkFBd0I7QUFDeEIsWUFHQSxTQUFTO0FBQ1QsWUFIQSxVQUFVO0FBQ1g7QUFBRztBQUdGLHdCQXVDQyxLQUFLO0FBQUssa0NBdUNWLEtBQUs7QUFBSTs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7XG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZlxuICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0byBzZXQgYSBET00gbm9kZSwgYSBUZW1wbGF0ZVJlZiBvciBhbnkgQ29tcG9uZW50IHRvIGEgY29udGFpbmVyIG9yIGFueSBub2RlLlxuICogQGV4YW1wbGVcbiAqIDxkaXYgKmM4eU91dGxldD1cInRlbXBsYXRlXCI+PC9kaXY+XG4gKiA8ZGl2ICpjOHlPdXRsZXQ9XCJEZXZpY2VTdGF0dXNDb21wb25lbnQ7IHByb3BlcnRpZXM6IHsgbm9kZSB9XCI+PC9kaXY+XG4gKiA8ZGl2ICpjOHlPdXRsZXQ9XCJub2Rlc1wiPjwvZGl2PlxuICpcbiAqXG4gKiBub3RlOiBJZiB0ZW1wbGF0ZSBpcyBpbnN0YW5jZSBvZiBIVE1MRWxlbWVudCAoZm9yIGV4YW1wbGUsIG5vZGUgY29tcGlsZWQgYnkgYW5ndWxhckpTKSB0aGVuIHRoZXJlIGNhbiBiZVxuICogb25seSBzaW5nbGUgaW5zdGFuY2UgcmVuZGVyZWQsIGFzIG9ubHkgb25lIGluc3RhbmNlIG9mIEhUTUxFbGVtZW50IGNhbiBleGlzdCBpbiBET00uXG4gKiBJZiB0aGVyZSBpcyBuZWVkIGZvciBkaXNwbGF5aW5nIHNhbWUgZWxlbWVudCBtdWx0aXBsZSB0aW1lcywgcGxlYXNlIG1ha2Ugc3VyZSB0byBpbmplY3QgaW50b1xuICogdGhpcyBlbGVtZW50IGNyZWF0ZUNvcHkgZnVuY3Rpb24sIHdoaWNoIHNob3VsZCByZXR1cm4gYW5vdGhlciBpbnN0YW5jZSBvZiBnaXZlbiBlbGVtZW50LlxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eU91dGxldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBPdXRsZXREaXJlY3RpdmUge1xuICBwcml2YXRlIHByb3BlcnRpZXMgPSB7fTtcbiAgcHJpdmF0ZSBfZWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmXG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZSB0byBzZXQgYSBET00gbm9kZSwgYSBUZW1wbGF0ZVJlZiBvciBhbnkgQ29tcG9uZW50IHRvIGEgY29udGFpbmVyIG9yIGFueSBub2RlLlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2ICpjOHlPdXRsZXQ9XCJ0ZW1wbGF0ZVwiPjwvZGl2PlxuICAgKiA8ZGl2ICpjOHlPdXRsZXQ9XCJEZXZpY2VTdGF0dXNDb21wb25lbnQ7IHByb3BlcnRpZXM6IHsgbm9kZSB9XCI+PC9kaXY+XG4gICAqIDxkaXYgKmM4eU91dGxldD1cIm5vZGVzXCI+PC9kaXY+XG4gICAqL1xuICBASW5wdXQoKSBzZXQgYzh5T3V0bGV0KHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgVHlwZTxhbnk+IHwgRWxlbWVudCkge1xuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMuX2VsZW1lbnQucGFyZW50RWxlbWVudCwgIHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcblxuICAgIC8vIGNhc2UgVGVtcGxhdGVSZWYgLT4gPGRpdiAqYzh5T3V0bGV0PVwidGVtcGxhdGVcIj48L2Rpdj5cbiAgICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZSk7XG5cbiAgICAvLyBjYXNlIERPTSBFbGVtZW50IC0+IDxkaXYgKmM4eU91dGxldD1cIm5vZGVzXCI+PC9kaXY+XG4gICAgfSBlbHNlIGlmICh0ZW1wbGF0ZSBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucmVuZGVyZXIucGFyZW50Tm9kZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQmVjYXVzZSBjb21waWxlZCBlbGVtZW50IGNhbiBiZSB1c2VkIG9ubHkgb25jZSwgd2UgbmVlZCB0byBjcmVhdGUgY29weSBvZiBpdFxuICAgICAgICogaW4gb3JkZXIgdG8gZGlzcGxheSBpdCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMuXG4gICAgICAgKiBGb3IgZXhhbXBsZSBzdGFuZGFyZCBcIk1vcmVcIiBtZW51LCBhbmQgaXRzIFJXRCB2ZXJzaW9uLlxuICAgICAgICovXG4gICAgICBpZiAoKHRlbXBsYXRlIGFzIGFueSkuY3JlYXRlQ29weSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gKHRlbXBsYXRlIGFzIGFueSkuY3JlYXRlQ29weSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRlbXBsYXRlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydEJlZm9yZShwYXJlbnQsIHRoaXMuX2VsZW1lbnQsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG5cbiAgICAvLyBjYXNlIENvbXBvbmVudCAtPiA8ZGl2ICpjOHlPdXRsZXQ9XCJEZXZpY2VTdGF0dXNDb21wb25lbnQ7IHByb3BlcnRpZXM6IHsgbm9kZSB9XCI+PC9kaXY+XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8YW55PiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGVtcGxhdGUpO1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICAgIGFzc2lnbihjb21wb25lbnQuaW5zdGFuY2UsIHRoaXMucHJvcGVydGllcyk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IGM4eU91dGxldFByb3BlcnRpZXModmFsdWUpIHtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB2YWx1ZTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICBjb25zdCBfcGFyZW50ID0gdGhpcy5yZW5kZXJlci5wYXJlbnROb2RlKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDaGlsZChfcGFyZW50LCB0aGlzLl9lbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==