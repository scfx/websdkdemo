import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { forEach } from 'lodash-es';
/**
 * A directive to determine if a dropdown should open to the top or as usual to the bottom.
 * This directive has a direct dependency to the bootstrap dropdown (!)
 *
 * Preconditions:
 *  - Bootstrap dropdown is used
 *  - Bootstrap dropdown is not used with container="body"
 *  - Bootstrap dropdown is used like it is intended and documented for e.g.
 * ```html
 * <div dropdown class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 *
 * Example:
 * ```html
 * <div dropdown c8yBsDropdownDirection class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 * You make use of the bootstrap dropdown as usual and additionally add the direction directive to it.
 */
import * as ɵngcc0 from '@angular/core';
export class DropdownDirectionDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.MARGIN_BOTTOM = 10;
        this.VISIBILITY = 'visibility';
        this.DROPUP = 'dropup';
    }
    onClick() {
        const open = this.elementRef.nativeElement.classList.contains('open');
        if (open) {
            let menu;
            let toggle;
            forEach(this.elementRef.nativeElement.children, (element) => {
                if (element.classList.contains('dropdown-menu')) {
                    menu = element;
                }
                if (element.classList.contains('dropdown-toggle')) {
                    toggle = element;
                }
            });
            if (menu && toggle) {
                this.renderer.setStyle(menu, this.VISIBILITY, 'hidden');
                this.shouldDropup(menu, toggle);
                this.renderer.removeStyle(menu, this.VISIBILITY);
            }
        }
    }
    shouldDropup(container, position) {
        const containerHeight = container.getBoundingClientRect().height;
        const containerDropPosition = position.getBoundingClientRect().bottom;
        const layoutViewport = window.innerHeight;
        const sum = containerHeight + containerDropPosition + this.MARGIN_BOTTOM;
        if (sum >= layoutViewport) {
            this.renderer.addClass(this.elementRef.nativeElement, this.DROPUP);
        }
        else if (this.elementRef.nativeElement.classList.contains(this.DROPUP)) {
            this.renderer.removeClass(this.elementRef.nativeElement, this.DROPUP);
        }
    }
}
DropdownDirectionDirective.ɵfac = function DropdownDirectionDirective_Factory(t) { return new (t || DropdownDirectionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
DropdownDirectionDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DropdownDirectionDirective, selectors: [["", "dropdown", "", "c8yBsDropdownDirection", ""], ["", "dropdown", "", "c8yDropdownDirection", ""]], hostBindings: function DropdownDirectionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownDirectionDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } } });
DropdownDirectionDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
DropdownDirectionDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownDirectionDirective, [{
        type: Directive,
        args: [{ selector: '[dropdown][c8yBsDropdownDirection],[dropdown][c8yDropdownDirection]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tZGlyZWN0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vZHJvcGRvd24tZGlyZWN0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxNQUFNLE9BQU8sMEJBQTBCO0FBQ3ZDLElBSUUsWUFBb0IsVUFBc0IsRUFBVSxRQUFtQjtBQUFJLFFBQXZELGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUFTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUp2RCxrQkFBYSxHQUFXLEVBQUUsQ0FBQztBQUM5QyxRQUFtQixlQUFVLEdBQVcsWUFBWSxDQUFDO0FBQ3JELFFBQW1CLFdBQU0sR0FBVyxRQUFRLENBQUM7QUFDN0MsSUFDNEUsQ0FBQztBQUM3RSxJQUVFLE9BQU87QUFDVCxRQUFJLE1BQU0sSUFBSSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkYsUUFDSSxJQUFJLElBQUksRUFBRTtBQUNkLFlBQU0sSUFBSSxJQUFpQixDQUFDO0FBQzVCLFlBQU0sSUFBSSxNQUFtQixDQUFDO0FBQzlCLFlBQ00sT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQW9CLEVBQUUsRUFBRTtBQUMvRSxnQkFBUSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFO0FBQ3pELG9CQUFVLElBQUksR0FBRyxPQUFPLENBQUM7QUFDekIsaUJBQVM7QUFDVCxnQkFDUSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7QUFDM0Qsb0JBQVUsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUMzQixpQkFBUztBQUNULFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxZQUNNLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTtBQUMxQixnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRSxnQkFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4QyxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pELGFBQU87QUFDUCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDVSxZQUFZLENBQUMsU0FBc0IsRUFBRSxRQUFxQjtBQUNwRSxRQUFJLE1BQU0sZUFBZSxHQUFXLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztBQUM3RSxRQUFJLE1BQU0scUJBQXFCLEdBQVcsUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ2xGLFFBQUksTUFBTSxjQUFjLEdBQVcsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUN0RCxRQUNJLE1BQU0sR0FBRyxHQUFHLGVBQWUsR0FBRyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzdFLFFBQ0ksSUFBSSxHQUFHLElBQUksY0FBYyxFQUFFO0FBQy9CLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pFLFNBQUs7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDOUUsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUUsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO3NEQS9DQyxTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUscUVBQXFFLEVBQUM7OztXQUN2RjtBQUFDO0FBQ1UsWUFqQ0ksVUFBVTtBQUFJLFlBQVksU0FBUztBQUFHO0FBQUc7QUFDbEMsc0JBc0N4QixZQUFZLFNBQUMsT0FBTztBQUNuQjs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9yRWFjaCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbi8qKlxuICogQSBkaXJlY3RpdmUgdG8gZGV0ZXJtaW5lIGlmIGEgZHJvcGRvd24gc2hvdWxkIG9wZW4gdG8gdGhlIHRvcCBvciBhcyB1c3VhbCB0byB0aGUgYm90dG9tLlxuICogVGhpcyBkaXJlY3RpdmUgaGFzIGEgZGlyZWN0IGRlcGVuZGVuY3kgdG8gdGhlIGJvb3RzdHJhcCBkcm9wZG93biAoISlcbiAqXG4gKiBQcmVjb25kaXRpb25zOlxuICogIC0gQm9vdHN0cmFwIGRyb3Bkb3duIGlzIHVzZWRcbiAqICAtIEJvb3RzdHJhcCBkcm9wZG93biBpcyBub3QgdXNlZCB3aXRoIGNvbnRhaW5lcj1cImJvZHlcIlxuICogIC0gQm9vdHN0cmFwIGRyb3Bkb3duIGlzIHVzZWQgbGlrZSBpdCBpcyBpbnRlbmRlZCBhbmQgZG9jdW1lbnRlZCBmb3IgZS5nLlxuICogYGBgaHRtbFxuICogPGRpdiBkcm9wZG93biBjbGFzcz1cImRyb3Bkb3duXCI+XG4gKiAgPGJ1dHRvbiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRyb3Bkb3duVG9nZ2xlPlRvZ2dsZTwvYnV0dG9uPlxuICogIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiAqZHJvcGRvd25NZW51PlxuICogICAgPCEtLSBDb250ZW50IGhlcmUgLS0+XG4gKiAgPC91bD5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgZHJvcGRvd24gYzh5QnNEcm9wZG93bkRpcmVjdGlvbiBjbGFzcz1cImRyb3Bkb3duXCI+XG4gKiAgPGJ1dHRvbiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRyb3Bkb3duVG9nZ2xlPlRvZ2dsZTwvYnV0dG9uPlxuICogIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiAqZHJvcGRvd25NZW51PlxuICogICAgPCEtLSBDb250ZW50IGhlcmUgLS0+XG4gKiAgPC91bD5cbiAqIDwvZGl2PlxuICogYGBgXG4gKiBZb3UgbWFrZSB1c2Ugb2YgdGhlIGJvb3RzdHJhcCBkcm9wZG93biBhcyB1c3VhbCBhbmQgYWRkaXRpb25hbGx5IGFkZCB0aGUgZGlyZWN0aW9uIGRpcmVjdGl2ZSB0byBpdC5cbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbZHJvcGRvd25dW2M4eUJzRHJvcGRvd25EaXJlY3Rpb25dLFtkcm9wZG93bl1bYzh5RHJvcGRvd25EaXJlY3Rpb25dJ30pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25EaXJlY3Rpb25EaXJlY3RpdmUge1xuICBwcml2YXRlIHJlYWRvbmx5IE1BUkdJTl9CT1RUT006IG51bWJlciA9IDEwO1xuICBwcml2YXRlIHJlYWRvbmx5IFZJU0lCSUxJVFk6IHN0cmluZyA9ICd2aXNpYmlsaXR5JztcbiAgcHJpdmF0ZSByZWFkb25seSBEUk9QVVA6IHN0cmluZyA9ICdkcm9wdXAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBjb25zdCBvcGVuOiBib29sZWFuID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJyk7XG5cbiAgICBpZiAob3Blbikge1xuICAgICAgbGV0IG1lbnU6IEhUTUxFbGVtZW50O1xuICAgICAgbGV0IHRvZ2dsZTogSFRNTEVsZW1lbnQ7XG5cbiAgICAgIGZvckVhY2godGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4sIChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duLW1lbnUnKSkge1xuICAgICAgICAgIG1lbnUgPSBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkcm9wZG93bi10b2dnbGUnKSkge1xuICAgICAgICAgIHRvZ2dsZSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAobWVudSAmJiB0b2dnbGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShtZW51LCB0aGlzLlZJU0lCSUxJVFksICdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy5zaG91bGREcm9wdXAobWVudSwgdG9nZ2xlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZShtZW51LCB0aGlzLlZJU0lCSUxJVFkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkRHJvcHVwKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHBvc2l0aW9uOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodDogbnVtYmVyID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICBjb25zdCBjb250YWluZXJEcm9wUG9zaXRpb246IG51bWJlciA9IHBvc2l0aW9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICBjb25zdCBsYXlvdXRWaWV3cG9ydDogbnVtYmVyID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgY29uc3Qgc3VtID0gY29udGFpbmVySGVpZ2h0ICsgY29udGFpbmVyRHJvcFBvc2l0aW9uICsgdGhpcy5NQVJHSU5fQk9UVE9NO1xuXG4gICAgaWYgKHN1bSA+PSBsYXlvdXRWaWV3cG9ydCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5EUk9QVVApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuRFJPUFVQKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5EUk9QVVApO1xuICAgIH1cbiAgfVxufVxuIl19