import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ComponentFactoryResolver, Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { assign, get } from 'lodash-es';
import { combineLatest, isObservable, of, pipe, Subject } from 'rxjs';
import { filter, map, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from './load-more.component';
import { VirtualScrollerWrapperComponent } from './virtual-scroll/virtual-scroller-wrapper.component';
/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 *
 * Example with realtime support and items count output (e.g. for handling empty state and header):
 *
 * ```html
 * <c8y-list-group>
 *   <div class="c8y-empty-state" *ngIf="count === 0">
 *     (...)
 *   </div>
 *
 *   <div class="page-sticky-header hidden-xs c8y-list__item c8y-list--timeline" *ngIf="count > 0">
 *     (...)
 *   </div>
 *
 *   <ng-template
 *     c8yFor
 *     let-operation
 *     [c8yForOf]="items$"
 *     [c8yForPipe]="filterPipe"
 *     [c8yForRealtime]="realtime"
 *     [c8yForRealtimeOptions]="realtimeOptions"
 *     (c8yForCount)="count = $event"
 *   >
 *     <c8y-li-timeline>
 *       (...)
 *     </c8y-li-timeline>
 *   </ng-template>
 * </c8y-list-group>
 * ```
 *
 * ```typescript
 * @Component({
 *   (...)
 * })
 * export class ExampleComponent {
 *   @Input() deviceId: IIdentified;
 *   items$ = this.operationService.list({
 *     deviceId: this.deviceId,
 *     fragmentType: 'c8y_MyOperation',
 *     dateFrom: new Date(0).toISOString(),
 *     dateTo: new Date(Date.now()).toISOString(),
 *     revert: true,
 *     withTotalPages: true
 *   });
 *   filterPipe = pipe(map((ops: IOperation[]) => ops.filter(op => op.c8y_MyOperation)));
 *   realtimeOptions: ForOfRealtimeOptions = {
 *     entityOrId: this.deviceId,
 *     removeOnUpdate: true,
 *     insertOnUpdate: true
 *   } as ForOfRealtimeOptions;
 *   count: number;
 *
 *   constructor(
 *     private operationService: OperationService,
 *     public realtime: OperationRealtimeService
 *   ) {}
 * }
 * ```
 */
export class ForOfDirective {
    constructor(tpl, vcr, componentFactoryResolver) {
        this.tpl = tpl;
        this.vcr = vcr;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cachedData = [];
        this.loadMoreMode = 'auto';
        this.dataPipe = pipe(tap());
        this.itemDataPipe = pipe(map(item => [item]), src => this.dataPipe(src), map(([item]) => item));
        this.maxIterations = 10;
        this.realtimeOptions = {};
        this.unsubscribe$ = new Subject();
        /**
         * Enable virtual scroll rendering method.
         */
        this.c8yForEnableVirtualScroll = false;
        /**
         * Sets mode of virtual scroller instance.
         * window is used for case when whole viewport is scrolled.
         * fixed can be used on inner-scroll containers.
         */
        this.c8yForVirtualScrollStrategy = 'window';
        /**
         * The number of items currently loaded in the list.
         */
        this.c8yForCount = new EventEmitter();
        this.count = 0;
    }
    get shouldUseLoadMoreButton() {
        return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
    }
    get hasMoreData() {
        return this.loadMore && this.loadMore.hasMore;
    }
    get length() {
        return this.cachedData.length;
    }
    /**
     * The data setter. Must be a response from @c8y/data or an observable.
     * You can pass an observable with null to explicitly clear the list.
     */
    set c8yForOf(fetchData) {
        if (fetchData) {
            this.obs$ = (isObservable(fetchData) ? fetchData : of(fetchData)).pipe(map(result => {
                if (result === null) {
                    this.paging = null;
                    return [];
                }
                const { paging, data } = result;
                this.paging = paging;
                return data;
            }));
        }
    }
    /**
     * The mode setter:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     */
    set c8yForLoadMore(type) {
        this.loadMoreMode = type;
    }
    /**
     * The pipe setter to attach any rxjs pipe to the current and more loaded data.
     */
    set c8yForPipe(dataPipe) {
        if (dataPipe) {
            this.dataPipe = dataPipe;
        }
    }
    /**
     * A template to use if no data is found at all (e.g. if you apply a filter pipe).
     */
    set c8yForNotFound(notFoundTemplate) {
        this.notFoundTemplate = notFoundTemplate;
        if (this.loadMore) {
            this.loadMore.noMoreDataHint = notFoundTemplate;
        }
    }
    /**
     * The maximum numbers of iterations to call data from the api.
     */
    set c8yForMaxIterations(maxIterations) {
        this.maxIterations = maxIterations;
    }
    /**
     * A custom loading component.
     */
    set c8yForLoadingTemplate(loadingTemplate) {
        this.loadingTemplate = loadingTemplate;
    }
    /**
     * Load next text label.
     */
    set c8yForLoadNextLabel(loadNextLabel) {
        this.loadNextLabel = loadNextLabel;
    }
    /**
     * A RealtimeService instance.
     */
    set c8yForRealtime(source) {
        this.realtime = source;
    }
    /**
     * Realtime options.
     */
    set c8yForRealtimeOptions(realtimeOptions) {
        this.realtimeOptions = realtimeOptions;
    }
    /**
     * A comparator function for comparing list items. Used to determine
     * the position at which a new element should be added to the list.
     */
    set c8yForComparator(comparator) {
        this.comparator = comparator;
    }
    ngOnInit() {
        this.handleRealtime();
    }
    ngOnChanges(changes) {
        if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
            this.unsubscribePaging();
            if (this.virtualScrollInstance) {
                this.virtualScrollInstance.filterPipe = this.dataPipe;
                window.scrollTo({ top: 0 });
            }
            // only re-rendering  on filtering if all data is already loaded
            // from the backend
            const reRender = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
            if (reRender) {
                this.obs$ = of(this.cachedData);
            }
            this.pagingSub = this.obs$
                .pipe(tap(data => {
                if (!reRender) {
                    this.cachedData = data;
                }
            }))
                .pipe(src => this.dataPipe(src))
                .subscribe((data) => {
                this.updateCount(data.length);
                this.render(data, reRender);
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribePaging();
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    handleRealtime() {
        if (this.realtime) {
            this.handleRealtimeCreate();
            this.handleRealtimeUpdate();
            this.handleRealtimeDelete();
        }
    }
    /**
     * On create notification:
     * - if item passes data pipe, then insert it.
     * @private
     */
    handleRealtimeCreate() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onCreate$(entityOrId)
            .pipe(item$ => this.itemDataPipe(item$), filter(item => item), takeUntil(this.unsubscribe$))
            .subscribe(item => this.insert(item));
    }
    /**
     * On update notification:
     * - if item is displayed and passes data pipe, then update it,
     * - if item is displayed and doesn't pass data pipe, then remove it (if `removeOnUpdate` is true),
     * - if item is not displayed and passes data pipe, then insert it (if `insertOnUpdate` is true),
     * - if item is not displayed and doesn't pass data pipe, then ignore it.
     * @private
     */
    handleRealtimeUpdate() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onUpdate$(entityOrId)
            .pipe(item$ => combineLatest([
            item$,
            item$.pipe(src => this.itemDataPipe(src), map(item => item !== undefined))
        ]), takeUntil(this.unsubscribe$))
            .subscribe(([item, passesDataPipe]) => {
            const { insertOnUpdate, removeOnUpdate } = this.realtimeOptions;
            const displayed = this.isDisplayed(coerceNumberProperty(item.id));
            if (displayed) {
                if (passesDataPipe) {
                    this.update(item);
                }
                else if (removeOnUpdate) {
                    this.remove(coerceNumberProperty(item.id));
                }
            }
            else if (passesDataPipe && insertOnUpdate) {
                this.insert(item);
            }
        });
    }
    /**
     * On delete notification:
     * - remove item from the list (if not there, it will be just ignored).
     * @private
     */
    handleRealtimeDelete() {
        const { entityOrId } = this.realtimeOptions;
        this.realtime
            .onDelete$(entityOrId)
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(id => this.remove(coerceNumberProperty(id)));
    }
    render(data, reRender = false) {
        if (this.c8yForEnableVirtualScroll) {
            if (!this.virtualScrollInstance) {
                this.virtualScrollInstance = this.createVirtualScrollWrapperComponent();
                if (this.shouldUseLoadMoreButton) {
                    this.loadMore = this.createLoadMoreButtonComponent(false);
                }
            }
            this.setVirtualScrollContents(data);
            return;
        }
        this.vcr.clear();
        data.forEach((item, index) => {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData,
                loadMoreComponent: this.loadMore
            };
            this.vcr.createEmbeddedView(this.tpl, context);
        });
        if (this.shouldUseLoadMoreButton) {
            this.loadMore = this.createLoadMoreButtonComponent(reRender);
        }
    }
    append(data) {
        if (this.c8yForEnableVirtualScroll) {
            this.appendVirtualScrollContent(data);
            return;
        }
        data.forEach(item => {
            const index = this.shouldUseLoadMoreButton ? this.vcr.length - 1 : this.vcr.length;
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData,
                loadMoreComponent: this.loadMore
            };
            this.vcr.createEmbeddedView(this.tpl, context, index);
        });
    }
    loadMoreData(data) {
        if (data.length > 0) {
            this.updateCount(data.length);
            this.append(data);
        }
    }
    createLoadMoreButtonComponent(reRender) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
        const componentRef = this.vcr.createComponent(componentFactory);
        const instance = componentRef.instance;
        instance.paging = this.paging;
        instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
        instance.hidden = this.loadMoreMode === 'hidden';
        instance.maxIterations = this.maxIterations;
        instance.noMoreDataHint = this.notFoundTemplate;
        instance.loadingTemplate = this.loadingTemplate;
        instance.loadNextLabel = this.loadNextLabel;
        this.pagingSub = instance.onLoad
            .pipe(map((data) => this.checkForDuplicates(data)), tap((data) => {
            this.cachedData = this.cachedData.concat(data);
        }))
            .pipe(src => this.dataPipe(src))
            .subscribe(data => this.loadMoreData(data));
        if (reRender) {
            assign(instance, this.loadMore);
        }
        return instance;
    }
    createVirtualScrollWrapperComponent() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(VirtualScrollerWrapperComponent);
        const componentRef = this.vcr.createComponent(componentFactory);
        const instance = componentRef.instance;
        instance.items = this.cachedData;
        instance.itemHeight = this.c8yForVirtualScrollElementSize;
        instance.template = this.tpl;
        instance.strategy = this.c8yForVirtualScrollStrategy;
        instance.containerHeight = this.c8yForVirtualScrollContainerHeight;
        return instance;
    }
    insert(item) {
        let index = 0;
        if (this.comparator && this.cachedData.length) {
            let comparisionResult;
            do {
                const view = this.vcr.get(index);
                const itemB = get(view, 'context.$implicit');
                comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                if (comparisionResult <= 0) {
                    index++;
                }
            } while (comparisionResult <= 0 && index < this.cachedData.length);
        }
        // Do not append elements after the last one currently loaded,
        // as it may belong further down there on the list and will
        // be eventually loaded with one of the next pages.
        if (index < this.cachedData.length || this.cachedData.length === 0) {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.cachedData.splice(index, 0, item);
            const viewRef = this.tpl.createEmbeddedView(context);
            this.vcr.insert(viewRef, index);
            this.updateCount(1);
        }
    }
    update(updatedItem) {
        this.forMatchingEmbeddedViewRef((item) => item && updatedItem && item.id === updatedItem.id, (view) => {
            view.context.$implicit = updatedItem;
            view.markForCheck();
        });
    }
    remove(idToRemove) {
        if (this.isDisplayed(idToRemove)) {
            this.updateCount(-1);
        }
        this.forMatchingEmbeddedViewRef((item) => item && coerceNumberProperty(item.id, NaN) === idToRemove, (view) => view.destroy());
    }
    updateCount(countChange) {
        this.count += countChange;
        this.c8yForCount.emit(this.count);
    }
    isDisplayed(idToCheck) {
        let displayed = false;
        this.forMatchingEmbeddedViewRef((item) => item && coerceNumberProperty(item.id, NaN) === idToCheck, () => { displayed = true; });
        return displayed;
    }
    forMatchingEmbeddedViewRef(filterFn, callbackFn) {
        for (let i = 0; i < this.vcr.length; i++) {
            const view = this.vcr.get(i);
            const item = get(view, 'context.$implicit');
            if (filterFn(item)) {
                callbackFn(view);
            }
        }
    }
    checkForDuplicates(data) {
        return this.realtime
            ? data.filter(item => !this.cachedData.some(cached => cached.id === item.id))
            : data;
    }
    unsubscribePaging() {
        if (this.pagingSub) {
            this.pagingSub.unsubscribe();
        }
    }
    setVirtualScrollContents(items) {
        if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
            this.virtualScrollInstance.items = items;
            this.virtualScrollInstance.apply();
        }
    }
    appendVirtualScrollContent(items) {
        if (this.c8yForEnableVirtualScroll && this.virtualScrollInstance) {
            this.virtualScrollInstance.items = this.virtualScrollInstance.items.concat(items);
            this.virtualScrollInstance.apply();
        }
    }
}
ForOfDirective.decorators = [
    { type: Directive, args: [{
                selector: '[c8yFor]'
            },] }
];
ForOfDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
ForOfDirective.propDecorators = {
    c8yForOf: [{ type: Input }],
    c8yForLoadMore: [{ type: Input }],
    c8yForPipe: [{ type: Input }],
    c8yForNotFound: [{ type: Input }],
    c8yForMaxIterations: [{ type: Input }],
    c8yForLoadingTemplate: [{ type: Input }],
    c8yForLoadNextLabel: [{ type: Input }],
    c8yForRealtime: [{ type: Input }],
    c8yForRealtimeOptions: [{ type: Input }],
    c8yForComparator: [{ type: Input }],
    c8yForEnableVirtualScroll: [{ type: Input }],
    c8yForVirtualScrollElementSize: [{ type: Input }],
    c8yForVirtualScrollStrategy: [{ type: Input }],
    c8yForVirtualScrollContainerHeight: [{ type: Input }],
    c8yForCount: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,