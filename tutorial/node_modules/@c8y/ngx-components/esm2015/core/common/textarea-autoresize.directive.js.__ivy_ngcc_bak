import { Directive, HostListener, ElementRef } from '@angular/core';
export class TextareaAutoresizeDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.focused = false;
        this.resizeObserver = new window.ResizeObserver(() => !this.focused && this.resize());
    }
    onInput() {
        this.resize();
    }
    onFocus() {
        this.focused = true;
    }
    onBlur() {
        this.focused = false;
    }
    ngOnInit() {
        var _a;
        this.resizeObserver.observe((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
        setTimeout(() => this.resize());
    }
    ngOnDestroy() {
        var _a;
        this.resizeObserver.unobserve((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
    }
    resize() {
        var _a;
        this.elementRef.nativeElement.style.height = '32px';
        this.elementRef.nativeElement.style.height = ((_a = this.elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollHeight) + 'px';
    }
}
TextareaAutoresizeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[c8y-textarea-autoresize]'
            },] }
];
TextareaAutoresizeDirective.ctorParameters = () => [
    { type: ElementRef }
];
TextareaAutoresizeDirective.propDecorators = {
    onInput: [{ type: HostListener, args: [':input',] }],
    onFocus: [{ type: HostListener, args: [':focus',] }],
    onBlur: [{ type: HostListener, args: [':blur',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEtYXV0b3Jlc2l6ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi90ZXh0YXJlYS1hdXRvcmVzaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFNNUUsTUFBTSxPQUFPLDJCQUEyQjtJQUd0QyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRmxDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsbUJBQWMsR0FBRyxJQUFLLE1BQWMsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFJL0MsT0FBTztRQUNMLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBR0QsT0FBTztRQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFHRCxNQUFNO1FBQ0osSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELFFBQVE7O1FBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxhQUFhLENBQUMsQ0FBQztRQUM1RCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVc7O1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxhQUFhLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsTUFBTTs7UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUEsTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxhQUFhLENBQUMsWUFBWSxJQUFHLElBQUksQ0FBQztJQUNsRyxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7OztZQUxpQyxVQUFVOzs7c0JBV3pDLFlBQVksU0FBQyxRQUFRO3NCQU1yQixZQUFZLFNBQUMsUUFBUTtxQkFLckIsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0aHJlYWRJZCB9IGZyb20gJ3dvcmtlcl90aHJlYWRzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eS10ZXh0YXJlYS1hdXRvcmVzaXplXSdcbn0pXG5leHBvcnQgY2xhc3MgVGV4dGFyZWFBdXRvcmVzaXplRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBmb2N1c2VkID0gZmFsc2U7XG4gIHByaXZhdGUgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgKHdpbmRvdyBhcyBhbnkpLlJlc2l6ZU9ic2VydmVyKCgpID0+ICF0aGlzLmZvY3VzZWQgJiYgdGhpcy5yZXNpemUoKSk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignOmlucHV0JylcblxuICBvbklucHV0KCkge1xuICAgIHRoaXMucmVzaXplKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCc6Zm9jdXMnKVxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMuZm9jdXNlZCA9IHRydWU7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCc6Ymx1cicpXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWY/Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZXNpemUoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWY/Lm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcmVzaXplKCkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmhlaWdodCA9ICczMnB4JztcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmVsZW1lbnRSZWY/Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgfVxufVxuIl19