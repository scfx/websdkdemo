import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { Permissions } from './permissions.service';
/**
 * A structural directive that conditionally includes a template only if the user has
 * all or any of the roles passed as an input. By default the directive checks all roles:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * or use the shorter version
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 */
export class IfAllowedDirective {
    constructor(template, container, permissions) {
        this.template = template;
        this.container = container;
        this.permissions = permissions;
        this.allowAny = false;
    }
    /**
     * One or many roles required for the element to be rendered
     */
    set c8yIfAllowed(roleIds) {
        this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
    }
    /**
     * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
     */
    set c8yIfAllowedAllowAny(allowAny) {
        this.allowAny = allowAny === null || allowAny;
    }
    ngOnInit() {
        if (!this.rolesIds ||
            !this.rolesIds.length ||
            (this.allowAny
                ? this.permissions.hasAnyRole(this.rolesIds)
                : this.permissions.hasAllRoles(this.rolesIds))) {
            this.container.createEmbeddedView(this.template);
        }
    }
}
IfAllowedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[c8yIfAllowed]'
            },] }
];
IfAllowedDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Permissions }
];
IfAllowedDirective.propDecorators = {
    c8yIfAllowed: [{ type: Input }],
    c8yIfAllowedAllowAny: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtYWxsb3dlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi9pZi1hbGxvd2VkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeUJHO0FBSUgsTUFBTSxPQUFPLGtCQUFrQjtJQW9CN0IsWUFDVSxRQUEwQixFQUMxQixTQUEyQixFQUMzQixXQUF3QjtRQUZ4QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUwxQixhQUFRLEdBQVksS0FBSyxDQUFDO0lBTS9CLENBQUM7SUF2Qko7O09BRUc7SUFDSCxJQUNJLFlBQVksQ0FBQyxPQUEwQjtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7T0FFRztJQUNILElBQ0ksb0JBQW9CLENBQUMsUUFBaUI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQztJQUNoRCxDQUFDO0lBV0QsUUFBUTtRQUNOLElBQ0UsQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUNkLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ3JCLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDaEQ7WUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7OztZQXZDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7O1lBL0IwQixXQUFXO1lBQUUsZ0JBQWdCO1lBQy9DLFdBQVc7OzsyQkFtQ2pCLEtBQUs7bUNBUUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucyB9IGZyb20gJy4vcGVybWlzc2lvbnMuc2VydmljZSc7XG5cbi8qKlxuICogQSBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZSB0aGF0IGNvbmRpdGlvbmFsbHkgaW5jbHVkZXMgYSB0ZW1wbGF0ZSBvbmx5IGlmIHRoZSB1c2VyIGhhc1xuICogYWxsIG9yIGFueSBvZiB0aGUgcm9sZXMgcGFzc2VkIGFzIGFuIGlucHV0LiBCeSBkZWZhdWx0IHRoZSBkaXJlY3RpdmUgY2hlY2tzIGFsbCByb2xlczpcbiAqXG4gKiBgYGBcbiAqIDxidXR0b24gKmM4eUlmQWxsb3dlZD1cIlsnUk9MRV9SRUNPUkRfREVMRVRFJywgJ1JPTEVfRU5UUllfREVMRVRFJ11cIiAoY2xpY2spPVwiZGVsZXRlKClcIiB0aXRsZT1cIkRlbGV0ZVwiPlxuICogICBEZWxldGVcbiAqIDwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogVG8gY2hlY2sgaWYgdGhlIHVzZXIgaGFzIGFueSBvZiB0aGUgcmVxdWlyZWQgcm9sZXMgdG8gdmlldyB0aGUgZWxlbWVudCB5b3UgbmVlZCB0byB1c2UgdGhlIGBhbGxvd0FueWAgaW5wdXQ6XG4gKlxuICogYGBgXG4gKiA8YnV0dG9uICpjOHlJZkFsbG93ZWQ9XCJbJ1JPTEVfUkVDT1JEX0RFTEVURScsICdST0xFX0VOVFJZX0RFTEVURSddOyBhbGxvd0FueTogdHJ1ZVwiIChjbGljayk9XCJkZWxldGUoKVwiIHRpdGxlPVwiRGVsZXRlXCI+XG4gKiAgIERlbGV0ZVxuICogPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBvciB1c2UgdGhlIHNob3J0ZXIgdmVyc2lvblxuICpcbiAqIGBgYFxuICogPGJ1dHRvbiAqYzh5SWZBbGxvd2VkPVwiWydST0xFX1JFQ09SRF9ERUxFVEUnLCAnUk9MRV9FTlRSWV9ERUxFVEUnXTsgYWxsb3dBbnlcIiAoY2xpY2spPVwiZGVsZXRlKClcIiB0aXRsZT1cIkRlbGV0ZVwiPlxuICogICBEZWxldGVcbiAqIDwvYnV0dG9uPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjOHlJZkFsbG93ZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZkFsbG93ZWREaXJlY3RpdmUge1xuICAvKipcbiAgICogT25lIG9yIG1hbnkgcm9sZXMgcmVxdWlyZWQgZm9yIHRoZSBlbGVtZW50IHRvIGJlIHJlbmRlcmVkXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgYzh5SWZBbGxvd2VkKHJvbGVJZHM6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5yb2xlc0lkcyA9IEFycmF5LmlzQXJyYXkocm9sZUlkcykgPyByb2xlSWRzIDogISFyb2xlSWRzID8gW3JvbGVJZHNdIDogW107XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gdGhlIG1vZGUgd2hlcmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBwcm92aWRlZCByb2xlcyBpcyBzdWZmaWNpZW50IGZvciB0aGUgZWxlbWVudCB0byBiZSByZW5kZXJlZFxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGM4eUlmQWxsb3dlZEFsbG93QW55KGFsbG93QW55OiBib29sZWFuKSB7XG4gICAgdGhpcy5hbGxvd0FueSA9IGFsbG93QW55ID09PSBudWxsIHx8IGFsbG93QW55O1xuICB9XG5cbiAgcHJpdmF0ZSByb2xlc0lkczogc3RyaW5nW107XG4gIHByaXZhdGUgYWxsb3dBbnk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5yb2xlc0lkcyB8fFxuICAgICAgIXRoaXMucm9sZXNJZHMubGVuZ3RoIHx8XG4gICAgICAodGhpcy5hbGxvd0FueVxuICAgICAgICA/IHRoaXMucGVybWlzc2lvbnMuaGFzQW55Um9sZSh0aGlzLnJvbGVzSWRzKVxuICAgICAgICA6IHRoaXMucGVybWlzc2lvbnMuaGFzQWxsUm9sZXModGhpcy5yb2xlc0lkcykpXG4gICAgKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZSk7XG4gICAgfVxuICB9XG59XG4iXX0=