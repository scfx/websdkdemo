import { __awaiter } from "tslib";
import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';
import { camelCase, isUndefined } from 'lodash-es';
import { ApplicationOptions } from './ApplicationOptions';
import { SystemOptionsService, TenantOptionsService } from '@c8y/ngx-components/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/api';
export const HOOK_OPTIONS = new InjectionToken('App options');
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
export class OptionsService extends ApplicationOptions {
    constructor(options, systemOptionsService, tenantOptionService) {
        super();
        this.systemOptionsService = systemOptionsService;
        this.tenantOptionService = tenantOptionService;
        this.setupOptions(options);
    }
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     */
    get(optionKey, defaultValue) {
        let value = this[optionKey];
        if (typeof value === 'undefined') {
            value = this[camelCase(optionKey)];
        }
        return typeof value !== 'undefined' ? value : defaultValue;
    }
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    set(key, value) {
        this[camelCase(key)] = value;
    }
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    getSupportUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = yield this.getTenantOption('configuration', 'system.support.url');
            if (isUndefined(url)) {
                url = this.supportUrl;
            }
            this.supportUrl = isUndefined(url) ? (yield this.getSystemOption('support', 'url')) || false : url;
            return this.supportUrl;
        });
    }
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    getActivateSupportUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const option = yield this.getSystemOption('support-user', 'enabled', true);
            return !option;
        });
    }
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getSystemOption(category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.systemOptionsService, defaultValue);
        });
    }
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getTenantOption(category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.tenantOptionService, defaultValue);
        });
    }
    setupOptions(options) {
        if (options) {
            if (!Array.isArray(options)) {
                options = [options];
            }
            options.forEach(optionMap => {
                if (optionMap) {
                    Object.keys(optionMap).forEach(key => {
                        this[camelCase(key)] = optionMap[key];
                    });
                }
            });
        }
    }
    getOptionFromService(category, key, service, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield service.detail({ category, key });
                return this.parseOptionRawValue(data.value, defaultValue);
            }
            catch (ex) {
                return defaultValue;
            }
        });
    }
    parseOptionRawValue(rawValue, defaultValue) {
        let value;
        try {
            value = JSON.parse(rawValue);
        }
        catch (e) {
            value = isUndefined(rawValue) ? defaultValue : rawValue;
        }
        return value;
    }
}
OptionsService.ɵfac = function OptionsService_Factory(t) { return new (t || OptionsService)(ɵngcc0.ɵɵinject(HOOK_OPTIONS, 8), ɵngcc0.ɵɵinject(ɵngcc1.SystemOptionsService), ɵngcc0.ɵɵinject(ɵngcc1.TenantOptionsService)); };
OptionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OptionsService, factory: OptionsService.ɵfac });
OptionsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_OPTIONS,] }] },
    { type: SystemOptionsService },
    { type: TenantOptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionsService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_OPTIONS]
            }] }, { type: ɵngcc1.SystemOptionsService }, { type: ɵngcc1.TenantOptionsService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,