import { Injectable } from '@angular/core';
import { PatternMessagesService } from './pattern-messages.service';
import { TranslateParser } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from './pattern-messages.service';
export class MissingTranslationCustomHandler {
    constructor(parser, patternMessagesService) {
        this.parser = parser;
        this.patternMessagesService = patternMessagesService;
        this.cache = {};
    }
    handle(params) {
        const { key: messageKey, interpolateParams, translateService } = params;
        this.translateService = translateService;
        let translation = this.getFromCache(messageKey, interpolateParams);
        if (!translation) {
            const patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
            if (patternMessageTranslation) {
                translation = patternMessageTranslation;
            }
            else {
                translation = this.parser.interpolate(messageKey, interpolateParams);
            }
            this.addToCache(messageKey, interpolateParams, translation);
        }
        return translation;
    }
    getFromCache(messageKey, interpolateParams) {
        const { currentLang } = this.translateService;
        const currentCache = this.cache[currentLang] || {};
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        return currentCache[cacheKey];
    }
    addToCache(messageKey, interpolateParams, translation) {
        const { currentLang } = this.translateService;
        const currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        currentCache[cacheKey] = translation;
    }
    getCacheKey(messageKey, interpolateParams) {
        return interpolateParams ? `${messageKey} ${JSON.stringify(interpolateParams)}` : messageKey;
    }
    getPatternMessageTranslation(messageKey, interpolateParams) {
        const shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
        if (shouldTryPatternMessages) {
            if (!this.patternMessagesService.translateService) {
                this.patternMessagesService.translateService = this.translateService;
            }
            return this.patternMessagesService.translate(messageKey);
        }
        return undefined;
    }
}
MissingTranslationCustomHandler.ɵfac = function MissingTranslationCustomHandler_Factory(t) { return new (t || MissingTranslationCustomHandler)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateParser), ɵngcc0.ɵɵinject(ɵngcc2.PatternMessagesService)); };
MissingTranslationCustomHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MissingTranslationCustomHandler, factory: MissingTranslationCustomHandler.ɵfac });
MissingTranslationCustomHandler.ctorParameters = () => [
    { type: TranslateParser },
    { type: PatternMessagesService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MissingTranslationCustomHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TranslateParser }, { type: ɵngcc2.PatternMessagesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzc2luZy10cmFuc2xhdGlvbi1jdXN0b20uaGFuZGxlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9pMThuL21pc3NpbmctdHJhbnNsYXRpb24tY3VzdG9tLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBR0wsZUFBZSxFQUVoQixNQUFNLHFCQUFxQixDQUFDOzs7O0FBRzdCLE1BQU0sT0FBTywrQkFBK0I7QUFBRyxJQUk3QyxZQUNVLE1BQXVCLEVBQ3ZCLHNCQUE4QztBQUN2RCxRQUZTLFdBQU0sR0FBTixNQUFNLENBQWlCO0FBQUMsUUFDeEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUMxRCxRQUxFLFVBQUssR0FBUSxFQUFFLENBQUM7QUFDbEIsSUFJSyxDQUFDO0FBQ04sSUFDRSxNQUFNLENBQUMsTUFBdUM7QUFDaEQsUUFBSSxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUM1RSxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM3QyxRQUNJLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDdkUsUUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ3RCLFlBQU0sTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDekcsWUFBTSxJQUFJLHlCQUF5QixFQUFFO0FBQ3JDLGdCQUFRLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQztBQUNoRCxhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDN0UsYUFBTztBQUNQLFlBQ00sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEUsU0FBSztBQUNMLFFBQ0ksT0FBTyxXQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDVSxZQUFZLENBQUMsVUFBa0IsRUFBRSxpQkFBeUI7QUFBSSxRQUNwRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQ2xELFFBQUksTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdkQsUUFBSSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3JFLFFBQUksT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxVQUFVLENBQUMsVUFBa0IsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtBQUN2RixRQUFJLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7QUFDbEQsUUFBSSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pGLFFBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNyRSxRQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxXQUFXLENBQUMsVUFBa0IsRUFBRSxpQkFBeUI7QUFBSSxRQUNuRSxPQUFPLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ2pHLElBQUUsQ0FBQztBQUNILElBQ1UsNEJBQTRCLENBQUMsVUFBa0IsRUFBRSxpQkFBeUI7QUFBSSxRQUNwRixNQUFNLHdCQUF3QixHQUFHLENBQUMsaUJBQWlCLElBQUksQ0FBQyxDQUFFLGlCQUF5QixDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDM0csUUFDSSxJQUFJLHdCQUF3QixFQUFFO0FBQ2xDLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsRUFBRTtBQUN6RCxnQkFBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQzdFLGFBQU87QUFDUCxZQUFNLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMvRCxTQUFLO0FBQ0wsUUFDSSxPQUFPLFNBQVMsQ0FBQztBQUNyQixJQUFFLENBQUM7QUFDSDsyREE1REMsVUFBVTsyS0FDVDtBQUFDO0FBQXlELFlBTDFELGVBQWU7QUFDZixZQUxPLHNCQUFzQjtBQUFHOzs7eUhBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhdHRlcm5NZXNzYWdlc1NlcnZpY2UgfSBmcm9tICcuL3BhdHRlcm4tbWVzc2FnZXMuc2VydmljZSc7XG5pbXBvcnQge1xuICBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLFxuICBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyUGFyYW1zLFxuICBUcmFuc2xhdGVQYXJzZXIsXG4gIFRyYW5zbGF0ZVNlcnZpY2Vcbn0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNaXNzaW5nVHJhbnNsYXRpb25DdXN0b21IYW5kbGVyIGltcGxlbWVudHMgTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciB7XG4gIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2U7XG4gIGNhY2hlOiBhbnkgPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBhcnNlcjogVHJhbnNsYXRlUGFyc2VyLFxuICAgIHByaXZhdGUgcGF0dGVybk1lc3NhZ2VzU2VydmljZTogUGF0dGVybk1lc3NhZ2VzU2VydmljZVxuICApIHt9XG5cbiAgaGFuZGxlKHBhcmFtczogTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclBhcmFtcykge1xuICAgIGNvbnN0IHsga2V5OiBtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcywgdHJhbnNsYXRlU2VydmljZSB9ID0gcGFyYW1zO1xuICAgIHRoaXMudHJhbnNsYXRlU2VydmljZSA9IHRyYW5zbGF0ZVNlcnZpY2U7XG5cbiAgICBsZXQgdHJhbnNsYXRpb24gPSB0aGlzLmdldEZyb21DYWNoZShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG5cbiAgICBpZiAoIXRyYW5zbGF0aW9uKSB7XG4gICAgICBjb25zdCBwYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uID0gdGhpcy5nZXRQYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uKG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgIGlmIChwYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uKSB7XG4gICAgICAgIHRyYW5zbGF0aW9uID0gcGF0dGVybk1lc3NhZ2VUcmFuc2xhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0aW9uID0gdGhpcy5wYXJzZXIuaW50ZXJwb2xhdGUobWVzc2FnZUtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZFRvQ2FjaGUobWVzc2FnZUtleSwgaW50ZXJwb2xhdGVQYXJhbXMsIHRyYW5zbGF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gIH1cblxuICBwcml2YXRlIGdldEZyb21DYWNoZShtZXNzYWdlS2V5OiBzdHJpbmcsIGludGVycG9sYXRlUGFyYW1zOiBvYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgY3VycmVudExhbmcgfSA9IHRoaXMudHJhbnNsYXRlU2VydmljZTtcbiAgICBjb25zdCBjdXJyZW50Q2FjaGUgPSB0aGlzLmNhY2hlW2N1cnJlbnRMYW5nXSB8fCB7fTtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2V0Q2FjaGVLZXkobWVzc2FnZUtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgIHJldHVybiBjdXJyZW50Q2FjaGVbY2FjaGVLZXldO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRUb0NhY2hlKG1lc3NhZ2VLZXk6IHN0cmluZywgaW50ZXJwb2xhdGVQYXJhbXM6IG9iamVjdCwgdHJhbnNsYXRpb246IHN0cmluZykge1xuICAgIGNvbnN0IHsgY3VycmVudExhbmcgfSA9IHRoaXMudHJhbnNsYXRlU2VydmljZTtcbiAgICBjb25zdCBjdXJyZW50Q2FjaGUgPSB0aGlzLmNhY2hlW2N1cnJlbnRMYW5nXSA9IHRoaXMuY2FjaGVbY3VycmVudExhbmddIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgY3VycmVudENhY2hlW2NhY2hlS2V5XSA9IHRyYW5zbGF0aW9uO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZUtleShtZXNzYWdlS2V5OiBzdHJpbmcsIGludGVycG9sYXRlUGFyYW1zOiBvYmplY3QpOiBzdHJpbmcge1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZVBhcmFtcyA/IGAke21lc3NhZ2VLZXl9ICR7SlNPTi5zdHJpbmdpZnkoaW50ZXJwb2xhdGVQYXJhbXMpfWAgOiBtZXNzYWdlS2V5O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uKG1lc3NhZ2VLZXk6IHN0cmluZywgaW50ZXJwb2xhdGVQYXJhbXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3Qgc2hvdWxkVHJ5UGF0dGVybk1lc3NhZ2VzID0gIWludGVycG9sYXRlUGFyYW1zIHx8ICEoKGludGVycG9sYXRlUGFyYW1zIGFzIGFueSkubm9QYXR0ZXJuTWVzc2FnZXMpO1xuXG4gICAgaWYgKHNob3VsZFRyeVBhdHRlcm5NZXNzYWdlcykge1xuICAgICAgaWYgKCF0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlU2VydmljZSkge1xuICAgICAgICB0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlU2VydmljZSA9IHRoaXMudHJhbnNsYXRlU2VydmljZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlKG1lc3NhZ2VLZXkpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==