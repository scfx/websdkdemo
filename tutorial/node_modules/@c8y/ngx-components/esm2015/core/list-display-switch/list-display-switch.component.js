import { Component, EventEmitter, Input, Output } from '@angular/core';
import { pipe } from 'rxjs';
import { tap } from 'rxjs/operators';
import { gettext } from '../i18n/gettext';
import { Location } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../i18n/c8y-translate.pipe';

function ListDisplaySwitchComponent_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", option_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(option_r1.label);
} }
export class ListDisplaySwitchComponent {
    constructor(location) {
        this.location = location;
        this.filterPipe = pipe(tap());
        this.onListClassChange = new EventEmitter();
        this.DISPLAY_OPTIONS = [
            {
                name: 'AUTO',
                value: 'auto',
                label: gettext('Auto'),
                default: true,
                getListClass: () => {
                    const option = this._listLength > this.AUTO_GRID_ITEMS_LIMIT
                        ? this.DISPLAY_OPTIONS.find((opt) => opt.name === 'LIST')
                        : this.DISPLAY_OPTIONS.find((opt) => opt.name === 'GRID');
                    return option.getListClass();
                }
            },
            {
                name: 'GRID',
                value: 'grid',
                label: gettext('Grid'),
                getListClass: () => 'interact-grid'
            },
            {
                name: 'LIST',
                value: 'list',
                label: gettext('List'),
                getListClass: () => 'interact-list'
            }
        ];
        this.AUTO_GRID_ITEMS_LIMIT = 12;
    }
    set listLength(val) {
        this._listLength = val;
        this.loadSelectedOption();
    }
    ngOnInit() {
        this.loadSelectedOption();
    }
    onOptionSelect(option) {
        const localStorageKey = this.getLocalStorageKey();
        if (option.default) {
            localStorage.removeItem(localStorageKey);
        }
        else {
            localStorage.setItem(localStorageKey, option.value);
        }
        this.loadSelectedOption();
    }
    loadSelectedOption() {
        this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
        this.onListClassChange.emit(this.selectedOption.getListClass());
    }
    getLocalStorageOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.value === localStorage.getItem(this.getLocalStorageKey()));
    }
    getDefaultOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.default);
    }
    getLocalStorageKey() {
        return `list-display-option[${this.getListKey()}]`;
    }
    getListKey() {
        return this.listKey || this.location.path();
    }
}
ListDisplaySwitchComponent.ɵfac = function ListDisplaySwitchComponent_Factory(t) { return new (t || ListDisplaySwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Location)); };
ListDisplaySwitchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListDisplaySwitchComponent, selectors: [["c8y-list-display-switch"]], inputs: { filterPipe: "filterPipe", listLength: "listLength", listKey: "listKey" }, outputs: { onListClassChange: "onListClassChange" }, decls: 8, vars: 5, consts: [[1, "form-group"], [1, "m-r-8"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"]], template: function ListDisplaySwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "select", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ListDisplaySwitchComponent_Template_select_ngModelChange_5_listener($event) { return ctx.onOptionSelect($event); });
        ɵngcc0.ɵɵtemplate(6, ListDisplaySwitchComponent_option_6_Template, 2, 2, "option", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "Display as"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedOption);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.DISPLAY_OPTIONS);
    } }, directives: [ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵNgSelectMultipleOption], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
ListDisplaySwitchComponent.ctorParameters = () => [
    { type: Location }
];
ListDisplaySwitchComponent.propDecorators = {
    listKey: [{ type: Input }],
    listLength: [{ type: Input, args: ['listLength',] }],
    filterPipe: [{ type: Input }],
    onListClassChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListDisplaySwitchComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-display-switch',
                template: "<div class=\"form-group\">\n  <label class=\"m-r-8\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">{{\n        option.label\n      }}</option></select\n    >\n    <span></span>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Location }]; }, { filterPipe: [{
            type: Input
        }], onListClassChange: [{
            type: Output
        }], listLength: [{
            type: Input,
            args: ['listLength']
        }], listKey: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1kaXNwbGF5LXN3aXRjaC9saXN0LWRpc3BsYXktc3dpdGNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBYyxJQUFJLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBTyxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBTTNDLE1BQU0sT0FBTywwQkFBMEI7QUFBRyxJQXdDeEMsWUFBb0IsUUFBa0I7QUFBSSxRQUF0QixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFqQzlCLGVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNwQyxRQUFZLHNCQUFpQixHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0FBQ2pGLFFBRVcsb0JBQWUsR0FBb0I7QUFDOUMsWUFBSTtBQUNKLGdCQUFNLElBQUksRUFBRSxNQUFNO0FBQ2xCLGdCQUFNLEtBQUssRUFBRSxNQUFNO0FBQ25CLGdCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCLGdCQUFNLE9BQU8sRUFBRSxJQUFJO0FBQ25CLGdCQUFNLFlBQVksRUFBRSxHQUFHLEVBQUU7QUFDekIsb0JBQVEsTUFBTSxNQUFNLEdBQ1YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMscUJBQXFCO0FBQ3ZELHdCQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFD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QUFDO0FBQ2hELElBQUUsQ0FBQztBQUNIO3NEQWxGQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkM7OGFBQW1ELGNBQ3BEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K05BQ0k7QUFBQztBQUFvRCxZQU5qRCxRQUFRO0FBQUc7QUFBRztBQUdaLHNCQUlSLEtBQUs7QUFBSyx5QkFDVixLQUFLLFNBQUMsWUFBWTtBQUNoQix5QkFJRixLQUFLO0FBQUssZ0NBQ1YsTUFBTTtBQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJUmVzdWx0TGlzdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE9ic2VydmFibGUsIHBpcGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IERpc3BsYXlPcHRpb24gfSBmcm9tICcuL2xpc3QtZGlzcGxheS1zd2l0Y2gubW9kZWwnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbGlzdC1kaXNwbGF5LXN3aXRjaCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LWRpc3BsYXktc3dpdGNoLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBMaXN0RGlzcGxheVN3aXRjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGxpc3RLZXk6IHN0cmluZztcbiAgQElucHV0KCdsaXN0TGVuZ3RoJylcbiAgc2V0IGxpc3RMZW5ndGgodmFsOiBudW1iZXIpIHtcbiAgICB0aGlzLl9saXN0TGVuZ3RoID0gdmFsO1xuICAgIHRoaXMubG9hZFNlbGVjdGVkT3B0aW9uKCk7XG4gIH1cbiAgQElucHV0KCkgZmlsdGVyUGlwZSA9IHBpcGUodGFwKCkpO1xuICBAT3V0cHV0KCkgb25MaXN0Q2xhc3NDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIHNlbGVjdGVkT3B0aW9uOiBEaXNwbGF5T3B0aW9uO1xuXG4gIHJlYWRvbmx5IERJU1BMQVlfT1BUSU9OUzogRGlzcGxheU9wdGlvbltdID0gW1xuICAgIHtcbiAgICAgIG5hbWU6ICdBVVRPJyxcbiAgICAgIHZhbHVlOiAnYXV0bycsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnQXV0bycpLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgIGdldExpc3RDbGFzczogKCkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb24gPVxuICAgICAgICAgIHRoaXMuX2xpc3RMZW5ndGggPiB0aGlzLkFVVE9fR1JJRF9JVEVNU19MSU1JVFxuICAgICAgICAgICAgPyB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKChvcHQpID0+IG9wdC5uYW1lID09PSAnTElTVCcpXG4gICAgICAgICAgICA6IHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQoKG9wdCkgPT4gb3B0Lm5hbWUgPT09ICdHUklEJyk7XG4gICAgICAgIHJldHVybiBvcHRpb24uZ2V0TGlzdENsYXNzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnR1JJRCcsXG4gICAgICB2YWx1ZTogJ2dyaWQnLFxuICAgICAgbGFiZWw6IGdldHRleHQoJ0dyaWQnKSxcbiAgICAgIGdldExpc3RDbGFzczogKCkgPT4gJ2ludGVyYWN0LWdyaWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnTElTVCcsXG4gICAgICB2YWx1ZTogJ2xpc3QnLFxuICAgICAgbGFiZWw6IGdldHRleHQoJ0xpc3QnKSxcbiAgICAgIGdldExpc3RDbGFzczogKCkgPT4gJ2ludGVyYWN0LWxpc3QnXG4gICAgfVxuICBdO1xuICBwcml2YXRlIHJlYWRvbmx5IEFVVE9fR1JJRF9JVEVNU19MSU1JVCA9IDEyO1xuICBwcml2YXRlIF9saXN0TGVuZ3RoOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubG9hZFNlbGVjdGVkT3B0aW9uKCk7XG4gIH1cblxuICBvbk9wdGlvblNlbGVjdChvcHRpb246IERpc3BsYXlPcHRpb24pIHtcbiAgICBjb25zdCBsb2NhbFN0b3JhZ2VLZXkgPSB0aGlzLmdldExvY2FsU3RvcmFnZUtleSgpO1xuICAgIGlmIChvcHRpb24uZGVmYXVsdCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obG9jYWxTdG9yYWdlS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlS2V5LCBvcHRpb24udmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLmxvYWRTZWxlY3RlZE9wdGlvbigpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkU2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMuZ2V0TG9jYWxTdG9yYWdlT3B0aW9uKCkgfHwgdGhpcy5nZXREZWZhdWx0T3B0aW9uKCk7XG4gICAgdGhpcy5vbkxpc3RDbGFzc0NoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWRPcHRpb24uZ2V0TGlzdENsYXNzKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2NhbFN0b3JhZ2VPcHRpb24oKTogRGlzcGxheU9wdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQoXG4gICAgICAob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT09IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuZ2V0TG9jYWxTdG9yYWdlS2V5KCkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdE9wdGlvbigpOiBEaXNwbGF5T3B0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5ESVNQTEFZX09QVElPTlMuZmluZCgob3B0aW9uKSA9PiBvcHRpb24uZGVmYXVsdCk7XG4gIH1cblxuICBwcml2YXRlIGdldExvY2FsU3RvcmFnZUtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgbGlzdC1kaXNwbGF5LW9wdGlvblske3RoaXMuZ2V0TGlzdEtleSgpfV1gO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXN0S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGlzdEtleSB8fCB0aGlzLmxvY2F0aW9uLnBhdGgoKTtcbiAgfVxufVxuIl19