import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { ApiService } from '@c8y/ngx-components/api';
import { NEVER, Subject } from 'rxjs';
import { filter, merge, switchMap } from 'rxjs/operators';
import { TabsService } from '../tabs/tabs.service';
import { RouterTabsResolver } from './router-tabs.resolver';
import { ViewContext } from './router.models';
import { ViewContextServices } from './view-context.service';
import * as i0 from "@angular/core";
import * as i1 from "./router-tabs.resolver";
import * as i2 from "../tabs/tabs.service";
import * as i3 from "@angular/router";
import * as i4 from "@c8y/ngx-components/api";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './router-tabs.resolver';
import * as ɵngcc2 from '../tabs/tabs.service';
import * as ɵngcc3 from '@angular/router';
import * as ɵngcc4 from '@c8y/ngx-components/api';
export class ContextRouteService {
    constructor(tabsResolver, tabsService, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
    }
    init(route) {
        this.routerSubscription = this.router.events
            .pipe(filter(e => e instanceof NavigationEnd))
            .subscribe(() => this.redirectToFirstTab());
        this.dataSubscription = route.data
            .pipe(merge(this.updatedContext(route), this.refreshTrigger), switchMap(() => this.tabsResolver.resolve(route.snapshot)))
            .subscribe(tabs => this.updateTabs(tabs));
    }
    destroy() {
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
    }
    refreshContext() {
        this.refreshTrigger.next();
    }
    updatedContext(route) {
        const { data } = route.snapshot;
        const serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            const service = this.injector.get(serviceInstance);
            const detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
            const contextRegex = new RegExp(detailsUrlRegex, 'i');
            const childrenRegex = new RegExp(`${detailsUrlRegex}/child`, 'i');
            const filterResponse = ({ url, method }) => {
                const contextChanged = contextRegex.test(url) && ['POST', 'PUT'].includes(method);
                const childrenAffected = childrenRegex.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    }
    updateTabs(tabs = []) {
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
        this.lastAddedTabs = tabs;
        tabs.forEach(t => this.tabsService.add(t));
        this.redirectToFirstTab();
    }
    redirectToFirstTab() {
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.subscribe((tab) => {
                if (tab) {
                    this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    }
    needsRedirect() {
        const tree = this.router.parseUrl(this.router.url);
        const groups = tree.root.children[PRIMARY_OUTLET];
        const context = this.getMatchingContextRoute(this.router.url);
        if (!context) {
            return groups.segments.length === 2;
        }
        else {
            return context.split('/').length === groups.segments.length;
        }
    }
    getMatchingContextRoute(url) {
        const viewContexts = Object.values(ViewContext);
        const urlWithoutId = url.replace(/\d(.*)/g, '');
        const id = viewContexts.findIndex(context => `/${context.replace(':id', '')}` === urlWithoutId);
        return viewContexts[id];
    }
}
ContextRouteService.ɵfac = function ContextRouteService_Factory(t) { return new (t || ContextRouteService)(ɵngcc0.ɵɵinject(ɵngcc1.RouterTabsResolver), ɵngcc0.ɵɵinject(ɵngcc2.TabsService), ɵngcc0.ɵɵinject(ɵngcc3.Router), ɵngcc0.ɵɵinject(ɵngcc4.ApiService), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ContextRouteService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextRouteService_Factory() { return new ContextRouteService(i0.ɵɵinject(i1.RouterTabsResolver), i0.ɵɵinject(i2.TabsService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.ApiService), i0.ɵɵinject(i0.INJECTOR)); }, token: ContextRouteService, providedIn: "root" });
ContextRouteService.ctorParameters = () => [
    { type: RouterTabsResolver },
    { type: TabsService },
    { type: Router },
    { type: ApiService },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextRouteService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RouterTabsResolver }, { type: ɵngcc2.TabsService }, { type: ɵngcc3.Router }, { type: ɵngcc4.ApiService }, { type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,