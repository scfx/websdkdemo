import { Injector, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { from, isObservable, of } from 'rxjs';
import { every, filter, map, mergeMap, toArray, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class RouterTabsResolver {
    constructor(injector, router) {
        this.injector = injector;
        this.router = router;
    }
    get routerStateSnapshot() {
        return this.router.routerState.snapshot;
    }
    resolve(route) {
        const latestChildren = this.router.config.find(r => route.routeConfig.path === r.path).children;
        return from(latestChildren || []).pipe(mergeMap((child) => from(this.getGuards(child)).pipe(map((guard) => guard.canActivate(route, this.routerStateSnapshot)), mergeMap((result) => {
            if (isObservable(result)) {
                return result;
            }
            if (result && typeof result.then === 'function') {
                return from(result);
            }
            return of(result);
        }), tap(result => {
            if (Array.isArray(result)) {
                child.tabs = result;
            }
        }), every(result => !!result), filter(result => result), mergeMap(() => (Array.isArray(child.tabs) ? from(child.tabs) : of(child))), map(result => result.label || result.path
            ? {
                label: result.label,
                icon: result.icon,
                path: `${decodeURIComponent(route.url.join('/'))}/${result.path}`,
                priority: result.priority,
                hide: result.hide
            }
            : undefined))), filter(tabs => !!tabs), toArray());
    }
    getGuards(child) {
        const guards = (child.canActivate || []).map(guard => {
            return this.injector.get(guard);
        });
        if (child.data && child.data.showIf) {
            guards.push({ canActivate: child.data.showIf });
        }
        return guards;
    }
}
RouterTabsResolver.ɵfac = function RouterTabsResolver_Factory(t) { return new (t || RouterTabsResolver)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
RouterTabsResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterTabsResolver_Factory() { return new RouterTabsResolver(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: RouterTabsResolver, providedIn: "root" });
RouterTabsResolver.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterTabsResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLXRhYnMucmVzb2x2ZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL3JvdXRlci10YWJzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBdUMsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRjtBQUFxQzs7O0FBTXJDLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFBRSxZQUFvQixRQUFrQixFQUFVLE1BQWM7QUFBSSxRQUE5QyxhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsSUFBRSxDQUFDO0FBQ3BFLElBQ0UsSUFBSSxtQkFBbUI7QUFDekIsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFDSCxJQUNFLE9BQU8sQ0FBQyxLQUE2QjtBQUN2QyxRQUFJLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDcEcsUUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNwQyxRQUFRLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN4QixJQUFJ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SEwsVUFBVSxTQUFDLHJCQUlJLFlBWFAsUUFBUTtlQVFmLGZBUm1CLFlBQ3lCLE1BQU07QUFBRztDQU8zQyxFQUFFLE1BQU0sY0FDbkI7Ozs7O2tHQVJ3RDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZnJvbSwgaXNPYnNlcnZhYmxlLCBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZXZlcnksIGZpbHRlciwgbWFwLCBtZXJnZU1hcCwgdG9BcnJheSwgdGFwLCBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUYWIgfSBmcm9tICcuLi90YWJzL3RhYi5tb2RlbCc7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJy4vcm91dGVyLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlclRhYnNSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIGdldCByb3V0ZXJTdGF0ZVNuYXBzaG90KCkge1xuICAgIHJldHVybiB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdDtcbiAgfVxuXG4gIHJlc29sdmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpIHtcbiAgICBjb25zdCBsYXRlc3RDaGlsZHJlbiA9IHRoaXMucm91dGVyLmNvbmZpZy5maW5kKHIgPT4gcm91dGUucm91dGVDb25maWcucGF0aCA9PT0gci5wYXRoKS5jaGlsZHJlbjtcbiAgICByZXR1cm4gZnJvbShsYXRlc3RDaGlsZHJlbiB8fCBbXSkucGlwZShcbiAgICAgIG1lcmdlTWFwKChjaGlsZDogUm91dGUpID0+XG4gICAgICAgIGZyb20odGhpcy5nZXRHdWFyZHMoY2hpbGQpKS5waXBlKFxuICAgICAgICAgIG1hcCgoZ3VhcmQ6IENhbkFjdGl2YXRlKSA9PiBndWFyZC5jYW5BY3RpdmF0ZShyb3V0ZSwgdGhpcy5yb3V0ZXJTdGF0ZVNuYXBzaG90KSksXG4gICAgICAgICAgbWVyZ2VNYXAoKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmcm9tKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2YocmVzdWx0KTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0YXAocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgY2hpbGQudGFicyA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBldmVyeShyZXN1bHQgPT4gISFyZXN1bHQpLFxuICAgICAgICAgIGZpbHRlcihyZXN1bHQgPT4gcmVzdWx0KSxcbiAgICAgICAgICBtZXJnZU1hcCgoKSA9PiAoQXJyYXkuaXNBcnJheShjaGlsZC50YWJzKSA/IGZyb20oY2hpbGQudGFicykgOiBvZihjaGlsZCBhcyBUYWIpKSksXG4gICAgICAgICAgbWFwKHJlc3VsdCA9PlxuICAgICAgICAgICAgcmVzdWx0LmxhYmVsIHx8IHJlc3VsdC5wYXRoXG4gICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiByZXN1bHQubGFiZWwsXG4gICAgICAgICAgICAgICAgICBpY29uOiByZXN1bHQuaWNvbixcbiAgICAgICAgICAgICAgICAgIHBhdGg6IGAke2RlY29kZVVSSUNvbXBvbmVudChyb3V0ZS51cmwuam9pbignLycpKX0vJHtyZXN1bHQucGF0aH1gLFxuICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IHJlc3VsdC5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgIGhpZGU6IHJlc3VsdC5oaWRlXG4gICAgICAgICAgICAgICAgfSBhcyBUYWIpXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgZmlsdGVyKHRhYnMgPT4gISF0YWJzKSxcbiAgICAgIHRvQXJyYXkoKVxuICAgICkgYXMgT2JzZXJ2YWJsZTxUYWJbXT47XG4gIH1cblxuICBwcml2YXRlIGdldEd1YXJkcyhjaGlsZDogUm91dGUpIHtcbiAgICBjb25zdCBndWFyZHMgPSAoY2hpbGQuY2FuQWN0aXZhdGUgfHwgW10pLm1hcChndWFyZCA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5pbmplY3Rvci5nZXQoZ3VhcmQpO1xuICAgIH0pO1xuICAgIGlmIChjaGlsZC5kYXRhICYmIGNoaWxkLmRhdGEuc2hvd0lmKSB7XG4gICAgICBndWFyZHMucHVzaCh7IGNhbkFjdGl2YXRlOiBjaGlsZC5kYXRhLnNob3dJZiB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGd1YXJkcztcbiAgfVxufVxuIl19