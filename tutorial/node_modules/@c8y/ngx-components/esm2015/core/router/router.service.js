import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { startWith, switchMap } from 'rxjs/operators';
import { fromFactories } from '../common/extension-hooks';
import { ContextRouteService } from './context-route.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-route.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated: Use HOOK_ROUTE
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './context-route.service';
export const HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A hook to use for Multi Provider extension.
 */
export const HOOK_ROUTE = new InjectionToken('HookRoute');
/**
 * A service which defines routes
 */
export class RouterService {
    constructor(injector, router, contextRouteService) {
        this.injector = injector;
        this.router = router;
        this.contextRouteService = contextRouteService;
        this.refreshTrigger = new Subject();
        this.state = new Map();
        this.factories = [];
        this.refreshTrigger
            .pipe(startWith(1), switchMap(() => fromFactories([
            () => this.injector.get(HOOK_ROUTE, []),
            () => this.getComponentsViaDeprecatedHook(),
            () => this.factories
        ], router, false)))
            .subscribe((routes) => {
            const toAddRoutes = routes.filter(route => {
                const path = `${route.context || ''}${route.path}`;
                const isAlreadyAdded = this.state.has(path);
                if (!isAlreadyAdded) {
                    this.state.set(path, route);
                }
                return !isAlreadyAdded;
            });
            this.addRoute(toAddRoutes);
        });
    }
    /**
     * Refresh the current context
     */
    refresh() {
        this.refreshTrigger.next(1);
        this.contextRouteService.refreshContext();
    }
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    }
    getComponentsViaDeprecatedHook() {
        const componentsViaDeprecatedHook = this.injector.get(HOOK_ONCE_ROUTE, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_ONCE_ROUTE is now deprecated. Use HOOK_ROUTE instead.');
        }
        return componentsViaDeprecatedHook;
    }
    addRoutes(routes) {
        const emptyRoute = this.router.config.find(r => r.path === '**');
        this.router.resetConfig([
            ...this.router.config.filter(r => r.path !== '**'),
            ...routes.map((r) => this.convertRoute(this.router.config, r)),
            emptyRoute
        ].filter(Boolean));
    }
    convertRoute(initialConfig, route) {
        if (route.context) {
            initialConfig.forEach((r) => {
                if (r.data && r.data.context === route.context) {
                    r.children = [route, ...(r.children || [])];
                }
            });
            return;
        }
        return route;
    }
}
RouterService.ɵfac = function RouterService_Factory(t) { return new (t || RouterService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.ContextRouteService)); };
RouterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ContextRouteService)); }, token: RouterService, providedIn: "root" });
RouterService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: ContextRouteService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: ɵngcc2.ContextRouteService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,