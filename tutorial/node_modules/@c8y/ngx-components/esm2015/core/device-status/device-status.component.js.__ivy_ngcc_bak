import { Component, Input } from '@angular/core';
import { deviceAvailabilityIconMap, PushStatusLabels, SendStatusLabels, tooltips } from './device-availability';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
export class DeviceStatusComponent {
    constructor(translateService) {
        this.translateService = translateService;
    }
    set node(value) {
        this._mo = value.mo || value;
    }
    get() {
        return this._mo;
    }
    ngOnChanges() {
        this.setStatusProperites();
    }
    ngAfterContentInit() {
        this.setStatusProperites();
    }
    setStatusProperites() {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus =
            this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
    }
    status() {
        let statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    }
    getMaintenanceStatus() {
        return {
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        };
    }
    getSendPushStatus() {
        return {
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        };
    }
    getSendStatusTooltip(device) {
        const availability = device && device.c8y_Availability;
        const lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    }
    getPushStatusTooltip(isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    }
}
DeviceStatusComponent.decorators = [
    { type: Component, args: [{
                selector: 'device-status',
                template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    title=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
            },] }
];
DeviceStatusComponent.ctorParameters = () => [
    { type: TranslateService }
];
DeviceStatusComponent.propDecorators = {
    node: [{ type: Input, args: ['mo',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2RldmljZS1zdGF0dXMvZGV2aWNlLXN0YXR1cy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQStCLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1QsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBTWhDLE1BQU0sT0FBTyxxQkFBcUI7SUFXaEMsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBVjFELElBQWlCLElBQUksQ0FBQyxLQUFLO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQVVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFVBQVUs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QUFnQjs7O21CQVF0QixLQUFLLFNBQUMsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcCxcbiAgUHVzaFN0YXR1c0xhYmVscyxcbiAgU2VuZFN0YXR1c0xhYmVscyxcbiAgdG9vbHRpcHNcbn0gZnJvbSAnLi9kZXZpY2UtYXZhaWxhYmlsaXR5JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RldmljZS1zdGF0dXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlU3RhdHVzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCdtbycpIHNldCBub2RlKHZhbHVlKSB7XG4gICAgdGhpcy5fbW8gPSB2YWx1ZS5tbyB8fCB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgX21vO1xuICBwcml2YXRlIHJlcXVpcmVkQXZhaWxhYmlsaXR5O1xuICBwcml2YXRlIGF2YWlsYWJpbGl0eVN0YXR1cztcbiAgcHJpdmF0ZSBwdXNoU3RhdHVzO1xuICBwcml2YXRlIHNlbmRTdGF0dXM7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW87XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLnNldFN0YXR1c1Byb3Blcml0ZXMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnNldFN0YXR1c1Byb3Blcml0ZXMoKTtcbiAgfVxuXG4gIHNldFN0YXR1c1Byb3Blcml0ZXMoKSB7XG4gICAgdGhpcy5yZXF1aXJlZEF2YWlsYWJpbGl0eSA9IGdldCh0aGlzLl9tbywgJ2M4eV9SZXF1aXJlZEF2YWlsYWJpbGl0eScpO1xuICAgIHRoaXMuYXZhaWxhYmlsaXR5U3RhdHVzID0gZ2V0KHRoaXMuX21vLCAnYzh5X0F2YWlsYWJpbGl0eS5zdGF0dXMnKTtcblxuICAgIHRoaXMucHVzaFN0YXR1cyA9IGdldCh0aGlzLl9tbywgJ2M4eV9Db25uZWN0aW9uLnN0YXR1cycpIHx8ICdVTktOT1dOJztcbiAgICB0aGlzLnNlbmRTdGF0dXMgPVxuICAgICAgdGhpcy5hdmFpbGFiaWxpdHlTdGF0dXMgfHwgKHRoaXMucmVxdWlyZWRBdmFpbGFiaWxpdHkgPyAnVU5LTk9XTicgOiAnTk9UX01PTklUT1JFRCcpO1xuICB9XG5cbiAgc3RhdHVzKCkge1xuICAgIGxldCBzdGF0dXNlcztcblxuICAgIGlmICh0aGlzLmF2YWlsYWJpbGl0eVN0YXR1cyA9PT0gJ01BSU5URU5BTkNFJyB8fCB0aGlzLnB1c2hTdGF0dXMgPT09ICdNQUlOVEVOQU5DRScpIHtcbiAgICAgIHN0YXR1c2VzID0gdGhpcy5nZXRNYWludGVuYW5jZVN0YXR1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0dXNlcyA9IHRoaXMuZ2V0U2VuZFB1c2hTdGF0dXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdHVzZXM7XG4gIH1cblxuICBnZXRNYWludGVuYW5jZVN0YXR1cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZFN0YXR1czogZmFsc2UsXG4gICAgICBwdXNoU3RhdHVzOiBmYWxzZSxcbiAgICAgIG1haW50ZW5hbmNlU3RhdHVzOiB7XG4gICAgICAgIGljb246IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAuZGV2aWNlLk1BSU5URU5BTkNFLmljb24sXG4gICAgICAgIGNsYXNzOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLmRldmljZS5NQUlOVEVOQU5DRS5jbGFzcyxcbiAgICAgICAgdG9vbHRpcDogdG9vbHRpcHMubWFpbnRlbmFuY2VcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZW5kUHVzaFN0YXR1cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZFN0YXR1czoge1xuICAgICAgICBpY29uOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLnNlbmREYXRhW3RoaXMuc2VuZFN0YXR1c10uaWNvbixcbiAgICAgICAgY2xhc3M6IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAuc2VuZERhdGFbdGhpcy5zZW5kU3RhdHVzXS5jbGFzcyxcbiAgICAgICAgc3RhdHVzOiB0aGlzLnNlbmRTdGF0dXMsXG4gICAgICAgIGxhYmVsOiBTZW5kU3RhdHVzTGFiZWxzW3RoaXMuc2VuZFN0YXR1c10sXG4gICAgICAgIHRvb2x0aXA6IHRoaXMuZ2V0U2VuZFN0YXR1c1Rvb2x0aXAodGhpcy5fbW8pXG4gICAgICB9LFxuICAgICAgcHVzaFN0YXR1czoge1xuICAgICAgICBpY29uOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLnB1c2hbdGhpcy5wdXNoU3RhdHVzXS5pY29uLFxuICAgICAgICBjbGFzczogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5wdXNoW3RoaXMucHVzaFN0YXR1c10uY2xhc3MsXG4gICAgICAgIHN0YXR1czogdGhpcy5wdXNoU3RhdHVzLFxuICAgICAgICBsYWJlbDogUHVzaFN0YXR1c0xhYmVsc1t0aGlzLnB1c2hTdGF0dXNdLFxuICAgICAgICB0b29sdGlwOiB0aGlzLmdldFB1c2hTdGF0dXNUb29sdGlwKHRoaXMucHVzaFN0YXR1cyA9PT0gJ0NPTk5FQ1RFRCcpXG4gICAgICB9LFxuICAgICAgbWFpbnRlbmFuY2VTdGF0dXM6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VuZFN0YXR1c1Rvb2x0aXAoZGV2aWNlKSB7XG4gICAgY29uc3QgYXZhaWxhYmlsaXR5ID0gZGV2aWNlICYmIGRldmljZS5jOHlfQXZhaWxhYmlsaXR5O1xuICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gYXZhaWxhYmlsaXR5ICYmIGF2YWlsYWJpbGl0eS5sYXN0TWVzc2FnZTtcbiAgICBpZiAobGFzdE1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB0b29sdGlwcy5zZW5kU3RhdHVzQ29ubmVjdGVkKGxhc3RNZXNzYWdlLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UpO1xuICAgIH1cbiAgICByZXR1cm4gdG9vbHRpcHMuc2VuZFN0YXR1c0Rpc2Nvbm5lY3RlZDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHVzaFN0YXR1c1Rvb2x0aXAoaXNBY3RpdmUpIHtcbiAgICByZXR1cm4gaXNBY3RpdmUgPyB0b29sdGlwcy5wdXNoU3RhdHVzQ29ubmVjdGVkIDogdG9vbHRpcHMucHVzaFN0YXR1c0Rpc2Nvbm5lY3RlZDtcbiAgfVxufVxuIl19