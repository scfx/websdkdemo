import { Component, Input } from '@angular/core';
/**
 * Display collapsed content on a list item. Can be
 * used for more detailed information. Use it with
 * content projection.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-collapsed>
 *     <strong>I am only visible if extended</strong>
 *   </c8y-collapsed>
 * </c8y-li>
 * ```
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ListItemCollapseComponent {
    constructor() {
        /**
         * The way how to toggle collapse state.
         * button (default) - additional button for toggle collapse state
         * row - toggling collapse state by clicking to entire row.
         */
        this.collapseWay = 'button';
    }
}
ListItemCollapseComponent.ɵfac = function ListItemCollapseComponent_Factory(t) { return new (t || ListItemCollapseComponent)(); };
ListItemCollapseComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemCollapseComponent, selectors: [["c8y-list-item-collapse"], ["c8y-li-collapse"]], inputs: { collapseWay: "collapseWay" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ListItemCollapseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ListItemCollapseComponent.propDecorators = {
    collapseWay: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemCollapseComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-collapse, c8y-li-collapse',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { collapseWay: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWNvbGxhcHNlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9saXN0LWdyb3VwL2xpc3QtaXRlbS1jb2xsYXBzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7O0FBS0gsTUFBTSxPQUFPLHlCQUF5QjtBQUN0QyxJQUxBO0FBQ0csUUFJRDtBQUNGO0FBQ007QUFDTTtBQUdYLFdBRkk7QUFDTCxRQUNFLGdCQUFXLEdBQXFCLFFBQVEsQ0FBQztBQUMzQyxJQUFBLENBQUM7QUFDRDtxREFiQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFO1NBQXlDLGtCQUNuRCx1Q0FBa0QsY0FDbkQ7Ozs2QkFDSTtBQUFDO0FBRUYsMEJBSUQsS0FBSztBQUNQOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBEaXNwbGF5IGNvbGxhcHNlZCBjb250ZW50IG9uIGEgbGlzdCBpdGVtLiBDYW4gYmVcbiAqIHVzZWQgZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uIFVzZSBpdCB3aXRoXG4gKiBjb250ZW50IHByb2plY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktbGk+XG4gKiAgIDxjOHktY29sbGFwc2VkPlxuICogICAgIDxzdHJvbmc+SSBhbSBvbmx5IHZpc2libGUgaWYgZXh0ZW5kZWQ8L3N0cm9uZz5cbiAqICAgPC9jOHktY29sbGFwc2VkPlxuICogPC9jOHktbGk+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWxpc3QtaXRlbS1jb2xsYXBzZSwgYzh5LWxpLWNvbGxhcHNlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtaXRlbS1jb2xsYXBzZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTGlzdEl0ZW1Db2xsYXBzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUaGUgd2F5IGhvdyB0byB0b2dnbGUgY29sbGFwc2Ugc3RhdGUuXG4gICAqIGJ1dHRvbiAoZGVmYXVsdCkgLSBhZGRpdGlvbmFsIGJ1dHRvbiBmb3IgdG9nZ2xlIGNvbGxhcHNlIHN0YXRlXG4gICAqIHJvdyAtIHRvZ2dsaW5nIGNvbGxhcHNlIHN0YXRlIGJ5IGNsaWNraW5nIHRvIGVudGlyZSByb3cuXG4gICAqL1xuICBASW5wdXQoKVxuICBjb2xsYXBzZVdheTogJ2J1dHRvbicgfCAncm93JyA9ICdidXR0b24nO1xufVxuIl19