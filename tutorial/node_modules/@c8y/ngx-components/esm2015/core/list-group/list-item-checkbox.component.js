import { Output, EventEmitter, Component, Input, forwardRef } from '@angular/core';
import { CheckboxControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ElementRef, Renderer2 } from '@angular/core';
/**
 * A component to display checkboxes in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-checkbox></c8y-li-checkbox>
 * </c8y-li>
 * ```
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ListItemCheckboxComponent extends CheckboxControlValueAccessor {
    constructor(renderer, elementRef) {
        super(renderer, elementRef);
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * Indicates if the checkbox is selected.
         */
        this.selected = false;
        /**
         * Indicates if the checkbox is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the checkbox is selected.
         */
        this.onSelect = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Selects the checkbox.
     * @param value The value to pass.
     */
    select(value) {
        this.onSelect.emit(value);
        this.onChange(value);
    }
}
ListItemCheckboxComponent.ɵfac = function ListItemCheckboxComponent_Factory(t) { return new (t || ListItemCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ListItemCheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemCheckboxComponent, selectors: [["c8y-list-item-checkbox"], ["c8y-li-checkbox"]], hostAttrs: [1, "c8y-list__item__check"], inputs: { selected: "selected", disabled: "disabled" }, outputs: { onSelect: "onSelect" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ListItemCheckboxComponent)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 4, vars: 2, consts: [[1, "c8y-checkbox"], ["type", "checkbox", 1, "form-control", 3, "disabled", "checked", "change"]], template: function ListItemCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1);
        ɵngcc0.ɵɵlistener("change", function ListItemCheckboxComponent_Template_input_change_1_listener($event) { ctx.select($event.target.checked); return false; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("checked", ctx.selected);
    } }, encapsulation: 2 });
ListItemCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ListItemCheckboxComponent.propDecorators = {
    selected: [{ type: Input }],
    disabled: [{ type: Input }],
    onSelect: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
                template: "<label class=\"c8y-checkbox\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__check'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ListItemCheckboxComponent)
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { selected: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9saXN0LWdyb3VwL2xpc3QtaXRlbS1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7OztBQWVILE1BQU0sT0FBTyx5QkFBMEIsU0FBUSw0QkFBNEI7QUFDM0UsSUFnQkUsWUFBb0IsUUFBbUIsRUFBVSxVQUFzQjtBQUN6RSxRQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDaEMsUUFGc0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBaEJ4RTtBQUNGO0FBRUEsV0FESztBQUNMLFFBQ0UsYUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQixRQUFFO0FBQ0Y7QUFFQSxXQURLO0FBQ0wsUUFDRSxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFFBQUU7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUNFLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0FBQ3pDLElBR0UsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFdBQVcsQ0FBQyxPQUFzQjtBQUFJLFFBQ3BDLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO0FBQzNELFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4RCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxNQUFNLENBQUMsS0FBSztBQUNkLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLElBQUUsQ0FBQztBQUNIO3FEQXBEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHlDQUF5QyxrQkFDbkQ7Mk5BQWtELGtCQUNsRCxJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLHVCQUF1QixrQkFDL0Isa0JBQ0Q7QUFBUyxFQUFFO1VBQ1QsMEJBQ0UsT0FBTztDQUFFLGlCQUFpQjtlQUMxQixLQUFLLEVBQUUsSUFBSSwwQkFDWCxXQUFXLEVBQUU7RUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUF5QixDQUFDLHNCQUN6RCxrQkFDRixjQUNGOzs7Ozs7Ozs7Ozs7NkJBQ0k7QUFBQztBQUFtRCxZQTNCcEMsU0FBUztBQUFJLFlBQXpCLFVBQVU7QUFBRztBQUFHO0FBR2YsdUJBNEJQLEtBQUs7QUFDTix1QkFJQyxLQUFLO0FBQ04sdUJBSUMsTUFBTTtBQUNSOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudCwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gZGlzcGxheSBjaGVja2JveGVzIGluIGEgYzh5LWxpLiBVc2UgaXQgd2l0aCBjb250ZW50IHByb2plY3Rpb24uIEl0XG4gKiBjYW4gYmUgdXNlZCBzdGFuZGFsb25lIG9yIHdpdGggYW4gbmdNb2RlbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1saT5cbiAqICAgPGM4eS1saS1jaGVja2JveD48L2M4eS1saS1jaGVja2JveD5cbiAqIDwvYzh5LWxpPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWl0ZW0tY2hlY2tib3gsIGM4eS1saS1jaGVja2JveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LWl0ZW0tY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdjOHktbGlzdF9faXRlbV9fY2hlY2snXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMaXN0SXRlbUNoZWNrYm94Q29tcG9uZW50KVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0SXRlbUNoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNoZWNrYm94IGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgY2hlY2tib3ggaXMgZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBkaXNhYmxlZCA9IGZhbHNlO1xuICAvKipcbiAgICogQW4gZXZlbnQgZW1pdHRlZCBhcyBzb29uIGFzIHRoZSBjaGVja2JveCBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBvblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKHJlbmRlcmVyLCBlbGVtZW50UmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWQgJiYgIWNoYW5nZXMuc2VsZWN0ZWQuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TZWxlY3QuZW1pdChjaGFuZ2VzLnNlbGVjdGVkLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIGNoZWNrYm94LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MuXG4gICAqL1xuICBzZWxlY3QodmFsdWUpIHtcbiAgICB0aGlzLm9uU2VsZWN0LmVtaXQodmFsdWUpO1xuICAgIHRoaXMub25DaGFuZ2UodmFsdWUpO1xuICB9XG59XG4iXX0=