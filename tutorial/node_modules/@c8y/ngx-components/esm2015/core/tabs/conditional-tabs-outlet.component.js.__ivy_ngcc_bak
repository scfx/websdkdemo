import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TabsService } from './tabs.service';
/**
 * Register this component on the parent route of a view with multiple tabs where the first tab
 * is displayed only conditionally.
 *
 * Given the following routes leading to a single view with multiple tabs:<br>
 * /yourpath/tab-a -> Tab A<br>
 * /yourpath/tab-b -> Tab B<br>
 * /yourpath/tab-c -> Tab C
 *
 * Your components will be registered like
 * ```typescript
 * export const routes: Route[] = [
 *   {
 *     path: 'yourpath/tab-a',
 *     component: TabAComponent
 *   },
 *   {
 *     path: 'yourpath/tab-b',
 *     component: TabBComponent
 *   },
 *   {
 *     path: 'yourpath/tab-c',
 *     component: TabCComponent
 *   }
 * ];
 * ```
 *
 * In the simple case where Tab A is the first tab on the view and it is always displayed, you can register
 * your view in the navigation with a similar navigator node:
 *
 * ```typescript
 * new NavigatorNode({
 *   label: gettext('My tabs'),
 *   path: 'yourpath/tab-a',
 *   icon: 'gears',
 *   parent: gettext('Some parent node'),
 *   priority: 100
 * })
 * ```
 *
 * This will navigate to the first tab's component and activate the first tab in the view.
 *
 * In case Tab A is displayed conditionally you cannot link it from a navigator node since it may not be available in some cases.
 * In this situation `ConditionalTabsOutletComponent` comes handy as it will forward users to the first available tab on your view:
 *
 * ```typescript
 * new NavigatorNode({
 *   label: gettext('My tabs'),
 *   path: 'yourpath', // note that here we use only the parent route
 *   icon: 'gears',
 *   parent: gettext('Some parent node'),
 *   priority: 100
 * })
 *
 * [...]
 *
 * export const routes: Route[] = [
 *   {
 *     path: 'yourpath',
 *     component: ConditionalTabsOutletComponent // we register ConditionalTabsOutletComponent for the parent path
 *   },
 *   {
 *     path: 'yourpath/tab-a',
 *     component: TabAComponent
 *   },
 *   {
 *     path: 'yourpath/tab-b',
 *     component: TabBComponent
 *   },
 *   {
 *     path: 'yourpath/tab-c',
 *     component: TabCComponent
 *   }
 * ];
 * ```
 */
export class ConditionalTabsOutletComponent {
    constructor(tabsService, router) {
        this.tabsService = tabsService;
        this.router = router;
        this.endSubscriptions$ = new Subject();
    }
    ngOnInit() {
        this.tabsService.firstTab$.pipe(takeUntil(this.endSubscriptions$)).subscribe((tab) => {
            if (tab) {
                this.router.navigateByUrl(tab.path, { replaceUrl: true });
            }
        });
    }
    ngOnDestroy() {
        this.endSubscriptions$.next();
        this.endSubscriptions$.complete();
    }
}
ConditionalTabsOutletComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-conditional-tabs-outlet',
                template: `
    <router-outlet></router-outlet>
  `
            },] }
];
ConditionalTabsOutletComponent.ctorParameters = () => [
    { type: TabsService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtdGFicy1vdXRsZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS90YWJzL2NvbmRpdGlvbmFsLXRhYnMtb3V0bGV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EyRUc7QUFPSCxNQUFNLE9BQU8sOEJBQThCO0lBR3pDLFlBQW9CLFdBQXdCLEVBQVUsTUFBYztRQUFoRCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFGNUQsc0JBQWlCLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUFFYyxDQUFDO0lBRXhFLFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDeEYsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7O1lBdEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxRQUFRLEVBQUU7O0dBRVQ7YUFDRjs7O1lBbkZRLFdBQVc7WUFKWCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiLm1vZGVsJztcbmltcG9ydCB7IFRhYnNTZXJ2aWNlIH0gZnJvbSAnLi90YWJzLnNlcnZpY2UnO1xuXG4vKipcbiAqIFJlZ2lzdGVyIHRoaXMgY29tcG9uZW50IG9uIHRoZSBwYXJlbnQgcm91dGUgb2YgYSB2aWV3IHdpdGggbXVsdGlwbGUgdGFicyB3aGVyZSB0aGUgZmlyc3QgdGFiXG4gKiBpcyBkaXNwbGF5ZWQgb25seSBjb25kaXRpb25hbGx5LlxuICpcbiAqIEdpdmVuIHRoZSBmb2xsb3dpbmcgcm91dGVzIGxlYWRpbmcgdG8gYSBzaW5nbGUgdmlldyB3aXRoIG11bHRpcGxlIHRhYnM6PGJyPlxuICogL3lvdXJwYXRoL3RhYi1hIC0+IFRhYiBBPGJyPlxuICogL3lvdXJwYXRoL3RhYi1iIC0+IFRhYiBCPGJyPlxuICogL3lvdXJwYXRoL3RhYi1jIC0+IFRhYiBDXG4gKlxuICogWW91ciBjb21wb25lbnRzIHdpbGwgYmUgcmVnaXN0ZXJlZCBsaWtlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBleHBvcnQgY29uc3Qgcm91dGVzOiBSb3V0ZVtdID0gW1xuICogICB7XG4gKiAgICAgcGF0aDogJ3lvdXJwYXRoL3RhYi1hJyxcbiAqICAgICBjb21wb25lbnQ6IFRhYkFDb21wb25lbnRcbiAqICAgfSxcbiAqICAge1xuICogICAgIHBhdGg6ICd5b3VycGF0aC90YWItYicsXG4gKiAgICAgY29tcG9uZW50OiBUYWJCQ29tcG9uZW50XG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICBwYXRoOiAneW91cnBhdGgvdGFiLWMnLFxuICogICAgIGNvbXBvbmVudDogVGFiQ0NvbXBvbmVudFxuICogICB9XG4gKiBdO1xuICogYGBgXG4gKlxuICogSW4gdGhlIHNpbXBsZSBjYXNlIHdoZXJlIFRhYiBBIGlzIHRoZSBmaXJzdCB0YWIgb24gdGhlIHZpZXcgYW5kIGl0IGlzIGFsd2F5cyBkaXNwbGF5ZWQsIHlvdSBjYW4gcmVnaXN0ZXJcbiAqIHlvdXIgdmlldyBpbiB0aGUgbmF2aWdhdGlvbiB3aXRoIGEgc2ltaWxhciBuYXZpZ2F0b3Igbm9kZTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gKiAgIGxhYmVsOiBnZXR0ZXh0KCdNeSB0YWJzJyksXG4gKiAgIHBhdGg6ICd5b3VycGF0aC90YWItYScsXG4gKiAgIGljb246ICdnZWFycycsXG4gKiAgIHBhcmVudDogZ2V0dGV4dCgnU29tZSBwYXJlbnQgbm9kZScpLFxuICogICBwcmlvcml0eTogMTAwXG4gKiB9KVxuICogYGBgXG4gKlxuICogVGhpcyB3aWxsIG5hdmlnYXRlIHRvIHRoZSBmaXJzdCB0YWIncyBjb21wb25lbnQgYW5kIGFjdGl2YXRlIHRoZSBmaXJzdCB0YWIgaW4gdGhlIHZpZXcuXG4gKlxuICogSW4gY2FzZSBUYWIgQSBpcyBkaXNwbGF5ZWQgY29uZGl0aW9uYWxseSB5b3UgY2Fubm90IGxpbmsgaXQgZnJvbSBhIG5hdmlnYXRvciBub2RlIHNpbmNlIGl0IG1heSBub3QgYmUgYXZhaWxhYmxlIGluIHNvbWUgY2FzZXMuXG4gKiBJbiB0aGlzIHNpdHVhdGlvbiBgQ29uZGl0aW9uYWxUYWJzT3V0bGV0Q29tcG9uZW50YCBjb21lcyBoYW5keSBhcyBpdCB3aWxsIGZvcndhcmQgdXNlcnMgdG8gdGhlIGZpcnN0IGF2YWlsYWJsZSB0YWIgb24geW91ciB2aWV3OlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAqICAgbGFiZWw6IGdldHRleHQoJ015IHRhYnMnKSxcbiAqICAgcGF0aDogJ3lvdXJwYXRoJywgLy8gbm90ZSB0aGF0IGhlcmUgd2UgdXNlIG9ubHkgdGhlIHBhcmVudCByb3V0ZVxuICogICBpY29uOiAnZ2VhcnMnLFxuICogICBwYXJlbnQ6IGdldHRleHQoJ1NvbWUgcGFyZW50IG5vZGUnKSxcbiAqICAgcHJpb3JpdHk6IDEwMFxuICogfSlcbiAqXG4gKiBbLi4uXVxuICpcbiAqIGV4cG9ydCBjb25zdCByb3V0ZXM6IFJvdXRlW10gPSBbXG4gKiAgIHtcbiAqICAgICBwYXRoOiAneW91cnBhdGgnLFxuICogICAgIGNvbXBvbmVudDogQ29uZGl0aW9uYWxUYWJzT3V0bGV0Q29tcG9uZW50IC8vIHdlIHJlZ2lzdGVyIENvbmRpdGlvbmFsVGFic091dGxldENvbXBvbmVudCBmb3IgdGhlIHBhcmVudCBwYXRoXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICBwYXRoOiAneW91cnBhdGgvdGFiLWEnLFxuICogICAgIGNvbXBvbmVudDogVGFiQUNvbXBvbmVudFxuICogICB9LFxuICogICB7XG4gKiAgICAgcGF0aDogJ3lvdXJwYXRoL3RhYi1iJyxcbiAqICAgICBjb21wb25lbnQ6IFRhYkJDb21wb25lbnRcbiAqICAgfSxcbiAqICAge1xuICogICAgIHBhdGg6ICd5b3VycGF0aC90YWItYycsXG4gKiAgICAgY29tcG9uZW50OiBUYWJDQ29tcG9uZW50XG4gKiAgIH1cbiAqIF07XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNvbmRpdGlvbmFsLXRhYnMtb3V0bGV0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uYWxUYWJzT3V0bGV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGVuZFN1YnNjcmlwdGlvbnMkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhYnNTZXJ2aWNlOiBUYWJzU2VydmljZSwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRhYnNTZXJ2aWNlLmZpcnN0VGFiJC5waXBlKHRha2VVbnRpbCh0aGlzLmVuZFN1YnNjcmlwdGlvbnMkKSkuc3Vic2NyaWJlKCh0YWI6IFRhYikgPT4ge1xuICAgICAgaWYgKHRhYikge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHRhYi5wYXRoLCB7IHJlcGxhY2VVcmw6IHRydWUgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMkLm5leHQoKTtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==