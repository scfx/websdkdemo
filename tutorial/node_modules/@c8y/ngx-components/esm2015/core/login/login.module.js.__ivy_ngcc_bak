import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { FormsModule as C8yFormsModule } from '../forms/forms.module';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '../common/common.module';
import { ChangePasswordComponent } from './change-password.component';
import { CredentialsComponent } from './credentials.component';
import { LoginComponent } from './login.component';
import { LoginService } from './login.service';
import { RecoverPasswordComponent } from './recover-password.component';
import { AuthenticationModule } from '../authentication/authentication.module';
import { AlertModule } from '../alert/alert.module';
import { TotpAuthComponent } from './totp-auth.component';
import { PasswordStrengthValidatorDirective } from './password-strength-validator.directive';
import { TenantIdSetupComponent } from './tenant-id-setup.component';
/**
 * The angular module definition for the login.
 * @exports LoginComponent
 */
export class LoginModule {
    static forRoot() {
        return {
            ngModule: LoginModule,
            providers: LoginModule.providers()
        };
    }
    static providers() {
        return [LoginService];
    }
}
LoginModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LoginComponent,
                    RecoverPasswordComponent,
                    ChangePasswordComponent,
                    CredentialsComponent,
                    TotpAuthComponent,
                    PasswordStrengthValidatorDirective,
                    TenantIdSetupComponent
                ],
                imports: [
                    FormsModule,
                    TooltipModule,
                    CommonModule,
                    AuthenticationModule,
                    AlertModule,
                    C8yFormsModule
                ],
                exports: [LoginComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9sb2dpbi9sb2dpbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsSUFBSSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFOzs7R0FHRztBQXFCSCxNQUFNLE9BQU8sV0FBVztJQUN0QixNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUUsV0FBVyxDQUFDLFNBQVMsRUFBRTtTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTO1FBQ2QsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7OztZQTdCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLGNBQWM7b0JBQ2Qsd0JBQXdCO29CQUN4Qix1QkFBdUI7b0JBQ3ZCLG9CQUFvQjtvQkFDcEIsaUJBQWlCO29CQUNqQixrQ0FBa0M7b0JBQ2xDLHNCQUFzQjtpQkFDdkI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFdBQVc7b0JBQ1gsYUFBYTtvQkFDYixZQUFZO29CQUNaLG9CQUFvQjtvQkFDcEIsV0FBVztvQkFDWCxjQUFjO2lCQUNmO2dCQUNELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIGFzIEM4eUZvcm1zTW9kdWxlIH0gZnJvbSAnLi4vZm9ybXMvZm9ybXMubW9kdWxlJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ2hhbmdlUGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICcuL2NoYW5nZS1wYXNzd29yZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbHNDb21wb25lbnQgfSBmcm9tICcuL2NyZWRlbnRpYWxzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dpbkNvbXBvbmVudCB9IGZyb20gJy4vbG9naW4uY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBSZWNvdmVyUGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICcuL3JlY292ZXItcGFzc3dvcmQuY29tcG9uZW50JztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uTW9kdWxlIH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24ubW9kdWxlJztcbmltcG9ydCB7IEFsZXJ0TW9kdWxlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQubW9kdWxlJztcbmltcG9ydCB7IFRvdHBBdXRoQ29tcG9uZW50IH0gZnJvbSAnLi90b3RwLWF1dGguY29tcG9uZW50JztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLXZhbGlkYXRvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGVuYW50SWRTZXR1cENvbXBvbmVudCB9IGZyb20gJy4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudCc7XG5cbi8qKlxuICogVGhlIGFuZ3VsYXIgbW9kdWxlIGRlZmluaXRpb24gZm9yIHRoZSBsb2dpbi5cbiAqIEBleHBvcnRzIExvZ2luQ29tcG9uZW50XG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIExvZ2luQ29tcG9uZW50LFxuICAgIFJlY292ZXJQYXNzd29yZENvbXBvbmVudCxcbiAgICBDaGFuZ2VQYXNzd29yZENvbXBvbmVudCxcbiAgICBDcmVkZW50aWFsc0NvbXBvbmVudCxcbiAgICBUb3RwQXV0aENvbXBvbmVudCxcbiAgICBQYXNzd29yZFN0cmVuZ3RoVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFRlbmFudElkU2V0dXBDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIEZvcm1zTW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEF1dGhlbnRpY2F0aW9uTW9kdWxlLFxuICAgIEFsZXJ0TW9kdWxlLFxuICAgIEM4eUZvcm1zTW9kdWxlXG4gIF0sXG4gIGV4cG9ydHM6IFtMb2dpbkNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTG9naW5Nb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IExvZ2luTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBMb2dpbk1vZHVsZS5wcm92aWRlcnMoKVxuICAgIH07XG4gIH1cbiAgc3RhdGljIHByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gW0xvZ2luU2VydmljZV07XG4gIH1cbn1cbiJdfQ==