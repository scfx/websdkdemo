import { __awaiter } from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { LoginViews } from './login.model';
import { FetchClient } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { LoginService } from './login.service';
import { AlertService } from '../alert/alert.service';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
/**
 * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
 * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
 * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
 * The component will redirect user to this domain, preserving URL path and params.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '../common/ui-state.service';
import * as ɵngcc3 from './login.service';
import * as ɵngcc4 from '../alert/alert.service';
import * as ɵngcc5 from '@ngx-translate/core';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '../i18n/c8y-translate.directive';
import * as ɵngcc8 from '../forms/form-group.component';
import * as ɵngcc9 from '../forms/required-input-placeholder.directive';
import * as ɵngcc10 from '../i18n/c8y-translate.pipe';
export class TenantIdSetupComponent {
    constructor(client, ui, loginService, alert, translateService) {
        this.client = client;
        this.ui = ui;
        this.loginService = loginService;
        this.alert = alert;
        this.translateService = translateService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {
            tenant: ''
        };
    }
    /**
     * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
     */
    setupLoginMode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.tenant = this.model.tenant;
            try {
                yield this.ui.refreshLoginOptions();
                this.loginService.initLoginOptions();
                this.redirectToCorrectDomain();
            }
            catch (e) {
                if (e.res && e.res.status === 401) {
                    this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    /**
     * Redirects to tenant domain when login mode contains domain.
     */
    redirectToCorrectDomain() {
        const loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
        if (loginRedirectDomain) {
            this.loginService.redirectToDomain(loginRedirectDomain);
        }
        else {
            this.onChangeView.emit({ view: LoginViews.Credentials });
        }
    }
}
TenantIdSetupComponent.ɵfac = function TenantIdSetupComponent_Factory(t) { return new (t || TenantIdSetupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FetchClient), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.TranslateService)); };
TenantIdSetupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TenantIdSetupComponent, selectors: [["c8y-tenant-id-setup"]], outputs: { onChangeView: "onChangeView" }, decls: 13, vars: 8, consts: [["role", "form", "novalidate", "", 1, "loginForm", 3, "ngSubmit"], ["tenantIdSetupForm", "ngForm"], ["translate", "", 1, "legend", "form-block", "center"], ["id", "tenantField", 1, "tenantField"], ["for", "tenant", "translate", ""], ["type", "text", "name", "tenant", "id", "tenant", "autocapitalize", "off", "autocorrect", "off", "placeholder-no-required-hint", "", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["tenant", "ngModel"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", "btn-lg", "btn-block", "form-group", 3, "title", "disabled"]], template: function TenantIdSetupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0, 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function TenantIdSetupComponent_Template_form_ngSubmit_0_listener() { return ctx.setupLoginMode(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Tenant setup ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-form-group", 3);
        ɵngcc0.ɵɵelementStart(5, "label", 4);
        ɵngcc0.ɵɵtext(6, "Tenant ID");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 5, 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function TenantIdSetupComponent_Template_input_ngModelChange_7_listener($event) { return ctx.model.tenant = $event; });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "button", 7);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵtext(12, " Apply ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(9, 4, "e.g."), " t12345");
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.tenant);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 6, "Apply"));
        ɵngcc0.ɵɵproperty("disabled", !_r0.form.valid);
    } }, directives: [ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc7.C8yTranslateDirective, ɵngcc8.FormGroupComponent, ɵngcc9.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel], pipes: [ɵngcc10.C8yTranslatePipe], encapsulation: 2 });
TenantIdSetupComponent.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: LoginService },
    { type: AlertService },
    { type: TranslateService }
];
TenantIdSetupComponent.propDecorators = {
    onChangeView: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantIdSetupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-tenant-id-setup',
                template: "<form #tenantIdSetupForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Tenant setup\n  </div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n    translate\n  >\n    Apply\n  </button>\n</form>\n"
            }]
    }], function () { return [{ type: ɵngcc1.FetchClient }, { type: ɵngcc2.AppStateService }, { type: ɵngcc3.LoginService }, { type: ɵngcc4.AlertService }, { type: ɵngcc5.TranslateService }]; }, { onChangeView: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9sb2dpbi90ZW5hbnQtaWQtc2V0dXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVExQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7Ozs7Ozs7Ozs7O0FBQ0gsTUFBTSxPQUFPLHNCQUFzQjtBQUNuQyxJQU1FLFlBQ1UsTUFBbUIsRUFDbkIsRUFBbUIsRUFDbkIsWUFBMEIsRUFDMUIsS0FBbUIsRUFDbkIsZ0JBQWtDO0FBQzNDLFFBTFMsV0FBTSxHQUFOLE1BQU0sQ0FBYTtBQUFDLFFBQ3BCLE9BQUUsR0FBRixFQUFFLENBQWlCO0FBQUMsUUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUMzQixVQUFLLEdBQUwsS0FBSyxDQUFjO0FBQUMsUUFDcEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUM5QyxRQVpZLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUM5QyxRQUFFLGdCQUFXLEdBQUcsVUFBVSxDQUFDO0FBQzNCLFFBQUUsVUFBSyxHQUFHO0FBQ1YsWUFBSSxNQUFNLEVBQUUsRUFBRTtBQUNkLFNBQUcsQ0FBQztBQUNKLElBT0ssQ0FBQztBQUNOLElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFRLGNBQWM7QUFDdEI7QUFFUSxZQUZKLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzNDLFlBQUksSUFBSTtBQUNSLGdCQUFNLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQzFDLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUMzQyxnQkFBTSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztBQUNyQyxhQUFLO0FBQUMsWUFBQSxPQUFPLENBQUMsRUFBRTtBQUNoQixnQkFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO0FBQ3pDLG9CQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUNmLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQzNCLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQyxFQUMxRCxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUNoQyxDQUNGLENBQUM7QUFDVixpQkFBTztBQUFDLHFCQUFLO0FBQ2Isb0JBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxpQkFBTztBQUNQLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsdUJBQXVCO0FBQ3pCLFFBQUksTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztBQUNoRixRQUFJLElBQUksbUJBQW1CLEVBQUU7QUFDN0IsWUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDOUQsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtrREE3REMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxxQkFBcUIsa0JBQy9COzJyQkFBK0MsY0FFaEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a1ZBR0Q7QUFBQztBQUFnRCxZQWR4QyxXQUFXO0FBQUksWUFDZixlQUFlO0FBQUksWUFDbkIsWUFBWTtBQUFJLFlBQ2hCLFlBQVk7QUFBSSxZQUNoQixnQkFBZ0I7QUFBRztBQUFHO0FBQ2QsMkJBZWQsTUFBTTtBQUFJOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9naW5WaWV3cyB9IGZyb20gJy4vbG9naW4ubW9kZWwnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXRlbmFudC1pZC1zZXR1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZW5hbnQtaWQtc2V0dXAuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXM6IFtdXG59KVxuXG4vKipcbiAqIGBUZW5hbnRJZFNldHVwQ29tcG9uZW50YCBpcyBpbnRlbmRlZCB0byBiZSBzaG93biB3aGVuIHRlbmFudCdzIGlkIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IFVSTC5cbiAqIEl0IGFza3MgdGhlIHVzZXIgdG8gcHJvdmlkZSB0YXJnZXQgdGVuYW50J3MgaWQgYW5kIHRoZW4gaXQgZmV0Y2hlcyBsb2dpbiBvcHRpb25zIGZvciB0aGlzIHRlbmFudC5cbiAqIEluIGNhc2Ugb2YgT0FJLVNlY3VyZSBsb2dpbiBtb2RlLCBsb2dpbiBvcHRpb25zIHdpbGwgY29udGFpbiBgZG9tYWluYCBwcm9wZXJ0eSBzZXQgYnkgYmFja2VuZC5cbiAqIFRoZSBjb21wb25lbnQgd2lsbCByZWRpcmVjdCB1c2VyIHRvIHRoaXMgZG9tYWluLCBwcmVzZXJ2aW5nIFVSTCBwYXRoIGFuZCBwYXJhbXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5hbnRJZFNldHVwQ29tcG9uZW50IHtcbiAgQE91dHB1dCgpIG9uQ2hhbmdlVmlldyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgTE9HSU5fVklFV1MgPSBMb2dpblZpZXdzO1xuICBtb2RlbCA9IHtcbiAgICB0ZW5hbnQ6ICcnXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGxvZ2luIG1vZGUgZm9yIHBhcnRpY3VsYXIgdGVuYW50LiBJbiBjYXNlIG9mIE9BSS1TZWN1cmUgd2lsbCByZWRpcmVjdCB1c2VyIHRvIHRlbmFudCBkb21haW4uXG4gICAqL1xuICBhc3luYyBzZXR1cExvZ2luTW9kZSgpIHtcbiAgICB0aGlzLmNsaWVudC50ZW5hbnQgPSB0aGlzLm1vZGVsLnRlbmFudDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy51aS5yZWZyZXNoTG9naW5PcHRpb25zKCk7XG4gICAgICB0aGlzLmxvZ2luU2VydmljZS5pbml0TG9naW5PcHRpb25zKCk7XG4gICAgICB0aGlzLnJlZGlyZWN0VG9Db3JyZWN0RG9tYWluKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUucmVzICYmIGUucmVzLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKFxuICAgICAgICAgIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KFxuICAgICAgICAgICAgZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgdGVuYW50IHdpdGggSUQgXCJ7eyB0ZW5hbnRJZCB9fVwiLicpLFxuICAgICAgICAgICAgeyB0ZW5hbnRJZDogdGhpcy5tb2RlbC50ZW5hbnQgfVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVkaXJlY3RzIHRvIHRlbmFudCBkb21haW4gd2hlbiBsb2dpbiBtb2RlIGNvbnRhaW5zIGRvbWFpbi5cbiAgICovXG4gIHJlZGlyZWN0VG9Db3JyZWN0RG9tYWluKCkge1xuICAgIGNvbnN0IGxvZ2luUmVkaXJlY3REb21haW4gPSB0aGlzLmxvZ2luU2VydmljZS5sb2dpbk1vZGUubG9naW5SZWRpcmVjdERvbWFpbjtcbiAgICBpZiAobG9naW5SZWRpcmVjdERvbWFpbikge1xuICAgICAgdGhpcy5sb2dpblNlcnZpY2UucmVkaXJlY3RUb0RvbWFpbihsb2dpblJlZGlyZWN0RG9tYWluKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkNoYW5nZVZpZXcuZW1pdCh7IHZpZXc6IExvZ2luVmlld3MuQ3JlZGVudGlhbHMgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=