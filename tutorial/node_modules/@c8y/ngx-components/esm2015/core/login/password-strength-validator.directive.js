import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { StrengthValidatorService } from './strength-validator-service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './strength-validator-service';
export class PasswordStrengthValidatorDirective {
    constructor(passwordService) {
        this.passwordService = passwordService;
    }
    set passwordStrengthEnforced(value) {
        this.forced = value;
    }
    validate(control) {
        const strengthFulfilled = this.passwordService.isStrong(control.value || '');
        const enforcementForcedAndNotFulfilled = this.forced && !strengthFulfilled;
        return enforcementForcedAndNotFulfilled ? { passwordStrength: true } : null;
    }
}
PasswordStrengthValidatorDirective.ɵfac = function PasswordStrengthValidatorDirective_Factory(t) { return new (t || PasswordStrengthValidatorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StrengthValidatorService)); };
PasswordStrengthValidatorDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PasswordStrengthValidatorDirective, selectors: [["", "passwordStrengthEnforced", ""]], inputs: { passwordStrengthEnforced: "passwordStrengthEnforced" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective, multi: true }])] });
PasswordStrengthValidatorDirective.ctorParameters = () => [
    { type: StrengthValidatorService }
];
PasswordStrengthValidatorDirective.propDecorators = {
    passwordStrengthEnforced: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordStrengthValidatorDirective, [{
        type: Directive,
        args: [{
                selector: '[passwordStrengthEnforced]',
                providers: [{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective, multi: true }]
            }]
    }], function () { return [{ type: ɵngcc1.StrengthValidatorService }]; }, { passwordStrengthEnforced: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9sb2dpbi9wYXNzd29yZC1zdHJlbmd0aC12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBbUIsYUFBYSxFQUErQixNQUFNLGdCQUFnQixDQUFDO0FBQzdGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFNeEUsTUFBTSxPQUFPLGtDQUFrQztBQUFHLElBUWhELFlBQ1MsZUFBeUM7QUFDcEQsUUFEVyxvQkFBZSxHQUFmLGVBQWUsQ0FBMEI7QUFBQyxJQUNuRCxDQUFDO0FBQ0gsSUFQRSxJQUFhLHdCQUF3QixDQUFDLEtBQUs7QUFDN0MsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSCxJQUtFLFFBQVEsQ0FBQyxPQUF3QjtBQUFJLFFBQ25DLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNqRixRQUFJLE1BQU0sZ0NBQWdDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQy9FLFFBQUksT0FBTyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2hGLElBQUUsQ0FBQztBQUNIOzhEQXJCQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDRCQUE0QixrQkFDdEMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRTt3QkFBa0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsY0FDdEcsaVVBQ0k7QUFBQztBQUE0RCxZQU56RCx3QkFBd0I7QUFBRztBQUFHO0FBR2pDLHVDQU9ILEtBQUs7QUFBSTs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN0cmVuZ3RoVmFsaWRhdG9yU2VydmljZSB9IGZyb20gJy4vc3RyZW5ndGgtdmFsaWRhdG9yLXNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcGFzc3dvcmRTdHJlbmd0aEVuZm9yY2VkXScsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3JEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH1dXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuXG4gIHByaXZhdGUgZm9yY2VkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIHNldCBwYXNzd29yZFN0cmVuZ3RoRW5mb3JjZWQodmFsdWUpIHtcbiAgICB0aGlzLmZvcmNlZCA9IHZhbHVlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBhc3N3b3JkU2VydmljZTogU3RyZW5ndGhWYWxpZGF0b3JTZXJ2aWNlKSB7XG4gIH1cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgY29uc3Qgc3RyZW5ndGhGdWxmaWxsZWQgPSB0aGlzLnBhc3N3b3JkU2VydmljZS5pc1N0cm9uZyhjb250cm9sLnZhbHVlIHx8ICcnKTtcbiAgICBjb25zdCBlbmZvcmNlbWVudEZvcmNlZEFuZE5vdEZ1bGZpbGxlZCA9IHRoaXMuZm9yY2VkICYmICFzdHJlbmd0aEZ1bGZpbGxlZDtcbiAgICByZXR1cm4gZW5mb3JjZW1lbnRGb3JjZWRBbmROb3RGdWxmaWxsZWQgPyB7IHBhc3N3b3JkU3RyZW5ndGg6IHRydWUgfSA6IG51bGw7XG4gIH1cblxufVxuIl19