import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injector, Input, TemplateRef, Type } from '@angular/core';
import { CellRendererContext } from './cell-renderer';
export class CellRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        if (!this.prevSpec) {
            this.prevSpec = this.spec;
        }
        const { renderer } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
    }
    ngDoCheck() {
        if (!this.spec.context.value === this.prevSpec.context.value) {
            this.prevSpec = this.spec;
            this.cd.markForCheck();
        }
    }
}
CellRendererComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cell-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <span title=\"{{ spec.context.value }}\">\n    {{ spec.context.value }}\n  </span>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
CellRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
CellRendererComponent.propDecorators = {
    _spec: [{ type: Input, args: ['spec',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb3JlL2RhdGEtZ3JpZC9jb2x1bW4vY2VsbC1yZW5kZXJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUVULFFBQVEsRUFDUixLQUFLLEVBRUwsV0FBVyxFQUNYLElBQUksRUFDTCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsbUJBQW1CLEVBQW9CLE1BQU0saUJBQWlCLENBQUM7QUFPeEUsTUFBTSxPQUFPLHFCQUFxQjtJQVdoQyxZQUFvQixRQUFrQixFQUFVLEVBQXFCO1FBQWpELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtJQUFHLENBQUM7SUFUekUsSUFDSSxLQUFLLENBQUMsSUFBc0I7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQVFELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDM0I7UUFFRCxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUUvQixJQUFJLFFBQVEsWUFBWSxXQUFXLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7U0FDaEM7YUFBTSxJQUFJLFFBQVEsWUFBWSxJQUFJLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7WUFFaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQ3RDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUMxRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7YUFDdEIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7O1lBMUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qiw0a0JBQTZDO2dCQUM3QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O1lBYkMsUUFBUTtZQUhSLGlCQUFpQjs7O29CQW1CaEIsS0FBSyxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRG9DaGVjayxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBDZWxsUmVuZGVyZXJTcGVjIH0gZnJvbSAnLi9jZWxsLXJlbmRlcmVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNlbGwtcmVuZGVyZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENlbGxSZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgRG9DaGVjayB7XG4gIHNwZWM6IENlbGxSZW5kZXJlclNwZWM7XG4gIEBJbnB1dCgnc3BlYycpXG4gIHNldCBfc3BlYyhzcGVjOiBDZWxsUmVuZGVyZXJTcGVjKSB7XG4gICAgdGhpcy5zcGVjID0gc3BlYztcbiAgfVxuICBwcmV2U3BlYzogQ2VsbFJlbmRlcmVyU3BlYztcblxuICByZW5kZXJlclR5cGU6ICdURU1QTEFURScgfCAnQ09NUE9ORU5UJztcbiAgcmVuZGVyZXJJbmplY3RvcjogSW5qZWN0b3I7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICghdGhpcy5wcmV2U3BlYykge1xuICAgICAgdGhpcy5wcmV2U3BlYyA9IHRoaXMuc3BlYztcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSB0aGlzLnNwZWM7XG5cbiAgICBpZiAocmVuZGVyZXIgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnVEVNUExBVEUnO1xuICAgIH0gZWxzZSBpZiAocmVuZGVyZXIgaW5zdGFuY2VvZiBUeXBlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdDT01QT05FTlQnO1xuXG4gICAgICB0aGlzLnJlbmRlcmVySW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IENlbGxSZW5kZXJlckNvbnRleHQsIHVzZVZhbHVlOiB0aGlzLnNwZWMuY29udGV4dCB9XSxcbiAgICAgICAgcGFyZW50OiB0aGlzLmluamVjdG9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYgKCF0aGlzLnNwZWMuY29udGV4dC52YWx1ZSA9PT0gdGhpcy5wcmV2U3BlYy5jb250ZXh0LnZhbHVlKSB7XG4gICAgICB0aGlzLnByZXZTcGVjID0gdGhpcy5zcGVjO1xuICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==