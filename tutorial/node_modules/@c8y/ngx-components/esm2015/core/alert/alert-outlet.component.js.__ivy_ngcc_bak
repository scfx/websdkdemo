import { Component, TemplateRef, Attribute, HostBinding } from '@angular/core';
import { AlertService } from './alert.service';
/**
 * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
 *
 * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
 *
 * ## Example:
 * ```html
 *  <div class="alerts">
 *    <c8y-alert-outlet></c8y-alert-outlet>
 *  </div>
 * ```
 */
export class AlertOutletComponent {
    /**
     * @ignore
     */
    constructor(position, alertService) {
        this.position = position;
        this.alertService = alertService;
        /**
         * Currently displayed details of an alert. Only one alert’s details can be displayed at a time.”
         */
        this.detailDisplayedAlert = {};
        /**
         * @ignore
         */
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    /**
     * The array of current alerts.
     */
    get alerts() {
        return this.alertService.state$;
    }
    /**
     * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
     */
    getClass(alert) {
        const classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push(`alert-${alert.type}`);
        return classes.join(' ');
    }
    /**
     * Executes alert’s onClose method, if provided, and closes the alert.
     * @param alert The alert which will be closed.
     */
    close(alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    }
    /**
     * Expands details part of particular alert, and collapses details for another alerts.
     * @param alert The alert which details should be expanded.
     */
    showDetails(alert) {
        if (alert.onDetail) {
            return alert.onDetail();
        }
        this.detailDisplayedAlert = Object.assign({}, alert);
        this.detailDisplayedAlert.mode = 'raw';
        this.setDetailsContent(alert);
    }
    /**
     * Returns true if alert has extra detailedData or defines custom onDetail method.
     */
    hasDetails(alert) {
        return (alert.detailedData || alert.onDetail);
    }
    /**
     * Collapses alert's details.
     */
    closeDetails() {
        this.detailDisplayedAlert = {};
    }
    /**
     * Returns true if details part of alert is expanded.
     */
    isDetailsShow(alert) {
        return this.alertService.areSame(alert, this.detailDisplayedAlert);
    }
    /**
     * @ignore
     */
    isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    /**
     * @ignore
     */
    template(content) {
        return this.isTemplateRef(content) ? content : undefined;
    }
    setDetailsContent(alert) {
        if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
            this.detailDisplayedAlert.contents = alert.detailedData;
        }
        else {
            this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
        }
    }
}
AlertOutletComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-alert-outlet',
                template: "<div\n  class=\"alert animated fadeInRightBig m-t-16\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [textContent]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i c8yIcon=\"chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i c8yIcon=\"chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [textContent]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
            },] }
];
AlertOutletComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['position',] }] },
    { type: AlertService }
];
AlertOutletComponent.propDecorators = {
    isStatic: [{ type: HostBinding, args: ['class.static',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYWxlcnQvYWxlcnQtb3V0bGV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUcvQzs7Ozs7Ozs7Ozs7R0FXRztBQUtILE1BQU0sT0FBTyxvQkFBb0I7SUFlL0I7O09BRUc7SUFDSCxZQUNpQyxRQUFnQixFQUN4QyxZQUEwQjtRQURGLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDeEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFuQm5DOztXQUVHO1FBQ0gseUJBQW9CLEdBQVEsRUFBRSxDQUFDO1FBQy9COztXQUVHO1FBQzBCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFjNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUM3QyxDQUFDO0lBZEQ7O09BRUc7SUFDSCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFVRDs7T0FFRztJQUNILFFBQVEsQ0FBQyxLQUFZO1FBQ25CLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsS0FBWTtRQUNoQixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDakIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNEOzs7T0FHRztJQUNILFdBQVcsQ0FBQyxLQUFZO1FBQ3RCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN6QjtRQUNELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsVUFBVSxDQUFDLEtBQVk7UUFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRDs7T0FFRztJQUNILFlBQVk7UUFDVixJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDRDs7T0FFRztJQUNILGFBQWEsQ0FBQyxLQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFDRDs7T0FFRztJQUNILGFBQWEsQ0FBQyxLQUFLO1FBQ2pCLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUN0QyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLENBQUMsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDM0QsQ0FBQztJQUNPLGlCQUFpQixDQUFDLEtBQVk7UUFDcEMsSUFBSyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxZQUFZLEtBQUssUUFBUSxFQUFHO1lBQ3RGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztTQUN6RDthQUFNO1lBQ0wsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0gsQ0FBQzs7O1lBakdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qixta0RBQTRDO2FBQzdDOzs7eUNBb0JJLFNBQVMsU0FBQyxVQUFVO1lBdENoQixZQUFZOzs7dUJBMkJsQixXQUFXLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVSZWYsIEF0dHJpYnV0ZSwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAnLi9hbGVydC5tb2RlbCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuL2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQWxlcnQgb3V0bGV0IGNvbXBvbmVudCBzaG93cyBhbGwgYWRkZWQgYWxlcnRzLiBJdCBpcyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbidzIGBjOHktYm9vdHN0cmFwYCBjb21wb25lbnQuXG4gKlxuICogRm9yIGFwcGxpY2F0aW9ucyB3aGljaCBkb27igJl0IHVzZSBgYzh5LWJvb3RzdHJhcGAgY29tcG9uZW50IGJ1dCB3YW50IHRvIGRpc3BsYXkgYWxlcnRzIHZpYSBBbGVydFNlcnZpY2UsIGEgYzh5LWFsZXJ0LW91dGxldCBjb21wb25lbnQgbmVlZHMgdG8gYmUgYWRkZWQgZXhwbGljaXRseSBpbiB0aGUgdGVtcGxhdGUuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqICA8ZGl2IGNsYXNzPVwiYWxlcnRzXCI+XG4gKiAgICA8Yzh5LWFsZXJ0LW91dGxldD48L2M4eS1hbGVydC1vdXRsZXQ+XG4gKiAgPC9kaXY+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFsZXJ0LW91dGxldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9hbGVydC1vdXRsZXQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFsZXJ0T3V0bGV0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEN1cnJlbnRseSBkaXNwbGF5ZWQgZGV0YWlscyBvZiBhbiBhbGVydC4gT25seSBvbmUgYWxlcnTigJlzIGRldGFpbHMgY2FuIGJlIGRpc3BsYXllZCBhdCBhIHRpbWUu4oCdXG4gICAqL1xuICBkZXRhaWxEaXNwbGF5ZWRBbGVydDogYW55ID0ge307XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnN0YXRpYycpIGlzU3RhdGljID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgYXJyYXkgb2YgY3VycmVudCBhbGVydHMuXG4gICAqL1xuICBnZXQgYWxlcnRzKCk6IEJlaGF2aW9yU3ViamVjdDxBbGVydFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuYWxlcnRTZXJ2aWNlLnN0YXRlJDtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgQEF0dHJpYnV0ZSgncG9zaXRpb24nKSBwcml2YXRlIHBvc2l0aW9uOiBzdHJpbmcsXG4gICAgcHVibGljIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuaXNTdGF0aWMgPSB0aGlzLnBvc2l0aW9uID09PSAnc3RhdGljJztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIENTUyBjbGFzcyBmb3IgYW4gYWxlcnQgZGVwZW5kaW5nIG9uIGl0cyB0eXBlIHRvIHN0eWxlIHRoZSBjb3JyZXNwb25kaW5nIGFsZXJ0IGNvbXBvbmVudC5cbiAgICovXG4gIGdldENsYXNzKGFsZXJ0OiBBbGVydCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBpZiAoYWxlcnQudHlwZSAhPT0gJ2RhbmdlcicpIHtcbiAgICAgIGNsYXNzZXMucHVzaCgnaW50ZXJhY3QnKTtcbiAgICB9XG4gICAgY2xhc3Nlcy5wdXNoKGBhbGVydC0ke2FsZXJ0LnR5cGV9YCk7XG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhbGVydOKAmXMgb25DbG9zZSBtZXRob2QsIGlmIHByb3ZpZGVkLCBhbmQgY2xvc2VzIHRoZSBhbGVydC5cbiAgICogQHBhcmFtIGFsZXJ0IFRoZSBhbGVydCB3aGljaCB3aWxsIGJlIGNsb3NlZC5cbiAgICovXG4gIGNsb3NlKGFsZXJ0OiBBbGVydCkge1xuICAgIGlmIChhbGVydC5vbkNsb3NlKSB7XG4gICAgICBhbGVydC5vbkNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlbW92ZShhbGVydCk7XG4gIH1cbiAgLyoqXG4gICAqIEV4cGFuZHMgZGV0YWlscyBwYXJ0IG9mIHBhcnRpY3VsYXIgYWxlcnQsIGFuZCBjb2xsYXBzZXMgZGV0YWlscyBmb3IgYW5vdGhlciBhbGVydHMuXG4gICAqIEBwYXJhbSBhbGVydCBUaGUgYWxlcnQgd2hpY2ggZGV0YWlscyBzaG91bGQgYmUgZXhwYW5kZWQuXG4gICAqL1xuICBzaG93RGV0YWlscyhhbGVydDogQWxlcnQpIHtcbiAgICBpZiAoYWxlcnQub25EZXRhaWwpIHtcbiAgICAgIHJldHVybiBhbGVydC5vbkRldGFpbCgpO1xuICAgIH1cbiAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0ID0gT2JqZWN0LmFzc2lnbih7fSwgYWxlcnQpO1xuICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQubW9kZSA9ICdyYXcnO1xuICAgIHRoaXMuc2V0RGV0YWlsc0NvbnRlbnQoYWxlcnQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYWxlcnQgaGFzIGV4dHJhIGRldGFpbGVkRGF0YSBvciBkZWZpbmVzIGN1c3RvbSBvbkRldGFpbCBtZXRob2QuXG4gICAqL1xuICBoYXNEZXRhaWxzKGFsZXJ0OiBBbGVydCkge1xuICAgIHJldHVybiAoYWxlcnQuZGV0YWlsZWREYXRhIHx8IGFsZXJ0Lm9uRGV0YWlsKTtcbiAgfVxuICAvKipcbiAgICogQ29sbGFwc2VzIGFsZXJ0J3MgZGV0YWlscy5cbiAgICovXG4gIGNsb3NlRGV0YWlscygpIHtcbiAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0ID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBkZXRhaWxzIHBhcnQgb2YgYWxlcnQgaXMgZXhwYW5kZWQuXG4gICAqL1xuICBpc0RldGFpbHNTaG93KGFsZXJ0OiBBbGVydCkge1xuICAgIHJldHVybiB0aGlzLmFsZXJ0U2VydmljZS5hcmVTYW1lKGFsZXJ0LCB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0KTtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaXNUZW1wbGF0ZVJlZih2YWx1ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0ZW1wbGF0ZShjb250ZW50KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5pc1RlbXBsYXRlUmVmKGNvbnRlbnQpID8gY29udGVudCA6IHVuZGVmaW5lZDtcbiAgfVxuICBwcml2YXRlIHNldERldGFpbHNDb250ZW50KGFsZXJ0OiBBbGVydCkge1xuICAgIGlmICggdGhpcy5pc1RlbXBsYXRlUmVmKGFsZXJ0LmRldGFpbGVkRGF0YSkgfHwgdHlwZW9mIGFsZXJ0LmRldGFpbGVkRGF0YSA9PT0gJ3N0cmluZycgKSB7XG4gICAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0LmNvbnRlbnRzID0gYWxlcnQuZGV0YWlsZWREYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0LmNvbnRlbnRzID0gSlNPTi5zdHJpbmdpZnkoYWxlcnQuZGV0YWlsZWREYXRhLCBudWxsLCAyKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==