import { Pipe } from '@angular/core';
export class SelectModalFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => {
                const allValues = this.extractValues(item);
                const filteredValues = allValues.filter((value) => this.filterContainString(value, filterTerm));
                return filteredValues.length > 0;
            });
    }
    filterContainString(value, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    }
    extractValues(item) {
        let values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach((key) => {
            if (Array.isArray(item[key])) {
                item[key].forEach(obj => values.concat(this.extractValues(obj)));
            }
            if (item[key] instanceof Object) {
                values = values.concat(this.extractValues(item[key]));
            }
        });
        return values;
    }
}
SelectModalFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'selectModalFilterPipe',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9zZWxlY3QtbW9kYWwvc2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBTXBELE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsU0FBUyxDQUFDLEtBQTJCLEVBQUUsVUFBa0I7UUFDdkQsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDbkMsQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQXdCLEVBQUUsRUFBRTtnQkFDMUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNoRyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLG1CQUFtQixDQUFDLEtBQWEsRUFBRSxVQUFrQjtRQUMzRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0MsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sYUFBYSxDQUFDLElBQUk7UUFDeEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQzthQUNwRTtZQUNELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLE1BQU0sRUFBRTtnQkFDL0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7WUFqQ0YsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSx1QkFBdUI7YUFDOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJU2VsZWN0TW9kYWxPYmplY3QgfSBmcm9tICcuL3NlbGVjdC1tb2RhbC5tb2RlbCc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ3NlbGVjdE1vZGFsRmlsdGVyUGlwZScsXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdE1vZGFsRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaXRlbXM6IElTZWxlY3RNb2RhbE9iamVjdFtdLCBmaWx0ZXJUZXJtOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBmaWx0ZXJUZXJtLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgID8gaXRlbXNcbiAgICAgIDogaXRlbXMuZmlsdGVyKChpdGVtOiBJU2VsZWN0TW9kYWxPYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgYWxsVmFsdWVzID0gdGhpcy5leHRyYWN0VmFsdWVzKGl0ZW0pO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFZhbHVlcyA9IGFsbFZhbHVlcy5maWx0ZXIoKHZhbHVlKSA9PiB0aGlzLmZpbHRlckNvbnRhaW5TdHJpbmcodmFsdWUsIGZpbHRlclRlcm0pKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkVmFsdWVzLmxlbmd0aCA+IDA7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyQ29udGFpblN0cmluZyh2YWx1ZTogc3RyaW5nLCBmaWx0ZXJUZXJtOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0ZXJtID0gZmlsdGVyVGVybS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRlcm0pID4gLTE7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RWYWx1ZXMoaXRlbSkge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBpZiAoIGl0ZW0udmFsdWUgKSB7XG4gICAgICB2YWx1ZXMucHVzaChpdGVtLnZhbHVlKTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtW2tleV0pKSB7XG4gICAgICAgIGl0ZW1ba2V5XS5mb3JFYWNoKCBvYmogPT4gdmFsdWVzLmNvbmNhdCh0aGlzLmV4dHJhY3RWYWx1ZXMob2JqKSkgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtW2tleV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh0aGlzLmV4dHJhY3RWYWx1ZXMoaXRlbVtrZXldKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuIl19