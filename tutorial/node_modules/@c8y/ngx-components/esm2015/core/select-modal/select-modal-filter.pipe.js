import { Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class SelectModalFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => {
                const allValues = this.extractValues(item);
                const filteredValues = allValues.filter((value) => this.filterContainString(value, filterTerm));
                return filteredValues.length > 0;
            });
    }
    filterContainString(value, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    }
    extractValues(item) {
        let values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach((key) => {
            if (Array.isArray(item[key])) {
                item[key].forEach(obj => values.concat(this.extractValues(obj)));
            }
            if (item[key] instanceof Object) {
                values = values.concat(this.extractValues(item[key]));
            }
        });
        return values;
    }
}
SelectModalFilterPipe.ɵfac = function SelectModalFilterPipe_Factory(t) { return new (t || SelectModalFilterPipe)(); };
SelectModalFilterPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "selectModalFilterPipe", type: SelectModalFilterPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectModalFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'selectModalFilterPipe'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3NlbGVjdC1tb2RhbC9zZWxlY3QtbW9kYWwtZmlsdGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQUNuQyxTQUFTLENBQUMsS0FBMkIsRUFBRSxVQUFrQjtBQUFJLFFBQzNELE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO0FBQ3pDLFlBQU0sQ0FBQyxDQUFDLEtBQUs7QUFDYixZQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBd0IsRUFBRSxFQUFFO0FBQ2xELGdCQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsZ0JBQVEsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3hHLGdCQUFRLE9BQU8sY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDekMsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULElBQUUsQ0FBQztBQUNILElBQ1UsbUJBQW1CLENBQUMsS0FBYSxFQUFFLFVBQWtCO0FBQy9ELFFBQUksTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pELFFBQUksT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzRCxJQUFFLENBQUM7QUFDSCxJQUNVLGFBQWEsQ0FBQyxJQUFJO0FBQzVCLFFBQUksSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFFBQUksSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO0FBQ3RCLFlBQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsU0FBSztBQUNMLFFBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUN0QyxZQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUNwQyxnQkFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQztBQUMzRSxhQUFPO0FBQ1AsWUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxNQUFNLEVBQUU7QUFDdkMsZ0JBQVEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlELGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSDtpREFsQ0MsSUFBSSxTQUFDLGtCQUNKLElBQUksRUFBRSx1QkFBdUI7S0FDOUI7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVNlbGVjdE1vZGFsT2JqZWN0IH0gZnJvbSAnLi9zZWxlY3QtbW9kYWwubW9kZWwnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdzZWxlY3RNb2RhbEZpbHRlclBpcGUnLFxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RNb2RhbEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGl0ZW1zOiBJU2VsZWN0TW9kYWxPYmplY3RbXSwgZmlsdGVyVGVybTogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gZmlsdGVyVGVybS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICA/IGl0ZW1zXG4gICAgICA6IGl0ZW1zLmZpbHRlcigoaXRlbTogSVNlbGVjdE1vZGFsT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGFsbFZhbHVlcyA9IHRoaXMuZXh0cmFjdFZhbHVlcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRWYWx1ZXMgPSBhbGxWYWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4gdGhpcy5maWx0ZXJDb250YWluU3RyaW5nKHZhbHVlLCBmaWx0ZXJUZXJtKSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFZhbHVlcy5sZW5ndGggPiAwO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckNvbnRhaW5TdHJpbmcodmFsdWU6IHN0cmluZywgZmlsdGVyVGVybTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGVybSA9IGZpbHRlclRlcm0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtKSA+IC0xO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0VmFsdWVzKGl0ZW0pIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgaWYgKCBpdGVtLnZhbHVlICkge1xuICAgICAgdmFsdWVzLnB1c2goaXRlbS52YWx1ZSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbVtrZXldKSkge1xuICAgICAgICBpdGVtW2tleV0uZm9yRWFjaCggb2JqID0+IHZhbHVlcy5jb25jYXQodGhpcy5leHRyYWN0VmFsdWVzKG9iaikpICk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy5leHRyYWN0VmFsdWVzKGl0ZW1ba2V5XSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbn1cbiJdfQ==