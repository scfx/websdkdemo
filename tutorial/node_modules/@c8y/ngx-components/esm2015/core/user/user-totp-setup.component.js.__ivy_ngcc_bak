import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { UserService } from '@c8y/client';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import { ModalService } from '../modal/modal.service';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { LoginService } from '../login/login.service';
export class UserTotpSetupComponent {
    constructor(user, modalService, modal, loginService) {
        this.user = user;
        this.modalService = modalService;
        this.modal = modal;
        this.loginService = loginService;
    }
    totpSetupVerified(token) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.user.activateTotp();
            this.modal.hide();
            try {
                yield this.modalService.acknowledge(gettext('Logout required'), gettext('You must log out in order to apply your changes'), Status.WARNING, gettext('Log out'));
                yield this.loginService.logout();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    close() {
        this.modal.hide();
    }
}
UserTotpSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-user-totp-setup',
                template: "<c8y-modal [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <button\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"close\"\n    ><span aria-hidden=\"true\">\u00D7</span></button>\n    <h3 class=\"text-center\" translate>Set up two-factor authentication</h3>\n  </ng-container>\n  <c8y-totp-setup></c8y-totp-setup>\n  <c8y-totp-challenge (onSuccess)=\"totpSetupVerified($event)\"></c8y-totp-challenge>\n</c8y-modal>\n"
            },] }
];
UserTotpSetupComponent.ctorParameters = () => [
    { type: UserService },
    { type: ModalService },
    { type: BsModalRef },
    { type: LoginService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10b3RwLXNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvdXNlci91c2VyLXRvdHAtc2V0dXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU10RCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQ1UsSUFBaUIsRUFDakIsWUFBMEIsRUFDMUIsS0FBaUIsRUFDakIsWUFBMEI7UUFIMUIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUNqQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUksQ0FBQztJQUVuQyxpQkFBaUIsQ0FBQyxLQUFLOztZQUMzQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsQixJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQ2pDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUMxQixPQUFPLENBQUMsaURBQWlELENBQUMsRUFDMUQsTUFBTSxDQUFDLE9BQU8sRUFDZCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQ25CLENBQUM7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2xDO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsaUJBQWlCO2FBQ2xCO1FBQ0gsQ0FBQztLQUFBO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7O1lBN0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQix3ZkFBK0M7YUFDaEQ7OztZQVZRLFdBQVc7WUFHWCxZQUFZO1lBQ1osVUFBVTtZQUNWLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IE1vZGFsU2VydmljZSB9IGZyb20gJy4uL21vZGFsL21vZGFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS11c2VyLXRvdHAtc2V0dXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vdXNlci10b3RwLXNldHVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBVc2VyVG90cFNldHVwQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB1c2VyOiBVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWw6IEJzTW9kYWxSZWYsXG4gICAgcHJpdmF0ZSBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSkgeyB9XG5cbiAgYXN5bmMgdG90cFNldHVwVmVyaWZpZWQodG9rZW4pIHtcbiAgICBhd2FpdCB0aGlzLnVzZXIuYWN0aXZhdGVUb3RwKCk7XG4gICAgdGhpcy5tb2RhbC5oaWRlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWxTZXJ2aWNlLmFja25vd2xlZGdlKFxuICAgICAgICBnZXR0ZXh0KCdMb2dvdXQgcmVxdWlyZWQnKSxcbiAgICAgICAgZ2V0dGV4dCgnWW91IG11c3QgbG9nIG91dCBpbiBvcmRlciB0byBhcHBseSB5b3VyIGNoYW5nZXMnKSxcbiAgICAgICAgU3RhdHVzLldBUk5JTkcsXG4gICAgICAgIGdldHRleHQoJ0xvZyBvdXQnKVxuICAgICAgKTtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLmxvZ291dCgpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAvLyBpbnRlbmRlZCBlbXB0eVxuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICB9XG59XG4iXX0=