import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { OptionsService } from '../../common/options.service';
import { gettext } from '../../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../../common/options.service";
/**
 * This service is handling the cookie banner and cookie preferences related logic.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../common/options.service';
export class CookieBannerService {
    constructor(options) {
        this.options = options;
        this.STORAGE_KEY = 'acceptCookieNotice';
        this.COOKIE_BANNER = 'cookieBanner';
        this.COOKIE_PREFERENCES_CONFIG = 'cookiePreferences';
        this.isCookieBannerShowed$ = new Subject();
        this.cookieDescriptions = {
            required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
            functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
            marketing: gettext('These cookies are used to target advertising to a user.')
        };
    }
    /**
     * Returns Cookie preferences configuration.
     * @returns {object} Return an object with cookie preferences configuration defined in application options.
     */
    getCookiePreferencesConfig() {
        return this.options.get(this.COOKIE_PREFERENCES_CONFIG);
    }
    /**
     * Returns Cookie banner configuration.
     * @returns {object} Return an object with cookie banner configuration defined in application options.
     */
    getCookieBannerSettings() {
        return this.options.get(this.COOKIE_BANNER) || {};
    }
    /**
     * Converts the cookie preferences to boolean. Sets the cookie preferences configuration in local storage.
     * @param {object} cookiePreferences Object with cookie preferences configuration
     */
    setCookies(cookiePreferences) {
        const cookiesToSet = Object.assign({}, cookiePreferences);
        Object.entries(cookiesToSet).forEach(([cookieName, cookieValue]) => {
            cookiesToSet[cookieName] = typeof cookieValue === 'string' ? true : cookieValue;
        });
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiesToSet));
    }
    /**
     * Verifies that cookie banner should be shown.
     * @returns {boolean} Returns if the cookie banner should be shown.
     */
    shouldShowCookieBanner() {
        const settings = this.getCookieBannerSettings();
        return !!settings.cookieBannerText && !this.getUserCookiePreferences();
    }
    /**
     * Gets the cookie preferences configuration from local storage.
     * @returns {object} Object with cookie preferences configuration.
     */
    getUserCookiePreferences() {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
    }
    /**
     * Verifies that cookie preferences configuration is defined.
     * @returns {boolean} Returns if the cookie preferences configuration is defined.
     */
    isConfigCookiePreferencesDefined() {
        return !!this.getCookiePreferencesConfig();
    }
    /**
     * Verifies that functional cookies are enabled.
     * @returns {boolean} True when functional cookies are enabled.
     */
    isFunctionalCookieEnabled() {
        const { functional } = this.getUserCookiePreferences() || {};
        return functional === true;
    }
    /**
     * Description of cookies.
     * @param {'required' | 'functional' | 'marketing'} cookieType Takes one of the following options: 'required', 'functional', 'marketing'.
     * @returns {string} The default cookie description, if not explicitly defined in application options.
     */
    getCookieDescription(cookieType) {
        const cookieBannerConfigSettings = this.getCookiePreferencesConfig();
        return typeof cookieBannerConfigSettings[cookieType] === 'string'
            ? cookieBannerConfigSettings[cookieType]
            : this.cookieDescriptions[cookieType];
    }
    /**
     * Transforms cookie preferences configuration object to an array of cookie preferences objects. Each object in returned array contains cookie 'name', 'value' and 'isReadonly' property.
     * @param {object} cookiePreferences.
     * @returns {Array} Array shows if the cookie is Readonly.
     */
    transformCookiePreferencesToList(cookiePreferences) {
        return Object.entries(cookiePreferences).map(([name, value]) => {
            const isReadonly = name === 'required';
            return { name, value, isReadonly };
        });
    }
    /**
     * Transforms an array of cookie preferences objects to cookie preferences configuration object.
     * @param {Array} cookiePreferencesList Array of cookie preferences.
     * @returns {object} An object with cookie preferences configuration.
     */
    transformCookiePreferencesListToCookiePreferences(cookiePreferencesList) {
        return cookiePreferencesList.reduce((cookiePref, cookie) => {
            const key = cookie.name;
            cookiePref[key] = cookie.value;
            return cookiePref;
        }, {});
    }
}
CookieBannerService.ɵfac = function CookieBannerService_Factory(t) { return new (t || CookieBannerService)(ɵngcc0.ɵɵinject(ɵngcc1.OptionsService)); };
CookieBannerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(i0.ɵɵinject(i1.OptionsService)); }, token: CookieBannerService, providedIn: "root" });
CookieBannerService.ctorParameters = () => [
    { type: OptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieBannerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.OptionsService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,