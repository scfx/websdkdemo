import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { forkJoin, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { toObservable } from '../common';
import { NavigatorNode } from '../navigator';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import * as ɵngcc0 from '@angular/core';
export class ProviderConfigurationNodeFactory {
    constructor(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            const canActivate = this.config
                .map(this.getGuards.bind(this))
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map((canActivateResult) => this.config
                .map((c, index) => canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined)
                .filter(el => !!el)), tap(nodes => (this.nodes = nodes)));
        }
        return this.nodes;
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getGuards(c) {
        let result = [];
        if (c.tab && c.tab.canActivate && c.tab.canActivate.length) {
            result = [...result, ...c.tab.canActivate.map(ca => this.injector.get(ca))];
        }
        if (c.navigation.canActivate && c.navigation.canActivate.length) {
            result = [...result, ...c.navigation.canActivate.map(ca => this.injector.get(ca))];
        }
        return result;
    }
}
ProviderConfigurationNodeFactory.ɵfac = function ProviderConfigurationNodeFactory_Factory(t) { return new (t || ProviderConfigurationNodeFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ProviderConfigurationNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationNodeFactory, factory: ProviderConfigurationNodeFactory.ɵfac });
ProviderConfigurationNodeFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }, { type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcHJvdmlkZXItY29uZmlndXJhdGlvbi9wcm92aWRlci1jb25maWd1cmF0aW9uLW5vZGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0sY0FBYyxDQUFDO0FBRW5FLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUc3RSxNQUFNLE9BQU8sZ0NBQWdDO0FBQUcsSUFJOUMsWUFHRSxNQUFpQyxFQUN6QixRQUFrQjtBQUMzQixRQURTLGFBQVEsR0FBUixRQUFRLENBQVU7QUFDOUIsUUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSCxJQUNFLEdBQUc7QUFDTCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDN0MsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDckIsWUFBTSxNQUFNLFdBQVcsR0FBK0IsSUFBSSxDQUFDLE1BQU07QUFDakUsaUJBQVMsR0FBRyxDQUFD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QyxZQWxCc0IsUUFBUTtBQUFHOzs7Ozs7Ozs2REFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHRvT2JzZXJ2YWJsZSB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBOYXZpZ2F0b3JOb2RlLCBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB9IGZyb20gJy4uL25hdmlnYXRvcic7XG5pbXBvcnQgeyBEeW5hbWljUHJvdmlkZXJDb25maWcgfSBmcm9tICcuL21vZGVsL2R5bmFtaWMtcHJvdmlkZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUcgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24taG9vayc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25Ob2RlRmFjdG9yeSBpbXBsZW1lbnRzIE5hdmlnYXRvck5vZGVGYWN0b3J5IHtcbiAgcHJpdmF0ZSBjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdO1xuICBwcml2YXRlIG5vZGVzOiBOYXZpZ2F0b3JOb2RlW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUcpXG4gICAgY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXVtdLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuY29uZmlnID0gZmxhdHRlbihjb25maWcpO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIGlmICghdGhpcy5jb25maWcgfHwgIXRoaXMuY29uZmlnLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5ub2Rlcykge1xuICAgICAgY29uc3QgY2FuQWN0aXZhdGU6IEFycmF5PE9ic2VydmFibGU8Ym9vbGVhbj4+ID0gdGhpcy5jb25maWdcbiAgICAgICAgLm1hcCh0aGlzLmdldEd1YXJkcy5iaW5kKHRoaXMpKVxuICAgICAgICAubWFwKHRoaXMuY2hlY2tDYW5BY3RpdmF0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgcmV0dXJuIGZvcmtKb2luKGNhbkFjdGl2YXRlKS5waXBlKFxuICAgICAgICBtYXAoKGNhbkFjdGl2YXRlUmVzdWx0OiBib29sZWFuW10pID0+XG4gICAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICAgICAgIC5tYXAoKGMsIGluZGV4KSA9PlxuICAgICAgICAgICAgICBjYW5BY3RpdmF0ZVJlc3VsdFtpbmRleF0gPyBuZXcgTmF2aWdhdG9yTm9kZShjLm5hdmlnYXRpb24pIDogdW5kZWZpbmVkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuZmlsdGVyKGVsID0+ICEhZWwpXG4gICAgICAgICksXG4gICAgICAgIHRhcChub2RlcyA9PiAodGhpcy5ub2RlcyA9IG5vZGVzKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrQ2FuQWN0aXZhdGUoY2E6IENhbkFjdGl2YXRlW10pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAoISFjYSAmJiBjYS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNhbkFjdGl2YXRlUmVzdWx0OiBBcnJheTxPYnNlcnZhYmxlPGJvb2xlYW4+PiA9IGNhXG4gICAgICAgIC5tYXAoKGNhbkFjdGl2YXRlOiBDYW5BY3RpdmF0ZSkgPT4gY2FuQWN0aXZhdGUuY2FuQWN0aXZhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQpKVxuICAgICAgICAubWFwKHRvT2JzZXJ2YWJsZSkgYXMgQXJyYXk8T2JzZXJ2YWJsZTxib29sZWFuPj47XG5cbiAgICAgIHJldHVybiBmb3JrSm9pbihjYW5BY3RpdmF0ZVJlc3VsdCkucGlwZShcbiAgICAgICAgbWFwKChjYVJlc3VsdDogYm9vbGVhbltdKSA9PiBjYVJlc3VsdC5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICYmIGN1cnIpKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHdWFyZHMoYykge1xuICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgIGlmIChjLnRhYiAmJiBjLnRhYi5jYW5BY3RpdmF0ZSAmJiBjLnRhYi5jYW5BY3RpdmF0ZS5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsuLi5yZXN1bHQsIC4uLmMudGFiLmNhbkFjdGl2YXRlLm1hcChjYSA9PiB0aGlzLmluamVjdG9yLmdldChjYSkpXTtcbiAgICB9XG5cbiAgICBpZiAoYy5uYXZpZ2F0aW9uLmNhbkFjdGl2YXRlICYmIGMubmF2aWdhdGlvbi5jYW5BY3RpdmF0ZS5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsuLi5yZXN1bHQsIC4uLmMubmF2aWdhdGlvbi5jYW5BY3RpdmF0ZS5tYXAoY2EgPT4gdGhpcy5pbmplY3Rvci5nZXQoY2EpKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19