import { forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '../common/common.module';
import { CoreModule } from '../core.module';
import { DynamicFormsModule } from '../dynamic-forms/dynamic-forms.module';
import { HOOK_NAVIGATOR_NODES } from '../navigator';
import { HOOK_ROUTE } from '../router';
import { HOOK_TABS } from '../tabs';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationNodeFactory } from './provider-configuration-node.factory';
import { ProviderConfigurationRouteFactory } from './provider-configuration-route.factory';
import { ProviderConfigurationTabFactory } from './provider-configuration-tab.factory';
import { ProviderConfigurationComponent } from './provider-configuration.component';
export class ProviderConfigurationModule {
    static config(config) {
        return {
            ngModule: ProviderConfigurationModule,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    }
}
ProviderConfigurationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ProviderConfigurationComponent],
                exports: [ProviderConfigurationComponent],
                imports: [CoreModule, CommonModule, DynamicFormsModule],
                entryComponents: [ProviderConfigurationComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useClass: forwardRef(() => ProviderConfigurationRouteFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: forwardRef(() => ProviderConfigurationNodeFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: forwardRef(() => ProviderConfigurationTabFactory),
                        multi: true
                    }
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24vcHJvdmlkZXItY29uZmlndXJhdGlvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQXlCcEYsTUFBTSxPQUFPLDJCQUEyQjtJQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQStCO1FBQzNDLE9BQU87WUFDTCxRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3RGLENBQUM7SUFDSixDQUFDOzs7WUE3QkYsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLDhCQUE4QixDQUFDO2dCQUM5QyxPQUFPLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztnQkFDekMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztnQkFDdkQsZUFBZSxFQUFFLENBQUMsOEJBQThCLENBQUM7Z0JBQ2pELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQzt3QkFDN0QsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjt3QkFDN0IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQzt3QkFDNUQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLFNBQVM7d0JBQ2xCLFFBQVEsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsK0JBQStCLENBQUM7d0JBQzNELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3J3YXJkUmVmLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJy4uL2NvcmUubW9kdWxlJztcbmltcG9ydCB7IER5bmFtaWNGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2R5bmFtaWMtZm9ybXMvZHluYW1pYy1mb3Jtcy5tb2R1bGUnO1xuaW1wb3J0IHsgSE9PS19OQVZJR0FUT1JfTk9ERVMgfSBmcm9tICcuLi9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgSE9PS19ST1VURSB9IGZyb20gJy4uL3JvdXRlcic7XG5pbXBvcnQgeyBIT09LX1RBQlMgfSBmcm9tICcuLi90YWJzJztcbmltcG9ydCB7IER5bmFtaWNQcm92aWRlckNvbmZpZyB9IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRyB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLW5vZGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tcm91dGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25UYWJGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLXRhYi5mYWN0b3J5JztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtQcm92aWRlckNvbmZpZ3VyYXRpb25Db21wb25lbnRdLFxuICBleHBvcnRzOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIENvbW1vbk1vZHVsZSwgRHluYW1pY0Zvcm1zTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZUNsYXNzOiBmb3J3YXJkUmVmKCgpID0+IFByb3ZpZGVyQ29uZmlndXJhdGlvblJvdXRlRmFjdG9yeSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogZm9yd2FyZFJlZigoKSA9PiBQcm92aWRlckNvbmZpZ3VyYXRpb25Ob2RlRmFjdG9yeSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19UQUJTLFxuICAgICAgdXNlQ2xhc3M6IGZvcndhcmRSZWYoKCkgPT4gUHJvdmlkZXJDb25maWd1cmF0aW9uVGFiRmFjdG9yeSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25Nb2R1bGUge1xuICBzdGF0aWMgY29uZmlnKGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogUHJvdmlkZXJDb25maWd1cmF0aW9uTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnLCBtdWx0aTogdHJ1ZSB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==