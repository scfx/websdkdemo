import { Inject, Injectable, Optional } from '@angular/core';
import { flatten, get, uniqBy } from 'lodash-es';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationComponent } from './provider-configuration.component';
import { ConditionalTabsOutletComponent } from '../tabs';
export class ProviderConfigurationRouteFactory {
    constructor(config) {
        this.config = flatten(config);
    }
    get() {
        const navigationRoutes = uniqBy(this.config.filter(c => c.tab), 'navigation.path').map(c => {
            return {
                path: c.navigation.path,
                component: ConditionalTabsOutletComponent
            };
        });
        const navigationWithTabsRoutes = this.config.map(c => ({
            path: c.tab
                ? `${c.navigation.path.replace(/^\/|\/$/g, '')}/${c.tab.path.replace(/^\/|\/$/g, '')}`
                : c.navigation.path,
            component: ProviderConfigurationComponent,
            canActivate: [
                ...(c.navigation.canActivate || []),
                ...(get(c, 'tab.canActivate') || [])
            ].filter(g => !!g),
            data: {
                layout: c.layout,
                endpoint: c.endpoint
            }
        }));
        return [...navigationRoutes, ...navigationWithTabsRoutes];
    }
}
ProviderConfigurationRouteFactory.decorators = [
    { type: Injectable }
];
ProviderConfigurationRouteFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1yb3V0ZS5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tcm91dGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR2pELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzdFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUt6RCxNQUFNLE9BQU8saUNBQWlDO0lBRzVDLFlBQThELE1BQWlDO1FBQzdGLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxHQUFHO1FBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDekYsT0FBTztnQkFDTCxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJO2dCQUN2QixTQUFTLEVBQUUsOEJBQThCO2FBQzFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRztnQkFDVCxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3RGLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUk7WUFDckIsU0FBUyxFQUFFLDhCQUE4QjtZQUN6QyxXQUFXLEVBQUU7Z0JBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztnQkFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU07Z0JBQ2hCLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUTthQUNyQjtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTyxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzVELENBQUM7OztZQWhDRixVQUFVOzs7d0NBSUksUUFBUSxZQUFJLE1BQU0sU0FBQyw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmbGF0dGVuLCBnZXQsIHVuaXFCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSb3V0ZUZhY3RvcnkgfSBmcm9tICcuLi9yb3V0ZXInO1xuaW1wb3J0IHsgRHluYW1pY1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi9tb2RlbC9keW5hbWljLXByb3ZpZGVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLWhvb2snO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb25kaXRpb25hbFRhYnNPdXRsZXRDb21wb25lbnQgfSBmcm9tICcuLi90YWJzJztcbmltcG9ydCB7IEV4dGVuc2lvbkZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24vZXh0ZW5zaW9uLWhvb2tzJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyQ29uZmlndXJhdGlvblJvdXRlRmFjdG9yeSBpbXBsZW1lbnRzIEV4dGVuc2lvbkZhY3Rvcnk8Um91dGU+IHtcbiAgcHJpdmF0ZSBjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRykgY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXVtdKSB7XG4gICAgdGhpcy5jb25maWcgPSBmbGF0dGVuKGNvbmZpZyk7XG4gIH1cblxuICBnZXQoKSB7XG4gICAgY29uc3QgbmF2aWdhdGlvblJvdXRlcyA9IHVuaXFCeSh0aGlzLmNvbmZpZy5maWx0ZXIoYyA9PiBjLnRhYiksICduYXZpZ2F0aW9uLnBhdGgnKS5tYXAoYyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoOiBjLm5hdmlnYXRpb24ucGF0aCxcbiAgICAgICAgY29tcG9uZW50OiBDb25kaXRpb25hbFRhYnNPdXRsZXRDb21wb25lbnRcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uV2l0aFRhYnNSb3V0ZXMgPSB0aGlzLmNvbmZpZy5tYXAoYyA9PiAoe1xuICAgICAgcGF0aDogYy50YWJcbiAgICAgICAgPyBgJHtjLm5hdmlnYXRpb24ucGF0aC5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpfS8ke2MudGFiLnBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKX1gXG4gICAgICAgIDogYy5uYXZpZ2F0aW9uLnBhdGgsXG4gICAgICBjb21wb25lbnQ6IFByb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudCxcbiAgICAgIGNhbkFjdGl2YXRlOiBbXG4gICAgICAgIC4uLihjLm5hdmlnYXRpb24uY2FuQWN0aXZhdGUgfHwgW10pLFxuICAgICAgICAuLi4oZ2V0KGMsICd0YWIuY2FuQWN0aXZhdGUnKSB8fCBbXSlcbiAgICAgIF0uZmlsdGVyKGcgPT4gISFnKSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbGF5b3V0OiBjLmxheW91dCxcbiAgICAgICAgZW5kcG9pbnQ6IGMuZW5kcG9pbnRcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICByZXR1cm4gWy4uLm5hdmlnYXRpb25Sb3V0ZXMsIC4uLm5hdmlnYXRpb25XaXRoVGFic1JvdXRlc107XG4gIH1cbn1cbiJdfQ==