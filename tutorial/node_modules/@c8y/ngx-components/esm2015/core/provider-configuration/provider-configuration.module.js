import { forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '../common/common.module';
import { CoreModule } from '../core.module';
import { DynamicFormsModule } from '../dynamic-forms/dynamic-forms.module';
import { HOOK_NAVIGATOR_NODES } from '../navigator';
import { HOOK_ROUTE } from '../router';
import { HOOK_TABS } from '../tabs';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationNodeFactory } from './provider-configuration-node.factory';
import { ProviderConfigurationRouteFactory } from './provider-configuration-route.factory';
import { ProviderConfigurationTabFactory } from './provider-configuration-tab.factory';
import { ProviderConfigurationComponent } from './provider-configuration.component';
import * as ɵngcc0 from '@angular/core';
export class ProviderConfigurationModule {
    static config(config) {
        return {
            ngModule: ProviderConfigurationModule,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    }
}
ProviderConfigurationModule.ɵfac = function ProviderConfigurationModule_Factory(t) { return new (t || ProviderConfigurationModule)(); };
ProviderConfigurationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ProviderConfigurationModule });
ProviderConfigurationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useClass: forwardRef(() => ProviderConfigurationRouteFactory),
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: forwardRef(() => ProviderConfigurationNodeFactory),
            multi: true
        },
        {
            provide: HOOK_TABS,
            useClass: forwardRef(() => ProviderConfigurationTabFactory),
            multi: true
        }
    ], imports: [[CoreModule, CommonModule, DynamicFormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationModule, [{
        type: NgModule,
        args: [{
                declarations: [ProviderConfigurationComponent],
                exports: [ProviderConfigurationComponent],
                imports: [CoreModule, CommonModule, DynamicFormsModule],
                entryComponents: [ProviderConfigurationComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useClass: forwardRef(() => ProviderConfigurationRouteFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: forwardRef(() => ProviderConfigurationNodeFactory),
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: forwardRef(() => ProviderConfigurationTabFactory),
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProviderConfigurationModule, { declarations: function () { return [ProviderConfigurationComponent]; }, imports: function () { return [CoreModule, CommonModule, DynamicFormsModule]; }, exports: function () { return [ProviderConfigurationComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcHJvdmlkZXItY29uZmlndXJhdGlvbi9wcm92aWRlci1jb25maWd1cmF0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXBDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQXlCcEYsTUFBTSxPQUFPLDJCQUEyQjtBQUN4QyxJQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBK0I7QUFBSSxRQUMvQyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsMkJBQTJCO0FBQzNDLFlBQU0sU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDM0YsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7dURBOUJDLFFBQVEsU0FBQyxrQkFDUixZQUFZLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztpQkFDOUMsT0FBTyxFQUFFLENBQUMsOEJBQThCLENBQUMsa0JBQ3pDLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUU7aUJBQWtCLENBQUMsa0JBQ3ZELGVBQWUsRUFBRSxDQUFDLDhCQUE4QixDQUFDOztLQUNqRCxTQUFTLEVBQUU7S0FDVCwwQkFDRSxPQUFPLEVBQUUsVUFBVTtDQUNuQixRQUFRLEVBQUUsVUFBVSxDQUFDO0NBQUcsRUFBRSxDQUFDOztnQkFBaUMsQ0FBQztBQUM3RCxLQUFLLEVBQUUsSUFBSSxzQkFDWixzQkFDRDtPQUNFLE9BQU8sRUFBRTs7Q0FBb0I7aUJBQzdCLFFBQVEsRUFBRTtLQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQWdDLENBQUMsMEJBQzVEO0dBQUssRUFBRSxJQUFJO09BQ1o7bUJBQ0QsMEJBQ0UsT0FBTyxFQUFFLFNBQVM7b0JBQ2xCLFFBQVEsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsK0JBQStCLENBQUMsMEJBQzNELEtBQUssRUFBRSxJQUFJO2VBQ1o7U0FDRjtNQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrVkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9yd2FyZFJlZiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICcuLi9jb3JlLm1vZHVsZSc7XG5pbXBvcnQgeyBEeW5hbWljRm9ybXNNb2R1bGUgfSBmcm9tICcuLi9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMubW9kdWxlJztcbmltcG9ydCB7IEhPT0tfTkFWSUdBVE9SX05PREVTIH0gZnJvbSAnLi4vbmF2aWdhdG9yJztcbmltcG9ydCB7IEhPT0tfUk9VVEUgfSBmcm9tICcuLi9yb3V0ZXInO1xuaW1wb3J0IHsgSE9PS19UQUJTIH0gZnJvbSAnLi4vdGFicyc7XG5pbXBvcnQgeyBEeW5hbWljUHJvdmlkZXJDb25maWcgfSBmcm9tICcuL21vZGVsL2R5bmFtaWMtcHJvdmlkZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUcgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24taG9vayc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Ob2RlRmFjdG9yeSB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnknO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWd1cmF0aW9uUm91dGVGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLXJvdXRlLmZhY3RvcnknO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWd1cmF0aW9uVGFiRmFjdG9yeSB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi10YWIuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Db21wb25lbnQgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1Byb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBDb21tb25Nb2R1bGUsIER5bmFtaWNGb3Jtc01vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1Byb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VDbGFzczogZm9yd2FyZFJlZigoKSA9PiBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICAgICAgdXNlQ2xhc3M6IGZvcndhcmRSZWYoKCkgPT4gUHJvdmlkZXJDb25maWd1cmF0aW9uTm9kZUZhY3RvcnkpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfVEFCUyxcbiAgICAgIHVzZUNsYXNzOiBmb3J3YXJkUmVmKCgpID0+IFByb3ZpZGVyQ29uZmlndXJhdGlvblRhYkZhY3RvcnkpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJDb25maWd1cmF0aW9uTW9kdWxlIHtcbiAgc3RhdGljIGNvbmZpZyhjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdKTogTW9kdWxlV2l0aFByb3ZpZGVyczxQcm92aWRlckNvbmZpZ3VyYXRpb25Nb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZywgbXVsdGk6IHRydWUgfV1cbiAgICB9O1xuICB9XG59XG4iXX0=