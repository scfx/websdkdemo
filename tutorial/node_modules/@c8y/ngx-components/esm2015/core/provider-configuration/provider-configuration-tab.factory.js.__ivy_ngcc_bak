import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { flatten } from 'lodash-es';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from '../common';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
export class ProviderConfigurationTabFactory {
    constructor(config, router, injector) {
        this.router = router;
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        const configForRoute = this.config.find(c => c.tab
            ? this.router.url === '/' + this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
            : false);
        const filteredRoutes = configForRoute
            ? this.config.filter(c => c.navigation.path.replace(/^\/|\/$/g, '') ===
                configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab)
            : [];
        const canActivate = filteredRoutes
            .map(c => c.tab.canActivate && c.tab.canActivate.length
            ? c.tab.canActivate.map(ca => this.injector.get(ca))
            : undefined)
            .map(this.checkCanActivate.bind(this));
        return canActivate.length > 0
            ? forkJoin(canActivate).pipe(map((canActivateResult) => filteredRoutes
                .map((c, index) => {
                const tab = Object.assign(Object.assign({}, c.tab), { path: this.getNodeTabPath(c.navigation.path, c.tab.path) });
                return canActivateResult[index] ? tab : undefined;
            })
                .filter(el => !!el)))
            : [];
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getNodeTabPath(nodePath, tabPath) {
        return `${nodePath.replace(/^\/|\/$/g, '')}/${tabPath.replace(/^\/|\/$/g, '')}`;
    }
}
ProviderConfigurationTabFactory.decorators = [
    { type: Injectable }
];
ProviderConfigurationTabFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Router },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi10YWIuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcHJvdmlkZXItY29uZmlndXJhdGlvbi9wcm92aWRlci1jb25maWd1cmF0aW9uLXRhYi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFlLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHekMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHN0UsTUFBTSxPQUFPLCtCQUErQjtJQUcxQyxZQUdFLE1BQWlDLEVBQzFCLE1BQWMsRUFDYixRQUFrQjtRQURuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsR0FBRztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdkMsT0FBTztTQUNSO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDMUMsQ0FBQyxDQUFDLEdBQUc7WUFDSCxDQUFDLENBQUMsSUFB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Q0g7UUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQVEsRUFBRSxPQUFPO1FBQ3RDLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xGLENBQUM7OztZQTFFRixVQUFVOzs7d0NBS04sUUFBUSxZQUNSLE1BQU0sU0FBQyw0QkFBNEI7WUFmbEIsTUFBTTtZQURDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdG9PYnNlcnZhYmxlIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IFRhYiwgVGFiRmFjdG9yeSB9IGZyb20gJy4uL3RhYnMnO1xuaW1wb3J0IHsgRHluYW1pY1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi9tb2RlbC9keW5hbWljLXByb3ZpZGVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLWhvb2snO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJDb25maWd1cmF0aW9uVGFiRmFjdG9yeSBpbXBsZW1lbnRzIFRhYkZhY3Rvcnkge1xuICBwcml2YXRlIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUcpXG4gICAgY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXVtdLFxuICAgIHB1YmxpYyByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLmNvbmZpZyA9IGZsYXR0ZW4oY29uZmlnKTtcbiAgfVxuXG4gIGdldCgpIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnIHx8ICF0aGlzLmNvbmZpZy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWdGb3JSb3V0ZSA9IHRoaXMuY29uZmlnLmZpbmQoYyA9PlxuICAgICAgYy50YWJcbiAgICAgICAgPyB0aGlzLnJvdXRlci51cmwgPT09ICcvJyArIHRoaXMuZ2V0Tm9kZVRhYlBhdGgoYy5uYXZpZ2F0aW9uLnBhdGgsIGMudGFiLnBhdGgpIHx8XG4gICAgICAgICAgdGhpcy5yb3V0ZXIudXJsLnN0YXJ0c1dpdGgoJy8nICsgYy5uYXZpZ2F0aW9uLnBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKSlcbiAgICAgICAgOiBmYWxzZVxuICAgICk7XG5cbiAgICBjb25zdCBmaWx0ZXJlZFJvdXRlcyA9IGNvbmZpZ0ZvclJvdXRlXG4gICAgICA/IHRoaXMuY29uZmlnLmZpbHRlcihcbiAgICAgICAgICBjID0+XG4gICAgICAgICAgICBjLm5hdmlnYXRpb24ucGF0aC5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpID09PVxuICAgICAgICAgICAgICBjb25maWdGb3JSb3V0ZS5uYXZpZ2F0aW9uLnBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKSAmJiBjLnRhYlxuICAgICAgICApXG4gICAgICA6IFtdO1xuXG4gICAgY29uc3QgY2FuQWN0aXZhdGU6IEFycmF5PE9ic2VydmFibGU8Ym9vbGVhbj4+ID0gZmlsdGVyZWRSb3V0ZXNcbiAgICAgIC5tYXAoYyA9PlxuICAgICAgICBjLnRhYi5jYW5BY3RpdmF0ZSAmJiBjLnRhYi5jYW5BY3RpdmF0ZS5sZW5ndGhcbiAgICAgICAgICA/IGMudGFiLmNhbkFjdGl2YXRlLm1hcChjYSA9PiB0aGlzLmluamVjdG9yLmdldChjYSkpXG4gICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgIClcbiAgICAgIC5tYXAodGhpcy5jaGVja0NhbkFjdGl2YXRlLmJpbmQodGhpcykpO1xuXG4gICAgcmV0dXJuIGNhbkFjdGl2YXRlLmxlbmd0aCA+IDBcbiAgICAgID8gZm9ya0pvaW4oY2FuQWN0aXZhdGUpLnBpcGUoXG4gICAgICAgICAgbWFwKChjYW5BY3RpdmF0ZVJlc3VsdDogYm9vbGVhbltdKSA9PlxuICAgICAgICAgICAgZmlsdGVyZWRSb3V0ZXNcbiAgICAgICAgICAgICAgLm1hcCgoYywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWIgPSB7XG4gICAgICAgICAgICAgICAgICAuLi5jLnRhYixcbiAgICAgICAgICAgICAgICAgIHBhdGg6IHRoaXMuZ2V0Tm9kZVRhYlBhdGgoYy5uYXZpZ2F0aW9uLnBhdGgsIGMudGFiLnBhdGgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FuQWN0aXZhdGVSZXN1bHRbaW5kZXhdID8gKHRhYiBhcyBUYWIpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZmlsdGVyKGVsID0+ICEhZWwpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICA6IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0NhbkFjdGl2YXRlKGNhOiBDYW5BY3RpdmF0ZVtdKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgaWYgKCEhY2EgJiYgY2EubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjYW5BY3RpdmF0ZVJlc3VsdDogQXJyYXk8T2JzZXJ2YWJsZTxib29sZWFuPj4gPSBjYVxuICAgICAgICAubWFwKChjYW5BY3RpdmF0ZTogQ2FuQWN0aXZhdGUpID0+IGNhbkFjdGl2YXRlLmNhbkFjdGl2YXRlKHVuZGVmaW5lZCwgdW5kZWZpbmVkKSlcbiAgICAgICAgLm1hcCh0b09ic2VydmFibGUpIGFzIEFycmF5PE9ic2VydmFibGU8Ym9vbGVhbj4+O1xuXG4gICAgICByZXR1cm4gZm9ya0pvaW4oY2FuQWN0aXZhdGVSZXN1bHQpLnBpcGUoXG4gICAgICAgIG1hcCgoY2FSZXN1bHQ6IGJvb2xlYW5bXSkgPT4gY2FSZXN1bHQucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyAmJiBjdXJyKSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBvZih0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Tm9kZVRhYlBhdGgobm9kZVBhdGgsIHRhYlBhdGgpIHtcbiAgICByZXR1cm4gYCR7bm9kZVBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKX0vJHt0YWJQYXRoLnJlcGxhY2UoL15cXC98XFwvJC9nLCAnJyl9YDtcbiAgfVxufVxuIl19