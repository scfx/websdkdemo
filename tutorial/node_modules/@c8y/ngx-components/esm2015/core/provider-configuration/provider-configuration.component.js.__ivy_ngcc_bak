import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ɵdefineHiddenProp } from '@ngx-formly/core';
import { find, forOwn, get, mapValues, pick } from 'lodash-es';
import { BehaviorSubject, combineLatest, from, merge, of, Subject } from 'rxjs';
import { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { AlertService } from '../alert/alert.service';
import { Permissions, Status } from '../common/index';
import { C8yJSONSchema } from '../dynamic-forms/json-schema/c8y-json-schema.service';
import { ModalService } from '../modal/modal.service';
import { ProviderConfigurationService } from './service/provider-configuration.service';
import { ProviderDefinitionsService } from './service/provider-definitions.service';
export class ProviderConfigurationComponent {
    constructor(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
        this.permissions = permissions;
        this.activatedRoute = activatedRoute;
        this.modalService = modalService;
        this.alertService = alertService;
        this.providerDefinitionsService = providerDefinitionsService;
        this.providerConfigurationService = providerConfigurationService;
        this.jsonschema = jsonschema;
        this.layout$ = this.activatedRoute.data.pipe(map((config) => config.layout), tap((layout) => (this.layout = layout)), tap((layout) => {
            this.options.formState.disabled = !this.permissions.hasAllRoles(layout.saveRoles);
            this.beforeSaveHook = layout.beforeSaveHook;
        }));
        this.allRoles$ = this.layout$.pipe(map((layout) => [
            ...(layout.deleteRoles || []),
            ...(layout.saveRoles || [])
        ]));
        this.changeProvider$ = new BehaviorSubject(null);
        this.providerInput$ = new BehaviorSubject('');
        this.form = new FormGroup({});
        this.fields = [];
        this.options = {
            formState: {
                disabled: false
            }
        };
        this.reload$ = new BehaviorSubject(null);
        this.updatedConfiguration$ = new Subject();
    }
    ngOnInit() {
        const allProviders$ = from(this.providerDefinitionsService.list()).pipe(map(result => result.data), shareReplay(1));
        this.providers$ = combineLatest(allProviders$, this.providerInput$).pipe(map(([providers, input]) => input
            ? providers.filter(el => el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0)
            : providers), shareReplay(1));
        this.configuration$ = merge(this.updatedConfiguration$, this.reload$.pipe(switchMap(() => from(this.providerConfigurationService.detail()).pipe(catchError(() => of({})))), map(result => result.data))).pipe(map(this.removeEncryptedValues), shareReplay(1));
        this.selectedProvider$ = combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(tap(([_, configuration, newProvider]) => (this.model = newProvider
            ? pick(this.model, 'sms.senderName', 'sms.senderAddress')
            : configuration)), map(([providers, configuration, newProvider]) => newProvider ||
            find(providers, (provider) => get(configuration, 'provider') === provider.id)), tap((provider) => {
            if (provider) {
                const config = this.jsonschema.toFieldConfig(get(provider, 'schema'));
                if (config.fieldGroup) {
                    config.fieldGroup.forEach((fieldConfig) => {
                        ɵdefineHiddenProp(fieldConfig, '_keyPath', {
                            key: fieldConfig.key,
                            path: [fieldConfig.key]
                        });
                        fieldConfig.expressionProperties = {
                            'templateOptions.disabled': 'formState.disabled'
                        };
                    });
                }
                this.fields = [config];
                this.form = new FormGroup({});
            }
        }), shareReplay(1));
    }
    saveProviderConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            const modelToSave = !!this.beforeSaveHook
                ? yield this.beforeSaveHook(this.model, this.fields)
                : this.model;
            forOwn(modelToSave, (value, key) => {
                if (Array.isArray(value)) {
                    modelToSave[key] = value.filter(item => !!item || item === 0);
                }
            });
            try {
                const res = yield this.providerConfigurationService.update(modelToSave);
                this.changeProvider$.next(null);
                this.updatedConfiguration$.next(res.data);
                this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                this.form.markAsPristine();
            }
            catch (err) {
                this.alertService.addServerFailure(err);
            }
        });
    }
    deleteProviderConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, Status.DANGER, {
                    ok: this.layout.deleteConfigurationModalOkBtnLabel,
                    cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                });
                yield this.providerConfigurationService.delete();
                this.reload$.next();
                this.alertService.success(this.layout.configurationDeletedSuccessMsg);
            }
            catch (err) {
                if (err) {
                    this.alertService.addServerFailure(err);
                }
            }
        });
    }
    removeEncryptedValues(configuration) {
        return mapValues(configuration, value => (value === '<<Encrypted>>' ? undefined : value));
    }
}
ProviderConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-sms-gateway',
                template: "<c8y-title>\n  {{ (layout$ | async).pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async).cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async).description\" class=\"m-b-8\">\n            {{ (layout$ | async).description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async).providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async).saveRoles)\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async).providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async).providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\" *c8yIfAllowed=\"allRoles$ | async; allowAny\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async).deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"\n            !(configuration$ | async)?.provider && !(configuration$ | async)?.providerName\n          \"\n          title=\"{{ (layout$ | async).deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async).saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async).saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
                providers: [ProviderConfigurationService, ProviderDefinitionsService]
            },] }
];
ProviderConfigurationComponent.ctorParameters = () => [
    { type: Permissions },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: AlertService },
    { type: ProviderDefinitionsService },
    { type: ProviderConfigurationService },
    { type: C8yJSONSchema }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24vcHJvdmlkZXItY29uZmlndXJhdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVqRCxPQUFPLEVBQXdDLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0YsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU90RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQU9wRixNQUFNLE9B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QUksQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQzthQUN2RTtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLElBQUksR0FBRyxFQUFFO29CQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3pDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7SUFFTyxxQkFBcUIsQ0FBQyxhQUFpQztRQUM3RCxPQUFPLFNBQVMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxlQUFlLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDOzs7WUF0TEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLCt3R0FBc0Q7Z0JBQ3RELFNBQVMsRUFBRSxDQUFDLDRCQUE0QixFQUFFLDBCQUEwQixDQUFDO2FBQ3RFOzs7WUFoQlEsV0FBVztZQVBYLGNBQWM7WUFTZCxZQUFZO1lBSFosWUFBWTtZQVdaLDBCQUEwQjtZQUQxQiw0QkFBNEI7WUFSNUIsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSVJlc3VsdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlGb3JtT3B0aW9ucywgybVkZWZpbmVIaWRkZW5Qcm9wIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBmaW5kLCBmb3JPd24sIGdldCwgbWFwVmFsdWVzLCBwaWNrIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgZnJvbSwgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMsIFN0YXR1cyB9IGZyb20gJy4uL2NvbW1vbi9pbmRleCc7XG5pbXBvcnQgeyBDOHlKU09OU2NoZW1hIH0gZnJvbSAnLi4vZHluYW1pYy1mb3Jtcy9qc29uLXNjaGVtYS9jOHktanNvbi1zY2hlbWEuc2VydmljZSc7XG5pbXBvcnQgeyBNb2RhbFNlcnZpY2UgfSBmcm9tICcuLi9tb2RhbC9tb2RhbC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIER5bmFtaWNQcm92aWRlckNvbmZpZyxcbiAgRHluYW1pY1Byb3ZpZGVyTGF5b3V0Q29uZmlnXG59IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgUHJvdmlkZXJEZWZpbml0aW9uIH0gZnJvbSAnLi9tb2RlbC9wcm92aWRlci1kZWZpbml0aW9uLm1vZGVsJztcbmltcG9ydCB7IFByb3ZpZGVyUHJvcGVydGllcyB9IGZyb20gJy4vbW9kZWwvcHJvdmlkZXItcHJvcGVydGllcy5tb2RlbCc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQcm92aWRlckRlZmluaXRpb25zU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9wcm92aWRlci1kZWZpbml0aW9ucy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNtcy1nYXRld2F5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlLCBQcm92aWRlckRlZmluaXRpb25zU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50IHtcbiAgbGF5b3V0JDogT2JzZXJ2YWJsZTxEeW5hbWljUHJvdmlkZXJMYXlvdXRDb25maWc+ID0gdGhpcy5hY3RpdmF0ZWRSb3V0ZS5kYXRhLnBpcGUoXG4gICAgbWFwKChjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZykgPT4gY29uZmlnLmxheW91dCksXG4gICAgdGFwKChsYXlvdXQ6IER5bmFtaWNQcm92aWRlckxheW91dENvbmZpZykgPT4gKHRoaXMubGF5b3V0ID0gbGF5b3V0KSksXG4gICAgdGFwKChsYXlvdXQ6IER5bmFtaWNQcm92aWRlckxheW91dENvbmZpZykgPT4ge1xuICAgICAgdGhpcy5vcHRpb25zLmZvcm1TdGF0ZS5kaXNhYmxlZCA9ICF0aGlzLnBlcm1pc3Npb25zLmhhc0FsbFJvbGVzKGxheW91dC5zYXZlUm9sZXMpO1xuICAgICAgdGhpcy5iZWZvcmVTYXZlSG9vayA9IGxheW91dC5iZWZvcmVTYXZlSG9vaztcbiAgICB9KVxuICApO1xuXG4gIGFsbFJvbGVzJDogT2JzZXJ2YWJsZTxzdHJpbmdbXT4gPSB0aGlzLmxheW91dCQucGlwZShcbiAgICBtYXAoKGxheW91dDogRHluYW1pY1Byb3ZpZGVyTGF5b3V0Q29uZmlnKSA9PiBbXG4gICAgICAuLi4obGF5b3V0LmRlbGV0ZVJvbGVzIHx8IFtdKSxcbiAgICAgIC4uLihsYXlvdXQuc2F2ZVJvbGVzIHx8IFtdKVxuICAgIF0pXG4gICk7XG5cbiAgcHJvdmlkZXJzJDogT2JzZXJ2YWJsZTxQcm92aWRlckRlZmluaXRpb25bXT47XG4gIHNlbGVjdGVkUHJvdmlkZXIkOiBPYnNlcnZhYmxlPFByb3ZpZGVyRGVmaW5pdGlvbj47XG4gIGNoYW5nZVByb3ZpZGVyJDogU3ViamVjdDxQcm92aWRlckRlZmluaXRpb24+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgY29uZmlndXJhdGlvbiQ6IE9ic2VydmFibGU8UHJvdmlkZXJQcm9wZXJ0aWVzPjtcbiAgcHJvdmlkZXJJbnB1dCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuXG4gIGZvcm0gPSBuZXcgRm9ybUdyb3VwKHt9KTtcbiAgbW9kZWw6IFByb3ZpZGVyUHJvcGVydGllcztcbiAgZmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdID0gW107XG4gIG9wdGlvbnM6IEZvcm1seUZvcm1PcHRpb25zID0ge1xuICAgIGZvcm1TdGF0ZToge1xuICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgcmVsb2FkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8dm9pZD4obnVsbCk7XG4gIHByaXZhdGUgdXBkYXRlZENvbmZpZ3VyYXRpb24kID0gbmV3IFN1YmplY3Q8UHJvdmlkZXJQcm9wZXJ0aWVzPigpO1xuICBwcml2YXRlIGxheW91dDogRHluYW1pY1Byb3ZpZGVyTGF5b3V0Q29uZmlnO1xuICBwcml2YXRlIGJlZm9yZVNhdmVIb29rOiAoXG4gICAgbW9kZWw6IFByb3ZpZGVyUHJvcGVydGllcyxcbiAgICBmaWVsZHM6IEZvcm1seUZpZWxkQ29uZmlnW11cbiAgKSA9PiBQcm9taXNlPFByb3ZpZGVyUHJvcGVydGllcz4gfCBQcm92aWRlclByb3BlcnRpZXM7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9ucyxcbiAgICBwcml2YXRlIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwcm92aWRlckRlZmluaXRpb25zU2VydmljZTogUHJvdmlkZXJEZWZpbml0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBwcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlOiBQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUganNvbnNjaGVtYTogQzh5SlNPTlNjaGVtYVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgYWxsUHJvdmlkZXJzJDogT2JzZXJ2YWJsZTxQcm92aWRlckRlZmluaXRpb25bXT4gPSBmcm9tKFxuICAgICAgdGhpcy5wcm92aWRlckRlZmluaXRpb25zU2VydmljZS5saXN0KClcbiAgICApLnBpcGUoXG4gICAgICBtYXAocmVzdWx0ID0+IHJlc3VsdC5kYXRhKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcblxuICAgIHRoaXMucHJvdmlkZXJzJCA9IGNvbWJpbmVMYXRlc3QoYWxsUHJvdmlkZXJzJCwgdGhpcy5wcm92aWRlcklucHV0JCkucGlwZShcbiAgICAgIG1hcCgoW3Byb3ZpZGVycywgaW5wdXRdOiBbUHJvdmlkZXJEZWZpbml0aW9uW10sIHN0cmluZ10pID0+XG4gICAgICAgIGlucHV0XG4gICAgICAgICAgPyBwcm92aWRlcnMuZmlsdGVyKGVsID0+IGVsLmRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+PSAwKVxuICAgICAgICAgIDogcHJvdmlkZXJzXG4gICAgICApLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuXG4gICAgdGhpcy5jb25maWd1cmF0aW9uJCA9IG1lcmdlKFxuICAgICAgdGhpcy51cGRhdGVkQ29uZmlndXJhdGlvbiQsXG4gICAgICB0aGlzLnJlbG9hZCQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgICAgZnJvbSh0aGlzLnByb3ZpZGVyQ29uZmlndXJhdGlvblNlcnZpY2UuZGV0YWlsKCkpLnBpcGUoY2F0Y2hFcnJvcigoKSA9PiBvZih7fSBhcyBhbnkpKSlcbiAgICAgICAgKSxcbiAgICAgICAgbWFwKHJlc3VsdCA9PiByZXN1bHQuZGF0YSlcbiAgICAgIClcbiAgICApLnBpcGUoXG4gICAgICBtYXAodGhpcy5yZW1vdmVFbmNyeXB0ZWRWYWx1ZXMpLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuXG4gICAgdGhpcy5zZWxlY3RlZFByb3ZpZGVyJCA9IGNvbWJpbmVMYXRlc3QoXG4gICAgICBhbGxQcm92aWRlcnMkLFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uJCxcbiAgICAgIHRoaXMuY2hhbmdlUHJvdmlkZXIkXG4gICAgKS5waXBlKFxuICAgICAgdGFwKFxuICAgICAgICAoW18sIGNvbmZpZ3VyYXRpb24sIG5ld1Byb3ZpZGVyXTogW1xuICAgICAgICAgIFByb3ZpZGVyRGVmaW5pdGlvbltdLFxuICAgICAgICAgIFByb3ZpZGVyUHJvcGVydGllcyxcbiAgICAgICAgICBQcm92aWRlckRlZmluaXRpb25cbiAgICAgICAgXSkgPT5cbiAgICAgICAgICAodGhpcy5tb2RlbCA9IG5ld1Byb3ZpZGVyXG4gICAgICAgICAgICA/IHBpY2sodGhpcy5tb2RlbCwgJ3Ntcy5zZW5kZXJOYW1lJywgJ3Ntcy5zZW5kZXJBZGRyZXNzJylcbiAgICAgICAgICAgIDogY29uZmlndXJhdGlvbilcbiAgICAgICksXG4gICAgICBtYXAoXG4gICAgICAgIChbcHJvdmlkZXJzLCBjb25maWd1cmF0aW9uLCBuZXdQcm92aWRlcl06IFtcbiAgICAgICAgICBQcm92aWRlckRlZmluaXRpb25bXSxcbiAgICAgICAgICBQcm92aWRlclByb3BlcnRpZXMsXG4gICAgICAgICAgUHJvdmlkZXJEZWZpbml0aW9uXG4gICAgICAgIF0pID0+XG4gICAgICAgICAgbmV3UHJvdmlkZXIgfHxcbiAgICAgICAgICBmaW5kKFxuICAgICAgICAgICAgcHJvdmlkZXJzLFxuICAgICAgICAgICAgKHByb3ZpZGVyOiBQcm92aWRlckRlZmluaXRpb24pID0+IGdldChjb25maWd1cmF0aW9uLCAncHJvdmlkZXInKSA9PT0gcHJvdmlkZXIuaWRcbiAgICAgICAgICApXG4gICAgICApLFxuICAgICAgdGFwKChwcm92aWRlcjogUHJvdmlkZXJEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgIGlmIChwcm92aWRlcikge1xuICAgICAgICAgIGNvbnN0IGNvbmZpZzogRm9ybWx5RmllbGRDb25maWcgPSB0aGlzLmpzb25zY2hlbWEudG9GaWVsZENvbmZpZyhnZXQocHJvdmlkZXIsICdzY2hlbWEnKSk7XG4gICAgICAgICAgaWYgKGNvbmZpZy5maWVsZEdyb3VwKSB7XG4gICAgICAgICAgICBjb25maWcuZmllbGRHcm91cC5mb3JFYWNoKChmaWVsZENvbmZpZzogRm9ybWx5RmllbGRDb25maWcpID0+IHtcbiAgICAgICAgICAgICAgybVkZWZpbmVIaWRkZW5Qcm9wKGZpZWxkQ29uZmlnLCAnX2tleVBhdGgnLCB7XG4gICAgICAgICAgICAgICAga2V5OiBmaWVsZENvbmZpZy5rZXksXG4gICAgICAgICAgICAgICAgcGF0aDogW2ZpZWxkQ29uZmlnLmtleV1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZmllbGRDb25maWcuZXhwcmVzc2lvblByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgJ3RlbXBsYXRlT3B0aW9ucy5kaXNhYmxlZCc6ICdmb3JtU3RhdGUuZGlzYWJsZWQnXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5maWVsZHMgPSBbY29uZmlnXTtcbiAgICAgICAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybUdyb3VwKHt9KTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBzYXZlUHJvdmlkZXJDb25maWd1cmF0aW9uKCkge1xuICAgIGNvbnN0IG1vZGVsVG9TYXZlOiBQcm92aWRlclByb3BlcnRpZXMgPSAhIXRoaXMuYmVmb3JlU2F2ZUhvb2tcbiAgICAgID8gYXdhaXQgdGhpcy5iZWZvcmVTYXZlSG9vayh0aGlzLm1vZGVsLCB0aGlzLmZpZWxkcylcbiAgICAgIDogdGhpcy5tb2RlbDtcblxuICAgIGZvck93bihtb2RlbFRvU2F2ZSwgKHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgbW9kZWxUb1NhdmVba2V5XSA9IHZhbHVlLmZpbHRlcihpdGVtID0+ICEhaXRlbSB8fCBpdGVtID09PSAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXM6IElSZXN1bHQ8UHJvdmlkZXJQcm9wZXJ0aWVzPiA9IGF3YWl0IHRoaXMucHJvdmlkZXJDb25maWd1cmF0aW9uU2VydmljZS51cGRhdGUoXG4gICAgICAgIG1vZGVsVG9TYXZlXG4gICAgICApO1xuICAgICAgdGhpcy5jaGFuZ2VQcm92aWRlciQubmV4dChudWxsKTtcbiAgICAgIHRoaXMudXBkYXRlZENvbmZpZ3VyYXRpb24kLm5leHQocmVzLmRhdGEpO1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2Vzcyh0aGlzLmxheW91dC5jb25maWd1cmF0aW9uVXBkYXRlZFN1Y2Nlc3NNc2cpO1xuICAgICAgdGhpcy5mb3JtLm1hcmtBc1ByaXN0aW5lKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGVycik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlUHJvdmlkZXJDb25maWd1cmF0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsU2VydmljZS5jb25maXJtKFxuICAgICAgICB0aGlzLmxheW91dC5kZWxldGVDb25maWd1cmF0aW9uTW9kYWxUaXRsZSxcbiAgICAgICAgdGhpcy5sYXlvdXQuZGVsZXRlQ29uZmlndXJhdGlvbk1vZGFsQm9keSxcbiAgICAgICAgU3RhdHVzLkRBTkdFUixcbiAgICAgICAge1xuICAgICAgICAgIG9rOiB0aGlzLmxheW91dC5kZWxldGVDb25maWd1cmF0aW9uTW9kYWxPa0J0bkxhYmVsLFxuICAgICAgICAgIGNhbmNlbDogdGhpcy5sYXlvdXQuZGVsZXRlQ29uZmlndXJhdGlvbk1vZGFsQ2FuY2VsQnRuTGFiZWxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGF3YWl0IHRoaXMucHJvdmlkZXJDb25maWd1cmF0aW9uU2VydmljZS5kZWxldGUoKTtcbiAgICAgIHRoaXMucmVsb2FkJC5uZXh0KCk7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKHRoaXMubGF5b3V0LmNvbmZpZ3VyYXRpb25EZWxldGVkU3VjY2Vzc01zZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUVuY3J5cHRlZFZhbHVlcyhjb25maWd1cmF0aW9uOiBQcm92aWRlclByb3BlcnRpZXMpOiBQcm92aWRlclByb3BlcnRpZXMge1xuICAgIHJldHVybiBtYXBWYWx1ZXMoY29uZmlndXJhdGlvbiwgdmFsdWUgPT4gKHZhbHVlID09PSAnPDxFbmNyeXB0ZWQ+PicgPyB1bmRlZmluZWQgOiB2YWx1ZSkpO1xuICB9XG59XG4iXX0=