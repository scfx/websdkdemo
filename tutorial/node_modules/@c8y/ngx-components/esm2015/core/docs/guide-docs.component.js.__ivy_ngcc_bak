import { Component, ContentChildren, ContentChild, ElementRef, Renderer2 } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { C8yTranslateDirective } from '../i18n/c8y-translate.directive';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class GuideDocsComponent {
    constructor(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    ngOnInit() {
        this.baseUrl = this.docs.getBaseUrl();
    }
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    ngAfterViewInit() {
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
        this.links.forEach(guide => {
            guide.baseHref = this.baseUrl;
        });
    }
    /**
     * Find and modify anchor elements
     */
    replaceAnchorAttributes() {
        const anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(a => {
            const guideHref = `${this.baseUrl}/${a.getAttribute('c8y-guide-href')}`;
            this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    }
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    findGuideAnchors(el) {
        const isAnchor = () => el.nodeName === 'A';
        const hasGuideHrefAttr = () => !!el.attributes.getNamedItem('c8y-guide-href');
        const hasChildren = () => el.childNodes && el.childNodes.length > 0;
        let result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach((node) => {
                const searchResult = this.findGuideAnchors(node);
                if (searchResult) {
                    result = [...result, ...searchResult];
                }
            });
        }
        return result;
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
GuideDocsComponent.decorators = [
    { type: Component, args: [{
                selector: '[c8y-guide-docs]',
                template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
            },] }
];
GuideDocsComponent.ctorParameters = () => [
    { type: DocsService },
    { type: ElementRef },
    { type: Renderer2 }
];
GuideDocsComponent.propDecorators = {
    links: [{ type: ContentChildren, args: [GuideHrefDirective, { descendants: true },] }],
    translateDirective: [{ type: ContentChild, args: [C8yTranslateDirective, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUtZG9jcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2RvY3MvZ3VpZGUtZG9jcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxlQUFlLEVBRWYsWUFBWSxFQUNaLFVBQVUsRUFDVixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTTNDLE1BQU0sT0FBTyxrQkFBa0I7SUFZN0IsWUFBb0IsSUFBaUIsRUFBVSxFQUFjLEVBQVUsUUFBbUI7UUFBdEUsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRmxGLGVBQVUsR0FBMkIsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMkIsQ0FBQztJQUU5RixRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7SUFDRixlQUFlO1FBQ2QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWU7aUJBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNoQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNMLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsdUJBQXVCO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxTQUFTLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1lBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQixDQUFDLEVBQWU7UUFDOUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUM7UUFDM0MsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM5RSxNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUVwRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFaEIsSUFBSSxRQUFRLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakI7YUFBTSxJQUFJLFdBQVcsRUFBRSxFQUFFO1lBQ3hCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBaUIsRUFBRSxFQUFFO2dCQUMxQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pELElBQUksWUFBWSxFQUFFO29CQUNoQixNQUFNLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDO2lCQUN2QztZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qiw4RkFBMEM7YUFDM0M7OztZQVJRLFdBQVc7WUFKbEIsVUFBVTtZQUNWLFNBQVM7OztvQkFjUixlQUFlLFNBQUMsa0JBQWtCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO2lDQU16RCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgUXVlcnlMaXN0LFxuICBDb250ZW50Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMiwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3VpZGVIcmVmRGlyZWN0aXZlIH0gZnJvbSAnLi9ndWlkZS1ocmVmLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEb2NzU2VydmljZSB9IGZyb20gJy4vZG9jcy5zZXJ2aWNlJztcbmltcG9ydCB7IEM4eVRyYW5zbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4uL2kxOG4vYzh5LXRyYW5zbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbYzh5LWd1aWRlLWRvY3NdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2d1aWRlLWRvY3MuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEd1aWRlRG9jc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgYmFzZVVybDogc3RyaW5nO1xuICBAQ29udGVudENoaWxkcmVuKEd1aWRlSHJlZkRpcmVjdGl2ZSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBsaW5rczogUXVlcnlMaXN0PEd1aWRlSHJlZkRpcmVjdGl2ZT47XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFjY2VzcyB0byB0cmFuc2xhdGUgZGlyZWN0aXZlLCBzbyBpdCBpcyBwb3NzaWJsZSB0byBhZGp1c3QgYW5jaG9yIGh0bWwgdGFncywgYWZ0ZXJcbiAgICogY29udGVudCBpcyB0cmFuc2xhdGVkLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChDOHlUcmFuc2xhdGVEaXJlY3RpdmUsIHsgc3RhdGljOiBmYWxzZSB9KSB0cmFuc2xhdGVEaXJlY3RpdmU7XG5cbiAgcHJpdmF0ZSBkZXN0cm95ZWQkOiBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkb2NzOiBEb2NzU2VydmljZSwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuYmFzZVVybCA9IHRoaXMuZG9jcy5nZXRCYXNlVXJsKCk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgY29udGVudCBpcyBpbml0aWFsaXplZCB3ZSBzdWJzY3JpYmUgZm9yIHRyYW5zbGF0aW9uIGV2ZW50cywgdGhlbiB3ZSBhcmUgYWJsZSB0byBtb2RpZnlcbiAgICogYW5jaG9yIGp1c3QgYXMgQzh5R3VpZGVIcmVmRGlyZWN0aXZlIGRvZXMuXG4gICAqL1xuICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLnRyYW5zbGF0ZURpcmVjdGl2ZSkge1xuICAgICAgdGhpcy50cmFuc2xhdGVEaXJlY3RpdmUuaHRtbFVwZGF0ZUV2ZW50XG4gICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VBbmNob3JBdHRyaWJ1dGVzKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlcGxhY2VBbmNob3JBdHRyaWJ1dGVzKCk7XG4gICAgfVxuICAgIHRoaXMubGlua3MuZm9yRWFjaChndWlkZSA9PiB7XG4gICAgICBndWlkZS5iYXNlSHJlZiA9IHRoaXMuYmFzZVVybDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFuZCBtb2RpZnkgYW5jaG9yIGVsZW1lbnRzXG4gICAqL1xuICByZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhbmNob3JzID0gdGhpcy5maW5kR3VpZGVBbmNob3JzKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgYW5jaG9ycy5mb3JFYWNoKGEgPT4ge1xuICAgICAgY29uc3QgZ3VpZGVIcmVmID0gYCR7dGhpcy5iYXNlVXJsfS8ke2EuZ2V0QXR0cmlidXRlKCdjOHktZ3VpZGUtaHJlZicpfWA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAnaHJlZicsIGd1aWRlSHJlZik7XG4gICAgICBpZiAoIWEuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZSBmdW5jdGlvbiwgcmV0dXJucyBhcnJheSBvZiBBbmNob3IgZWxlbWVudHMgaW5zaWRlIEhUTUxFbGVtZW50LlxuICAgKi9cbiAgZmluZEd1aWRlQW5jaG9ycyhlbDogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudFtdIHtcbiAgICBjb25zdCBpc0FuY2hvciA9ICgpID0+IGVsLm5vZGVOYW1lID09PSAnQSc7XG4gICAgY29uc3QgaGFzR3VpZGVIcmVmQXR0ciA9ICgpID0+ICEhZWwuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2M4eS1ndWlkZS1ocmVmJyk7XG4gICAgY29uc3QgaGFzQ2hpbGRyZW4gPSAoKSA9PiBlbC5jaGlsZE5vZGVzICYmIGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMDtcblxuICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgIGlmIChpc0FuY2hvcigpICYmIGhhc0d1aWRlSHJlZkF0dHIoKSkge1xuICAgICAgcmVzdWx0LnB1c2goZWwpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2hpbGRyZW4oKSkge1xuICAgICAgZWwuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSB0aGlzLmZpbmRHdWlkZUFuY2hvcnMobm9kZSk7XG4gICAgICAgIGlmIChzZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSBbLi4ucmVzdWx0LCAuLi5zZWFyY2hSZXN1bHRdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KHRydWUpO1xuICAgIHRoaXMuZGVzdHJveWVkJC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=