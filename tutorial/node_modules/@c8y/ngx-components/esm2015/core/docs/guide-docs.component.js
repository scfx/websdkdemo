import { Component, ContentChildren, ContentChild, ElementRef, Renderer2 } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { C8yTranslateDirective } from '../i18n/c8y-translate.directive';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './docs.service';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["c8y-guide-docs", ""];
function GuideDocsComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementContainerEnd();
} }
const _c1 = ["*"];
export class GuideDocsComponent {
    constructor(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    ngOnInit() {
        this.baseUrl = this.docs.getBaseUrl();
    }
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    ngAfterViewInit() {
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
        this.links.forEach(guide => {
            guide.baseHref = this.baseUrl;
        });
    }
    /**
     * Find and modify anchor elements
     */
    replaceAnchorAttributes() {
        const anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(a => {
            const guideHref = `${this.baseUrl}/${a.getAttribute('c8y-guide-href')}`;
            this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    }
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    findGuideAnchors(el) {
        const isAnchor = () => el.nodeName === 'A';
        const hasGuideHrefAttr = () => !!el.attributes.getNamedItem('c8y-guide-href');
        const hasChildren = () => el.childNodes && el.childNodes.length > 0;
        let result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach((node) => {
                const searchResult = this.findGuideAnchors(node);
                if (searchResult) {
                    result = [...result, ...searchResult];
                }
            });
        }
        return result;
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
GuideDocsComponent.ɵfac = function GuideDocsComponent_Factory(t) { return new (t || GuideDocsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DocsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
GuideDocsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GuideDocsComponent, selectors: [["", "c8y-guide-docs", ""]], contentQueries: function GuideDocsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, C8yTranslateDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GuideHrefDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.translateDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.links = _t);
    } }, attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 1, consts: [[4, "ngIf"]], template: function GuideDocsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, GuideDocsComponent_ng_container_0_Template, 2, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.baseUrl);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2 });
GuideDocsComponent.ctorParameters = () => [
    { type: DocsService },
    { type: ElementRef },
    { type: Renderer2 }
];
GuideDocsComponent.propDecorators = {
    links: [{ type: ContentChildren, args: [GuideHrefDirective, { descendants: true },] }],
    translateDirective: [{ type: ContentChild, args: [C8yTranslateDirective, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GuideDocsComponent, [{
        type: Component,
        args: [{
                selector: '[c8y-guide-docs]',
                template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DocsService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { links: [{
            type: ContentChildren,
            args: [GuideHrefDirective, { descendants: true }]
        }], translateDirective: [{
            type: ContentChild,
            args: [C8yTranslateDirective, { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,