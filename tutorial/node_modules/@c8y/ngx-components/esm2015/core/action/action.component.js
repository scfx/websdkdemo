import { Component, Input, ViewChild } from '@angular/core';
import { ActionService } from './action.service';
/**
 * A <c8y-action> can be added with content projection.
 *
 * @example
 * ```html
 * <c8y-action>
 *   <button class="btn" (click)="myAction()">My action</button>
 * </c8y-action>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './action.service';

const _c0 = ["template"];
function ActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = ["*"];
export class ActionComponent {
    constructor(actionService) {
        this.actionService = actionService;
        /**
         * Is this action disabled.
         */
        this.disabled = false;
        /**
         * The priority of this action (the higher the number, the higher the action will be displayed; optional)
         */
        this.priority = 0;
    }
    /**
     * After page view is initialized, component adds itself to global action list.
     */
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.actionService.add(this));
    }
    /**
     * Action is removed from global action list, if component is not used anymore.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.actionService.remove(this);
    }
}
ActionComponent.ɵfac = function ActionComponent_Factory(t) { return new (t || ActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActionService)); };
ActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ActionComponent, selectors: [["c8y-action"]], viewQuery: function ActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { disabled: "disabled", priority: "priority", label: "label", icon: "icon" }, ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["template", ""]], template: function ActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ActionComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, encapsulation: 2 });
ActionComponent.ctorParameters = () => [
    { type: ActionService }
];
ActionComponent.propDecorators = {
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    priority: [{ type: Input }],
    icon: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            }]
    }], function () { return [{ type: ɵngcc1.ActionService }]; }, { disabled: [{
            type: Input
        }], priority: [{
            type: Input
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }], template: [{
            type: ViewChild,
            args: ['template', { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hY3Rpb24vYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7Ozs7Ozs7O0FBS0gsTUFBTSxPQUFPLGVBQWU7QUFBRyxJQXVCN0IsWUFBb0IsYUFBNEI7QUFBSSxRQUFoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBckJqRDtBQUNGO0FBRUEsV0FESztBQUNMLFFBQVcsYUFBUSxHQUFZLEtBQUssQ0FBQztBQUNyQyxRQUlFO0FBQ0Y7QUFFQSxXQURLO0FBQ0wsUUFBVyxhQUFRLEdBQVcsQ0FBQyxDQUFDO0FBQ2hDLElBU3FELENBQUM7QUFDdEQsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsZUFBZTtBQUNqQixRQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFjLENBQUMsQ0FDckMsQ0FBQztBQUNSLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFdBQVc7QUFDYixRQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFjLENBQUMsQ0FBQztBQUM5QyxJQUFFLENBQUM7QUFDSDsyQ0E3Q0MsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxZQUFZLGtCQUN0Qjt1RUFBc0MsY0FDdkM7Ozs7Ozs7OzZCQUNJO0FBQUM7QUFBeUMsWUFoQnRDLGFBQWE7QUFBRztBQUFHO0FBR3BCLHVCQWtCTCxLQUFLO0FBQUssb0JBSVYsS0FBSztBQUFLLHVCQUlWLEtBQUs7QUFBSyxtQkFJVixLQUFLO0FBQUssdUJBRVYsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEFjdGlvblNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBBIDxjOHktYWN0aW9uPiBjYW4gYmUgYWRkZWQgd2l0aCBjb250ZW50IHByb2plY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktYWN0aW9uPlxuICogICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgKGNsaWNrKT1cIm15QWN0aW9uKClcIj5NeSBhY3Rpb248L2J1dHRvbj5cbiAqIDwvYzh5LWFjdGlvbj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FjdGlvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgQWN0aW9uIHtcblxuICAvKipcbiAgICogSXMgdGhpcyBhY3Rpb24gZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcHJpb3JpdHkgb2YgdGhpcyBhY3Rpb24gKHRoZSBoaWdoZXIgdGhlIG51bWJlciwgdGhlIGhpZ2hlciB0aGUgYWN0aW9uIHdpbGwgYmUgZGlzcGxheWVkOyBvcHRpb25hbClcbiAgICovXG4gIEBJbnB1dCgpIHByaW9yaXR5OiBudW1iZXIgPSAwO1xuICAvKipcbiAgICogVGhlIGljb24gdG8gc2hvdyBvbiB0aGlzIGFjdGlvblxuICAgKi9cbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlJywge3N0YXRpYzogZmFsc2V9KSB0ZW1wbGF0ZTogYW55O1xuICBhY3Rpb246ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgdmlld0luaXRUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aW9uU2VydmljZTogQWN0aW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogQWZ0ZXIgcGFnZSB2aWV3IGlzIGluaXRpYWxpemVkLCBjb21wb25lbnQgYWRkcyBpdHNlbGYgdG8gZ2xvYmFsIGFjdGlvbiBsaXN0LlxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudmlld0luaXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PlxuICAgICAgdGhpcy5hY3Rpb25TZXJ2aWNlLmFkZCh0aGlzIGFzIEFjdGlvbilcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGlzIHJlbW92ZWQgZnJvbSBnbG9iYWwgYWN0aW9uIGxpc3QsIGlmIGNvbXBvbmVudCBpcyBub3QgdXNlZCBhbnltb3JlLlxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudmlld0luaXRUaW1lb3V0KTtcbiAgICB0aGlzLmFjdGlvblNlcnZpY2UucmVtb3ZlKHRoaXMgYXMgQWN0aW9uKTtcbiAgfVxufVxuIl19