import { Inject, Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { filter, mergeMap, shareReplay, take, takeUntil } from 'rxjs/operators';
import { fromTriggerOnce, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { HOOK_COMPONENTS, RESOLVING_COMPONENT_WAIT_TIME } from './dynamic-component.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./dynamic-component.model";
export class DynamicComponentService extends StateService {
    constructor(injector, router, waitTimeout) {
        super();
        this.injector = injector;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.items$ = fromTriggerOnce(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_COMPONENTS, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(takeUntil(timer(waitTimeout)), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById(id) {
        return this.items$
            .pipe(mergeMap((cmps) => cmps), filter((cmp) => cmp.id === id), take(1))
            .toPromise();
    }
    add(component) {
        this.state.add(component);
        this.emitNewState();
    }
    remove(component) {
        this.state.delete(component);
        this.emitNewState();
    }
}
DynamicComponentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.RESOLVING_COMPONENT_WAIT_TIME)); }, token: DynamicComponentService, providedIn: "root" });
DynamicComponentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DynamicComponentService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: Number, decorators: [{ type: Inject, args: [RESOLVING_COMPONENT_WAIT_TIME,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQWtCLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRixPQUFPLEVBQWtCLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEUsT0FBTyxFQUdMLGVBQWUsRUFDZiw2QkFBNkIsRUFDOUIsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQUtuQyxNQUFNLE9BQU8sdUJBQ1gsU0FBUSxZQUFZO0lBYXBCLFlBQ1UsUUFBa0IsRUFDMUIsTUFBYyxFQUN5QixXQUFtQjtRQUUxRCxLQUFLLEVBQUUsQ0FBQztRQUpBLGFBQVEsR0FBUixRQUFRLENBQVU7UUFYbkIsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FDbkMsSUFBSSxHQUFHLEVBQThCLENBQ3RDLENBQUM7UUFFRjs7V0FFRztRQUNILGNBQVMsR0FBZ0MsRUFBRSxDQUFDO1FBUzFDLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUE2QixNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyRixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO1lBQzVDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQ3BCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTTthQUNmLElBQUksQ0FDSCxRQUFRLENBQUMsQ0FBQyxJQUFrQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDdEQsTUFBTSxDQUFDLENBQUMsR0FBK0IsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFDMUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSO2FBQ0EsU0FBUyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELEdBQUcsQ0FBQyxTQUFxQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFxQztRQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7OztZQTdERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQWY0QixRQUFRO1lBQzVCLE1BQU07eUNBZ0NWLE1BQU0sU0FBQyw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWVyZ2VNYXAsIHNoYXJlUmVwbGF5LCB0YWtlLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFeHRlbnNpb25Qb2ludCwgZnJvbVRyaWdnZXJPbmNlLCBzdGF0ZVRvRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXRlLXNlcnZpY2UuYWJzdHJhY3QnO1xuaW1wb3J0IHtcbiAgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24sXG4gIER5bmFtaWNDb21wb25lbnRFeHRlbnNpb24sXG4gIEhPT0tfQ09NUE9ORU5UUyxcbiAgUkVTT0xWSU5HX0NPTVBPTkVOVF9XQUlUX1RJTUVcbn0gZnJvbSAnLi9keW5hbWljLWNvbXBvbmVudC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnRTZXJ2aWNlXG4gIGV4dGVuZHMgU3RhdGVTZXJ2aWNlXG4gIGltcGxlbWVudHMgRXh0ZW5zaW9uUG9pbnQ8RHluYW1pY0NvbXBvbmVudEV4dGVuc2lvbj4ge1xuICBpdGVtcyQ6IE9ic2VydmFibGU8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXT47XG4gIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3QoKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTZXQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+PihcbiAgICBuZXcgU2V0PER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uPigpXG4gICk7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZmFjdG9yaWVzIHRoYXQgY2FuIGJlIGFkZGVkIGJ5IHBsdWdpbnMuXG4gICAqL1xuICBmYWN0b3JpZXM6IER5bmFtaWNDb21wb25lbnRFeHRlbnNpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHJvdXRlcjogUm91dGVyLFxuICAgIEBJbmplY3QoUkVTT0xWSU5HX0NPTVBPTkVOVF9XQUlUX1RJTUUpIHdhaXRUaW1lb3V0OiBudW1iZXJcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuaXRlbXMkID0gZnJvbVRyaWdnZXJPbmNlPER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uPihyb3V0ZXIsIHRoaXMucmVmcmVzaFRyaWdnZXIsIFtcbiAgICAgICgpID0+IHRoaXMuaW5qZWN0b3IuZ2V0KEhPT0tfQ09NUE9ORU5UUywgW10pLFxuICAgICAgKCkgPT4gdGhpcy5mYWN0b3JpZXMsXG4gICAgICBzdGF0ZVRvRmFjdG9yeSh0aGlzLnN0YXRlJClcbiAgICBdKS5waXBlKHRha2VVbnRpbCh0aW1lcih3YWl0VGltZW91dCkpLCBzaGFyZVJlcGxheSgxKSk7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXIubmV4dCgxKTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGNvbXBvbmVudCBieSBpdCdzIGlkIGFzIGFuIG9ic2VydmFibGUuXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcyRcbiAgICAgIC5waXBlKFxuICAgICAgICBtZXJnZU1hcCgoY21wczogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXSkgPT4gY21wcyksXG4gICAgICAgIGZpbHRlcigoY21wOiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbikgPT4gY21wLmlkID09PSBpZCksXG4gICAgICAgIHRha2UoMSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGFkZChjb21wb25lbnQ6IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uKSB7XG4gICAgdGhpcy5zdGF0ZS5hZGQoY29tcG9uZW50KTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG5cbiAgcmVtb3ZlKGNvbXBvbmVudDogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICB0aGlzLnN0YXRlLmRlbGV0ZShjb21wb25lbnQpO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cbn1cbiJdfQ==