import { Inject, Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { filter, mergeMap, shareReplay, take, takeUntil } from 'rxjs/operators';
import { fromTriggerOnce, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { HOOK_COMPONENTS, RESOLVING_COMPONENT_WAIT_TIME } from './dynamic-component.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./dynamic-component.model";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class DynamicComponentService extends StateService {
    constructor(injector, router, waitTimeout) {
        super();
        this.injector = injector;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.items$ = fromTriggerOnce(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_COMPONENTS, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(takeUntil(timer(waitTimeout)), shareReplay(1));
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById(id) {
        return this.items$
            .pipe(mergeMap((cmps) => cmps), filter((cmp) => cmp.id === id), take(1))
            .toPromise();
    }
    add(component) {
        this.state.add(component);
        this.emitNewState();
    }
    remove(component) {
        this.state.delete(component);
        this.emitNewState();
    }
}
DynamicComponentService.ɵfac = function DynamicComponentService_Factory(t) { return new (t || DynamicComponentService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(RESOLVING_COMPONENT_WAIT_TIME)); };
DynamicComponentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.RESOLVING_COMPONENT_WAIT_TIME)); }, token: DynamicComponentService, providedIn: "root" });
DynamicComponentService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: Number, decorators: [{ type: Inject, args: [RESOLVING_COMPONENT_WAIT_TIME,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicComponentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }, { type: Number, decorators: [{
                type: Inject,
                args: [RESOLVING_COMPONENT_WAIT_TIME]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9keW5hbWljLWNvbXBvbmVudC9keW5hbWljLWNvbXBvbmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBa0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hGLE9BQU8sRUFBa0IsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRSxPQUFPLEVBR0wsZUFBZSxFQUNmLDZCQUE2QixFQUM5QixNQUFNLDJCQUEyQixDQUFDO0FBQ25DO0FBR0M7QUFFRDs7O0FBREEsTUFBTSxPQUFPLHVCQUNYLFNBQVEsWUFBWTtBQUNwQixJQVlBLFlBQ1UsUUFBa0IsRUFDMUIsTUFBYyxFQUN5QixXQUFtQjtBQUMzRCxRQUNDLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFMWSxhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFYcEIsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzFDLFFBQVcsV0FBTSxHQUFHLElBQUksZUFBZSxDQUNuQyxJQUFJLEdBQUcsRUFBOEIsQ0FDdEMsQ0FBQztBQUNKLFFBQ0U7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUFFLGNBQVMsR0FBZ0MsRUFBRSxDQUFDO0FBQzlDLFFBUUksSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQTZCLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQzNGLFlBQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQztBQUNsRCxZQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzFCLFlBQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDakMsU0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRCxJQUFFLENBQUM7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxLQUFLO0FBQ1gsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsT0FBTyxDQUFDLEVBQUU7QUFDWixRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU07QUFDdEIsYUFBTyxJQUFJLENBQ0gsUUFBUSxDQUFDLENBQUMsSUFBa0MsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ3RELE1BQU0sQ0FBQyxDQUFDLEdBQStCLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQzFELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjtBQUNQLGFBQU8sU0FBUyxFQUFFLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxHQUFHLENBQUMsU0FBcUM7QUFDM0MsUUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM5QixRQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSCxJQUNFLE1BQU0sQ0FBQyxTQUFxQztBQUM5QyxRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUNIOzRPQUFDO0FBQ0QsNFNBNURLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBSU0sWUFqQlcsUUFBUTtlQWNuQyxmQWR1QyxZQUNoQyxNQUFNO0dBYUgsRUFBRSxNQUFNLGNBQ25CLHpCQWRrQix5Q0FnQ2QsTUFBTSxTQUFDLDZCQUE2QjtBQUFROzs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0LCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtZXJnZU1hcCwgc2hhcmVSZXBsYXksIHRha2UsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEV4dGVuc2lvblBvaW50LCBmcm9tVHJpZ2dlck9uY2UsIHN0YXRlVG9GYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vc3RhdGUtc2VydmljZS5hYnN0cmFjdCc7XG5pbXBvcnQge1xuICBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbixcbiAgRHluYW1pY0NvbXBvbmVudEV4dGVuc2lvbixcbiAgSE9PS19DT01QT05FTlRTLFxuICBSRVNPTFZJTkdfQ09NUE9ORU5UX1dBSVRfVElNRVxufSBmcm9tICcuL2R5bmFtaWMtY29tcG9uZW50Lm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0NvbXBvbmVudFNlcnZpY2VcbiAgZXh0ZW5kcyBTdGF0ZVNlcnZpY2VcbiAgaW1wbGVtZW50cyBFeHRlbnNpb25Qb2ludDxEeW5hbWljQ29tcG9uZW50RXh0ZW5zaW9uPiB7XG4gIGl0ZW1zJDogT2JzZXJ2YWJsZTxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdPjtcbiAgcmVhZG9ubHkgcmVmcmVzaFRyaWdnZXIgPSBuZXcgU3ViamVjdCgpO1xuICByZWFkb25seSBzdGF0ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFNldDxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4+KFxuICAgIG5ldyBTZXQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+KClcbiAgKTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBmYWN0b3JpZXMgdGhhdCBjYW4gYmUgYWRkZWQgYnkgcGx1Z2lucy5cbiAgICovXG4gIGZhY3RvcmllczogRHluYW1pY0NvbXBvbmVudEV4dGVuc2lvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcm91dGVyOiBSb3V0ZXIsXG4gICAgQEluamVjdChSRVNPTFZJTkdfQ09NUE9ORU5UX1dBSVRfVElNRSkgd2FpdFRpbWVvdXQ6IG51bWJlclxuICApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5pdGVtcyQgPSBmcm9tVHJpZ2dlck9uY2U8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+KHJvdXRlciwgdGhpcy5yZWZyZXNoVHJpZ2dlciwgW1xuICAgICAgKCkgPT4gdGhpcy5pbmplY3Rvci5nZXQoSE9PS19DT01QT05FTlRTLCBbXSksXG4gICAgICAoKSA9PiB0aGlzLmZhY3RvcmllcyxcbiAgICAgIHN0YXRlVG9GYWN0b3J5KHRoaXMuc3RhdGUkKVxuICAgIF0pLnBpcGUodGFrZVVudGlsKHRpbWVyKHdhaXRUaW1lb3V0KSksIHNoYXJlUmVwbGF5KDEpKTtcbiAgfVxuXG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5yZWZyZXNoVHJpZ2dlci5uZXh0KDEpO1xuICB9XG5cbiAgZ2V0IHN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlJC52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29tcG9uZW50IGJ5IGl0J3MgaWQgYXMgYW4gb2JzZXJ2YWJsZS5cbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zJFxuICAgICAgLnBpcGUoXG4gICAgICAgIG1lcmdlTWFwKChjbXBzOiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdKSA9PiBjbXBzKSxcbiAgICAgICAgZmlsdGVyKChjbXA6IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uKSA9PiBjbXAuaWQgPT09IGlkKSxcbiAgICAgICAgdGFrZSgxKVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgYWRkKGNvbXBvbmVudDogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICB0aGlzLnN0YXRlLmFkZChjb21wb25lbnQpO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICByZW1vdmUoY29tcG9uZW50OiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbikge1xuICAgIHRoaXMuc3RhdGUuZGVsZXRlKGNvbXBvbmVudCk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxufVxuIl19