import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { PopoverDirective } from 'ngx-bootstrap/popover';
import { gettext } from '../i18n/gettext';
/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
export class PopoverConfirmComponent {
    constructor() {
        this.buttons = [{ label: gettext('cancel'), action: () => Promise.reject() }];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    show(buttons) {
        return __awaiter(this, void 0, void 0, function* () {
            this.buttons = buttons || this.buttons;
            this.isOpen = true;
            let result;
            try {
                result = yield new Promise((resolve, reject) => {
                    return this.click = (action) => action().then(resolve).catch(reject);
                });
            }
            catch (ex) {
                throw (ex);
            }
            finally {
                this.isOpen = false;
            }
            return result;
        });
    }
    buttonStatus(status) {
        if (status) {
            return `btn-${status}`;
        }
        return 'btn-link btn-clean';
    }
    handleOutsideClick() {
        this.click(() => Promise.reject());
    }
}
PopoverConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-popover-confirm',
                template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"m-b-8\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm m-r-16\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
            },] }
];
PopoverConfirmComponent.propDecorators = {
    popover: [{ type: ViewChild, args: [PopoverDirective, { static: false },] }],
    buttons: [{ type: Input }],
    message: [{ type: Input }],
    title: [{ type: Input }],
    isOpen: [{ type: Input }],
    containerClass: [{ type: Input }],
    placement: [{ type: Input }],
    outsideClick: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbW9kYWwvcG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWlCMUM7Ozs7OztHQU1HO0FBS0gsTUFBTSxPQUFPLHVCQUF1QjtJQUpwQztRQU1XLFlBQU8sR0FBNEIsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLENBQUM7UUFHakcsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNmLG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFDcEIsaUJBQVksR0FBRyxLQUFLLENBQUM7SUFpQ2hDLENBQUM7SUE3QkM7O09BRUc7SUFDRyxJQUFJLENBQUMsT0FBaUM7O1lBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxNQUFNLENBQUM7WUFDWCxJQUFJO2dCQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO29CQUM3QyxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxNQUEwQixFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMzRixDQUFDLENBQUMsQ0FBQzthQUNKO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsTUFBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ1g7b0JBQVM7Z0JBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7YUFDckI7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO0tBQUE7SUFFRCxZQUFZLENBQUMsTUFBTTtRQUNqQixJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sT0FBTyxNQUFNLEVBQUUsQ0FBQztTQUN4QjtRQUNELE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsMHZCQUErQzthQUNoRDs7O3NCQUVFLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7c0JBQzNDLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7NkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzJCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wb3ZlckRpcmVjdGl2ZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBQb3BvdmVyQ29uZmlybUJ1dHRvbnMge1xuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBidXR0b25cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGljaCBhY3Rpb24gdG8gcGVyZm9ybS5cbiAgICovXG4gIGFjdGlvbjogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICAvKipcbiAgICogVGhlIHN0YXR1cyBjbGFzcyBhdHRhY2hlZCB0byB0aGUgYnV0dG9uLlxuICAgKi9cbiAgc3RhdHVzPzogU3RhdHVzVHlwZSB8ICdwcmltYXJ5Jztcbn1cblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0byBzaG93IGEgcG9wb3ZlciByaWdodCBuZXh0IHRvIHRoZVxuICogdXNlciBhY3Rpb24uIEFkZCB0aGlzIGNvbXBvbmVudCB3aGVyZSB0aGUgY29uZmlybSBtb2RhbFxuICogc2hvdWxkIGJlIHNob3duIGFuZCB0b2dnbGUgaXNPcGVuIHRvIGRpc3BsYXkgaXQuIFlvdVxuICogY2FuIHVzZSBgYXdhaXQgaXNTaG93KClgIHRvIHdhaXQgZm9yIGEgcmVzdWx0IG9uIHRoZVxuICogY2xpY2sgYWN0aW9uLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcG9wb3Zlci1jb25maXJtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvcG92ZXItY29uZmlybS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9wb3ZlckNvbmZpcm1Db21wb25lbnQge1xuICBAVmlld0NoaWxkKFBvcG92ZXJEaXJlY3RpdmUsIHtzdGF0aWM6IGZhbHNlfSkgcG9wb3ZlcjogUG9wb3ZlckRpcmVjdGl2ZTtcbiAgQElucHV0KCkgYnV0dG9uczogUG9wb3ZlckNvbmZpcm1CdXR0b25zW10gPSBbeyBsYWJlbDogZ2V0dGV4dCgnY2FuY2VsJyksIGFjdGlvbjogKCkgPT4gUHJvbWlzZS5yZWplY3QoKX1dO1xuICBASW5wdXQoKSBtZXNzYWdlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlzT3BlbiA9IGZhbHNlO1xuICBASW5wdXQoKSBjb250YWluZXJDbGFzcyA9ICcnO1xuICBASW5wdXQoKSBwbGFjZW1lbnQgPSAncmlnaHQnO1xuICBASW5wdXQoKSBvdXRzaWRlQ2xpY2sgPSBmYWxzZTtcblxuICBjbGljazogKGFjdGlvbjogKCkgPT4gUHJvbWlzZTxhbnk+KSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBwb3BvdmVyLiBXYWl0IHVudGlsIGFuIGFjdGlvbiBpcyBwZXJmb3JtZWQgb24gaXQuXG4gICAqL1xuICBhc3luYyBzaG93KGJ1dHRvbnM/OiBQb3BvdmVyQ29uZmlybUJ1dHRvbnNbXSkge1xuICAgIHRoaXMuYnV0dG9ucyA9IGJ1dHRvbnMgfHwgdGhpcy5idXR0b25zO1xuICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWNrID0gKGFjdGlvbjogKCkgPT4gUHJvbWlzZTxhbnk+KSA9PiBhY3Rpb24oKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhyb3coZXgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYnV0dG9uU3RhdHVzKHN0YXR1cykge1xuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHJldHVybiBgYnRuLSR7c3RhdHVzfWA7XG4gICAgfVxuICAgIHJldHVybiAnYnRuLWxpbmsgYnRuLWNsZWFuJztcbiAgfVxuXG4gIGhhbmRsZU91dHNpZGVDbGljaygpIHtcbiAgICB0aGlzLmNsaWNrKCgpID0+IFByb21pc2UucmVqZWN0KCkpO1xuICB9XG59XG4iXX0=