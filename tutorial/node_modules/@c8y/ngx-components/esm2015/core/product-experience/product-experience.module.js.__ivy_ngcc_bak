import { __awaiter } from "tslib";
import { NgModule } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { AppStateService } from '../common/ui-state.service';
import { GainsightService } from './gainsight.service';
import { ProductExperienceDirective } from './product-experience.directive';
/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
export class ProductExperienceModule {
    constructor(appState, gainsightService, cookieBannerService) {
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(([currentTenant, isCookieBannerShowed]) => __awaiter(this, void 0, void 0, function* () {
            if (isCookieBannerShowed) {
                return;
            }
            const { customProperties, name } = currentTenant;
            if (this.gainsightService.shouldLoadGainsightTag(customProperties) &&
                !(yield this.gainsightService.isGainsightDisabledInUserPreferences())) {
                this.gainsightService.loadTag(currentTenant);
            }
        }));
    }
}
ProductExperienceModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ProductExperienceDirective],
                exports: [ProductExperienceDirective],
                providers: [GainsightService]
            },] }
];
ProductExperienceModule.ctorParameters = () => [
    { type: AppStateService },
    { type: GainsightService },
    { type: CookieBannerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcHJvZHVjdC1leHBlcmllbmNlL3Byb2R1Y3QtZXhwZXJpZW5jZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDdkYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFOzs7OztHQUtHO0FBTUgsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQyxZQUNVLFFBQXlCLEVBQ3pCLGdCQUFrQyxFQUNsQyxtQkFBd0M7UUFGeEMsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBRWhELGFBQWEsQ0FBQztZQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQWlCLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUI7U0FDL0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFPLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtZQUMzRCxJQUFJLG9CQUFvQixFQUFFO2dCQUN4QixPQUFPO2FBQ1I7WUFDRCxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFDO1lBQ2pELElBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO2dCQUM5RCxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxFQUNyRTtnQkFDQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzlDO1FBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTFCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7Z0JBQzFDLE9BQU8sRUFBRSxDQUFDLDBCQUEwQixDQUFDO2dCQUNyQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzthQUM5Qjs7O1lBYlEsZUFBZTtZQUNmLGdCQUFnQjtZQUZoQixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUN1cnJlbnRUZW5hbnQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDb29raWVCYW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYm9vdHN0cmFwL2Nvb2tpZS1iYW5uZXIvY29va2llLWJhbm5lci5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEdhaW5zaWdodFNlcnZpY2UgfSBmcm9tICcuL2dhaW5zaWdodC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2R1Y3RFeHBlcmllbmNlRGlyZWN0aXZlIH0gZnJvbSAnLi9wcm9kdWN0LWV4cGVyaWVuY2UuZGlyZWN0aXZlJztcbi8qKlxuICogVGhpcyBtb2R1bGUgZW5hYmxlcyBhbiB0ZW5hbnQgdG8gYWN0aXZhdGUgdGhlIHByb2R1Y3QgZXhwZXJpZW5jZVxuICogc29mdHdhcmUgW0dhaW5zaWdodF0oaHR0cHM6Ly93d3cuZ2FpbnNpZ2h0LmNvbS9wcm9kdWN0LWV4cGVyaWVuY2UvKSB0byBoZWxwXG4gKiBhbmQgdHJhY2sgdXNlciBhY3Rpb25zLiBHYWluc2lnaHQgaXMgb25seSBhY3RpdmF0ZWQsIGlmIHRoZSB0ZW5hbnQgY3VzdG9tXG4gKiBwcm9wZXJ0eSBgZ2FpbnNpZ2h0RW5hYmxlZGAgaXMgc2V0IHRvIHRydWUuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1Byb2R1Y3RFeHBlcmllbmNlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW1Byb2R1Y3RFeHBlcmllbmNlRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbR2FpbnNpZ2h0U2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdEV4cGVyaWVuY2VNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBnYWluc2lnaHRTZXJ2aWNlOiBHYWluc2lnaHRTZXJ2aWNlLFxuICAgIHByaXZhdGUgY29va2llQmFubmVyU2VydmljZTogQ29va2llQmFubmVyU2VydmljZVxuICApIHtcbiAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgIHRoaXMuYXBwU3RhdGUuY3VycmVudFRlbmFudC5waXBlKGZpbHRlcjxJQ3VycmVudFRlbmFudD4oQm9vbGVhbikpLFxuICAgICAgdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmlzQ29va2llQmFubmVyU2hvd2VkJFxuICAgIF0pLnN1YnNjcmliZShhc3luYyAoW2N1cnJlbnRUZW5hbnQsIGlzQ29va2llQmFubmVyU2hvd2VkXSkgPT4ge1xuICAgICAgaWYgKGlzQ29va2llQmFubmVyU2hvd2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgY3VzdG9tUHJvcGVydGllcywgbmFtZSB9ID0gY3VycmVudFRlbmFudDtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnNob3VsZExvYWRHYWluc2lnaHRUYWcoY3VzdG9tUHJvcGVydGllcykgJiZcbiAgICAgICAgIShhd2FpdCB0aGlzLmdhaW5zaWdodFNlcnZpY2UuaXNHYWluc2lnaHREaXNhYmxlZEluVXNlclByZWZlcmVuY2VzKCkpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLmxvYWRUYWcoY3VycmVudFRlbmFudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==