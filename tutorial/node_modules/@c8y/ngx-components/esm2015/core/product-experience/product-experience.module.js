import { __awaiter } from "tslib";
import { NgModule } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { AppStateService } from '../common/ui-state.service';
import { GainsightService } from './gainsight.service';
import { ProductExperienceDirective } from './product-experience.directive';
/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/ui-state.service';
import * as ɵngcc2 from './gainsight.service';
import * as ɵngcc3 from '../bootstrap/cookie-banner/cookie-banner.service';
export class ProductExperienceModule {
    constructor(appState, gainsightService, cookieBannerService) {
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(([currentTenant, isCookieBannerShowed]) => __awaiter(this, void 0, void 0, function* () {
            if (isCookieBannerShowed) {
                return;
            }
            const { customProperties, name } = currentTenant;
            if (this.gainsightService.shouldLoadGainsightTag(customProperties) &&
                !(yield this.gainsightService.isGainsightDisabledInUserPreferences())) {
                this.gainsightService.loadTag(currentTenant);
            }
        }));
    }
}
ProductExperienceModule.ɵfac = function ProductExperienceModule_Factory(t) { return new (t || ProductExperienceModule)(ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.GainsightService), ɵngcc0.ɵɵinject(ɵngcc3.CookieBannerService)); };
ProductExperienceModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ProductExperienceModule });
ProductExperienceModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [GainsightService] });
ProductExperienceModule.ctorParameters = () => [
    { type: AppStateService },
    { type: GainsightService },
    { type: CookieBannerService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProductExperienceModule, [{
        type: NgModule,
        args: [{
                declarations: [ProductExperienceDirective],
                exports: [ProductExperienceDirective],
                providers: [GainsightService]
            }]
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: ɵngcc2.GainsightService }, { type: ɵngcc3.CookieBannerService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProductExperienceModule, { declarations: function () { return [ProductExperienceDirective]; }, exports: function () { return [ProductExperienceDirective]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9wcm9kdWN0LWV4cGVyaWVuY2UvcHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7O0FBTUgsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQUFFLFlBQ1UsUUFBeUIsRUFDekIsZ0JBQWtDLEVBQ2xDLG1CQUF3QztBQUNqRCxRQUhTLGFBQVEsR0FBUixRQUFRLENBQWlCO0FBQUMsUUFDMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFDcEQsUUFDSSxhQUFhLENBQUM7QUFDbEIsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFpQixPQUFPLENBQUMsQ0FBQztBQUN2RSxZQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUI7QUFDcEQsU0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQU8sQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxFQUFFO0FBRXRELFlBREwsSUFBSSxvQkFBb0IsRUFBRTtBQUNoQyxnQkFBUSxPQUFPO0FBQ2YsYUFBTztBQUNQLFlBQU0sTUFBTSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxHQUFHLGFBQWEsQ0FBQztBQUN2RCxZQUFNLElBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO0FBQ3RFLGdCQUFRLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLEVBQ3JFO0FBQ1IsZ0JBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyRCxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7bURBM0JDLFFBQVEsU0FBQyxrQkFDUixZQUFZLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxrQkFDMUMsT0FBTyxFQUFFLENBQUMsMEJBQTBCLENBQUMsa0JBQ3JDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGNBQzlCOzt3R0FDSTtBQUFDO0FBRUwsWUFoQlEsZUFBZTtBQUFJLFlBQ25CLGdCQUFnQjtBQUFJLFlBRnBCLG1CQUFtQjtBQUFHOzs7Ozs7Ozs7a1FBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ3VycmVudFRlbmFudCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvb2tpZUJhbm5lclNlcnZpY2UgfSBmcm9tICcuLi9ib290c3RyYXAvY29va2llLWJhbm5lci9jb29raWUtYmFubmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2FpbnNpZ2h0U2VydmljZSB9IGZyb20gJy4vZ2FpbnNpZ2h0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2R1Y3QtZXhwZXJpZW5jZS5kaXJlY3RpdmUnO1xuLyoqXG4gKiBUaGlzIG1vZHVsZSBlbmFibGVzIGFuIHRlbmFudCB0byBhY3RpdmF0ZSB0aGUgcHJvZHVjdCBleHBlcmllbmNlXG4gKiBzb2Z0d2FyZSBbR2FpbnNpZ2h0XShodHRwczovL3d3dy5nYWluc2lnaHQuY29tL3Byb2R1Y3QtZXhwZXJpZW5jZS8pIHRvIGhlbHBcbiAqIGFuZCB0cmFjayB1c2VyIGFjdGlvbnMuIEdhaW5zaWdodCBpcyBvbmx5IGFjdGl2YXRlZCwgaWYgdGhlIHRlbmFudCBjdXN0b21cbiAqIHByb3BlcnR5IGBnYWluc2lnaHRFbmFibGVkYCBpcyBzZXQgdG8gdHJ1ZS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBwcm92aWRlcnM6IFtHYWluc2lnaHRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0RXhwZXJpZW5jZU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGdhaW5zaWdodFNlcnZpY2U6IEdhaW5zaWdodFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb29raWVCYW5uZXJTZXJ2aWNlOiBDb29raWVCYW5uZXJTZXJ2aWNlXG4gICkge1xuICAgIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VGVuYW50LnBpcGUoZmlsdGVyPElDdXJyZW50VGVuYW50PihCb29sZWFuKSksXG4gICAgICB0aGlzLmNvb2tpZUJhbm5lclNlcnZpY2UuaXNDb29raWVCYW5uZXJTaG93ZWQkXG4gICAgXSkuc3Vic2NyaWJlKGFzeW5jIChbY3VycmVudFRlbmFudCwgaXNDb29raWVCYW5uZXJTaG93ZWRdKSA9PiB7XG4gICAgICBpZiAoaXNDb29raWVCYW5uZXJTaG93ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBjdXN0b21Qcm9wZXJ0aWVzLCBuYW1lIH0gPSBjdXJyZW50VGVuYW50O1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2Uuc2hvdWxkTG9hZEdhaW5zaWdodFRhZyhjdXN0b21Qcm9wZXJ0aWVzKSAmJlxuICAgICAgICAhKGF3YWl0IHRoaXMuZ2FpbnNpZ2h0U2VydmljZS5pc0dhaW5zaWdodERpc2FibGVkSW5Vc2VyUHJlZmVyZW5jZXMoKSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UubG9hZFRhZyhjdXJyZW50VGVuYW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19