import { sortBy } from 'lodash-es';
import { pipe } from 'rxjs';
import { distinctUntilChanged, expand, filter, map, tap } from 'rxjs/operators';
export class DashboardChildChange {
    constructor(childToChange) {
        this.MIN_WIDTH = 2;
        this.MIN_HEIGHT = 1;
        this.PIXEL_SIZE_THRESHOLD = 10;
        this.diffX = 0;
        this.diffY = 0;
        this.dashboard = childToChange.dashboard;
        this.children = childToChange.dashboard.children
            ? childToChange.dashboard.children.filter(child => childToChange !== child)
            : [];
        this.child = childToChange;
    }
    get resize$() {
        return this.child.dragSource.moved.pipe(map(move => this.getPixelSize(move)), tap(resizeDimension => this.setPixelSize(resizeDimension)), map(resizeDimension => this.getDimensionSize(resizeDimension)), distinctUntilChanged((prev, next) => prev.width === next.width && prev.height === next.height), map(dimension => this.setDimension(dimension)), this.arrangePipe());
    }
    get drag$() {
        return this.child.dragSource.moved.pipe(map(move => this.getDimensionPosition(move)), filter(dimension => dimension.x >= 0 &&
            dimension.x <= this.dashboard.columns - this.child.width &&
            dimension.y >= 0), distinctUntilChanged((prev, next) => prev.x === next.x && prev.y === next.y), this.arrangePipe());
    }
    findFreeDimension() {
        let y = -1;
        let x = 0;
        let found = false;
        const { width, height } = this.child;
        if (width > this.dashboard.columns) {
            throw new Error('The child does not fit on the current dashboard.');
        }
        do {
            x = 0;
            y++;
            while (x + width <= this.dashboard.columns) {
                if (this.getCollided({ x, y, width, height }).length === 0) {
                    found = true;
                    break;
                }
                x++;
            }
        } while (!found);
        return { x, y, width, height };
    }
    collapseUpAll() {
        return sortBy([this.child, ...this.children], ['y']).forEach(w => {
            const ds = new DashboardChildChange(w);
            const newPosition = ds.collapseUp(w);
            ds.setDimension(newPosition);
        });
    }
    arrangeAll(arrange) {
        const { current, scan, spacing, origin } = arrange;
        const collided = this.getCollided(current, sortBy(scan, ['y']));
        return collided.map(child => {
            const ds = new DashboardChildChange(child);
            ds.setDimension(Object.assign(Object.assign({}, child), { y: spacing }));
            return {
                current: child,
                scan: scan.filter(w => w !== child),
                spacing: child.y + child.height,
                origin
            };
        });
    }
    arrangePipe() {
        return pipe(map((dimension) => ({
            current: dimension,
            scan: this.children,
            spacing: dimension.y + dimension.height,
            origin: Object.assign({}, dimension)
        })), expand((dimensions) => this.arrangeAll(dimensions)), map(({ origin }) => origin), map(dimension => this.setDimension(dimension, true)), tap(() => this.collapseUpAll()));
    }
    collapseUp(dimension) {
        let { y } = dimension;
        while (y > 0) {
            if (this.getCollided(Object.assign(Object.assign({}, dimension), { y: y - 1 })).length !== 0) {
                break;
            }
            y--;
        }
        return Object.assign(Object.assign({}, dimension), { y });
    }
    setDimension(dimension, notIfColliding = false) {
        if (notIfColliding && this.getCollided(dimension).length > 0) {
            return;
        }
        this.child.x = dimension.x;
        this.child.y = dimension.y;
        if (dimension.width >= this.MIN_WIDTH &&
            dimension.x + dimension.width <= this.dashboard.columns) {
            this.child.width = dimension.width;
        }
        else if (dimension.width < this.MIN_WIDTH) {
            dimension.width = this.MIN_WIDTH;
        }
        else {
            dimension.width = this.dashboard.columns - dimension.x;
        }
        if (dimension.height >= this.MIN_HEIGHT) {
            this.child.height = dimension.height;
        }
        else {
            dimension.height = this.MIN_WIDTH;
        }
        return dimension;
    }
    setPixelSize({ width, height }) {
        if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
            this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
        }
        if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
            this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
        }
    }
    getPixelSize(moveEvent) {
        const draggedElement = this.child.element.nativeElement;
        if (!this.diffX) {
            const rect = draggedElement.getBoundingClientRect();
            this.diffX = rect.left;
            this.diffY = rect.top;
        }
        const { x, y } = moveEvent.pointerPosition;
        const width = Math.round(x - this.diffX);
        const height = Math.round(y - this.diffY);
        return { width, height, pointer: { x, y } };
    }
    getDimensionSize(resizePosition) {
        const { x, y } = this.child;
        const ds = this.dashboard.dashboardRect;
        const column = this.dashboard.columnSize;
        const row = this.dashboard.rowSize + this.dashboard.gap;
        const width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
        const height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
        return { x, y, width, height };
    }
    getDimensionPosition(moveEvent) {
        const draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
        if (!this.diffX) {
            const rect = draggedElement.getBoundingClientRect();
            this.diffX = moveEvent.pointerPosition.x - rect.left;
            this.diffY = moveEvent.pointerPosition.y - rect.top;
        }
        const left = moveEvent.pointerPosition.x - this.diffX;
        const top = moveEvent.pointerPosition.y - this.diffY;
        const { width, height } = this.child;
        const ds = this.dashboard.dashboardRect;
        const column = this.dashboard.columnSize;
        const row = this.dashboard.rowSize + this.dashboard.gap / 2;
        const x = Math.round((left - ds.left) / column);
        const y = Math.round((top - ds.top) / row);
        return { x, y, width, height };
    }
    doesCollide(a, b) {
        if (b.x === undefined) {
            return false;
        }
        return !(a.y + a.height - 1 < b.y ||
            a.y > b.y + b.height - 1 ||
            a.x + a.width - 1 < b.x ||
            a.x > b.x + b.width - 1);
    }
    getCollided(currentDimension, dimensions = this.children) {
        const collided = dimensions.filter(dimension => this.doesCollide(currentDimension, dimension));
        return collided;
    }
}
//# sourceMappingURL=data:application/json;base64,