import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { gettext, NavigatorNode } from '@c8y/ngx-components';
import { DeviceGridExampleGuard } from './device-grid-example-guard';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './device-grid-example-guard';
export class DeviceGridExampleNavigationFactory {
    constructor(deviceGridExampleGuard) {
        this.deviceGridExampleGuard = deviceGridExampleGuard;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nav && this.deviceGridExampleGuard.canActivate(null, null)) {
                this.nav = new NavigatorNode({
                    label: gettext('Grids'),
                    icon: 'table'
                });
                this.nav.add(new NavigatorNode({
                    label: gettext('Device grid'),
                    path: '/grids/device-grid',
                    icon: 'table'
                }));
            }
            return this.nav;
        });
    }
}
DeviceGridExampleNavigationFactory.ɵfac = function DeviceGridExampleNavigationFactory_Factory(t) { return new (t || DeviceGridExampleNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.DeviceGridExampleGuard)); };
DeviceGridExampleNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceGridExampleNavigationFactory, factory: DeviceGridExampleNavigationFactory.ɵfac });
DeviceGridExampleNavigationFactory.ctorParameters = () => [
    { type: DeviceGridExampleGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DeviceGridExampleGuard }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXhhbXBsZS1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldmljZS1ncmlkLWV4YW1wbGUvZGV2aWNlLWdyaWQtZXhhbXBsZS1uYXZpZ2F0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7OztBQUdyRSxNQUFNLE9BQU8sa0NBQWtDO0FBQUcsSUFHaEQsWUFBb0Isc0JBQThDO0FBQUksUUFBbEQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUFDLElBQUUsQ0FBQztBQUN4RSxJQUNRLEdBQUc7QUFDWDtBQUE4RCxZQUExRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtBQUMxRSxnQkFBTSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksYUFBYSxDQUFDO0FBQ25DLG9CQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQy9CLG9CQUFRLElBQUksRUFBRSxPQUFPO0FBQ3JCLGlCQUFPLENBQUMsQ0FBQztBQUNULGdCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUNWLElBQUksYUFBYSxDQUFDO0FBQzFCLG9CQUFVLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3ZDLG9CQUFVLElBQUksRUFBRSxvQkFBb0I7QUFDcEMsb0JBQVUsSUFBSSxFQUFFLE9BQU87QUFDdkIsaUJBQVMsQ0FBQyxDQUNILENBQUM7QUFDUixhQUFLO0FBQ0wsWUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDcEIsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIOzhEQXRCQyxVQUFVO29MQUNUO0FBQUM7QUFBNEQsWUFIdEQsc0JBQXNCO0FBQUc7Ozt1RkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRFeGFtcGxlR3VhcmQgfSBmcm9tICcuL2RldmljZS1ncmlkLWV4YW1wbGUtZ3VhcmQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JpZEV4YW1wbGVOYXZpZ2F0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIE5hdmlnYXRvck5vZGVGYWN0b3J5IHtcbiAgbmF2OiBOYXZpZ2F0b3JOb2RlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV2aWNlR3JpZEV4YW1wbGVHdWFyZDogRGV2aWNlR3JpZEV4YW1wbGVHdWFyZCkge31cblxuICBhc3luYyBnZXQoKSB7XG4gICAgaWYgKCF0aGlzLm5hdiAmJiB0aGlzLmRldmljZUdyaWRFeGFtcGxlR3VhcmQuY2FuQWN0aXZhdGUobnVsbCwgbnVsbCkpIHtcbiAgICAgIHRoaXMubmF2ID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnR3JpZHMnKSxcbiAgICAgICAgaWNvbjogJ3RhYmxlJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLm5hdi5hZGQoXG4gICAgICAgIG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnRGV2aWNlIGdyaWQnKSxcbiAgICAgICAgICBwYXRoOiAnL2dyaWRzL2RldmljZS1ncmlkJyxcbiAgICAgICAgICBpY29uOiAndGFibGUnXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYXY7XG4gIH1cbn1cbiJdfQ==