import { Component } from '@angular/core';
import { DeviceGridService, CustomDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { gettext } from '@c8y/ngx-components';
import { find } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/device-grid';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';

function DeviceGridExampleComponent_option_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const example_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", example_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(example_r1.label);
} }
const _c0 = function () { return []; };
export class DeviceGridExampleComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    getExampleWithStandardColumns() {
        const columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns
        };
    }
    getExampleWithStandardColumnsAndSavedFilteringSorting() {
        const columns = this.deviceGridService.getDefaultColumns();
        const nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns
        };
    }
    getExampleWithCustomColumnAndPredefinedFiltering() {
        const columns = this.deviceGridService.getDefaultColumns();
        const typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns
        };
    }
    onExampleSelect(example) {
        this.columnsInput = example.columns;
    }
}
DeviceGridExampleComponent.ɵfac = function DeviceGridExampleComponent_Factory(t) { return new (t || DeviceGridExampleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DeviceGridService)); };
DeviceGridExampleComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceGridExampleComponent, selectors: [["c8y-device-grid-example"]], decls: 29, vars: 15, consts: [[1, "content-fullpage"], [3, "title", "columns", "actionControls", "onColumnsChange", "onDeviceQueryStringChange"], [1, "row"], [1, "col-sm-6"], [1, "card"], [1, "card-header", "separator"], [1, "card-title"], [1, "card-block"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [1, "card-header"], [3, "ngValue"]], template: function DeviceGridExampleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-device-grid", 1);
        ɵngcc0.ɵɵlistener("onColumnsChange", function DeviceGridExampleComponent_Template_c8y_device_grid_onColumnsChange_1_listener($event) { return ctx.columnsOutput = $event; })("onDeviceQueryStringChange", function DeviceGridExampleComponent_Template_c8y_device_grid_onDeviceQueryStringChange_1_listener($event) { return ctx.deviceQueryStringOutput = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "h4", 6);
        ɵngcc0.ɵɵtext(7, "Input");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵelementStart(10, "select", 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function DeviceGridExampleComponent_Template_select_ngModelChange_10_listener($event) { return ctx.onExampleSelect($event); });
        ɵngcc0.ɵɵtemplate(11, DeviceGridExampleComponent_option_11_Template, 2, 2, "option", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "pre");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 3);
        ɵngcc0.ɵɵelementStart(17, "div", 4);
        ɵngcc0.ɵɵelementStart(18, "div", 11);
        ɵngcc0.ɵɵelementStart(19, "span");
        ɵngcc0.ɵɵelementStart(20, "h4", 6);
        ɵngcc0.ɵɵtext(21, "Output");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 7);
        ɵngcc0.ɵɵelementStart(23, "pre");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "pre");
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", "Select devices for bulk operation")("columns", ctx.columnsInput)("actionControls", ɵngcc0.ɵɵpureFunction0(14, _c0));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedExample);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.examples);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(15, 8, ctx.columnsInput), "\n        ");
        ɵngcc0.ɵɵadvance(10);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(25, 10, ctx.deviceQueryStringOutput), "\n        ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(28, 12, ctx.columnsOutput), "\n        ");
    } }, directives: [ɵngcc1.DeviceGridComponent, ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵNgSelectMultipleOption], pipes: [ɵngcc3.JsonPipe], encapsulation: 2 });
DeviceGridExampleComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-grid-example',
                template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DeviceGridService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldmljZS1ncmlkLWV4YW1wbGUvZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsaUJBQWlCLEVBRWpCLHNCQUFzQixFQUN2QixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQU1qQyxNQUFNLE9BQU8sMEJBQTBCO0FBQ3ZDLElBTUUsWUFBc0IsaUJBQW9DO0FBQzVELFFBRHdCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7QUFBQyxRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHO0FBQ3BCLFlBQU0sSUFBSSxDQUFDLDZCQUE2QixFQUFFO0FBQzFDLFlBQU0sSUFBSSxDQUFDLHFEQUFxRCxFQUFFO0FBQ2xFLFlBQU0sSUFBSSxDQUFDLGdEQUFnRCxFQUFFO0FBQzdELFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UsNkJBQTZCO0FBQy9CLFFBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDL0QsUUFBSSxPQUFPO0FBQ1gsWUFBTSxLQUFLLEVBQUUsa0JBQWtCO0FBQy9CLFlBQU0sT0FBTztBQUNiLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UscURBQXFEO0FBQ3ZELFFBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDL0QsUUFBSSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDdkQsUUFBSSxVQUFVLENBQUMsbUJBQW1CLEdBQUc7QUFDckMsWUFBTSxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDdkIsU0FBSyxDQUFDO0FBQ04sUUFBSSxVQUFVLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNsQyxRQUFJLE9BQU87QUFDWCxZQUFNLEtBQUssRUFBRSwrQ0FBK0M7QUFDNUQsWUFBTSxPQUFPO0FBQ2IsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDRSxnREFBZ0Q7QUFDbEQsUUFBSSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUMvRCxRQUFJLE1BQU0sVUFBVSxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztBQUNwRCxRQUFJLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQzdCLFFBQUksVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7QUFDN0IsUUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxRQUFJLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRztBQUNyQyxZQUFNLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDO0FBQ2hDLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLFFBQUksT0FBTztBQUNYLFlBQU0sS0FBSyxFQUFFLDREQUE0RDtBQUN6RSxZQUFNLE9BQU87QUFDYixTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLGVBQWUsQ0FBQyxPQUFPO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNIO3NEQTNEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkM7Ozs7Ozs7Ozs7Ozt3QkFBbUQ7R0FDcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bVBBQ0k7QUFBQztBQUNVLFlBYmQsaUJBQWlCO0FBQ2xCOzs7Ozs7O2tGQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIERldmljZUdyaWRTZXJ2aWNlLFxuICBEZXZpY2VHcmlkQ29sdW1uLFxuICBDdXN0b21EZXZpY2VHcmlkQ29sdW1uXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBmaW5kIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWRldmljZS1ncmlkLWV4YW1wbGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JpZEV4YW1wbGVDb21wb25lbnQge1xuICBleGFtcGxlczogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyBjb2x1bW5zOiBEZXZpY2VHcmlkQ29sdW1uW10gfT47XG4gIHNlbGVjdGVkRXhhbXBsZTtcbiAgY29sdW1uc0lucHV0OiBEZXZpY2VHcmlkQ29sdW1uW107XG4gIGNvbHVtbnNPdXRwdXQ6IERldmljZUdyaWRDb2x1bW5bXTtcbiAgZGV2aWNlUXVlcnlTdHJpbmdPdXRwdXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGV2aWNlR3JpZFNlcnZpY2U6IERldmljZUdyaWRTZXJ2aWNlKSB7XG4gICAgdGhpcy5leGFtcGxlcyA9IFtcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnMoKSxcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnNBbmRTYXZlZEZpbHRlcmluZ1NvcnRpbmcoKSxcbiAgICAgIHRoaXMuZ2V0RXhhbXBsZVdpdGhDdXN0b21Db2x1bW5BbmRQcmVkZWZpbmVkRmlsdGVyaW5nKClcbiAgICBdO1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnMoKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICdTdGFuZGFyZCBjb2x1bW5zJyxcbiAgICAgIGNvbHVtbnNcbiAgICB9O1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhTdGFuZGFyZENvbHVtbnNBbmRTYXZlZEZpbHRlcmluZ1NvcnRpbmcoKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICBjb25zdCBuYW1lQ29sdW1uID0gZmluZChjb2x1bW5zLCB7IG5hbWU6ICduYW1lJyB9KTtcbiAgICBuYW1lQ29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgPSB7XG4gICAgICBuYW1lczogWycqVGVtcConXVxuICAgIH07XG4gICAgbmFtZUNvbHVtbi5zb3J0T3JkZXIgPSAnZGVzYyc7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnU3RhbmRhcmQgY29sdW1ucyB3aXRoIHNhdmVkIGZpbHRlcmluZy9zb3J0aW5nJyxcbiAgICAgIGNvbHVtbnNcbiAgICB9O1xuICB9XG5cbiAgZ2V0RXhhbXBsZVdpdGhDdXN0b21Db2x1bW5BbmRQcmVkZWZpbmVkRmlsdGVyaW5nKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKCk7XG4gICAgY29uc3QgdHlwZUNvbHVtbiA9IG5ldyBDdXN0b21EZXZpY2VHcmlkQ29sdW1uKCk7XG4gICAgdHlwZUNvbHVtbi5uYW1lID0gJ3R5cGUnO1xuICAgIHR5cGVDb2x1bW4ucGF0aCA9ICd0eXBlJztcbiAgICB0eXBlQ29sdW1uLmhlYWRlciA9IGdldHRleHQoJ1R5cGUnKTtcbiAgICB0eXBlQ29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgPSB7XG4gICAgICBlcXVhbHM6IFsnYzh5X01RVFREZXZpY2UnXVxuICAgIH07XG4gICAgY29sdW1ucy5zcGxpY2UoMiwgMCwgdHlwZUNvbHVtbik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnU3RhbmRhcmQgY29sdW1ucyB3aXRoIGN1c3RvbSBvbmUgd2l0aCBwcmVkZWZpbmVkIGZpbHRlcmluZycsXG4gICAgICBjb2x1bW5zXG4gICAgfTtcbiAgfVxuXG4gIG9uRXhhbXBsZVNlbGVjdChleGFtcGxlKSB7XG4gICAgdGhpcy5jb2x1bW5zSW5wdXQgPSBleGFtcGxlLmNvbHVtbnM7XG4gIH1cbn1cbiJdfQ==