import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DeviceRegistrationService, InventoryService } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { head } from 'lodash-es';
export class SensorPhoneService {
    constructor(ui, inventoryService, deviceRegistrationService) {
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.deviceRegistrationService = deviceRegistrationService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
    createPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.addPhoneGroup();
            const device = { id: deviceId, groupId: group.id };
            const { res } = yield this.deviceRegistrationService.create(device);
            if (res.status !== this.HTTP_STATUS_CODE.CREATED) {
                throw res;
            }
        });
    }
    acceptPhoneReqistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { res } = yield this.deviceRegistrationService.accept(deviceId);
            if (res.status !== this.HTTP_STATUS_CODE.OK) {
                throw res;
            }
        });
    }
}
SensorPhoneService.decorators = [
    { type: Injectable }
];
SensorPhoneService.ctorParameters = () => [
    { type: AppStateService },
    { type: InventoryService },
    { type: DeviceRegistrationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zZW5zb3ItcGhvbmUvc2Vuc29yLXBob25lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUdqQyxNQUFNLE9BQU8sa0JBQWtCO0lBVTdCLFlBQ1UsRUFBbUIsRUFDbkIsZ0JBQWtDLEVBQ2xDLHlCQUFvRDtRQUZwRCxPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFackQscUJBQWdCLEdBQUc7WUFDMUIsRUFBRSxFQUFFLEdBQUc7WUFDUCxPQUFPLEVBQUUsR0FBRztTQUNiLENBQUM7UUFHTSx5QkFBb0IsR0FBRyx3QkFBd0IsQ0FBQztRQUN2QyxxQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFPcEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQzNCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxD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QUFDO2FBQ1g7UUFDSCxDQUFDO0tBQUE7OztZQTFGRixVQUFVOzs7WUFIRixlQUFlO1lBRFksZ0JBQWdCO1lBQTNDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UsIEludmVudG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGhlYWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Vuc29yUGhvbmVTZXJ2aWNlIHtcbiAgcmVhZG9ubHkgSFRUUF9TVEFUVVNfQ09ERSA9IHtcbiAgICBPSzogMjAwLFxuICAgIENSRUFURUQ6IDIwMVxuICB9O1xuICBwcml2YXRlIGRvbWFpbk5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSB0ZW5hbnRJZDogc3RyaW5nO1xuICBwcml2YXRlIFBIT05FX0dST1VQX0ZSQUdNRU5UID0gJ2M4eV9Jc1NlbnNvclBob25lR3JvdXAnO1xuICBwcml2YXRlIHJlYWRvbmx5IFBIT05FX0dST1VQX05BTUUgPSBnZXR0ZXh0KCdQaG9uZXMnKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHVpOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZTogRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZVxuICApIHtcbiAgICB0aGlzLnVpLmN1cnJlbnRUZW5hbnQuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kb21haW5OYW1lID0gZGF0YS5kb21haW5OYW1lO1xuICAgICAgICB0aGlzLnRlbmFudElkID0gZGF0YS5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0SG9zdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW5OYW1lLnN1YnN0cmluZyh0aGlzLmRvbWFpbk5hbWUuaW5kZXhPZignLicpICsgMSk7XG4gIH1cblxuICBnZXRUZW5hbnROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3BsaXQoJy4nKVswXTtcbiAgfVxuXG4gIGdldFRlbmFudElkKCkge1xuICAgIHJldHVybiB0aGlzLnRlbmFudElkO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tQaG9uZUdyb3VwRXhpc3RzKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgcmVzIH0gPSBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdCh7XG4gICAgICBmcmFnbWVudFR5cGU6IHRoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRcbiAgICB9KTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLk9LKSB7XG4gICAgICByZXR1cm4gaGVhZChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBhZGRQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5jaGVja1Bob25lR3JvdXBFeGlzdHMoKTtcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlUGhvbmVHcm91cCgpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGhvbmVHcm91cCgpIHtcbiAgICBjb25zdCBuZXdQaG9uZUdyb3VwID0ge1xuICAgICAgYzh5X0dsb2JhbDoge30sXG4gICAgICBjOHlfSXNEZXZpY2VHcm91cDoge30sXG4gICAgICB0eXBlOiAnYzh5X0RldmljZUdyb3VwJyxcbiAgICAgIG5hbWU6IHRoaXMuUEhPTkVfR1JPVVBfTkFNRSxcbiAgICAgIFt0aGlzLlBIT05FX0dST1VQX0ZSQUdNRU5UXToge31cbiAgICB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5jcmVhdGUobmV3UGhvbmVHcm91cCk7XG4gICAgaWYgKGRhdGEgJiYgcmVzICYmIHJlcy5zdGF0dXMgPT09IHRoaXMuSFRUUF9TVEFUVVNfQ09ERS5DUkVBVEVEKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZW5lcmF0ZVJlZ2lzdHJhdGlvbkRhdGEoZGV2aWNlSWQpIHtcbiAgICBjb25zdCByZXMgPSAnYzh5Oi8vJyArIHRoaXMuZ2V0VGVuYW50TmFtZSgpICsgJy4nICsgdGhpcy5nZXRIb3N0KCkgKyAnLz9kZXZpY2VJZD0nICsgZGV2aWNlSWQ7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVBob25lUmVnaXN0cmF0aW9uUmVxdWVzdChkZXZpY2VJZCkge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5hZGRQaG9uZUdyb3VwKCk7XG4gICAgY29uc3QgZGV2aWNlID0geyBpZDogZGV2aWNlSWQsIGdyb3VwSWQ6IGdyb3VwLmlkIH07XG5cbiAgICBjb25zdCB7IHJlcyB9ID0gYXdhaXQgdGhpcy5kZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlLmNyZWF0ZShkZXZpY2UpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuQ1JFQVRFRCkge1xuICAgICAgdGhyb3cgcmVzO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFjY2VwdFBob25lUmVxaXN0cmF0aW9uUmVxdWVzdChkZXZpY2VJZCkge1xuICAgIGNvbnN0IHsgcmVzIH0gPSBhd2FpdCB0aGlzLmRldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UuYWNjZXB0KGRldmljZUlkKTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLk9LKSB7XG4gICAgICB0aHJvdyByZXM7XG4gICAgfVxuICB9XG59XG4iXX0=