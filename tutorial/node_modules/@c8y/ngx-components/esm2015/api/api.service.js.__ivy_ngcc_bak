import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/core/FetchClient";
export class ApiService {
    constructor(client) {
        this.client = client;
        this.callsSubject = new Subject();
        this.calls = this.callsSubject.asObservable();
        this.hookIntoClientFetch();
    }
    hookResponse(hookFilter) {
        return this.callsSubject.pipe(filter(({ phase }) => phase === 'finish'), filter(hookFilter));
    }
    hookRequest(hookFilter) {
        return this.callsSubject.pipe(filter(({ phase }) => phase === 'start'), filter(hookFilter));
    }
    onFinish(call) {
        return __awaiter(this, void 0, void 0, function* () {
            this.callsSubject.next(Object.assign({ phase: 'finish' }, call));
        });
    }
    onStart(call) {
        this.callsSubject.next(Object.assign({ phase: 'start' }, call));
    }
    resolveData(call) {
        return __awaiter(this, void 0, void 0, function* () {
            const { response, method } = call;
            if ('data' in response) {
                return Promise.resolve({ data: response.data, method });
            }
            else {
                const cb = (data) => ({ data, method });
                return response.clone().json().then(cb, cb);
            }
        });
    }
    hookIntoClientFetch() {
        const fetch = this.client.fetch.bind(this.client);
        this.client.fetch = (url, options = { method: 'GET' }) => __awaiter(this, void 0, void 0, function* () {
            const { method } = options;
            this.onStart({ options, method, url });
            let fetchPromise = fetch(url, options);
            if (typeof options.responseInterceptor === 'function') {
                fetchPromise = fetchPromise.then(options.responseInterceptor);
            }
            fetchPromise.then((response) => this.onFinish({ response, url, options, method }), (response) => this.onFinish({ response, url, options, method }));
            return fetchPromise;
        });
    }
}
ApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ApiService_Factory() { return new ApiService(i0.ɵɵinject(i1.FetchClient)); }, token: ApiService, providedIn: "root" });
ApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ApiService.ctorParameters = () => [
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hcGkvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBaUIsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUt4QyxNQUFNLE9BQU8sVUFBVTtJQUlyQixZQUFvQixNQUFtQjtRQUFuQixXQUFNLEdBQU4sTUFBTSxDQUFhO1FBRi9CLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUc1QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFlBQVksQ0FBQyxVQUFzQztRQUNqRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUMzQixNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FDbkIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsVUFBc0M7UUFDaEQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxFQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQ25CLENBQUM7SUFDSixDQUFDO0lBRUssUUFBUSxDQUFDLElBQWE7O1lBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxpQkFBRyxLQUFLLEVBQUUsUUFBUSxJQUFLLElBQUksRUFBRyxDQUFDO1FBQ3ZELENBQUM7S0FBQTtJQUVELE9BQU8sQ0FBQyxJQUFhO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxpQkFBRyxLQUFLLEVBQUUsT0FBTyxJQUFLLElBQUksRUFBRyxDQUFDO0lBQ3RELENBQUM7SUFFSyxXQUFXLENBQUMsSUFBYTs7WUFDN0IsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDbEMsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO2dCQUN0QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3pEO2lCQUFNO2dCQUNMLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQVEsUUFBcUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1FBQ0gsQ0FBQztLQUFBO0lBRU8sbUJBQW1CO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBTyxHQUFHLEVBQUUsVUFBMEMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLEVBQUUsRUFBRTtZQUM1RixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdkMsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxJQUFJLE9BQU8sT0FBTyxDQUFDLG1CQUFtQixLQUFLLFVBQVUsRUFBRTtnQkFDckQsWUFBWSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDL0Q7WUFDRCxZQUFZLENBQUMsSUFBSSxDQUNmLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQ3pFLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQzFFLENBQUM7WUFDRixPQUFPLFlBQVksQ0FBQztRQUN0QixDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7WUEzREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFQUSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElGZXRjaE9wdGlvbnMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBcGlDYWxsLCBBcGlDYWxsT3B0aW9ucyB9IGZyb20gJy4vYXBpLm1vZGVsJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XG4gIGNhbGxzOiBPYnNlcnZhYmxlPEFwaUNhbGw+O1xuICBwcml2YXRlIGNhbGxzU3ViamVjdCA9IG5ldyBTdWJqZWN0PEFwaUNhbGw+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50KSB7XG4gICAgdGhpcy5jYWxscyA9IHRoaXMuY2FsbHNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuaG9va0ludG9DbGllbnRGZXRjaCgpO1xuICB9XG5cbiAgaG9va1Jlc3BvbnNlKGhvb2tGaWx0ZXI6IChjYWxsOiBBcGlDYWxsKSA9PiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbHNTdWJqZWN0LnBpcGUoXG4gICAgICBmaWx0ZXIoKHsgcGhhc2UgfSkgPT4gcGhhc2UgPT09ICdmaW5pc2gnKSxcbiAgICAgIGZpbHRlcihob29rRmlsdGVyKVxuICAgICk7XG4gIH1cblxuICBob29rUmVxdWVzdChob29rRmlsdGVyOiAoY2FsbDogQXBpQ2FsbCkgPT4gYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLmNhbGxzU3ViamVjdC5waXBlKFxuICAgICAgZmlsdGVyKCh7IHBoYXNlIH0pID0+IHBoYXNlID09PSAnc3RhcnQnKSxcbiAgICAgIGZpbHRlcihob29rRmlsdGVyKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBvbkZpbmlzaChjYWxsOiBBcGlDYWxsKSB7XG4gICAgdGhpcy5jYWxsc1N1YmplY3QubmV4dCh7IHBoYXNlOiAnZmluaXNoJywgLi4uY2FsbCB9KTtcbiAgfVxuXG4gIG9uU3RhcnQoY2FsbDogQXBpQ2FsbCkge1xuICAgIHRoaXMuY2FsbHNTdWJqZWN0Lm5leHQoeyBwaGFzZTogJ3N0YXJ0JywgLi4uY2FsbCB9KTtcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmVEYXRhKGNhbGw6IEFwaUNhbGwpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgcmVzcG9uc2UsIG1ldGhvZCB9ID0gY2FsbDtcbiAgICBpZiAoJ2RhdGEnIGluIHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogcmVzcG9uc2UuZGF0YSwgbWV0aG9kIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjYiA9IChkYXRhKSA9PiAoeyBkYXRhLCBtZXRob2R9KTtcbiAgICAgIHJldHVybiAocmVzcG9uc2UgYXMgUmVzcG9uc2UpLmNsb25lKCkuanNvbigpLnRoZW4oY2IsIGNiKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhvb2tJbnRvQ2xpZW50RmV0Y2goKSB7XG4gICAgY29uc3QgZmV0Y2ggPSB0aGlzLmNsaWVudC5mZXRjaC5iaW5kKHRoaXMuY2xpZW50KTtcbiAgICB0aGlzLmNsaWVudC5mZXRjaCA9IGFzeW5jICh1cmwsIG9wdGlvbnM6IEFwaUNhbGxPcHRpb25zICYgSUZldGNoT3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJ30pID0+IHtcbiAgICAgIGNvbnN0IHsgbWV0aG9kIH0gPSBvcHRpb25zO1xuICAgICAgdGhpcy5vblN0YXJ0KHsgb3B0aW9ucywgbWV0aG9kLCB1cmwgfSk7XG4gICAgICBsZXQgZmV0Y2hQcm9taXNlID0gZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZXNwb25zZUludGVyY2VwdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZldGNoUHJvbWlzZSA9IGZldGNoUHJvbWlzZS50aGVuKG9wdGlvbnMucmVzcG9uc2VJbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICBmZXRjaFByb21pc2UudGhlbihcbiAgICAgICAgKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gdGhpcy5vbkZpbmlzaCh7IHJlc3BvbnNlLCB1cmwsIG9wdGlvbnMsIG1ldGhvZCB9KSxcbiAgICAgICAgKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gdGhpcy5vbkZpbmlzaCh7IHJlc3BvbnNlLCB1cmwsIG9wdGlvbnMsIG1ldGhvZCB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybiBmZXRjaFByb21pc2U7XG4gICAgfTtcbiAgfVxufVxuIl19