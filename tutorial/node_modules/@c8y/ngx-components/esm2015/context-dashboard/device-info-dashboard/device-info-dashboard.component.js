import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, combineLatest, from } from 'rxjs';
import { map, mergeMap, toArray } from 'rxjs/operators';
import { WidgetService } from '../widget.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '../widget.service';
import * as ɵngcc3 from '@ngx-translate/core';
import * as ɵngcc4 from '@c8y/ngx-components';
import * as ɵngcc5 from '@angular/common';

const _c0 = function (a0) { return { isLoading: a0, isDisabled: true, canDelete: false, translateWidgetTitle: true, allowFullscreen: false, title: false }; };
export class DeviceInfoDashboardComponent {
    constructor(router, widgetService, translateService) {
        this.router = router;
        this.widgetService = widgetService;
        this.translateService = translateService;
        this.isLoading$ = new BehaviorSubject(true);
        this.DEVICE_INFO_WIDGETS = [
            {
                name: 'Alarm list',
                title: gettext('Active, critical alarms'),
                _x: 4,
                _y: 7,
                _height: 4,
                _width: 4,
                config: {
                    options: {
                        orderMode: 'ACTIVE_FIRST',
                        severity: { CRITICAL: true },
                        status: {
                            ACTIVE: true,
                            ACKNOWLEDGED: false,
                            CLEARED: false
                        },
                        types: []
                    }
                }
            },
            {
                name: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            },
            {
                name: 'Asset Properties',
                title: gettext('Device data'),
                config: {
                    options: {
                        properties: [],
                        allowDisplayAndEditKnownProperties: true,
                        hiddenPropertiesKeyPaths: ['owner']
                    }
                },
                _x: 0,
                _y: 7,
                _height: 8,
                _width: 4
            },
            {
                name: 'Data points graph',
                title: gettext('Device and communication'),
                _x: 4,
                _y: 2,
                _height: 5,
                _width: 8,
                config: {
                    interval: 'hours',
                    aggregation: 'NONE',
                    realtime: true,
                    datapointsInitialDisplayLimit: 3,
                    datapoints: [
                        {
                            fragment: 'c8y_Battery',
                            series: 'level',
                            label: this.translateService.instant('Battery: level'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e07b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'rssi',
                            label: this.translateService.instant('Signal: RSSI'),
                            unit: 'dBm',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#a7d0f1',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Used',
                            label: this.translateService.instant('Memory: used'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f75229',
                            __active: true
                        },
                        {
                            fragment: 'c8y_CPUMeasurement',
                            series: 'Workload',
                            label: this.translateService.instant('CPU: workload'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#b24f3e',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Upload',
                            label: this.translateService.instant('Network: upload'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#88c039',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RCSP',
                            label: this.translateService.instant('Signal: RCSP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSCP',
                            label: this.translateService.instant('Signal: RSCP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRP',
                            label: this.translateService.instant('Signal: RSRP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#43ba3b',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRQ',
                            label: this.translateService.instant('Signal: RSRQ'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#14b0b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ber',
                            label: this.translateService.instant('Signal: BER'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#44ff33',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ECN0',
                            label: this.translateService.instant('Signal: ECN0'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#873efa',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Download',
                            label: this.translateService.instant('Network: download'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f27a45',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Total',
                            label: this.translateService.instant('Memory: total'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#dadd8c',
                            __active: true
                        }
                    ],
                    alarmsEventsConfigs: [
                        {
                            label: 'c8y_LocationUpdate',
                            timelineType: 'EVENT',
                            color: '#6f6cd0',
                            filters: {
                                type: 'c8y_LocationUpdate'
                            },
                            __active: true
                        },
                        {
                            label: 'c8y_UnavailabilityAlarm',
                            timelineType: 'ALARM',
                            color: '#375bf2',
                            filters: {
                                type: 'c8y_UnavailabilityAlarm'
                            },
                            __active: true
                        }
                    ]
                },
                transformConfigWithContext(config, context, c8yDevices) {
                    'ngInject';
                    return c8yDevices
                        .getSupportedSeries(context.id)
                        .then(supportedMeasurementSeries => config.datapoints.filter(configMeasurement => supportedMeasurementSeries.find(supportedSeries => supportedSeries.fragment === configMeasurement.fragment &&
                        supportedSeries.series === configMeasurement.series)))
                        .then(datapoints => (Object.assign(Object.assign({}, config), { datapoints })));
                }
            },
            {
                name: 'deviceStatusWidget',
                title: gettext('Device status'),
                _x: 0,
                _y: 2,
                _height: 5,
                _width: 4
            },
            {
                name: 'deviceGroupAssignmentWidget',
                title: gettext('Group assignment'),
                _x: 8,
                _y: 7,
                _height: 4,
                _width: 4
            },
            {
                componentId: 'assetNotesWidget',
                title: gettext('Message of the day'),
                classes: { 'panel-title-hidden': true },
                _x: 0,
                _y: 0,
                _height: 2,
                _width: 12
            },
            {
                componentId: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            }
        ];
        this.currentContext$ = this.router.parent.data.pipe(map(({ contextData }) => {
            this.title = contextData.name;
            return contextData;
        }));
        this.widgets$ = from(this.DEVICE_INFO_WIDGETS).pipe(mergeMap(widget => this.widgetService.mapLegacy(widget)), map(widget => (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: this.router.parent.snapshot.data.contextData }) }))), toArray());
        this.widgetsSubscription = combineLatest([this.widgets$, this.currentContext$]).subscribe(() => {
            this.isLoading$.next(false);
        });
    }
    ngOnDestroy() {
        this.widgetsSubscription.unsubscribe();
    }
}
DeviceInfoDashboardComponent.ɵfac = function DeviceInfoDashboardComponent_Factory(t) { return new (t || DeviceInfoDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TranslateService)); };
DeviceInfoDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceInfoDashboardComponent, selectors: [["c8y-device-info-dashboard-dashboard"]], decls: 6, vars: 12, consts: [[3, "context", "widgets", "settings"]], template: function DeviceInfoDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "c8y-widgets-dashboard", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵpipe(5, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.currentContext$))("widgets", ɵngcc0.ɵɵpipeBind1(4, 6, ctx.widgets$))("settings", ɵngcc0.ɵɵpureFunction1(10, _c0, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.isLoading$)));
    } }, directives: [ɵngcc4.TitleComponent, ɵngcc4.WidgetsDashboardComponent], pipes: [ɵngcc5.AsyncPipe], encapsulation: 2 });
DeviceInfoDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: WidgetService },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceInfoDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-info-dashboard-dashboard',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [context]=\"currentContext$ | async\"\n  [widgets]=\"widgets$ | async\"\n  [settings]=\"{\n    isLoading: isLoading$ | async,\n    isDisabled: true,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ɵngcc2.WidgetService }, { type: ɵngcc3.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,