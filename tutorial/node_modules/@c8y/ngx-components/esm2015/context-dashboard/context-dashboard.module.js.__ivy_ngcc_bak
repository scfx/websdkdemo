import { NgModule } from '@angular/core';
import { CoreModule, HOOK_ACTION, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AppearanceSettingsComponent } from './appearance-settings.component';
import { ContextDashboardComponent } from './context-dashboard.component';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardActionsFactory } from './dashboard-actions.factory';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { DeviceDashboardGuard } from './device-dashboard.guard';
import { GroupDashboardGuard } from './group-dashboard.guard';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetPreviewComponent } from './widget-preview.component';
import { WidgetService } from './widget.service';
const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
const ɵ0 = defaultConfig;
export class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                    multi: true
                },
                {
                    provide: HOOK_ACTION,
                    useClass: DashboardActionsFactory,
                    multi: true
                }
            ]
        };
    }
}
ContextDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1kYXNoYm9hcmQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvY29udGV4dC1kYXNoYm9hcmQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBMEIsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsTUFBTSxhQUFhLEdBQUc7SUFDcEIsZUFBZSxFQUFFLElBQUk7SUFDckIsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNELE1BQU0sRUFBRTtRQUNOO1lBQ0UsSUFBSSxFQUFFLHdCQUF3QjtZQUM5QixTQUFTLEVBQUUseUJBQXlCO1lBQ3BDLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDO1lBQ25DLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTTtTQUM1QjtRQUNEO1lBQ0UsSUFBSSxFQUFFLHdCQUF3QjtZQUM5QixTQUFTLEVBQUUseUJBQXlCO1lBQ3BDLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1lBQ2xDLE9BQU8sRUFBRSxXQUFXLENBQUMsS0FBSztTQUMzQjtLQUNGO0NBQ0YsQ0FBQztXQWlCYyxhQUFhO0FBSTdCLE1BQU0sT0FBTyxzQkFBc0I7SUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFpQyxFQUFFO1FBQy9DLE9BQU87WUFDTCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxRQUFRLGtDQUFPLGFBQWEsR0FBSyxNQUFNLENBQUU7aUJBQzFDO2dCQUNELHVCQUF1QjtnQkFDdkIsb0JBQW9CO2dCQUNwQixtQkFBbUI7Z0JBQ25CO29CQUNFLE9BQU8sRUFBRSxVQUFVO29CQUNuQixRQUFRLEVBQUUsZ0NBQUssYUFBYSxHQUFLLE1BQU0sRUFBRyxNQUFNO29CQUNoRCxLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUEzQ0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWiwyQkFBMkI7b0JBQzNCLHlCQUF5QjtvQkFDekIscUJBQXFCO29CQUNyQixzQkFBc0I7b0JBQ3RCLHdCQUF3QjtpQkFDekI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQy9FLE9BQU8sRUFBRSxDQUFDLHlCQUF5QixFQUFFLHFCQUFxQixDQUFDO2dCQUMzRCxlQUFlLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxxQkFBcUIsRUFBRSx3QkFBd0IsQ0FBQztnQkFDN0YsU0FBUyxFQUFFO29CQUNULGFBQWE7b0JBQ2I7d0JBQ0UsT0FBTyxFQUFFLHdCQUF3Qjt3QkFDakMsUUFBUSxJQUFlO3FCQUN4QjtpQkFDRjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIEhPT0tfQUNUSU9OLCBIT09LX1JPVVRFLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IEFwcGVhcmFuY2VTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJy4vYXBwZWFyYW5jZS1zZXR0aW5ncy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZENvbXBvbmVudCB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb25maWcsIENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRyB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQWN0aW9uc0ZhY3RvcnkgfSBmcm9tICcuL2Rhc2hib2FyZC1hY3Rpb25zLmZhY3RvcnknO1xuaW1wb3J0IHsgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoYm9hcmQtZGV0YWlsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZXZpY2VEYXNoYm9hcmRHdWFyZCB9IGZyb20gJy4vZGV2aWNlLWRhc2hib2FyZC5ndWFyZCc7XG5pbXBvcnQgeyBHcm91cERhc2hib2FyZEd1YXJkIH0gZnJvbSAnLi9ncm91cC1kYXNoYm9hcmQuZ3VhcmQnO1xuaW1wb3J0IHsgV2lkZ2V0Q29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXQtY29uZmlnLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXaWRnZXRQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXQtcHJldmlldy5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2lkZ2V0U2VydmljZSB9IGZyb20gJy4vd2lkZ2V0LnNlcnZpY2UnO1xuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICBhbGxvd0Z1bGxzY3JlZW46IHRydWUsXG4gIHdpZGdldEZpbHRlcih7IGRhdGEgfSkge1xuICAgIHJldHVybiAhKGRhdGEgJiYgZGF0YS5zZXR0aW5ncyAmJiBkYXRhLnNldHRpbmdzLm5vTmV3V2lkZ2V0cyk7XG4gIH0sXG4gIHJvdXRlczogW1xuICAgIHtcbiAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgIGNvbXBvbmVudDogQ29udGV4dERhc2hib2FyZENvbXBvbmVudCxcbiAgICAgIGNhbkFjdGl2YXRlOiBbRGV2aWNlRGFzaGJvYXJkR3VhcmRdLFxuICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlXG4gICAgfSxcbiAgICB7XG4gICAgICBwYXRoOiAnZGFzaGJvYXJkLzpkYXNoYm9hcmRJZCcsXG4gICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICBjYW5BY3RpdmF0ZTogW0dyb3VwRGFzaGJvYXJkR3VhcmRdLFxuICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXBcbiAgICB9XG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEFwcGVhcmFuY2VTZXR0aW5nc0NvbXBvbmVudCxcbiAgICBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LFxuICAgIFdpZGdldENvbmZpZ0NvbXBvbmVudCxcbiAgICBXaWRnZXRQcmV2aWV3Q29tcG9uZW50LFxuICAgIERhc2hib2FyZERldGFpbENvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzOiBbQ29yZU1vZHVsZSwgVG9vbHRpcE1vZHVsZSwgUG9wb3Zlck1vZHVsZSwgQnNEcm9wZG93bk1vZHVsZS5mb3JSb290KCldLFxuICBleHBvcnRzOiBbQ29udGV4dERhc2hib2FyZENvbXBvbmVudCwgV2lkZ2V0Q29uZmlnQ29tcG9uZW50XSxcbiAgZW50cnlDb21wb25lbnRzOiBbQ29udGV4dERhc2hib2FyZENvbXBvbmVudCwgV2lkZ2V0Q29uZmlnQ29tcG9uZW50LCBEYXNoYm9hcmREZXRhaWxDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBXaWRnZXRTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRyxcbiAgICAgIHVzZVZhbHVlOiBkZWZhdWx0Q29uZmlnXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIENvbnRleHREYXNoYm9hcmRNb2R1bGUge1xuICBzdGF0aWMgY29uZmlnKGNvbmZpZzogQ29udGV4dERhc2hib2FyZENvbmZpZyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxDb250ZXh0RGFzaGJvYXJkTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDb250ZXh0RGFzaGJvYXJkTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDT05URVhUX0RBU0hCT0FSRF9DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH1cbiAgICAgICAgfSxcbiAgICAgICAgQ29udGV4dERhc2hib2FyZFNlcnZpY2UsXG4gICAgICAgIERldmljZURhc2hib2FyZEd1YXJkLFxuICAgICAgICBHcm91cERhc2hib2FyZEd1YXJkLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgICAgICB1c2VWYWx1ZTogeyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfS5yb3V0ZXMsXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhPT0tfQUNUSU9OLFxuICAgICAgICAgIHVzZUNsYXNzOiBEYXNoYm9hcmRBY3Rpb25zRmFjdG9yeSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19