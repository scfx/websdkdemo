import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { ContextDashboardModule } from '../context-dashboard.module';
import { ContextDashboardComponent } from '../context-dashboard.component';
import { ReportDashboardGuard } from './report-dashboard.guard';
import { ReportDashboardNavigationFactory } from './report-dashboard-navigation.factory';
import { ReportDashboardListComponent } from './report-dashboard-list.component';
import { ReportDashboardService } from './report-dashboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
const ɵ0 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
export class ReportDashboardModule {
}
ReportDashboardModule.ɵfac = function ReportDashboardModule_Factory(t) { return new (t || ReportDashboardModule)(); };
ReportDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReportDashboardModule });
ReportDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ReportDashboardGuard,
        ReportDashboardNavigationFactory,
        ReportDashboardService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: ReportDashboardNavigationFactory,
            multi: true
        }
    ], imports: [[
            CoreModule,
            ContextDashboardModule,
            RouterModule.forChild([
                {
                    path: 'reports',
                    component: ReportDashboardListComponent
                }
            ])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    CoreModule,
                    ContextDashboardModule,
                    RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ])
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReportDashboardModule, { declarations: function () { return [ReportDashboardListComponent]; }, imports: function () { return [CoreModule,
        ContextDashboardModule, ɵngcc1.RouterModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsVUFBVSxFQUNWLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFDcEUsV0FvQmdCO0FBQ2hCLElBQVE7QUFDUixRQUFVLElBQUksRUFBRSx3QkFBd0I7QUFDeEMsUUFBVSxTQUFTLEVBQUUseUJBQXlCO0FBQzlDLFFBQVUsV0FBVyxFQUFFLENBQUMsb0JBQW9CLENBQUM7QUFDN0MsUUFBVSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07QUFDckMsS0FBUztBQUNULENBQU87QUFVUCxNQUFNLE9BQU8scUJBQXFCO0FBQUc7aURBcENwQyxRQUFRLFNBQUMsa0JBQ1IsWUFBWSxFQUFFLENBQUM7UUFBNEIsQ0FBQyxrQkFDNUMsZUFBZSxFQUFFLEVBQUUsa0JBQ25CLE9BQU8sRUFBRSxzQkFDUDtJQUFVLHNCQUNWLHNCQUFzQixzQkFDdEI7QUFBWSxDQUFDLFFBQVEsQ0FBQztNQUNwQiw4QkFDRSxJQUFJO0FBQUUsU0FBUztPQUNmO01BQVMsRUFBRTtHQUE0QjtHQUN4QztDQUNGLENBQUM7U0FDSDtpQkFDRCxTQUFTLEVBQUU7T0FDVCxvQkFBb0Isc0JBQ3BCOztDQUFnQzthQUNoQztnQkFBc0I7Y0FDdEI7SUFDRSxPQUFPLEVBQUUsVUFBVTthQUNuQjtHQUFRLElBT1AsMEJBQ0Q7Q0FBSyxFQUFFLElBQUksc0JBQ1osc0JBQ0Q7aUJBQ0U7TUFBTyxFQUFFO2FBQW9CO3dCQUM3QixRQUFRLEVBQUUsZ0NBQWdDLDBCQUMxQyxLQUFLLEVBQUUsSUFBSTtRQUNaO0VBQ0YsY0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpRUFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIENvcmVNb2R1bGUsXG4gIEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICBIT09LX1JPVVRFLFxuICBWaWV3Q29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRNb2R1bGUgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5tb2R1bGUnO1xuXG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQuY29tcG9uZW50JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZEd1YXJkIH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLmd1YXJkJztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZE5hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLW5hdmlnYXRpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBSZXBvcnREYXNoYm9hcmRMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1JlcG9ydERhc2hib2FyZExpc3RDb21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBDb250ZXh0RGFzaGJvYXJkTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZS5mb3JDaGlsZChbXG4gICAgICB7XG4gICAgICAgIHBhdGg6ICdyZXBvcnRzJyxcbiAgICAgICAgY29tcG9uZW50OiBSZXBvcnREYXNoYm9hcmRMaXN0Q29tcG9uZW50XG4gICAgICB9XG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgUmVwb3J0RGFzaGJvYXJkR3VhcmQsXG4gICAgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgUmVwb3J0RGFzaGJvYXJkU2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtSZXBvcnREYXNoYm9hcmRHdWFyZF0sXG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuUmVwb3J0XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSZXBvcnREYXNoYm9hcmRNb2R1bGUge31cbiJdfQ==