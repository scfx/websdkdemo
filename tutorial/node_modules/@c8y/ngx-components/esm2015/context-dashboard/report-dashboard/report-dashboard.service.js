import { Injectable } from '@angular/core';
import { InventoryService, QueriesUtil } from '@c8y/client';
import { NavigatorNode, NavigatorService } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class ReportDashboardService {
    constructor(inventoryService, navigatorService) {
        this.inventoryService = inventoryService;
        this.navigatorService = navigatorService;
        this.queriesUtil = new QueriesUtil();
    }
    listReports(options = {}) {
        let query = { __has: 'c8y_Report' };
        if (options.filter) {
            query = this.queriesUtil.addAndFilter(query, options.filter);
        }
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            pageSize: options.pageSize || 50,
            withTotalPages: true
        };
        return this.inventoryService.list(filters);
    }
    createReport(reportCfg) {
        const report = {};
        Object.assign(report, reportCfg);
        Object.assign(report, { c8y_Report: {} });
        return this.inventoryService.create(report);
    }
    addReportNavigatorNode(report) {
        const node = new NavigatorNode({
            label: report.name,
            path: `reports/${report.id}`,
            icon: report.icon,
            priority: report.priority
        });
        this.navigatorService.add(node);
    }
    removeNavigatorNode(report) {
        this.navigatorService.state.forEach(node => {
            if (node.path === `reports/${report.id}`) {
                this.navigatorService.remove(node);
                return;
            }
        });
    }
}
ReportDashboardService.ɵfac = function ReportDashboardService_Factory(t) { return new (t || ReportDashboardService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.NavigatorService)); };
ReportDashboardService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardService, factory: ReportDashboardService.ɵfac });
ReportDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: NavigatorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc2.NavigatorService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUd0RSxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBQ0UsWUFDVSxnQkFBa0MsRUFDbEMsZ0JBQWtDO0FBQzNDLFFBRlMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFDOUMsUUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXLENBQUMsVUFBK0MsRUFBRTtBQUMvRCxRQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDO0FBQ3hDLFFBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQ3hCLFlBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkUsU0FBSztBQUNMLFFBQUksTUFBTSxPQUFPLEdBQUc7QUFDcEIsWUFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQy9DLFlBQU0sUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRTtBQUN0QyxZQUFNLGNBQWMsRUFBRSxJQUFJO0FBQzFCLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9DLElBQUUsQ0FBQztBQUNILElBQ0UsWUFBWSxDQUFDLFNBQWtDO0FBQ2pELFFBQUksTUFBTSxNQUFNLEdBQTRCLEVBQUUsQ0FBQztBQUMvQyxRQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLFFBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QyxRQUFJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFDSCxJQUNFLHNCQUFzQixDQUFDLE1BQXNCO0FBQUksUUFDL0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUM7QUFDbkMsWUFBTSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUk7QUFDeEIsWUFBTSxJQUFJLEVBQUUsV0FBVyxNQUFNLENBQUMsRUFBRSxFQUFFO0FBQ2xDLFlBQU0sSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ3ZCLFlBQU0sUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO0FBQy9CLFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUNILElBQ0UsbUJBQW1CLENBQUMsTUFBc0I7QUFDNUMsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMvQyxZQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUNoRCxnQkFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLGdCQUFRLE9BQU87QUFDZixhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNIO2tEQWhEQyxVQUFVO2dKQUNUO0FBQUM7QUFDVSxZQUxZLGdCQUFnQjtBQUFJLFlBQ3JCLGdCQUFnQjtBQUFHOzs7b0hBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlLCBRdWVyaWVzVXRpbCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvclNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9ydERhc2hib2FyZFNlcnZpY2Uge1xuICBwcml2YXRlIHF1ZXJpZXNVdGlsOiBRdWVyaWVzVXRpbDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgbmF2aWdhdG9yU2VydmljZTogTmF2aWdhdG9yU2VydmljZVxuICApIHtcbiAgICB0aGlzLnF1ZXJpZXNVdGlsID0gbmV3IFF1ZXJpZXNVdGlsKCk7XG4gIH1cblxuICBsaXN0UmVwb3J0cyhvcHRpb25zOiB7IGZpbHRlcj86IGFueTsgcGFnZVNpemU/OiBudW1iZXIgfSA9IHt9KSB7XG4gICAgbGV0IHF1ZXJ5ID0geyBfX2hhczogJ2M4eV9SZXBvcnQnIH07XG4gICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICBxdWVyeSA9IHRoaXMucXVlcmllc1V0aWwuYWRkQW5kRmlsdGVyKHF1ZXJ5LCBvcHRpb25zLmZpbHRlcik7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAgICBxdWVyeTogdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KHF1ZXJ5KSxcbiAgICAgIHBhZ2VTaXplOiBvcHRpb25zLnBhZ2VTaXplIHx8IDUwLFxuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdChmaWx0ZXJzKTtcbiAgfVxuXG4gIGNyZWF0ZVJlcG9ydChyZXBvcnRDZmc6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+KSB7XG4gICAgY29uc3QgcmVwb3J0OiBQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0PiA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ocmVwb3J0LCByZXBvcnRDZmcpO1xuICAgIE9iamVjdC5hc3NpZ24ocmVwb3J0LCB7IGM4eV9SZXBvcnQ6IHt9IH0pO1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeVNlcnZpY2UuY3JlYXRlKHJlcG9ydCk7XG4gIH1cblxuICBhZGRSZXBvcnROYXZpZ2F0b3JOb2RlKHJlcG9ydDogSU1hbmFnZWRPYmplY3QpOiB2b2lkIHtcbiAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgbGFiZWw6IHJlcG9ydC5uYW1lLFxuICAgICAgcGF0aDogYHJlcG9ydHMvJHtyZXBvcnQuaWR9YCxcbiAgICAgIGljb246IHJlcG9ydC5pY29uLFxuICAgICAgcHJpb3JpdHk6IHJlcG9ydC5wcmlvcml0eVxuICAgIH0pO1xuICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5hZGQobm9kZSk7XG4gIH1cblxuICByZW1vdmVOYXZpZ2F0b3JOb2RlKHJlcG9ydDogSU1hbmFnZWRPYmplY3QpIHtcbiAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2Uuc3RhdGUuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGlmIChub2RlLnBhdGggPT09IGByZXBvcnRzLyR7cmVwb3J0LmlkfWApIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLnJlbW92ZShub2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=