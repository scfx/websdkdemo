import { Injectable } from '@angular/core';
import { ContextDashboardType } from '../context-dashboard.model';
import { ContextDashboardService } from '../context-dashboard.service';
import { tap } from 'rxjs/operators';
import { from, of } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../context-dashboard.service';
export class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService.create(dashboardCfg, undefined, `report_${reportId}`).then(() => true);
    }
}
ReportDashboardGuard.ɵfac = function ReportDashboardGuard_Factory(t) { return new (t || ReportDashboardGuard)(ɵngcc0.ɵɵinject(ɵngcc1.ContextDashboardService)); };
ReportDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardGuard, factory: ReportDashboardGuard.ɵfac });
ReportDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ContextDashboardService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5ndWFyZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFHaEMsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQUFFLFlBQW9CLHVCQUFnRDtBQUFJLFFBQXBELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7QUFBQyxJQUFFLENBQUM7QUFDMUUsSUFDRSxXQUFXLENBQUMsS0FBNkI7QUFDM0MsUUFBSSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDekUsUUFBSSxPQUFPLElBQUksQ0FDVCxJQUFJLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDckYsQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ2hCLFlBQVEsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUNyRCxnQkFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQztBQUNwRCxnQkFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JCLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UseUJBQXlCLENBQUMsUUFBUTtBQUNwQyxRQUFJLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUM1QixRQUFJLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLFVBQVUsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0csSUFBRSxDQUFDO0FBQ0g7Z0RBckJDLFVBQVU7MElBQ1Q7QUFBQztBQUNVLFlBTkosdUJBQXVCO0FBQUc7Ozt3RkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkVHlwZSB9IGZyb20gJy4uL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwb3J0RGFzaGJvYXJkR3VhcmQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSkge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IHJlcG9ydElkID0gcm91dGUuZGF0YS5jb250ZXh0RGF0YSAmJiByb3V0ZS5kYXRhLmNvbnRleHREYXRhLmlkO1xuICAgIHJldHVybiBmcm9tKFxuICAgICAgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5hY3RpdmF0ZURhc2hib2FyZHMocm91dGUsIFtDb250ZXh0RGFzaGJvYXJkVHlwZS5OYW1lZF0pXG4gICAgKS5waXBlKFxuICAgICAgdGFwKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgID8gdGhpcy5jcmVhdGVEYXNoYm9hcmRJZk5vdEV4aXN0KHJlcG9ydElkKVxuICAgICAgICAgIDogb2YodHJ1ZSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBjcmVhdGVEYXNoYm9hcmRJZk5vdEV4aXN0KHJlcG9ydElkKSB7XG4gICAgY29uc3QgZGFzaGJvYXJkQ2ZnID0ge307XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UuY3JlYXRlKGRhc2hib2FyZENmZywgdW5kZWZpbmVkLCBgcmVwb3J0XyR7cmVwb3J0SWR9YCkudGhlbigoKSA9PiB0cnVlKTtcbiAgfVxufVxuIl19