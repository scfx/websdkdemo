import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { gettext, ViewContext, Permissions } from '@c8y/ngx-components';
import { Router } from '@angular/router';
import { ContextDashboardService } from './context-dashboard.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DashboardDetailComponent } from './dashboard-detail.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './context-dashboard.service';
import * as ɵngcc3 from 'ngx-bootstrap/modal';
import * as ɵngcc4 from '@c8y/ngx-components';
export class DashboardActionsFactory {
    constructor(router, contextDashboardService, bsModal, permissions) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.permissions = permissions;
    }
    get(activatedRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = !activatedRoute.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            const canEditDashboard = yield this.isEnabled(context);
            return [
                {
                    label: gettext('Add dashboard'),
                    priority: 2500,
                    action: () => this.addDashboard(context),
                    disabled: !canEditDashboard
                }
            ];
        });
    }
    addDashboard(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (context.context === ViewContext.Device) {
                initialState = {
                    deviceType: context.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, context);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended emptys
            }
        });
    }
    isEnabled(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.contextData && context.contextData.id) {
                return ((yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context.contextData)) && [ViewContext.Device, ViewContext.Group].includes(context.context));
            }
            return (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']) &&
                [ViewContext.Device, ViewContext.Group].includes(context.context));
        });
    }
}
DashboardActionsFactory.ɵfac = function DashboardActionsFactory_Factory(t) { return new (t || DashboardActionsFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.ContextDashboardService), ɵngcc0.ɵɵinject(ɵngcc3.BsModalService), ɵngcc0.ɵɵinject(ɵngcc4.Permissions)); };
DashboardActionsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DashboardActionsFactory, factory: DashboardActionsFactory.ɵfac });
DashboardActionsFactory.ctorParameters = () => [
    { type: Router },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: Permissions }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardActionsFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.ContextDashboardService }, { type: ɵngcc3.BsModalService }, { type: ɵngcc4.Permissions }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXlCLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0YsT0FBTyxFQUFrQixNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7OztBQUl4RSxNQUFNLE9BQU8sdUJBQXVCO0FBQUcsSUFDckMsWUFDVSxNQUFjLEVBQ2QsdUJBQWdELEVBQ2hELE9BQXVCLEVBQ3ZCLFdBQXdCO0FBQ2pDLFFBSlMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2YsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLFFBQ2pELFlBQU8sR0FBUCxPQUFPLENBQWdCO0FBQUMsUUFDeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7QUFDcEMsSUFBSyxDQUFDO0FBQ04sSUFDUSxHQUFHLENBQUMsY0FBOEI7QUFBSTtBQUV2QixZQURuQixNQUFNLE9BQU8sR0FDWCxDQUFDLGNBQWMsQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUNwRSxnQkFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJO0FBQ3RDLGdCQUFRLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDOUMsWUFBSSxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzRCxZQUFJLE9BQU87QUFDWCxnQkFBTTtBQUNOLG9CQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3ZDLG9CQUFRLFFBQVEsRUFBRSxJQUFJO0FBQ3RCLG9CQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUNoRCxvQkFBUSxRQUFRLEVBQUUsQ0FBQyxnQkFBZ0I7QUFDbkMsaUJBQU87QUFDUCxhQUFLLENBQUM7QUFDTixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDUSxZQUFZLENBQUMsT0FBTztBQUM1QjtBQUVlLFlBRlgsSUFBSSxZQUFvQyxDQUFDO0FBQzdDLFlBQ0ksSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxNQUFNLEVBQUU7QUFDaEQsZ0JBQU0sWUFBWSxHQUFHO0FBQ3JCLG9CQUFRLFVBQVUsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUk7QUFDNUMsaUJBQU8sQ0FBQztBQUNSLGFBQUs7QUFDTCxZQUNJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFO0FBQzlELGdCQUFNLEtBQUssRUFBRSxVQUFVO0FBQ3ZCLGdCQUFNLFlBQVk7QUFDbEIsZ0JBQU0sbUJBQW1CLEVBQUUsSUFBSTtBQUMvQixhQUFLLENBQUMsQ0FBQyxPQUFtQyxDQUFDO0FBQzNDLFlBQUksSUFBSTtBQUNSLGdCQUFNLE1BQU0sWUFBWSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM5QyxnQkFBTSxNQUFNLFdBQVcsR0FBa0MsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUMxRixZQUFZLEVBQ1osT0FBTyxDQUNSLENBQUM7QUFDUixnQkFBTSxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxRSxnQkFBTSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEIsYUFBSztBQUFDLFlBQUEsT0FBTyxFQUFFLEVBQUU7QUFDakIsZ0JBQU0sa0JBQWtCO0FBQ3hCLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDZ0IsU0FBUyxDQUFDLE9BQU87QUFDakM7QUFDSyxZQURELElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRTtBQUN2RCxnQkFBTSxPQUFPLENBQ0wsQ0FBQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUM3QixDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixDQUFDLEVBQ2pELE9BQU8sQ0FBQyxXQUFXLENBQ3BCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQ3hFLENBQUM7QUFDUixhQUFLO0FBQ0wsWUFBSSxPQUFPLENBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3BGLGdCQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDbEUsQ0FBQztBQUNOLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDttREFsRUMsVUFBVTttSkFDVDtBQUFDO0FBQWlELFlBUDNCLE1BQU07QUFBSSxZQUMxQix1QkFBdUI7QUFBSSxZQUMzQixjQUFjO0FBQUksWUFIMkIsV0FBVztBQUFHOzs7Z0xBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uRmFjdG9yeSwgZ2V0dGV4dCwgVmlld0NvbnRleHQsIFBlcm1pc3Npb25zIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBEYXNoYm9hcmREZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2Rhc2hib2FyZC1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRBY3Rpb25zRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbDogQnNNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnNcbiAgKSB7fVxuXG4gIGFzeW5jIGdldChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiBQcm9taXNlPEFjdGlvbltdPiB7XG4gICAgY29uc3QgY29udGV4dCA9XG4gICAgICAhYWN0aXZhdGVkUm91dGUucGFyZW50IHx8IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmF0ZWRSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcbiAgICBjb25zdCBjYW5FZGl0RGFzaGJvYXJkID0gYXdhaXQgdGhpcy5pc0VuYWJsZWQoY29udGV4dCk7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ0FkZCBkYXNoYm9hcmQnKSxcbiAgICAgICAgcHJpb3JpdHk6IDI1MDAsXG4gICAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5hZGREYXNoYm9hcmQoY29udGV4dCksXG4gICAgICAgIGRpc2FibGVkOiAhY2FuRWRpdERhc2hib2FyZFxuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBhc3luYyBhZGREYXNoYm9hcmQoY29udGV4dCkge1xuICAgIGxldCBpbml0aWFsU3RhdGU6IHsgZGV2aWNlVHlwZTogc3RyaW5nIH07XG5cbiAgICBpZiAoY29udGV4dC5jb250ZXh0ID09PSBWaWV3Q29udGV4dC5EZXZpY2UpIHtcbiAgICAgIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgICAgZGV2aWNlVHlwZTogY29udGV4dC5jb250ZXh0RGF0YS50eXBlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGFsID0gdGhpcy5ic01vZGFsLnNob3coRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50LCB7XG4gICAgICBjbGFzczogJ21vZGFsLWxnJyxcbiAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IHRydWVcbiAgICB9KS5jb250ZW50IGFzIERhc2hib2FyZERldGFpbENvbXBvbmVudDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGFzaGJvYXJkQ2ZnID0gYXdhaXQgbW9kYWwucmVzdWx0O1xuICAgICAgY29uc3QgZGFzaGJvYXJkTU86IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0ID0gYXdhaXQgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5jcmVhdGUoXG4gICAgICAgIGRhc2hib2FyZENmZyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIGF3YWl0IHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UubmF2aWdhdGVUb0Rhc2hib2FyZChkYXNoYm9hcmRNTyk7XG4gICAgICBtb2RhbC5jbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAvLyBpbnRlbmRlZCBlbXB0eXNcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGlzRW5hYmxlZChjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQuY29udGV4dERhdGEgJiYgY29udGV4dC5jb250ZXh0RGF0YS5pZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGF3YWl0IHRoaXMucGVybWlzc2lvbnMuY2FuRWRpdChcbiAgICAgICAgICBbJ1JPTEVfSU5WRU5UT1JZX0FETUlOJywgJ1JPTEVfSU5WRU5UT1JZX0NSRUFURSddLFxuICAgICAgICAgIGNvbnRleHQuY29udGV4dERhdGFcbiAgICAgICAgKSkgJiYgW1ZpZXdDb250ZXh0LkRldmljZSwgVmlld0NvbnRleHQuR3JvdXBdLmluY2x1ZGVzKGNvbnRleHQuY29udGV4dClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnBlcm1pc3Npb25zLmhhc0FueVJvbGUoWydST0xFX0lOVkVOVE9SWV9BRE1JTicsICdST0xFX0lOVkVOVE9SWV9DUkVBVEUnXSkgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhjb250ZXh0LmNvbnRleHQpXG4gICAgKTtcbiAgfVxufVxuIl19