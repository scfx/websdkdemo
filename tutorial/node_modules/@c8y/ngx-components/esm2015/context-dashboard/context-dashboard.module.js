import { NgModule } from '@angular/core';
import { CoreModule, HOOK_ACTION, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AppearanceSettingsComponent } from './appearance-settings.component';
import { ContextDashboardComponent } from './context-dashboard.component';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardActionsFactory } from './dashboard-actions.factory';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { DeviceDashboardGuard } from './device-dashboard.guard';
import { GroupDashboardGuard } from './group-dashboard.guard';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetPreviewComponent } from './widget-preview.component';
import { WidgetService } from './widget.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/dropdown';
const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
const ɵ0 = defaultConfig;
export class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                    multi: true
                },
                {
                    provide: HOOK_ACTION,
                    useClass: DashboardActionsFactory,
                    multi: true
                }
            ]
        };
    }
}
ContextDashboardModule.ɵfac = function ContextDashboardModule_Factory(t) { return new (t || ContextDashboardModule)(); };
ContextDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ContextDashboardModule });
ContextDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: ɵ0
        }
    ], imports: [[CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextDashboardModule, { declarations: function () { return [AppearanceSettingsComponent,
        ContextDashboardComponent,
        WidgetConfigComponent,
        WidgetPreviewComponent,
        DashboardDetailComponent]; }, imports: function () { return [CoreModule, TooltipModule, PopoverModule, ɵngcc1.BsDropdownModule]; }, exports: function () { return [ContextDashboardComponent, WidgetConfigComponent]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1kYXNoYm9hcmQubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9jb250ZXh0LWRhc2hib2FyZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUEwQix3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzdGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBRWpELE1BQU0sYUFBYSxHQUFHO0FBQ3RCLElBQUUsZUFBZSxFQUFFLElBQUk7QUFDdkIsSUFBRSxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUU7QUFDdkIsUUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xFLElBQUUsQ0FBQztBQUNILElBQUUsTUFBTSxFQUFFO0FBQ1YsUUFBSTtBQUNKLFlBQU0sSUFBSSxFQUFFLHdCQUF3QjtBQUNwQyxZQUFNLFNBQVMsRUFBRSx5QkFBeUI7QUFDMUMsWUFBTSxXQUFXLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztBQUN6QyxZQUFNLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTTtBQUNqQyxTQUFLO0FBQ0wsUUFBSTtBQUNKLFlBQU0sSUFBSSxFQUFFLHdCQUF3QjtBQUNwQyxZQUFNLFNBQVMsRUFBRSx5QkFBeUI7QUFDMUMsWUFBTSxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztBQUN4QyxZQUFNLE9BQU8sRUFBRSxXQUFXLENBQUMsS0FBSztBQUNoQyxTQUFLO0FBQ0wsS0FBRztBQUNILENBQUMsQ0FBQztBQUNGLFdBZ0JnQixhQUFhO0FBSTdCLE1BQU0sT0FBTyxzQkFBc0I7QUFDbkMsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQWlDLEVBQUU7QUFBSSxRQUNuRCxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsc0JBQXNCO0FBQ3RDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHdCQUF3QjtBQUMzQyxvQkFBVSxRQUFRLGtDQUFPLGFBQWEsR0FBSyxNQUFNLENBQUU7QUFDbkQsaUJBQVM7QUFDVCxnQkFBUSx1QkFBdUI7QUFDL0IsZ0JBQVEsb0JBQW9CO0FBQzVCLGdCQUFRLG1CQUFtQjtBQUMzQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxVQUFVO0FBQzdCLG9CQUFVLFFBQVEsRUFBRSxnQ0FBSyxhQUFhLEdBQUssTUFBTSxFQUFHLE1BQU07QUFDMUQsb0JBQVUsS0FBSyxFQUFFLElBQUk7QUFDckIsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxXQUFXO0FBQzlCLG9CQUFVLFFBQVEsRUFBRSx1QkFBdUI7QUFDM0Msb0JBQVUsS0FBSyxFQUFFLElBQUk7QUFDckIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7a0RBNUNDLFFBQVEsU0FBQyxrQkFDUixZQUFZLEVBQUUsc0JBQ1o7MEJBQTJCLHNCQUMzQix5QkFBeUIsc0JBQ3pCO2FBQXFCLHNCQUNyQixzQkFBc0Isc0JBQ3RCO29CQUF3Qjs7S0FDekIsa0JBQ0QsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO1dBQWEsRUFBRTtDQUFhLEVBQUU7U0FBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxrQkFDL0UsT0FBTyxFQUFFLENBQUMseUJBQXlCLEVBQUU7R0FBcUIsQ0FBQyxrQkFDM0QsZUFBZSxFQUFFLENBQUMseUJBQXlCLEVBQUUscUJBQXFCLEVBQUUsd0JBQXdCLENBQUM7ZUFDN0Y7QUFBUyxFQUFFO09BQ1QsYUFBYTtVQUNiLDBCQUNFLE9BQU8sRUFBRTtvQkFBd0IsMEJBQ2pDO09BQVEsSUFBZSxzQkFDeEI7UUFDRixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lPQUNJO0FBQUM7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBIT09LX0FDVElPTiwgSE9PS19ST1VURSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5pbXBvcnQgeyBBcHBlYXJhbmNlU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2FwcGVhcmFuY2Utc2V0dGluZ3MuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkQ29uZmlnLCBDT05URVhUX0RBU0hCT0FSRF9DT05GSUcgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IERhc2hib2FyZEFjdGlvbnNGYWN0b3J5IH0gZnJvbSAnLi9kYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5JztcbmltcG9ydCB7IERhc2hib2FyZERldGFpbENvbXBvbmVudCB9IGZyb20gJy4vZGFzaGJvYXJkLWRldGFpbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlRGFzaGJvYXJkR3VhcmQgfSBmcm9tICcuL2RldmljZS1kYXNoYm9hcmQuZ3VhcmQnO1xuaW1wb3J0IHsgR3JvdXBEYXNoYm9hcmRHdWFyZCB9IGZyb20gJy4vZ3JvdXAtZGFzaGJvYXJkLmd1YXJkJztcbmltcG9ydCB7IFdpZGdldENvbmZpZ0NvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0LWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2lkZ2V0UHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0LXByZXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IFdpZGdldFNlcnZpY2UgfSBmcm9tICcuL3dpZGdldC5zZXJ2aWNlJztcblxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgYWxsb3dGdWxsc2NyZWVuOiB0cnVlLFxuICB3aWRnZXRGaWx0ZXIoeyBkYXRhIH0pIHtcbiAgICByZXR1cm4gIShkYXRhICYmIGRhdGEuc2V0dGluZ3MgJiYgZGF0YS5zZXR0aW5ncy5ub05ld1dpZGdldHMpO1xuICB9LFxuICByb3V0ZXM6IFtcbiAgICB7XG4gICAgICBwYXRoOiAnZGFzaGJvYXJkLzpkYXNoYm9hcmRJZCcsXG4gICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICBjYW5BY3RpdmF0ZTogW0RldmljZURhc2hib2FyZEd1YXJkXSxcbiAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZVxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogJ2Rhc2hib2FyZC86ZGFzaGJvYXJkSWQnLFxuICAgICAgY29tcG9uZW50OiBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LFxuICAgICAgY2FuQWN0aXZhdGU6IFtHcm91cERhc2hib2FyZEd1YXJkXSxcbiAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0Lkdyb3VwXG4gICAgfVxuICBdXG59O1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBBcHBlYXJhbmNlU2V0dGluZ3NDb21wb25lbnQsXG4gICAgQ29udGV4dERhc2hib2FyZENvbXBvbmVudCxcbiAgICBXaWRnZXRDb25maWdDb21wb25lbnQsXG4gICAgV2lkZ2V0UHJldmlld0NvbXBvbmVudCxcbiAgICBEYXNoYm9hcmREZXRhaWxDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIFRvb2x0aXBNb2R1bGUsIFBvcG92ZXJNb2R1bGUsIEJzRHJvcGRvd25Nb2R1bGUuZm9yUm9vdCgpXSxcbiAgZXhwb3J0czogW0NvbnRleHREYXNoYm9hcmRDb21wb25lbnQsIFdpZGdldENvbmZpZ0NvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0NvbnRleHREYXNoYm9hcmRDb21wb25lbnQsIFdpZGdldENvbmZpZ0NvbXBvbmVudCwgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgV2lkZ2V0U2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBDT05URVhUX0RBU0hCT0FSRF9DT05GSUcsXG4gICAgICB1c2VWYWx1ZTogZGVmYXVsdENvbmZpZ1xuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDb250ZXh0RGFzaGJvYXJkTW9kdWxlIHtcbiAgc3RhdGljIGNvbmZpZyhjb25maWc6IENvbnRleHREYXNoYm9hcmRDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q29udGV4dERhc2hib2FyZE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ29udGV4dERhc2hib2FyZE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQ09OVEVYVF9EQVNIQk9BUkRfQ09ORklHLFxuICAgICAgICAgIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9XG4gICAgICAgIH0sXG4gICAgICAgIENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgICAgICBEZXZpY2VEYXNoYm9hcmRHdWFyZCxcbiAgICAgICAgR3JvdXBEYXNoYm9hcmRHdWFyZCxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICAgICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH0ucm91dGVzLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX0FDVElPTixcbiAgICAgICAgICB1c2VDbGFzczogRGFzaGJvYXJkQWN0aW9uc0ZhY3RvcnksXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==