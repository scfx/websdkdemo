import { NgModule } from '@angular/core';
import { CoreModule, HOOK_ROUTE, HOOK_SEARCH } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { SearchBoxComponent } from './search-box.component';
import { SearchResultsComponent } from './search-results.component';
import { SearchGridComponent } from './search-grid.component';
import { AssetSearchService } from './search.service';
const ɵ0 = [
    {
        path: 'assetsearch',
        component: SearchResultsComponent
    }
], ɵ1 = [
    {
        template: SearchBoxComponent
    }
];
export class SearchModule {
}
SearchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
                imports: [CoreModule, DeviceGridModule, BsDropdownModule],
                entryComponents: [SearchResultsComponent, SearchBoxComponent],
                exports: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
                providers: [
                    AssetSearchService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_SEARCH,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlYXJjaC9zZWFyY2gubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFVLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7V0FXdEM7SUFDUjtRQUNFLElBQUksRUFBRSxhQUFhO1FBQ25CLFNBQVMsRUFBRSxzQkFBc0I7S0FDbEM7Q0FDRixPQUtTO0lBQ1I7UUFDRSxRQUFRLEVBQUUsa0JBQWtCO0tBQzdCO0NBQ1U7QUFLbkIsTUFBTSxPQUFPLFlBQVk7OztZQTVCeEIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLHNCQUFzQixFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDO2dCQUMvRSxPQUFPLEVBQUUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUM7Z0JBQ3pELGVBQWUsRUFBRSxDQUFDLHNCQUFzQixFQUFFLGtCQUFrQixDQUFDO2dCQUM3RCxPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQztnQkFDMUUsU0FBUyxFQUFFO29CQUNULGtCQUFrQjtvQkFDbEI7d0JBQ0UsT0FBTyxFQUFFLFVBQVU7d0JBQ25CLFFBQVEsSUFLUDt3QkFDRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsV0FBVzt3QkFDcEIsUUFBUSxJQUlLO3dCQUNiLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgSE9PS19ST1VURSwgSE9PS19TRUFSQ0gsIFNlYXJjaCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgU2VhcmNoQm94Q29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hSZXN1bHRzQ29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0cy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VhcmNoR3JpZENvbXBvbmVudCB9IGZyb20gJy4vc2VhcmNoLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2V0U2VhcmNoU2VydmljZSB9IGZyb20gJy4vc2VhcmNoLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtTZWFyY2hSZXN1bHRzQ29tcG9uZW50LCBTZWFyY2hCb3hDb21wb25lbnQsIFNlYXJjaEdyaWRDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29yZU1vZHVsZSwgRGV2aWNlR3JpZE1vZHVsZSwgQnNEcm9wZG93bk1vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1NlYXJjaFJlc3VsdHNDb21wb25lbnQsIFNlYXJjaEJveENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTZWFyY2hSZXN1bHRzQ29tcG9uZW50LCBTZWFyY2hCb3hDb21wb25lbnQsIFNlYXJjaEdyaWRDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBBc3NldFNlYXJjaFNlcnZpY2UsXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnYXNzZXRzZWFyY2gnLFxuICAgICAgICAgIGNvbXBvbmVudDogU2VhcmNoUmVzdWx0c0NvbXBvbmVudFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfU0VBUkNILFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRlbXBsYXRlOiBTZWFyY2hCb3hDb21wb25lbnRcbiAgICAgICAgfVxuICAgICAgXSBhcyBTZWFyY2hbXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaE1vZHVsZSB7fVxuIl19