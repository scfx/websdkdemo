import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataGridComponent, FilteringActionType, gettext } from '@c8y/ngx-components';
import { SmartGroupsService } from '@c8y/client';
import { AssetSearchService } from './search.service';
import { AssetTypeGridColumn, DeleteAssetsModalComponent, SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
export class SearchGridComponent {
    constructor(searchService, bsModalService, smartGroupsService, subAssetsGridService) {
        this.searchService = searchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading resultsâ€¦');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.searchService.getDefaultPagination();
        this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
    }
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.searchService.getDefaultColumns();
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.searchService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.searchService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        }
    }
    ngOnInit() {
        if (!this.filteringName) {
            this.columns = this.searchService.getDefaultColumns();
        }
        else {
            this.columns = [
                new AssetTypeGridColumn({ sortOrder: 'desc' }),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            if (dataSourceModifier.searchText) {
                response = yield this.searchService.search(dataSourceModifier.searchText, dataSourceModifier.pagination);
            }
            else {
                response = yield this.searchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, undefined);
            }
            const { res, data, paging } = response;
            const filteredData = this.searchService.filterOnlyAssets(data);
            if (paging.currentPage === 1) {
                this.sizeCount = 0;
            }
            this.sizeCount += filteredData.length;
            this.onColumnsChange.emit(dataSourceModifier.columns);
            return {
                res,
                data: filteredData,
                paging,
                filteredSize: this.sizeCount,
                size: undefined
            };
        });
    }
    setActionControls() {
        const actionControls = [];
        const deleteAction = {
            type: "DELETE" /* Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup)
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action, false);
        }
    }
    configChange(config) {
        this.searchService.saveConfig(config);
    }
    onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe((result) => __awaiter(this, void 0, void 0, function* () {
            if (result) {
                yield this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                this.refresh.emit();
            }
        }));
    }
}
SearchGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-search-grid',
                template: "<div class=\"card--grid--fullpage\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onConfigChange)=\"configChange($event)\"\n    class=\"d-contents\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n    <div class=\"c8y-empty-state\">\n      <h1 c8yIcon=\"search\"></h1>\n      <div>\n        <p>\n          <strong>{{ 'No items found.' | translate }}</strong>\n        </p>\n        <small>{{ 'Change your search or filter criteria.' | translate }}</small>\n      </div>\n    </div>\n  </c8y-data-grid>\n</div>\n"
            },] }
];
SearchGridComponent.ctorParameters = () => [
    { type: AssetSearchService },
    { type: BsModalService },
    { type: SmartGroupsService },
    { type: SubAssetsService }
];
SearchGridComponent.propDecorators = {
    parentGroup: [{ type: Input, args: ['parent-group',] }],
    title: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    onColumnsChange: [{ type: Output }],
    searchText: [{ type: Input }],
    filteringName: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,