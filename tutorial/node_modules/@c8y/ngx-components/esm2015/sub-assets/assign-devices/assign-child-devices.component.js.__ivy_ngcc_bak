import { __awaiter } from "tslib";
import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { SubAssetsService } from '../sub-assets.service';
export class AssignChildDevicesComponent {
    constructor(alert, subAssetsService, inventoryService) {
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.inventoryService = inventoryService;
        this.onCancel = new EventEmitter();
        this.refresh = new EventEmitter();
        this.selected = [];
        this.canAssignDevice = false;
        this.pendingStatus = false;
    }
    onEnterKeyDown(event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    }
    onEscapeKeyDown(event) {
        this.onCancel.emit();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setNotIncludedInGroupQuery();
            this.canAssignDevice = yield this.subAssetsService.canAssignDevice({
                id: this.currentGroupId
            });
        });
    }
    setNotIncludedInGroupQuery() {
        const notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    }
    assignDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canAssignDevice === false) {
                return;
            }
            this.pendingStatus = true;
            try {
                yield this.inventoryService.childAssetsBulkAdd(this.selected, this.currentGroupId);
                this.refresh.emit();
                this.alert.success(gettext('Child devices assigned to the group.'));
            }
            catch (error) {
                this.alert.danger(gettext('Could not assign child devices to the group'), error);
            }
            this.pendingStatus = false;
            this.selected = [];
            this.onCancel.emit();
        });
    }
    onSelected(selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    }
}
AssignChildDevicesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-assign-child-devices',
                template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-medium\">\n        {{ 'Assign child devices' | translate }}\n      </h4>\n    </div>\n  </div>\n</div>\n\n<div class=\"d-flex d-col no-align-items fit-h\">\n  <c8y-sub-assets-grid\n    [title]=\"'Select child devices' | translate\"\n    [emptyStateText]=\"'All child devices are already assigned to the group' | translate\"\n    [refresh]=\"refresh\"\n    [actionControls]=\"[]\"\n    [selectable]=\"true\"\n    [parent-group]=\"parentDevice\"\n    [baseQuery]=\"baseQuery\"\n    (itemsSelect)=\"onSelected($event)\"\n    class=\"d-contents\"\n  >\n  </c8y-sub-assets-grid>\n</div>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    (click)=\"onCancel.emit()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    (click)=\"assignDevices()\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    title=\"{{ 'Assign' | translate }}\"\n    [disabled]=\"selected.length === 0 || !canAssignDevice\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n"
            },] }
];
AssignChildDevicesComponent.ctorParameters = () => [
    { type: AlertService },
    { type: SubAssetsService },
    { type: InventoryService }
];
AssignChildDevicesComponent.propDecorators = {
    currentGroupId: [{ type: Input }],
    parentDevice: [{ type: Input }],
    onCancel: [{ type: Output }],
    refresh: [{ type: Input }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWduLWNoaWxkLWRldmljZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy9hc3NpZ24tZGV2aWNlcy9hc3NpZ24tY2hpbGQtZGV2aWNlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBT3pELE1BQU0sT0FBTywyQkFBMkI7SUFXdEMsWUFDVSxLQUFtQixFQUNuQixnQkFBa0MsRUFDbEMsZ0JBQWtDO1FBRmxDLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWGxDLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3BDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRTNDLGFBQVEsR0FBYSxFQUFFLENBQUM7UUFFeEIsb0JBQWUsR0FBWSxLQUFLLENBQUM7UUFDakMsa0JBQWEsR0FBWSxLQUFLLENBQUM7SUFNNUIsQ0FBQztJQUVnRCxjQUFjLENBQUMsS0FBb0I7UUFDckYsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVvRCxlQUFlLENBQUMsS0FBb0I7UUFDdkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUssUUFBUTs7WUFDWixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQztnQkFDakUsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjO2FBQ04sQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7S0FBQTtJQUVELDBCQUEwQjtRQUN4QixNQUFNLHVCQUF1QixHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDO1FBQ2hGLElBQUksQ0FBQyxTQUFTLEdBQUcsdUJBQXVCLENBQUM7SUFDM0MsQ0FBQztJQUVLLGFBQWE7O1lBQ2pCLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxLQUFLLEVBQUU7Z0JBQ2xDLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBRTFCLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ25GLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUM7YUFDckU7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsNkNBQTZDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNsRjtZQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsQ0FBQztLQUFBO0lBRUQsVUFBVSxDQUFDLGtCQUE0QjtRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO0lBQ3JDLENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsNDNDQUFvRDthQUNyRDs7O1lBUlEsWUFBWTtZQUVaLGdCQUFnQjtZQURoQixnQkFBZ0I7Ozs2QkFTdEIsS0FBSzsyQkFDTCxLQUFLO3VCQUNMLE1BQU07c0JBQ04sS0FBSzs2QkFhTCxZQUFZLFNBQUMsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7OEJBTWpELFlBQVksU0FBQyx5QkFBeUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c1NlcnZpY2UgfSBmcm9tICcuLi9zdWItYXNzZXRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hc3NpZ24tY2hpbGQtZGV2aWNlcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9hc3NpZ24tY2hpbGQtZGV2aWNlcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzaWduQ2hpbGREZXZpY2VzQ29tcG9uZW50IHtcbiAgQElucHV0KCkgY3VycmVudEdyb3VwSWQ6IHN0cmluZztcbiAgQElucHV0KCkgcGFyZW50RGV2aWNlOiBJTWFuYWdlZE9iamVjdDtcbiAgQE91dHB1dCgpIG9uQ2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBJbnB1dCgpIHJlZnJlc2ggPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBzZWxlY3RlZDogc3RyaW5nW10gPSBbXTtcbiAgYmFzZVF1ZXJ5OiBhbnk7XG4gIGNhbkFzc2lnbkRldmljZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwZW5kaW5nU3RhdHVzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgc3ViQXNzZXRzU2VydmljZTogU3ViQXNzZXRzU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmtleWRvd24uZW50ZXInLCBbJyRldmVudCddKSBvbkVudGVyS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuYXNzaWduRGV2aWNlcygpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmtleWRvd24uZXNjYXBlJywgWyckZXZlbnQnXSkgb25Fc2NhcGVLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgdGhpcy5vbkNhbmNlbC5lbWl0KCk7XG4gIH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldE5vdEluY2x1ZGVkSW5Hcm91cFF1ZXJ5KCk7XG4gICAgdGhpcy5jYW5Bc3NpZ25EZXZpY2UgPSBhd2FpdCB0aGlzLnN1YkFzc2V0c1NlcnZpY2UuY2FuQXNzaWduRGV2aWNlKHtcbiAgICAgIGlkOiB0aGlzLmN1cnJlbnRHcm91cElkXG4gICAgfSBhcyBJTWFuYWdlZE9iamVjdCk7XG4gIH1cblxuICBzZXROb3RJbmNsdWRlZEluR3JvdXBRdWVyeSgpIHtcbiAgICBjb25zdCBub3RJbmNsdWRlZEluR3JvdXBRdWVyeSA9IHsgX19ub3Q6IHsgX19ieWdyb3VwaWQ6IHRoaXMuY3VycmVudEdyb3VwSWQgfSB9O1xuICAgIHRoaXMuYmFzZVF1ZXJ5ID0gbm90SW5jbHVkZWRJbkdyb3VwUXVlcnk7XG4gIH1cblxuICBhc3luYyBhc3NpZ25EZXZpY2VzKCkge1xuICAgIGlmICh0aGlzLmNhbkFzc2lnbkRldmljZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nU3RhdHVzID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuY2hpbGRBc3NldHNCdWxrQWRkKHRoaXMuc2VsZWN0ZWQsIHRoaXMuY3VycmVudEdyb3VwSWQpO1xuICAgICAgdGhpcy5yZWZyZXNoLmVtaXQoKTtcbiAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhnZXR0ZXh0KCdDaGlsZCBkZXZpY2VzIGFzc2lnbmVkIHRvIHRoZSBncm91cC4nKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoJ0NvdWxkIG5vdCBhc3NpZ24gY2hpbGQgZGV2aWNlcyB0byB0aGUgZ3JvdXAnKSwgZXJyb3IpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdTdGF0dXMgPSBmYWxzZTtcbiAgICB0aGlzLnNlbGVjdGVkID0gW107XG4gICAgdGhpcy5vbkNhbmNlbC5lbWl0KCk7XG4gIH1cblxuICBvblNlbGVjdGVkKHNlbGVjdGVkRGV2aWNlc0lEczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWREZXZpY2VzSURzO1xuICB9XG59XG4iXX0=