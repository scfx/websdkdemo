import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { GroupFragment } from '@c8y/ngx-components/assets-navigator';
export class AddGroupService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
    }
    createGroupAndAssignDevices(groupForm, groupContextId, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            let group;
            const { name, description } = groupForm;
            const newGroupMO = this.getGroupMO(name, description, groupContextId);
            if (groupContextId) {
                group = (yield this.inventoryService.childAssetsCreate(newGroupMO, groupContextId)).data;
            }
            else {
                group = (yield this.inventoryService.create(newGroupMO)).data;
            }
            if (selectedDevices.length > 0) {
                yield this.assignDevices(group.id, selectedDevices);
            }
            return group;
        });
    }
    getGroupMO(name, description = '', groupContextId) {
        const group = {
            type: this.getGroupType(groupContextId),
            [this.GROUP_FRAGMENT_TYPE]: {},
            name,
            c8y_Notes: description
        };
        return group;
    }
    getGroupType(groupContextId) {
        return groupContextId ? GroupFragment.subGroupType : GroupFragment.groupType;
    }
    assignDevices(id, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            selectedDevices.forEach(moId => {
                promises.push(this.inventoryService.childAssetsAdd(moId, id));
            });
            return yield Promise.all(promises);
        });
    }
}
AddGroupService.decorators = [
    { type: Injectable }
];
AddGroupService.ctorParameters = () => [
    { type: InventoryService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zdWItYXNzZXRzL2FkZC1ncm91cC9hZGQtZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQStCLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUdyRSxNQUFNLE9BQU8sZUFBZTtJQUcxQixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUY5Qyx3QkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztJQUVPLENBQUM7SUFFcEQsMkJBQTJCLENBQy9CLFNBQW9CLEVBQ3BCLGNBQStCLEVBQy9CLGVBQXlCOztZQUV6QixJQUFJLEtBQW1DLENBQUM7WUFDeEMsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUM7WUFDeEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBRXRFLElBQUksY0FBYyxFQUFFO2dCQUNsQixLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDMUY7aUJBQU07Z0JBQ0wsS0FBSyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2FBQy9EO1lBRUQsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDOUIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7YUFDckQ7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7S0FBQTtJQUVPLFVBQVUsQ0FDaEIsSUFBWSxFQUNaLGNBQXNCLEVBQUUsRUFDeEIsY0FBK0I7UUFFL0IsTUFBTSxLQUFLLEdBQUc7WUFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7WUFDdkMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUk7WUFDSixTQUFTLEVBQUUsV0FBVztTQUN2QixDQUFDO1FBRUYsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sWUFBWSxDQUNsQixjQUErQjtRQUUvQixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUMvRSxDQUFDO0lBRWEsYUFBYSxDQUFDLEVBQW1CLEVBQUUsZUFBeUI7O1lBQ3hFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUVwQixlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxDQUFDO0tBQUE7OztZQXpERixVQUFVOzs7WUFKMkIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUlkZW50aWZpZWQsIElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgR3JvdXBGb3JtIH0gZnJvbSAnLi9hZGQtZ3JvdXAubW9kZWwnO1xuaW1wb3J0IHsgR3JvdXBGcmFnbWVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBZGRHcm91cFNlcnZpY2Uge1xuICBwcml2YXRlIEdST1VQX0ZSQUdNRU5UX1RZUEUgPSAnYzh5X0lzRGV2aWNlR3JvdXAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSkge31cblxuICBhc3luYyBjcmVhdGVHcm91cEFuZEFzc2lnbkRldmljZXMoXG4gICAgZ3JvdXBGb3JtOiBHcm91cEZvcm0sXG4gICAgZ3JvdXBDb250ZXh0SWQ6IHN0cmluZyB8IG51bWJlcixcbiAgICBzZWxlY3RlZERldmljZXM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8SU1hbmFnZWRPYmplY3QgfCBJSWRlbnRpZmllZD4ge1xuICAgIGxldCBncm91cDogSU1hbmFnZWRPYmplY3QgfCBJSWRlbnRpZmllZDtcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uIH0gPSBncm91cEZvcm07XG4gICAgY29uc3QgbmV3R3JvdXBNTyA9IHRoaXMuZ2V0R3JvdXBNTyhuYW1lLCBkZXNjcmlwdGlvbiwgZ3JvdXBDb250ZXh0SWQpO1xuXG4gICAgaWYgKGdyb3VwQ29udGV4dElkKSB7XG4gICAgICBncm91cCA9IChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuY2hpbGRBc3NldHNDcmVhdGUobmV3R3JvdXBNTywgZ3JvdXBDb250ZXh0SWQpKS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuY3JlYXRlKG5ld0dyb3VwTU8pKS5kYXRhO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZERldmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy5hc3NpZ25EZXZpY2VzKGdyb3VwLmlkLCBzZWxlY3RlZERldmljZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JvdXBNTyhcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyA9ICcnLFxuICAgIGdyb3VwQ29udGV4dElkOiBzdHJpbmcgfCBudW1iZXJcbiAgKTogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4ge1xuICAgIGNvbnN0IGdyb3VwID0ge1xuICAgICAgdHlwZTogdGhpcy5nZXRHcm91cFR5cGUoZ3JvdXBDb250ZXh0SWQpLFxuICAgICAgW3RoaXMuR1JPVVBfRlJBR01FTlRfVFlQRV06IHt9LFxuICAgICAgbmFtZSxcbiAgICAgIGM4eV9Ob3RlczogZGVzY3JpcHRpb25cbiAgICB9O1xuXG4gICAgcmV0dXJuIGdyb3VwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHcm91cFR5cGUoXG4gICAgZ3JvdXBDb250ZXh0SWQ6IHN0cmluZyB8IG51bWJlclxuICApOiBHcm91cEZyYWdtZW50LnN1Ykdyb3VwVHlwZSB8IEdyb3VwRnJhZ21lbnQuZ3JvdXBUeXBlIHtcbiAgICByZXR1cm4gZ3JvdXBDb250ZXh0SWQgPyBHcm91cEZyYWdtZW50LnN1Ykdyb3VwVHlwZSA6IEdyb3VwRnJhZ21lbnQuZ3JvdXBUeXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhc3NpZ25EZXZpY2VzKGlkOiBzdHJpbmcgfCBudW1iZXIsIHNlbGVjdGVkRGV2aWNlczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuXG4gICAgc2VsZWN0ZWREZXZpY2VzLmZvckVhY2gobW9JZCA9PiB7XG4gICAgICBwcm9taXNlcy5wdXNoKHRoaXMuaW52ZW50b3J5U2VydmljZS5jaGlsZEFzc2V0c0FkZChtb0lkLCBpZCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxufVxuIl19