import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { gettext, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@c8y/ngx-components';

const _c0 = ["modalRef"];
export class UnassignModalComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign asset');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign asset "{{name}}". Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.complete();
    }
}
UnassignModalComponent.ɵfac = function UnassignModalComponent_Factory(t) { return new (t || UnassignModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService)); };
UnassignModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UnassignModalComponent, selectors: [["c8y-unassign-modal"]], viewQuery: function UnassignModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRef = _t.first);
    } }, inputs: { asset: "asset" }, decls: 5, vars: 6, consts: [[3, "title", "status", "labels"], ["modalRef", ""]], template: function UnassignModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-confirm-modal", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("status", ctx.status)("labels", ctx.labels);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx.message));
    } }, directives: [ɵngcc2.ConfirmModalComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
UnassignModalComponent.ctorParameters = () => [
    { type: TranslateService }
];
UnassignModalComponent.propDecorators = {
    asset: [{ type: Input }],
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnassignModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-unassign-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, { asset: [{
            type: Input
        }], modalRef: [{
            type: ViewChild,
            args: ['modalRef', { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zdWItYXNzZXRzL3VuYXNzaWduLWFzc2V0cy1tb2RhbC91bmFzc2lnbi1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBRUwsT0FBTyxFQUVQLE1BQU0sRUFFUCxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQUsvQixNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBUUUsWUFBb0IsZ0JBQWtDO0FBQUksUUFBdEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBTHZELGlCQUFZLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7QUFDakQsUUFBRSxXQUFNLEdBQWdCLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDL0UsUUFBRSxVQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDcEMsUUFBRSxXQUFNLEdBQWUsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUN0QyxJQUMyRCxDQUFDO0FBQzVELElBQ0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMxQyxPQUFPLENBQUMscUVBQXFFLENBQUMsRUFDOUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FDMUIsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ1EsZUFBZTtBQUN2QjtBQUVrQixZQUZkLElBQUk7QUFDUixnQkFBTSxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2pDLGdCQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixhQUFLO0FBQUMsWUFBQSxPQUFPLEtBQUssRUFBRTtBQUNwQixnQkFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDdkIsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFDSCxJQUNFLFNBQVM7QUFDWCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7a0RBdkNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsb0JBQW9CLGtCQUM5QjtnSUFBOEMsY0FDL0M7Ozs7Ozs7Ozs7Ozs7Ozs7MkdBQ0k7QUFBQztBQUNVLFlBUFAsZ0JBQWdCO0FBQUc7QUFBRztBQUNkLG9CQU1kLEtBQUs7QUFBSyx1QkFDVixTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUFNOzs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQge1xuICBDb25maXJtTW9kYWxDb21wb25lbnQsXG4gIGdldHRleHQsXG4gIE1vZGFsTGFiZWxzLFxuICBTdGF0dXMsXG4gIFN0YXR1c1R5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdW5hc3NpZ24tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVuYXNzaWduTW9kYWxDb21wb25lbnQge1xuICBASW5wdXQoKSBhc3NldDogSU1hbmFnZWRPYmplY3Q7XG4gIEBWaWV3Q2hpbGQoJ21vZGFsUmVmJywgeyBzdGF0aWM6IGZhbHNlIH0pIG1vZGFsUmVmOiBDb25maXJtTW9kYWxDb21wb25lbnQ7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY2xvc2VTdWJqZWN0OiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcbiAgbGFiZWxzOiBNb2RhbExhYmVscyA9IHsgb2s6IGdldHRleHQoJ1VuYXNzaWduJyksIGNhbmNlbDogZ2V0dGV4dCgnQ2FuY2VsJykgfTtcbiAgdGl0bGUgPSBnZXR0ZXh0KCdVbmFzc2lnbiBhc3NldCcpO1xuICBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuV0FSTklORztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIHVuYXNzaWduIGFzc2V0IFwie3tuYW1lfX1cIi4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nKSxcbiAgICAgIHsgbmFtZTogdGhpcy5hc3NldC5uYW1lIH1cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsUmVmLnJlc3VsdDtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRGlzbWlzcygpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dCh0cnVlKTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgb25EaXNtaXNzKCkge1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0LmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==