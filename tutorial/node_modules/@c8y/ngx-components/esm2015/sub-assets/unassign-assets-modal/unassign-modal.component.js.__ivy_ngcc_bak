import { __awaiter } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { gettext, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
export class UnassignModalComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign asset');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign asset "{{name}}". Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.complete();
    }
}
UnassignModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-unassign-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
            },] }
];
UnassignModalComponent.ctorParameters = () => [
    { type: TranslateService }
];
UnassignModalComponent.propDecorators = {
    asset: [{ type: Input }],
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy91bmFzc2lnbi1hc3NldHMtbW9kYWwvdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUVMLE9BQU8sRUFFUCxNQUFNLEVBRVAsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSy9CLE1BQU0sT0FBTyxzQkFBc0I7SUFTakMsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMdEQsaUJBQVksR0FBcUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMvQyxXQUFNLEdBQWdCLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDN0UsVUFBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLFdBQU0sR0FBZSxNQUFNLENBQUMsT0FBTyxDQUFDO0lBRXFCLENBQUM7SUFFMUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDMUMsT0FBTyxDQUFDLHFFQUFxRSxDQUFDLEVBQzlFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUssZUFBZTs7WUFDbkIsSUFBSTtnQkFDRixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEI7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDbEI7UUFDSCxDQUFDO0tBQUE7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7O1lBdENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixxS0FBOEM7YUFDL0M7OztZQUxRLGdCQUFnQjs7O29CQU90QixLQUFLO3VCQUNMLFNBQVMsU0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7XG4gIENvbmZpcm1Nb2RhbENvbXBvbmVudCxcbiAgZ2V0dGV4dCxcbiAgTW9kYWxMYWJlbHMsXG4gIFN0YXR1cyxcbiAgU3RhdHVzVHlwZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS11bmFzc2lnbi1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi91bmFzc2lnbi1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVW5hc3NpZ25Nb2RhbENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGFzc2V0OiBJTWFuYWdlZE9iamVjdDtcbiAgQFZpZXdDaGlsZCgnbW9kYWxSZWYnLCB7IHN0YXRpYzogZmFsc2UgfSkgbW9kYWxSZWY6IENvbmZpcm1Nb2RhbENvbXBvbmVudDtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBjbG9zZVN1YmplY3Q6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdCgpO1xuICBsYWJlbHM6IE1vZGFsTGFiZWxzID0geyBvazogZ2V0dGV4dCgnVW5hc3NpZ24nKSwgY2FuY2VsOiBnZXR0ZXh0KCdDYW5jZWwnKSB9O1xuICB0aXRsZSA9IGdldHRleHQoJ1VuYXNzaWduIGFzc2V0Jyk7XG4gIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5XQVJOSU5HO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcbiAgICAgIGdldHRleHQoJ1lvdSBhcmUgYWJvdXQgdG8gdW5hc3NpZ24gYXNzZXQgXCJ7e25hbWV9fVwiLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpLFxuICAgICAgeyBuYW1lOiB0aGlzLmFzc2V0Lm5hbWUgfVxuICAgICk7XG4gIH1cblxuICBhc3luYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWxSZWYucmVzdWx0O1xuICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMub25EaXNtaXNzKCk7XG4gICAgfVxuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5uZXh0KHRydWUpO1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0LmNvbXBsZXRlKCk7XG4gIH1cblxuICBvbkRpc21pc3MoKSB7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxufVxuIl19