import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AddGroupModule } from './add-group/add-group.module';
import { AssetTypeCellRendererComponent } from './columns/asset-type.cell-renderer.component';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { GroupInfoComponent } from './group-info.component';
import { GroupsComponent } from './groups.component';
import { SubAssetsGridComponent } from './sub-assets-grid.component';
import { SubAssetsComponent } from './sub-assets.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import { AssignDevicesComponent } from './assign-devices/assign-devices.component';
import { AssignChildDevicesComponent } from './assign-devices/assign-child-devices.component';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
export class SubAssetsModule {
}
SubAssetsModule.ɵfac = function SubAssetsModule_Factory(t) { return new (t || SubAssetsModule)(); };
SubAssetsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SubAssetsModule });
SubAssetsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        SubAssetsService
    ], imports: [[CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SubAssetsComponent,
                    SubAssetsGridComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    GroupInfoComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent,
                    AssignDevicesComponent,
                    AssignChildDevicesComponent
                ],
                imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
                entryComponents: [
                    SubAssetsComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent
                ],
                exports: [],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    SubAssetsService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SubAssetsModule, { declarations: function () { return [SubAssetsComponent,
        SubAssetsGridComponent,
        AssetTypeCellRendererComponent,
        GroupsComponent,
        GroupInfoComponent,
        DeleteAssetsModalComponent,
        UnassignModalComponent,
        AssignDevicesComponent,
        AssignChildDevicesComponent]; }, imports: function () { return [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWFzc2V0cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3N1Yi1hc3NldHMvc3ViLWFzc2V0cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDMUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbkYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saURBQWlELENBQUM7O0FBQzlGLFdBeUJnQjtBQUNoQixJQUFRO0FBQ1IsUUFBVSxPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7QUFDcEMsUUFBVSxJQUFJLEVBQUUsV0FBVztBQUMzQixRQUFVLFFBQVEsRUFBRSxJQUFJO0FBQ3hCLFFBQVUsSUFBSSxFQUFFLGdCQUFnQjtBQUNoQyxRQUFVLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3JDLFFBQVUsU0FBUyxFQUFFLGtCQUFrQjtBQUN2QyxLQUFTO0FBQ1QsSUFBUTtBQUNSLFFBQVUsSUFBSSxFQUFFLE9BQU87QUFDdkIsUUFBVSxTQUFTLEVBQUUsZUFBZTtBQUNwQyxLQUFTO0FBQ1QsQ0FBTztBQU1QLE1BQU0sT0FBTyxlQUFlO0FBQUc7MkNBM0M5QixRQUFRLFNBQUMsa0JBQ1IsWUFBWSxFQUFFO2FBQ1osa0JBQWtCLHNCQUNsQixzQkFBc0I7UUFDdEIsOEJBQThCLHNCQUM5QixlQUFlOztXQUNmLGtCQUFrQjtrQkFDbEI7a0JBQTBCOztLQUMxQjtFQUFzQixzQkFDdEIsc0JBQXNCLHNCQUN0QjtXQUEyQixrQkFDNUIsa0JBQ0QsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBRTtLQUFhLENBQUM7QUFDdEUsZUFBZTtBQUFFLHNCQUNmO1FBQWtCLHNCQUNsQjtvQkFBOEIsc0JBQzlCO2FBQWUsc0JBQ2Y7U0FBMEIsc0JBQzFCO2dCQUFzQixrQkFDdkI7WUFDRCxPQUFPLEVBQUUsRUFBRSxrQkFDWDtFQUFTLEVBQUUsc0JBQ1Q7UUFDRSxPQUFPLEVBQUUsVUFBVTtTQUNuQixRQUFRLElBYVAsMEJBQ0Q7SUFBSyxFQUFFLElBQUk7YUFDWixzQkFDRCxnQkFBZ0Isa0JBQ2pCLGNBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpSkFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgZ2V0dGV4dCwgSE9PS19ST1VURSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQWRkR3JvdXBNb2R1bGUgfSBmcm9tICcuL2FkZC1ncm91cC9hZGQtZ3JvdXAubW9kdWxlJztcbmltcG9ydCB7IEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9kZWxldGUtYXNzZXRzLW1vZGFsL2RlbGV0ZS1hc3NldHMtbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwSW5mb0NvbXBvbmVudCB9IGZyb20gJy4vZ3JvdXAtaW5mby5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBzQ29tcG9uZW50IH0gZnJvbSAnLi9ncm91cHMuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c0dyaWRDb21wb25lbnQgfSBmcm9tICcuL3N1Yi1hc3NldHMtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzQ29tcG9uZW50IH0gZnJvbSAnLi9zdWItYXNzZXRzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNTZXJ2aWNlIH0gZnJvbSAnLi9zdWItYXNzZXRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVW5hc3NpZ25Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vdW5hc3NpZ24tYXNzZXRzLW1vZGFsL3VuYXNzaWduLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBc3NpZ25EZXZpY2VzQ29tcG9uZW50IH0gZnJvbSAnLi9hc3NpZ24tZGV2aWNlcy9hc3NpZ24tZGV2aWNlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXNzaWduQ2hpbGREZXZpY2VzQ29tcG9uZW50IH0gZnJvbSAnLi9hc3NpZ24tZGV2aWNlcy9hc3NpZ24tY2hpbGQtZGV2aWNlcy5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTdWJBc3NldHNDb21wb25lbnQsXG4gICAgU3ViQXNzZXRzR3JpZENvbXBvbmVudCxcbiAgICBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBzQ29tcG9uZW50LFxuICAgIEdyb3VwSW5mb0NvbXBvbmVudCxcbiAgICBEZWxldGVBc3NldHNNb2RhbENvbXBvbmVudCxcbiAgICBVbmFzc2lnbk1vZGFsQ29tcG9uZW50LFxuICAgIEFzc2lnbkRldmljZXNDb21wb25lbnQsXG4gICAgQXNzaWduQ2hpbGREZXZpY2VzQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBEZXZpY2VHcmlkTW9kdWxlLCBBZGRHcm91cE1vZHVsZSwgUG9wb3Zlck1vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBzQ29tcG9uZW50LFxuICAgIERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50LFxuICAgIFVuYXNzaWduTW9kYWxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXAsXG4gICAgICAgICAgcGF0aDogJ3N1YmFzc2V0cycsXG4gICAgICAgICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgICAgICAgaWNvbjogJ2M4eS1ncm91cC1vcGVuJyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU3ViYXNzZXRzJyksXG4gICAgICAgICAgY29tcG9uZW50OiBTdWJBc3NldHNDb21wb25lbnRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdncm91cCcsXG4gICAgICAgICAgY29tcG9uZW50OiBHcm91cHNDb21wb25lbnRcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICBTdWJBc3NldHNTZXJ2aWNlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU3ViQXNzZXRzTW9kdWxlIHt9XG4iXX0=