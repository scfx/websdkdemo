import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
export class AssetTypeCellRendererComponent {
    constructor(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    ngOnInit() {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    }
}
AssetTypeCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
            },] }
];
AssetTypeCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGroupService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N1Yi1hc3NldHMvY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBSzFFLE1BQU0sT0FBTyw4QkFBOEI7SUFLekMsWUFDUyxPQUE0QixFQUMzQixrQkFBc0M7UUFEdkMsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUM3QyxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLFlBQVksQ0FBQyxJQUFZO1FBQy9CLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxXQUFXO2dCQUNkLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLEtBQUssaUJBQWlCO2dCQUNwQixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoQyxLQUFLLDJCQUEyQjtnQkFDOUIsT0FBTyx1QkFBdUIsQ0FBQztZQUNqQyxLQUFLLGtCQUFrQjtnQkFDckIsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakM7Z0JBQ0UsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDOzs7WUFqQ0YsU0FBUyxTQUFDO2dCQUNULCtQQUF3RDthQUN6RDs7O1lBTFEsbUJBQW1CO1lBQ25CLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcm91cFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2Fzc2V0cy1uYXZpZ2F0b3InO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzZXRUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZ3JvdXBJY29uOiBzdHJpbmc7XG4gIGlzQW55R3JvdXA6IGJvb2xlYW47XG4gIGlzRGV2aWNlOiBib29sZWFuO1xuICBpY29uVGl0bGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbnRleHQ6IENlbGxSZW5kZXJlckNvbnRleHQsXG4gICAgcHJpdmF0ZSBkZXZpY2VHcm91cFNlcnZpY2U6IERldmljZUdyb3VwU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pc0FueUdyb3VwID0gdGhpcy5kZXZpY2VHcm91cFNlcnZpY2UuaXNBbnlHcm91cCh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pc0RldmljZSA9IHRoaXMuZGV2aWNlR3JvdXBTZXJ2aWNlLmlzRGV2aWNlKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmdyb3VwSWNvbiA9IHRoaXMuZGV2aWNlR3JvdXBTZXJ2aWNlLmljb24odGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaWNvblRpdGxlID0gdGhpcy5nZXRJY29uVGl0bGUodGhpcy5ncm91cEljb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJY29uVGl0bGUoaWNvbjogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChpY29uKSB7XG4gICAgICBjYXNlICdjOHktZ3JvdXAnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnR3JvdXAnKTtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1zbWFydCc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdTbWFydCBncm91cCcpO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXJlbW90ZS1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiAnSW5hY3RpdmUgcmVtb3RlIGdyb3VwJztcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1yZW1vdGUnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnUmVtb3RlIGdyb3VwJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnQ2hpbGQgZGV2aWNlJyk7XG4gICAgfVxuICB9XG59XG4iXX0=