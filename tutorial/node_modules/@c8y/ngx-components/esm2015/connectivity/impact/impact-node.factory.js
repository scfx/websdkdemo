import { Injectable } from '@angular/core';
import { gettext, NavigatorNode, toObservable } from '@c8y/ngx-components';
import { map } from 'rxjs/operators';
import { ImpactTabFactory } from './impact-tab.factory';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './impact-tab.factory';
export class ImpactNodeFactory {
    constructor(tabFactory) {
        this.tabFactory = tabFactory;
        this.connectivityNode = new NavigatorNode({
            parent: gettext('Settings'),
            label: gettext('Connectivity'),
            path: 'connectivitySettings',
            icon: 'plug',
            preventDuplicates: true
        });
    }
    get() {
        return toObservable(this.tabFactory.tab()).pipe(map(tab => {
            return !!tab ? [this.connectivityNode] : [];
        }));
    }
}
ImpactNodeFactory.ɵfac = function ImpactNodeFactory_Factory(t) { return new (t || ImpactNodeFactory)(ɵngcc0.ɵɵinject(ɵngcc1.ImpactTabFactory)); };
ImpactNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactNodeFactory, factory: ImpactNodeFactory.ɵfac });
ImpactNodeFactory.ctorParameters = () => [
    { type: ImpactTabFactory }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ImpactTabFactory }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LW5vZGUuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29ubmVjdGl2aXR5L2ltcGFjdC9pbXBhY3Qtbm9kZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQXdCLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBR3hELE1BQU0sT0FBTyxpQkFBaUI7QUFBRyxJQVMvQixZQUFvQixVQUE0QjtBQUFJLFFBQWhDLGVBQVUsR0FBVixVQUFVLENBQWtCO0FBQUMsUUFSaEMscUJBQWdCLEdBQWtCLElBQUksYUFBYSxDQUFDO0FBQ3ZFLFlBQUksTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDL0IsWUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNsQyxZQUFJLElBQUksRUFBRSxzQkFBc0I7QUFDaEMsWUFBSSxJQUFJLEVBQUUsTUFBTTtBQUNoQixZQUFJLGlCQUFpQixFQUFFLElBQUk7QUFDM0IsU0FBRyxDQUFDLENBQUM7QUFDTCxJQUNxRCxDQUFDO0FBQ3RELElBQ0UsR0FBRztBQUNMLFFBQUksT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ2hCLFlBQVEsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDcEQsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7NkNBbkJDLFVBQVU7aUlBQ1Q7QUFBQztBQUEyQyxZQUhyQyxnQkFBZ0I7QUFBRzs7O2lGQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBOYXZpZ2F0b3JOb2RlLCBOYXZpZ2F0b3JOb2RlRmFjdG9yeSwgdG9PYnNlcnZhYmxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbXBhY3RUYWJGYWN0b3J5IH0gZnJvbSAnLi9pbXBhY3QtdGFiLmZhY3RvcnknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1wYWN0Tm9kZUZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29ubmVjdGl2aXR5Tm9kZTogTmF2aWdhdG9yTm9kZSA9IG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICBwYXJlbnQ6IGdldHRleHQoJ1NldHRpbmdzJyksXG4gICAgbGFiZWw6IGdldHRleHQoJ0Nvbm5lY3Rpdml0eScpLFxuICAgIHBhdGg6ICdjb25uZWN0aXZpdHlTZXR0aW5ncycsXG4gICAgaWNvbjogJ3BsdWcnLFxuICAgIHByZXZlbnREdXBsaWNhdGVzOiB0cnVlXG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFiRmFjdG9yeTogSW1wYWN0VGFiRmFjdG9yeSkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRvT2JzZXJ2YWJsZSh0aGlzLnRhYkZhY3RvcnkudGFiKCkpLnBpcGUoXG4gICAgICBtYXAodGFiID0+IHtcbiAgICAgICAgcmV0dXJuICEhdGFiID8gW3RoaXMuY29ubmVjdGl2aXR5Tm9kZV0gOiBbXTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19