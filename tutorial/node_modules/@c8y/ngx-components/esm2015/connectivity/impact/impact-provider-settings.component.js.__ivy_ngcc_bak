import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { ImpactConnectivityService } from './impact-connectivity.service';
import { TenantConnectionStatus } from './impact.model';
export class ImpactProviderSettingsComponent {
    constructor(impactService, formBuilder, modal, alert) {
        this.impactService = impactService;
        this.formBuilder = formBuilder;
        this.modal = modal;
        this.alert = alert;
        this.isEdit = false;
        this.credentialsExist = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.initForm();
            const response = yield this.impactService.getOptions();
            this.connectionStatus = yield response.json();
            if (this.connectionStatus && this.connectionStatus.options) {
                this.formGroup.patchValue(Object.assign({}, this.connectionStatus.options));
                this.credentialsExist = true;
            }
            else {
                this.isEdit = true;
            }
        });
    }
    replaceCredentials() {
        this.isEdit = true;
    }
    saveCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.formGroup.valid) {
                this.connectionStatus.status = TenantConnectionStatus.CONNECTING_IN_PROGRESS;
                const updated = yield this.safelyUpdateCredentials(this.formGroup.value);
                if (updated) {
                    const response = yield this.impactService.getOptions();
                    this.connectionStatus = yield response.json();
                    if (this.connectionStatus.status === TenantConnectionStatus.CONNECTED_SUCCESSFULLY) {
                        this.isEdit = false;
                    }
                    this.alert.success(gettext('Credentials saved.'));
                }
                else {
                    this.connectionStatus.status = TenantConnectionStatus.UNKNOWN;
                }
            }
        });
    }
    deleteCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Delete credentials'), gettext('You are about to delete your IMPACT credentials. Deleting credentials will break connection to IMPACT instance. Do you want to proceed?'), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                yield this.safelyDeleteCredentials();
            }
            catch (ex) {
                // Intentionally empty
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            baseUrl: [],
            user: ['', Validators.required],
            password: ['', Validators.required],
            groupName: [],
            initializeDevices: [false]
        });
    }
    resetForm() {
        this.formGroup.reset();
    }
    safelyUpdateCredentials(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.impactService.updateOptions(options);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alert.addServerFailure({ data, res });
                    return Promise.resolve(false);
                }
                else {
                    return Promise.resolve(true);
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                return Promise.resolve(false);
            }
        });
    }
    safelyDeleteCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.impactService.deleteOptions();
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alert.addServerFailure({ data, res });
                }
                else {
                    this.credentialsExist = false;
                    this.resetForm();
                    this.connectionStatus = null;
                    this.alert.success(gettext('Credentials deleted.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
}
ImpactProviderSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-impact-provider-settings',
                template: "<div class=\"row\">\n  <div class=\"col-xs-12 col-md-8\">\n    <form class=\"card card--fullpage\"\n      [formGroup]=\"formGroup\"\n      novalidate\n    >\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Credentials</h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\" *ngIf=\"isEdit\">\n          <c8y-form-group>\n            <label for=\"baseUrl\" translate>\n              Base URL\n            </label>\n            <input\n              id=\"baseUrl\"\n              name=\"baseUrl\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. https://impact.example.com' | translate }}\"\n              autocomplete=\"off\"\n              formControlName=\"baseUrl\"\n            />\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"user\" translate>\n              User\n            </label>\n            <input\n              id=\"user\"\n              name=\"user\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n              required\n              autocomplete=\"off\"\n              formControlName=\"user\"\n            />\n            <c8y-messages>\n              <c8y-message *ngIf=\"formGroup?.controls?.user?.errors?.required\" translate>\n                This field is required.\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"password\" translate>\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. my_password' | translate }}\"\n              required\n              autocomplete=\"off\"\n              formControlName=\"password\"\n            />\n            <c8y-messages>\n              <c8y-message *ngIf=\"formGroup?.controls?.password?.errors?.required\" translate>\n                This field is required.\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"groupName\" translate>\n              IMPACT group name prefix\n            </label>\n            <input\n              id=\"groupName\"\n              name=\"groupName\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. Europe.Nokia`LOCALIZE`' | translate }}\"\n              formControlName=\"groupName\"\n            />\n          </c8y-form-group>\n        </div>\n        <div class=\"card-block bg-gray-white\">\n          <div class=\"d-flex\">\n            <c8y-status-display\n              [status]=\"connectionStatus?.status\"\n              [baseUrl]=\"connectionStatus?.options?.baseUrl\"\n            ></c8y-status-display>\n\n            <div class=\"d-flex flex-item-middle flex-item-right\">\n              <label class=\"c8y-switch\">\n                <input type=\"checkbox\" formControlName=\"initializeDevices\" />\n                <span></span> {{ 'Refresh devices' | translate }}\n              </label>\n              <a\n                container=\"body\"\n                class=\"btn-clean m-l-4 flex-item-middle\"\n                popover=\"{{ 'Refresh device resources as part of connecting' | translate }}\"\n                placement=\"right\"\n                outsideClick=\"false\"\n              >\n                <i c8yIcon=\"question-circle-o text-primary\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-block\" *ngIf=\"credentialsExist && !isEdit\">\n          <p translate>\n            Credentials already provided.<br />\n            Click \"Replace credentials\" below to overwrite them.\n          </p>\n        </div>\n      </div>\n      <div class=\"card-footer separator\">\n        <button class=\"btn btn-default\"\n          title=\"{{ 'Replace credentials' | translate }}\"\n          type=\"submit\"\n          *ngIf=\"!isEdit\"\n          (click)=\"replaceCredentials()\"\n        >\n          {{ 'Replace credentials' | translate }}\n        </button>\n        <button class=\"btn btn-danger\"\n          title=\"{{ 'Delete credentials' | translate }}\"\n          type=\"button\"\n          *ngIf=\"credentialsExist && isEdit\"\n          (click)=\"deleteCredentials()\"\n        >\n          {{ 'Delete credentials' | translate }}\n        </button>\n        <button class=\"btn btn-primary\"\n          title=\"{{ 'Save credentials & connect' | translate }}\"\n          type=\"button\"\n          *ngIf=\"isEdit\"\n          [disabled]=\"formGroup.invalid\"\n          (click)=\"saveCredentials()\"\n        >\n          {{ 'Save credentials & connect' | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
            },] }
];
ImpactProviderSettingsComponent.ctorParameters = () => [
    { type: ImpactConnectivityService },
    { type: FormBuilder },
    { type: ModalService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,