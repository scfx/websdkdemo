import { __awaiter } from "tslib";
import { NgModule } from '@angular/core';
import { gettext, ProviderConfigurationModule } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { SimGuard } from './sim.guard';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
export function encodeFiles(model, fields) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = Object.assign({}, model);
        const fileFields = (get(fields, '[0].fieldGroup') || []).filter((field) => {
            return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';
        });
        for (const fileField of fileFields) {
            const files = model[fileField.key];
            if (files && Array.isArray(files) && files.length) {
                if (fileField.templateOptions.maxAllowedFiles === 1) {
                    result[fileField.key] = (yield files[0].readAsDataURL()).replace(/data:\S+;base64,/gi, '');
                }
                else {
                    const encodedFileContent = [];
                    for (const file of files) {
                        encodedFileContent.push((yield file.readAsDataURL()).replace(/data:\S+;base64,/gi, ''));
                    }
                    result[fileField.key] = encodedFileContent;
                }
            }
            else if (typeof files === 'string' || files instanceof String) {
                result[fileField.key] = files;
            }
        }
        return result;
    });
}
export class SimModule {
}
SimModule.ɵfac = function SimModule_Factory(t) { return new (t || SimModule)(); };
SimModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SimModule });
SimModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [SimGuard], imports: [[
            ProviderConfigurationModule.config([
                {
                    navigation: {
                        label: gettext('Connectivity'),
                        path: 'connectivitySettings',
                        icon: 'plug',
                        parent: gettext('Settings'),
                        priority: 1000,
                        preventDuplicates: true
                    },
                    tab: {
                        path: 'sim_provider_settings',
                        label: 'SIM provider settings',
                        icon: 'mobile',
                        canActivate: [SimGuard]
                    },
                    layout: {
                        pageTitle: gettext('Connectivity'),
                        cardTitle: gettext('Settings'),
                        description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                        providerName: gettext('Provider'),
                        providerNamePlaceholder: gettext('Select or type to filter providers'),
                        providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                        deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        deleteBtnLabel: gettext('Delete'),
                        saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        saveBtnLabel: gettext('Save'),
                        beforeSaveHook: encodeFiles,
                        configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                        deleteConfigurationModalTitle: gettext('Delete settings'),
                        deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                        deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                        configurationDeletedSuccessMsg: gettext('Settings deleted.')
                    },
                    endpoint: {
                        definitionsEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'definitions'
                        },
                        configurationEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'sim/provider'
                        }
                    }
                }
            ])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimModule, [{
        type: NgModule,
        args: [{
                providers: [SimGuard],
                imports: [
                    ProviderConfigurationModule.config([
                        {
                            navigation: {
                                label: gettext('Connectivity'),
                                path: 'connectivitySettings',
                                icon: 'plug',
                                parent: gettext('Settings'),
                                priority: 1000,
                                preventDuplicates: true
                            },
                            tab: {
                                path: 'sim_provider_settings',
                                label: 'SIM provider settings',
                                icon: 'mobile',
                                canActivate: [SimGuard]
                            },
                            layout: {
                                pageTitle: gettext('Connectivity'),
                                cardTitle: gettext('Settings'),
                                description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                                providerName: gettext('Provider'),
                                providerNamePlaceholder: gettext('Select or type to filter providers'),
                                providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                                deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                deleteBtnLabel: gettext('Delete'),
                                saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                saveBtnLabel: gettext('Save'),
                                beforeSaveHook: encodeFiles,
                                configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                                deleteConfigurationModalTitle: gettext('Delete settings'),
                                deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                                deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                                configurationDeletedSuccessMsg: gettext('Settings deleted.')
                            },
                            endpoint: {
                                definitionsEndpoint: {
                                    baseUrl: 'service/connectivity/metadata',
                                    listUrl: 'definitions'
                                },
                                configurationEndpoint: {
                                    baseUrl: 'service/connectivity/metadata',
                                    listUrl: 'sim/provider'
                                }
                            }
                        }
                    ])
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SimModule, { imports: [ɵngcc1.ProviderConfigurationModule] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,