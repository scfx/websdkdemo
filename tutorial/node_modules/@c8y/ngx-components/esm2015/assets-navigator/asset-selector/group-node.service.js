import { Injectable } from '@angular/core';
import { AssetNodeService } from '../asset-node.service';
import { GroupNode } from './group-node';
import { GroupFragment } from '../group-fragment.model';
import * as ɵngcc0 from '@angular/core';
export class GroupNodeService extends AssetNodeService {
    constructor() {
        super(...arguments);
        this.PAGE_SIZE = 5;
    }
    createGroupNode(config) {
        return new GroupNode(this, config);
    }
    createChildNode(managedObject) {
        const config = { mo: managedObject };
        return this.createGroupNode(config);
    }
    subAssetsQueryFilter() {
        const rootQueryFilter = this.rootQueryFilter();
        const filter = this.queriesUtil.addOrFilter(rootQueryFilter, {
            type: GroupFragment.subGroupType
        });
        return this.queriesUtil.buildQuery(filter);
    }
    getGroupItems(moId) {
        return this.inventory.childAssetsList(moId, {
            query: this.subAssetsQueryFilter(),
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            withTotalPages: true
        });
    }
}
GroupNodeService.ɵfac = /*@__PURE__*/ function () { let ɵGroupNodeService_BaseFactory; return function GroupNodeService_Factory(t) { return (ɵGroupNodeService_BaseFactory || (ɵGroupNodeService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(GroupNodeService)))(t || GroupNodeService); }; }();
GroupNodeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: GroupNodeService, factory: GroupNodeService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupNodeService, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0LXNlbGVjdG9yL2dyb3VwLW5vZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUd4RCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsZ0JBQWdCO0FBQ3RELElBRkE7QUFDRTtBQUE2QixRQUNuQixjQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLElBMEJBLENBQUM7QUFDRCxJQTFCRSxlQUFlLENBQUMsTUFBTTtBQUN4QixRQUFJLE9BQU8sSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztBQUNILElBQ0UsZUFBZSxDQUFDLGFBQWE7QUFBSSxRQUMvQixNQUFNLE1BQU0sR0FBdUIsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7QUFDN0QsUUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxvQkFBb0I7QUFDdEIsUUFBSSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbkQsUUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7QUFDakUsWUFBTSxJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7QUFDdEMsU0FBSyxDQUFDLENBQUM7QUFDUCxRQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxhQUFhLENBQUMsSUFBWTtBQUFJLFFBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFO0FBQ2hELFlBQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtBQUN4QyxZQUFNLFlBQVksRUFBRSxLQUFLO0FBQ3pCLFlBQU0sUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQzlCLFlBQU0sY0FBYyxFQUFFLElBQUk7QUFDMUIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSDs0Q0E3QkMsVUFBVTs7OzswQkFDVDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXNzZXROb2RlU2VydmljZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUuc2VydmljZSc7XG5pbXBvcnQgeyBHcm91cE5vZGUgfSBmcm9tICcuL2dyb3VwLW5vZGUnO1xuaW1wb3J0IHsgR3JvdXBGcmFnbWVudCB9IGZyb20gJy4uL2dyb3VwLWZyYWdtZW50Lm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdyb3VwTm9kZVNlcnZpY2UgZXh0ZW5kcyBBc3NldE5vZGVTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIFBBR0VfU0laRSA9IDU7XG5cbiAgY3JlYXRlR3JvdXBOb2RlKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgR3JvdXBOb2RlKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBjcmVhdGVDaGlsZE5vZGUobWFuYWdlZE9iamVjdCk6IEdyb3VwTm9kZSB7XG4gICAgY29uc3QgY29uZmlnOiBQYXJ0aWFsPEdyb3VwTm9kZT4gPSB7IG1vOiBtYW5hZ2VkT2JqZWN0IH07XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBOb2RlKGNvbmZpZyk7XG4gIH1cblxuICBzdWJBc3NldHNRdWVyeUZpbHRlcigpIHtcbiAgICBjb25zdCByb290UXVlcnlGaWx0ZXIgPSB0aGlzLnJvb3RRdWVyeUZpbHRlcigpO1xuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMucXVlcmllc1V0aWwuYWRkT3JGaWx0ZXIocm9vdFF1ZXJ5RmlsdGVyLCB7XG4gICAgICB0eXBlOiBHcm91cEZyYWdtZW50LnN1Ykdyb3VwVHlwZVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnF1ZXJpZXNVdGlsLmJ1aWxkUXVlcnkoZmlsdGVyKTtcbiAgfVxuXG4gIGdldEdyb3VwSXRlbXMobW9JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnkuY2hpbGRBc3NldHNMaXN0KG1vSWQsIHtcbiAgICAgIHF1ZXJ5OiB0aGlzLnN1YkFzc2V0c1F1ZXJ5RmlsdGVyKCksXG4gICAgICB3aXRoQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgcGFnZVNpemU6IHRoaXMuUEFHRV9TSVpFLFxuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWVcbiAgICB9KTtcbiAgfVxufVxuIl19