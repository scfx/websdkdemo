import { Component, Output, Input, EventEmitter } from '@angular/core';
import { GroupNodeService } from './group-node.service';
/**
 * Displays a hierarchical tree selector for assets.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './group-node.service';
export class AssetSelectorComponent {
    /**
     * @ignore only DI
     */
    constructor(groupNodeService) {
        this.groupNodeService = groupNodeService;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onChange = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.rootNode = this.groupNodeService.createGroupNode({ root: true });
    }
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    select(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(selectedMo);
        }
        this.onChange.emit(this.selected);
    }
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    deselect(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.onChange.emit(this.selected);
    }
    getIndexOfSelected(selected, selectedMo) {
        return selected.findIndex(mo => mo.id === selectedMo.id);
    }
}
AssetSelectorComponent.ɵfac = function AssetSelectorComponent_Factory(t) { return new (t || AssetSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GroupNodeService)); };
AssetSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AssetSelectorComponent, selectors: [["c8y-asset-selector"]], inputs: { selected: "selected" }, outputs: { onChange: "onChange" }, decls: 1, vars: 2, consts: [[3, "node", "preselected"]], template: function AssetSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "c8y-asset-selector-node", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("node", ctx.rootNode)("preselected", ctx.selected);
    } }, encapsulation: 2 });
AssetSelectorComponent.ctorParameters = () => [
    { type: GroupNodeService }
];
AssetSelectorComponent.propDecorators = {
    selected: [{ type: Input }],
    onChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-asset-selector',
                template: "<c8y-asset-selector-node [node]=\"rootNode\" [preselected]=\"selected\"></c8y-asset-selector-node>\n"
            }]
    }], function () { return [{ type: ɵngcc1.GroupNodeService }]; }, { selected: [{
            type: Input
        }], onChange: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0LXNlbGVjdG9yL2Fzc2V0LXNlbGVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhEO0FBQ0E7QUFDQSxHQUFHOzs7QUFLSCxNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFjcEM7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFlBQW9CLGdCQUFrQztBQUFJLFFBQXRDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQWhCdkQ7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUFXLGFBQVEsR0FBcUIsRUFBRSxDQUFDO0FBQzNDLFFBQUU7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUFZLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztBQUM1RCxJQVEyRCxDQUFDO0FBQzVELElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFFBQVE7QUFBSyxRQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsTUFBTSxDQUFDLFVBQTBCO0FBQ25DLFFBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckUsUUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN0QixZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFFLFFBQVEsQ0FBQyxVQUEwQjtBQUNyQyxRQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JFLFFBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDcEIsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUNILElBQ0Usa0JBQWtCLENBQUMsUUFBd0MsRUFBRSxVQUEwQjtBQUN6RixRQUFJLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdELElBQUUsQ0FBQztBQUNIO2tEQXpEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG9CQUFvQixrQkFDOUI7MkVBQThDLGNBQy9DOzs7OzZCQUNJO0FBQUM7QUFBZ0QsWUFYN0MsZ0JBQWdCO0FBQUc7QUFBRztBQUNmLHVCQWNiLEtBQUs7QUFBSyx1QkFJVixNQUFNO0FBQUk7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cE5vZGVTZXJ2aWNlIH0gZnJvbSAnLi9ncm91cC1ub2RlLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JvdXBOb2RlIH0gZnJvbSAnLi9ncm91cC1ub2RlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG4vKipcbiAqIERpc3BsYXlzIGEgaGllcmFyY2hpY2FsIHRyZWUgc2VsZWN0b3IgZm9yIGFzc2V0cy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFzc2V0LXNlbGVjdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Fzc2V0LXNlbGVjdG9yLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBc3NldFNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIHByZWRlZmluZWQgbm9kZXMuXG4gICAqL1xuICBASW5wdXQoKSBzZWxlY3RlZDogSU1hbmFnZWRPYmplY3RbXSA9IFtdO1xuICAvKipcbiAgICogRW1pdHMgaWYgb25lIGl0ZW0gd2FzIHNlbGVjdGVkIChhbGwgY3VycmVudGx5IHNlbGVjdGVkIG5vZGVzKS5cbiAgICovXG4gIEBPdXRwdXQoKSBvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8SU1hbmFnZWRPYmplY3RbXT4oKTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvb3ROb2RlOiBHcm91cE5vZGU7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgb25seSBESVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBncm91cE5vZGVTZXJ2aWNlOiBHcm91cE5vZGVTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJvb3ROb2RlID0gdGhpcy5ncm91cE5vZGVTZXJ2aWNlLmNyZWF0ZUdyb3VwTm9kZSh7IHJvb3Q6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBtYW5hZ2VkIG9iamVjdCB0byB0aGUgc2VsZWN0ZWQgYXJyYXkgYW5kIGVtaXRzIHRoZSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1vIFRoZSBzZWxlY3RlZCBhc3NldC5cbiAgICovXG4gIHNlbGVjdChzZWxlY3RlZE1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleE9mU2VsZWN0ZWQodGhpcy5zZWxlY3RlZCwgc2VsZWN0ZWRNbyk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZC5wdXNoKHNlbGVjdGVkTW8pO1xuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIG1hbmFnZWQgb2JqZWN0IGZyb20gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCBlbWl0cyB0aGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRNbyBUaGUgc2VsZWN0ZWQgYXNzZXQuXG4gICAqL1xuICBkZXNlbGVjdChzZWxlY3RlZE1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleE9mU2VsZWN0ZWQodGhpcy5zZWxlY3RlZCwgc2VsZWN0ZWRNbyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICB9XG5cbiAgZ2V0SW5kZXhPZlNlbGVjdGVkKHNlbGVjdGVkOiBBcnJheTxQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0Pj4sIHNlbGVjdGVkTW86IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkLmZpbmRJbmRleChtbyA9PiBtby5pZCA9PT0gc2VsZWN0ZWRNby5pZCk7XG4gIH1cbn1cbiJdfQ==