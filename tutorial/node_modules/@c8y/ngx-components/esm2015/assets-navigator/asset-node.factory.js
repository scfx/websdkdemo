import { Inject, Injectable, Optional } from '@angular/core';
import { get as getProp } from 'lodash-es';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { AssetNodeService } from './asset-node.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './asset-node.service';
export class AssetNodeFactory {
    constructor(service, moduleConfig) {
        this.service = service;
        this.moduleConfig = moduleConfig;
    }
    get() {
        var _a;
        const rootNavigatorNode = (_a = getProp(this.moduleConfig, 'rootNavigatorNode')) !== null && _a !== void 0 ? _a : true;
        if (rootNavigatorNode === false) {
            return;
        }
        if (!this.service.rootNode) {
            this.service.createRootNode(rootNavigatorNode === true ? {} : rootNavigatorNode);
        }
        return this.service.rootNode;
    }
}
AssetNodeFactory.ɵfac = function AssetNodeFactory_Factory(t) { return new (t || AssetNodeFactory)(ɵngcc0.ɵɵinject(ɵngcc1.AssetNodeService), ɵngcc0.ɵɵinject(ASSET_NAVIGATOR_CONFIG, 8)); };
AssetNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AssetNodeFactory, factory: AssetNodeFactory.ɵfac });
AssetNodeFactory.ctorParameters = () => [
    { type: AssetNodeService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AssetNodeService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ASSET_NAVIGATOR_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtbm9kZS5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0LW5vZGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLEdBQUcsSUFBSSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFM0MsT0FBTyxFQUF3QixzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFHeEQsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQUFFLFlBQ1UsT0FBeUIsRUFDa0IsWUFBa0M7QUFDdEYsUUFGUyxZQUFPLEdBQVAsT0FBTyxDQUFrQjtBQUFDLFFBQ2lCLGlCQUFZLEdBQVosWUFBWSxDQUFzQjtBQUN6RixJQUFLLENBQUM7QUFDTixJQUNFLEdBQUc7QUFBSztBQUNMLFFBQUQsTUFBTSxpQkFBaUIsR0FBRyxNQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLG1CQUFtQixDQUFDLG1DQUFJLElBQUksQ0FBQztBQUN0RixRQUNJLElBQUksaUJBQWlCLEtBQUssS0FBSyxFQUFFO0FBQ3JDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtBQUNoQyxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGlCQUFpQixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZGLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7NENBbkJDLFVBQVU7OEhBQ1Q7QUFBQztBQUNVLFlBSkosZ0JBQWdCO0FBQUksNENBTXhCLFFBQVEsWUFBSSxNQUFNLFNBQUMsc0JBQXNCO0FBQVE7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXQgYXMgZ2V0UHJvcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBBc3NldE5vZGUgfSBmcm9tICcuL2Fzc2V0LW5vZGUnO1xuaW1wb3J0IHsgQXNzZXROYXZpZ2F0b3JDb25maWcsIEFTU0VUX05BVklHQVRPUl9DT05GSUcgfSBmcm9tICcuL2Fzc2V0LW5vZGUtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEFzc2V0Tm9kZVNlcnZpY2UgfSBmcm9tICcuL2Fzc2V0LW5vZGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBc3NldE5vZGVGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBBc3NldE5vZGVTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVNTRVRfTkFWSUdBVE9SX0NPTkZJRykgcHVibGljIG1vZHVsZUNvbmZpZzogQXNzZXROYXZpZ2F0b3JDb25maWdcbiAgKSB7fVxuXG4gIGdldCgpOiBBc3NldE5vZGUge1xuICAgIGNvbnN0IHJvb3ROYXZpZ2F0b3JOb2RlID0gZ2V0UHJvcCh0aGlzLm1vZHVsZUNvbmZpZywgJ3Jvb3ROYXZpZ2F0b3JOb2RlJykgPz8gdHJ1ZTtcblxuICAgIGlmIChyb290TmF2aWdhdG9yTm9kZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2VydmljZS5yb290Tm9kZSkge1xuICAgICAgdGhpcy5zZXJ2aWNlLmNyZWF0ZVJvb3ROb2RlKHJvb3ROYXZpZ2F0b3JOb2RlID09PSB0cnVlID8ge30gOiByb290TmF2aWdhdG9yTm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNlcnZpY2Uucm9vdE5vZGU7XG4gIH1cbn1cbiJdfQ==