import { __rest } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService, QueriesUtil, UserService } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, AppStateService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { empty } from 'rxjs';
import { filter, mergeMap } from 'rxjs/operators';
import { AssetNode } from './asset-node';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i2 from "./group.service";
import * as i3 from "@c8y/ngx-components/api";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@c8y/client/lib/src/user/UserService";
import * as i6 from "./asset-node-config.model";
export class AssetNodeService {
    constructor(inventory, groups, apiService, modal, alert, breadcrumbService, user, appState, moduleConfig) {
        this.inventory = inventory;
        this.groups = groups;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.moduleConfig = moduleConfig;
        this.firstUrl = true;
        this.PAGE_SIZE = 20;
        this.moduleConfig = Object.assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
        this.queriesUtil = new QueriesUtil();
    }
    createRootNode(config = {}) {
        this.rootNode = this.createAssetNode(Object.assign(Object.assign({ root: true }, config), { priority: this.moduleConfig.rootNodePriority }));
        return this.rootNode;
    }
    createDynamicGroupNode(config) {
        return new DynamicGroupNode(this, config);
    }
    createAssetNode(config) {
        return new AssetNode(this, config);
    }
    createChildNode(managedObject) {
        const { type } = managedObject;
        const config = { mo: managedObject };
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    }
    getRootNodes(customFilter) {
        const defaultFilter = {
            pageSize: this.PAGE_SIZE,
            withChildren: false,
            query: this.queriesUtil.buildQuery(this.navRootQueryFilter())
        };
        const groupFilter = customFilter ? customFilter : defaultFilter;
        // due to BE performance limitations we do not allow filtering and sorting for a user without inventory roles
        if (!this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            delete groupFilter.query;
            Object.assign(groupFilter, {
                fragmentType: GroupFragment.groupFragmentType,
                onlyRoots: true
            });
        }
        return this.inventory.list(this.createFilter(groupFilter));
    }
    getGroupItems(moId, extraFilter = {}) {
        const queryFilter = {
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId)
        };
        return this.inventory.childAssetsList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
    }
    getDynamicGroupItems(groupQuery, filterObj = {}) {
        const { query } = filterObj, queryParams = __rest(filterObj, ["query"]);
        const orderByQuery = query;
        const queryFilter = Object.assign({ q: this.buildCombinedQuery(groupQuery, orderByQuery) }, queryParams);
        return this.inventory.list(this.createFilter(queryFilter));
    }
    getDeviceChildren(moId, extraFilter = {}) {
        const queryFilter = {
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId)
        };
        return this.inventory.childDevicesList(moId, Object.assign(Object.assign({}, queryFilter), extraFilter));
    }
    groupQueryFilter(moId) {
        return `$filter=(bygroupid(${moId}))$orderby=name`;
    }
    navRootQueryFilter() {
        const navRootFilter = this.rootQueryFilter();
        navRootFilter.__orderby = [{ name: 1 }];
        return navRootFilter;
    }
    rootQueryFilter() {
        const { moduleConfig } = this;
        const rootFilter = {
            __filter: {
                type: `${GroupFragment.groupType}`
            },
            __orderby: []
        };
        if (moduleConfig.smartGroups) {
            const queryFilter = {
                __filter: {
                    __and: [
                        {
                            type: `${GroupFragment.dynamicGroupType}`
                        },
                        {
                            __has: `${GroupFragment.dynamicGroupFragment}`
                        },
                        { __not: { __has: `${GroupFragment.dynamicGroupFragment}.invisible` } }
                    ]
                }
            };
            this.queriesUtil.addOrFilter(rootFilter, queryFilter);
        }
        return rootFilter;
    }
    onUpdate({ mo, root }) {
        if (mo.id) {
            return this.apiService
                .hookResponse(({ url, method }) => ['PUT', 'DELETE', 'POST'].includes(method) &&
                RegExp(`((inventory/managedObjects)|(service/smartgroup/smartgroups))/${mo.id}`).test(url))
                .pipe(filter(() => !this.draggedData), mergeMap(this.apiService.resolveData), filter(response => !response.data.c8y_Dashboard));
        }
        else if (root) {
            return this.apiService
                .hookResponse(({ url, method }) => RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                method === 'POST')
                .pipe(mergeMap(this.apiService.resolveData), filter(response => this.isNewManagedObjectRoot(response)));
        }
        else {
            return empty();
        }
    }
    isNewManagedObjectRoot(response = {}) {
        const { data } = response;
        let isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    }
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    preferBreadcrumb(parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    }
    createFilter(extraParams = {}) {
        const params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return Object.assign(Object.assign({}, params), extraParams);
    }
    buildCombinedQuery(query, orderByQuery) {
        let combinedQuery;
        if (query && orderByQuery) {
            const filterQuery = this.queriesUtil.buildQuery({
                __useFilterQueryString: query
            });
            combinedQuery = `${filterQuery} ${orderByQuery}`;
        }
        else {
            combinedQuery = query || orderByQuery || '';
        }
        return combinedQuery;
    }
}
AssetNodeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetNodeService_Factory() { return new AssetNodeService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.DeviceGroupService), i0.ɵɵinject(i3.ApiService), i0.ɵɵinject(i4.ModalService), i0.ɵɵinject(i4.AlertService), i0.ɵɵinject(i4.BreadcrumbService), i0.ɵɵinject(i5.UserService), i0.ɵɵinject(i4.AppStateService), i0.ɵɵinject(i6.ASSET_NAVIGATOR_CONFIG, 8)); }, token: AssetNodeService, providedIn: "root" });
AssetNodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AssetNodeService.ctorParameters = () => [
    { type: InventoryService },
    { type: DeviceGroupService },
    { type: ApiService },
    { type: ModalService },
    { type: AlertService },
    { type: BreadcrumbService },
    { type: UserService },
    { type: AppStateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,