import { Injectable } from '@angular/core';
import { GroupFragment } from './group-fragment.model';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class DeviceGroupService {
    constructor() {
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'circle',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = `_${GroupFragment.dataBrokerSourceFragment}`;
    }
    isGroup(mo) {
        return (!!mo[GroupFragment.groupFragmentType] ||
            mo.type === GroupFragment.groupType ||
            mo.type === GroupFragment.subGroupType);
    }
    isDynamicGroup(mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    }
    isDataBroker(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive]);
    }
    isDataBrokerActive(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive]);
    }
    isDevice(mo) {
        return !!mo.c8y_IsDevice;
    }
    icon(mo, open = false) {
        let type = 'other';
        if (this.isDynamicGroup(mo)) {
            type = 'dynamicGroup';
        }
        else if (this.isDataBrokerActive(mo)) {
            type = 'brokerSource';
        }
        else if (this.isDataBroker(mo)) {
            type = 'brokerSourceInactive';
        }
        else if (this.isGroup(mo)) {
            type = 'group';
        }
        const icon = this.icons[type];
        return (open && icon.iconOpen) || icon.icon;
    }
    isAnyGroup(mo) {
        return (this.isGroup(mo) ||
            this.isDynamicGroup(mo) ||
            this.isDataBroker(mo) ||
            this.isDataBrokerActive(mo));
    }
}
DeviceGroupService.ɵfac = function DeviceGroupService_Factory(t) { return new (t || DeviceGroupService)(); };
DeviceGroupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceGroupService_Factory() { return new DeviceGroupService(); }, token: DeviceGroupService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGroupService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXNzZXRzLW5hdmlnYXRvci9ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZEOztBQUtBLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFKQTtBQUNFLFFBR0EsVUFBSyxHQUFHO0FBQ1YsWUFBSSxvQkFBb0IsRUFBRTtBQUMxQixnQkFBTSxJQUFJLEVBQUUsMkJBQTJCO0FBQ3ZDLGFBQUs7QUFDTCxZQUFJLFlBQVksRUFBRTtBQUNsQixnQkFBTSxJQUFJLEVBQUUsa0JBQWtCO0FBQzlCLGdCQUFNLFFBQVEsRUFBRSx1QkFBdUI7QUFDdkMsYUFBSztBQUNMLFlBQUksS0FBSyxFQUFFO0FBQ1gsZ0JBQU0sSUFBSSxFQUFFLFdBQVc7QUFDdkIsZ0JBQU0sUUFBUSxFQUFFLGdCQUFnQjtBQUNoQyxhQUFLO0FBQ0wsWUFBSSxZQUFZLEVBQUU7QUFDbEIsZ0JBQU0sSUFBSSxFQUFFLGlCQUFpQjtBQUM3QixnQkFBTSxRQUFRLEVBQUUsc0JBQXNCO0FBQ3RDLGFBQUs7QUFDTCxZQUFJLEtBQUssRUFBRTtBQUNYLGdCQUFNLElBQUksRUFBRSxRQUFRO0FBQ3BCLGdCQUFNLFNBQVMsRUFBRSxlQUFlO0FBQ2hDLGFBQUs7QUFDTCxTQUFHLENBQUM7QUFDSixRQUFFLHFDQUFnQyxHQUFHLElBQUksYUFBYSxDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDbEYsS0FvREM7QUFDRCxJQXBERSxPQUFPLENBQUMsRUFBRTtBQUNaLFFBQUksT0FBTyxDQUNMLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0FBQzNDLFlBQU0sRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsU0FBUztBQUN6QyxZQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLFlBQVksQ0FDdkMsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UsY0FBYyxDQUFDLEVBQUU7QUFDbkIsUUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7QUFDbEcsSUFBRSxDQUFDO0FBQ0gsSUFDRSxZQUFZLENBQUMsRUFBRTtBQUNqQixRQUFJLE9BQU8sQ0FDTCxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQzVGLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLGtCQUFrQixDQUFDLEVBQUU7QUFDdkIsUUFBSSxPQUFPLENBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FDM0YsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUSxDQUFDLEVBQUU7QUFDYixRQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxLQUFLO0FBQ3ZCLFFBQUksSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ3ZCLFFBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2pDLFlBQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUM1QixTQUFLO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUM1QyxZQUFNLElBQUksR0FBRyxjQUFjLENBQUM7QUFDNUIsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3RDLFlBQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDO0FBQ3BDLFNBQUs7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNqQyxZQUFNLElBQUksR0FBRyxPQUFPLENBQUM7QUFDckIsU0FBSztBQUNMLFFBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxVQUFVLENBQUMsRUFBa0I7QUFDL0IsUUFBSSxPQUFPLENBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7QUFDdEIsWUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztBQUM3QixZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO0FBQzNCLFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUM1QixDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7NkdBQUM7QUFDRDs4Q0EvRUMsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNO0NBQ25COzs7O2dEQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cEZyYWdtZW50IH0gZnJvbSAnLi9ncm91cC1mcmFnbWVudC5tb2RlbCc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JvdXBTZXJ2aWNlIHtcbiAgaWNvbnMgPSB7XG4gICAgYnJva2VyU291cmNlSW5hY3RpdmU6IHtcbiAgICAgIGljb246ICdjOHktZ3JvdXAtcmVtb3RlLWluYWN0aXZlJ1xuICAgIH0sXG4gICAgYnJva2VyU291cmNlOiB7XG4gICAgICBpY29uOiAnYzh5LWdyb3VwLXJlbW90ZScsXG4gICAgICBpY29uT3BlbjogJ2M4eS1ncm91cC1yZW1vdGUtb3BlbidcbiAgICB9LFxuICAgIGdyb3VwOiB7XG4gICAgICBpY29uOiAnYzh5LWdyb3VwJyxcbiAgICAgIGljb25PcGVuOiAnYzh5LWdyb3VwLW9wZW4nXG4gICAgfSxcbiAgICBkeW5hbWljR3JvdXA6IHtcbiAgICAgIGljb246ICdjOHktZ3JvdXAtc21hcnQnLFxuICAgICAgaWNvbk9wZW46ICdjOHktZ3JvdXAtc21hcnQtb3BlbidcbiAgICB9LFxuICAgIG90aGVyOiB7XG4gICAgICBpY29uOiAnY2lyY2xlJyxcbiAgICAgIGljb25DbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfVxuICB9O1xuICBkYXRhQnJva2VyU291cmNlRnJhZ21lbnRJbmFjdGl2ZSA9IGBfJHtHcm91cEZyYWdtZW50LmRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudH1gO1xuXG4gIGlzR3JvdXAobW8pIHtcbiAgICByZXR1cm4gKFxuICAgICAgISFtb1tHcm91cEZyYWdtZW50Lmdyb3VwRnJhZ21lbnRUeXBlXSB8fFxuICAgICAgbW8udHlwZSA9PT0gR3JvdXBGcmFnbWVudC5ncm91cFR5cGUgfHxcbiAgICAgIG1vLnR5cGUgPT09IEdyb3VwRnJhZ21lbnQuc3ViR3JvdXBUeXBlXG4gICAgKTtcbiAgfVxuXG4gIGlzRHluYW1pY0dyb3VwKG1vKSB7XG4gICAgcmV0dXJuICEhbW9bR3JvdXBGcmFnbWVudC5keW5hbWljR3JvdXBGcmFnbWVudF0gfHwgbW8udHlwZSA9PT0gR3JvdXBGcmFnbWVudC5keW5hbWljR3JvdXBUeXBlO1xuICB9XG5cbiAgaXNEYXRhQnJva2VyKG1vKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICEhbW9bR3JvdXBGcmFnbWVudC5kYXRhQnJva2VyU291cmNlRnJhZ21lbnRdIHx8ICEhbW9bdGhpcy5kYXRhQnJva2VyU291cmNlRnJhZ21lbnRJbmFjdGl2ZV1cbiAgICApO1xuICB9XG5cbiAgaXNEYXRhQnJva2VyQWN0aXZlKG1vKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICEhbW9bR3JvdXBGcmFnbWVudC5kYXRhQnJva2VyU291cmNlRnJhZ21lbnRdICYmICFtb1t0aGlzLmRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudEluYWN0aXZlXVxuICAgICk7XG4gIH1cblxuICBpc0RldmljZShtbykge1xuICAgIHJldHVybiAhIW1vLmM4eV9Jc0RldmljZTtcbiAgfVxuXG4gIGljb24obW8sIG9wZW4gPSBmYWxzZSkge1xuICAgIGxldCB0eXBlID0gJ290aGVyJztcbiAgICBpZiAodGhpcy5pc0R5bmFtaWNHcm91cChtbykpIHtcbiAgICAgIHR5cGUgPSAnZHluYW1pY0dyb3VwJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNEYXRhQnJva2VyQWN0aXZlKG1vKSkge1xuICAgICAgdHlwZSA9ICdicm9rZXJTb3VyY2UnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0RhdGFCcm9rZXIobW8pKSB7XG4gICAgICB0eXBlID0gJ2Jyb2tlclNvdXJjZUluYWN0aXZlJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNHcm91cChtbykpIHtcbiAgICAgIHR5cGUgPSAnZ3JvdXAnO1xuICAgIH1cbiAgICBjb25zdCBpY29uID0gdGhpcy5pY29uc1t0eXBlXTtcbiAgICByZXR1cm4gKG9wZW4gJiYgaWNvbi5pY29uT3BlbikgfHwgaWNvbi5pY29uO1xuICB9XG5cbiAgaXNBbnlHcm91cChtbzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5pc0dyb3VwKG1vKSB8fFxuICAgICAgdGhpcy5pc0R5bmFtaWNHcm91cChtbykgfHxcbiAgICAgIHRoaXMuaXNEYXRhQnJva2VyKG1vKSB8fFxuICAgICAgdGhpcy5pc0RhdGFCcm9rZXJBY3RpdmUobW8pXG4gICAgKTtcbiAgfVxufVxuIl19