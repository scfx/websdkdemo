import * as angular from 'angular';
function c8yTitleDecorator($q, $delegate, $injector, $rootScope, $location, $templateCache, $compile, c8yHeaderService) {
    'ngInject';
    const exports = {
        translate,
        changeTitleInAngular
    };
    $delegate.changeTitle = changeTitle;
    $delegate.setTitleElement = setTitleElement;
    $rootScope.$on('$routeChangeStart', () => {
        changeTitle({});
    });
    $rootScope.$on('$routeChangeSuccess', (event) => {
        const title = $delegate.get($location.path());
        if (title) {
            const titleData = $q.when(title.data ? $injector.invoke(title.data) : {});
            titleData.then((data) => {
                const { templateUrl } = data;
                if (templateUrl) {
                    const template = $templateCache.get(templateUrl);
                    setTitleElement($compile(template)(event.targetScope));
                }
                else {
                    changeTitle(data);
                }
            });
        }
    });
    function changeTitle(newTitleSubtitleObjOrPromise, options = { skipTitleTranslation: false, skipSubtitleTranslation: false }) {
        $q.when(newTitleSubtitleObjOrPromise).then(newTitleSubtitleObj => changeTitleInAngular(translate(newTitleSubtitleObj, options)));
    }
    function translate({ title = '', subtitle = '' }, { skipTitleTranslation = false, skipSubtitleTranslation = false }) {
        const titleTemplate = skipTitleTranslation ? '{{ title }}' : '{{ title | translate }}';
        const subtitleTemplate = skipSubtitleTranslation ? '{{ subtitle }}' : '{{ subtitle | translate }}';
        const template = `
      <h1 class="text-truncate">${titleTemplate}
      <small>${subtitleTemplate}</small></h1>
    `;
        const isolatedScope = $rootScope.$new(true);
        isolatedScope.title = title;
        isolatedScope.subtitle = subtitle;
        return $compile(angular.element(template))(isolatedScope)[0];
    }
    function changeTitleInAngular(domElement) {
        c8yHeaderService.changeTitle(domElement);
    }
    function setTitleElement($element) {
        $element.show();
        changeTitleInAngular($element[0]);
    }
    return $delegate;
}
export { c8yTitleDecorator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9uZzEvdGl0bGUuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRW5DLFNBQVMsaUJBQWlCLENBQ3hCLEVBQUUsRUFDRixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBQ1QsY0FBYyxFQUNkLFFBQVEsRUFDUixnQkFBZ0I7SUFFaEIsVUFBVSxDQUFDO0lBRVgsTUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTO1FBQ1Qsb0JBQW9CO0tBQ3JCLENBQUM7SUFFRixTQUFTLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNwQyxTQUFTLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztJQUU1QyxVQUFVLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUN2QyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDOUMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDdEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDN0IsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDakQsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU07b0JBQ0wsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsV0FBVyxDQUFDLDRCQUE0QixFQUFFLE9BQU8sR0FBRyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUU7UUFDMUgsRUFBRSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQy9ELG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFNBQVMsU0FBUyxDQUNoQixFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUM3QixFQUFFLG9CQUFvQixHQUFHLEtBQUssRUFBRSx1QkFBdUIsR0FBRyxLQUFLLEVBQUU7UUFFakUsTUFBTSxhQUFhLEdBQUcsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUM7UUFDdkYsTUFBTSxnQkFBZ0IsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO1FBQ25HLE1BQU0sUUFBUSxHQUFHO2tDQUNhLGFBQWE7ZUFDaEMsZ0JBQWdCO0tBQzFCLENBQUM7UUFFRixNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRWxDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsU0FBUyxvQkFBb0IsQ0FBQyxVQUFVO1FBQ3RDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsUUFBUTtRQUMvQixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEIsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmZ1bmN0aW9uIGM4eVRpdGxlRGVjb3JhdG9yKFxuICAkcSxcbiAgJGRlbGVnYXRlLFxuICAkaW5qZWN0b3IsXG4gICRyb290U2NvcGUsXG4gICRsb2NhdGlvbixcbiAgJHRlbXBsYXRlQ2FjaGUsXG4gICRjb21waWxlLFxuICBjOHlIZWFkZXJTZXJ2aWNlXG4pIHtcbiAgJ25nSW5qZWN0JztcblxuICBjb25zdCBleHBvcnRzID0ge1xuICAgIHRyYW5zbGF0ZSxcbiAgICBjaGFuZ2VUaXRsZUluQW5ndWxhclxuICB9O1xuXG4gICRkZWxlZ2F0ZS5jaGFuZ2VUaXRsZSA9IGNoYW5nZVRpdGxlO1xuICAkZGVsZWdhdGUuc2V0VGl0bGVFbGVtZW50ID0gc2V0VGl0bGVFbGVtZW50O1xuXG4gICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsICgpID0+IHtcbiAgICBjaGFuZ2VUaXRsZSh7fSk7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdWNjZXNzJywgKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSAkZGVsZWdhdGUuZ2V0KCRsb2NhdGlvbi5wYXRoKCkpO1xuICAgIGlmICh0aXRsZSkge1xuICAgICAgY29uc3QgdGl0bGVEYXRhID0gJHEud2hlbih0aXRsZS5kYXRhID8gJGluamVjdG9yLmludm9rZSh0aXRsZS5kYXRhKSA6IHt9KTtcbiAgICAgIHRpdGxlRGF0YS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGVtcGxhdGVVcmwgfSA9IGRhdGE7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gJHRlbXBsYXRlQ2FjaGUuZ2V0KHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICBzZXRUaXRsZUVsZW1lbnQoJGNvbXBpbGUodGVtcGxhdGUpKGV2ZW50LnRhcmdldFNjb3BlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlVGl0bGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2hhbmdlVGl0bGUobmV3VGl0bGVTdWJ0aXRsZU9iak9yUHJvbWlzZSwgb3B0aW9ucyA9IHsgc2tpcFRpdGxlVHJhbnNsYXRpb246IGZhbHNlLCBza2lwU3VidGl0bGVUcmFuc2xhdGlvbjogZmFsc2UgfSkge1xuICAgICRxLndoZW4obmV3VGl0bGVTdWJ0aXRsZU9iak9yUHJvbWlzZSkudGhlbihuZXdUaXRsZVN1YnRpdGxlT2JqID0+XG4gICAgICBjaGFuZ2VUaXRsZUluQW5ndWxhcih0cmFuc2xhdGUobmV3VGl0bGVTdWJ0aXRsZU9iaiwgb3B0aW9ucykpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZShcbiAgICB7IHRpdGxlID0gJycsIHN1YnRpdGxlID0gJycgfSxcbiAgICB7IHNraXBUaXRsZVRyYW5zbGF0aW9uID0gZmFsc2UsIHNraXBTdWJ0aXRsZVRyYW5zbGF0aW9uID0gZmFsc2UgfVxuICApIHtcbiAgICBjb25zdCB0aXRsZVRlbXBsYXRlID0gc2tpcFRpdGxlVHJhbnNsYXRpb24gPyAne3sgdGl0bGUgfX0nIDogJ3t7IHRpdGxlIHwgdHJhbnNsYXRlIH19JztcbiAgICBjb25zdCBzdWJ0aXRsZVRlbXBsYXRlID0gc2tpcFN1YnRpdGxlVHJhbnNsYXRpb24gPyAne3sgc3VidGl0bGUgfX0nIDogJ3t7IHN1YnRpdGxlIHwgdHJhbnNsYXRlIH19JztcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICAgIDxoMSBjbGFzcz1cInRleHQtdHJ1bmNhdGVcIj4ke3RpdGxlVGVtcGxhdGV9XG4gICAgICA8c21hbGw+JHtzdWJ0aXRsZVRlbXBsYXRlfTwvc21hbGw+PC9oMT5cbiAgICBgO1xuXG4gICAgY29uc3QgaXNvbGF0ZWRTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcbiAgICBpc29sYXRlZFNjb3BlLnRpdGxlID0gdGl0bGU7XG4gICAgaXNvbGF0ZWRTY29wZS5zdWJ0aXRsZSA9IHN1YnRpdGxlO1xuXG4gICAgcmV0dXJuICRjb21waWxlKGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSkpKGlzb2xhdGVkU2NvcGUpWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hhbmdlVGl0bGVJbkFuZ3VsYXIoZG9tRWxlbWVudCkge1xuICAgIGM4eUhlYWRlclNlcnZpY2UuY2hhbmdlVGl0bGUoZG9tRWxlbWVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUaXRsZUVsZW1lbnQoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudC5zaG93KCk7XG4gICAgY2hhbmdlVGl0bGVJbkFuZ3VsYXIoJGVsZW1lbnRbMF0pO1xuICB9XG5cbiAgcmV0dXJuICRkZWxlZ2F0ZTtcbn1cblxuZXhwb3J0IHsgYzh5VGl0bGVEZWNvcmF0b3IgfTtcbiJdfQ==