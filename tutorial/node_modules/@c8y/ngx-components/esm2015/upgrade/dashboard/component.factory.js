import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
export class Ng1ComponentFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const components = (yield this.bridge.ng1Components.list()).map(cmp => {
                const data = {
                    settings: Object.assign(Object.assign({}, cmp.options), { configTemplateUrl: cmp.configTemplateUrl, widgetComponent: cmp.widgetComponent, configComponent: cmp.configComponent, transformConfigWithContext: cmp.transformConfigWithContext || cmp.componentTransformConfigWithContext, upgrade: true })
                };
                data.settings.templateUrl = cmp.templateUrl; // workaround as in object it creates build error
                return {
                    id: cmp.name,
                    label: cmp.nameDisplay || cmp.name,
                    description: cmp.description,
                    component: WidgetComponent,
                    configComponent: WidgetComponent,
                    previewImage: cmp.previewImage,
                    data
                };
            });
            // add the device selector legacy component
            components.push({
                id: 'device.selector.legacy',
                label: 'Device selector',
                description: '',
                data: { settings: { noNewWidgets: true, upgrade: true } },
                component: DeviceSelectorComponent
            });
            return components;
        });
    }
}
Ng1ComponentFactoryService.decorators = [
    { type: Injectable }
];
Ng1ComponentFactoryService.ctorParameters = () => [
    { type: DashboardBridgeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL2Rhc2hib2FyZC9jb21wb25lbnQuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHdEUsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxZQUFvQixNQUE4QjtRQUE5QixXQUFNLEdBQU4sTUFBTSxDQUF3QjtJQUFHLENBQUM7SUFDaEQsR0FBRzs7WUFDUCxNQUFNLFVBQVUsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3BFLE1BQU0sSUFBSSxHQUFHO29CQUNYLFFBQVEsa0NBQ0gsR0FBRyxDQUFDLE9BQU8sS0FDZCxpQkFBaUIsRUFBRSxHQUFHLENBQUMsaUJBQWlCLEVBQ3hDLGVBQWUsRUFBRSxHQUFHLENBQUMsZUFBZSxFQUNwQyxlQUFlLEVBQUUsR0FBRyxDQUFDLGVBQWUsRUFDcEMsMEJBQTBCLEVBQ3hCLEdBQUcsQ0FBQywwQkFBMEIsSUFBSSxHQUFHLENBQUMsbUNBQW1DLEVBQzNFLE9BQU8sRUFBRSxJQUFJLEdBQ2Q7aUJBQ0ssQ0FBQztnQkFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsaURBQWlEO2dCQUU5RixPQUFPO29CQUNMLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFDWixLQUFLLEVBQUUsR0FBRyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSTtvQkFDbEMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXO29CQUM1QixTQUFTLEVBQUUsZUFBZTtvQkFDMUIsZUFBZSxFQUFFLGVBQWU7b0JBQ2hDLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWTtvQkFDOUIsSUFBSTtpQkFDeUIsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztZQUVILDJDQUEyQztZQUMzQyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNkLEVBQUUsRUFBRSx3QkFBd0I7Z0JBQzVCLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLFdBQVcsRUFBRSxFQUFFO2dCQUNmLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN6RCxTQUFTLEVBQUUsdUJBQXVCO2FBQ25DLENBQUMsQ0FBQztZQUVILE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUM7S0FBQTs7O1lBdkNGLFVBQVU7OztZQUpGLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9kYXNoYm9hcmQtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXQuY29tcG9uZW50JztcbmltcG9ydCB7IERldmljZVNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nMUNvbXBvbmVudEZhY3RvcnlTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBicmlkZ2U6IERhc2hib2FyZEJyaWRnZVNlcnZpY2UpIHt9XG4gIGFzeW5jIGdldCgpIHtcbiAgICBjb25zdCBjb21wb25lbnRzID0gKGF3YWl0IHRoaXMuYnJpZGdlLm5nMUNvbXBvbmVudHMubGlzdCgpKS5tYXAoY21wID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgLi4uY21wLm9wdGlvbnMsXG4gICAgICAgICAgY29uZmlnVGVtcGxhdGVVcmw6IGNtcC5jb25maWdUZW1wbGF0ZVVybCxcbiAgICAgICAgICB3aWRnZXRDb21wb25lbnQ6IGNtcC53aWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgY29uZmlnQ29tcG9uZW50OiBjbXAuY29uZmlnQ29tcG9uZW50LFxuICAgICAgICAgIHRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0OlxuICAgICAgICAgICAgY21wLnRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0IHx8IGNtcC5jb21wb25lbnRUcmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dCxcbiAgICAgICAgICB1cGdyYWRlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gYXMgYW55O1xuICAgICAgZGF0YS5zZXR0aW5ncy50ZW1wbGF0ZVVybCA9IGNtcC50ZW1wbGF0ZVVybDsgLy8gd29ya2Fyb3VuZCBhcyBpbiBvYmplY3QgaXQgY3JlYXRlcyBidWlsZCBlcnJvclxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY21wLm5hbWUsXG4gICAgICAgIGxhYmVsOiBjbXAubmFtZURpc3BsYXkgfHwgY21wLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjbXAuZGVzY3JpcHRpb24sXG4gICAgICAgIGNvbXBvbmVudDogV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICBjb25maWdDb21wb25lbnQ6IFdpZGdldENvbXBvbmVudCxcbiAgICAgICAgcHJldmlld0ltYWdlOiBjbXAucHJldmlld0ltYWdlLFxuICAgICAgICBkYXRhXG4gICAgICB9IGFzIER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSBkZXZpY2Ugc2VsZWN0b3IgbGVnYWN5IGNvbXBvbmVudFxuICAgIGNvbXBvbmVudHMucHVzaCh7XG4gICAgICBpZDogJ2RldmljZS5zZWxlY3Rvci5sZWdhY3knLFxuICAgICAgbGFiZWw6ICdEZXZpY2Ugc2VsZWN0b3InLFxuICAgICAgZGVzY3JpcHRpb246ICcnLFxuICAgICAgZGF0YTogeyBzZXR0aW5nczogeyBub05ld1dpZGdldHM6IHRydWUsIHVwZ3JhZGU6IHRydWUgfSB9LFxuICAgICAgY29tcG9uZW50OiBEZXZpY2VTZWxlY3RvckNvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudHM7XG4gIH1cbn1cbiJdfQ==