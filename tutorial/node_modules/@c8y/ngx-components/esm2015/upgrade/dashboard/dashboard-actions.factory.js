import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { CopyActionComponent } from './copy-action.component';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
export class Ng1DashboardActionFactoryService {
    constructor(dashboardBridgeService) {
        this.dashboardBridgeService = dashboardBridgeService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const canCopy = contextData &&
            activeRoute.snapshot.data.dashboard &&
            [ViewContext.Device, ViewContext.Group].includes(data.context);
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.dashboardBridgeService.dashboardClipboard;
        if (canCopy) {
            actions.push({
                priority: -20,
                placement: 'more',
                template: CopyActionComponent
            });
        }
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteActionComponent
            });
        }
        return actions;
    }
}
Ng1DashboardActionFactoryService.decorators = [
    { type: Injectable }
];
Ng1DashboardActionFactoryService.ctorParameters = () => [
    { type: DashboardBridgeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3VwZ3JhZGUvZGFzaGJvYXJkL2Rhc2hib2FyZC1hY3Rpb25zLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQW1DLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR2hFLE1BQU0sT0FBTyxnQ0FBZ0M7SUFDM0MsWUFBb0Isc0JBQThDO1FBQTlDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFBRyxDQUFDO0lBRXRFLEdBQUcsQ0FBQyxXQUE0QjtRQUM5QixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEdBQ1IsQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDdEQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSTtZQUMzQixDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDN0IsTUFBTSxPQUFPLEdBQ1gsV0FBVztZQUNYLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDbkMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sUUFBUSxHQUNaLFdBQVc7WUFDWCxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzlELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUVqRCxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLENBQUMsRUFBRTtnQkFDYixTQUFTLEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLG1CQUFtQjthQUNiLENBQUMsQ0FBQztTQUNyQjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxRQUFRLEVBQUUsQ0FBQyxFQUFFO2dCQUNiLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixRQUFRLEVBQUUsb0JBQW9CO2FBQ2QsQ0FBQyxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBckNGLFVBQVU7OztZQUhGLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFjdGlvbkJhckZhY3RvcnksIEFjdGlvbkJhckl0ZW0sIFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb3B5QWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb3B5LWFjdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQnJpZGdlU2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWJyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3RlQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9wYXN0ZS1hY3Rpb24uY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nMURhc2hib2FyZEFjdGlvbkZhY3RvcnlTZXJ2aWNlIGltcGxlbWVudHMgQWN0aW9uQmFyRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGFzaGJvYXJkQnJpZGdlU2VydmljZTogRGFzaGJvYXJkQnJpZGdlU2VydmljZSkge31cblxuICBnZXQoYWN0aXZlUm91dGU/OiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBkYXRhID1cbiAgICAgICFhY3RpdmVSb3V0ZS5wYXJlbnQgfHwgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5jb250ZXh0XG4gICAgICAgID8gYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YVxuICAgICAgICA6IGFjdGl2ZVJvdXRlLnBhcmVudC5zbmFwc2hvdC5kYXRhO1xuICAgIGNvbnN0IHsgY29udGV4dERhdGEgfSA9IGRhdGE7XG4gICAgY29uc3QgY2FuQ29weSA9XG4gICAgICBjb250ZXh0RGF0YSAmJlxuICAgICAgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5kYXNoYm9hcmQgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhkYXRhLmNvbnRleHQpO1xuICAgIGNvbnN0IGNhblBhc3RlID1cbiAgICAgIGNvbnRleHREYXRhICYmXG4gICAgICBbVmlld0NvbnRleHQuRGV2aWNlLCBWaWV3Q29udGV4dC5Hcm91cF0uaW5jbHVkZXMoZGF0YS5jb250ZXh0KSAmJlxuICAgICAgdGhpcy5kYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLmRhc2hib2FyZENsaXBib2FyZDtcblxuICAgIGlmIChjYW5Db3B5KSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTIwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IENvcHlBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKGNhblBhc3RlKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTEwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IFBhc3RlQWN0aW9uQ29tcG9uZW50XG4gICAgICB9IGFzIEFjdGlvbkJhckl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25zO1xuICB9XG59XG4iXX0=