import { AppStateService, TenantUiService } from '@c8y/ngx-components';
import { BasicAuth, FetchClient } from '@c8y/client';
export class AuthBridgeService {
    constructor(injector, basicAuth, fetchClient, appState, tenantUiService) {
        this.injector = injector;
        this.basicAuth = basicAuth;
        this.fetchClient = fetchClient;
        this.appState = appState;
        this.tenantUiService = tenantUiService;
        this.hookAuth();
    }
    updateBasicAuth(credentials) {
        const { headers } = this.fetchClient.getFetchOptions({});
        if (headers.Authorization) {
            const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
            if (token) {
                this.basicAuth.updateCredentials(credentials);
                this.fetchClient.setAuth(this.basicAuth);
            }
        }
    }
    hookAuth() {
        this.appState.currentUser.subscribe(u => {
            if (u) {
                this.injector.get('c8yAuth').headers = () => this.fetchClient.getFetchOptions({}).headers;
                const { headers } = this.fetchClient.getFetchOptions({});
                if (headers.Authorization) {
                    const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                    if (token) {
                        this.setToken(token, headers.tfatoken);
                    }
                }
                else {
                    this.setToken(undefined, headers.tfatoken, 'Oauth');
                }
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
            }
            else {
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
            }
        });
    }
    setToken(token, tfa, type = 'Basic') {
        const c8yAuth = this.injector.get('c8yAuth');
        if (type === 'Basic') {
            c8yAuth.onSetToken({ token, type });
            if (tfa) {
                c8yAuth.setTFAToken(tfa);
            }
        }
        else {
            c8yAuth.authReady();
        }
    }
    getPreferredLoginOption() {
        return this.tenantUiService.getPreferredLoginOption(this.appState.state.loginOptions);
    }
}
export function authBridgeServiceFactory(injector, basicAuth, fetchClient, appState, tenantUiService) {
    return new AuthBridgeService(injector, basicAuth, fetchClient, appState, tenantUiService);
}
export const authBridgeServiceProvider = {
    provide: AuthBridgeService,
    useFactory: authBridgeServiceFactory,
    deps: ['$injector', BasicAuth, FetchClient, AppStateService, TenantUiService]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1icmlkZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3VwZ3JhZGUvYXV0aC1icmlkZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLGVBQWUsRUFDaEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxhQUFhLENBQUM7QUFFbkUsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUNTLFFBQWEsRUFDWixTQUFvQixFQUNwQixXQUF3QixFQUN4QixRQUF5QixFQUN6QixlQUFnQztRQUpqQyxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQ1osY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFeEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxlQUFlLENBQUMsV0FBeUI7UUFDdkMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5RCxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDMUM7U0FDRjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxFQUFFO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQzFGLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDekQsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO29CQUN6QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDOUQsSUFBSSxLQUFLLEVBQUU7d0JBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUN4QztpQkFDRjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNyRDtnQkFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM3RTtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUM5RTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFjLEVBQUUsR0FBWSxFQUFFLElBQUksR0FBRyxPQUFPO1FBQ25ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUNwQixPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMxQjtTQUNGO2FBQU07WUFDTCxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsdUJBQXVCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4RixDQUFDO0NBQ0Y7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQ3RDLFFBQWEsRUFDYixTQUFvQixFQUNwQixXQUF3QixFQUN4QixRQUF5QixFQUN6QixlQUFnQztJQUVoQyxPQUFPLElBQUksaUJBQWlCLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzVGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2QyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFVBQVUsRUFBRSx3QkFBd0I7SUFDcEMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGVBQWUsQ0FBQztDQUM5RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwU3RhdGVTZXJ2aWNlLFxuICBUZW5hbnRVaVNlcnZpY2Vcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCYXNpY0F1dGgsIEZldGNoQ2xpZW50LCBJQ3JlZGVudGlhbHMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbmV4cG9ydCBjbGFzcyBBdXRoQnJpZGdlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBpbmplY3RvcjogYW55LFxuICAgIHByaXZhdGUgYmFzaWNBdXRoOiBCYXNpY0F1dGgsXG4gICAgcHJpdmF0ZSBmZXRjaENsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGVuYW50VWlTZXJ2aWNlOiBUZW5hbnRVaVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5ob29rQXV0aCgpO1xuICB9XG5cbiAgdXBkYXRlQmFzaWNBdXRoKGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHRoaXMuZmV0Y2hDbGllbnQuZ2V0RmV0Y2hPcHRpb25zKHt9KTtcbiAgICBpZiAoaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGhlYWRlcnMuQXV0aG9yaXphdGlvbi5tYXRjaCgvYmFzaWNcXHMoLiopJC9pKVsxXTtcbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICB0aGlzLmJhc2ljQXV0aC51cGRhdGVDcmVkZW50aWFscyhjcmVkZW50aWFscyk7XG4gICAgICAgIHRoaXMuZmV0Y2hDbGllbnQuc2V0QXV0aCh0aGlzLmJhc2ljQXV0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaG9va0F1dGgoKSB7XG4gICAgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VXNlci5zdWJzY3JpYmUodSA9PiB7XG4gICAgICBpZiAodSkge1xuICAgICAgICB0aGlzLmluamVjdG9yLmdldCgnYzh5QXV0aCcpLmhlYWRlcnMgPSAoKSA9PiB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSkuaGVhZGVycztcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSk7XG4gICAgICAgIGlmIChoZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IGhlYWRlcnMuQXV0aG9yaXphdGlvbi5tYXRjaCgvYmFzaWNcXHMoLiopJC9pKVsxXTtcbiAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4odG9rZW4sIGhlYWRlcnMudGZhdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFRva2VuKHVuZGVmaW5lZCwgaGVhZGVycy50ZmF0b2tlbiwgJ09hdXRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFRva2VuKHRva2VuPzogc3RyaW5nLCB0ZmE/OiBzdHJpbmcsIHR5cGUgPSAnQmFzaWMnKSB7XG4gICAgY29uc3QgYzh5QXV0aCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlBdXRoJyk7XG4gICAgaWYgKHR5cGUgPT09ICdCYXNpYycpIHtcbiAgICAgIGM4eUF1dGgub25TZXRUb2tlbih7IHRva2VuLCB0eXBlIH0pO1xuICAgICAgaWYgKHRmYSkge1xuICAgICAgICBjOHlBdXRoLnNldFRGQVRva2VuKHRmYSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGM4eUF1dGguYXV0aFJlYWR5KCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0UHJlZmVycmVkTG9naW5PcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGVuYW50VWlTZXJ2aWNlLmdldFByZWZlcnJlZExvZ2luT3B0aW9uKHRoaXMuYXBwU3RhdGUuc3RhdGUubG9naW5PcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0aEJyaWRnZVNlcnZpY2VGYWN0b3J5KFxuICBpbmplY3RvcjogYW55LFxuICBiYXNpY0F1dGg6IEJhc2ljQXV0aCxcbiAgZmV0Y2hDbGllbnQ6IEZldGNoQ2xpZW50LFxuICBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICB0ZW5hbnRVaVNlcnZpY2U6IFRlbmFudFVpU2VydmljZVxuKSB7XG4gIHJldHVybiBuZXcgQXV0aEJyaWRnZVNlcnZpY2UoaW5qZWN0b3IsIGJhc2ljQXV0aCwgZmV0Y2hDbGllbnQsIGFwcFN0YXRlLCB0ZW5hbnRVaVNlcnZpY2UpO1xufVxuXG5leHBvcnQgY29uc3QgYXV0aEJyaWRnZVNlcnZpY2VQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogQXV0aEJyaWRnZVNlcnZpY2UsXG4gIHVzZUZhY3Rvcnk6IGF1dGhCcmlkZ2VTZXJ2aWNlRmFjdG9yeSxcbiAgZGVwczogWyckaW5qZWN0b3InLCBCYXNpY0F1dGgsIEZldGNoQ2xpZW50LCBBcHBTdGF0ZVNlcnZpY2UsIFRlbmFudFVpU2VydmljZV1cbn07XG4iXX0=