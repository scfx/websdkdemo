import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AlarmsDeviceGridColumn, DeviceGridComponent, GroupDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, StatusDeviceGridColumn, TypeDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { FilteringActionType } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/device-grid';
import * as ɵngcc2 from '@c8y/ngx-components';

const _c0 = function () { return []; };
export class DeviceSelectorComponent {
    constructor() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe((types) => {
                this.deviceGrid.updateFiltering([this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
}
DeviceSelectorComponent.ɵfac = function DeviceSelectorComponent_Factory(t) { return new (t || DeviceSelectorComponent)(); };
DeviceSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceSelectorComponent, selectors: [["c8y-device-selector"]], viewQuery: function DeviceSelectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DeviceGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.deviceGrid = _t.first);
    } }, inputs: { deviceTypes: "deviceTypes" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange" }, decls: 12, vars: 13, consts: [[3, "title", "columns", "actionControls", "infiniteScroll", "onDeviceQueryStringChange"], [1, "c8y-empty-state"], ["c8yIcon", "search"]], template: function DeviceSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-device-grid", 0);
        ɵngcc0.ɵɵlistener("onDeviceQueryStringChange", function DeviceSelectorComponent_Template_c8y_device_grid_onDeviceQueryStringChange_0_listener($event) { return ctx.onDeviceQueryStringChange.emit($event); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelement(3, "h1", 2);
        ɵngcc0.ɵɵelementStart(4, "div");
        ɵngcc0.ɵɵelementStart(5, "p");
        ɵngcc0.ɵɵelementStart(6, "strong");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "small");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 6, "Select target devices"))("columns", ctx.columns)("actionControls", ɵngcc0.ɵɵpureFunction0(12, _c0))("infiniteScroll", "auto");
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, "No matching devices."));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 10, "Refine your search terms"));
    } }, directives: [ɵngcc1.DeviceGridComponent, ɵngcc2.IconDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
DeviceSelectorComponent.propDecorators = {
    deviceGrid: [{ type: ViewChild, args: [DeviceGridComponent, { static: true },] }],
    deviceTypes: [{ type: Input }],
    onDeviceQueryStringChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-selector',
                template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n"
            }]
    }], function () { return []; }, { onDeviceQueryStringChange: [{
            type: Output
        }], deviceGrid: [{
            type: ViewChild,
            args: [DeviceGridComponent, { static: true }]
        }], deviceTypes: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9kZXZpY2Utc2VsZWN0b3IvZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG9CQUFvQixFQUNwQixnQ0FBZ0MsRUFDaEMsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNyQixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBVSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFNakUsTUFBTSxPQUFPLHVCQUF1QjtBQUFHLElBSnZDO0FBQ0csUUFVRCxlQUFVLEdBQVcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO0FBQ2xELFFBRUUsOEJBQXlCLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7QUFDL0UsUUFDRSxZQUFPLEdBQWE7QUFDdEIsWUFBSSxJQUFJLHNCQUFzQixFQUFFO0FBQ2hDLFlBQUksSUFBSSxvQkFBb0IsRUFBRTtBQUM5QixZQUFJLElBQUksQ0FBQyxVQUFVO0FBQ25CLFlBQUksSUFBSSxxQkFBcUIsRUFBRTtBQUMvQixZQUFJLElBQUkscUJBQXFCLEVBQUU7QUFDL0IsWUFBSSxJQUFJLGdDQUFnQyxFQUFFO0FBQzFDLFlBQUksSUFBSSxzQkFBc0IsRUFBRTtBQUNoQyxTQUFHLENBQUM7QUFDSixRQUNVLGlCQUFZLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7QUFDekQsSUFnQ0EsQ0FBQztBQUNELElBaENFLFFBQVE7QUFBSyxRQUNYLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixZQUFNLElBQUksQ0FBQyxXQUFXO0FBQ3RCLGlCQUFTLElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUM3QjtBQUNULGlCQUFTLFNBQVMsQ0FBQyxDQUFDLEtBQWUsRUFBRSxFQUFFO0FBQ3ZDLGdCQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNsRSxvQkFBWSxJQUFJLEVBQ0YsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNO0FBQ25DLHdCQUFnQixDQUFDLENBQUMsbUJBQW1CLENBQUMsV0FBVztBQUNqRCx3QkFBZ0IsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFdBQVc7QUFDakQsb0JBQVksT0FBTyxFQUFFLEtBQUs7QUFDMUIsd0JBQWMsQ0FBQyxDQUFDO0FBQ2hCLDRCQUFrQixpQkFBaUIsRUFBRTtBQUNyQyxnQ0FBb0IsbUJBQW1CLEVBQUU7QUFDekMsb0NBQXNCLEtBQUs7QUFDM0IsaUNBQXFCO0FBQ3JCLDZCQUFtQjtBQUNuQix5QkFBaUI7QUFDakIsd0JBQWMsQ0FBQyxDQUFDLFNBQVM7QUFDekIsaUJBQVcsQ0FBQyxDQUFDO0FBQ2IsWUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFBSyxRQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFDSDttREEzREMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxxQkFBcUI7V0FDL0I7Ozs7OzBJQUE2QyxjQUM5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0hBQ0k7QUFBQztBQUEyQyx5QkFDOUMsU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUM3QywwQkFFRixLQUFLO0FBQ04sd0NBSUMsTUFBTTtBQUNSOzs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBbGFybXNEZXZpY2VHcmlkQ29sdW1uLFxuICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICBHcm91cERldmljZUdyaWRDb2x1bW4sXG4gIE1vZGVsRGV2aWNlR3JpZENvbHVtbixcbiAgTmFtZURldmljZUdyaWRDb2x1bW4sXG4gIFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uLFxuICBTdGF0dXNEZXZpY2VHcmlkQ29sdW1uLFxuICBUeXBlRGV2aWNlR3JpZENvbHVtblxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IENvbHVtbiwgRmlsdGVyaW5nQWN0aW9uVHlwZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWRldmljZS1zZWxlY3RvcicsXG4gIHRlbXBsYXRlVXJsOiAnZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZChEZXZpY2VHcmlkQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBkZXZpY2VHcmlkOiBEZXZpY2VHcmlkQ29tcG9uZW50O1xuXG4gIEBJbnB1dCgpXG4gIGRldmljZVR5cGVzOiBPYnNlcnZhYmxlPHN0cmluZ1tdPjtcblxuICB0eXBlQ29sdW1uOiBDb2x1bW4gPSBuZXcgVHlwZURldmljZUdyaWRDb2x1bW4oKTtcblxuICBAT3V0cHV0KClcbiAgb25EZXZpY2VRdWVyeVN0cmluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBjb2x1bW5zOiBDb2x1bW5bXSA9IFtcbiAgICBuZXcgU3RhdHVzRGV2aWNlR3JpZENvbHVtbigpLFxuICAgIG5ldyBOYW1lRGV2aWNlR3JpZENvbHVtbigpLFxuICAgIHRoaXMudHlwZUNvbHVtbixcbiAgICBuZXcgTW9kZWxEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IEdyb3VwRGV2aWNlR3JpZENvbHVtbigpLFxuICAgIG5ldyBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbigpLFxuICAgIG5ldyBBbGFybXNEZXZpY2VHcmlkQ29sdW1uKClcbiAgXTtcblxuICBwcml2YXRlIHVuc3Vic2NyaWJlJDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGV2aWNlVHlwZXMpIHtcbiAgICAgIHRoaXMuZGV2aWNlVHlwZXNcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgodHlwZXM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgdGhpcy5kZXZpY2VHcmlkLnVwZGF0ZUZpbHRlcmluZyhbdGhpcy50eXBlQ29sdW1uLm5hbWVdLCB7XG4gICAgICAgICAgICB0eXBlOlxuICAgICAgICAgICAgICB0eXBlcyAmJiB0eXBlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICA/IEZpbHRlcmluZ0FjdGlvblR5cGUuQXBwbHlGaWx0ZXJcbiAgICAgICAgICAgICAgICA6IEZpbHRlcmluZ0FjdGlvblR5cGUuUmVzZXRGaWx0ZXIsXG4gICAgICAgICAgICBwYXlsb2FkOiB0eXBlc1xuICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGZpbHRlcmluZ01vZGlmaWVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVybmFsRmlsdGVyUXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KHRydWUpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==