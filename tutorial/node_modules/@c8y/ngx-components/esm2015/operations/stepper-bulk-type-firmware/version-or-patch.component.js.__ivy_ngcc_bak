import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { memoize } from '@c8y/ngx-components';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { RepositoryService } from '@c8y/ngx-components/repository';
import { property } from 'lodash-es';
import { defer, of } from 'rxjs';
import { catchError, distinctUntilChanged, distinctUntilKeyChanged, map, shareReplay, switchMap, tap } from 'rxjs/operators';
export class VersionOrPatchComponent {
    constructor(repositoryService, inventoryService, bulkOpsService) {
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(id => defer(() => this.inventoryService.detail(id).then(result => result.data)).pipe(catchError(error => of(error)))), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersions(firmware)), tap(resp => {
            this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(firmware => this.repositoryService.isLegacyEntry(firmware)), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    getBaseVersionAndPatches$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)), shareReplay(1));
    }
    getPatchVersionsCount$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)), shareReplay(1));
    }
    selectVersionOrPatch(selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    }
}
VersionOrPatchComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-version-or-patch-step',
                template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
            },] }
];
VersionOrPatchComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: InventoryService },
    { type: BulkOperationsService }
];
VersionOrPatchComponent.propDecorators = {
    selected: [{ type: Input }],
    versionOrPatch: [{ type: Output }]
};
__decorate([
    memoize()
], VersionOrPatchComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize(property('id'))
], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
__decorate([
    memoize(property('id'))
], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1vci1wYXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWZpcm13YXJlL3ZlcnNpb24tb3ItcGF0Y2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQWUsTUFBTSxhQUFhLENBQUM7QUFDNUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQy9GLE9BQU8sRUFBa0IsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxVQUFVLEVBQ1Ysb0JBQW9CLEVBQ3BCLHVCQUF1QixFQUN2QixHQUFHLEVBQ0gsV0FBVyxFQUNYLFNBQVMsRUFDVCxHQUFHLEVBQ0osTUFBTSxnQkFBZ0IsQ0FBQztBQU14QixNQUFNLE9BQU8sdUJBQXVCO0lBaUNsQyxZQUNVLGlCQUFvQyxFQUNwQyxnQkFBa0MsRUFDbEMsY0FBcUM7UUFGckMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQWxDckMsbUJBQWMsR0FBaUMsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFFNUYsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFFMUIsY0FBUyxH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RTs2REFHVDtBQUdEO0lBREMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3RUFTdkI7QUFHRDtJQURDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7cUVBUXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlLCBJUmVzdWx0TGlzdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5pbXBvcnQgeyBGaXJtd2FyZUJpbmFyeSwgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnknO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZGVmZXIsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjYXRjaEVycm9yLFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgZGlzdGluY3RVbnRpbEtleUNoYW5nZWQsXG4gIG1hcCxcbiAgc2hhcmVSZXBsYXksXG4gIHN3aXRjaE1hcCxcbiAgdGFwXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXZlcnNpb24tb3ItcGF0Y2gtc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAndmVyc2lvbi1vci1wYXRjaC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVmVyc2lvbk9yUGF0Y2hDb21wb25lbnQge1xuICBASW5wdXQoKSBzZWxlY3RlZDogSU1hbmFnZWRPYmplY3Q7XG4gIEBPdXRwdXQoKSB2ZXJzaW9uT3JQYXRjaDogRXZlbnRFbWl0dGVyPElNYW5hZ2VkT2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8SU1hbmFnZWRPYmplY3Q+KCk7XG5cbiAgZWxlbWVudENvdW50OiBudW1iZXIgPSAwO1xuICBERF9MT1dfQ09VTlQ6IG51bWJlciA9IDEwO1xuXG4gIGZpcm13YXJlJDogT2JzZXJ2YWJsZTxJTWFuYWdlZE9iamVjdD4gPSB0aGlzLmJ1bGtPcHNTZXJ2aWNlLmZpcm13YXJlSWQucGlwZShcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgIHN3aXRjaE1hcChpZCA9PlxuICAgICAgZGVmZXIoKCkgPT4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChpZCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LmRhdGEpKS5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKGVycm9yID0+IG9mKGVycm9yKSlcbiAgICAgIClcbiAgICApLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG5cbiAgYmFzZVZlcnNpb25zJDogT2JzZXJ2YWJsZTxJUmVzdWx0TGlzdDxJTWFuYWdlZE9iamVjdD4+ID0gdGhpcy5maXJtd2FyZSQucGlwZShcbiAgICBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgnaWQnKSxcbiAgICBzd2l0Y2hNYXAoZmlybXdhcmUgPT4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0QmFzZVZlcnNpb25zKGZpcm13YXJlKSksXG4gICAgdGFwKHJlc3AgPT4ge1xuICAgICAgdGhpcy5lbGVtZW50Q291bnQgPSByZXNwLmRhdGEgPyByZXNwLmRhdGEubGVuZ3RoIDogMDtcbiAgICB9KSxcbiAgICBzaGFyZVJlcGxheSgxKVxuICApO1xuXG4gIGlzTGVnYWN5JDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZmlybXdhcmUkLnBpcGUoXG4gICAgbWFwKGZpcm13YXJlID0+IHRoaXMucmVwb3NpdG9yeVNlcnZpY2UuaXNMZWdhY3lFbnRyeShmaXJtd2FyZSkpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG5cbiAgZXhwYW5kZWQ6IHsgW2lkOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBidWxrT3BzU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuRERfTE9XX0NPVU5UID0gdGhpcy5idWxrT3BzU2VydmljZS5ERF9MT1dfQ09VTlQ7XG4gIH1cblxuICBAbWVtb2l6ZSgpXG4gIGdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCkge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCk7XG4gIH1cblxuICBAbWVtb2l6ZShwcm9wZXJ0eSgnaWQnKSlcbiAgZ2V0QmFzZVZlcnNpb25BbmRQYXRjaGVzJChiYXNlVmVyc2lvbikge1xuICAgIHJldHVybiB0aGlzLmZpcm13YXJlJC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoJ2lkJyksXG4gICAgICBzd2l0Y2hNYXAoZmlybXdhcmUgPT5cbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0QmFzZVZlcnNpb25BbmRQYXRjaGVzKGZpcm13YXJlLCBiYXNlVmVyc2lvbilcbiAgICAgICksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBAbWVtb2l6ZShwcm9wZXJ0eSgnaWQnKSlcbiAgZ2V0UGF0Y2hWZXJzaW9uc0NvdW50JChiYXNlVmVyc2lvbjogRmlybXdhcmVCaW5hcnkpIHtcbiAgICByZXR1cm4gdGhpcy5maXJtd2FyZSQucGlwZShcbiAgICAgIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKCdpZCcpLFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZmlybXdhcmUkKSxcbiAgICAgIHN3aXRjaE1hcChmaXJtd2FyZSA9PiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldFBhdGNoVmVyc2lvbnNDb3VudCQoZmlybXdhcmUsIGJhc2VWZXJzaW9uKSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBzZWxlY3RWZXJzaW9uT3JQYXRjaChzZWxlY3RlZDogYm9vbGVhbiwgdmVyc2lvbk9yUGF0Y2g6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICB0aGlzLnZlcnNpb25PclBhdGNoLmVtaXQodmVyc2lvbk9yUGF0Y2gpO1xuICAgIH1cbiAgfVxufVxuIl19