import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { DeviceProfileModule } from '@c8y/ngx-components/device-profile';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { ConfirmDeviceProfileSelectionStepComponent } from './confirm-device-profile-selection-step.component';
import { SelectDeviceProfileStepComponent } from './select-device-profile-step.component';
import { StepperBulkTypeDeviceProfileComponent } from './stepper-bulk-type-device-profile.component';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = {
    type: BulkOperationType.DEVICE_PROFILE,
    c8yIcon: 'c8y-device-profile',
    name: gettext('Apply device profile'),
    path: `${baseUrl}device-profile`,
    component: StepperBulkTypeDeviceProfileComponent,
    fragments: ['c8y_DeviceProfile'],
    selected: false
};
/** Module for the 'Apply device profile' operation type stepper */
export class StepperBulkTypeDeviceProfileModule {
}
StepperBulkTypeDeviceProfileModule.ɵfac = function StepperBulkTypeDeviceProfileModule_Factory(t) { return new (t || StepperBulkTypeDeviceProfileModule)(); };
StepperBulkTypeDeviceProfileModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StepperBulkTypeDeviceProfileModule });
StepperBulkTypeDeviceProfileModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_LIST_BULK_TYPE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            DeviceProfileModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeDeviceProfileModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    StepperBulkTypeDeviceProfileComponent,
                    SelectDeviceProfileStepComponent,
                    ConfirmDeviceProfileSelectionStepComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    DeviceProfileModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeDeviceProfileComponent],
                exports: [StepperBulkTypeDeviceProfileComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StepperBulkTypeDeviceProfileModule, { declarations: function () { return [StepperBulkTypeDeviceProfileComponent,
        SelectDeviceProfileStepComponent,
        ConfirmDeviceProfileSelectionStepComponent]; }, imports: function () { return [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        DeviceProfileModule]; }, exports: function () { return [StepperBulkTypeDeviceProfileComponent]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZGV2aWNlLXByb2ZpbGUubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWRldmljZS1wcm9maWxlL3N0ZXBwZXItYnVsay10eXBlLWRldmljZS1wcm9maWxlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLGlCQUFpQixFQUNsQixNQUFNLHdEQUF3RCxDQUFDO0FBRWhFLE9BQU8sRUFBRSwwQ0FBMEMsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQy9HLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOztBQUNyRyxXQWtCZ0I7QUFDaEIsSUFBUSxJQUFJLEVBQUUsaUJBQWlCLENBQUMsY0FBYztBQUM5QyxJQUFRLE9BQU8sRUFBRSxvQkFBb0I7QUFDckMsSUFBUSxJQUFJLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQzdDLElBQVEsSUFBSSxFQUFFLEdBQUcsT0FBTyxnQkFBZ0I7QUFDeEMsSUFBUSxTQUFTLEVBQUUscUNBQXFDO0FBQ3hELElBQVEsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUM7QUFDeEMsSUFBUSxRQUFRLEVBQUUsS0FBSztBQUN2QixDQUFPO0FBekJQLG1FQUFtRTtBQWdDbkUsTUFBTSxPQUFPLGtDQUFrQztBQUFHOzhEQS9CakQsUUFBUSxTQUFDLGtCQUNSLFlBQVksRUFBRSxzQkFDWjtZQUFxQyxzQkFDckMsZ0NBQWdDLHNCQUNoQztHQUEwQyxrQkFDM0Msa0JBQ0QsT0FBTyxFQUFFLHNCQUNQLFVBQVU7T0FDVjtRQUFXLHNCQUNYO09BQW1CO0dBQ25CO0tBQTBCO2lCQUMxQjtpQkFBbUI7V0FDcEI7SUFDRCxTQUFTLEVBQUU7SUFDVCwwQkFDRSxPQUFPLEVBQUU7a0JBQW1CO1lBQzVCO0tBQVEsSUFRUCwwQkFDRCxLQUFLLEVBQUUsSUFBSSxzQkFDWixrQkFDRixrQkFDRCxlQUFlLEVBQUUsQ0FBQzs7S0FBcUMsQ0FBQztPQUN4RCxPQUFPLEVBQUUsQ0FBQztzQkFBcUMsQ0FBQyxjQUNqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttSEFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQ29yZU1vZHVsZSwgRm9ybXNNb2R1bGUsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZVByb2ZpbGVNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1wcm9maWxlJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXInO1xuaW1wb3J0IHtcbiAgSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgYmFzZVVybCxcbiAgQnVsa09wZXJhdGlvblR5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuaW1wb3J0IHsgQ29uZmlybURldmljZVByb2ZpbGVTZWxlY3Rpb25TdGVwQ29tcG9uZW50IH0gZnJvbSAnLi9jb25maXJtLWRldmljZS1wcm9maWxlLXNlbGVjdGlvbi1zdGVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3REZXZpY2VQcm9maWxlU3RlcENvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWRldmljZS1wcm9maWxlLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IFN0ZXBwZXJCdWxrVHlwZURldmljZVByb2ZpbGVDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItYnVsay10eXBlLWRldmljZS1wcm9maWxlLmNvbXBvbmVudCc7XG5cbi8qKiBNb2R1bGUgZm9yIHRoZSAnQXBwbHkgZGV2aWNlIHByb2ZpbGUnIG9wZXJhdGlvbiB0eXBlIHN0ZXBwZXIgKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFN0ZXBwZXJCdWxrVHlwZURldmljZVByb2ZpbGVDb21wb25lbnQsXG4gICAgU2VsZWN0RGV2aWNlUHJvZmlsZVN0ZXBDb21wb25lbnQsXG4gICAgQ29uZmlybURldmljZVByb2ZpbGVTZWxlY3Rpb25TdGVwQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgQnVsa09wZXJhdGlvblN0ZXBwZXJNb2R1bGUsXG4gICAgRGV2aWNlUHJvZmlsZU1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX0xJU1RfQlVMS19UWVBFLFxuICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgdHlwZTogQnVsa09wZXJhdGlvblR5cGUuREVWSUNFX1BST0ZJTEUsXG4gICAgICAgIGM4eUljb246ICdjOHktZGV2aWNlLXByb2ZpbGUnLFxuICAgICAgICBuYW1lOiBnZXR0ZXh0KCdBcHBseSBkZXZpY2UgcHJvZmlsZScpLFxuICAgICAgICBwYXRoOiBgJHtiYXNlVXJsfWRldmljZS1wcm9maWxlYCxcbiAgICAgICAgY29tcG9uZW50OiBTdGVwcGVyQnVsa1R5cGVEZXZpY2VQcm9maWxlQ29tcG9uZW50LFxuICAgICAgICBmcmFnbWVudHM6IFsnYzh5X0RldmljZVByb2ZpbGUnXSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1N0ZXBwZXJCdWxrVHlwZURldmljZVByb2ZpbGVDb21wb25lbnRdLFxuICBleHBvcnRzOiBbU3RlcHBlckJ1bGtUeXBlRGV2aWNlUHJvZmlsZUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckJ1bGtUeXBlRGV2aWNlUHJvZmlsZU1vZHVsZSB7fVxuIl19