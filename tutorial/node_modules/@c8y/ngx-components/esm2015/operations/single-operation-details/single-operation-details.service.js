import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { OperationService } from '@c8y/client';
import { SingleOperationModalComponent } from './single-operation-modal.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from 'ngx-bootstrap/modal';
export class SingleOperationDetailsService {
    constructor(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    openDetails(operationOrOperationId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = operationOrOperationId.id
                ? operationOrOperationId
                : (yield this.operationService.detail(operationOrOperationId)).data;
            const initialState = Object.assign({ operation }, options);
            this.modalService.show(SingleOperationModalComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
SingleOperationDetailsService.ɵfac = function SingleOperationDetailsService_Factory(t) { return new (t || SingleOperationDetailsService)(ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.BsModalService)); };
SingleOperationDetailsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SingleOperationDetailsService, factory: SingleOperationDetailsService.ɵfac });
SingleOperationDetailsService.ctorParameters = () => [
    { type: OperationService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationDetailsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OperationService }, { type: ɵngcc2.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvc2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzL3NpbmdsZS1vcGVyYXRpb24tZGV0YWlscy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0QsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7Ozs7QUFHbkYsTUFBTSxPQUFPLDZCQUE2QjtBQUMxQyxJQUFFLFlBQW9CLGdCQUFrQyxFQUFVLFlBQTRCO0FBQUksUUFBNUUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQVMsaUJBQVksR0FBWixZQUFZLENBQWdCO0FBQUMsSUFBRSxDQUFDO0FBQ2xHLElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FEQztBQUNMLElBQVEsV0FBVyxDQUNmLHNCQUFvRCxFQUNwRCxPQUFxRDtBQUN0RDtBQUN3RCxZQUF2RCxNQUFNLFNBQVMsR0FBZ0Isc0JBQXFDLENBQUMsRUFBRTtBQUMzRSxnQkFBTSxDQUFDLENBQUUsc0JBQXFDO0FBQzlDLGdCQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzFFLFlBQUksTUFBTSxZQUFZLG1CQUFLLFNBQVMsSUFBSyxPQUFPLENBQUUsQ0FBQztBQUNuRCxZQUNJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFO0FBQzFELGdCQUFNLFlBQVk7QUFDbEIsZ0JBQU0sS0FBSyxFQUFFLFVBQVU7QUFDdkIsYUFBSyxDQUFDLENBQUM7QUFDUCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7eURBekJDLFVBQVU7cUtBQ1Q7QUFBQztBQUNVLFlBTFEsZ0JBQWdCO0FBQUksWUFEaEMsY0FBYztBQUFHOzs7a0hBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBJT3BlcmF0aW9uLCBPcGVyYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU2luZ2xlT3BlcmF0aW9uTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3NpbmdsZS1vcGVyYXRpb24tbW9kYWwuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpbmdsZU9wZXJhdGlvbkRldGFpbHNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcGVyYXRpb25TZXJ2aWNlOiBPcGVyYXRpb25TZXJ2aWNlLCBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgbW9kYWwgd2luZG93IHdpdGggdGhlIGRldGFpbHMgb2YgZ2l2ZW4gc2luZ2xlIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQgT3BlcmF0aW9uJ3Mgb2JqZWN0IG9yIGlkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnM6XG4gICAqIC0gYGNvbGxhcHNlZGA6IGJvb2xlYW4gLSB3aGV0aGVyIHRoZSBkZXRhaWxzIHBhbmUgc2hvdWxkIGJlIGluaXRpYWxseSBjb2xsYXBzZWRcbiAgICogLSBgcmVhZE9ubHlgOiBib29sZWFuIC0gd2hldGhlciB0aGUgZGV0YWlscyBzaG91bGQgYmUgZGlzcGxheWVkIGluIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICBhc3luYyBvcGVuRGV0YWlscyhcbiAgICBvcGVyYXRpb25Pck9wZXJhdGlvbklkOiBJT3BlcmF0aW9uIHwgc3RyaW5nIHwgbnVtYmVyLFxuICAgIG9wdGlvbnM/OiB7IGNvbGxhcHNlZD86IGJvb2xlYW47IHJlYWRPbmx5PzogYm9vbGVhbiB9XG4gICkge1xuICAgIGNvbnN0IG9wZXJhdGlvbjogSU9wZXJhdGlvbiA9IChvcGVyYXRpb25Pck9wZXJhdGlvbklkIGFzIElPcGVyYXRpb24pLmlkXG4gICAgICA/IChvcGVyYXRpb25Pck9wZXJhdGlvbklkIGFzIElPcGVyYXRpb24pXG4gICAgICA6IChhd2FpdCB0aGlzLm9wZXJhdGlvblNlcnZpY2UuZGV0YWlsKG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQpKS5kYXRhO1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHsgb3BlcmF0aW9uLCAuLi5vcHRpb25zIH07XG5cbiAgICB0aGlzLm1vZGFsU2VydmljZS5zaG93KFNpbmdsZU9wZXJhdGlvbk1vZGFsQ29tcG9uZW50LCB7XG4gICAgICBpbml0aWFsU3RhdGUsXG4gICAgICBjbGFzczogJ21vZGFsLWxnJ1xuICAgIH0pO1xuICB9XG59XG4iXX0=