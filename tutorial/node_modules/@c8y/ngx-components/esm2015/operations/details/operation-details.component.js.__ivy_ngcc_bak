import { Component, Input } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { gettext } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
export class OperationDetailsComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.titlePlaceholder = gettext('e.g. Reset factory settings');
        this.descriptionPlaceholder = gettext('e.g. Reset factory settings of all devices of model XYZ');
        this.placeholders = {
            [BulkOperationType.SOFTWARE]: {
                title: gettext('e.g. Cloud connectivity software'),
                description: gettext('e.g. Cloud connectivity software applied to devices with type c8y_Linux')
            },
            [BulkOperationType.FIRMWARE]: {
                title: gettext('e.g. Firmware for hardware revision b'),
                description: gettext('e.g. Firmware for hardware revision b applied to devices with type c8y_Linux')
            },
            [BulkOperationType.CONFIGURATION]: {
                title: gettext('e.g. Host configuration c8y_Linux'),
                description: gettext('e.g. Host configuration applied to devices with type c8y_Linux')
            },
            [BulkOperationType.DEVICE_PROFILE]: {
                title: gettext('e.g. Device profile for c8y_Linux devices'),
                description: gettext('e.g. Device profile applied to devices with type c8y_Linux')
            }
        };
    }
    set bulkOperationType(bulkOperationType) {
        this.titlePlaceholder = get(this.placeholders[bulkOperationType], 'title');
        this.descriptionPlaceholder = get(this.placeholders[bulkOperationType], 'description');
    }
    ngOnInit() {
        const config = {
            description: ['', Validators.required],
            note: [''],
            schedule: []
        };
        this.fgOperationDescription = this.formBuilder.group(config);
    }
}
OperationDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-operation-details',
                template: "<div [formGroup]=\"fgOperationDescription\">\n  <c8y-form-group>\n    <label translate>Title</label>\n    <input\n      formControlName=\"description\"\n      class=\"form-control\"\n      [placeholder]=\"titlePlaceholder | translate\"\n      required\n    />\n    <c8y-messages *ngIf=\"fgOperationDescription?.controls?.description?.errors\">\n      <c8y-message *ngIf=\"fgOperationDescription.controls.description.errors.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label translate>Description</label>\n    <textarea\n      formControlName=\"note\"\n      class=\"form-control\"\n      [placeholder]=\"descriptionPlaceholder | translate\"\n      rows=\"3\"\n    ></textarea>\n  </c8y-form-group>\n  <c8y-operation-scheduler formControlName=\"schedule\"></c8y-operation-scheduler>\n</div>\n"
            },] }
];
OperationDetailsComponent.ctorParameters = () => [
    { type: FormBuilder }
];
OperationDetailsComponent.propDecorators = {
    bulkOperationType: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWRldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9kZXRhaWxzL29wZXJhdGlvbi1kZXRhaWxzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFhLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBbUIsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQ0wsaUJBQWlCLEVBRWxCLE1BQU0sd0RBQXdELENBQUM7QUFNaEUsTUFBTSxPQUFPLHlCQUF5QjtJQW9DcEMsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUE3QjVDLHFCQUFnQixHQUFXLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2xFLDJCQUFzQixHQUFXLE9BQU8sQ0FDdEMseURBQXlELENBQzFELENBQUM7UUFHTSxpQkFBWSxHQUEyRTtZQUM3RixDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM1QixLQUFLLEVBQUUsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO2dCQUNsRCxXQUFXLEVBQUUsT0FBTyxDQUNsQix5RUFBeUUsQ0FDMUU7YUFDRjtZQUNELENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzVCLEtBQUssRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7Z0JBQ3ZELFdBQVcsRUFBRSxPQUFPLENBQ2xCLDhFQUE4RSxDQUMvRTthQUNGO1lBQ0QsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsRUFBRTtnQkFDakMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQztnQkFDbkQsV0FBVyxFQUFFLE9BQU8sQ0FBQyxnRUFBZ0UsQ0FBQzthQUN2RjtZQUNELENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQ2xDLEtBQUssRUFBRSxPQUFPLENBQUMsMkNBQTJDLENBQUM7Z0JBQzNELFdBQVcsRUFBRSxPQUFPLENBQUMsNERBQTRELENBQUM7YUFDbkY7U0FDRixDQUFDO0lBRTZDLENBQUM7SUFuQ2hELElBQ0ksaUJBQWlCLENBQUMsaUJBQW9DO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFpQ0QsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFzQztZQUNoRCxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN0QyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDVixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7UUFFRixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7O1lBbERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx1NEJBQStDO2FBQ2hEOzs7WUFYUSxXQUFXOzs7Z0NBYWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtR3JvdXBDb25maWcsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQge1xuICBCdWxrT3BlcmF0aW9uVHlwZSxcbiAgT3BlcmF0aW9uRGV0YWlsc1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktb3BlcmF0aW9uLWRldGFpbHMnLFxuICB0ZW1wbGF0ZVVybDogJ29wZXJhdGlvbi1kZXRhaWxzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBPcGVyYXRpb25EZXRhaWxzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgc2V0IGJ1bGtPcGVyYXRpb25UeXBlKGJ1bGtPcGVyYXRpb25UeXBlOiBCdWxrT3BlcmF0aW9uVHlwZSkge1xuICAgIHRoaXMudGl0bGVQbGFjZWhvbGRlciA9IGdldCh0aGlzLnBsYWNlaG9sZGVyc1tidWxrT3BlcmF0aW9uVHlwZV0sICd0aXRsZScpO1xuICAgIHRoaXMuZGVzY3JpcHRpb25QbGFjZWhvbGRlciA9IGdldCh0aGlzLnBsYWNlaG9sZGVyc1tidWxrT3BlcmF0aW9uVHlwZV0sICdkZXNjcmlwdGlvbicpO1xuICB9XG5cbiAgdGl0bGVQbGFjZWhvbGRlcjogc3RyaW5nID0gZ2V0dGV4dCgnZS5nLiBSZXNldCBmYWN0b3J5IHNldHRpbmdzJyk7XG4gIGRlc2NyaXB0aW9uUGxhY2Vob2xkZXI6IHN0cmluZyA9IGdldHRleHQoXG4gICAgJ2UuZy4gUmVzZXQgZmFjdG9yeSBzZXR0aW5ncyBvZiBhbGwgZGV2aWNlcyBvZiBtb2RlbCBYWVonXG4gICk7XG4gIGZnT3BlcmF0aW9uRGVzY3JpcHRpb246IEZvcm1Hcm91cDtcblxuICBwcml2YXRlIHBsYWNlaG9sZGVyczogeyBba2V5IGluIEJ1bGtPcGVyYXRpb25UeXBlXTogeyB0aXRsZTogc3RyaW5nOyBkZXNjcmlwdGlvbjogc3RyaW5nIH0gfSA9IHtcbiAgICBbQnVsa09wZXJhdGlvblR5cGUuU09GVFdBUkVdOiB7XG4gICAgICB0aXRsZTogZ2V0dGV4dCgnZS5nLiBDbG91ZCBjb25uZWN0aXZpdHkgc29mdHdhcmUnKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KFxuICAgICAgICAnZS5nLiBDbG91ZCBjb25uZWN0aXZpdHkgc29mdHdhcmUgYXBwbGllZCB0byBkZXZpY2VzIHdpdGggdHlwZSBjOHlfTGludXgnXG4gICAgICApXG4gICAgfSxcbiAgICBbQnVsa09wZXJhdGlvblR5cGUuRklSTVdBUkVdOiB7XG4gICAgICB0aXRsZTogZ2V0dGV4dCgnZS5nLiBGaXJtd2FyZSBmb3IgaGFyZHdhcmUgcmV2aXNpb24gYicpLFxuICAgICAgZGVzY3JpcHRpb246IGdldHRleHQoXG4gICAgICAgICdlLmcuIEZpcm13YXJlIGZvciBoYXJkd2FyZSByZXZpc2lvbiBiIGFwcGxpZWQgdG8gZGV2aWNlcyB3aXRoIHR5cGUgYzh5X0xpbnV4J1xuICAgICAgKVxuICAgIH0sXG4gICAgW0J1bGtPcGVyYXRpb25UeXBlLkNPTkZJR1VSQVRJT05dOiB7XG4gICAgICB0aXRsZTogZ2V0dGV4dCgnZS5nLiBIb3N0IGNvbmZpZ3VyYXRpb24gYzh5X0xpbnV4JyksXG4gICAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnZS5nLiBIb3N0IGNvbmZpZ3VyYXRpb24gYXBwbGllZCB0byBkZXZpY2VzIHdpdGggdHlwZSBjOHlfTGludXgnKVxuICAgIH0sXG4gICAgW0J1bGtPcGVyYXRpb25UeXBlLkRFVklDRV9QUk9GSUxFXToge1xuICAgICAgdGl0bGU6IGdldHRleHQoJ2UuZy4gRGV2aWNlIHByb2ZpbGUgZm9yIGM4eV9MaW51eCBkZXZpY2VzJyksXG4gICAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnZS5nLiBEZXZpY2UgcHJvZmlsZSBhcHBsaWVkIHRvIGRldmljZXMgd2l0aCB0eXBlIGM4eV9MaW51eCcpXG4gICAgfVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbmZpZzogRm9ybUdyb3VwQ29uZmlnPE9wZXJhdGlvbkRldGFpbHM+ID0ge1xuICAgICAgZGVzY3JpcHRpb246IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICBub3RlOiBbJyddLFxuICAgICAgc2NoZWR1bGU6IFtdXG4gICAgfTtcblxuICAgIHRoaXMuZmdPcGVyYXRpb25EZXNjcmlwdGlvbiA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoY29uZmlnKTtcbiAgfVxufVxuIl19