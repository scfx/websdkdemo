import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc2 from 'ngx-bootstrap/modal';
export class BulkOperationDetailsService {
    constructor(bulkOperationsService, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalService = modalService;
    }
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationDetailsService.ɵfac = function BulkOperationDetailsService_Factory(t) { return new (t || BulkOperationDetailsService)(ɵngcc0.ɵɵinject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵinject(ɵngcc2.BsModalService)); };
BulkOperationDetailsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationDetailsService, factory: BulkOperationDetailsService.ɵfac });
BulkOperationDetailsService.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationDetailsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb24tZGV0YWlscy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1saXN0L2J1bGstb3BlcmF0aW9uLWRldGFpbHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7Ozs7QUFHbkYsTUFBTSxPQUFPLDJCQUEyQjtBQUN4QyxJQUFFLFlBQ1UscUJBQTRDLEVBQzVDLFlBQTRCO0FBQ3JDLFFBRlMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtBQUFDLFFBQzdDLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtBQUN4QyxJQUFLLENBQUM7QUFDTixJQUNRLFdBQVcsQ0FBQyxlQUFnQztBQUNwRDtBQUE4RCxZQUExRCxNQUFNLGFBQWEsR0FBbUIsQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FDMUYsZUFBZSxDQUNoQixDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ1osWUFBSSxNQUFNLFlBQVksR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDO0FBQzNDLFlBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUU7QUFDMUQsZ0JBQU0sWUFBWTtBQUNsQixnQkFBTSxLQUFLLEVBQUUsVUFBVTtBQUN2QixhQUFLLENBQUMsQ0FBQztBQUNQLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDt1REFqQkMsVUFBVTsrSkFDVDtBQUFDO0FBQ1UsWUFOSixxQkFBcUI7QUFBSSxZQUN6QixjQUFjO0FBQUc7Ozt1SEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbkJ1bGsgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25XcmFwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi9idWxrLW9wZXJhdGlvbi13cmFwcGVyLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCdWxrT3BlcmF0aW9uRGV0YWlsc1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJ1bGtPcGVyYXRpb25zU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgb3BlbkRldGFpbHMoYnVsa09wZXJhdGlvbklkOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCBidWxrT3BlcmF0aW9uOiBJT3BlcmF0aW9uQnVsayA9IChhd2FpdCB0aGlzLmJ1bGtPcGVyYXRpb25zU2VydmljZS5nZXRCdWxrT3BlcmF0aW9uQnlJZChcbiAgICAgIGJ1bGtPcGVyYXRpb25JZFxuICAgICkpLmRhdGE7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0geyBidWxrT3BlcmF0aW9uIH07XG4gICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhCdWxrT3BlcmF0aW9uV3JhcHBlckNvbXBvbmVudCwge1xuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgY2xhc3M6ICdtb2RhbC1sZydcbiAgICB9KTtcbiAgfVxufVxuIl19