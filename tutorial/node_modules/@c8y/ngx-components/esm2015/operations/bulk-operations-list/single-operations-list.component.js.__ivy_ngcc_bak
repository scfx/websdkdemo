import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { StatusFilterComponent } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';
export class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.singleOperationStatusNames.ALL
                ? []
                : [{ label: typeFilter }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.singleOperationStatusNames.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.singleOperationStatusNames.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.SUCCESSFUL;
        }
        return this.singleOperationStatusNames.ALL;
    }
    getOperationsByStatus(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
}
SingleOperationsListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block p-t-16 m-b-0\" translate>\n    Operations\n  </div>\n  <div class=\"d-flex a-i-center\">\n    <div class=\" d-flex a-i-center p-b-8\">\n      <span class=\"m-r-4 text-medium\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"singleOperationStatusProperties\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"m-l-auto p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i c8yIcon=\"repeat\" class=\"m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item [operation]=\"operation\" [readOnly]=\"readOnly\" class=\"d-contents\">\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            },] }
];
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
SingleOperationsListComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    statusFilter: [{ type: ViewChild, args: [StatusFilterComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbnMtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1saXN0L3NpbmdsZS1vcGVyYXRpb25zLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUVOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUscUJBQXFCLEVBQWlCLE1BQU0sOENBQThDLENBQUM7QUFDcEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDL0YsT0FBTyxFQUFFLHNCQUFzQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNcEcsTUFBTSxPQUFPLDZCQUE2QjtJQWN4QyxZQUFvQixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQVZoRSxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQ2hCLDRCQUF1QixHQUEwQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSzlGLG9DQUErQixHQUFHLDJCQUEyQixDQUFDO1FBQzlELCtCQUEwQixHQUFHLHNCQUFzQixDQUFDO0lBR2UsQ0FBQztJQUU5RCxlQUFlOztZQUNuQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQy9CO1FBQ0gsQ0FBQztLQUFBO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQy9ELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLCtCQUErQixFQUFFLENBQUM7WUFFMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQ3RCLFVBQVUsS0FBSyxJQUFJLENBQUMsMEJBQTBCLENBQUMsR0FBRztnQkFDaEQsQ0FBQyxDQUFDLEVBQUU7Z0JBQ0osQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFtQixDQUFDLENBQzdDLENBQUM7U0FDSDthQUFNO1lBQ0wsVUFBVSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCwrQkFBK0I7UUFDN0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFFN0MsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUM7U0FDL0M7YUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ3ZGLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQztTQUNsRDthQUFNLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLFNBQVMsS0FBSyxDQUFDLEVBQUU7WUFDekYsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDO1NBQ2hEO2FBQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsU0FBUyxLQUFLLENBQUMsRUFBRTtZQUN0RixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxVQUFVLENBQUM7U0FDbkQ7UUFFRCxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLENBQUM7SUFDN0MsQ0FBQztJQUVLLHFCQUFxQixDQUFDLE1BQXVCOztZQUNqRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsMkJBQTJCLENBQ2xGLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FDdEIsQ0FBQztRQUNKLENBQUM7S0FBQTtJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7WUF2RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLHE0REFBc0Q7YUFDdkQ7OztZQU5RLHFCQUFxQjs7OzRCQVEzQixLQUFLO3VCQUVMLEtBQUs7c0NBRUwsTUFBTTsyQkFFTixTQUFTLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbiwgSU9wZXJhdGlvbkJ1bGssIElSZXN1bHRMaXN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3RhdHVzRmlsdGVyQ29tcG9uZW50LCBJU3RhdHVzT3B0aW9uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0YXR1cy1maWx0ZXInO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcbmltcG9ydCB7IFNJTkdMRV9PUF9TVEFUVVNfTkFNRVMsIFNJTkdMRV9PUF9TVEFUVVNfUFJPUEVSVElFUyB9IGZyb20gJy4vc2luZ2xlLW9wZXJhdGlvbi1pdGVtLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNpbmdsZS1vcGVyYXRpb25zLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2luZ2xlLW9wZXJhdGlvbnMtbGlzdC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2luZ2xlT3BlcmF0aW9uc0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKVxuICBidWxrT3BlcmF0aW9uOiBQYXJ0aWFsPElPcGVyYXRpb25CdWxrPjtcbiAgQElucHV0KClcbiAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpIG9uUmV0cnlGYWlsZWRPcGVyYXRpb25zOiBFdmVudEVtaXR0ZXI8UGFydGlhbDxJT3BlcmF0aW9uQnVsaz4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoU3RhdHVzRmlsdGVyQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgc3RhdHVzRmlsdGVyOiBTdGF0dXNGaWx0ZXJDb21wb25lbnQ7XG5cbiAgc2luZ2xlT3BlcmF0aW9uU3RhdHVzUHJvcGVydGllcyA9IFNJTkdMRV9PUF9TVEFUVVNfUFJPUEVSVElFUztcbiAgc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMgPSBTSU5HTEVfT1BfU1RBVFVTX05BTUVTO1xuICBzaW5nbGVPcGVyYXRpb25zOiBJUmVzdWx0TGlzdDxJT3BlcmF0aW9uPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJ1bGtPcGVyYXRpb25zU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXNGaWx0ZXIpIHtcbiAgICAgIHRoaXMuZmlsdGVyT3BlcmF0aW9uc0J5VHlwZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5idWxrT3BlcmF0aW9uICYmICFjaGFuZ2VzLmJ1bGtPcGVyYXRpb24uZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuZmlsdGVyT3BlcmF0aW9uc0J5VHlwZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZpbHRlck9wZXJhdGlvbnNCeVR5cGUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzRmlsdGVyKSB7XG4gICAgICBjb25zdCB0eXBlRmlsdGVyID0gdGhpcy5nZXRGaWx0ZXJUeXBlT2ZTaW5nbGVPcGVyYXRpb25zKCk7XG5cbiAgICAgIHRoaXMuc3RhdHVzRmlsdGVyLnByZXNldChcbiAgICAgICAgdHlwZUZpbHRlciA9PT0gdGhpcy5zaW5nbGVPcGVyYXRpb25TdGF0dXNOYW1lcy5BTExcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiBbeyBsYWJlbDogdHlwZUZpbHRlciB9IGFzIElTdGF0dXNPcHRpb25dXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMuZmlsdGVyT3BlcmF0aW9uc0J5VHlwZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBnZXRGaWx0ZXJUeXBlT2ZTaW5nbGVPcGVyYXRpb25zKCkge1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5idWxrT3BlcmF0aW9uLnByb2dyZXNzO1xuXG4gICAgaWYgKHByb2dyZXNzLmZhaWxlZCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNpbmdsZU9wZXJhdGlvblN0YXR1c05hbWVzLkZBSUxFRDtcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzLmZhaWxlZCA9PT0gMCAmJiBwcm9ncmVzcy5zdWNjZXNzZnVsID09PSAwICYmIHByb2dyZXNzLnBlbmRpbmcgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNpbmdsZU9wZXJhdGlvblN0YXR1c05hbWVzLkVYRUNVVElORztcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzLmZhaWxlZCA9PT0gMCAmJiBwcm9ncmVzcy5zdWNjZXNzZnVsID09PSAwICYmIHByb2dyZXNzLmV4ZWN1dGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMuUEVORElORztcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzLmZhaWxlZCA9PT0gMCAmJiBwcm9ncmVzcy5wZW5kaW5nID09PSAwICYmIHByb2dyZXNzLmV4ZWN1dGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMuU1VDQ0VTU0ZVTDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zaW5nbGVPcGVyYXRpb25TdGF0dXNOYW1lcy5BTEw7XG4gIH1cblxuICBhc3luYyBnZXRPcGVyYXRpb25zQnlTdGF0dXMoZmlsdGVyOiBJU3RhdHVzT3B0aW9uW10pIHtcbiAgICB0aGlzLnNpbmdsZU9wZXJhdGlvbnMgPSBhd2FpdCB0aGlzLmJ1bGtPcGVyYXRpb25zU2VydmljZS5nZXRTaW5nbGVPcGVyYXRpb25zQnlTdGF0dXMoXG4gICAgICBmaWx0ZXJbMF0gJiYgZmlsdGVyWzBdLmxhYmVsLFxuICAgICAgdGhpcy5idWxrT3BlcmF0aW9uLmlkXG4gICAgKTtcbiAgfVxuXG4gIHJldHJ5QnVsa09wZXJhdGlvbigpIHtcbiAgICB0aGlzLm9uUmV0cnlGYWlsZWRPcGVyYXRpb25zLmVtaXQodGhpcy5idWxrT3BlcmF0aW9uKTtcbiAgfVxufVxuIl19