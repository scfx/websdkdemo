import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_TABS } from '@c8y/ngx-components';
import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
import { BulkOperationFromSingleModule } from '@c8y/ngx-components/operations/bulk-operation-from-single';
import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
import { StepperBulkTypeConfigurationModule } from '@c8y/ngx-components/operations/stepper-bulk-type-configuration';
import { StepperBulkTypeDeviceProfileModule } from '@c8y/ngx-components/operations/stepper-bulk-type-device-profile';
import { StepperBulkTypeFirmwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-firmware';
import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
import { TabsFactory } from './factories/tabs.factory';
export const routes = [
    {
        path: 'devicecontrol',
        redirectTo: 'devicecontrol/single',
        pathMatch: 'full'
    }
];
/**
 * This module sets up the 'Device control' view. To use the module as it is you need to also
 * import the '@c8y/ng1-modules/devicemanagement-deviceControlList/cumulocity.json' ng1 module
 * in a hybrid application. By importing it in your custom application you will have:
 * - a 'Device control' entry in the 'Overviews' section of navigator
 * - 'Bulk operations' tab on the 'Device control' page
 * - list view of existing bulk operations with expandable details and options to filter
 * - guided stepper dialogs to schedule new bulk operations of supported types
 * (Configuration update, Firmware update, Software update, Apply device profile).
 *
 * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve
 * the results you wish to have in your application, e.g.:
 * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}
 * to have an overview of existing bulk operation with expandable details
 * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing
 * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},
 * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},
 * {@link StepperBulkTypeDeviceProfileModule}) to have the option
 * to create new bulk operation in a guided stepper dialog.
 *
 * ```typescript
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * respectively
 * ```typescript
 * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule,
 *     BulkOperationsStepperContainerModule,
 *     StepperBulkTypeSoftwareModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * You can provide your own bulk operation stepper by registering a component via the `HOOK_LIST_BULK_TYPE`:
 *
 * ```typescript
 * import {
 *   HOOK_LIST_BULK_TYPE,
 *   baseUrl
 * } from '@c8y/ngx-components/operations/bulk-operations-service';
 *
 * [...]
 *
 * providers: [
 *   {
 *     provide: HOOK_LIST_BULK_TYPE,
 *     useValue: {
 *       type: 'my-bulk-op-type',
 *       c8yIcon: 'c8y-tools',
 *       name: 'My bulk op type',
 *       path: `${baseUrl}my-type`,
 *       component: StepperMyBulkTypeComponent,
 *       fragments: ['c8y_MyType'],
 *       selected: false
 *     },
 *     multi: true
 *   }
 * ]```
 */
export class OperationsModule {
}
OperationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    RouterModule.forChild(routes),
                    BulkOperationFromSingleModule,
                    BulkOperationsListModule,
                    BulkOperationsStepperContainerModule,
                    StepperBulkTypeConfigurationModule,
                    StepperBulkTypeFirmwareModule,
                    StepperBulkTypeSoftwareModule,
                    StepperBulkTypeDeviceProfileModule
                ],
                providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9vcGVyYXRpb25zL29wZXJhdGlvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFTLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFDeEgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFDMUcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDL0YsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFDcEgsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFDckgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFDMUcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFFMUcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXZELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBWTtJQUM3QjtRQUNFLElBQUksRUFBRSxlQUFlO1FBQ3JCLFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsU0FBUyxFQUFFLE1BQU07S0FDbEI7Q0FDRixDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0RUc7QUFlSCxNQUFNLE9BQU8sZ0JBQWdCOzs7WUFkNUIsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxVQUFVO29CQUNWLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO29CQUM3Qiw2QkFBNkI7b0JBQzdCLHdCQUF3QjtvQkFDeEIsb0NBQW9DO29CQUNwQyxrQ0FBa0M7b0JBQ2xDLDZCQUE2QjtvQkFDN0IsNkJBQTZCO29CQUM3QixrQ0FBa0M7aUJBQ25DO2dCQUNELFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUN4RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBIT09LX1RBQlMsIFJvdXRlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1N0ZXBwZXJDb250YWluZXJNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXN0ZXBwZXItY29udGFpbmVyJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25Gcm9tU2luZ2xlTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLWZyb20tc2luZ2xlJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtbGlzdCc7XG5pbXBvcnQgeyBTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RlcHBlckJ1bGtUeXBlRGV2aWNlUHJvZmlsZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1kZXZpY2UtcHJvZmlsZSc7XG5pbXBvcnQgeyBTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZSc7XG5pbXBvcnQgeyBTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZSc7XG5cbmltcG9ydCB7IFRhYnNGYWN0b3J5IH0gZnJvbSAnLi9mYWN0b3JpZXMvdGFicy5mYWN0b3J5JztcblxuZXhwb3J0IGNvbnN0IHJvdXRlczogUm91dGVbXSA9IFtcbiAge1xuICAgIHBhdGg6ICdkZXZpY2Vjb250cm9sJyxcbiAgICByZWRpcmVjdFRvOiAnZGV2aWNlY29udHJvbC9zaW5nbGUnLFxuICAgIHBhdGhNYXRjaDogJ2Z1bGwnXG4gIH1cbl07XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgc2V0cyB1cCB0aGUgJ0RldmljZSBjb250cm9sJyB2aWV3LiBUbyB1c2UgdGhlIG1vZHVsZSBhcyBpdCBpcyB5b3UgbmVlZCB0byBhbHNvXG4gKiBpbXBvcnQgdGhlICdAYzh5L25nMS1tb2R1bGVzL2RldmljZW1hbmFnZW1lbnQtZGV2aWNlQ29udHJvbExpc3QvY3VtdWxvY2l0eS5qc29uJyBuZzEgbW9kdWxlXG4gKiBpbiBhIGh5YnJpZCBhcHBsaWNhdGlvbi4gQnkgaW1wb3J0aW5nIGl0IGluIHlvdXIgY3VzdG9tIGFwcGxpY2F0aW9uIHlvdSB3aWxsIGhhdmU6XG4gKiAtIGEgJ0RldmljZSBjb250cm9sJyBlbnRyeSBpbiB0aGUgJ092ZXJ2aWV3cycgc2VjdGlvbiBvZiBuYXZpZ2F0b3JcbiAqIC0gJ0J1bGsgb3BlcmF0aW9ucycgdGFiIG9uIHRoZSAnRGV2aWNlIGNvbnRyb2wnIHBhZ2VcbiAqIC0gbGlzdCB2aWV3IG9mIGV4aXN0aW5nIGJ1bGsgb3BlcmF0aW9ucyB3aXRoIGV4cGFuZGFibGUgZGV0YWlscyBhbmQgb3B0aW9ucyB0byBmaWx0ZXJcbiAqIC0gZ3VpZGVkIHN0ZXBwZXIgZGlhbG9ncyB0byBzY2hlZHVsZSBuZXcgYnVsayBvcGVyYXRpb25zIG9mIHN1cHBvcnRlZCB0eXBlc1xuICogKENvbmZpZ3VyYXRpb24gdXBkYXRlLCBGaXJtd2FyZSB1cGRhdGUsIFNvZnR3YXJlIHVwZGF0ZSwgQXBwbHkgZGV2aWNlIHByb2ZpbGUpLlxuICpcbiAqIEFkZGl0aW9uYWx5IHlvdSBjYW4gdXNlIHRoZSBtb2R1bGVzIGltcG9ydGVkIGJ5IHtAbGluayBPcGVyYXRpb25zTW9kdWxlfSBzZXBhcmF0ZWx5IHRvIGFjaGlldmVcbiAqIHRoZSByZXN1bHRzIHlvdSB3aXNoIHRvIGhhdmUgaW4geW91ciBhcHBsaWNhdGlvbiwgZS5nLjpcbiAqIC0gaW1wb3J0IHtAbGluayBCdWxrT3BlcmF0aW9uc0xpc3RNb2R1bGV9IGFuZCB7QGxpbmsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlTW9kdWxlfVxuICogdG8gaGF2ZSBhbiBvdmVydmlldyBvZiBleGlzdGluZyBidWxrIG9wZXJhdGlvbiB3aXRoIGV4cGFuZGFibGUgZGV0YWlsc1xuICogLSBhZGRpdGlvbmFseSBpbXBvcnQge0BsaW5rIEJ1bGtPcGVyYXRpb25zU3RlcHBlckNvbnRhaW5lck1vZHVsZX0gYW5kIGFueSBvZiB0aGUgZXhpc3RpbmdcbiAqIGBTdGVwcGVyQnVsa1R5cGUqTW9kdWxlYCBtb2R1bGVzICh7QGxpbmsgU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbk1vZHVsZX0sXG4gKiB7QGxpbmsgU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVNb2R1bGV9LCB7QGxpbmsgU3RlcHBlckJ1bGtUeXBlU29mdHdhcmVNb2R1bGV9LFxuICoge0BsaW5rIFN0ZXBwZXJCdWxrVHlwZURldmljZVByb2ZpbGVNb2R1bGV9KSB0byBoYXZlIHRoZSBvcHRpb25cbiAqIHRvIGNyZWF0ZSBuZXcgYnVsayBvcGVyYXRpb24gaW4gYSBndWlkZWQgc3RlcHBlciBkaWFsb2cuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcbiAqIGltcG9ydCB7IEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtbGlzdCc7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIFsuLi5dXG4gKiAgICAgQnVsa09wZXJhdGlvbnNTZXJ2aWNlTW9kdWxlLFxuICogICAgIEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZVxuICogICBdLFxuICogICBbLi4uXVxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBDdXN0b21PcGVyYXRpb25zTW9kdWxlIHt9YGBgXG4gKiByZXNwZWN0aXZlbHlcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU3RlcHBlckNvbnRhaW5lck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc3RlcHBlci1jb250YWluZXInO1xuICogaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcbiAqIGltcG9ydCB7IEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtbGlzdCc7XG4gKiBpbXBvcnQgeyBTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZSc7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIFsuLi5dXG4gKiAgICAgQnVsa09wZXJhdGlvbnNTZXJ2aWNlTW9kdWxlLFxuICogICAgIEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZSxcbiAqICAgICBCdWxrT3BlcmF0aW9uc1N0ZXBwZXJDb250YWluZXJNb2R1bGUsXG4gKiAgICAgU3RlcHBlckJ1bGtUeXBlU29mdHdhcmVNb2R1bGVcbiAqICAgXSxcbiAqICAgWy4uLl1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQ3VzdG9tT3BlcmF0aW9uc01vZHVsZSB7fWBgYFxuICogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIGJ1bGsgb3BlcmF0aW9uIHN0ZXBwZXIgYnkgcmVnaXN0ZXJpbmcgYSBjb21wb25lbnQgdmlhIHRoZSBgSE9PS19MSVNUX0JVTEtfVFlQRWA6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtcbiAqICAgSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAqICAgYmFzZVVybFxuICogfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuICpcbiAqIFsuLi5dXG4gKlxuICogcHJvdmlkZXJzOiBbXG4gKiAgIHtcbiAqICAgICBwcm92aWRlOiBIT09LX0xJU1RfQlVMS19UWVBFLFxuICogICAgIHVzZVZhbHVlOiB7XG4gKiAgICAgICB0eXBlOiAnbXktYnVsay1vcC10eXBlJyxcbiAqICAgICAgIGM4eUljb246ICdjOHktdG9vbHMnLFxuICogICAgICAgbmFtZTogJ015IGJ1bGsgb3AgdHlwZScsXG4gKiAgICAgICBwYXRoOiBgJHtiYXNlVXJsfW15LXR5cGVgLFxuICogICAgICAgY29tcG9uZW50OiBTdGVwcGVyTXlCdWxrVHlwZUNvbXBvbmVudCxcbiAqICAgICAgIGZyYWdtZW50czogWydjOHlfTXlUeXBlJ10sXG4gKiAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAqICAgICB9LFxuICogICAgIG11bHRpOiB0cnVlXG4gKiAgIH1cbiAqIF1gYGBcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLmZvckNoaWxkKHJvdXRlcyksXG4gICAgQnVsa09wZXJhdGlvbkZyb21TaW5nbGVNb2R1bGUsXG4gICAgQnVsa09wZXJhdGlvbnNMaXN0TW9kdWxlLFxuICAgIEJ1bGtPcGVyYXRpb25zU3RlcHBlckNvbnRhaW5lck1vZHVsZSxcbiAgICBTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uTW9kdWxlLFxuICAgIFN0ZXBwZXJCdWxrVHlwZUZpcm13YXJlTW9kdWxlLFxuICAgIFN0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlTW9kdWxlLFxuICAgIFN0ZXBwZXJCdWxrVHlwZURldmljZVByb2ZpbGVNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBIT09LX1RBQlMsIHVzZUNsYXNzOiBUYWJzRmFjdG9yeSwgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uc01vZHVsZSB7fVxuIl19