import { Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ConfigurationFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => this.filterContainString(item.name, filterTerm) ||
                this.filterContainString(item.deviceType, filterTerm));
    }
    filterContainString(name, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    }
}
ConfigurationFilterPipe.ɵfac = function ConfigurationFilterPipe_Factory(t) { return new (t || ConfigurationFilterPipe)(); };
ConfigurationFilterPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "configurationFilterPipe", type: ConfigurationFilterPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurationFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'configurationFilterPipe'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1maWx0ZXIucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcmVwb3NpdG9yeS9jb25maWd1cmF0aW9uLWRldmljZS10YWIvY29uZmlndXJhdGlvbi1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFNcEQsTUFBTSxPQUFPLHVCQUF1QjtBQUFHLElBQ3JDLFNBQVMsQ0FBQyxLQUFZLEVBQUUsVUFBa0I7QUFBSSxRQUM1QyxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUN6QyxZQUFNLENBQUMsQ0FBQyxLQUFLO0FBQ2IsWUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FDVixDQUFDLElBQWdDLEVBQUUsRUFBRSxDQUNuQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUM7QUFDM0QsZ0JBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQ3hELENBQUM7QUFDVixJQUFFLENBQUM7QUFDSCxJQUNVLG1CQUFtQixDQUFDLElBQVksRUFBRSxVQUFrQjtBQUM5RCxRQUFJLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNqRCxRQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0g7bURBbEJDLElBQUksU0FBQyxrQkFDSixJQUFJLEVBQUUseUJBQXlCO0VBQ2hDOzs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1cHBvcnRlZENvbmZpZ3VyYXRpb25JdGVtIH0gZnJvbSAnLi4vcmVwb3NpdG9yeS5tb2RlbCc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2NvbmZpZ3VyYXRpb25GaWx0ZXJQaXBlJ1xufSlcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaXRlbXM6IGFueVtdLCBmaWx0ZXJUZXJtOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBmaWx0ZXJUZXJtLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgID8gaXRlbXNcbiAgICAgIDogaXRlbXMuZmlsdGVyKFxuICAgICAgICAgIChpdGVtOiBTdXBwb3J0ZWRDb25maWd1cmF0aW9uSXRlbSkgPT5cbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ29udGFpblN0cmluZyhpdGVtLm5hbWUsIGZpbHRlclRlcm0pIHx8XG4gICAgICAgICAgICB0aGlzLmZpbHRlckNvbnRhaW5TdHJpbmcoaXRlbS5kZXZpY2VUeXBlLCBmaWx0ZXJUZXJtKVxuICAgICAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJDb250YWluU3RyaW5nKG5hbWU6IHN0cmluZywgZmlsdGVyVGVybTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGVybSA9IGZpbHRlclRlcm0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgcmV0dXJuIG5hbWUgJiYgbmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGVybSkgPiAtMTtcbiAgfVxufVxuIl19