import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { CellRendererContext, memoize } from '@c8y/ngx-components';
import { property } from 'lodash-es';
import { shareReplay } from 'rxjs/operators';
import { RepositoryService } from '../../repository.service';
export class VersionsCellRendererComponent {
    constructor(context, repositoryService) {
        this.context = context;
        this.repositoryService = repositoryService;
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software = context.item;
    }
    getBaseVersionsCount$(software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    }
}
VersionsCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<span class=\"label label-warning flex-item-right-sm\" *ngIf=\"isLegacy(software)\">\n  <span translate> Legacy </span>\n</span>\n<span *ngIf=\"!isLegacy(software)\">\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n    </span>\n  </span>\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n    <span class=\"badge badge-info flex-item-right-sm\">\n      {{ getBaseVersionsCount$(software) | async }}\n    </span>\n  </span>\n</span>\n"
            },] }
];
VersionsCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: RepositoryService }
];
__decorate([
    memoize(property('id'))
], VersionsCellRendererComponent.prototype, "getBaseVersionsCount$", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbnMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NvZnR3YXJlL2NvbHVtbnMvdmVyc2lvbnMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBSzdELE1BQU0sT0FBTyw2QkFBNkI7SUFHeEMsWUFBbUIsT0FBNEIsRUFBVSxpQkFBb0M7UUFBMUUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRjdGLGFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUczRSxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUdELHFCQUFxQixDQUFDLFFBQXdCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDOzs7WUFiRixTQUFTLFNBQUM7Z0JBQ1Qsa21CQUFzRDthQUN2RDs7O1lBUlEsbUJBQW1CO1lBSW5CLGlCQUFpQjs7QUFheEI7SUFEQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDOzBFQUd2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBtZW1vaXplIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yeS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uc0NlbGxSZW5kZXJlckNvbXBvbmVudCB7XG4gIGlzTGVnYWN5ID0gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5pc0xlZ2FjeUVudHJ5LmJpbmQodGhpcy5yZXBvc2l0b3J5U2VydmljZSk7XG4gIHNvZnR3YXJlO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCwgcHJpdmF0ZSByZXBvc2l0b3J5U2VydmljZTogUmVwb3NpdG9yeVNlcnZpY2UpIHtcbiAgICB0aGlzLnNvZnR3YXJlID0gY29udGV4dC5pdGVtO1xuICB9XG5cbiAgQG1lbW9pemUocHJvcGVydHkoJ2lkJykpXG4gIGdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZTogSU1hbmFnZWRPYmplY3QpOiBPYnNlcnZhYmxlPG51bWJlciB8IHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gIH1cbn1cbiJdfQ==