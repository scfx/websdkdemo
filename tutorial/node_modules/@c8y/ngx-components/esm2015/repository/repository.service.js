import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { EventBinaryService, EventService, InventoryBinaryService, InventoryService, OperationService, OperationStatus, QueriesUtil } from '@c8y/client';
import { AlertService, gettext, OperationRealtimeService } from '@c8y/ngx-components';
import { assign, cloneDeep, find, forEach, get, head, isNil, isString, isUndefined, map as _map, pick, remove, set } from 'lodash-es';
import { defer, from, merge, of, throwError } from 'rxjs';
import { filter, map, switchMap, take, takeWhile, withLatestFrom } from 'rxjs/operators';
import { RepositoryType, REPOSITORY_BINARY_TYPES } from './repository.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
export class RepositoryService {
    constructor(inventory, inventoryBinary, operation, alert, event, operationRealtime, eventBinary) {
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
        this.operation = operation;
        this.alert = alert;
        this.event = event;
        this.operationRealtime = operationRealtime;
        this.eventBinary = eventBinary;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    /**
     * Lists repository entries of given type.
     * @param type The type of repository entries to list.
     * @param options Extra listing options.
     */
    listRepositoryEntries(type, options) {
        const defaultOrder = [{ name: 1 }];
        const defaultFilters = { type };
        const legacyFilters = { __has: `url` };
        let filters = {};
        let fullQuery = (options && options.query) || {};
        if (!options || (options && !options.skipDefaultOrder)) {
            fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');
        }
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);
        if (options && options.partialTextFilter) {
            const { partialText, properties } = options.partialTextFilter;
            const orFilter = { __or: properties.map(property => ({ [property]: `*${partialText}*` })) };
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, orFilter);
        }
        if (options && options.partialName) {
            // backwards compatibility if
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });
        }
        if (options && options.skipLegacy) {
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });
        }
        filters = Object.assign({ query: this.queriesUtil.buildQuery(fullQuery), pageSize: 50, withTotalPages: true }, ((options && options.params) || {}));
        return this.inventory.list(filters);
    }
    // TODO: merge with create()
    save(data, type, mo = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (type) {
                case RepositoryType.CONFIGURATION: {
                    Object.assign(mo, {
                        type: RepositoryType.CONFIGURATION,
                        configurationType: data.selected ? data.selected.configurationType : undefined,
                        name: data.version,
                        description: data.description,
                        deviceType: data.deviceType,
                        c8y_Global: {}
                    });
                    if (!data.deviceType && mo.id) {
                        mo.deviceType = null;
                    }
                    if (!data.selected && mo.id) {
                        mo.configurationType = null;
                    }
                    break;
                }
            }
            const existingUrl = mo.url;
            if (data.binary.url) {
                mo.url = data.binary.url;
            }
            else if (data.binary.file) {
                const response = yield this.inventoryBinary.create(data.binary.file, {
                    c8y_Global: {}
                });
                mo.url = response.data.self;
            }
            if (mo.id) {
                return this.updateEntry(mo, existingUrl);
            }
            return this.createEntry(mo);
        });
    }
    create(modal, type) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (type) {
                case RepositoryType.FIRMWARE:
                case RepositoryType.SOFTWARE:
                    return this.createFirmwareOrSoftware(modal, type);
            }
        });
    }
    createFirmwareOrSoftware(modal, type) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            let binaryURL;
            let repositoryEntry;
            let repositoryBinary;
            const mos = [];
            const { selected: { id: selectedId }, binary: { file, url } } = modal;
            try {
                if (file) {
                    ({ data: binary } = yield this.saveBinary(file));
                    ({ self: binaryURL } = binary);
                    mos.push(binary);
                }
                else {
                    binaryURL = url;
                }
                ({ data: repositoryEntry } = yield this.createOrUpdateRepositoryEntry(modal, type));
                if (isNil(selectedId)) {
                    mos.push(repositoryEntry);
                }
                ({ data: repositoryBinary } = yield this.createRepositoryBinary(modal, binaryURL, type, repositoryEntry));
                mos.push(repositoryBinary);
                if (file) {
                    yield this.linkBinary(repositoryBinary, binary);
                }
                return repositoryEntry;
            }
            catch (error) {
                this.cleanUp(mos);
                this.errorMsg();
                // Propagate error
                throw error;
            }
        });
    }
    saveBinary(file) {
        return this.inventoryBinary.create(file, { c8y_Global: {} });
    }
    createOrUpdateRepositoryEntry(modal, type) {
        const { selected: { id, name }, description, deviceType } = modal;
        const mo = {
            id,
            name: id ? undefined : name,
            description,
            type: id ? undefined : type,
            c8y_Global: {}
        };
        if (deviceType) {
            set(mo, 'c8y_Filter.type', deviceType);
        }
        if (modal.softwareType) {
            set(mo, 'softwareType', modal.softwareType.softwareType);
        }
        return id
            ? this.inventory.update(mo)
            : this.inventory.create(mo);
    }
    createRepositoryBinary(modal, binaryURL, type, parent) {
        const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);
        return this.inventory.childAdditionsCreate(mo, parent);
    }
    prepareRepositoryBinaryMO(modal, binaryURL, type) {
        const { version, patchVersion, dependency } = modal;
        const result = {
            type: REPOSITORY_BINARY_TYPES[type],
            [type]: {
                url: binaryURL
            },
            c8y_Global: {}
        };
        if (dependency) {
            set(result, [type, 'version'], patchVersion);
            assign(result, {
                c8y_Patch: {
                    dependency: dependency.c8y_Firmware.version
                }
            });
        }
        else {
            set(result, [type, 'version'], version);
        }
        return result;
    }
    linkBinary(repositoryBinary, binary) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id: repositoryBinaryId } = repositoryBinary;
            if (binary) {
                const { id: binaryId } = binary;
                return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);
            }
        });
    }
    cleanUp(mosToDelete) {
        mosToDelete.forEach(mo => {
            const { c8y_IsBinary } = mo;
            isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);
        });
    }
    delete(entity) {
        return this.inventory.delete(entity, { forceCascade: true });
    }
    errorMsg() {
        const msg = gettext('Failed to save');
        this.alert.danger(msg);
    }
    getBaseVersionsCount$(entry) {
        if (this.isLegacyEntry(entry)) {
            return of(1);
        }
        return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(map(({ paging }) => paging.totalPages));
    }
    getBaseVersionFromMO(mo) {
        return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');
    }
    isPatch(mo) {
        return !!get(mo, 'c8y_Patch.dependency');
    }
    getPatchVersionsCount$(entry, baseVersion) {
        if (this.isLegacyEntry(baseVersion)) {
            return of(0);
        }
        return from(this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })).pipe(map(({ paging }) => paging.totalPages));
    }
    isLegacyEntry(entry) {
        return Boolean(entry.url);
    }
    /**
     * Lists all versions (base and patch ones) of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    listAllVersions(entry, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        const VERSION_FILTER_ORDER = {
            __filter: {},
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, VERSION_FILTER_ORDER, params);
    }
    /**
     * Lists base versions of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    listBaseVersions(entry, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        const NO_PATCH_FILTER_ORDER = {
            __filter: {
                __not: { __has: 'c8y_Patch' }
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);
    }
    /**
     * Lists patch versions of given base version under the entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    listPatchVersions(entry, baseVersion, params = {}) {
        const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');
        const PATCH_FILTER_ORDER = {
            __filter: {
                'c8y_Patch.dependency': version
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    }
    /**
     * Lists patch versions of given base version under the entry including the base version.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * In terms of legacy base version the entry gets transformed to fit the needed data model.
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    listBaseVersionAndPatches(entry, baseVersion, params = {}) {
        if (this.isLegacyEntry(entry)) {
            return Promise.resolve({
                data: [
                    Object.assign({
                        c8y_Firmware: {
                            version: entry.version,
                            url: entry.url
                        }
                    }, entry)
                ]
            });
        }
        const PATCH_FILTER_ORDER = {
            __filter: {
                __or: {
                    'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,
                    'c8y_Firmware.version': baseVersion.c8y_Firmware.version
                }
            },
            __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    }
    listChildren(entry, filters = {}, params = {}) {
        const childrenFilters = { __bygroupid: entry.id };
        const query = this.queriesUtil.addAndFilter(filters, childrenFilters);
        // FIXME: needed because of issue in forOf directive (...)
        params.withTotalPages = true;
        return this.inventory.listQuery(query, params);
    }
    /**
     * Fetches all items from the list starting with the provided page.
     * @param firstPage The first page of the list to fetch all items for.
     */
    fetchAllItemsFromList(firstPage) {
        return __awaiter(this, void 0, void 0, function* () {
            let allItems;
            if (!firstPage.then) {
                allItems = [...firstPage];
            }
            else {
                let { paging, data: items } = yield firstPage;
                allItems = [...items];
                while (paging && paging.nextPage) {
                    ({ paging, data: items } = yield paging.next());
                    allItems = [...allItems, ...items];
                }
            }
            return allItems;
        });
    }
    /**
     * Gets top level repository entry managed object for base or patch version.
     * @param mo Base or patch version managed object with parents.
     */
    getRepositoryEntryMO$(mo) {
        if (!mo) {
            return of(undefined);
        }
        const [reference] = get(mo, 'additionParents.references');
        const id = get(reference, 'managedObject.id');
        return id
            ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))
            : of(undefined);
    }
    /**
     * Gets base or patch version managed object.
     * @param deviceRepositoryFragment Device repository fragment.
     * @param type Top level repository entry type.
     * @param configuration Configuration object with options:
     * - **skipLegacy** - `boolean` - Exclude legacy entries.
     * - **filters** - `object` - Filter object.
     *
     * @deprecated as it doesn't support 'missing url' case
     */
    getRepositoryBinaryMoByVersion(deviceRepositoryFragment, type, { skipLegacy = false, filters = {} } = {}) {
        const { version, url, name } = deviceRepositoryFragment;
        const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];
        let query;
        const newModelBaseVersionQuery = {
            [`${type}.version`]: version,
            [`${type}.url`]: url,
            type: repositoryBinaryType
        };
        const legacyVersionQuery = { url, type, name };
        filters = Object.assign({ withChildren: false, withParents: true }, filters);
        if (skipLegacy) {
            query = {
                __and: Object.assign({}, newModelBaseVersionQuery)
            };
        }
        else {
            query = {
                __or: [{ __and: Object.assign({}, newModelBaseVersionQuery) }, { __and: Object.assign({}, legacyVersionQuery) }]
            };
        }
        return this.inventory.listQuery(query, filters).then(({ data }) => head(data));
    }
    getBinaryName$(binaryUrl) {
        if (!binaryUrl) {
            return of('---');
        }
        const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
        if (!binaryId) {
            return of(binaryUrl);
        }
        return defer(() => this.inventory.detail(binaryId).then(result => result.data)).pipe(map(mo => mo.name));
    }
    /**
     * Generates an inventory query object which can be used to find
     * repository entries of specified type matching the type of provided device.
     * @param repositoryType The type of repository entries which will be queried with the generated query.
     * @param device The device for which matching repository entries will be queried with the generated query.
     */
    getDeviceTypeQuery(repositoryType, device) {
        let result = { type: repositoryType };
        if (repositoryType === RepositoryType.CONFIGURATION) {
            if (device.type) {
                result = this.queriesUtil.addAndFilter(result, {
                    __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]
                });
            }
        }
        else {
            result = this.queriesUtil.addAndFilter(result, {
                __or: [
                    { 'c8y_Filter.type': device.type },
                    { 'c8y_Filter.type': '' },
                    { __not: { __has: `c8y_Filter.type` } }
                ]
            });
        }
        return result;
    }
    /**
     * Generates an inventory query object which can be used to find configuration repository entries
     * matching the type of provided device and specified configuration type.
     * @param device The device for which matching repository entries will be queried with the generated query.
     * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.
     */
    getConfigurationTypeQuery(device, configurationType) {
        const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);
        return this.queriesUtil.addAndFilter(query, {
            __or: [
                { configurationType },
                { configurationType: '' },
                { __not: { __has: `configurationType` } }
            ]
        });
    }
    /**
     * Gets the list of software installed in the device in the uniform format.
     * Supports c8y_SoftwareList and c8y_Software fragments.
     * @param device The device whose software list should be returned.
     */
    getDeviceSoftwareList(device) {
        if (device.c8y_SoftwareList) {
            return cloneDeep(device.c8y_SoftwareList);
        }
        if (device.c8y_Software) {
            return _map(device.c8y_Software, (version, name) => ({ name, version }));
        }
        return [];
    }
    /**
     * Prepares a software update operation for given device and the list of changes, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param changes The list of software changes which should be applied.
     */
    createSoftwareUpdateOperation(device, changes) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = this.getSoftwareUpdateOperation(device, changes);
            return (yield this.operation.create(operation)).data;
        });
    }
    /**
     * Prepares a software update operation for given device and changes.
     * Returned operation type depends on device's supported operations.
     * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.
     * @param device The device for which operation should be prepared.
     * @param changes The list of software changes which should be applied.
     */
    getSoftwareUpdateOperation(device, changes) {
        const operation = {
            deviceId: device.id,
            description: `Apply software changes: ${changes
                .map(change => `${change.action} "${change.name}"${change.version ? ` (version: ${change.version})` : ''}`)
                .join(', ')}`
        };
        if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {
            operation.c8y_SoftwareUpdate = cloneDeep(changes);
        }
        else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {
            operation.c8y_SoftwareList = cloneDeep(device.c8y_SoftwareList) || [];
            changes.forEach(change => {
                const deviceSoftware = pick(change, ['name', 'version', 'url']);
                if (change.action === 'delete') {
                    remove(operation.c8y_SoftwareList, deviceSoftware);
                }
                if (change.action === 'install') {
                    operation.c8y_SoftwareList.push(deviceSoftware);
                }
            });
        }
        else if (device.c8y_SupportedOperations.includes('c8y_Software')) {
            operation.c8y_Software = cloneDeep(device.c8y_Software) || {};
            changes.forEach(change => {
                if (change.action === 'delete') {
                    delete operation.c8y_Software[change.name];
                }
                if (change.action === 'install') {
                    operation.c8y_Software[change.name] = change.version;
                }
            });
        }
        return operation;
    }
    /**
     * Extracts the list of device software changes from given operation in the context of given device.
     * @param operation The operation from which the list should be extracted.
     * @param device The target device of the operation.
     */
    getDeviceSoftwareChangesFromOperation(operation, device) {
        if (operation.c8y_SoftwareUpdate) {
            return cloneDeep(operation.c8y_SoftwareUpdate);
        }
        if (operation.c8y_SoftwareList) {
            return this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);
        }
        if (operation.c8y_Software) {
            return this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);
        }
        return [];
    }
    /**
     * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param selectedOption The selected repository binary option.
     */
    createFirmwareUpdateOperation(device, selectedOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = this.getFirmwareUpdateOperation(device, selectedOption);
            return (yield this.operation.create(operation)).data;
        });
    }
    /**
     * Prepares a firmware update operation for given device and selected version.
     * Supports c8y_Firmware operation.
     * @param device The device for which operation should be prepared.
     * @param selectedOption Selected firmware version.
     */
    getFirmwareUpdateOperation(device, selectedOption) {
        delete selectedOption.id;
        const operation = {
            deviceId: device.id,
            description: `Update firmware to: "${selectedOption.name}"${selectedOption.version ? ` (version: ${selectedOption.version})` : ''}`,
            c8y_Firmware: Object.assign({}, selectedOption)
        };
        return operation;
    }
    /**
     * Prepares a configuration file upload operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param isLegacy  A legacy operation is created without a configurationType.
     */
    getUploadConfigurationFileOperation(device, configurationType, isLegacy = false) {
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: `Retrieve configuration snapshot from device ${device.name}`,
                c8y_UploadConfigFile: {}
            };
        }
        return {
            deviceId: device.id,
            description: `Retrieve ${configurationType} configuration snapshot from device ${device.name}`,
            c8y_UploadConfigFile: {
                type: configurationType
            }
        };
    }
    /**
     * Prepares a configuration file download operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param binaryUrl The url of a binary to be downloaded.
     * @param isLegacy A legacy operation is created without a configurationType.
     */
    getDownloadConfigurationFileOperation(device, configurationType, configSnapshot, isLegacy = false) {
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,
                c8y_DownloadConfigFile: {
                    url: configSnapshot.binaryUrl,
                    c8y_ConfigurationDump: {
                        id: configSnapshot.id
                    }
                }
            };
        }
        return {
            deviceId: device.id,
            description: `Send configuration snapshot ${configSnapshot.name} of configuration type ${configurationType} to device ${device.name}`,
            c8y_DownloadConfigFile: {
                url: configSnapshot.binaryUrl,
                type: configurationType
            }
        };
    }
    /**
     * Gets the last firmware update operation for given device.
     * Looks for c8y_Firmware operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastFirmwareUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getFirstMatchingOperation([Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Firmware' })]);
        });
    }
    /**
     * Gets the last software update operation for given device.
     * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastSoftwareUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getFirstMatchingOperation([
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SoftwareUpdate' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SoftwareList' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Software' })
            ]);
        });
    }
    /**
     * Iterates over the list of filters and queries the operations.
     * If a query returns at least one operation, the first one will be returned.
     * Otherwise the next query will be performed.
     * If none of the queries returns any operation, null will be returned.
     * @param filtersList The list of filters for the queries.
     */
    getFirstMatchingOperation(filtersList) {
        return __awaiter(this, void 0, void 0, function* () {
            let matchingOperation = null;
            for (const filters of filtersList) {
                const operations = (yield this.operation.list(filters)).data;
                if (operations.length) {
                    matchingOperation = operations[0];
                    break;
                }
            }
            return matchingOperation;
        });
    }
    /**
     * Iterates over the list of filters and queries the operations.
     * It compares the operations retrieved by the queries by 'creationTime'
     * and return the latest one.
     * If none of the queries returns any operation, null will be returned.
     * @param filtersList The list of filters for the queries.
     */
    getLatestMatchingOperation(filtersList) {
        return __awaiter(this, void 0, void 0, function* () {
            let matchingOperation = null;
            for (const filters of filtersList) {
                const operations = (yield this.operation.list(filters)).data;
                if (operations.length) {
                    if (matchingOperation) {
                        matchingOperation =
                            new Date(matchingOperation.creationTime).getTime() <
                                new Date(operations[0].creationTime).getTime()
                                ? operations[0]
                                : matchingOperation;
                    }
                    else {
                        matchingOperation = operations[0];
                    }
                }
            }
            return matchingOperation;
        });
    }
    /**
     * Creates the operation and returns an observable to track its progress.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to create and track.
     */
    createObservedOperation(operation) {
        return from(this.operation.create(operation)).pipe(map(({ data }) => data), take(1), switchMap(createdOperation => this.observeOperation(createdOperation)));
    }
    /**
     * Returns an observable to track progress of given operation.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to be observed.
     */
    observeOperation(operation) {
        const observedOperation$ = of(operation);
        const operationUpdates$ = observedOperation$.pipe(switchMap(observedOperation => this.operationRealtime.onAll$(observedOperation.deviceId)), map(({ data }) => data), withLatestFrom(observedOperation$), filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id), switchMap(([operationUpdate]) => {
            if (operationUpdate.status === OperationStatus.FAILED) {
                return throwError(operationUpdate);
            }
            return of(operationUpdate);
        }), takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true));
        return merge(observedOperation$, operationUpdates$);
    }
    /**
     * Gets a single event with latest creationTime for the given device Id and event type.
     * @param deviceId The device Id for which the events should be queried.
     * @param type Event type.
     */
    getLatestConfigurationEvent(deviceId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const eventFilter = {
                source: deviceId,
                type,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                pageSize: 1
            };
            const { data } = yield this.event.list(eventFilter);
            return data[0];
        });
    }
    /**
     * Gets a list of operations for the given device Id, and operation type.
     * @param deviceId The device Id for which the operation should be queried.
     * @param operationType Operation type fragment.
     */
    getConfigFileOperationList(deviceId, operationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const operationFilter = {
                deviceId,
                fragmentType: operationType,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 2000
            };
            return (yield this.operation.list(operationFilter)).data;
        });
    }
    /**
     * Gets latest uploaded configuration snapshot for the given device, and configuration type.
     * @param device The device for which the configuration snapshot was uploaded.
     * @param configurationType Selected configuration type.
     */
    getConfigSnapshot(device, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const event = yield this.getLatestConfigurationEvent(device.id, configurationType);
            let configSnapshot;
            if (event) {
                configSnapshot = {
                    time: event.time,
                    name: event.text,
                    deviceType: device.type,
                    configurationType
                };
                try {
                    configSnapshot.binary = yield (yield this.eventBinary.download(event)).text();
                    if (event.c8y_IsBinary) {
                        configSnapshot.binaryType = event.c8y_IsBinary.type;
                    }
                }
                catch (ex) {
                    const msg = gettext('Could not get the binary.');
                    this.alert.danger(msg);
                }
            }
            return configSnapshot;
        });
    }
    getLegacyConfigSnapshot(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            let configSnapshot;
            let mo;
            const device = (yield this.inventory.detail(deviceId, { withChildren: false })).data;
            const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;
            if (!snapshotId) {
                return;
            }
            try {
                mo = (yield this.inventory.detail(snapshotId)).data;
            }
            catch (ex) {
                // do nothing
            }
            if (mo) {
                configSnapshot = {
                    time: mo.creationTime,
                    name: mo.name
                };
                configSnapshot.binary = yield this.getBinaryText(mo.url, { allowExternal: false });
            }
            return configSnapshot;
        });
    }
    /**
     * Returns a binary object as text.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **allowExternal** - `boolean` - allows downloading external binary file
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getBinaryText(binaryUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
            let res;
            if (!binaryId && options.allowExternal) {
                res = yield this.getExternalBinaryResponse(binaryUrl, options);
            }
            else {
                res = yield this.getInternalBinaryResponse(binaryId, options);
            }
            if (!res) {
                return null;
            }
            return res.text();
        });
    }
    /**
     * Returns a binary object as File.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **allowExternal** - `boolean` - allows downloading external binary file
     */
    getBinaryFile(binaryUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
            if (!binaryId && !options.allowExternal) {
                return null;
            }
            // @TODO: note that it doesn't solve issue with external binary here, such url won't have binaryId, so we won't know the name or contentType to use in File constructor, let's add a @FIXME comment for now?
            const { name, contentType } = (yield this.inventory.detail(binaryId)).data;
            const res = !!binaryId
                ? yield this.getInternalBinaryResponse(binaryId)
                : yield this.getExternalBinaryResponse(binaryUrl);
            const arrayBuffer = yield res.arrayBuffer();
            return new File([arrayBuffer], name, { type: contentType });
        });
    }
    /**
     * Gets the last configuration update operation for given device.
     * Looks for c8y_Configuration and c8y_SendConfiguration operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    getLastConfigUpdateOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                deviceId,
                dateFrom: new Date(0).toISOString(),
                dateTo: new Date(Date.now()).toISOString(),
                revert: true,
                pageSize: 1
            };
            return this.getLatestMatchingOperation([
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_Configuration' }),
                Object.assign(Object.assign({}, filters), { fragmentType: 'c8y_SendConfiguration' })
            ]);
        });
    }
    /**
     * Prepares a configuration download operation for given device and its current configuration.
     * Supports c8y_SendConfiguration operation.
     * @param device The device for which operation should be prepared.
     */
    createTextBasedConfigurationReloadOperation(device) {
        return {
            deviceId: device.id,
            description: gettext('Requested current configuration'),
            c8y_SendConfiguration: {}
        };
    }
    /**
     * Prepares a configuration update operation for the given device.
     * Supports c8y_Configuration operation.
     * @param device The device for which operation should be prepared.
     * @param config The configuration which will update the existing one.
     */
    createTextBasedConfigurationUpdateOperation(device, config) {
        return {
            deviceId: device.id,
            description: gettext('Configuration update'),
            c8y_Configuration: {
                config
            }
        };
    }
    getBinary(binaryId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.inventoryBinary.download(binaryId);
            }
            catch (ex) {
                const msg = gettext('Could not get the binary.');
                this.alert.danger(msg);
            }
        });
    }
    /**
     * Gets all available snapshots from the repository for the given device.
     * @param device The device for which the snapshots should be prepared.
     * @param configurationType Selected configuration type.
     */
    getSnapshotsFromRepository(device, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchQuery = this.getConfigurationTypeQuery(device, configurationType);
            const res = yield this.listRepositoryEntries(RepositoryType.CONFIGURATION, {
                query: searchQuery,
                params: { pageSize: 100 }
            });
            return res.data;
        });
    }
    /**
     * Returns a binary object.
     * @param binaryId binary ID
     * @param options The object with additional options:
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getInternalBinaryResponse(binaryId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                res = yield this.inventoryBinary.download(binaryId);
            }
            catch (ex) {
                if (!options.noAlerts) {
                    const msg = gettext('Could not get the binary.');
                    this.alert.danger(msg);
                }
            }
            return res;
        });
    }
    /**
     * Returns a binary object.
     * @param binaryUrl The URL to find binary
     * @param options The object with additional options:
     * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`
     */
    getExternalBinaryResponse(binaryUrl, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                const fetchRes = yield fetch(binaryUrl);
                if (fetchRes.status >= 400) {
                    throw res;
                }
                res = fetchRes;
            }
            catch (_a) {
                if (!options.noAlerts) {
                    const msg = gettext('Could not get the external binary');
                    this.alert.danger(msg);
                }
            }
            return res;
        });
    }
    createEntry(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryId = yield this.inventoryBinary.getIdFromUrl(mo.url);
            const newMo = yield this.inventory.create(mo);
            if (binaryId) {
                yield this.inventory.childAdditionsAdd(binaryId, newMo.data);
            }
            return newMo;
        });
    }
    updateEntry(mo, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const existingBinaryId = yield this.inventoryBinary.getIdFromUrl(url);
            const newBinaryId = yield this.inventoryBinary.getIdFromUrl(mo.url);
            if (existingBinaryId && existingBinaryId !== newBinaryId) {
                const id = this.inventoryBinary.getIdFromUrl(url);
                yield this.inventoryBinary.delete(id);
            }
            if (newBinaryId) {
                yield this.inventory.childAdditionsAdd(newBinaryId, mo);
            }
            return this.inventory.update(mo);
        });
    }
    getBaseVersionResultListForLegacyEntry(entry) {
        return Promise.resolve({
            res: {},
            data: [
                Object.assign(Object.assign({}, entry), { [entry.type]: {
                        version: entry.version,
                        url: entry.url
                    } })
            ]
        });
    }
    getDeviceSoftwareChangesFromSoftwareListOperation(operation, device) {
        const changes = [];
        forEach(device.c8y_SoftwareList, deviceSoftware => {
            const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });
            if ((operationSoftware && operationSoftware.version) !==
                (deviceSoftware && deviceSoftware.version)) {
                changes.push(Object.assign(Object.assign({}, deviceSoftware), { action: 'delete' }));
            }
        });
        forEach(operation.c8y_SoftwareList, operationSoftware => {
            const deviceSoftware = find(device.c8y_SoftwareList, { name: operationSoftware.name });
            if ((operationSoftware && operationSoftware.version) !==
                (deviceSoftware && deviceSoftware.version)) {
                changes.push(Object.assign(Object.assign({}, operationSoftware), { action: 'install' }));
            }
        });
        return changes;
    }
    getDeviceSoftwareChangesFromSoftwareOperation(operation, device) {
        const changes = [];
        forEach(device.c8y_Software, (deviceSoftwareVersion, deviceSoftwareName) => {
            if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {
                changes.push({
                    name: deviceSoftwareName,
                    version: deviceSoftwareVersion,
                    action: 'delete'
                });
            }
        });
        forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {
            const deviceSoftwareVersion = device.c8y_Software && device.c8y_Software[operationSoftwareName];
            if (deviceSoftwareVersion !== operationSoftwareVersion) {
                changes.push({
                    name: operationSoftwareName,
                    version: operationSoftwareVersion,
                    action: 'install'
                });
            }
        });
        return changes;
    }
}
RepositoryService.ɵfac = function RepositoryService_Factory(t) { return new (t || RepositoryService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryBinaryService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService), ɵngcc0.ɵɵinject(ɵngcc1.EventService), ɵngcc0.ɵɵinject(ɵngcc2.OperationRealtimeService), ɵngcc0.ɵɵinject(ɵngcc1.EventBinaryService)); };
RepositoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RepositoryService, factory: RepositoryService.ɵfac });
RepositoryService.ctorParameters = () => [
    { type: InventoryService },
    { type: InventoryBinaryService },
    { type: OperationService },
    { type: AlertService },
    { type: EventService },
    { type: OperationRealtimeService },
    { type: EventBinaryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RepositoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.InventoryBinaryService }, { type: ɵngcc1.OperationService }, { type: ɵngcc2.AlertService }, { type: ɵngcc1.EventService }, { type: ɵngcc2.OperationRealtimeService }, { type: ɵngcc1.EventBinaryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,