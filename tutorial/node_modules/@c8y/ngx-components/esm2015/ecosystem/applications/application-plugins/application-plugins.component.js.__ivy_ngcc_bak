import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
import { EcosystemService } from '../../ecosystem.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { InstallPluginComponent } from './install-plugin.component';
import { AlertService, gettext, ModalService, PluginsService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { map, shareReplay } from 'rxjs/operators';
export class ApplicationPluginsComponent {
    constructor(activatedRoute, ecosystemService, bsModalService, modal, translateService, pluginsService, alertService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.modal = modal;
        this.translateService = translateService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.exportedPlugins$ = new BehaviorSubject([]);
        this.remotePlugins$ = new BehaviorSubject({});
        this.allAvailablePlugins$ = new BehaviorSubject([]);
        this.installedPlugins$ = combineLatest([
            this.remotePlugins$.pipe(map((remotes) => this.getRemotePluginsList(remotes))),
            this.allAvailablePlugins$
        ]).pipe(map(([remotePlugins, allPlugins]) => allPlugins.filter((p) => remotePlugins.includes(p.id))), shareReplay(1));
        this.pluginsToDelete = [];
        this.archives = [];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.activatedRoute.snapshot.parent.data.contextData;
            this.app = yield this.ecosystemService.getApplication(id);
            this.archives = yield this.ecosystemService.listArchives(this.app.id);
            this.archives.sort((a, b) => {
                return new Date(b.created) - new Date(a.created);
            });
            const manifest = this.app.manifest;
            if (manifest) {
                const exports = manifest.exports || [];
                this.exportedPlugins$.next(this.extendPluginList(exports, this.app.contextPath));
                const remotes = manifest.remotes || {};
                this.remotePlugins$.next(remotes);
            }
            this.allAvailablePlugins$.next(yield this.getAllPlugins());
        });
    }
    installPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                plugins$: combineLatest([
                    this.allAvailablePlugins$,
                    this.installedPlugins$.pipe(map((plugins) => plugins.map((p) => p.id))),
                    this.exportedPlugins$.pipe(map((plugins) => plugins.map((p) => p.id)))
                ]).pipe(map(([allPlugins, installedPlugins, exportedPluginNames]) => {
                    const plugins = [];
                    allPlugins
                        .filter((p) => !exportedPluginNames.includes(p.id))
                        .forEach((p) => plugins.push(Object.assign(Object.assign({}, p), { installed: !!installedPlugins.includes(p.id) })));
                    return plugins;
                }), shareReplay(1))
            };
            try {
                const pluginsToAdd = (yield this.bsModalService.show(InstallPluginComponent, {
                    class: 'modal-md',
                    initialState,
                    ignoreBackdropClick: true
                }).content.result);
                const currentRemotes = Object.assign({}, this.remotePlugins$.value);
                pluginsToAdd.forEach((pluginId) => {
                    const { contextPath, name } = this.parsePluginId(pluginId);
                    (currentRemotes[contextPath] = currentRemotes[contextPath] || []).push(name);
                });
                if (this.archives.length === 6) {
                    yield this.ecosystemService.removeOldestArchive(this.app, this.archives);
                }
                this.updateApplicationRemotes(currentRemotes);
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    removePlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedAppName = yield this.ecosystemService.getHumanizedAppName(this.app);
            try {
                yield this.modal.confirm(gettext('Remove plugins'), this.translateService.instant(gettext(`You are about to remove plugins from application "{{ humanizedAppName }}". The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?`), { humanizedAppName }), Status.DANGER, {
                    ok: gettext('Remove'),
                    cancel: gettext('Cancel')
                });
                const remotes = Object.assign({}, this.remotePlugins$.value);
                this.pluginsToDelete.forEach((pluginId) => {
                    const { contextPath, name } = this.parsePluginId(pluginId);
                    remotes[contextPath] = remotes[contextPath].filter((p) => p !== name);
                });
                this.updateApplicationRemotes(remotes);
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    getAllPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const plugins = [];
            const packages = yield this.ecosystemService.getPackageApplications();
            const apps = [...packages, this.app];
            apps.forEach((app) => {
                const exports = (app.manifest && app.manifest.exports) || [];
                plugins.push(...this.extendPluginList(exports, app.contextPath));
            });
            return plugins;
        });
    }
    updateApplicationRemotes(remotes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            try {
                yield this.pluginsService.updateRemotesInCumulocityJson(this.app, remotes);
                this.remotePlugins$.next(remotes);
            }
            catch (ex) {
                this.alertService.danger(ex);
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    getRemotePluginsList(remotes) {
        const importContextPaths = Object.keys(remotes);
        const plugins = [];
        importContextPaths.forEach((contextPath) => {
            const moduleNames = remotes[contextPath];
            plugins.push(...moduleNames.map((module) => this.createPluginId(contextPath, module)));
        });
        return plugins;
    }
    extendPluginList(plugins, contextPath) {
        const extendedPlugins = [];
        plugins.map((p) => {
            extendedPlugins.push(Object.assign(Object.assign({}, p), { id: this.createPluginId(contextPath, p.name, p.module), contextPath }));
        });
        return extendedPlugins;
    }
    createPluginId(contextPath, pluginName, pluginModuleName) {
        return `${contextPath}/${pluginModuleName || pluginName}`;
    }
    parsePluginId(id) {
        const [contextPath, name] = id.split('/');
        return { contextPath, name };
    }
}
ApplicationPluginsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-app-plugins',
                template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'All applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll bg-gray-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\" translate>Included plugins</h4>\n    </div>\n    <div class=\"card-block large-padding\">\n      <p class=\"d-flex a-i-start p-b-16\">\n        <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n        <span translate>\n          Plugins included with the application. These plugins are required for running the\n          application and cannot be removed.\n        </span>\n      </p>\n      <c8y-plugin-list\n        [emptyListText]=\"'This application doesn\\'t contain plugins.' | translate\"\n        [plugins$]=\"exportedPlugins$\"\n        class=\"separator-top d-block\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"content-fullpage d-flex d-col\">\n    <div class=\"card-header large-padding separator\">\n      <h4 class=\"card-title\" translate>Installed plugins</h4>\n    </div>\n    <div class=\"inner-scroll flex-grow\">\n      <div class=\"card-block large-padding\">\n        <p class=\"d-flex a-i-start p-b-16\">\n          <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n          <span translate>\n            Plugins currently installed for this application. Upgrading the application won't change\n            any of these plugins.\n          </span>\n        </p>\n        <c8y-plugin-list\n          (selectedItems)=\"pluginsToDelete = $event\"\n          [emptyListText]=\"'No plugins installed' | translate\"\n          [plugins$]=\"installedPlugins$\"\n          [selectable]=\"true\"\n          class=\"separator-top d-block\"\n        ></c8y-plugin-list>\n      </div>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <button\n        (click)=\"removePlugins()\"\n        [disabled]=\"pluginsToDelete.length === 0 || isLoading\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Remove plugins' | translate }}\"\n        translate\n      >\n        Remove plugins\n      </button>\n      <button\n        (click)=\"installPlugins()\"\n        [ngClass]=\"{ 'btn-pending': isLoading }\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Install plugins' | translate }}\"\n        translate\n      >\n        Install plugins\n      </button>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ApplicationPluginsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: EcosystemService },
    { type: BsModalService },
    { type: ModalService },
    { type: TranslateService },
    { type: PluginsService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,