import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { ModalService, gettext, Status } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { map } from 'rxjs/operators';
export class InstallPluginComponent {
    constructor(bsModalRef, modal) {
        this.bsModalRef = bsModalRef;
        this.modal = modal;
        this.filterTerm$ = new BehaviorSubject('');
        this.filteredPlugins$ = new BehaviorSubject([]);
        this.selectedPlugins = [];
        this.result = new Promise((resolve, reject) => {
            this._install = resolve;
            this._cancel = reject;
        });
    }
    ngOnInit() {
        this.filteredPlugins$ = combineLatest(this.plugins$, this.filterTerm$).pipe(map(([plugins, filterTerm]) => filterTerm.trim().length === 0
            ? plugins
            : plugins.filter((plugin) => this.filterContainString(plugin.name, filterTerm))));
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
    install() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.modal.confirm(gettext('Install plugins'), gettext('The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?'), Status.INFO, { ok: gettext('Continue') });
            this._install(this.selectedPlugins);
            this.bsModalRef.hide();
        });
    }
    filterContainString(name, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    }
}
InstallPluginComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-install-plugin',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'plugin'\"></i>\n    <h4 translate>Available plugins</h4>\n  </div>\n  <div class=\"p-t-8 p-16 text-center separator-bottom\">\n    <p class=\"text-medium m-b-8\" translate>Select the compatible plugins to install</p>\n    <c8y-filter (onSearch)=\"this.filterTerm$.next($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body p-t-0 p-b-0\">\n      <c8y-plugin-list\n        (selectedItems)=\"selectedPlugins = $event\"\n        [emptyListText]=\"'No plugins available' | translate\"\n        [plugins$]=\"filteredPlugins$\"\n        [selectable]=\"true\"\n        class=\"m-t-16\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Cancel\n    </button>\n    <button\n      (click)=\"install()\"\n      [disabled]=\"selectedPlugins.length === 0\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Install' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Install' | translate }} ({{ selectedPlugins.length }})\n    </button>\n  </div>\n</div>\n"
            },] }
];
InstallPluginComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ModalService }
];
InstallPluginComponent.propDecorators = {
    plugins$: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbC1wbHVnaW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZWNvc3lzdGVtL2FwcGxpY2F0aW9ucy9hcHBsaWNhdGlvbi1wbHVnaW5zL2luc3RhbGwtcGx1Z2luLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU1yQyxNQUFNLE9BQU8sc0JBQXNCO0lBWWpDLFlBQW9CLFVBQXNCLEVBQVUsS0FBbUI7UUFBbkQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWM7UUFWdkUsZ0JBQVcsR0FBNEIsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0QscUJBQWdCLEdBQW9DLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLG9CQUFlLEdBQWEsRUFBRSxDQUFDO1FBQy9CLFdBQU0sR0FBa0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFJdUUsQ0FBQztJQUUzRSxRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3pFLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FDNUIsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxPQUFPO1lBQ1QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUF5QixFQUFFLEVBQUUsQ0FDM0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQ2xELENBQ04sQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUssT0FBTzs7WUFDWCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUN0QixPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFDMUIsT0FBTyxDQUNMLHNIQUFzSCxDQUN2SCxFQUNELE1BQU0sQ0FBQyxJQUFJLEVBQ1gsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQzVCLENBQUM7WUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLENBQUM7S0FBQTtJQUVPLG1CQUFtQixDQUFDLElBQVksRUFBRSxVQUFrQjtRQUMxRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0MsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUFuREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLGl5Q0FBOEM7YUFDL0M7OztZQU5RLFVBQVU7WUFIVixZQUFZOzs7dUJBV2xCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsU2VydmljZSwgZ2V0dGV4dCwgU3RhdHVzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblBsdWdpbiB9IGZyb20gJy4uLy4uL2Vjb3N5c3RlbS5tb2RlbCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWluc3RhbGwtcGx1Z2luJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2luc3RhbGwtcGx1Z2luLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJbnN0YWxsUGx1Z2luQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgcGx1Z2lucyQ6IEJlaGF2aW9yU3ViamVjdDxBcHBsaWNhdGlvblBsdWdpbltdPjtcbiAgZmlsdGVyVGVybSQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XG4gIGZpbHRlcmVkUGx1Z2lucyQ6IE9ic2VydmFibGU8QXBwbGljYXRpb25QbHVnaW5bXT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgc2VsZWN0ZWRQbHVnaW5zOiBzdHJpbmdbXSA9IFtdO1xuICByZXN1bHQ6IFByb21pc2U8dm9pZD4gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhpcy5faW5zdGFsbCA9IHJlc29sdmU7XG4gICAgdGhpcy5fY2FuY2VsID0gcmVqZWN0O1xuICB9KTtcbiAgcHJpdmF0ZSBfaW5zdGFsbDtcbiAgcHJpdmF0ZSBfY2FuY2VsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnNNb2RhbFJlZjogQnNNb2RhbFJlZiwgcHJpdmF0ZSBtb2RhbDogTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZmlsdGVyZWRQbHVnaW5zJCA9IGNvbWJpbmVMYXRlc3QodGhpcy5wbHVnaW5zJCwgdGhpcy5maWx0ZXJUZXJtJCkucGlwZShcbiAgICAgIG1hcCgoW3BsdWdpbnMsIGZpbHRlclRlcm1dKSA9PlxuICAgICAgICBmaWx0ZXJUZXJtLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgICAgICA/IHBsdWdpbnNcbiAgICAgICAgICA6IHBsdWdpbnMuZmlsdGVyKChwbHVnaW46IEFwcGxpY2F0aW9uUGx1Z2luKSA9PlxuICAgICAgICAgICAgICB0aGlzLmZpbHRlckNvbnRhaW5TdHJpbmcocGx1Z2luLm5hbWUsIGZpbHRlclRlcm0pXG4gICAgICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmJzTW9kYWxSZWYuaGlkZSgpO1xuICAgIHRoaXMuX2NhbmNlbCgpO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbCgpIHtcbiAgICBhd2FpdCB0aGlzLm1vZGFsLmNvbmZpcm0oXG4gICAgICBnZXR0ZXh0KCdJbnN0YWxsIHBsdWdpbnMnKSxcbiAgICAgIGdldHRleHQoXG4gICAgICAgICdUaGUgb3BlcmF0aW9uIG1heSB0YWtlIHNldmVyYWwgbWludXRlcy4gRHVyaW5nIHRoaXMgdGltZSB0aGUgYXBwbGljYXRpb24gbWF5IGJlIHVuYXZhaWxhYmxlLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPydcbiAgICAgICksXG4gICAgICBTdGF0dXMuSU5GTyxcbiAgICAgIHsgb2s6IGdldHRleHQoJ0NvbnRpbnVlJykgfVxuICAgICk7XG4gICAgdGhpcy5faW5zdGFsbCh0aGlzLnNlbGVjdGVkUGx1Z2lucyk7XG4gICAgdGhpcy5ic01vZGFsUmVmLmhpZGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyQ29udGFpblN0cmluZyhuYW1lOiBzdHJpbmcsIGZpbHRlclRlcm06IHN0cmluZykge1xuICAgIGNvbnN0IHRlcm0gPSBmaWx0ZXJUZXJtLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIHJldHVybiBuYW1lICYmIG5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRlcm0pID4gLTE7XG4gIH1cbn1cbiJdfQ==