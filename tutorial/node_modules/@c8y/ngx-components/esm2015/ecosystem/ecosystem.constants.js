import { ERROR_TYPE } from './ecosystem.model';
import { gettext } from '@c8y/ngx-components';
export const ERROR_MESSAGES = {
    [ERROR_TYPE.TYPE_VALIDATION]: gettext('Wrong file format. Expected a *.zip file with a valid manifest.'),
    [ERROR_TYPE.ALREADY_SUBSCRIBED]: gettext('Could not subscribe to the microservice because another application with the same context path is already subscribed.'),
    [ERROR_TYPE.NO_MANIFEST_FILE]: gettext('Could not find a manifest.'),
    [ERROR_TYPE.INVALID_PACKAGE]: gettext('You have not uploaded a valid package.'),
    [ERROR_TYPE.INVALID_APPLICATION]: gettext('You have not uploaded a valid application.'),
    [ERROR_TYPE.INTERNAL_ERROR]: gettext('An internal error occurred, try to upload again.')
};
export const APP_STATE = {
    SUBSCRIBED: {
        label: gettext('Subscribed`application`'),
        class: 'label-primary'
    },
    CUSTOM: {
        label: gettext('Custom`application`'),
        class: 'label-info'
    },
    EXTERNAL: {
        label: gettext('External`application`'),
        class: 'label-warning'
    },
    UNPACKED: {
        label: gettext('Unpacked`application`'),
        class: 'label-success'
    },
    PACKAGE_APP: {
        label: gettext('Application'),
        class: 'label-success'
    },
    PACKAGE_PLUGIN: {
        label: gettext('Plugins'),
        class: 'label-info'
    }
};
const ɵ0 = (repository) => ((repository === null || repository === void 0 ? void 0 : repository.url) ? repository.url : repository), ɵ1 = (e, link) => window.open(link.value, '_blank', 'noopener,noreferrer'), ɵ2 = (e, link) => window.open(link.value, '_blank', 'noopener,noreferrer');
export const packageProperties = [
    {
        label: gettext('Version'),
        key: 'version'
    },
    {
        label: gettext('Author'),
        key: 'author'
    },
    {
        label: gettext('Keywords'),
        key: 'keywords'
    },
    {
        label: gettext('Source'),
        key: 'repository',
        transform: ɵ0,
        type: 'link',
        action: ɵ1
    },
    {
        label: gettext('Homepage'),
        key: 'homepage',
        type: 'link',
        action: ɵ2
    },
    {
        label: gettext('Required platform version'),
        key: 'requiredPlatformVersion'
    },
    {
        label: gettext('License'),
        key: 'license'
    }
];
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNvc3lzdGVtLmNvbnN0YW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Vjb3N5c3RlbS9lY29zeXN0ZW0uY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsT0FBTyxFQUFzQixNQUFNLHFCQUFxQixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRztJQUM1QixDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLENBQ25DLGlFQUFpRSxDQUNsRTtJQUNELENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsT0FBTyxDQUN0Qyx1SEFBdUgsQ0FDeEg7SUFDRCxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztJQUNwRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLENBQUMsd0NBQXdDLENBQUM7SUFDL0UsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7SUFDdkYsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsT0FBTyxDQUFDLGtEQUFrRCxDQUFDO0NBQ3pGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUN6QyxLQUFLLEVBQUUsZUFBZTtLQUN2QjtJQUNELE1BQU0sRUFBRTtRQUNOLEtBQUssRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7UUFDckMsS0FBSyxFQUFFLFlBQVk7S0FDcEI7SUFDRCxRQUFRLEVBQUU7UUFDUixLQUFLLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1FBQ3ZDLEtBQUssRUFBRSxlQUFlO0tBQ3ZCO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztRQUN2QyxLQUFLLEVBQUUsZUFBZTtLQUN2QjtJQUNELFdBQVcsRUFBRTtRQUNYLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzdCLEtBQUssRUFBRSxlQUFlO0tBQ3ZCO0lBQ0QsY0FBYyxFQUFFO1FBQ2QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekIsS0FBSyxFQUFFLFlBQVk7S0FDcEI7Q0FDRixDQUFDO1dBa0JhLENBQUMsVUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLEdBQUcsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BRXZFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBZSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxPQU0vRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQWUsRUFBRSxRQUFRLEVBQUUscUJBQXFCLENBQUM7QUF4QjNGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUF5QjtJQUNyRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3pCLEdBQUcsRUFBRSxTQUFTO0tBQ2Y7SUFDRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ3hCLEdBQUcsRUFBRSxRQUFRO0tBQ2Q7SUFDRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzFCLEdBQUcsRUFBRSxVQUFVO0tBQ2hCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN4QixHQUFHLEVBQUUsWUFBWTtRQUNqQixTQUFTLElBQXNFO1FBQy9FLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxJQUFpRjtLQUN4RjtJQUNEO1FBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDMUIsR0FBRyxFQUFFLFVBQVU7UUFDZixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sSUFBaUY7S0FDeEY7SUFDRDtRQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsMkJBQTJCLENBQUM7UUFDM0MsR0FBRyxFQUFFLHlCQUF5QjtLQUMvQjtJQUNEO1FBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekIsR0FBRyxFQUFFLFNBQVM7S0FDZjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFUlJPUl9UWVBFIH0gZnJvbSAnLi9lY29zeXN0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgUHJvcGVydGllc0xpc3RJdGVtIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9NRVNTQUdFUyA9IHtcbiAgW0VSUk9SX1RZUEUuVFlQRV9WQUxJREFUSU9OXTogZ2V0dGV4dChcbiAgICAnV3JvbmcgZmlsZSBmb3JtYXQuIEV4cGVjdGVkIGEgKi56aXAgZmlsZSB3aXRoIGEgdmFsaWQgbWFuaWZlc3QuJ1xuICApLFxuICBbRVJST1JfVFlQRS5BTFJFQURZX1NVQlNDUklCRURdOiBnZXR0ZXh0KFxuICAgICdDb3VsZCBub3Qgc3Vic2NyaWJlIHRvIHRoZSBtaWNyb3NlcnZpY2UgYmVjYXVzZSBhbm90aGVyIGFwcGxpY2F0aW9uIHdpdGggdGhlIHNhbWUgY29udGV4dCBwYXRoIGlzIGFscmVhZHkgc3Vic2NyaWJlZC4nXG4gICksXG4gIFtFUlJPUl9UWVBFLk5PX01BTklGRVNUX0ZJTEVdOiBnZXR0ZXh0KCdDb3VsZCBub3QgZmluZCBhIG1hbmlmZXN0LicpLFxuICBbRVJST1JfVFlQRS5JTlZBTElEX1BBQ0tBR0VdOiBnZXR0ZXh0KCdZb3UgaGF2ZSBub3QgdXBsb2FkZWQgYSB2YWxpZCBwYWNrYWdlLicpLFxuICBbRVJST1JfVFlQRS5JTlZBTElEX0FQUExJQ0FUSU9OXTogZ2V0dGV4dCgnWW91IGhhdmUgbm90IHVwbG9hZGVkIGEgdmFsaWQgYXBwbGljYXRpb24uJyksXG4gIFtFUlJPUl9UWVBFLklOVEVSTkFMX0VSUk9SXTogZ2V0dGV4dCgnQW4gaW50ZXJuYWwgZXJyb3Igb2NjdXJyZWQsIHRyeSB0byB1cGxvYWQgYWdhaW4uJylcbn07XG5cbmV4cG9ydCBjb25zdCBBUFBfU1RBVEUgPSB7XG4gIFNVQlNDUklCRUQ6IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnU3Vic2NyaWJlZGBhcHBsaWNhdGlvbmAnKSxcbiAgICBjbGFzczogJ2xhYmVsLXByaW1hcnknXG4gIH0sXG4gIENVU1RPTToge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdDdXN0b21gYXBwbGljYXRpb25gJyksXG4gICAgY2xhc3M6ICdsYWJlbC1pbmZvJ1xuICB9LFxuICBFWFRFUk5BTDoge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdFeHRlcm5hbGBhcHBsaWNhdGlvbmAnKSxcbiAgICBjbGFzczogJ2xhYmVsLXdhcm5pbmcnXG4gIH0sXG4gIFVOUEFDS0VEOiB7XG4gICAgbGFiZWw6IGdldHRleHQoJ1VucGFja2VkYGFwcGxpY2F0aW9uYCcpLFxuICAgIGNsYXNzOiAnbGFiZWwtc3VjY2VzcydcbiAgfSxcbiAgUEFDS0FHRV9BUFA6IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnQXBwbGljYXRpb24nKSxcbiAgICBjbGFzczogJ2xhYmVsLXN1Y2Nlc3MnXG4gIH0sXG4gIFBBQ0tBR0VfUExVR0lOOiB7XG4gICAgbGFiZWw6IGdldHRleHQoJ1BsdWdpbnMnKSxcbiAgICBjbGFzczogJ2xhYmVsLWluZm8nXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBwYWNrYWdlUHJvcGVydGllczogUHJvcGVydGllc0xpc3RJdGVtW10gPSBbXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnVmVyc2lvbicpLFxuICAgIGtleTogJ3ZlcnNpb24nXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnQXV0aG9yJyksXG4gICAga2V5OiAnYXV0aG9yJ1xuICB9LFxuICB7XG4gICAgbGFiZWw6IGdldHRleHQoJ0tleXdvcmRzJyksXG4gICAga2V5OiAna2V5d29yZHMnXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnU291cmNlJyksXG4gICAga2V5OiAncmVwb3NpdG9yeScsXG4gICAgdHJhbnNmb3JtOiAocmVwb3NpdG9yeTogYW55KSA9PiAocmVwb3NpdG9yeT8udXJsID8gcmVwb3NpdG9yeS51cmwgOiByZXBvc2l0b3J5KSxcbiAgICB0eXBlOiAnbGluaycsXG4gICAgYWN0aW9uOiAoZSwgbGluaykgPT4gd2luZG93Lm9wZW4obGluay52YWx1ZSBhcyBzdHJpbmcsICdfYmxhbmsnLCAnbm9vcGVuZXIsbm9yZWZlcnJlcicpXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnSG9tZXBhZ2UnKSxcbiAgICBrZXk6ICdob21lcGFnZScsXG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIGFjdGlvbjogKGUsIGxpbmspID0+IHdpbmRvdy5vcGVuKGxpbmsudmFsdWUgYXMgc3RyaW5nLCAnX2JsYW5rJywgJ25vb3BlbmVyLG5vcmVmZXJyZXInKVxuICB9LFxuICB7XG4gICAgbGFiZWw6IGdldHRleHQoJ1JlcXVpcmVkIHBsYXRmb3JtIHZlcnNpb24nKSxcbiAgICBrZXk6ICdyZXF1aXJlZFBsYXRmb3JtVmVyc2lvbidcbiAgfSxcbiAge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdMaWNlbnNlJyksXG4gICAga2V5OiAnbGljZW5zZSdcbiAgfVxuXTtcbiJdfQ==