import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { EcosystemService } from '../ecosystem.service';
export class UploadArchiveComponent {
    constructor(ecosystemService, alertService) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.applicationChange = new EventEmitter();
        this.refresh = new EventEmitter();
        this.archives = [];
        this.uploadInProgress = false;
        this.canReactivate = false;
    }
    get uploadProgress() {
        return this.ecosystemService.progress;
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            const file = event[0].file;
            this.onFile(file);
        }
    }
    onFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ecosystemService.isValidAppType(file, this.application.type);
                const isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
                this.archives = isCustomMicroservice
                    ? []
                    : yield this.ecosystemService.listArchives(this.application.id);
                this.archives.sort((a, b) => {
                    return new Date(b.created) - new Date(a.created);
                });
                this.uploadInProgress = true;
                this.uploadProgress.next(0);
                if (this.archives.length === 6 && !isCustomMicroservice) {
                    yield this.ecosystemService.removeOldestArchive(this.application, this.archives);
                }
                const app = yield this.ecosystemService.uploadArchiveToApp(file, this.application);
                this.applicationChange.emit(app);
                this.uploadProgress.next(100);
                this.uploadInProgress = false;
                this.refresh.emit();
                this.alertService.success(gettext('Archive uploaded and activated.'));
            }
            catch (ex) {
                this.uploadInProgress = false;
                this.alertService.addServerFailure(ex);
            }
        });
    }
}
UploadArchiveComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-upload-archive',
                template: "<c8y-drop-area\n  (dropped)=\"onFileDroppedEvent($event)\"\n  [accept]=\"'.zip'\"\n  [files]=\"fileList\"\n  [loading]=\"uploadInProgress\"\n  [maxAllowedFiles]=\"1\"\n  [message]=\"'Upload a *.zip file' | translate\"\n  [progress]=\"uploadProgress | async\"\n  [forceHideList]=\"true\"\n  class=\"drop-area-sm\"\n>\n</c8y-drop-area>\n"
            },] }
];
UploadArchiveComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService }
];
UploadArchiveComponent.propDecorators = {
    application: [{ type: Input }],
    applicationChange: [{ type: Output }],
    refresh: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWFyY2hpdmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZWNvc3lzdGVtL3NoYXJlZC91cGxvYWQtYXJjaGl2ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQU14RCxNQUFNLE9BQU8sc0JBQXNCO0lBYWpDLFlBQW9CLGdCQUFrQyxFQUFVLFlBQTBCO1FBQXRFLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVhoRixzQkFBaUIsR0FBK0IsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDakYsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTFELGFBQVEsR0FBeUIsRUFBRSxDQUFDO1FBS3BDLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUNsQyxrQkFBYSxHQUFZLEtBQUssQ0FBQztJQUU4RCxDQUFDO0lBRTlGLElBQUksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDeEMsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQUs7UUFDdEIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVhLE1BQU0sQ0FBQyxJQUFVOztZQUM3QixJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEUsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUMxRixJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQjtvQkFDbEMsQ0FBQyxDQUFDLEVBQUU7b0JBQ0osQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDMUIsT0FBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFTLEdBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBUyxDQUFDO2dCQUNyRSxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtvQkFDdkQsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2xGO2dCQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ25GLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZFO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN4QztRQUNILENBQUM7S0FBQTs7O1lBdkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QiwyVkFBNEM7YUFDN0M7OztZQUxRLGdCQUFnQjtZQUZoQixZQUFZOzs7MEJBU2xCLEtBQUs7Z0NBQ0wsTUFBTTtzQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElBcHBsaWNhdGlvbiwgSUFwcGxpY2F0aW9uQmluYXJ5IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVjb3N5c3RlbVNlcnZpY2UgfSBmcm9tICcuLi9lY29zeXN0ZW0uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS11cGxvYWQtYXJjaGl2ZScsXG4gIHRlbXBsYXRlVXJsOiAndXBsb2FkLWFyY2hpdmUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVwbG9hZEFyY2hpdmVDb21wb25lbnQge1xuICBASW5wdXQoKSBhcHBsaWNhdGlvbjogSUFwcGxpY2F0aW9uO1xuICBAT3V0cHV0KCkgYXBwbGljYXRpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxJQXBwbGljYXRpb24+ID0gbmV3IEV2ZW50RW1pdHRlcjxJQXBwbGljYXRpb24+KCk7XG4gIEBPdXRwdXQoKSByZWZyZXNoOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBhcmNoaXZlczogSUFwcGxpY2F0aW9uQmluYXJ5W10gPSBbXTtcbiAgdG9BY3RpdmF0ZVZlcnNpb25JZDogc3RyaW5nO1xuICBsYXN0OiBJQXBwbGljYXRpb25CaW5hcnk7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgZmlsZUxpc3Q6IEZpbGVMaXN0O1xuICB1cGxvYWRJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG4gIGNhblJlYWN0aXZhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVjb3N5c3RlbVNlcnZpY2U6IEVjb3N5c3RlbVNlcnZpY2UsIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UpIHt9XG5cbiAgZ2V0IHVwbG9hZFByb2dyZXNzKCk6IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnByb2dyZXNzO1xuICB9XG5cbiAgb25GaWxlRHJvcHBlZEV2ZW50KGV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBldmVudFswXS5maWxlO1xuICAgICAgdGhpcy5vbkZpbGUoZmlsZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvbkZpbGUoZmlsZTogRmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UuaXNWYWxpZEFwcFR5cGUoZmlsZSwgdGhpcy5hcHBsaWNhdGlvbi50eXBlKTtcbiAgICAgIGNvbnN0IGlzQ3VzdG9tTWljcm9zZXJ2aWNlID0gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmlzQ3VzdG9tTWljcm9zZXJ2aWNlKHRoaXMuYXBwbGljYXRpb24pO1xuICAgICAgdGhpcy5hcmNoaXZlcyA9IGlzQ3VzdG9tTWljcm9zZXJ2aWNlXG4gICAgICAgID8gW11cbiAgICAgICAgOiBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UubGlzdEFyY2hpdmVzKHRoaXMuYXBwbGljYXRpb24uaWQpO1xuICAgICAgdGhpcy5hcmNoaXZlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIHJldHVybiAobmV3IERhdGUoYi5jcmVhdGVkKSBhcyBhbnkpIC0gKG5ldyBEYXRlKGEuY3JlYXRlZCkgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBsb2FkUHJvZ3Jlc3MubmV4dCgwKTtcbiAgICAgIGlmICh0aGlzLmFyY2hpdmVzLmxlbmd0aCA9PT0gNiAmJiAhaXNDdXN0b21NaWNyb3NlcnZpY2UpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnJlbW92ZU9sZGVzdEFyY2hpdmUodGhpcy5hcHBsaWNhdGlvbiwgdGhpcy5hcmNoaXZlcyk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcHAgPSBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UudXBsb2FkQXJjaGl2ZVRvQXBwKGZpbGUsIHRoaXMuYXBwbGljYXRpb24pO1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbkNoYW5nZS5lbWl0KGFwcCk7XG4gICAgICB0aGlzLnVwbG9hZFByb2dyZXNzLm5leHQoMTAwKTtcbiAgICAgIHRoaXMudXBsb2FkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5yZWZyZXNoLmVtaXQoKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnQXJjaGl2ZSB1cGxvYWRlZCBhbmQgYWN0aXZhdGVkLicpKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==