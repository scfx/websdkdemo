import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { EcosystemService } from '../ecosystem.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ecosystem.service';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/common';
export class UploadArchiveComponent {
    constructor(ecosystemService, alertService) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.applicationChange = new EventEmitter();
        this.refresh = new EventEmitter();
        this.archives = [];
        this.uploadInProgress = false;
        this.canReactivate = false;
    }
    get uploadProgress() {
        return this.ecosystemService.progress;
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            const file = event[0].file;
            this.onFile(file);
        }
    }
    onFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ecosystemService.isValidAppType(file, this.application.type);
                const isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
                this.archives = isCustomMicroservice
                    ? []
                    : yield this.ecosystemService.listArchives(this.application.id);
                this.archives.sort((a, b) => {
                    return new Date(b.created) - new Date(a.created);
                });
                this.uploadInProgress = true;
                this.uploadProgress.next(0);
                if (this.archives.length === 6 && !isCustomMicroservice) {
                    yield this.ecosystemService.removeOldestArchive(this.application, this.archives);
                }
                const app = yield this.ecosystemService.uploadArchiveToApp(file, this.application);
                this.applicationChange.emit(app);
                this.uploadProgress.next(100);
                this.uploadInProgress = false;
                this.refresh.emit();
                this.alertService.success(gettext('Archive uploaded and activated.'));
            }
            catch (ex) {
                this.uploadInProgress = false;
                this.alertService.addServerFailure(ex);
            }
        });
    }
}
UploadArchiveComponent.ɵfac = function UploadArchiveComponent_Factory(t) { return new (t || UploadArchiveComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EcosystemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
UploadArchiveComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UploadArchiveComponent, selectors: [["c8y-upload-archive"]], inputs: { application: "application" }, outputs: { applicationChange: "applicationChange", refresh: "refresh" }, decls: 3, vars: 11, consts: [[1, "drop-area-sm", 3, "accept", "files", "loading", "maxAllowedFiles", "message", "progress", "forceHideList", "dropped"]], template: function UploadArchiveComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-drop-area", 0);
        ɵngcc0.ɵɵlistener("dropped", function UploadArchiveComponent_Template_c8y_drop_area_dropped_0_listener($event) { return ctx.onFileDroppedEvent($event); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("accept", ".zip")("files", ctx.fileList)("loading", ctx.uploadInProgress)("maxAllowedFiles", 1)("message", ɵngcc0.ɵɵpipeBind1(1, 7, "Upload a *.zip file"))("progress", ɵngcc0.ɵɵpipeBind1(2, 9, ctx.uploadProgress))("forceHideList", true);
    } }, directives: [ɵngcc2.DropAreaComponent], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2 });
UploadArchiveComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService }
];
UploadArchiveComponent.propDecorators = {
    application: [{ type: Input }],
    applicationChange: [{ type: Output }],
    refresh: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UploadArchiveComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-upload-archive',
                template: "<c8y-drop-area\n  (dropped)=\"onFileDroppedEvent($event)\"\n  [accept]=\"'.zip'\"\n  [files]=\"fileList\"\n  [loading]=\"uploadInProgress\"\n  [maxAllowedFiles]=\"1\"\n  [message]=\"'Upload a *.zip file' | translate\"\n  [progress]=\"uploadProgress | async\"\n  [forceHideList]=\"true\"\n  class=\"drop-area-sm\"\n>\n</c8y-drop-area>\n"
            }]
    }], function () { return [{ type: ɵngcc1.EcosystemService }, { type: ɵngcc2.AlertService }]; }, { applicationChange: [{
            type: Output
        }], refresh: [{
            type: Output
        }], application: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWFyY2hpdmUuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9lY29zeXN0ZW0vc2hhcmVkL3VwbG9hZC1hcmNoaXZlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7OztBQU14RCxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBWUUsWUFBb0IsZ0JBQWtDLEVBQVUsWUFBMEI7QUFBSSxRQUExRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFBUyxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBWGpGLHNCQUFpQixHQUErQixJQUFJLFlBQVksRUFBZ0IsQ0FBQztBQUM3RixRQUFZLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUM1RCxRQUNFLGFBQVEsR0FBeUIsRUFBRSxDQUFDO0FBQ3RDLFFBSUUscUJBQWdCLEdBQVksS0FBSyxDQUFDO0FBQ3BDLFFBQUUsa0JBQWEsR0FBWSxLQUFLLENBQUM7QUFDakMsSUFDK0YsQ0FBQztBQUNoRyxJQUNFLElBQUksY0FBYztBQUFLLFFBQ3JCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztBQUMxQyxJQUFFLENBQUM7QUFDSCxJQUNFLGtCQUFrQixDQUFDLEtBQUs7QUFBSSxRQUMxQixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNuQyxZQUFNLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDakMsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNnQixNQUFNLENBQUMsSUFBVTtBQUFJO0FBRUEsWUFEakMsSUFBSTtBQUNSLGdCQUFNLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5RSxnQkFBTSxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDaEcsZ0JBQU0sSUFBSSxDQUFDLFFBQVEsR0FBRyxvQkFBb0I7QUFDMUMsb0JBQVEsQ0FBQyxDQUFDLEVBQUU7QUFDWixvQkFBUSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEUsZ0JBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbEMsb0JBQVEsT0FBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFTLEdBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBUyxDQUFDO0FBQzNFLGdCQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsZ0JBQU0sSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUNuQyxnQkFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxnQkFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0FBQy9ELG9CQUFRLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pGLGlCQUFPO0FBQ1AsZ0JBQU0sTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN6RixnQkFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLGdCQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLGdCQUFNLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDcEMsZ0JBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxQixnQkFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLGFBQUs7QUFBQyxZQUFBLE9BQU8sRUFBRSxFQUFFO0FBQ2pCLGdCQUFNLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDcEMsZ0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIO2tEQXhEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG9CQUFvQixrQkFDOUI7dVFBQTRDLGNBQzdDOzs7Ozs7Ozt5SEFDSTtBQUFDO0FBQ1UsWUFQUCxnQkFBZ0I7QUFBSSxZQUZwQixZQUFZO0FBQUc7QUFBRztBQUNuQiwwQkFRTCxLQUFLO0FBQUssZ0NBQ1YsTUFBTTtBQUFLLHNCQUNYLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElBcHBsaWNhdGlvbiwgSUFwcGxpY2F0aW9uQmluYXJ5IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVjb3N5c3RlbVNlcnZpY2UgfSBmcm9tICcuLi9lY29zeXN0ZW0uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS11cGxvYWQtYXJjaGl2ZScsXG4gIHRlbXBsYXRlVXJsOiAndXBsb2FkLWFyY2hpdmUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVwbG9hZEFyY2hpdmVDb21wb25lbnQge1xuICBASW5wdXQoKSBhcHBsaWNhdGlvbjogSUFwcGxpY2F0aW9uO1xuICBAT3V0cHV0KCkgYXBwbGljYXRpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxJQXBwbGljYXRpb24+ID0gbmV3IEV2ZW50RW1pdHRlcjxJQXBwbGljYXRpb24+KCk7XG4gIEBPdXRwdXQoKSByZWZyZXNoOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBhcmNoaXZlczogSUFwcGxpY2F0aW9uQmluYXJ5W10gPSBbXTtcbiAgdG9BY3RpdmF0ZVZlcnNpb25JZDogc3RyaW5nO1xuICBsYXN0OiBJQXBwbGljYXRpb25CaW5hcnk7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgZmlsZUxpc3Q6IEZpbGVMaXN0O1xuICB1cGxvYWRJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG4gIGNhblJlYWN0aXZhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVjb3N5c3RlbVNlcnZpY2U6IEVjb3N5c3RlbVNlcnZpY2UsIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UpIHt9XG5cbiAgZ2V0IHVwbG9hZFByb2dyZXNzKCk6IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnByb2dyZXNzO1xuICB9XG5cbiAgb25GaWxlRHJvcHBlZEV2ZW50KGV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBldmVudFswXS5maWxlO1xuICAgICAgdGhpcy5vbkZpbGUoZmlsZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvbkZpbGUoZmlsZTogRmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UuaXNWYWxpZEFwcFR5cGUoZmlsZSwgdGhpcy5hcHBsaWNhdGlvbi50eXBlKTtcbiAgICAgIGNvbnN0IGlzQ3VzdG9tTWljcm9zZXJ2aWNlID0gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmlzQ3VzdG9tTWljcm9zZXJ2aWNlKHRoaXMuYXBwbGljYXRpb24pO1xuICAgICAgdGhpcy5hcmNoaXZlcyA9IGlzQ3VzdG9tTWljcm9zZXJ2aWNlXG4gICAgICAgID8gW11cbiAgICAgICAgOiBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UubGlzdEFyY2hpdmVzKHRoaXMuYXBwbGljYXRpb24uaWQpO1xuICAgICAgdGhpcy5hcmNoaXZlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIHJldHVybiAobmV3IERhdGUoYi5jcmVhdGVkKSBhcyBhbnkpIC0gKG5ldyBEYXRlKGEuY3JlYXRlZCkgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBsb2FkUHJvZ3Jlc3MubmV4dCgwKTtcbiAgICAgIGlmICh0aGlzLmFyY2hpdmVzLmxlbmd0aCA9PT0gNiAmJiAhaXNDdXN0b21NaWNyb3NlcnZpY2UpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnJlbW92ZU9sZGVzdEFyY2hpdmUodGhpcy5hcHBsaWNhdGlvbiwgdGhpcy5hcmNoaXZlcyk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcHAgPSBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UudXBsb2FkQXJjaGl2ZVRvQXBwKGZpbGUsIHRoaXMuYXBwbGljYXRpb24pO1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbkNoYW5nZS5lbWl0KGFwcCk7XG4gICAgICB0aGlzLnVwbG9hZFByb2dyZXNzLm5leHQoMTAwKTtcbiAgICAgIHRoaXMudXBsb2FkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5yZWZyZXNoLmVtaXQoKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnQXJjaGl2ZSB1cGxvYWRlZCBhbmQgYWN0aXZhdGVkLicpKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==