import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { gettext, ModalService, Status } from '@c8y/ngx-components';
import { ApplicationType, TenantService } from '@c8y/client';
import { EcosystemService } from '../ecosystem.service';
import { ERROR_TYPE } from '../ecosystem.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ecosystem.service';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '../shared/add-application.component';
export class AddMicroserviceComponent {
    constructor(ecosystemService, modal, tenantService) {
        this.ecosystemService = ecosystemService;
        this.modal = modal;
        this.tenantService = tenantService;
        this.headerText = gettext('Add microservice');
        this.successText = gettext('Microservice created');
        this.createMicroserviceApplicationHandler = (f) => this.createMicroserviceApplication(f);
        this.uploadMicroserviceHandler = (f, app) => this.uploadMicroservice(f, app);
    }
    createMicroserviceApplication(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.isValidAppType(file, ApplicationType.MICROSERVICE);
            return this.ecosystemService.createAppForArchive(file);
        });
    }
    uploadMicroservice(file, microservice) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscribeToCurrentTenant = yield this.askIfActivationAfterUploadNeeded();
            yield this.ecosystemService.uploadArchiveToApp(file, microservice);
            yield this.subscribeMicroservice(microservice, subscribeToCurrentTenant);
        });
    }
    askIfActivationAfterUploadNeeded() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Subscribe to microservice'), gettext('You are about to subscribe to the microservice after upload. Do you want to subscribe to it?'), Status.INFO, { ok: gettext('Subscribe'), cancel: gettext("Don't subscribe") });
                return true;
            }
            catch (ex) {
                return false;
            }
        });
    }
    subscribeMicroservice(app, subscribeToCurrentTenant) {
        return __awaiter(this, void 0, void 0, function* () {
            const tenant = (yield this.tenantService.current()).data;
            const applications = tenant.applications.references;
            const isSubscribed = applications.some(({ application }) => application.id === app.id);
            if (!isSubscribed && subscribeToCurrentTenant) {
                try {
                    return yield this.tenantService.subscribeApplication(tenant, app);
                }
                catch (res) {
                    if (res.status === 409) {
                        throw Error(ERROR_TYPE.ALREADY_SUBSCRIBED);
                    }
                }
            }
            else if (isSubscribed && !subscribeToCurrentTenant) {
                return this.tenantService.unsubscribeApplication(tenant, app);
            }
        });
    }
}
AddMicroserviceComponent.ɵfac = function AddMicroserviceComponent_Factory(t) { return new (t || AddMicroserviceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EcosystemService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantService)); };
AddMicroserviceComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddMicroserviceComponent, selectors: [["c8y-add-microservice"]], decls: 1, vars: 5, consts: [[3, "headerText", "headerIcon", "successText", "createApplicationHandler", "uploadApplicationHandler"]], template: function AddMicroserviceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "c8y-add-application", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("headerText", ctx.headerText)("headerIcon", "microchip")("successText", ctx.successText)("createApplicationHandler", ctx.createMicroserviceApplicationHandler)("uploadApplicationHandler", ctx.uploadMicroserviceHandler);
    } }, directives: [ɵngcc4.AddApplicationComponent], encapsulation: 2 });
AddMicroserviceComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: ModalService },
    { type: TenantService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddMicroserviceComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-add-microservice',
                template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'microchip'"
    [successText]="successText"
    [createApplicationHandler]="createMicroserviceApplicationHandler"
    [uploadApplicationHandler]="uploadMicroserviceHandler"
  ></c8y-add-application>`
            }]
    }], function () { return [{ type: ɵngcc1.EcosystemService }, { type: ɵngcc2.ModalService }, { type: ɵngcc3.TenantService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pY3Jvc2VydmljZS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Vjb3N5c3RlbS9taWNyb3NlcnZpY2VzL2FkZC1taWNyb3NlcnZpY2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQWdCLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7OztBQVloRCxNQUFNLE9BQU8sd0JBQXdCO0FBQ3JDLElBR0UsWUFDVSxnQkFBa0MsRUFDbEMsS0FBbUIsRUFDbkIsYUFBNEI7QUFDckMsUUFIUyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDbkMsVUFBSyxHQUFMLEtBQUssQ0FBYztBQUFDLFFBQ3BCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3hDLFFBUEUsZUFBVSxHQUFXLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ25ELFFBQUUsZ0JBQVcsR0FBVyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN4RCxRQU9FLHlDQUFvQyxHQUFHLENBQUMsQ0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUYsUUFBRSw4QkFBeUIsR0FBRyxDQUFDLENBQU8sRUFBRSxHQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzlGLElBSkssQ0FBQztBQUNOLElBSVEsNkJBQTZCLENBQUMs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eyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIE1vZGFsU2VydmljZSwgU3RhdHVzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblR5cGUsIElBcHBsaWNhdGlvbiwgVGVuYW50U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEVjb3N5c3RlbVNlcnZpY2UgfSBmcm9tICcuLi9lY29zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBFUlJPUl9UWVBFIH0gZnJvbSAnLi4vZWNvc3lzdGVtLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFkZC1taWNyb3NlcnZpY2UnLFxuICB0ZW1wbGF0ZTogYDxjOHktYWRkLWFwcGxpY2F0aW9uXG4gICAgW2hlYWRlclRleHRdPVwiaGVhZGVyVGV4dFwiXG4gICAgW2hlYWRlckljb25dPVwiJ21pY3JvY2hpcCdcIlxuICAgIFtzdWNjZXNzVGV4dF09XCJzdWNjZXNzVGV4dFwiXG4gICAgW2NyZWF0ZUFwcGxpY2F0aW9uSGFuZGxlcl09XCJjcmVhdGVNaWNyb3NlcnZpY2VBcHBsaWNhdGlvbkhhbmRsZXJcIlxuICAgIFt1cGxvYWRBcHBsaWNhdGlvbkhhbmRsZXJdPVwidXBsb2FkTWljcm9zZXJ2aWNlSGFuZGxlclwiXG4gID48L2M4eS1hZGQtYXBwbGljYXRpb24+YFxufSlcbmV4cG9ydCBjbGFzcyBBZGRNaWNyb3NlcnZpY2VDb21wb25lbnQge1xuICBoZWFkZXJUZXh0OiBzdHJpbmcgPSBnZXR0ZXh0KCdBZGQgbWljcm9zZXJ2aWNlJyk7XG4gIHN1Y2Nlc3NUZXh0OiBzdHJpbmcgPSBnZXR0ZXh0KCdNaWNyb3NlcnZpY2UgY3JlYXRlZCcpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWNvc3lzdGVtU2VydmljZTogRWNvc3lzdGVtU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsOiBNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0ZW5hbnRTZXJ2aWNlOiBUZW5hbnRTZXJ2aWNlXG4gICkge31cblxuICBjcmVhdGVNaWNyb3NlcnZpY2VBcHBsaWNhdGlvbkhhbmRsZXIgPSAoZjogRmlsZSkgPT4gdGhpcy5jcmVhdGVNaWNyb3NlcnZpY2VBcHBsaWNhdGlvbihmKTtcbiAgdXBsb2FkTWljcm9zZXJ2aWNlSGFuZGxlciA9IChmOiBGaWxlLCBhcHA6IElBcHBsaWNhdGlvbikgPT4gdGhpcy51cGxvYWRNaWNyb3NlcnZpY2UoZiwgYXBwKTtcblxuICBhc3luYyBjcmVhdGVNaWNyb3NlcnZpY2VBcHBsaWNhdGlvbihmaWxlOiBGaWxlKTogUHJvbWlzZTxJQXBwbGljYXRpb24+IHtcbiAgICBhd2FpdCB0aGlzLmVjb3N5c3RlbVNlcnZpY2UuaXNWYWxpZEFwcFR5cGUoZmlsZSwgQXBwbGljYXRpb25UeXBlLk1JQ1JPU0VSVklDRSk7XG4gICAgcmV0dXJuIHRoaXMuZWNvc3lzdGVtU2VydmljZS5jcmVhdGVBcHBGb3JBcmNoaXZlKGZpbGUpO1xuICB9XG5cbiAgYXN5bmMgdXBsb2FkTWljcm9zZXJ2aWNlKGZpbGU6IEZpbGUsIG1pY3Jvc2VydmljZTogSUFwcGxpY2F0aW9uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc3Vic2NyaWJlVG9DdXJyZW50VGVuYW50ID0gYXdhaXQgdGhpcy5hc2tJZkFjdGl2YXRpb25BZnRlclVwbG9hZE5lZWRlZCgpO1xuICAgIGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS51cGxvYWRBcmNoaXZlVG9BcHAoZmlsZSwgbWljcm9zZXJ2aWNlKTtcbiAgICBhd2FpdCB0aGlzLnN1YnNjcmliZU1pY3Jvc2VydmljZShtaWNyb3NlcnZpY2UsIHN1YnNjcmliZVRvQ3VycmVudFRlbmFudCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFza0lmQWN0aXZhdGlvbkFmdGVyVXBsb2FkTmVlZGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsLmNvbmZpcm0oXG4gICAgICAgIGdldHRleHQoJ1N1YnNjcmliZSB0byBtaWNyb3NlcnZpY2UnKSxcbiAgICAgICAgZ2V0dGV4dChcbiAgICAgICAgICAnWW91IGFyZSBhYm91dCB0byBzdWJzY3JpYmUgdG8gdGhlIG1pY3Jvc2VydmljZSBhZnRlciB1cGxvYWQuIERvIHlvdSB3YW50IHRvIHN1YnNjcmliZSB0byBpdD8nXG4gICAgICAgICksXG4gICAgICAgIFN0YXR1cy5JTkZPLFxuICAgICAgICB7IG9rOiBnZXR0ZXh0KCdTdWJzY3JpYmUnKSwgY2FuY2VsOiBnZXR0ZXh0KFwiRG9uJ3Qgc3Vic2NyaWJlXCIpIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc3Vic2NyaWJlTWljcm9zZXJ2aWNlKFxuICAgIGFwcDogSUFwcGxpY2F0aW9uLFxuICAgIHN1YnNjcmliZVRvQ3VycmVudFRlbmFudDogYm9vbGVhblxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHRlbmFudCA9IChhd2FpdCB0aGlzLnRlbmFudFNlcnZpY2UuY3VycmVudCgpKS5kYXRhO1xuICAgIGNvbnN0IGFwcGxpY2F0aW9ucyA9IHRlbmFudC5hcHBsaWNhdGlvbnMucmVmZXJlbmNlcztcblxuICAgIGNvbnN0IGlzU3Vic2NyaWJlZCA9IGFwcGxpY2F0aW9ucy5zb21lKCh7IGFwcGxpY2F0aW9uIH0pID0+IGFwcGxpY2F0aW9uLmlkID09PSBhcHAuaWQpO1xuICAgIGlmICghaXNTdWJzY3JpYmVkICYmIHN1YnNjcmliZVRvQ3VycmVudFRlbmFudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5zdWJzY3JpYmVBcHBsaWNhdGlvbih0ZW5hbnQsIGFwcCk7XG4gICAgICB9IGNhdGNoIChyZXMpIHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDQwOSkge1xuICAgICAgICAgIHRocm93IEVycm9yKEVSUk9SX1RZUEUuQUxSRUFEWV9TVUJTQ1JJQkVEKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNTdWJzY3JpYmVkICYmICFzdWJzY3JpYmVUb0N1cnJlbnRUZW5hbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlbmFudFNlcnZpY2UudW5zdWJzY3JpYmVBcHBsaWNhdGlvbih0ZW5hbnQsIGFwcCk7XG4gICAgfVxuICB9XG59XG4iXX0=