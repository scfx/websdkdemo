import { __awaiter } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AddressSpaceService } from './address-space.service';
import { OpcuaService } from './opcuaService';
import { AlertService } from '@c8y/ngx-components';
import { DynamicDataSource } from './dynamic-data-source';
import { NestedTreeControl } from '@angular/cdk/tree';
import { clone } from 'lodash';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class OpcuaAddressSpaceTreeComponent {
    constructor(addressSpaceService, opcuaService, alertService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.destroy$ = new Subject();
        this.getChildren = (node) => (node.expanded ? node.children : []);
        this.hasChild = (_, _nodeData) => this.addressSpaceService.childrenAvailable(_nodeData.references);
    }
    set moId(id) {
        this._moId = id || undefined;
    }
    ngOnInit() {
        this.initializeDataSet();
    }
    ngOnChanges(changes) {
        if (changes.moId && changes.moId.previousValue && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    }
    initializeDataSet() {
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .pipe(takeUntil(this.destroy$))
            .subscribe(nodeNavData => this.openNode(nodeNavData));
        this.subscriptionRef = this.focusEmitter.subscribe(node => {
            this.focused = this.isFocusedNode(node) ? undefined : node;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    }
    openNode(nodeNavData) {
        return __awaiter(this, void 0, void 0, function* () {
            const { node, selectedAncestorIds } = nodeNavData;
            let nodeId;
            // We just set the nodeId when the selectedAncestorIds variable an empty array.
            // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
            // from the root node.
            if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                nodeId = node.nodeId;
            }
            // Always recreate the tree when routing to a specific nested node,
            // because previous modifications to the tree-structure could cause errors
            // while traversing with 'old' tree-data
            // -----------------
            // setupTree is able to handle nodeId = undefined
            yield this.setupTree(nodeId);
            if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                return;
            }
            if (nodeNavData && this.dataSource) {
                const clonedAncestors = clone(selectedAncestorIds);
                clonedAncestors.shift();
                const n = yield this.dataSource.toggleNode(this.dataSource.data[0], true);
                this.setChildNodes(n.children, clonedAncestors);
                this.toggleFocusedNode(node);
            }
        });
    }
    setChildNodes(nodes, ids) {
        if (nodes) {
            ids.forEach((id) => __awaiter(this, void 0, void 0, function* () {
                const match = nodes.find(n => n.nodeId === id);
                if (match && ids.length > 0) {
                    const idx = ids.findIndex(value => value === id);
                    if (idx >= 0) {
                        ids.splice(idx, 1);
                    }
                    const toggledNode = yield this.dataSource.toggleNode(match, true);
                    this.setChildNodes(toggledNode.children, ids);
                }
            }));
        }
    }
    setupTree(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            if (!this._moId || this._moId.length === 0) {
                this._moId = this.opcuaService.getMoId();
            }
            // addressSpaceService.getNode returns either the root node of the server (moId)
            // or if nodeId !== undefined the node with given nodeId
            const res = yield this.addressSpaceService.getNode(this._moId, nodeId);
            if (res) {
                if (res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.dataSource = undefined;
                }
                else {
                    const rootNode = (yield res.json());
                    this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                    this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                    this.dataSource.data = [rootNode];
                }
                this.loading = false;
            }
            else {
                this.loading = false;
            }
        });
    }
    getMoId() {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    toggleFocusedNode(node) {
        const relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    }
    isFocusedNode(node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    }
    getRelativePath(node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    }
}
OpcuaAddressSpaceTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'opcua-address-space-tree',
                template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node\n      *cdkTreeNodeDef=\"let node\"\n      (click)=\"toggleFocusedNode(node)\"\n      [ngClass]=\"{ strong: isFocusedNode(node) }\"\n      class=\"interact\"\n    >\n      <span>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n        ></i>\n        {{ node.displayName }}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button\n          cdkTreeNodeToggle\n          class=\"btn-clean text-primary m-r-4\"\n          [disabled]=\"node.currentlyLoadingChildren\"\n        >\n          <i\n            [ngClass]=\"{ 'dlt-c8y-icon-plus-square': !node.expanded, 'dlt-c8y-icon-minus-square': node.expanded }\"\n          ></i>\n        </button>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n        ></i>\n        <span\n          (click)=\"toggleFocusedNode(node)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n          class=\"interact\"\n        >\n          {{ node.displayName }}\n        </span>\n        <span\n          class=\"m-l-4\"\n          [style.visibility]=\"node.currentlyLoadingChildren ? 'visible' : 'hidden'\"\n        >\n          <i class=\"dlt-c8y-icon-circle-o-notch icon-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div class=\"p-8\" *ngIf=\"loading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>\n"
            },] }
];
OpcuaAddressSpaceTreeComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService },
    { type: AlertService }
];
OpcuaAddressSpaceTreeComponent.propDecorators = {
    moId: [{ type: Input }],
    node: [{ type: Input }],
    focusEmitter: [{ type: Input }],
    selectedNode: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,