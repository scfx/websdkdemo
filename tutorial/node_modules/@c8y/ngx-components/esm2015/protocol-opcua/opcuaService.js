import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { AlertService } from '@c8y/ngx-components';
export class OpcuaService {
    constructor(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    getServers(id) {
        if (id && id.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${id}`, options);
        }
    }
    createServer(data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.microserviceUrl}`, options);
        }
    }
    updateServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.doesGatewayIdExist(server) && this.doesIdExist(server)) {
                this.cleanUpPayload(server);
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify(server)
                };
                const res = yield this.client.fetch(`${this.microserviceUrl}`, options);
                let data;
                try {
                    data = yield res.json();
                }
                catch (e) {
                    // nothing
                }
                if (res.status !== 200) {
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    return data;
                }
            }
        });
    }
    removeServer(data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${this.microserviceUrl}/${data.gatewayId}/${data.id}`, options);
        }
    }
    getKeystore(binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    }
    uploadKeystore(file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    }
    updateKeystore(id, file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id && id.length > 0 && file && file.size > 0) {
                const { res } = yield this.removeKeystore(id);
                if (res && res.status === 204) {
                    return this.uploadKeystore(file);
                }
            }
            return Promise.reject('Invalid file');
        });
    }
    removeKeystore(id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    }
    getMoId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    }
    getId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    }
    getDeviceProtocol(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header,
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${id}`, options);
        });
    }
    updateDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${data.id}`, options);
        });
    }
    createDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}`, options);
        });
    }
    doesGatewayIdExist(data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    }
    doesIdExist(data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    }
    cleanUpPayload(data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    }
}
OpcuaService.decorators = [
    { type: Injectable }
];
OpcuaService.ctorParameters = () => [
    { type: FetchClient },
    { type: InventoryService },
    { type: Router },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,