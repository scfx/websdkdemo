import { __awaiter } from "tslib";
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
export class DynamicDataSource {
    constructor(treeControl, addressSpaceService, serverId) {
        this.treeControl = treeControl;
        this.addressSpaceService = addressSpaceService;
        this.serverId = serverId;
        this.dataChange = new BehaviorSubject([]);
        this.treeControl.isExpanded = (node) => node.expanded;
    }
    get data() {
        return this.dataChange.value;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.treeControl.expansionModel.changed.subscribe((change) => {
            if (change.added || change.removed) {
                this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    /** Handle expand/collapse behaviors */
    handleTreeControl(change) {
        if (change.added) {
            change.added.forEach(node => this.toggleNode(node, true));
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(node => this.toggleNode(node, false));
        }
    }
    /**
     * Toggle the node, remove from display list
     */
    toggleNode(addressSpaceNode, expand) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!addressSpaceNode.children || addressSpaceNode.children.length === 0) {
                addressSpaceNode.currentlyLoadingChildren = true;
                const res = yield this.addressSpaceService.getChildrenOf(addressSpaceNode, this.serverId);
                const children = (yield res.json());
                addressSpaceNode.children = children || [];
                addressSpaceNode.children = addressSpaceNode.children.map((node) => {
                    node.parentNode = addressSpaceNode;
                    return node;
                });
                addressSpaceNode.currentlyLoadingChildren = false;
                this.treeControl.expand(addressSpaceNode);
            }
            addressSpaceNode.expanded = expand && addressSpaceNode.children.length > 0;
            this.refreshNestedTree(this.data);
            return Promise.resolve(addressSpaceNode);
        });
    }
    catch() {
        // do nothing
    }
    refreshNestedTree(treeData) {
        // necessary to rerender tree, otherwise new nodes will not
        // appear, but they are added to the list.
        this.data = [];
        this.dataChange.next(treeData);
        this.triggerResize(); // to resize the modal window when creating a new device protocol
    }
    triggerResize() {
        setTimeout(() => {
            try {
                window.dispatchEvent(new Event('resize'));
            }
            catch (error) {
                // do nothing
            }
        }, 200);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1kYXRhLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb3RvY29sLW9wY3VhL2R5bmFtaWMtZGF0YS1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQWMsS0FBSyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUl4RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsTUFBTSxPQUFPLGlCQUFpQjtJQVc1QixZQUNTLFdBQWdELEVBQy9DLG1CQUF3QyxFQUN4QyxRQUFnQjtRQUZqQixnQkFBVyxHQUFYLFdBQVcsQ0FBcUM7UUFDL0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBYjFCLGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBcUIsRUFBRSxDQUFDLENBQUM7UUFldkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFzQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzFFLENBQUM7SUFkRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUF5QjtRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQVVELE9BQU8sQ0FBQyxnQkFBa0M7UUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FDL0MsQ0FBQyxNQUF5QyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxp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Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgbWVyZ2UsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmVzdGVkVHJlZUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uVmlld2VyLCBTZWxlY3Rpb25DaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgQWRkcmVzc1NwYWNlU2VydmljZSwgQWRkcmVzc1NwYWNlTm9kZSB9IGZyb20gJy4vYWRkcmVzcy1zcGFjZS5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIER5bmFtaWNEYXRhU291cmNlIHtcbiAgZGF0YUNoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QWRkcmVzc1NwYWNlTm9kZVtdPihbXSk7XG5cbiAgZ2V0IGRhdGEoKTogQWRkcmVzc1NwYWNlTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhQ2hhbmdlLnZhbHVlO1xuICB9XG4gIHNldCBkYXRhKHZhbHVlOiBBZGRyZXNzU3BhY2VOb2RlW10pIHtcbiAgICB0aGlzLnRyZWVDb250cm9sLmRhdGFOb2RlcyA9IHZhbHVlO1xuICAgIHRoaXMuZGF0YUNoYW5nZS5uZXh0KHZhbHVlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0cmVlQ29udHJvbDogTmVzdGVkVHJlZUNvbnRyb2w8QWRkcmVzc1NwYWNlTm9kZT4sXG4gICAgcHJpdmF0ZSBhZGRyZXNzU3BhY2VTZXJ2aWNlOiBBZGRyZXNzU3BhY2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgc2VydmVySWQ6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLnRyZWVDb250cm9sLmlzRXhwYW5kZWQgPSAobm9kZTogQWRkcmVzc1NwYWNlTm9kZSkgPT4gbm9kZS5leHBhbmRlZDtcbiAgfVxuXG4gIGNvbm5lY3QoY29sbGVjdGlvblZpZXdlcjogQ29sbGVjdGlvblZpZXdlcik6IE9ic2VydmFibGU8QWRkcmVzc1NwYWNlTm9kZVtdPiB7XG4gICAgdGhpcy50cmVlQ29udHJvbC5leHBhbnNpb25Nb2RlbC5jaGFuZ2VkLnN1YnNjcmliZShcbiAgICAgIChjaGFuZ2U6IFNlbGVjdGlvbkNoYW5nZTxBZGRyZXNzU3BhY2VOb2RlPikgPT4ge1xuICAgICAgICBpZiAoY2hhbmdlLmFkZGVkIHx8IGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVUcmVlQ29udHJvbChjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gbWVyZ2UoY29sbGVjdGlvblZpZXdlci52aWV3Q2hhbmdlLCB0aGlzLmRhdGFDaGFuZ2UpLnBpcGUobWFwKCgpID0+IHRoaXMuZGF0YSkpO1xuICB9XG5cbiAgLyoqIEhhbmRsZSBleHBhbmQvY29sbGFwc2UgYmVoYXZpb3JzICovXG4gIGhhbmRsZVRyZWVDb250cm9sKGNoYW5nZTogU2VsZWN0aW9uQ2hhbmdlPEFkZHJlc3NTcGFjZU5vZGU+KSB7XG4gICAgaWYgKGNoYW5nZS5hZGRlZCkge1xuICAgICAgY2hhbmdlLmFkZGVkLmZvckVhY2gobm9kZSA9PiB0aGlzLnRvZ2dsZU5vZGUobm9kZSwgdHJ1ZSkpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIGNoYW5nZS5yZW1vdmVkXG4gICAgICAgIC5zbGljZSgpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLmZvckVhY2gobm9kZSA9PiB0aGlzLnRvZ2dsZU5vZGUobm9kZSwgZmFsc2UpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBub2RlLCByZW1vdmUgZnJvbSBkaXNwbGF5IGxpc3RcbiAgICovXG4gIGFzeW5jIHRvZ2dsZU5vZGUoYWRkcmVzc1NwYWNlTm9kZTogQWRkcmVzc1NwYWNlTm9kZSwgZXhwYW5kOiBib29sZWFuKSB7XG4gICAgaWYgKCFhZGRyZXNzU3BhY2VOb2RlLmNoaWxkcmVuIHx8IGFkZHJlc3NTcGFjZU5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICBhZGRyZXNzU3BhY2VOb2RlLmN1cnJlbnRseUxvYWRpbmdDaGlsZHJlbiA9IHRydWU7XG5cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYWRkcmVzc1NwYWNlU2VydmljZS5nZXRDaGlsZHJlbk9mKGFkZHJlc3NTcGFjZU5vZGUsIHRoaXMuc2VydmVySWQpO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgQWRkcmVzc1NwYWNlTm9kZVtdO1xuXG4gICAgICBhZGRyZXNzU3BhY2VOb2RlLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG4gICAgICBhZGRyZXNzU3BhY2VOb2RlLmNoaWxkcmVuID0gYWRkcmVzc1NwYWNlTm9kZS5jaGlsZHJlbi5tYXAoKG5vZGU6IEFkZHJlc3NTcGFjZU5vZGUpID0+IHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlID0gYWRkcmVzc1NwYWNlTm9kZTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9KTtcbiAgICAgIGFkZHJlc3NTcGFjZU5vZGUuY3VycmVudGx5TG9hZGluZ0NoaWxkcmVuID0gZmFsc2U7XG5cbiAgICAgIHRoaXMudHJlZUNvbnRyb2wuZXhwYW5kKGFkZHJlc3NTcGFjZU5vZGUpO1xuICAgIH1cblxuICAgIGFkZHJlc3NTcGFjZU5vZGUuZXhwYW5kZWQgPSBleHBhbmQgJiYgYWRkcmVzc1NwYWNlTm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIHRoaXMucmVmcmVzaE5lc3RlZFRyZWUodGhpcy5kYXRhKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYWRkcmVzc1NwYWNlTm9kZSk7XG4gIH1cbiAgY2F0Y2goKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcHJpdmF0ZSByZWZyZXNoTmVzdGVkVHJlZSh0cmVlRGF0YTogQWRkcmVzc1NwYWNlTm9kZVtdKSB7XG4gICAgLy8gbmVjZXNzYXJ5IHRvIHJlcmVuZGVyIHRyZWUsIG90aGVyd2lzZSBuZXcgbm9kZXMgd2lsbCBub3RcbiAgICAvLyBhcHBlYXIsIGJ1dCB0aGV5IGFyZSBhZGRlZCB0byB0aGUgbGlzdC5cbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLmRhdGFDaGFuZ2UubmV4dCh0cmVlRGF0YSk7XG4gICAgdGhpcy50cmlnZ2VyUmVzaXplKCk7IC8vIHRvIHJlc2l6ZSB0aGUgbW9kYWwgd2luZG93IHdoZW4gY3JlYXRpbmcgYSBuZXcgZGV2aWNlIHByb3RvY29sXG4gIH1cblxuICBwcml2YXRlIHRyaWdnZXJSZXNpemUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgIH1cbiAgICB9LCAyMDApO1xuICB9XG59XG4iXX0=