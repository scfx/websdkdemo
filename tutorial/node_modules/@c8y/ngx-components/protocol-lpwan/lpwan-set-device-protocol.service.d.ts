import { IManagedObject, InventoryService, IResultList, FetchClient, IdentityService } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class LpwanSetDeviceProtocolService {
    private inventoryService;
    private client;
    private identityService;
    supportedDevicesCfgs: {
        name: string;
        match: (device: any) => boolean;
        protocolTypes: string[];
        externalIdTypes: string[];
    }[];
    private readonly header;
    constructor(inventoryService: InventoryService, client: FetchClient, identityService: IdentityService);
    refreshCache(device: any): Promise<import("@c8y/client").IFetchResponse>;
    getMicroserviceUrl(device: any): string;
    isSupportedDevice(device: IManagedObject): boolean;
    getCurrentProtocol(device: IManagedObject): Promise<IManagedObject>;
    applyProtocol(device: IManagedObject, selectedProtocol: IManagedObject): Promise<import("@c8y/client").IResult<IManagedObject>>;
    getAvailableProtocols(device: IManagedObject): Promise<IResultList<IManagedObject>>;
    private getProtocolTypesMatchingDevice;
    private getExternalId;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<LpwanSetDeviceProtocolService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<LpwanSetDeviceProtocolService>;
}

//# sourceMappingURL=lpwan-set-device-protocol.service.d.ts.map