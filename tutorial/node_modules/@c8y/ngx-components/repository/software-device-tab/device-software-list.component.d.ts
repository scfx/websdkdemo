import { AfterContentInit, EventEmitter, OnInit } from '@angular/core';
import { IManagedObject, IResultList } from '@c8y/client';
import { Observable } from 'rxjs';
import { DeviceSoftware, DeviceSoftwareChange, SoftwareFilterCriteria } from '../repository.model';
import { AdvancedSoftwareService } from './advanced-software.service';
import * as ɵngcc0 from '@angular/core';
export declare class DeviceSoftwareListComponent implements OnInit, AfterContentInit {
    private advancedSoftwareService;
    set softwareList(softwareList: DeviceSoftware[]);
    device: IManagedObject;
    deviceSoftwareChanges: DeviceSoftwareChange[];
    filterCriteria$: Observable<SoftwareFilterCriteria>;
    update: EventEmitter<DeviceSoftware>;
    remove: EventEmitter<DeviceSoftware>;
    onListEmpty: EventEmitter<boolean>;
    softwareItems$: Observable<IResultList<DeviceSoftware>>;
    showUpdate: boolean;
    showRemove: boolean;
    emptyList: boolean;
    noSearchResults: boolean;
    supportsSoftwareOperations: boolean;
    private readonly operationTypes;
    private legacySoftwareList$;
    constructor(advancedSoftwareService: AdvancedSoftwareService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    isSoftwareGoingToBeChanged(software: DeviceSoftware): boolean;
    private getAdvancedSoftwareList;
    private getLegacySoftwareList;
    private notifyListEmpty;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DeviceSoftwareListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DeviceSoftwareListComponent, "c8y-device-software-list", never, { "filterCriteria$": "filterCriteria$"; "softwareList": "softwareList"; "device": "device"; "deviceSoftwareChanges": "deviceSoftwareChanges"; }, { "update": "update"; "remove": "remove"; "onListEmpty": "onListEmpty"; }, never, [".c8y-empty-state:not(.c8y-no-results-state)", ".c8y-no-results-state"]>;
}

//# sourceMappingURL=device-software-list.component.d.ts.map