import { Router, ActivatedRoute } from '@angular/router';
import { BsModalService } from 'ngx-bootstrap/modal';
import { TranslateService } from '@ngx-translate/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { IResultList, IManagedObject } from '@c8y/client';
import { ModalService, AlertService } from '@c8y/ngx-components';
import { RepositoryService } from '../repository.service';
import * as ɵngcc0 from '@angular/core';
export declare class FirmwareListComponent {
    private repositoryService;
    private modalService;
    private bsModalService;
    private translateService;
    private alertService;
    private router;
    private activatedRoute;
    textFilter$: BehaviorSubject<string>;
    reload$: BehaviorSubject<void>;
    reloading: boolean;
    firmwares$: Observable<IResultList<IManagedObject>>;
    canAddFirmwarePatch$: Observable<boolean>;
    isLegacy: any;
    readonly DEVICE_TYPE_NOT_AVAILABLE: string;
    constructor(repositoryService: RepositoryService, modalService: ModalService, bsModalService: BsModalService, translateService: TranslateService, alertService: AlertService, router: Router, activatedRoute: ActivatedRoute);
    getFirmwares(partialText?: string): Promise<IResultList<IManagedObject>>;
    addFirmware(): void;
    addFirmwarePatch(): void;
    editFirmware(firmware: Partial<IManagedObject>): void;
    deleteFirmware(firmware: IManagedObject): Promise<void>;
    getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string>;
    getDeviceTypeTitle(firmware: IManagedObject): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<FirmwareListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<FirmwareListComponent, "c8y-firmware-list", never, {}, {}, never, never>;
}

//# sourceMappingURL=firmware-list.component.d.ts.map