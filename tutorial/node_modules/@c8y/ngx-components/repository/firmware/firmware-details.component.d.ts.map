{"version":3,"file":"firmware-details.component.d.ts","sources":["firmware-details.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { AlertService, ModalService } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { FirmwareBinary } from '../repository.model';\nimport { RepositoryService } from './../repository.service';\nexport declare class FirmwareDetailsComponent implements OnInit, OnDestroy {\n    private activatedRoute;\n    private inventoryService;\n    private repositoryService;\n    private alertService;\n    private translateService;\n    private modalService;\n    private bsModalService;\n    reload$: Subject<void>;\n    reloading$: BehaviorSubject<boolean>;\n    updateFirmware$: Subject<Partial<IManagedObject>>;\n    firmwareUpdated$: Subject<IManagedObject>;\n    baseVersionsUpdated$: Subject<void>;\n    patchVersionsUpdated$: Subject<void>;\n    firmware$: Observable<IManagedObject>;\n    baseVersions$: Observable<IResultList<IManagedObject>>;\n    isLegacy$: Observable<boolean>;\n    canAddPatchVersions$: Observable<boolean>;\n    expanded: {\n        [id: string]: boolean;\n    };\n    destroy$: Subject<boolean>;\n    constructor(activatedRoute: ActivatedRoute, inventoryService: InventoryService, repositoryService: RepositoryService, alertService: AlertService, translateService: TranslateService, modalService: ModalService, bsModalService: BsModalService);\n    ngOnInit(): void;\n    getPatchVersionsCount$(baseVersion: FirmwareBinary): Observable<number>;\n    getBinaryName$(binaryUrl: any): Observable<string>;\n    getPatchVersions$(baseVersion: any): Observable<IResultList<IManagedObject>>;\n    addBaseVersion(): void;\n    addPatchVersion(): void;\n    deleteBaseVersion(baseVersion: IManagedObject): Promise<void>;\n    deletePatchVersion(patchVersion: IManagedObject): Promise<void>;\n    ngOnDestroy(): void;\n}\n"]}