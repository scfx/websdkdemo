import { ChangeDetectorRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { IManagedObject, IResultList } from '@c8y/client';
import { TypeaheadComponent } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Observable, UnaryFunction } from 'rxjs';
import { RepositoryService } from '../repository.service';
import * as ɵngcc0 from '@angular/core';
export declare class SoftwareTypeComponent implements OnInit {
    private repositoryService;
    changeDetectorRef: ChangeDetectorRef;
    private translateService;
    softwareTypeMO: IManagedObject;
    disabled: boolean;
    style: any;
    required: boolean;
    placeholder: string;
    emitResultsOnly: boolean;
    showBtnInNotFoundMessage: boolean;
    allowFreeEntries: boolean;
    deviceSoftwareTypeModel: TypeaheadComponent;
    notFoundTypeAddNewTemplate: TemplateRef<unknown>;
    notFoundTypeTemplate: TemplateRef<unknown>;
    onSelectSoftware: EventEmitter<IManagedObject>;
    notFoundTemplateToUse: TemplateRef<unknown>;
    filterPipe: UnaryFunction<unknown, unknown>;
    softwaresResult$: Observable<IResultList<IManagedObject>>;
    search$: BehaviorSubject<string>;
    softwaresResult: IResultList<IManagedObject>;
    private queriesUtil;
    private softwareTypes;
    constructor(repositoryService: RepositoryService, changeDetectorRef: ChangeDetectorRef, translateService: TranslateService);
    ngOnInit(): void;
    getSoftwareByTypeResult(searchString: string): Promise<IResultList<IManagedObject>>;
    selectSoftware(software: any): void;
    resetInput(): void;
    private removeDuplicatesBySoftwareType;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SoftwareTypeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SoftwareTypeComponent, "c8y-software-type", never, { "required": "required"; "placeholder": "placeholder"; "emitResultsOnly": "emitResultsOnly"; "showBtnInNotFoundMessage": "showBtnInNotFoundMessage"; "allowFreeEntries": "allowFreeEntries"; "softwareTypeMO": "softwareTypeMO"; "disabled": "disabled"; "style": "style"; }, { "onSelectSoftware": "onSelectSoftware"; }, never, never>;
}

//# sourceMappingURL=software-type.component.d.ts.map