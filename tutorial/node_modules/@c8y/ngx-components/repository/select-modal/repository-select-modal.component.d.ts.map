{"version":3,"file":"repository-select-modal.component.d.ts","sources":["repository-select-modal.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ISelectModalObject, ISelectModalOption, ModalLabels, ModalSelectionMode } from '@c8y/ngx-components';\nimport { IManagedObject } from '@c8y/client';\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType, RepositoryCategory, RepositoryBinary, SelectedRepositoryBinary } from '../repository.model';\n/**\n * RepositorySelectModalComponent displays repository entries options and allows to select them.\n *\n * @example\n * ```\n * import { take } from 'rxjs/operators';\n * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository';\n *\n * const initialState = {\n *   repositoryType: RepositoryType.FIRMWARE,\n *   title: gettext('Install firmware'),\n *   subTitle: gettext('Available firmwares matching the device type'),\n *   icon: 'c8y-firmware',\n *   mode: ModalSelectionMode.SINGLE,\n *   labels: { ok: gettext('Install') },\n *   disableSelected: false\n * };\n *\n * const modal = this.bsModal.show(RepositorySelectModalComponent, {\n *   ignoreBackdropClick: true,\n *   initialState\n * });\n *\n * modal.content.load.next();\n * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {\n *   ...\n * })\n * ```\n */\nexport declare class RepositorySelectModalComponent {\n    private repositoryService;\n    private translateService;\n    /**\n     * Optional\n     * Allows to provide custom data.\n     * @example\n     * ```\n     * import { from } from 'rxjs';\n     *\n     * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };\n     * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];\n     *\n     * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};\n     * ```\n     */\n    repositoryEntriesWithVersions$: Observable<IManagedObject[]>;\n    /**\n     * Repository entry type.\n     */\n    repositoryType: RepositoryType.FIRMWARE | RepositoryType.SOFTWARE;\n    /**\n     * Optional\n     * Allows to use custom badges templates.\n     * @example\n     * ```\n     * import { gettext } from '@c8y/ngx-components';\n     *\n     * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n     * const initialState = { badgeTemplates };\n     * ```\n     */\n    badgeTemplates: {\n        '=1': any;\n        other: any;\n    };\n    /**\n     * Optional\n     * Allows to provide custom modal title.\n     */\n    title: string;\n    /**\n     * Optional\n     * Allows to provide custom modal subtitle.\n     */\n    subTitle: string;\n    /**\n     * Loads the content of the modal.\n     * Must be invoked by the modal's caller.\n     */\n    load: Subject<void>;\n    /**\n     * Optional\n     * Emits a search string currently entered in the filter input.\n     * Use it to filter the items if you use custom repositoryEntriesWithVersions$.\n     */\n    searchTerm: BehaviorSubject<string>;\n    /**\n     * Optional\n     * Allows to provide device type query to restrict search criteria.\n     * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n     * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n     */\n    deviceTypeQuery: any;\n    /**\n     * Optional\n     * Allows to provide query to restrict search criteria.\n     * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n     * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n     */\n    searchQuery: any;\n    /**\n     * Optional\n     * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.\n     */\n    labels: ModalLabels;\n    /**\n     * Optional\n     * Allows to hide the filter input field.\n     * By default, the filter input field is displayed.\n     */\n    showFilter: boolean;\n    /**\n     * Optional\n     * Allows to show a warning that the search criteria should be narrowed down.\n     * By default, this warning is hidden.\n     */\n    areMoreEntries: boolean;\n    /**\n     * Optional\n     * Allows to pass the array of items. Each item from this array will be marked as selected in the modal.\n     */\n    selected: SelectedRepositoryBinary[];\n    /**\n     * Emits the list of selected options.\n     */\n    resultEmitter: EventEmitter<SelectedRepositoryBinary[]>;\n    /**\n     * Optional\n     * Allows to change selection mode.\n     * Supported options:\n     *   * single: only single option can be selected.\n     *   * multiple: multiple options can be selected.\n     */\n    mode: ModalSelectionMode;\n    /**\n     * Optional\n     * Allows to use custom icon in the modal header.\n     */\n    icon: string;\n    /**\n     * Allows to block selection of the other versions from the same repository entry.\n     */\n    disableSelected: boolean;\n    modalEntries: Observable<ISelectModalObject[]>;\n    private PAGE_SIZE;\n    private queriesUtil;\n    constructor(repositoryService: RepositoryService, translateService: TranslateService);\n    ngOnInit(): void;\n    getAndAssignRepositoryBinaries(mos: IManagedObject[]): IManagedObject[];\n    search(searchTerm: string): void;\n    result(selectedItems: SelectedRepositoryBinary[]): void;\n    aggregate(mos: IManagedObject[]): Promise<ISelectModalObject[]>;\n    getSelectModalOptions(versions: RepositoryBinary[], selectedItems: SelectedRepositoryBinary[], repositoryEntry: RepositoryCategory, repositoryType: RepositoryType): ISelectModalOption[];\n    isBinaryRepositorySelected(selectedItems: SelectedRepositoryBinary[], repositoryEntry: RepositoryCategory, repositoryBinary: RepositoryBinary, repositoryType: RepositoryType): boolean;\n    getSelectModalObject(repositoryEntry: RepositoryCategory, options: ISelectModalOption[]): ISelectModalObject;\n}\n"]}