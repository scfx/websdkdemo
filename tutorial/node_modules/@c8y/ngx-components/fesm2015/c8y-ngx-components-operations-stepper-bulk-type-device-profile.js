import { Component, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { gettext, CoreModule, FormsModule } from '@c8y/ngx-components';
import { DeviceProfileService, DeviceProfileModule } from '@c8y/ngx-components/device-profile';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationType, baseUrl, HOOK_LIST_BULK_TYPE } from '@c8y/ngx-components/operations/bulk-operations-service';
import { get, uniqWith, isEqual } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, combineLatest, from } from 'rxjs';
import { switchMap, shareReplay, debounceTime, distinctUntilChanged } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@c8y/ngx-components/device-profile';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@c8y/ngx-components/operations/bulk-operation-stepper';

function ConfirmDeviceProfileSelectionStepComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.selectedDeviceProfile.c8y_Filter.type);
} }
function ConfirmDeviceProfileSelectionStepComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0, " --- ");
} }
function ConfirmDeviceProfileSelectionStepComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Firmware");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-list-group");
    ɵngcc0.ɵɵelementStart(5, "c8y-li");
    ɵngcc0.ɵɵelementStart(6, "c8y-li-icon");
    ɵngcc0.ɵɵelement(7, "i", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "c8y-li-body", 13);
    ɵngcc0.ɵɵelementStart(9, "div", 14);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 14);
    ɵngcc0.ɵɵelementStart(12, "span", 15);
    ɵngcc0.ɵɵtext(13, " Version ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "span");
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.selectedDeviceProfile.c8y_DeviceProfile.firmware.name, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.selectedDeviceProfile.c8y_DeviceProfile.firmware.version, " ");
} }
function ConfirmDeviceProfileSelectionStepComponent_div_19_c8y_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 13);
    ɵngcc0.ɵɵelementStart(4, "div", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 14);
    ɵngcc0.ɵɵelementStart(7, "span", 15);
    ɵngcc0.ɵɵtext(8, " Version ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "span");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r7.name, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r7.version, " ");
} }
function ConfirmDeviceProfileSelectionStepComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Software");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(5, ConfirmDeviceProfileSelectionStepComponent_div_19_c8y_li_5_Template, 11, 2, "c8y-li", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.softwares);
} }
function ConfirmDeviceProfileSelectionStepComponent_div_20_c8y_li_5_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const configuration_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", configuration_r9.type, " ");
} }
function ConfirmDeviceProfileSelectionStepComponent_div_20_c8y_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 13);
    ɵngcc0.ɵɵelementStart(4, "div", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 14);
    ɵngcc0.ɵɵtemplate(7, ConfirmDeviceProfileSelectionStepComponent_div_20_c8y_li_5_span_7_Template, 2, 1, "span", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const configuration_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", configuration_r9.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", configuration_r9.type);
} }
function ConfirmDeviceProfileSelectionStepComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Configuration");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(5, ConfirmDeviceProfileSelectionStepComponent_div_20_c8y_li_5_Template, 8, 2, "c8y-li", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.configurations);
} }
function SelectDeviceProfileStepComponent_i_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 20);
} }
function SelectDeviceProfileStepComponent_i_16_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 21);
    ɵngcc0.ɵɵlistener("click", function SelectDeviceProfileStepComponent_i_16_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.textFilter$.next(""); });
    ɵngcc0.ɵɵelementEnd();
} }
function SelectDeviceProfileStepComponent_c8y_li_26_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 22);
    ɵngcc0.ɵɵlistener("click", function SelectDeviceProfileStepComponent_c8y_li_26_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const deviceType_r6 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); ctx_r7.selectedDeviceType = deviceType_r6; return ctx_r7.deviceType$.next(deviceType_r6.name); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 23);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceType_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("active", ctx_r2.selectedDeviceType === deviceType_r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", deviceType_r6.name)("pattern", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r2.deviceType$));
} }
function SelectDeviceProfileStepComponent_c8y_li_34_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceProfile_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r9.c8y_Filter == null ? null : deviceProfile_r9.c8y_Filter.type, " ");
} }
function SelectDeviceProfileStepComponent_c8y_li_34_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵelementStart(1, "em", 33);
    ɵngcc0.ɵɵtext(2, "Undefined`device type`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectDeviceProfileStepComponent_c8y_li_34_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-radio", 24);
    ɵngcc0.ɵɵlistener("onSelect", function SelectDeviceProfileStepComponent_c8y_li_34_Template_c8y_li_radio_onSelect_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r15); const deviceProfile_r9 = restoredCtx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.selectDeviceProfile(deviceProfile_r9); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
    ɵngcc0.ɵɵelement(3, "i", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-body", 26);
    ɵngcc0.ɵɵelementStart(5, "div", 27);
    ɵngcc0.ɵɵelementStart(6, "div", 28);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 29);
    ɵngcc0.ɵɵelementStart(9, "div", 28);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementStart(11, "span", 30);
    ɵngcc0.ɵɵtext(12, " Device type ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, SelectDeviceProfileStepComponent_c8y_li_34_span_13_Template, 2, 1, "span", 31);
    ɵngcc0.ɵɵtemplate(14, SelectDeviceProfileStepComponent_c8y_li_34_ng_template_14_Template, 3, 0, "ng-template", null, 32, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceProfile_r9 = ctx.$implicit;
    const _r11 = ɵngcc0.ɵɵreference(15);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", deviceProfile_r9.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r9.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate2("title", "", ɵngcc0.ɵɵpipeBind1(10, 6, "Device type"), ": ", ctx_r3.getDeviceTypeTitle(deviceProfile_r9), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", deviceProfile_r9.c8y_Filter == null ? null : deviceProfile_r9.c8y_Filter.type)("ngIfElse", _r11);
} }
function StepperBulkTypeDeviceProfileComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-select-device-profile-step", 2);
    ɵngcc0.ɵɵlistener("deviceProfile", function StepperBulkTypeDeviceProfileComponent_ng_container_1_Template_c8y_select_device_profile_step_deviceProfile_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onDeviceProfileSelected($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function StepperBulkTypeDeviceProfileComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-confirm-device-profile-selection-step", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectedDeviceProfile", ctx_r1.selectedDeviceProfile);
} }
class ConfirmDeviceProfileSelectionStepComponent {
    constructor(translate) {
        this.translate = translate;
        this.DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');
    }
    get softwares() {
        return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'software'], []);
    }
    get configurations() {
        return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'configuration'], []);
    }
    getDeviceTypeTitle(deviceProfile) {
        return get(deviceProfile, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));
    }
}
ConfirmDeviceProfileSelectionStepComponent.ɵfac = function ConfirmDeviceProfileSelectionStepComponent_Factory(t) { return new (t || ConfirmDeviceProfileSelectionStepComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService)); };
ConfirmDeviceProfileSelectionStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmDeviceProfileSelectionStepComponent, selectors: [["c8y-confirm-device-profile-selection-step"]], inputs: { selectedDeviceProfile: "selectedDeviceProfile" }, decls: 21, vars: 12, consts: [[1, "card-block", "p-t-0", "flex-no-shrink", "separator-bottom", "col-xs-12"], [1, "row", "p-b-16"], [1, "col-md-6", "col-md-offset-3", "col-lg-4", "col-lg-offset-4"], [1, "text-center", "text-gray"], [1, "col-xs-12", "flex-grow", "no-gutter"], [1, "card-inner-scroll", "fit-h"], [1, "card-block"], [1, "text-truncate", 3, "title"], ["translate", "", 1, "legend", "form-block"], [4, "ngIf", "ngIfElse"], ["noType", ""], ["class", "row p-b-16", 4, "ngIf"], ["c8yIcon", "c8y-firmware"], [1, "content-flex-500"], [1, "col-5"], ["translate", "", 1, "text-label-small", "m-r-8"], [4, "ngFor", "ngForOf"], ["c8yIcon", "c8y-tools"], ["class", "label label-info", 4, "ngIf"], [1, "label", "label-info"]], template: function ConfirmDeviceProfileSelectionStepComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 1);
        ɵngcc0.ɵɵelementStart(10, "div", 2);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementStart(13, "span", 8);
        ɵngcc0.ɵɵtext(14, "Device type");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, ConfirmDeviceProfileSelectionStepComponent_ng_container_15_Template, 3, 1, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(16, ConfirmDeviceProfileSelectionStepComponent_ng_template_16_Template, 1, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(18, ConfirmDeviceProfileSelectionStepComponent_div_18_Template, 16, 2, "div", 11);
        ɵngcc0.ɵɵtemplate(19, ConfirmDeviceProfileSelectionStepComponent_div_19_Template, 6, 1, "div", 11);
        ɵngcc0.ɵɵtemplate(20, ConfirmDeviceProfileSelectionStepComponent_div_20_Template, 6, 1, "div", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(17);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 8, "Confirm selection"));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate2("title", "", ɵngcc0.ɵɵpipeBind1(12, 10, "Device type"), ": ", ctx.getDeviceTypeTitle(ctx.selectedDeviceProfile), "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selectedDeviceProfile == null ? null : ctx.selectedDeviceProfile.c8y_Filter == null ? null : ctx.selectedDeviceProfile.c8y_Filter.type)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selectedDeviceProfile == null ? null : ctx.selectedDeviceProfile.c8y_DeviceProfile.firmware);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.softwares.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.configurations.length);
    } }, directives: [ɵngcc2.C8yTranslateDirective, ɵngcc3.NgIf, ɵngcc2.ListGroupComponent, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.IconDirective, ɵngcc2.ListItemBodyComponent, ɵngcc3.NgForOf], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
ConfirmDeviceProfileSelectionStepComponent.ctorParameters = () => [
    { type: TranslateService }
];
ConfirmDeviceProfileSelectionStepComponent.propDecorators = {
    selectedDeviceProfile: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmDeviceProfileSelectionStepComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-confirm-device-profile-selection-step',
                template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-gray\">{{ 'Confirm selection' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(selectedDeviceProfile) }}\">\n            <span class=\"legend form-block\" translate>Device type</span>\n            <ng-container *ngIf=\"selectedDeviceProfile?.c8y_Filter?.type; else noType\">\n              <span>{{ selectedDeviceProfile.c8y_Filter.type }}</span>\n            </ng-container>\n            <ng-template #noType>\n              ---\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedDeviceProfile?.c8y_DeviceProfile.firmware\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Firmware</span>\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-firmware\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"softwares.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Software</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let software of softwares\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ software.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"configurations.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Configuration</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let configuration of configurations\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ configuration.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"label label-info\" *ngIf=\"configuration.type\">\n                    {{ configuration.type }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, { selectedDeviceProfile: [{
            type: Input
        }] }); })();

class SelectDeviceProfileStepComponent {
    constructor(deviceProfileService, translate) {
        this.deviceProfileService = deviceProfileService;
        this.translate = translate;
        this.deviceProfile = new EventEmitter();
        this.textFilter$ = new BehaviorSubject('');
        this.deviceType$ = new BehaviorSubject('');
        this.DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');
        this.deviceTypes = [];
        this.selectedDeviceType = { name: '' };
        this.deviceProfile$ = combineLatest(this.textFilter$, this.deviceType$).pipe(switchMap(([name, deviceType]) => this.getDeviceProfiles(name, deviceType)), shareReplay(1));
        this.loadDeviceTypes();
    }
    loadDeviceTypes() {
        this.deviceTypeSubscription = this.deviceType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(searchStr => {
            const query = { 'c8y_Filter.type': `*${searchStr}*` };
            return from(this.deviceProfileService.getDeviceProfiles(query));
        }))
            .subscribe(({ data }) => {
            this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })).filter(val => val.name), isEqual);
        });
    }
    ngOnDestroy() {
        this.deviceTypeSubscription.unsubscribe();
    }
    selectDeviceProfile(deviceProfile) {
        this.deviceProfile.emit(deviceProfile);
    }
    getDeviceTypeTitle(deviceProfile) {
        return get(deviceProfile, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));
    }
    getDeviceProfiles(name, deviceType) {
        const query = deviceType ? { 'c8y_Filter.type': deviceType } : {};
        if (name) {
            query.name = `*${name}*`;
        }
        return this.deviceProfileService.getDeviceProfiles(query);
    }
}
SelectDeviceProfileStepComponent.ɵfac = function SelectDeviceProfileStepComponent_Factory(t) { return new (t || SelectDeviceProfileStepComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DeviceProfileService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService)); };
SelectDeviceProfileStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectDeviceProfileStepComponent, selectors: [["c8y-select-device-profile-step"]], outputs: { deviceProfile: "deviceProfile" }, decls: 36, vars: 34, consts: [[1, "card-block", "p-t-0", "overflow-visible", "flex-no-shrink", "separator-bottom", "col-xs-12"], [1, "row", "p-b-16"], [1, "col-md-8", "col-md-offset-2", "col-lg-6", "col-lg-offset-3"], [1, "text-center", "m-b-16"], [1, "row"], [1, "col-md-6"], [1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "title", "placeholder", "ngModel", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "filter", 4, "ngIf"], ["c8yIcon", "times", "class", "text-muted", 3, "click", 4, "ngIf"], [1, "m-0"], ["name", "deviceType", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "active", "click", 4, "ngFor", "ngForOf"], ["name", "notExisting", 3, "text"], [1, "col-xs-12", "flex-grow", "no-gutter"], [1, "card-inner-scroll", "fit-h"], [1, "card-block", "p-t-0", "p-b-0"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["c8yIcon", "filter"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "active", "click"], [3, "text", "pattern"], [3, "onSelect"], ["c8yIcon", "c8y-device-profile"], [1, "content-flex-60"], [1, "col-5"], [1, "text-truncate", 3, "title"], [1, "col-3"], ["translate", "", 1, "text-label-small", "m-r-8"], [4, "ngIf", "ngIfElse"], ["noType", ""], ["translate", "", 1, "text-muted"]], template: function SelectDeviceProfileStepComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectDeviceProfileStepComponent_Template_input_ngModelChange_9_listener($event) { return ctx.textFilter$.next($event); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "span", 8);
        ɵngcc0.ɵɵtemplate(14, SelectDeviceProfileStepComponent_i_14_Template, 1, 0, "i", 9);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵtemplate(16, SelectDeviceProfileStepComponent_i_16_Template, 1, 0, "i", 10);
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 5);
        ɵngcc0.ɵɵelementStart(19, "c8y-form-group", 11);
        ɵngcc0.ɵɵelementStart(20, "c8y-typeahead", 12);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectDeviceProfileStepComponent_Template_c8y_typeahead_ngModelChange_20_listener($event) { return ctx.selectedDeviceType = $event; })("onSearch", function SelectDeviceProfileStepComponent_Template_c8y_typeahead_onSearch_20_listener($event) { return ctx.deviceType$.next($event); });
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementStart(22, "c8y-li", 13);
        ɵngcc0.ɵɵlistener("click", function SelectDeviceProfileStepComponent_Template_c8y_li_click_22_listener() { ctx.selectedDeviceType = { name: "" }; return ctx.deviceType$.next(""); });
        ɵngcc0.ɵɵelementStart(23, "span");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(26, SelectDeviceProfileStepComponent_c8y_li_26_Template, 3, 5, "c8y-li", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "c8y-messages");
        ɵngcc0.ɵɵelement(28, "c8y-message", 15);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "div", 16);
        ɵngcc0.ɵɵelementStart(31, "div", 17);
        ɵngcc0.ɵɵelementStart(32, "div", 18);
        ɵngcc0.ɵɵelementStart(33, "c8y-list-group");
        ɵngcc0.ɵɵtemplate(34, SelectDeviceProfileStepComponent_c8y_li_34_Template, 16, 8, "c8y-li", 19);
        ɵngcc0.ɵɵpipe(35, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 14, "Select device profile"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 16, "Filter device profiles\u2026"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 18, "Filter device profiles\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ɵngcc0.ɵɵpipeBind1(12, 20, ctx.textFilter$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(15, 22, ctx.textFilter$).length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(17, 24, ctx.textFilter$).length);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(21, 26, "Type to filter device types\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedDeviceType)("allowFreeEntries", false);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 28, "All device types"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.deviceTypes);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(29, 30, "Select one of the existing device types."));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(35, 32, ctx.deviceProfile$))("c8yForLoadMore", "auto");
    } }, directives: [ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc3.NgIf, ɵngcc2.FormGroupComponent, ɵngcc2.TypeaheadComponent, ɵngcc2.ListItemComponent, ɵngcc3.NgForOf, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc2.ListGroupComponent, ɵngcc2.ForOfDirective, ɵngcc2.IconDirective, ɵngcc2.HighlightComponent, ɵngcc2.ListItemRadioComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.ListItemBodyComponent, ɵngcc2.C8yTranslateDirective], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2 });
SelectDeviceProfileStepComponent.ctorParameters = () => [
    { type: DeviceProfileService },
    { type: TranslateService }
];
SelectDeviceProfileStepComponent.propDecorators = {
    deviceProfile: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectDeviceProfileStepComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select-device-profile-step',
                template: "<div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select device profile' | translate }}</h4>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              type=\"search\"\n              class=\"form-control\"\n              title=\"{{ 'Filter device profiles\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter device profiles\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                c8yIcon=\"times\"\n                class=\"text-muted\"\n                *ngIf=\"(textFilter$ | async).length\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <c8y-form-group class=\"m-0\">\n            <c8y-typeahead\n              name=\"deviceType\"\n              [(ngModel)]=\"selectedDeviceType\"\n              placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n              (onSearch)=\"deviceType$.next($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = {name: ''}; deviceType$.next('')\"\n              >\n                <span>{{'All device types' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n                *ngFor=\"let deviceType of deviceTypes\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n                [active]=\"selectedDeviceType === deviceType\"\n              >\n                <c8y-highlight\n                  [text]=\"deviceType.name\"\n                  [pattern]=\"deviceType$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing device types.' | translate\"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group>\n        <c8y-li *c8yFor=\"let deviceProfile of deviceProfile$ | async; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectDeviceProfile(deviceProfile)\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-device-profile\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-5\">\n              <div class=\"text-truncate\" title=\"{{ deviceProfile.name }}\">\n                {{ deviceProfile.name }}\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(deviceProfile) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"deviceProfile.c8y_Filter?.type; else noType\">\n                  {{ deviceProfile.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class=\"text-muted\" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc4.DeviceProfileService }, { type: ɵngcc1.TranslateService }]; }, { deviceProfile: [{
            type: Output
        }] }); })();

class StepperBulkTypeDeviceProfileComponent extends BaseStepperComponent {
    goToConfirmSelection($event) {
        this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');
        $event.stepper.next();
    }
    onDeviceProfileSelected(selectedItem) {
        this.selectedDeviceProfile = selectedItem;
    }
    retrieveOperationPrototype() {
        return {
            name: gettext('Apply device profile'),
            description: get(this.selectedDeviceProfile, 'name'),
            prototype: {
                description: `Apply device profile: ${this.selectedDeviceProfile.name}`,
                profileId: this.selectedDeviceProfile.id,
                profileName: this.selectedDeviceProfile.name,
                c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile
            }
        };
    }
}
StepperBulkTypeDeviceProfileComponent.ɵfac = /*@__PURE__*/ function () { let ɵStepperBulkTypeDeviceProfileComponent_BaseFactory; return function StepperBulkTypeDeviceProfileComponent_Factory(t) { return (ɵStepperBulkTypeDeviceProfileComponent_BaseFactory || (ɵStepperBulkTypeDeviceProfileComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StepperBulkTypeDeviceProfileComponent)))(t || StepperBulkTypeDeviceProfileComponent); }; }();
StepperBulkTypeDeviceProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StepperBulkTypeDeviceProfileComponent, selectors: [["c8y-stepper-bulk-type-device-profile"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[4, "customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"], [4, "customStep"], [1, "d-contents", 3, "deviceProfile"], [1, "d-contents", 3, "selectedDeviceProfile"]], template: function StepperBulkTypeDeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-stepper");
        ɵngcc0.ɵɵtemplate(1, StepperBulkTypeDeviceProfileComponent_ng_container_1_Template, 2, 0, "ng-container", 0);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, StepperBulkTypeDeviceProfileComponent_ng_container_3_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(2, 5, "Select device profile"))("customStepCompleted", !!ctx.selectedDeviceProfile)("customStepButtonsDisabled", !ctx.selectedDeviceProfile)("customStepOnNext", ctx.goToConfirmSelection.bind(ctx));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(4, 7, "Confirm selected device profile"));
    } }, directives: [ɵngcc6.BulkOperationStepper, ɵngcc6.CustomStep, SelectDeviceProfileStepComponent, ConfirmDeviceProfileSelectionStepComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeDeviceProfileComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-bulk-type-device-profile',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select device profile' | translate; \n      completed: !!selectedDeviceProfile;\n      buttonsDisabled: !selectedDeviceProfile; \n      onNext: goToConfirmSelection.bind(this)\"\n  >\n    <c8y-select-device-profile-step\n      (deviceProfile)=\"onDeviceProfileSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-device-profile-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected device profile' | translate\">\n    <c8y-confirm-device-profile-selection-step\n      class=\"d-contents\"\n      [selectedDeviceProfile]=\"selectedDeviceProfile\"\n    ></c8y-confirm-device-profile-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            }]
    }], null, null); })();

const ɵ0 = {
    type: BulkOperationType.DEVICE_PROFILE,
    c8yIcon: 'c8y-device-profile',
    name: gettext('Apply device profile'),
    path: `${baseUrl}device-profile`,
    component: StepperBulkTypeDeviceProfileComponent,
    fragments: ['c8y_DeviceProfile'],
    selected: false
};
/** Module for the 'Apply device profile' operation type stepper */
class StepperBulkTypeDeviceProfileModule {
}
StepperBulkTypeDeviceProfileModule.ɵfac = function StepperBulkTypeDeviceProfileModule_Factory(t) { return new (t || StepperBulkTypeDeviceProfileModule)(); };
StepperBulkTypeDeviceProfileModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StepperBulkTypeDeviceProfileModule });
StepperBulkTypeDeviceProfileModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_LIST_BULK_TYPE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            DeviceProfileModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeDeviceProfileModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    StepperBulkTypeDeviceProfileComponent,
                    SelectDeviceProfileStepComponent,
                    ConfirmDeviceProfileSelectionStepComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    DeviceProfileModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeDeviceProfileComponent],
                exports: [StepperBulkTypeDeviceProfileComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StepperBulkTypeDeviceProfileModule, { declarations: function () { return [StepperBulkTypeDeviceProfileComponent, SelectDeviceProfileStepComponent, ConfirmDeviceProfileSelectionStepComponent]; }, imports: function () { return [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        DeviceProfileModule]; }, exports: function () { return [StepperBulkTypeDeviceProfileComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ConfirmDeviceProfileSelectionStepComponent, SelectDeviceProfileStepComponent, StepperBulkTypeDeviceProfileComponent, StepperBulkTypeDeviceProfileModule, ɵ0 };

//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-device-profile.js.map