import { Injectable, Component, ViewChild, NgModule } from '@angular/core';
import { gettext, AlertService, ViewContext, CoreModule, FormsModule, HOOK_ROUTE } from '@c8y/ngx-components';
import { __awaiter } from 'tslib';
import { InventoryService, FetchClient, IdentityService } from '@c8y/client';
import { get } from 'lodash-es';
import { Router } from '@angular/router';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/router';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/common';

const _c0 = ["lpwanSetDeviceProtocolForm"];
function LpwanAssignDeviceProtocolComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementEnd();
} }
function LpwanAssignDeviceProtocolComponent_div_11_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.device.type, " ");
} }
function LpwanAssignDeviceProtocolComponent_div_11_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.currentProtocol.name, " ");
} }
function LpwanAssignDeviceProtocolComponent_div_11_c8y_li_9_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 17);
    ɵngcc0.ɵɵlistener("click", function LpwanAssignDeviceProtocolComponent_div_11_c8y_li_9_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const protocol_r6 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(2); ctx_r7.newProtocol = protocol_r6; return ctx_r7.setPipe(""); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const protocol_r6 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", protocol_r6.name)("pattern", ctx_r5.pattern);
} }
function LpwanAssignDeviceProtocolComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelementStart(2, "label", 11);
    ɵngcc0.ɵɵtext(3, "Current device protocol");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, LpwanAssignDeviceProtocolComponent_div_11_p_4_Template, 2, 1, "p", 12);
    ɵngcc0.ɵɵtemplate(5, LpwanAssignDeviceProtocolComponent_div_11_p_5_Template, 2, 1, "p", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(7, "c8y-typeahead", 13);
    ɵngcc0.ɵɵlistener("ngModelChange", function LpwanAssignDeviceProtocolComponent_div_11_Template_c8y_typeahead_ngModelChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.newProtocol = $event; })("onSearch", function LpwanAssignDeviceProtocolComponent_div_11_Template_c8y_typeahead_onSearch_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.setPipe($event); });
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵtemplate(9, LpwanAssignDeviceProtocolComponent_div_11_c8y_li_9_Template, 2, 2, "c8y-li", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "c8y-messages");
    ɵngcc0.ɵɵelement(11, "c8y-message", 15);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.currentProtocol);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.currentProtocol);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 9, "Select new device protocol"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.newProtocol)("allowFreeEntries", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r2.availableProtocols)("c8yForLoadMore", "hidden")("c8yForPipe", ctx_r2.filterProtocols);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(12, 11, "Select one of the protocols."));
} }
class LpwanSetDeviceProtocolService {
    constructor(inventoryService, client, identityService) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.identityService = identityService;
        this.supportedDevicesCfgs = [
            {
                name: 'lora',
                match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',
                protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial']
            },
            {
                name: 'sigfox',
                match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',
                protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['com.sigfox.deviceId']
            }
        ];
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshCache(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const externalId = yield this.getExternalId(device);
            if (externalId) {
                const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify({})
                };
                return this.client.fetch(url, options);
            }
        });
    }
    getMicroserviceUrl(device) {
        const { serviceProvider } = device.c8y_LpwanDevice;
        let serviceName = serviceProvider.toLowerCase();
        if (serviceProvider === 'Sigfox') {
            serviceName = 'sigfox-agent';
        }
        return `/service/${serviceName}`;
    }
    isSupportedDevice(device) {
        return this.supportedDevicesCfgs.some(({ match }) => match(device));
    }
    getCurrentProtocol(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const lpwanDevice = device.c8y_LpwanDevice;
            let protocolId;
            if (lpwanDevice.typeExternalId) {
                const externalId = (yield this.identityService.detail(lpwanDevice.typeExternalId)).data;
                protocolId = externalId.managedObject.id;
            }
            if (!protocolId && lpwanDevice.type) {
                protocolId = lpwanDevice.type.split('/')[2];
            }
            if (!protocolId) {
                return null;
            }
            return (yield this.inventoryService.detail(protocolId)).data;
        });
    }
    applyProtocol(device, selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            const [protocolExternalId] = (yield this.identityService.list(selectedProtocol.id)).data;
            const { externalId, type } = protocolExternalId;
            device.c8y_LpwanDevice.typeExternalId = { externalId, type };
            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
            device.type = selectedProtocol.name;
            return this.inventoryService.update(device);
        });
    }
    getAvailableProtocols(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                __filter: {
                    type: { __in: this.getProtocolTypesMatchingDevice(device) }
                },
                __orderby: [{ name: 1 }]
            };
            return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });
        });
    }
    getProtocolTypesMatchingDevice(device) {
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        return matchingCfg ? matchingCfg.protocolTypes : [];
    }
    getExternalId(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
            const externalIds = (yield this.identityService.list(device.id)).data;
            const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));
            return externalId ? externalId.externalId : null;
        });
    }
}
LpwanSetDeviceProtocolService.ɵfac = function LpwanSetDeviceProtocolService_Factory(t) { return new (t || LpwanSetDeviceProtocolService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.IdentityService)); };
LpwanSetDeviceProtocolService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LpwanSetDeviceProtocolService, factory: LpwanSetDeviceProtocolService.ɵfac });
LpwanSetDeviceProtocolService.ctorParameters = () => [
    { type: InventoryService },
    { type: FetchClient },
    { type: IdentityService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanSetDeviceProtocolService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.FetchClient }, { type: ɵngcc1.IdentityService }]; }, null); })();

class LpwanAssignDeviceProtocolComponent {
    constructor(lpwanService, alertService, router, inventoryService) {
        this.lpwanService = lpwanService;
        this.alertService = alertService;
        this.router = router;
        this.inventoryService = inventoryService;
        this.filterProtocols = pipe();
        this.pattern = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
            this.setPipe('');
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterProtocols = pipe(map((protocols) => protocols.filter(protocol => (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&
            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1))));
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newProtocol = null;
            try {
                yield this.loadDevice();
                this.availableProtocols = yield this.lpwanService.getAvailableProtocols(this.device);
                this.currentProtocol = yield this.lpwanService.getCurrentProtocol(this.device);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
            const { data } = yield this.inventoryService.detail(deviceId);
            this.device = data;
        });
    }
    apply(selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const moUpdated = (yield this.lpwanService.applyProtocol(this.device, selectedProtocol)).res.status === 200;
                yield this.reload();
                this.alertService.success(gettext('Device protocol set.'));
                this.lpwanSetDeviceProtocolForm.reset('dirty');
                if (moUpdated) {
                    this.refreshCache();
                }
            }
            catch (ex) {
                this.alertService.danger(gettext('Could not set device protocol.'));
            }
        });
    }
    refreshCache() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.lpwanService.refreshCache(this.device);
            }
            catch (ex) {
                // do nothing (refreshing is an optional step)
            }
        });
    }
}
LpwanAssignDeviceProtocolComponent.ɵfac = function LpwanAssignDeviceProtocolComponent_Factory(t) { return new (t || LpwanAssignDeviceProtocolComponent)(ɵngcc0.ɵɵdirectiveInject(LpwanSetDeviceProtocolService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventoryService)); };
LpwanAssignDeviceProtocolComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LpwanAssignDeviceProtocolComponent, selectors: [["set-device-protocol"]], viewQuery: function LpwanAssignDeviceProtocolComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lpwanSetDeviceProtocolForm = _t.first);
    } }, decls: 18, vars: 12, consts: [["lpwanSetDeviceProtocolForm", "ngForm"], [1, "row"], [1, "col-md-6"], [1, "card", "card--fullpage"], [1, "card-header", "separator"], [1, "card-title"], [1, "p-16"], [4, "ngIf"], [1, "card-footer", "separator"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "form-group"], ["translate", ""], ["class", "form-control-static", 4, "ngIf"], ["name", "newProtocol", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForLoadMore", "c8yForPipe"], ["name", "notExisting", 3, "text"], [1, "form-control-static"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"]], template: function LpwanAssignDeviceProtocolComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "h4", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵtemplate(10, LpwanAssignDeviceProtocolComponent_div_10_Template, 2, 0, "div", 7);
        ɵngcc0.ɵɵtemplate(11, LpwanAssignDeviceProtocolComponent_div_11_Template, 13, 13, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 8);
        ɵngcc0.ɵɵelementStart(13, "button", 9);
        ɵngcc0.ɵɵlistener("click", function LpwanAssignDeviceProtocolComponent_Template_button_click_13_listener() { return ctx.apply(ctx.newProtocol); });
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(17, "\n\u200C");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 6, "LPWAN device protocol"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 8, "Save"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.newProtocol);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "Save"), " ");
    } }, directives: [ɵngcc4.ɵNgNoValidate, ɵngcc4.NgControlStatusGroup, ɵngcc4.NgForm, ɵngcc5.NgIf, ɵngcc2.LoadingComponent, ɵngcc2.C8yTranslateDirective, ɵngcc2.FormGroupComponent, ɵngcc2.TypeaheadComponent, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc2.ForOfDirective, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc2.ListItemComponent, ɵngcc2.HighlightComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
LpwanAssignDeviceProtocolComponent.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService },
    { type: AlertService },
    { type: Router },
    { type: InventoryService }
];
LpwanAssignDeviceProtocolComponent.propDecorators = {
    lpwanSetDeviceProtocolForm: [{ type: ViewChild, args: ['lpwanSetDeviceProtocolForm', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanAssignDeviceProtocolComponent, [{
        type: Component,
        args: [{
                selector: 'set-device-protocol',
                template: "<form #lpwanSetDeviceProtocolForm=\"ngForm\">\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\">\n            {{ 'LPWAN device protocol' | translate }}\n          </h4>\n        </div>\n        <div class=\"p-16\">\n          <div *ngIf=\"loading\">\n            <c8y-loading></c8y-loading>\n          </div>\n\n          <div *ngIf=\"!loading\">\n            <div class=\"form-group\">\n              <label translate>Current device protocol</label>\n              <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n                {{ device.type }}\n              </p>\n              <p class=\"form-control-static\" *ngIf=\"currentProtocol\">\n                {{ currentProtocol.name }}\n              </p>\n            </div>\n            <c8y-form-group>\n              <c8y-typeahead\n                [(ngModel)]=\"newProtocol\"\n                placeholder=\"{{ 'Select new device protocol' | translate }}\"\n                (onSearch)=\"setPipe($event)\"\n                name=\"newProtocol\"\n                [allowFreeEntries]=\"false\"\n              >\n                <c8y-li\n                  *c8yFor=\"\n                    let protocol of availableProtocols;\n                    loadMore: 'hidden';\n                    pipe: filterProtocols\n                  \"\n                  class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                  (click)=\"newProtocol = protocol; setPipe('')\"\n                >\n                  <c8y-highlight [text]=\"protocol.name\" [pattern]=\"pattern\"></c8y-highlight>\n                </c8y-li>\n              </c8y-typeahead>\n              <c8y-messages\n                ><c8y-message\n                  name=\"notExisting\"\n                  [text]=\"'Select one of the protocols.' | translate\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            [disabled]=\"!newProtocol\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C"
            }]
    }], function () { return [{ type: LpwanSetDeviceProtocolService }, { type: ɵngcc2.AlertService }, { type: ɵngcc3.Router }, { type: ɵngcc1.InventoryService }]; }, { lpwanSetDeviceProtocolForm: [{
            type: ViewChild,
            args: ['lpwanSetDeviceProtocolForm', { static: false }]
        }] }); })();

class LpwanAgentGuard {
    constructor(lpwanService) {
        this.lpwanService = lpwanService;
    }
    canActivate(route) {
        const device = route.data.contextData || route.parent.data.contextData;
        return this.lpwanService.isSupportedDevice(device);
    }
}
LpwanAgentGuard.ɵfac = function LpwanAgentGuard_Factory(t) { return new (t || LpwanAgentGuard)(ɵngcc0.ɵɵinject(LpwanSetDeviceProtocolService)); };
LpwanAgentGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LpwanAgentGuard, factory: LpwanAgentGuard.ɵfac });
LpwanAgentGuard.ctorParameters = () => [
    { type: LpwanSetDeviceProtocolService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanAgentGuard, [{
        type: Injectable
    }], function () { return [{ type: LpwanSetDeviceProtocolService }]; }, null); })();

const routes = [
    {
        context: ViewContext.Device,
        path: 'assign-protocol',
        component: LpwanAssignDeviceProtocolComponent,
        label: gettext('LPWAN'),
        icon: 'c8y-device-protocols',
        canActivate: [LpwanAgentGuard]
    }
];
const ɵ0 = routes;
class LpwanProtocolModule {
}
LpwanProtocolModule.ɵfac = function LpwanProtocolModule_Factory(t) { return new (t || LpwanProtocolModule)(); };
LpwanProtocolModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LpwanProtocolModule });
LpwanProtocolModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        LpwanAgentGuard,
        LpwanSetDeviceProtocolService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LpwanProtocolModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    LpwanAssignDeviceProtocolComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule
                ],
                entryComponents: [LpwanAssignDeviceProtocolComponent],
                providers: [
                    LpwanAgentGuard,
                    LpwanSetDeviceProtocolService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LpwanProtocolModule, { declarations: function () { return [LpwanAssignDeviceProtocolComponent]; }, imports: function () { return [CoreModule,
        FormsModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LpwanAssignDeviceProtocolComponent, LpwanProtocolModule, ɵ0, LpwanSetDeviceProtocolService as ɵa, LpwanAgentGuard as ɵb };

//# sourceMappingURL=c8y-ngx-components-protocol-lpwan.js.map