import { __awaiter } from 'tslib';
import { Injectable, EventEmitter, Component, Input, NgModule } from '@angular/core';
import { NavigatorNode, gettext, AlertService, ModalSelectionMode, BreadcrumbService, Status, ModalService, ManagedObjectRealtimeService, OperationRealtimeService, ViewContext, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { QueriesUtil, OperationStatus, InventoryService, OperationService } from '@c8y/client';
import { get, sortBy, toArray, assign, concat, uniqWith, isEqual, has, isEmpty, cloneDeep } from 'lodash-es';
import { Subject, BehaviorSubject, pipe } from 'rxjs';
import { switchMap, map, take, distinctUntilChanged, shareReplay, tap, filter } from 'rxjs/operators';
import { RepositoryType, RepositoryService, RepositorySelectModalComponent, RepositoryModule } from '@c8y/ngx-components/repository';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { Location } from '@angular/common';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { TranslateService } from '@ngx-translate/core';
import { SingleOperationDetailsModule } from '@c8y/ngx-components/operations/single-operation-details';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@c8y/ngx-components/repository';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/router';
import * as ɵngcc6 from 'ngx-bootstrap/modal';
import * as ɵngcc7 from '@angular/forms';
import * as ɵngcc8 from 'ngx-bootstrap/popover';
import * as ɵngcc9 from '@ngx-translate/core';
import * as ɵngcc10 from '@c8y/ngx-components/operations/single-operation-details';
import * as ɵngcc11 from 'ngx-bootstrap/dropdown';

function DeviceProfileComponent_div_5_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "h4", 17);
    ɵngcc0.ɵɵtext(3, "Name and device type");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 18);
    ɵngcc0.ɵɵelementStart(5, "div", 19);
    ɵngcc0.ɵɵelementStart(6, "div", 20);
    ɵngcc0.ɵɵelementStart(7, "form", null, 21);
    ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(10, "label", 22);
    ɵngcc0.ɵɵtext(11, " Name ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 23);
    ɵngcc0.ɵɵelementStart(13, "input", 24);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeviceProfileComponent_div_5_div_1_Template_input_ngModelChange_13_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.deviceProfile.name = $event; });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "span");
    ɵngcc0.ɵɵelementStart(16, "div", 25);
    ɵngcc0.ɵɵelementStart(17, "button", 26);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_1_Template_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r11); const _r8 = ɵngcc0.ɵɵreference(8); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); ctx_r12.updateDeviceProfile({ name: ctx_r12.deviceProfile.name }); return _r8.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 20);
    ɵngcc0.ɵɵelementStart(22, "form", null, 27);
    ɵngcc0.ɵɵelementStart(24, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(25, "label", 28);
    ɵngcc0.ɵɵtext(26);
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelementStart(28, "button", 29);
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵelement(30, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "div", 23);
    ɵngcc0.ɵɵelementStart(32, "input", 31);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeviceProfileComponent_div_5_div_1_Template_input_ngModelChange_32_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.deviceProfile.c8y_Filter.type = $event; });
    ɵngcc0.ɵɵpipe(33, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(34, "span");
    ɵngcc0.ɵɵelementStart(35, "div", 25);
    ɵngcc0.ɵɵelementStart(36, "button", 26);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_1_Template_button_click_36_listener() { ɵngcc0.ɵɵrestoreView(_r11); const _r9 = ɵngcc0.ɵɵreference(23); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); ctx_r14.updateDeviceProfile({ c8y_Filter: { type: ctx_r14.deviceProfile.c8y_Filter.type } }); return _r9.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵtext(38);
    ɵngcc0.ɵɵpipe(39, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(8);
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(13);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 16, "e.g. My device profile"));
    ɵngcc0.ɵɵpropertyInterpolate("size", (ctx_r1.deviceProfile.name == null ? null : ctx_r1.deviceProfile.name.length) || 1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.deviceProfile.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(18, 18, "Save"));
    ɵngcc0.ɵɵproperty("disabled", _r8.form.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 20, "Save"), " ");
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(27, 22, "Device type"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(29, 24, ctx_r1.DEVICE_TYPE_POPOVER));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(33, 26, "e.g."), " c8y_Linux");
    ɵngcc0.ɵɵpropertyInterpolate("size", (ctx_r1.deviceProfile.c8y_Filter.type == null ? null : ctx_r1.deviceProfile.c8y_Filter.type.length) || 1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.deviceProfile.c8y_Filter.type)("disabled", ctx_r1.isDeviceProfileEmpty);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(37, 28, "Save"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isDeviceProfileEmpty);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(39, 30, "Save"), " ");
} }
function DeviceProfileComponent_div_5_c8y_list_group_9_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-list-group");
    ɵngcc0.ɵɵelementStart(1, "c8y-li");
    ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
    ɵngcc0.ɵɵelement(3, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-body", 32);
    ɵngcc0.ɵɵelementStart(5, "div", 33);
    ɵngcc0.ɵɵelementStart(6, "span", 34);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 35);
    ɵngcc0.ɵɵelementStart(9, "span", 34);
    ɵngcc0.ɵɵelementStart(10, "span", 36);
    ɵngcc0.ɵɵtext(11, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "button", 37);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_list_group_9_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.removeFirmware(); });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelement(15, "i", 38);
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "div", 39);
    ɵngcc0.ɵɵelementStart(19, "button", 40);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_list_group_9_Template_button_click_19_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.removeFirmware(); });
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelement(21, "i", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-firmware");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.version);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.version, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 8, "Remove`firmware`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(17, 10, "Remove`firmware`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 12, "Remove`firmware`"));
} }
function DeviceProfileComponent_div_5_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 42);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_10_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.addFirmware(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Add firmware"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "No firmware defined. Add firmware"), " ");
} }
function DeviceProfileComponent_div_5_c8y_li_19_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 32);
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵelementStart(5, "span", 43);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 35);
    ɵngcc0.ɵɵelementStart(8, "span", 43);
    ɵngcc0.ɵɵelementStart(9, "span", 44);
    ɵngcc0.ɵɵtext(10, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "button", 45);
    ɵngcc0.ɵɵlistener("(click", function DeviceProfileComponent_div_5_c8y_li_19_Template_button__click_12_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const software_r20 = restoredCtx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.removeItem(software_r20, "software"); });
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelement(14, "i", 38);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 39);
    ɵngcc0.ɵɵelementStart(18, "button", 46);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_19_Template_button_click_18_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const software_r20 = restoredCtx.$implicit; const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.removeItem(software_r20, "software"); });
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelement(20, "i", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r20 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-tools");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", software_r20.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r20.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", software_r20.version);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r20.version, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 8, "Remove`software`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "Remove`software`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 12, "Remove`software`"));
} }
function DeviceProfileComponent_div_5_span_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No software defined."), " ");
} }
function DeviceProfileComponent_div_5_c8y_li_35_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 48);
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵelementStart(5, "span", 34);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 35);
    ɵngcc0.ɵɵelementStart(8, "span", 49);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "button", 37);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_35_Template_button_click_10_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const configuration_r24 = restoredCtx.$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.removeItem(configuration_r24, "configuration"); });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "i", 38);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 39);
    ɵngcc0.ɵɵelementStart(16, "button", 46);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_35_Template_button_click_16_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const configuration_r24 = restoredCtx.$implicit; const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.removeItem(configuration_r24, "configuration"); });
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelement(18, "i", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const configuration_r24 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "gears");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", configuration_r24.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", configuration_r24.name, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(configuration_r24.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 7, "Remove`configuration`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 9, "Remove`configuration`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 11, "Remove`configuration`"));
} }
function DeviceProfileComponent_div_5_span_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No configuration defined."), " ");
} }
function DeviceProfileComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, DeviceProfileComponent_div_5_div_1_Template, 40, 32, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵelement(5, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "h4", 7);
    ɵngcc0.ɵɵtext(7, " Firmware ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 8);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileComponent_div_5_c8y_list_group_9_Template, 22, 14, "c8y-list-group", 1);
    ɵngcc0.ɵɵtemplate(10, DeviceProfileComponent_div_5_div_10_Template, 6, 6, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 3);
    ɵngcc0.ɵɵelementStart(12, "div", 4);
    ɵngcc0.ɵɵelementStart(13, "div", 5);
    ɵngcc0.ɵɵelement(14, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "h4", 7);
    ɵngcc0.ɵɵtext(16, " Software ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 8);
    ɵngcc0.ɵɵelementStart(18, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(19, DeviceProfileComponent_div_5_c8y_li_19_Template, 21, 14, "c8y-li", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "div", 11);
    ɵngcc0.ɵɵelementStart(21, "button", 12);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_Template_button_click_21_listener() { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.addSoftware(); });
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelement(23, "i", 13);
    ɵngcc0.ɵɵtemplate(24, DeviceProfileComponent_div_5_span_24_Template, 3, 3, "span", 14);
    ɵngcc0.ɵɵtext(25);
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "div", 15);
    ɵngcc0.ɵɵelementStart(28, "div", 4);
    ɵngcc0.ɵɵelementStart(29, "div", 5);
    ɵngcc0.ɵɵelement(30, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "h4", 7);
    ɵngcc0.ɵɵtext(32, " Configuration ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "div", 8);
    ɵngcc0.ɵɵelementStart(34, "c8y-list-group", 16);
    ɵngcc0.ɵɵtemplate(35, DeviceProfileComponent_div_5_c8y_li_35_Template, 19, 13, "c8y-li", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(36, "div", 11);
    ɵngcc0.ɵɵelementStart(37, "button", 12);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_Template_button_click_37_listener() { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.addConfiguration(); });
    ɵngcc0.ɵɵpipe(38, "translate");
    ɵngcc0.ɵɵelement(39, "i", 13);
    ɵngcc0.ɵɵtemplate(40, DeviceProfileComponent_div_5_span_40_Template, 3, 3, "span", 14);
    ɵngcc0.ɵɵtext(41);
    ɵngcc0.ɵɵpipe(42, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.deviceProfile);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-firmware");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.deviceProfile.c8y_DeviceProfile.firmware);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.deviceProfile.c8y_DeviceProfile.firmware);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-tools");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.deviceProfile.c8y_DeviceProfile.software);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 14, "Add software"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.deviceProfile.c8y_DeviceProfile.software == null ? null : ctx_r0.deviceProfile.c8y_DeviceProfile.software.length) === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 16, "Add software"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("c8yIcon", "gears");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.deviceProfile.c8y_DeviceProfile.configuration);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(38, 18, "Add configuration"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.deviceProfile.c8y_DeviceProfile.configuration == null ? null : ctx_r0.deviceProfile.c8y_DeviceProfile.configuration.length) === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 20, "Add configuration"), " ");
} }
function DeviceProfileListComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "h1", 9);
    ɵngcc0.ɵɵelementStart(2, "h3", 10);
    ɵngcc0.ɵɵtext(3, " No device profiles available. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 10);
    ɵngcc0.ɵɵtext(5, " Add a new device profile by clicking below. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "p");
    ɵngcc0.ɵɵelementStart(7, "button", 11);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_div_15_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.createDeviceProfile(); });
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-profile");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(8, 3, "Add device profile"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 5, "Add device profile"), " ");
} }
function DeviceProfileListComponent_c8y_li_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 12);
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 15);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 2, "Device profile"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 4, "Device type"), " ");
} }
function DeviceProfileListComponent_c8y_li_21_span_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceProfile_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type, " ");
} }
function DeviceProfileListComponent_c8y_li_21_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelementStart(1, "em");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "Undefined"), " ");
} }
function DeviceProfileListComponent_c8y_li_21_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 17);
    ɵngcc0.ɵɵelementStart(5, "button", 18);
    ɵngcc0.ɵɵelementStart(6, "span", 19);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 17);
    ɵngcc0.ɵɵelementStart(9, "span", 20);
    ɵngcc0.ɵɵtext(10, " Device type ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, DeviceProfileListComponent_c8y_li_21_span_11_Template, 2, 1, "span", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, DeviceProfileListComponent_c8y_li_21_ng_template_12_Template, 4, 3, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "c8y-li-action", 23);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementStart(16, "c8y-li-action", 24);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_c8y_li_21_Template_c8y_li_action_click_16_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const deviceProfile_r5 = restoredCtx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.duplicateDeviceProfile(deviceProfile_r5); });
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "c8y-li-action", 25);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_c8y_li_21_Template_c8y_li_action_click_18_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const deviceProfile_r5 = restoredCtx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.deleteDeviceProfile(deviceProfile_r5); });
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceProfile_r5 = ctx.$implicit;
    const _r7 = ɵngcc0.ɵɵreference(13);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", deviceProfile_r5.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/device-profiles/", deviceProfile_r5.id, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r5.name, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", (deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type) || "-");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type)("ngIfElse", _r7);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/device-profiles/", deviceProfile_r5.id, "");
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(15, 10, "Edit"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(17, 12, "Duplicate"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(19, 14, "Delete"));
} }
const _c0 = function (a0) { return { "icon-spin": a0 }; };
const _c1 = function (a0) { return { "dd-low": a0 }; };
function DeviceTabProfileComponent_c8y_li_20_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 24);
    ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_c8y_li_20_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const profile_r2 = restoredCtx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); ctx_r3.selectProfile(profile_r2); return ctx_r3.setPipe(""); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const profile_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", profile_r2.name || "--")("pattern", ctx_r1.pattern);
} }
function DeviceTabProfileDetailComponent_div_13_small_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.emptyStateDetails), " ");
} }
function DeviceTabProfileDetailComponent_div_13_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 18);
    ɵngcc0.ɵɵtext(1, "No device profile selected");
    ɵngcc0.ɵɵelementEnd();
} }
function DeviceTabProfileDetailComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵelementStart(2, "div", 14);
    ɵngcc0.ɵɵelement(3, "h1", 15);
    ɵngcc0.ɵɵelementStart(4, "p");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "br");
    ɵngcc0.ɵɵtemplate(9, DeviceTabProfileDetailComponent_div_13_small_9_Template, 3, 3, "small", 16);
    ɵngcc0.ɵɵtemplate(10, DeviceTabProfileDetailComponent_div_13_ng_template_10_Template, 2, 0, "ng-template", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(11);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.sectionIcon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 4, ctx_r0.emptyStateText));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isProfileSelected)("ngIfElse", _r6);
} }
function DeviceTabProfileDetailComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 19);
} }
function DeviceTabProfileDetailComponent_c8y_device_profile_item_list_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-device-profile-item-list", 20);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("icon", ctx_r2.sectionIcon)("comparisonResults", ctx_r2.items)("showProfileItems", ctx_r2.isProfileSelected && !ctx_r2.isEmpty)("showTextLabel", ctx_r2.showTextLabel);
} }
function DeviceTabProfileDetailComponent_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 21);
} }
function DeviceTabProfileDetailComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 22);
} }
function DeviceProfileItemListComponent_div_0_div_1_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DeviceProfileItemListComponent_div_0_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelement(2, "i", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 9);
    ɵngcc0.ɵɵtemplate(4, DeviceProfileItemListComponent_div_0_div_1_div_2_ng_container_4_Template, 1, 0, "ng-container", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const comparisonResult_r3 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r8.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", comparisonResult_r3.profile);
} }
function DeviceProfileItemListComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtemplate(2, DeviceProfileItemListComponent_div_0_div_1_div_2_Template, 5, 3, "div", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const comparisonResult_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", comparisonResult_r3.profile);
} }
function DeviceProfileItemListComponent_div_0_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DeviceProfileItemListComponent_div_0_c8y_messages_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-messages", 16);
    ɵngcc0.ɵɵelementStart(1, "c8y-message");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const comparisonResult_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, comparisonResult_r3.comparisonAlert), " ");
} }
function DeviceProfileItemListComponent_div_0_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 17);
} }
const _c2 = function (a0) { return { "has-warning": a0 }; };
function DeviceProfileItemListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtemplate(1, DeviceProfileItemListComponent_div_0_div_1_Template, 3, 1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelementStart(4, "div", 6);
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵelement(6, "i", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 9);
    ɵngcc0.ɵɵtemplate(8, DeviceProfileItemListComponent_div_0_ng_container_8_Template, 1, 0, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileItemListComponent_div_0_c8y_messages_9_Template, 4, 3, "c8y-messages", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, DeviceProfileItemListComponent_div_0_div_10_Template, 1, 0, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const comparisonResult_r3 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showProfileItems);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c2, !!comparisonResult_r3.comparisonAlert));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", comparisonResult_r3.device ? comparisonResult_r3.device : comparisonResult_r3.profile);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", comparisonResult_r3.comparisonAlert);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.showProfileItems);
} }
function DeviceProfileItemListComponent_ng_template_1_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵelementStart(1, "span", 26);
    ɵngcc0.ɵɵtext(2, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const details_r14 = ɵngcc0.ɵɵnextContext().itemDetails;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", details_r14);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(details_r14);
} }
function DeviceProfileItemListComponent_ng_template_1_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const details_r14 = ɵngcc0.ɵɵnextContext().itemDetails;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(details_r14);
} }
function DeviceProfileItemListComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵelementStart(2, "span", 20);
    ɵngcc0.ɵɵelementStart(3, "span", 21);
    ɵngcc0.ɵɵtext(4, "Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 22);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 23);
    ɵngcc0.ɵɵtemplate(8, DeviceProfileItemListComponent_ng_template_1_span_8_Template, 5, 2, "span", 24);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileItemListComponent_ng_template_1_ng_template_9_Template, 2, 1, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r13 = ctx.itemName;
    const details_r14 = ctx.itemDetails;
    const _r16 = ɵngcc0.ɵɵreference(10);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", name_r13);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", name_r13, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTextLabel && details_r14)("ngIfElse", _r16);
} }
class DeviceProfileNavigationFactory {
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nodeItem) {
                this.nodeItem = new NavigatorNode({
                    label: gettext('Device profiles'),
                    path: '/device-profiles',
                    icon: 'c8y-device-profile',
                    parent: gettext('Management')
                });
            }
            return this.nodeItem;
        });
    }
}
DeviceProfileNavigationFactory.ɵfac = function DeviceProfileNavigationFactory_Factory(t) { return new (t || DeviceProfileNavigationFactory)(); };
DeviceProfileNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileNavigationFactory, factory: DeviceProfileNavigationFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileNavigationFactory, [{
        type: Injectable
    }], null, null); })();

class DeviceProfileService {
    constructor(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.NOT_INSTALLED_WARNING = gettext('Not installed on the device');
        this.VERSION_MISSMATCH_WARNING = gettext('Version mismatch');
        this.SAME_URL_WARNING = gettext('Installed configuration has the same URL but different name or type than the one in the profile');
        this.queriesUtil = new QueriesUtil();
    }
    createDeviceProfile(deviceProfile) {
        if (get(deviceProfile, 'c8y_Filter.type') === '') {
            delete deviceProfile.c8y_Filter.type;
        }
        return this.inventoryService.create(deviceProfile);
    }
    getDeviceProfilesByDeviceType(deviceType) {
        const deviceTypeFilter = {
            __or: [
                { 'c8y_Filter.type': deviceType },
                { 'c8y_Filter.type': '' },
                { __not: { __has: 'c8y_Filter.type' } }
            ]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    }
    getDeviceProfiles(andQuery) {
        let query = {
            type: 'c8y_Profile'
        };
        const filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    }
    getProfileOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: 'c8y_DeviceProfile',
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 1
            };
            const operation = (yield this.operationService.list(filter)).data[0];
            return operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;
        });
    }
    createProfileOperation(device, deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationCfg = {
                deviceId: device.id,
                profileId: deviceProfile.id,
                profileName: deviceProfile.name,
                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                description: `Assign device profile ${deviceProfile.name} to device ${device.name}`
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getFirmwareItems(device, selectedProfile) {
        const deviceFirmware = device.c8y_Firmware;
        const profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        const deviceItems = [];
        const profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
    }
    getSoftwareItems(device, selectedProfile) {
        const deviceSoftware = device.c8y_SoftwareList;
        const profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
    }
    getConfigurationItems(device, selectedProfile) {
        const deviceConfiguration = [];
        Object.keys(device).forEach(key => {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        const profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
    }
    getAlert(itemType) {
        const notInstalled = (comparisionResult) => {
            return !comparisionResult.device ? this.NOT_INSTALLED_WARNING : '';
        };
        switch (itemType) {
            case 'firmware':
            case 'software':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails
                        ? this.VERSION_MISSMATCH_WARNING
                        : notInstalled(comparisionResult);
                };
            case 'configuration':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        (comparisionResult.device.itemName !== comparisionResult.profile.itemName ||
                            comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)
                        ? this.SAME_URL_WARNING
                        : notInstalled(comparisionResult);
                };
            default:
                return notInstalled;
        }
    }
    createProfileComparison(deviceItems = [], profileItems = [], mergeByProperty, propertyNameWithDetails, getAlert) {
        const comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
        const extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
        return sortBy(toArray(extendedComparisonObj), 'name');
    }
    createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails) {
        return deviceItems.reduce((comapritionItem, deviceItem) => Object.assign(comapritionItem, {
            [deviceItem[mergeByProperty]]: {
                device: {
                    itemName: deviceItem.name,
                    itemDetails: deviceItem[propertyNameWithDetails],
                    itemUrl: deviceItem.url
                },
                profile: undefined
            }
        }), {});
    }
    extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
        profileItems.forEach(profileItem => {
            const comparisionResult = {
                profile: {
                    itemName: profileItem.name,
                    itemDetails: profileItem[propertyNameWithDetails],
                    itemUrl: profileItem.url
                },
                device: comparisonObj[profileItem[mergeByProperty]]
                    ? comparisonObj[profileItem[mergeByProperty]].device
                    : undefined
            };
            comparisionResult.comparisonAlert = getAlert(comparisionResult);
            comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
        });
        return comparisonObj;
    }
}
DeviceProfileService.ɵfac = function DeviceProfileService_Factory(t) { return new (t || DeviceProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
DeviceProfileService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileService, factory: DeviceProfileService.ɵfac });
DeviceProfileService.ctorParameters = () => [
    { type: InventoryService },
    { type: OperationService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.OperationService }, { type: ɵngcc2.AlertService }]; }, null); })();

class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
}
SelectConfigurationModalComponent.ɵfac = function SelectConfigurationModalComponent_Factory(t) { return new (t || SelectConfigurationModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.RepositoryService)); };
SelectConfigurationModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectConfigurationModalComponent, selectors: [["c8y-select-configuration-modal"]], decls: 2, vars: 8, consts: [[3, "icon", "title", "items", "mode", "disableSelected", "labels", "result", "search"]], template: function SelectConfigurationModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-select-modal", 0);
        ɵngcc0.ɵɵlistener("result", function SelectConfigurationModalComponent_Template_c8y_select_modal_result_0_listener($event) { return ctx.result($event); })("search", function SelectConfigurationModalComponent_Template_c8y_select_modal_search_0_listener($event) { return ctx.search($event); });
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("icon", "gears")("title", ctx.title)("items", ɵngcc0.ɵɵpipeBind1(1, 6, ctx.configurations))("mode", "multi")("disableSelected", true)("labels", ctx.labels);
    } }, directives: [ɵngcc2.SelectModalComponent], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });
SelectConfigurationModalComponent.ctorParameters = () => [
    { type: RepositoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectConfigurationModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select-configuration-modal',
                template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc3.RepositoryService }]; }, null); })();

var DeviceProfileOperation;
(function (DeviceProfileOperation) {
    DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
})(DeviceProfileOperation || (DeviceProfileOperation = {}));

class DeviceProfileComponent {
    constructor(route, alertService, inventoryService, location, breadcrumbService, bsModal, repositoryService) {
        this.route = route;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.breadcrumbService = breadcrumbService;
        this.bsModal = bsModal;
        this.repositoryService = repositoryService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.queriesUtil = new QueriesUtil();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const profileId = this.route.snapshot.paramMap.get('id');
            this.deviceProfile = (yield this.getDeviceProfile(profileId));
            if (this.deviceProfile) {
                this.profileName = this.deviceProfile.name;
                if (!this.deviceProfile.c8y_DeviceProfile.software) {
                    this.deviceProfile.c8y_DeviceProfile.software = [];
                }
                if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                    this.deviceProfile.c8y_DeviceProfile.configuration = [];
                }
            }
        });
    }
    addFirmware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.FIRMWARE),
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.FIRMWARE),
            icon: 'c8y-firmware',
            title: gettext('Select firmware'),
            mode: ModalSelectionMode.SINGLE
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(firmwareList => {
            const [firmware] = firmwareList;
            if (!firmware) {
                return;
            }
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, {
                firmware: {
                    name: firmware.name,
                    version: firmware.version,
                    url: firmware.url,
                    isPatch: firmware.isPatch,
                    patchDependency: firmware.patchDependency
                }
            });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    getRepositoryEntriesWithVersions$(searchTerm$, repoType) {
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repositoryService.listRepositoryEntries(repoType, {
            partialName: searchTerm,
            params: { pageSize: 100 },
            skipLegacy: true
        })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)), shareReplay(1));
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repositoryService.listBaseVersions(mo);
        });
        return mos;
    }
    addConfiguration() {
        const modal = this.bsModal.show(SelectConfigurationModalComponent, {
            ignoreBackdropClick: true
        });
        modal.content.deviceTypeQuery = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION);
        modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedConfigurations => {
            const selectedMapped = selectedConfigurations.map(selectedItem => {
                return assign({
                    url: selectedItem.url,
                    name: selectedItem.name
                }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.configuration || []);
            const configuration = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.type && othVal.type && arrVal.type === othVal.type;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { configuration });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    addSoftware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.SOFTWARE),
            repositoryType: RepositoryType.SOFTWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.SOFTWARE),
            selected: this.deviceProfile.c8y_DeviceProfile.software,
            icon: 'c8y-tools',
            title: gettext('Select software'),
            mode: ModalSelectionMode.MULTI
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedSoftware => {
            const selectedMapped = selectedSoftware.map(selectedItem => {
                return {
                    name: selectedItem.name,
                    version: selectedItem.version,
                    url: selectedItem.url,
                    action: 'install'
                };
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.software || []);
            const software = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.name && othVal.name && arrVal.name === othVal.name;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { software });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    get isDeviceProfileEmpty() {
        const isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
            this.deviceProfile.c8y_DeviceProfile.software.length > 0;
        const isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
        const isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
            this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
        return isSoftware || isFirmware || isConfiguration;
    }
    removeItem(removedItem, category) {
        const deviceProfilePartial = {
            c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
        };
        const filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(item => !isEqual(removedItem, item));
        deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
        this.updateDeviceProfile(deviceProfilePartial);
    }
    removeFirmware() {
        delete this.deviceProfile.c8y_DeviceProfile.firmware;
        this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
    }
    updateDeviceProfile(partialDeviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                delete partialDeviceProfile.c8y_Filter.type;
            }
            Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
            try {
                const { data } = yield this.inventoryService.update(partialDeviceProfile);
                this.deviceProfile = data;
                this.profileName = this.deviceProfile.name;
                this.alertService.success(gettext('Device profile changed.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceProfile(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.inventoryService.detail(profileId);
                return data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceTypeQuery(repositoryType) {
        if (has(this.deviceProfile, 'c8y_Filter.type') &&
            !isEmpty(this.deviceProfile.c8y_Filter.type)) {
            if (repositoryType === RepositoryType.CONFIGURATION) {
                return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: `deviceType` } });
            }
            else {
                return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, { __not: { __has: `c8y_Filter.type` } });
            }
        }
        return {};
    }
}
DeviceProfileComponent.ɵfac = function DeviceProfileComponent_Factory(t) { return new (t || DeviceProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Location), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreadcrumbService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.RepositoryService)); };
DeviceProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileComponent, selectors: [["c8y-device-profile"]], decls: 6, vars: 7, consts: [[3, "icon", "label", "path"], [4, "ngIf"], ["class", "card m-b-4", 4, "ngIf"], [1, "card", "m-b-4"], [1, "card-header", "separator"], [1, "card-icon"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], ["translate", "", 1, "card-title"], [1, "card-block", "p-t-0"], ["class", "p-t-8", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "p-t-8"], [1, "btn-add-block", "m-b-0", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["class", "m-r-8", 4, "ngIf"], [1, "card"], [1, "m-b-8"], ["translate", ""], [1, "card-block"], [1, "row"], [1, "col-md-4"], ["editNameForm", "ngForm"], ["translate", "", 1, "control-label"], [1, "input-group", "input-group-editable"], ["type", "text", "name", "name", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "size", "ngModelChange"], [1, "input-group-btn"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], ["editTypeForm", "ngForm"], [1, "control-label"], ["triggers", "focus", "container", "body", "placement", "right", 1, "btn", "btn-clean", "text-primary", 3, "popover"], [3, "c8yIcon"], ["type", "text", "name", "type", 1, "form-control", 3, "ngModel", "placeholder", "size", "disabled", "ngModelChange"], [1, "content-flex-50", "m-l-4"], [1, "col-6"], [1, "text-truncate", 3, "title"], [1, "col-5", "flex-row"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "btn", "btn-danger", "btn-xs", "visible-xs", "flex-item-right", "m-r-8", "m-t-8", 3, "title", "click"], ["c8yIcon", "minus-circle"], [1, "flex-item-right", "p-r-8", "hidden-xs"], [1, "btn", "btn-dot", "showOnHover", 3, "title", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], [1, "btn-add-block", 3, "title", "click"], [1, "text-truncate-wrap", 3, "title"], ["translate", "", 1, "text-label-small", "m-r-8"], [1, "btn", "btn-danger", "btn-xs", "visible-xs", "flex-item-right", "m-r-8", "m-t-8", 3, "title", "(click"], [1, "btn", "btn-dot", "showOnHover", "text-danger", 3, "title", "click"], [1, "m-r-8"], [1, "content-flex-50"], [1, "label", "label-info"]], template: function DeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "c8y-breadcrumb");
        ɵngcc0.ɵɵelement(3, "c8y-breadcrumb-item", 0);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, DeviceProfileComponent_div_5_Template, 43, 22, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.profileName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "c8y-device-profile")("label", ɵngcc0.ɵɵpipeBind1(4, 5, "Device profiles"))("path", "device-profiles");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.deviceProfile);
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc2.BreadcrumbComponent, ɵngcc2.BreadcrumbItemComponent, ɵngcc4.NgIf, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc2.ListGroupComponent, ɵngcc4.NgForOf, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.RequiredValidator, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc8.PopoverDirective, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.ListItemBodyComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
DeviceProfileComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService },
    { type: InventoryService },
    { type: Location },
    { type: BreadcrumbService },
    { type: BsModalService },
    { type: RepositoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-profile',
                template: "<c8y-title>{{ profileName }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\">\n  <div class=\"card m-b-4\" *ngIf=\"deviceProfile\">\n    <div class=\"card-header separator\">\n      <h4 translate>Name and device type</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <form #editNameForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.name\"\n                  name=\"name\"\n                  placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n                  size=\"{{ deviceProfile.name?.length || 1 }}\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"updateDeviceProfile({ name: deviceProfile.name }); editNameForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"editNameForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n        <div class=\"col-md-4\">\n          <form #editTypeForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn btn-clean text-primary\"\n                  popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n                  triggers=\"focus\"\n                  container=\"body\"\n                  placement=\"right\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                  name=\"type\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  size=\"{{ deviceProfile.c8y_Filter.type?.length || 1 }}\"\n                  [disabled]=\"isDeviceProfileEmpty\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\" updateDeviceProfile({ c8y_Filter: { type: deviceProfile.c8y_Filter.type } }); editTypeForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"isDeviceProfileEmpty\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Firmware\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-firmware'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n              >\n                {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n              >\n                <span class=\"text-label-small m-r-4\" translate>Version</span>\n                {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`firmware`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n        <button\n          title=\"{{ 'Add firmware' | translate }}\"\n          class=\"btn-add-block\"\n          (click)=\"addFirmware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'No firmware defined. Add firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Software\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group>\n        <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-tools'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.version }}\">\n                <span class=\"text-label-small m-r-8\" translate>Version</span>\n                {{ software.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                ((click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`software`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs \">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                (click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add software' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addSoftware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\">\n            {{ 'No software defined.' | translate }}\n          </span>\n          {{ 'Add software' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Configuration\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group class=\"m-b-8\">\n        <c8y-li *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'gears'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ configuration.name }}\"\n               >\n                {{ configuration.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"label label-info\">{{ configuration.type }}</span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`configuration`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add configuration' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addConfiguration()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\">\n            {{ 'No configuration defined.' | translate }}\n          </span>\n          {{ 'Add configuration' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.ActivatedRoute }, { type: ɵngcc2.AlertService }, { type: ɵngcc1.InventoryService }, { type: ɵngcc4.Location }, { type: ɵngcc2.BreadcrumbService }, { type: ɵngcc6.BsModalService }, { type: ɵngcc3.RepositoryService }]; }, null); })();

class AddDeviceProfileComponent {
    constructor(modal, deviceProfileService) {
        this.modal = modal;
        this.deviceProfileService = deviceProfileService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.deviceProfile = {
            name: '',
            type: 'c8y_Profile',
            c8y_Filter: {},
            c8y_DeviceProfile: {}
        };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            const mo = (yield this.deviceProfileService.createDeviceProfile(this.deviceProfile)).data;
            this._save(mo.id);
        });
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
}
AddDeviceProfileComponent.ɵfac = function AddDeviceProfileComponent_Factory(t) { return new (t || AddDeviceProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalRef), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService)); };
AddDeviceProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddDeviceProfileComponent, selectors: [["c8y-add-device-profile"]], decls: 30, vars: 23, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [3, "c8yIcon"], ["translate", ""], [1, "modal-inner-scroll"], [1, "modal-body"], ["createDeviceProfile", "ngForm"], ["translate", "", "for", "name"], ["id", "name", "type", "text", "autocomplete", "off", "name", "name", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["triggers", "focus", 1, "btn", "btn-clean", 3, "popover"], ["id", "deviceType", "name", "deviceType", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], [1, "modal-footer"], ["translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function AddDeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "i", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4, " Add device profile ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "form", null, 6);
        ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(10, "label", 7);
        ɵngcc0.ɵɵtext(11, "Name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "input", 8);
        ɵngcc0.ɵɵlistener("ngModelChange", function AddDeviceProfileComponent_Template_input_ngModelChange_12_listener($event) { return ctx.deviceProfile.name = $event; });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(15, "label");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementStart(18, "button", 9);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelement(20, "i", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function AddDeviceProfileComponent_Template_input_ngModelChange_21_listener($event) { return ctx.deviceProfile.c8y_Filter.type = $event; });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "div", 11);
        ɵngcc0.ɵɵelementStart(24, "button", 12);
        ɵngcc0.ɵɵlistener("click", function AddDeviceProfileComponent_Template_button_click_24_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵtext(26, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "button", 13);
        ɵngcc0.ɵɵlistener("click", function AddDeviceProfileComponent_Template_button_click_27_listener() { return ctx.create(); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵtext(29, " Continue ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-profile");
        ɵngcc0.ɵɵadvance(10);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(13, 11, "e.g. My device profile"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.deviceProfile.name);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(17, 13, "Device type"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(19, 15, ctx.DEVICE_TYPE_POPOVER));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(22, 17, "e.g."), " c8y_Linux");
        ɵngcc0.ɵɵproperty("ngModel", ctx.deviceProfile.c8y_Filter.type);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 19, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(28, 21, "Continue"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.invalid);
    } }, directives: [ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.RequiredValidator, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc8.PopoverDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
AddDeviceProfileComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: DeviceProfileService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddDeviceProfileComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-add-device-profile',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <h4 translate>\n      Add device profile\n    </h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Continue' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      translate\n    >\n      Continue\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc6.BsModalRef }, { type: DeviceProfileService }]; }, null); })();

class DeviceProfileListComponent {
    constructor(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.alertService = alertService;
        this.bsModalService = bsModalService;
        this.router = router;
        this.deviceProfileService = deviceProfileService;
        this.reloading = false;
        this.reload = new BehaviorSubject(null);
        this.deviceProfiles$ = this.reload.pipe(tap(() => (this.reloading = true)), switchMap(() => this.deviceProfileService.getDeviceProfiles()), tap(() => (this.reloading = false)));
    }
    ngOnInit() {
        this.loadDeviceProfiles();
    }
    loadDeviceProfiles() {
        this.reload.next();
    }
    createDeviceProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const modal = this.bsModalService.show(AddDeviceProfileComponent, {
                class: 'modal-sm'
            }).content;
            try {
                const profileId = yield modal.result;
                modal.close();
                this.router.navigateByUrl(`/device-profiles/${profileId}`);
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    duplicateDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const copy = cloneDeep(deviceProfile);
            copy.id = null;
            copy.name = 'Duplicate of ' + deviceProfile.name;
            const mo = (yield this.deviceProfileService.createDeviceProfile(copy)).data;
            this.router.navigateByUrl(`/device-profiles/${mo.id}`);
        });
    }
    deleteDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceProfileName = deviceProfile.name;
            const title = gettext('Delete device profile');
            const confirmationText = this.translateService.instant(gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName });
            const finalQuestion = this.translateService.instant(gettext('Do you want to proceed?'));
            try {
                yield this.modalService.confirm(title, `${confirmationText} ${finalQuestion}`, Status.DANGER, {
                    ok: gettext('Delete')
                });
                yield this.delete(deviceProfile.id);
                this.reload.next();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    delete(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.inventoryService.delete(profileId);
                this.alertService.success(gettext('Device profile deleted.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
}
DeviceProfileListComponent.ɵfac = function DeviceProfileListComponent_Factory(t) { return new (t || DeviceProfileListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Router), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService)); };
DeviceProfileListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileListComponent, selectors: [["c8y-device-profile-list"]], decls: 22, vars: 32, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["c8yIcon", "refresh", 3, "ngClass"], ["class", "c8y-empty-state m-t-40", 4, "ngIf"], [1, "m-b-24", 3, "ngClass"], ["class", "page-sticky-header c8y-list__item--empty-actions hidden-xs", 4, "ngIf"], [4, "c8yFor", "c8yForOf"], [1, "c8y-empty-state", "m-t-40"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], ["translate", ""], [1, "btn", "btn-primary", 3, "title", "click"], [1, "page-sticky-header", "c8y-list__item--empty-actions", "hidden-xs"], [1, "p-l-24"], [1, "content-flex-50"], [1, "col-6"], ["c8yIcon", "c8y-device-profile"], [1, "col-6", 3, "title"], [1, "btn-clean", "max-width-inherit", 3, "routerLink"], [1, "text-truncate"], ["translate", "", 1, "text-label-small", "m-r-4", "visible-xs"], ["class", "text-truncate", 4, "ngIf", "ngIfElse"], ["emptyText", ""], ["icon", "pencil", 3, "routerLink", "label"], ["icon", "copy", 3, "label", "click"], ["icon", "trash", 3, "label", "click"], [1, "text-muted"]], template: function DeviceProfileListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_Template_button_click_4_listener() { return ctx.createDeviceProfile(); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(10, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_Template_button_click_10_listener() { return ctx.loadDeviceProfiles(); });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelement(12, "i", 3);
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, DeviceProfileListComponent_div_15_Template, 11, 7, "div", 4);
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵelementStart(17, "c8y-list-group", 5);
        ɵngcc0.ɵɵpipe(18, "async");
        ɵngcc0.ɵɵtemplate(19, DeviceProfileListComponent_c8y_li_19_Template, 10, 6, "c8y-li", 6);
        ɵngcc0.ɵɵpipe(20, "async");
        ɵngcc0.ɵɵtemplate(21, DeviceProfileListComponent_c8y_li_21_Template, 20, 16, "c8y-li", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_8_0;
        let tmp_9_0;
        let tmp_10_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 12, "Device profiles"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 14, "Add device profile"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 16, "Add device profile"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 18, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(28, _c0, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 20, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_8_0 = ɵngcc0.ɵɵpipeBind1(16, 22, ctx.deviceProfiles$)) == null ? null : tmp_8_0.data.length) === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(30, _c1, ((tmp_9_0 = ɵngcc0.ɵɵpipeBind1(18, 24, ctx.deviceProfiles$)) == null ? null : tmp_9_0.data.length) < 10));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_10_0 = ɵngcc0.ɵɵpipeBind1(20, 26, ctx.deviceProfiles$)) == null ? null : tmp_10_0.data.length) > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.deviceProfiles$);
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc2.ActionBarItemComponent, ɵngcc2.IconDirective, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc2.ListGroupComponent, ɵngcc2.ForOfDirective, ɵngcc2.C8yTranslateDirective, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.ListItemBodyComponent, ɵngcc5.RouterLink, ɵngcc2.ListItemActionComponent], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
DeviceProfileListComponent.ctorParameters = () => [
    { type: InventoryService },
    { type: TranslateService },
    { type: ModalService },
    { type: AlertService },
    { type: BsModalService },
    { type: Router },
    { type: DeviceProfileService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-profile-list',
                template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'icon-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state m-t-40\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n    >\n      {{ 'Add device profile' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li\n    class=\"page-sticky-header c8y-list__item--empty-actions hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{ 'Device profile' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Device type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button\n          class=\"btn-clean max-width-inherit\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n          Device type\n        </span>\n        <span class=\"text-truncate\" *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\">\n          {{ deviceProfile.c8y_Filter?.type }}\n        </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
            }]
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc9.TranslateService }, { type: ɵngcc2.ModalService }, { type: ɵngcc2.AlertService }, { type: ɵngcc6.BsModalService }, { type: ɵngcc5.Router }, { type: DeviceProfileService }]; }, null); })();

class DeviceProfileGuard {
    canActivate(route, state) {
        const contextData = route.data.contextData || route.parent.data.contextData;
        if (!contextData) {
            return false;
        }
        return this.hasSupportedOperation(contextData, DeviceProfileOperation.APPLY_PROFILE);
    }
    hasSupportedOperation(mo, operation) {
        const supported = mo.c8y_SupportedOperations || [];
        if (!supported) {
            return false;
        }
        return !!supported.find(supportedOperation => supportedOperation === operation);
    }
}
DeviceProfileGuard.ɵfac = function DeviceProfileGuard_Factory(t) { return new (t || DeviceProfileGuard)(); };
DeviceProfileGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileGuard, factory: DeviceProfileGuard.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileGuard, [{
        type: Injectable
    }], null, null); })();

class DeviceTabProfileComponent {
    constructor(deviceRealtime, deviceProfileService, route, operationRealtime, alertService) {
        this.deviceRealtime = deviceRealtime;
        this.deviceProfileService = deviceProfileService;
        this.route = route;
        this.operationRealtime = operationRealtime;
        this.alertService = alertService;
        this.firmwareItems = [];
        this.softwareItems = [];
        this.configurationItems = [];
        this.pattern = '';
        this.reloading = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.device = this.route.snapshot.parent.data.contextData;
            this.getDeviceProfilesAndUpdateProfileItems();
            this.subscribeToManagedObjects();
        });
    }
    getDeviceProfilesAndUpdateProfileItems() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloading = true;
            this.deviceProfiles = yield this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type);
            if (this.device.c8y_Profile) {
                const profileId = this.device.c8y_Profile.profileId;
                this.selectedProfile = this.deviceProfiles.data.find(mo => mo.id === profileId);
            }
            this.updateProfileItems(this.device, this.selectedProfile);
            this.operation = yield this.deviceProfileService.getProfileOperation(this.device.id);
            this.subscribeToOperations();
            this.reloading = false;
        });
    }
    selectProfile(mo) {
        this.selectedProfile = mo;
        this.updateProfileItems(this.device, this.selectedProfile);
    }
    createOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            this.operation = yield this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile);
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map((data) => {
            return data.filter((mo) => mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1);
        }));
    }
    ngOnDestroy() {
        this.operationsSubscription.unsubscribe();
        this.moOnUpdateSubscription.unsubscribe();
        this.moOnDeleteSubscription.unsubscribe();
    }
    updateProfileItems(device, profile) {
        this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
        this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
        this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
    }
    subscribeToManagedObjects() {
        this.moOnUpdateSubscription = this.deviceRealtime
            .onUpdate$(this.device.id)
            .subscribe((managedObject) => {
            this.updateProfileItems(managedObject, this.selectedProfile);
        });
        this.moOnDeleteSubscription = this.deviceRealtime.onDelete$(this.device.id).subscribe(() => {
            this.alertService.danger(gettext('This device has just been deleted. You will be redirected to "All devices" page now.'));
            window.location.href = '#/device';
        });
    }
    subscribeToOperations() {
        this.operationsSubscription = this.operationRealtime
            .onAll$(this.device.id)
            .pipe(map(({ data }) => data), filter(operation => operation.c8y_DeviceProfile))
            .subscribe(operation => {
            this.operation = operation;
        });
    }
}
DeviceTabProfileComponent.ɵfac = function DeviceTabProfileComponent_Factory(t) { return new (t || DeviceTabProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ManagedObjectRealtimeService), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
DeviceTabProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceTabProfileComponent, selectors: [["c8y-device-tab-profile"]], features: [ɵngcc0.ɵɵProvidersFeature([ManagedObjectRealtimeService])], decls: 50, vars: 64, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "refresh", 3, "ngClass"], [3, "service"], [1, "card", "card--grid--fullpage", "card--grid--fullpage", "card--grid", "grid__row--2-10--md"], [1, "card--grid", "grid__col--6-6--md"], [1, "bg-white"], [1, "card-header", "separator"], ["translate", "", 1, "card-title"], [1, "p-16"], ["deviceProfileForm", "ngForm"], [1, "input-group"], ["name", "selectProfile", 1, "flex-grow", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForPipe"], [1, "input-group-btn"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "bg-gray-white"], [1, "card-block"], [3, "operation"], [1, "card--grid__inner-scroll", "flex-col", "no-align-items"], [1, "d-contents"], [1, "d-contents", 3, "sectionTitle", "sectionIcon", "emptyStateText", "emptyStateDetails", "isProfileSelected", "items", "isEmpty"], [1, "d-contents", 3, "sectionTitle", "sectionIcon", "emptyStateText", "emptyStateDetails", "isProfileSelected", "items", "isEmpty", "showTextLabel"], [1, "card--grid", "grid__col--6-6--md", "flex-grow"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"]], template: function DeviceTabProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_Template_button_click_1_listener() { return ctx.getDeviceProfilesAndUpdateProfileItems(); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelement(7, "c8y-realtime-btn", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "h4", 8);
        ɵngcc0.ɵɵtext(13, "Device profile");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "form", null, 10);
        ɵngcc0.ɵɵelementStart(17, "div", 11);
        ɵngcc0.ɵɵelementStart(18, "c8y-typeahead", 12);
        ɵngcc0.ɵɵlistener("ngModelChange", function DeviceTabProfileComponent_Template_c8y_typeahead_ngModelChange_18_listener($event) { return ctx.selectedProfile = $event; })("onSearch", function DeviceTabProfileComponent_Template_c8y_typeahead_onSearch_18_listener($event) { return ctx.setPipe($event); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtemplate(20, DeviceTabProfileComponent_c8y_li_20_Template, 2, 2, "c8y-li", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 14);
        ɵngcc0.ɵɵelementStart(22, "button", 15);
        ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_Template_button_click_22_listener() { return ctx.createOperation(); });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵtext(24, " Assign device profile ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 16);
        ɵngcc0.ɵɵelementStart(26, "div", 7);
        ɵngcc0.ɵɵelementStart(27, "h4", 8);
        ɵngcc0.ɵɵtext(28, "Currently installed");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "div", 17);
        ɵngcc0.ɵɵelement(30, "c8y-single-operation", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "div", 19);
        ɵngcc0.ɵɵelementStart(32, "div", 20);
        ɵngcc0.ɵɵelement(33, "c8y-device-tab-profile-detail", 21);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵpipe(35, "translate");
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 20);
        ɵngcc0.ɵɵelement(38, "c8y-device-tab-profile-detail", 21);
        ɵngcc0.ɵɵpipe(39, "translate");
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵpipe(41, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(42, "div", 20);
        ɵngcc0.ɵɵelement(43, "c8y-device-tab-profile-detail", 22);
        ɵngcc0.ɵɵpipe(44, "translate");
        ɵngcc0.ɵɵpipe(45, "translate");
        ɵngcc0.ɵɵpipe(46, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(47, "div", 23);
        ɵngcc0.ɵɵelement(48, "div", 6);
        ɵngcc0.ɵɵelement(49, "div", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 36, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(62, _c0, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 38, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("service", ctx.deviceRealtime);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(19, 40, "Select device profile"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedProfile)("allowFreeEntries", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.deviceProfiles)("c8yForPipe", ctx.filterPipe);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 42, "Assign device profile"));
        ɵngcc0.ɵɵproperty("disabled", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.id));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("operation", ctx.operation);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(34, 44, "Firmware"))("sectionIcon", "c8y-firmware")("emptyStateText", ɵngcc0.ɵɵpipeBind1(35, 46, "No firmware to display."))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(36, 48, "No firmware assigned."))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.firmwareItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.firmware == null ? null : ctx.selectedProfile.c8y_DeviceProfile.firmware.name));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(39, 50, "Software"))("sectionIcon", "c8y-tools")("emptyStateText", ɵngcc0.ɵɵpipeBind1(40, 52, "No software to display."))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(41, 54, "No software assigned."))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.softwareItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software) || (ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software.length) === 0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(44, 56, "Configuration"))("sectionIcon", "gears")("emptyStateText", ɵngcc0.ɵɵpipeBind1(45, 58, "No configuration to display"))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(46, 60, "No configuration assigned"))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.configurationItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration) || (ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration.length) === 0)("showTextLabel", false);
    } }, directives: function () { return [ɵngcc2.ActionBarItemComponent, ɵngcc2.IconDirective, ɵngcc4.NgClass, ɵngcc2.RealtimeButtonComponent, ɵngcc2.C8yTranslateDirective, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.TypeaheadComponent, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc2.ForOfDirective, ɵngcc10.SingleOperationComponent, DeviceTabProfileDetailComponent, ɵngcc2.ListItemComponent, ɵngcc2.HighlightComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
DeviceTabProfileComponent.ctorParameters = () => [
    { type: ManagedObjectRealtimeService },
    { type: DeviceProfileService },
    { type: ActivatedRoute },
    { type: OperationRealtimeService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceTabProfileComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-tab-profile',
                template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"getDeviceProfilesAndUpdateProfileItems()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Device profile</h4>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                [disabled]=\"!selectedProfile?.id\"\n                translate\n              >\n                Assign device profile\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-gray-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Currently installed</h4>\n      </div>\n      <div class=\"card-block\">\n        <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll flex-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-white\"></div>\n      <div class=\"bg-gray-white\"></div>\n    </div>\n  </div>\n</div>\n",
                providers: [ManagedObjectRealtimeService]
            }]
    }], function () { return [{ type: ɵngcc2.ManagedObjectRealtimeService }, { type: DeviceProfileService }, { type: ɵngcc5.ActivatedRoute }, { type: ɵngcc2.OperationRealtimeService }, { type: ɵngcc2.AlertService }]; }, null); })();

class DeviceTabProfileDetailComponent {
    constructor() {
        this.emptyStateText = '';
        this.emptyStateDetails = '';
        this.showTextLabel = true;
    }
}
DeviceTabProfileDetailComponent.ɵfac = function DeviceTabProfileDetailComponent_Factory(t) { return new (t || DeviceTabProfileDetailComponent)(); };
DeviceTabProfileDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceTabProfileDetailComponent, selectors: [["c8y-device-tab-profile-detail"]], inputs: { emptyStateText: "emptyStateText", emptyStateDetails: "emptyStateDetails", showTextLabel: "showTextLabel", sectionTitle: "sectionTitle", sectionIcon: "sectionIcon", isProfileSelected: "isProfileSelected", isEmpty: "isEmpty", items: "items" }, decls: 18, vars: 11, consts: [[1, "card--grid", "grid__col--6-6--md"], [1, "bg-white", "card-block", "sticky-top"], [1, "legend", "form-block"], [1, "bg-gray-white", "card-block", "sticky-top", "hidden-xs", "hidden-sm"], [1, "bg-white", "p-l-16", "p-r-16"], [1, "m-0"], [1, "bg-gray-white", "p-l-16", "p-r-16"], ["class", "d-contents", 4, "ngIf"], ["class", "bg-gray-white", 4, "ngIf"], ["class", "d-contents", 3, "icon", "comparisonResults", "showProfileItems", "showTextLabel", 4, "ngIf"], ["class", "bg-white p-t-24", 4, "ngIf"], ["class", "bg-gray-white p-t-24", 4, "ngIf"], [1, "d-contents"], [1, "p-l-16", "p-r-16"], [1, "c8y-empty-state", "text-left"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [4, "ngIf", "ngIfElse"], ["noItems", ""], ["translate", ""], [1, "bg-gray-white"], [1, "d-contents", 3, "icon", "comparisonResults", "showProfileItems", "showTextLabel"], [1, "bg-white", "p-t-24"], [1, "bg-gray-white", "p-t-24"]], template: function DeviceTabProfileDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h5", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "h5", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelement(10, "hr", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 6);
        ɵngcc0.ɵɵelement(12, "hr", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, DeviceTabProfileDetailComponent_div_13_Template, 12, 6, "div", 7);
        ɵngcc0.ɵɵtemplate(14, DeviceTabProfileDetailComponent_div_14_Template, 1, 0, "div", 8);
        ɵngcc0.ɵɵtemplate(15, DeviceTabProfileDetailComponent_c8y_device_profile_item_list_15_Template, 1, 4, "c8y-device-profile-item-list", 9);
        ɵngcc0.ɵɵtemplate(16, DeviceTabProfileDetailComponent_div_16_Template, 1, 0, "div", 10);
        ɵngcc0.ɵɵtemplate(17, DeviceTabProfileDetailComponent_div_17_Template, 1, 0, "div", 11);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 7, ctx.sectionTitle));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 9, ctx.sectionTitle));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isProfileSelected || ctx.isEmpty);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.items.length === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.items.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isProfileSelected && !ctx.isEmpty);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isProfileSelected && !ctx.isEmpty);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, DeviceProfileItemListComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
DeviceTabProfileDetailComponent.propDecorators = {
    sectionTitle: [{ type: Input }],
    sectionIcon: [{ type: Input }],
    emptyStateText: [{ type: Input }],
    emptyStateDetails: [{ type: Input }],
    isProfileSelected: [{ type: Input }],
    isEmpty: [{ type: Input }],
    items: [{ type: Input }],
    showTextLabel: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceTabProfileDetailComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-tab-profile-detail',
                template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-white card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-gray-white  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-gray-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-gray-white\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-gray-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n"
            }]
    }], function () { return []; }, { emptyStateText: [{
            type: Input
        }], emptyStateDetails: [{
            type: Input
        }], showTextLabel: [{
            type: Input
        }], sectionTitle: [{
            type: Input
        }], sectionIcon: [{
            type: Input
        }], isProfileSelected: [{
            type: Input
        }], isEmpty: [{
            type: Input
        }], items: [{
            type: Input
        }] }); })();

class DeviceProfileItemListComponent {
}
DeviceProfileItemListComponent.ɵfac = function DeviceProfileItemListComponent_Factory(t) { return new (t || DeviceProfileItemListComponent)(); };
DeviceProfileItemListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileItemListComponent, selectors: [["c8y-device-profile-item-list"]], inputs: { icon: "icon", comparisonResults: "comparisonResults", showProfileItems: "showProfileItems", showTextLabel: "showTextLabel" }, decls: 3, vars: 1, consts: [["class", "d-contents", 4, "ngFor", "ngForOf"], ["comparisonResultInfo", ""], [1, "d-contents"], ["class", "p-l-16 p-r-16", 4, "ngIf"], [1, "p-l-16", "p-r-16", "bg-gray-white"], [1, "c8y-list__item", "bg-gray-white", 3, "ngClass"], [1, "c8y-list__item__block"], [1, "c8y-list__item__icon"], [3, "c8yIcon"], [1, "c8y-list__item__body"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "m-0", "style", "margin-bottom: calc(var(--margin-base, 8px) * -1);", 4, "ngIf"], ["class", "p-l-16 p-r-16 bg-white hidden-xs hidden-sm", 4, "ngIf"], [1, "p-l-16", "p-r-16"], [1, "c8y-list__item", "fit-h"], ["class", "c8y-list__item__block", 4, "ngIf"], [1, "m-0", 2, "margin-bottom", "calc(var(--margin-base, 8px) * -1)"], [1, "p-l-16", "p-r-16", "bg-white", "hidden-xs", "hidden-sm"], [1, "content-flex-40"], [1, "col-7"], [1, "text-truncate"], [1, "text-label-small", "m-r-4"], [3, "title"], [1, "col-5"], ["class", "text-truncate", 4, "ngIf", "ngIfElse"], ["showInfoLabel", ""], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "label", "label-info"]], template: function DeviceProfileItemListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DeviceProfileItemListComponent_div_0_Template, 11, 9, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DeviceProfileItemListComponent_ng_template_1_Template, 11, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.comparisonResults);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc4.NgClass, ɵngcc2.IconDirective, ɵngcc4.NgTemplateOutlet, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc2.C8yTranslateDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
DeviceProfileItemListComponent.propDecorators = {
    icon: [{ type: Input }],
    comparisonResults: [{ type: Input }],
    showProfileItems: [{ type: Input }],
    showTextLabel: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileItemListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-profile-item-list',
                template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item fit-h\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-gray-white\">\n    <div\n      class=\"c8y-list__item bg-gray-white\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-white hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n"
            }]
    }], null, { icon: [{
            type: Input
        }], comparisonResults: [{
            type: Input
        }], showProfileItems: [{
            type: Input
        }], showTextLabel: [{
            type: Input
        }] }); })();

const deviceProfilesRoutes = [
    {
        path: 'device-profiles/:id',
        component: DeviceProfileComponent
    },
    {
        path: 'device-profiles',
        component: DeviceProfileListComponent
    }
];
const deviceTabProfileRoutes = [
    {
        context: ViewContext.Device,
        path: 'device-profile',
        component: DeviceTabProfileComponent,
        label: gettext('Device profile'),
        icon: 'c8y-device-profile',
        canActivate: [DeviceProfileGuard]
    }
];
const ɵ0 = deviceTabProfileRoutes;
class DeviceProfileModule {
}
DeviceProfileModule.ɵfac = function DeviceProfileModule_Factory(t) { return new (t || DeviceProfileModule)(); };
DeviceProfileModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceProfileModule });
DeviceProfileModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: DeviceProfileNavigationFactory,
            multi: true
        },
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        DeviceProfileService,
        DeviceProfileGuard
    ], imports: [[
            CoreModule,
            CommonModule,
            RepositoryModule,
            RouterModule.forChild(deviceProfilesRoutes),
            BsDropdownModule.forRoot(),
            TooltipModule,
            ReactiveFormsModule,
            ButtonsModule,
            PopoverModule,
            SingleOperationDetailsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DeviceProfileComponent,
                    DeviceProfileListComponent,
                    AddDeviceProfileComponent,
                    SelectConfigurationModalComponent,
                    DeviceTabProfileComponent,
                    DeviceTabProfileDetailComponent,
                    DeviceProfileItemListComponent
                ],
                exports: [],
                imports: [
                    CoreModule,
                    CommonModule,
                    RepositoryModule,
                    RouterModule.forChild(deviceProfilesRoutes),
                    BsDropdownModule.forRoot(),
                    TooltipModule,
                    ReactiveFormsModule,
                    ButtonsModule,
                    PopoverModule,
                    SingleOperationDetailsModule
                ],
                entryComponents: [
                    AddDeviceProfileComponent,
                    SelectConfigurationModalComponent,
                    DeviceTabProfileComponent
                ],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DeviceProfileNavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    DeviceProfileService,
                    DeviceProfileGuard
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceProfileModule, { declarations: function () { return [DeviceProfileComponent, DeviceProfileListComponent, AddDeviceProfileComponent, SelectConfigurationModalComponent, DeviceTabProfileComponent, DeviceTabProfileDetailComponent, DeviceProfileItemListComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        RepositoryModule, ɵngcc5.RouterModule, ɵngcc11.BsDropdownModule, TooltipModule,
        ReactiveFormsModule,
        ButtonsModule,
        PopoverModule,
        SingleOperationDetailsModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AddDeviceProfileComponent, DeviceProfileComponent, DeviceProfileGuard, DeviceProfileItemListComponent, DeviceProfileListComponent, DeviceProfileModule, DeviceProfileNavigationFactory, DeviceProfileOperation, DeviceProfileService, DeviceTabProfileComponent, DeviceTabProfileDetailComponent, SelectConfigurationModalComponent, ɵ0, DeviceTabProfileComponent as ɵa, DeviceTabProfileDetailComponent as ɵb, DeviceProfileItemListComponent as ɵc };

//# sourceMappingURL=c8y-ngx-components-device-profile.js.map