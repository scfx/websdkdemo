import { __awaiter } from 'tslib';
import { Injectable, Component, ViewContainerRef, ViewChild, TemplateRef, NgModule } from '@angular/core';
import { Router } from '@angular/router';
import { gettext, AlertService, CoreModule, HOOK_ACTION_BAR } from '@c8y/ngx-components';
import { FetchClient, ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@angular/common';

const _c0 = ["templateCopy"];
const _c1 = function (a0) { return { "icon-spin": a0 }; };
function RefreshActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function RefreshActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.refresh(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵtext(4, "\u00A0");
    ɵngcc0.ɵɵelementStart(5, "span", 3);
    ɵngcc0.ɵɵtext(6, "Refresh device resources");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Refresh device resources"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r1.requestInProgress));
} }
class ImpactSubscriptionService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact';
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshDeviceResources(deviceId) {
        const options = {
            method: 'PUT',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}/refresh/${deviceId}`, options);
    }
}
ImpactSubscriptionService.ɵfac = function ImpactSubscriptionService_Factory(t) { return new (t || ImpactSubscriptionService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
ImpactSubscriptionService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactSubscriptionService, factory: ImpactSubscriptionService.ɵfac });
ImpactSubscriptionService.ctorParameters = () => [
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactSubscriptionService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }]; }, null); })();

class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
}
RefreshActionComponent.ɵfac = function RefreshActionComponent_Factory(t) { return new (t || RefreshActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router), ɵngcc0.ɵɵdirectiveInject(ImpactSubscriptionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
RefreshActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RefreshActionComponent, selectors: [["c8y-impact-refresh-action"]], viewQuery: function RefreshActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateCopy = _t.first);
    } }, decls: 2, vars: 0, consts: [["templateCopy", ""], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "refresh", 3, "ngClass"], ["translate", ""]], template: function RefreshActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, RefreshActionComponent_ng_template_0_Template, 7, 6, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc3.IconDirective, ɵngcc4.NgClass, ɵngcc3.C8yTranslateDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
RefreshActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ImpactSubscriptionService },
    { type: AlertService }
];
RefreshActionComponent.propDecorators = {
    templateCopy: [{ type: ViewChild, args: ['templateCopy', { read: TemplateRef, static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RefreshActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-impact-refresh-action',
                template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc2.Router }, { type: ImpactSubscriptionService }, { type: ɵngcc3.AlertService }]; }, { templateCopy: [{
            type: ViewChild,
            args: ['templateCopy', { read: TemplateRef, static: true }]
        }] }); })();

class ImpactActionFactory {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    get(activeRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.applicationService.isAvailable(ImpactActionFactory.applicationName)).data;
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    template: RefreshActionComponent
                });
            }
            return actions;
        });
    }
}
ImpactActionFactory.ɵfac = function ImpactActionFactory_Factory(t) { return new (t || ImpactActionFactory)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
ImpactActionFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactActionFactory, factory: ImpactActionFactory.ɵfac });
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactActionFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

class ImpactProtocolModule {
}
ImpactProtocolModule.ɵfac = function ImpactProtocolModule_Factory(t) { return new (t || ImpactProtocolModule)(); };
ImpactProtocolModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ImpactProtocolModule });
ImpactProtocolModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ImpactSubscriptionService,
        { provide: HOOK_ACTION_BAR, useClass: ImpactActionFactory, multi: true }
    ], imports: [[CoreModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactProtocolModule, [{
        type: NgModule,
        args: [{
                declarations: [RefreshActionComponent],
                imports: [CoreModule],
                providers: [
                    ImpactSubscriptionService,
                    { provide: HOOK_ACTION_BAR, useClass: ImpactActionFactory, multi: true }
                ],
                entryComponents: [RefreshActionComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImpactProtocolModule, { declarations: function () { return [RefreshActionComponent]; }, imports: function () { return [CoreModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ImpactActionFactory, ImpactProtocolModule, ImpactSubscriptionService, RefreshActionComponent };

//# sourceMappingURL=c8y-ngx-components-protocol-impact.js.map