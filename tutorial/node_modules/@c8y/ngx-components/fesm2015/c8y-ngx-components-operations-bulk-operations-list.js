import { Component, Input, Injectable, ComponentFactoryResolver, ViewChild, ViewContainerRef, EventEmitter, Output, ViewChildren, NgModule } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { gettext, AlertService, Status, ModalService, OperationBulkRealtimeService, DatePickerComponent, CoreModule } from '@c8y/ngx-components';
import { StatusFilterComponent, StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';
import { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';
import { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import { __awaiter } from 'tslib';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { assign, cloneDeep, flatten, omit } from 'lodash-es';
import { Subject, BehaviorSubject, combineLatest, pipe } from 'rxjs';
import { tap, switchMap, withLatestFrom, map, shareReplay } from 'rxjs/operators';
import { OperationBulkGeneralStatus } from '@c8y/client';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc2 from 'ngx-bootstrap/modal';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@c8y/ngx-components/operations/operation-summary';
import * as ɵngcc5 from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from 'ngx-bootstrap/popover';
import * as ɵngcc9 from '@c8y/ngx-components/operations/status-filter';
import * as ɵngcc10 from 'ngx-bootstrap/tooltip';
import * as ɵngcc11 from '@angular/router';

const _c0 = ["container"];
const _c1 = ["listItem"];
function BulkOperationListItemComponent_hr_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "hr", 22);
} }
function BulkOperationListItemComponent_ng_template_15_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "c8yNumber");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind3(2, 1, ctx_r10.progressBarStatus, "floor", "1.0-0"), "%");
} }
function BulkOperationListItemComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵpipe(1, "c8yNumber");
    ɵngcc0.ɵɵelementStart(2, "div", 24);
    ɵngcc0.ɵɵtemplate(3, BulkOperationListItemComponent_ng_template_15_span_3_Template, 3, 5, "span", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r3.progressBarClass);
    ɵngcc0.ɵɵpropertyInterpolate1("title", "", ɵngcc0.ɵɵpipeBind3(1, 8, ctx_r3.progressBarStatus, "floor", "1.0-0"), "%");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMap(ctx_r3.progressBarColor);
    ɵngcc0.ɵɵstyleProp("width", ctx_r3.progressBarStatus, "%");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.progressBarStatus !== 0);
} }
const _c2 = function (a0) { return { bulkOperationsCountSuccessful: a0 }; };
function BulkOperationListItemComponent_small_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 25);
    ɵngcc0.ɵɵelement(1, "i", 26);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountSuccessful }} successful ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r4.bulkOperation.progress.successful));
} }
const _c3 = function (a0) { return { bulkOperationsCountFailed: a0 }; };
function BulkOperationListItemComponent_small_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 25);
    ɵngcc0.ɵɵelement(1, "i", 28);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountFailed }} failed ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r5.bulkOperation.progress.failed));
} }
const _c4 = function (a0) { return { bulkOperationsCountPending: a0 }; };
function BulkOperationListItemComponent_small_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 25);
    ɵngcc0.ɵɵelement(1, "i", 29);
    ɵngcc0.ɵɵelementStart(2, "span", 27);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountPending }} pending ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c4, ctx_r6.bulkOperation.progress.pending));
} }
function BulkOperationListItemComponent_div_31_a_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 31);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 32);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r11.finishDatePopoverText));
} }
function BulkOperationListItemComponent_div_31_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "span", 15);
    ɵngcc0.ɵɵtext(2, "Finish");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "small", 16);
    ɵngcc0.ɵɵelement(4, "i", 17);
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "c8yDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, BulkOperationListItemComponent_div_31_a_8_Template, 3, 3, "a", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 2, ctx_r7.finishDate));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.isStatusScheduled() || ctx_r7.isStatusExecutingOrExecutingWithError());
} }
function BulkOperationListItemComponent_ng_container_32_c8y_li_action_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 37);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_32_c8y_li_action_1_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.editSchedule(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Edit schedule"));
} }
function BulkOperationListItemComponent_ng_container_32_c8y_li_action_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 38);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_32_c8y_li_action_2_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.cancelBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Cancel bulk operation"));
} }
function BulkOperationListItemComponent_ng_container_32_c8y_li_action_3_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 39);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_32_c8y_li_action_3_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.retryFailedOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Retry failed operations"));
} }
function BulkOperationListItemComponent_ng_container_32_c8y_li_action_4_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 40);
    ɵngcc0.ɵɵlistener("click", function BulkOperationListItemComponent_ng_container_32_c8y_li_action_4_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.setToSuccessful(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Set operation to SUCCESSFUL"));
} }
function BulkOperationListItemComponent_ng_container_32_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BulkOperationListItemComponent_ng_container_32_c8y_li_action_1_Template, 2, 3, "c8y-li-action", 33);
    ɵngcc0.ɵɵtemplate(2, BulkOperationListItemComponent_ng_container_32_c8y_li_action_2_Template, 2, 3, "c8y-li-action", 34);
    ɵngcc0.ɵɵtemplate(3, BulkOperationListItemComponent_ng_container_32_c8y_li_action_3_Template, 2, 3, "c8y-li-action", 35);
    ɵngcc0.ɵɵtemplate(4, BulkOperationListItemComponent_ng_container_32_c8y_li_action_4_Template, 2, 3, "c8y-li-action", 36);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isStatusScheduled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isStatusScheduled() || ctx_r8.isStatusExecutingOrExecutingWithError() && !ctx_r8.allOperationsCreated());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isStatusFailed());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isStatusFailed());
} }
function BulkOperationListItemComponent_c8y_bulk_operation_details_tabs_34_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-details-tabs", 41);
    ɵngcc0.ɵɵlistener("onRetryFailedOperations", function BulkOperationListItemComponent_c8y_bulk_operation_details_tabs_34_Template_c8y_bulk_operation_details_tabs_onRetryFailedOperations_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.retryFailedOperation(); })("showFailedOperation", function BulkOperationListItemComponent_c8y_bulk_operation_details_tabs_34_Template_c8y_bulk_operation_details_tabs_showFailedOperation_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.openFailedOperation($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("bulkOperation", ctx_r9.bulkOperation)("readOnly", ctx_r9.readOnly);
} }
const _c5 = function (a0) { return { "c8y-list__item--no-expand": a0 }; };
const _c6 = function (a0, a1) { return { "content-flex-58": a0, "content-flex-50": a1 }; };
const _c7 = ["statusFilter"];
function BulkOperationsListComponent_c8y_action_bar_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 1);
    ɵngcc0.ɵɵelementStart(1, "label", 15);
    ɵngcc0.ɵɵtext(2, "Type");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-select", 16);
    ɵngcc0.ɵɵlistener("onChange", function BulkOperationsListComponent_c8y_action_bar_item_3_Template_c8y_select_onChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); ctx_r7.selectedTypeFilters = $event; return ctx_r7.typeFilter$.next(ctx_r7.selectedTypeFilters); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "left");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("items", ctx_r0.bulkTypes)("selected", ctx_r0.selectedTypeFilters)("disableApplyOnNoSelection", true);
} }
function BulkOperationsListComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_button_12_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.addBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 17);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "New bulk operation"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "New bulk operation"), " ");
} }
function BulkOperationsListComponent_div_20_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_div_20_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.addBulkOperation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " New bulk operation ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "New bulk operation"));
} }
function BulkOperationsListComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelement(1, "h1", 19);
    ɵngcc0.ɵɵelementStart(2, "h3", 20);
    ɵngcc0.ɵɵtext(3, "No items to display");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 20);
    ɵngcc0.ɵɵtext(5, "Bulk operations will be displayed here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, BulkOperationsListComponent_div_20_button_6_Template, 3, 3, "button", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.bulkTypes == null ? null : ctx_r3.bulkTypes.length);
} }
function BulkOperationsListComponent_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelement(1, "h1", 23);
    ɵngcc0.ɵɵelementStart(2, "h3", 20);
    ɵngcc0.ɵɵtext(3, "No results to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 20);
    ɵngcc0.ɵɵtext(5, "Adjust or reset the filter.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 22);
    ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_div_22_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.resetFilter(); });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵtext(8, " Reset filter ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 1, "Reset filter"));
} }
function BulkOperationsListComponent_div_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵelementStart(1, "div", 25);
    ɵngcc0.ɵɵelementStart(2, "div", 26);
    ɵngcc0.ɵɵelement(3, "i", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 28);
    ɵngcc0.ɵɵelementStart(5, "div", 29);
    ɵngcc0.ɵɵelementStart(6, "div", 30);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 31);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 32);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "div", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 3, "Operation"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 5, "Progress"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 7, "Status"), " ");
} }
function BulkOperationsListComponent_div_28_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵelementStart(1, "c8y-bulk-operation-list-item", 35);
    ɵngcc0.ɵɵlistener("reload", function BulkOperationsListComponent_div_28_Template_c8y_bulk_operation_list_item_reload_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.reload$.next(); })("showFailedOperation", function BulkOperationsListComponent_div_28_Template_c8y_bulk_operation_list_item_showFailedOperation_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.openFailedOperation($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const bulkOperation_r16 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("bulkOperation", bulkOperation_r16);
} }
const _c8 = function (a0) { return { "icon-spin": a0 }; };
const _c9 = function (a0) { return { "dd-low": a0 }; };
const _c10 = ["details"];
const _c11 = ["audit"];
const _c12 = function (a0) { return { active: a0 }; };
function BulkOperationDetailsTabsComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 8);
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function BulkOperationDetailsTabsComponent_li_3_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const tab_r7 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.template = tab_r7.template; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 10);
    ɵngcc0.ɵɵelementStart(4, "span", 11);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r7 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c12, tab_r7.template === ctx_r1.template));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 4, tab_r7.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", tab_r7.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 6, tab_r7.label));
} }
function BulkOperationDetailsTabsComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function BulkOperationDetailsTabsComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-details", 12);
    ɵngcc0.ɵɵlistener("showFailedOperation", function BulkOperationDetailsTabsComponent_ng_template_5_Template_c8y_bulk_operation_details_showFailedOperation_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.showFailedOperation.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("bulkOperation", ctx_r4.bulkOperation)("readOnly", ctx_r4.readOnly);
} }
function BulkOperationDetailsTabsComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-audit-log", 13);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("source", ctx_r6.bulkOperation.id);
} }
function BulkOperationDetailsComponent_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵelementStart(1, "span", 21);
    ɵngcc0.ɵɵtext(2, "second");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.bulkOperation.creationRamp, " ");
} }
function BulkOperationDetailsComponent_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵelementStart(1, "span", 21);
    ɵngcc0.ɵɵtext(2, "seconds");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.bulkOperation.creationRamp, " ");
} }
function BulkOperationDetailsComponent_div_32_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelement(1, "i", 23);
    ɵngcc0.ɵɵelementStart(2, "span", 24);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountSuccessful }} successful ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r2.bulkOperation.progress.successful));
} }
function BulkOperationDetailsComponent_div_33_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelement(1, "i", 25);
    ɵngcc0.ɵɵelementStart(2, "span", 24);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountFailed }} failed ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r3.bulkOperation.progress.failed));
} }
function BulkOperationDetailsComponent_div_34_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵelement(1, "i", 27);
    ɵngcc0.ɵɵelementStart(2, "span", 24);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " {{ bulkOperationsCountPending }} pending ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c4, ctx_r4.bulkOperation.progress.pending));
} }
function BulkOperationDetailsComponent_li_35_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵelementStart(1, "label", 5);
    ɵngcc0.ɵɵtext(2, "Retried from");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 6);
    ɵngcc0.ɵɵelementStart(4, "button", 28);
    ɵngcc0.ɵɵlistener("click", function BulkOperationDetailsComponent_li_35_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.scrollToRetriedFromOperation(ctx_r7.bulkOperation.failedParentId); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.bulkOperation.failedParentId, " ");
} }
function BulkOperationDetailsComponent_li_36_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2, "Description");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 29);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r6.bulkOperation.note);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.bulkOperation.note, " ");
} }
function SingleOperationsListComponent_ng_container_0_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function SingleOperationsListComponent_ng_container_0_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.retryBulkOperation(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementStart(4, "span", 12);
    ɵngcc0.ɵɵtext(5, "Retry failed operations");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Retry failed operations"));
} }
function SingleOperationsListComponent_ng_container_0_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "c8y-single-operation-item", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("operation", operation_r6)("readOnly", ctx_r2.readOnly);
} }
function SingleOperationsListComponent_ng_container_0_c8y_li_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-body");
    ɵngcc0.ɵɵelementStart(2, "div", 15);
    ɵngcc0.ɵɵelement(3, "h2", 16);
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵelementStart(5, "h3", 12);
    ɵngcc0.ɵɵtext(6, "No single operations of the selected status to display.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 17);
    ɵngcc0.ɵɵtext(8, "Single operations will be displayed here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SingleOperationsListComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2, " Operations ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 2);
    ɵngcc0.ɵɵelementStart(4, "div", 3);
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6, "Filter by status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-status-filter", 5);
    ɵngcc0.ɵɵlistener("onFilterChanged", function SingleOperationsListComponent_ng_container_0_Template_c8y_status_filter_onFilterChanged_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.getOperationsByStatus($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, SingleOperationsListComponent_ng_container_0_div_8_Template, 6, 3, "div", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 7);
    ɵngcc0.ɵɵelementStart(10, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(11, SingleOperationsListComponent_ng_container_0_div_11_Template, 2, 2, "div", 8);
    ɵngcc0.ɵɵtemplate(12, SingleOperationsListComponent_ng_container_0_c8y_li_12_Template, 9, 0, "c8y-li", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("options", ctx_r0.singleOperationStatusProperties);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.readOnly && ctx_r0.bulkOperation.progress.failed > 0);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yForOf", ctx_r0.singleOperations)("c8yForLoadMore", "auto");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.singleOperations && ctx_r0.singleOperations.data.length === 0);
} }
const _c13 = ["failureReason"];
function SingleOperationItemComponent_a_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "i", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.operation.failureReason));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "info-circle text-primary");
} }
function SingleOperationItemComponent_div_21_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "a", 18);
    ɵngcc0.ɵɵlistener("click", function SingleOperationItemComponent_div_21_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.retrySingleOperation(ctx_r3.operation); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 16);
    ɵngcc0.ɵɵelementStart(4, "span", 19);
    ɵngcc0.ɵɵtext(5, "Retry operation");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Retry operation"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "repeat m-r-4");
} }
const _c14 = function (a0, a1) { return { "content-flex-80": a0, "content-flex-50": a1 }; };
const _c15 = function (a1) { return ["/device", a1, "device-info"]; };
function BulkOperationTypeListComponent_button_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", item_r1.c8yIcon);
} }
function BulkOperationTypeListComponent_button_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "i", 8);
    ɵngcc0.ɵɵelementEnd();
} }
function BulkOperationTypeListComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function BulkOperationTypeListComponent_button_1_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const item_r1 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.handleClick(item_r1); });
    ɵngcc0.ɵɵtemplate(1, BulkOperationTypeListComponent_button_1_div_1_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵtemplate(2, BulkOperationTypeListComponent_button_1_ng_template_2_Template, 2, 0, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const _r3 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r1.c8yIcon)("ngIfElse", _r3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 4, item_r1.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 6, item_r1.name), " ");
} }
class BulkOperationWrapperComponent {
    constructor(bulkOperationsService, modalRef, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalRef = modalRef;
        this.modalService = modalService;
    }
    // openDetails function needs to be defined in the both places (component and the service) to avoid circular dependency.
    // BulkOperationsService is a downgraded service, thus we can't just use other approach where we could pass
    // BulkOperationWrapperComponent as a second argument in the bulkOperationsService.openDetails(bulkOperationId, BulkOperationWrapperComponent).
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationWrapperComponent.ɵfac = function BulkOperationWrapperComponent_Factory(t) { return new (t || BulkOperationWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalService)); };
BulkOperationWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationWrapperComponent, selectors: [["c8y-bulk-operations-wrapper"]], inputs: { bulkOperation: "bulkOperation" }, decls: 12, vars: 12, consts: [[1, "viewport-modal"], [1, "modal-header"], [1, "modal-inner-scroll"], [3, "bulkOperation", "detailsCollapsed", "readOnly", "showFailedOperation"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"]], template: function BulkOperationWrapperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h3");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "c8y-bulk-operation-list-item", 3);
        ɵngcc0.ɵɵlistener("showFailedOperation", function BulkOperationWrapperComponent_Template_c8y_bulk_operation_list_item_showFailedOperation_6_listener($event) { return ctx.openDetails($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "button", 5);
        ɵngcc0.ɵɵlistener("click", function BulkOperationWrapperComponent_Template_button_click_8_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 6, "Bulk operation details"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("bulkOperation", ctx.bulkOperation)("detailsCollapsed", false)("readOnly", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(9, 8, "Close"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 10, "Close"), " ");
    } }, directives: function () { return [BulkOperationListItemComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
BulkOperationWrapperComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalRef },
    { type: BsModalService }
];
BulkOperationWrapperComponent.propDecorators = {
    bulkOperation: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-wrapper',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Bulk operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      [detailsCollapsed]=\"false\"\n      [readOnly]=\"true\"\n      (showFailedOperation)=\"openDetails($event)\"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.BsModalRef }, { type: ɵngcc2.BsModalService }]; }, { bulkOperation: [{
            type: Input
        }] }); })();

class BulkOperationDetailsService {
    constructor(bulkOperationsService, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalService = modalService;
    }
    openDetails(bulkOperationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bulkOperation = (yield this.bulkOperationsService.getBulkOperationById(bulkOperationId)).data;
            const initialState = { bulkOperation };
            this.modalService.show(BulkOperationWrapperComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
}
BulkOperationDetailsService.ɵfac = function BulkOperationDetailsService_Factory(t) { return new (t || BulkOperationDetailsService)(ɵngcc0.ɵɵinject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵinject(ɵngcc2.BsModalService)); };
BulkOperationDetailsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationDetailsService, factory: BulkOperationDetailsService.ɵfac });
BulkOperationDetailsService.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationDetailsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc2.BsModalService }]; }, null); })();

class BulkOperationsModalComponent {
    constructor(bsModalRef, resolver) {
        this.bsModalRef = bsModalRef;
        this.resolver = resolver;
        this.showComponent = false;
    }
    cancel() {
        this.bsModalRef.hide();
    }
    createComponent(item) {
        if (item && item.component) {
            this.showComponent = true;
            const factory = this.resolver.resolveComponentFactory(item.component);
            this.container.createComponent(factory);
        }
    }
}
BulkOperationsModalComponent.ɵfac = function BulkOperationsModalComponent_Factory(t) { return new (t || BulkOperationsModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
BulkOperationsModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsModalComponent, selectors: [["c8y-bulk-operations-modal"]], viewQuery: function BulkOperationsModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, decls: 23, vars: 5, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [1, "c8y-icon", "c8y-icon-energy"], ["translate", ""], [1, "modal-inner-scroll"], [1, "modal-body", "text-center", 3, "hidden"], ["c8y-guide-docs", ""], ["c8y-guide-href", "users-guide/device-management/#bulk-operation-wizard"], [3, "onCustomType"], ["container", ""], [1, "modal-footer", 3, "hidden"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"]], template: function BulkOperationsModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "h1", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4, "New bulk operation");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "h4", 3);
        ɵngcc0.ɵɵtext(8, "Select one of the available options");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "p", 6);
        ɵngcc0.ɵɵelementStart(10, "small", 3);
        ɵngcc0.ɵɵdisableBindings();
        ɵngcc0.ɵɵtext(11, " Check the ");
        ɵngcc0.ɵɵelementStart(12, "a", 7);
        ɵngcc0.ɵɵtext(13, "User guide`KEEP_ORIGINAL`");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(14, " for more details.");
        ɵngcc0.ɵɵenableBindings();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "c8y-bulk-operation-type-list", 8);
        ɵngcc0.ɵɵlistener("onCustomType", function BulkOperationsModalComponent_Template_c8y_bulk_operation_type_list_onCustomType_15_listener($event) { return ctx.createComponent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(16, "template", null, 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 10);
        ɵngcc0.ɵɵelementStart(19, "button", 11);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsModalComponent_Template_button_click_19_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementStart(21, "span", 3);
        ɵngcc0.ɵɵtext(22, "Cancel");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("hidden", ctx.showComponent);
        ɵngcc0.ɵɵadvance(12);
        ɵngcc0.ɵɵproperty("hidden", ctx.showComponent);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 3, "Cancel"));
    } }, directives: function () { return [ɵngcc3.C8yTranslateDirective, ɵngcc3.GuideDocsComponent, ɵngcc3.GuideHrefDirective, BulkOperationTypeListComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
BulkOperationsModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ComponentFactoryResolver }
];
BulkOperationsModalComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { static: false, read: ViewContainerRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4 translate>New bulk operation</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body text-center\" [hidden]=\"showComponent\">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small translate ngNonBindable>\n          Check the\n          <a c8y-guide-href=\"users-guide/device-management/#bulk-operation-wizard\"\n            >User guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)=\"createComponent($event)\"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class=\"modal-footer\" [hidden]=\"showComponent\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc2.BsModalRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { container: [{
            type: ViewChild,
            args: ['container', { static: false, read: ViewContainerRef }]
        }] }); })();

class BulkOperationModalsService {
    constructor(bsModalService) {
        this.bsModalService = bsModalService;
    }
    showNewBulkOperationModal() {
        this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {
            backdrop: 'static',
            class: 'modal-sm'
        });
    }
    hideNewBulkOperationModal() {
        if (this.bsModalRef) {
            this.bsModalRef.hide();
        }
    }
}
BulkOperationModalsService.ɵfac = function BulkOperationModalsService_Factory(t) { return new (t || BulkOperationModalsService)(ɵngcc0.ɵɵinject(ɵngcc2.BsModalService)); };
BulkOperationModalsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BulkOperationModalsService, factory: BulkOperationModalsService.ɵfac });
BulkOperationModalsService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationModalsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.BsModalService }]; }, null); })();

class BulkOperationsRescheduleModalComponent {
    constructor(bsModalRef, bulkOperationsService, alert) {
        this.bsModalRef = bsModalRef;
        this.bulkOperationsService = bulkOperationsService;
        this.alert = alert;
        this.closeSubject = new Subject();
    }
    ngOnInit() {
        this.modalTitle = this.getTitle();
    }
    onDateAndDelaySelect($event) {
        this.dateAndDelay = $event;
    }
    getTitle() {
        return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');
    }
    onCancel() {
        this.bsModalRef.hide();
    }
    onSave() {
        return __awaiter(this, void 0, void 0, function* () {
            let newBulkOperation;
            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
            if (this.isRetryOperation) {
                try {
                    newBulkOperation = yield this.bulkOperationsService.createBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled for a retry.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            else {
                try {
                    newBulkOperation = yield this.bulkOperationsService.updateBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            // send back to component from which modal was called
            this.closeSubject.next(newBulkOperation.data);
            this.bsModalRef.hide();
        });
    }
}
BulkOperationsRescheduleModalComponent.ɵfac = function BulkOperationsRescheduleModalComponent_Factory(t) { return new (t || BulkOperationsRescheduleModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
BulkOperationsRescheduleModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsRescheduleModalComponent, selectors: [["c8y-bulk-operations-reschedule-modal"]], decls: 22, vars: 12, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [1, "c8y-icon", "c8y-icon-energy"], [1, "modal-inner-scroll"], [1, "modal-body"], [1, "text-center"], [3, "description"], [1, "p-t-16", "center-block", 2, "max-width", "300px"], [3, "ngModel", "ngModelChange"], ["scheduler", "ngModel"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["translate", ""], ["id", "save-btn", "type", "button", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function BulkOperationsRescheduleModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "h1", 2);
        ɵngcc0.ɵɵelementStart(3, "h4");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelement(9, "c8y-operation-summary", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "c8y-operation-scheduler", 8, 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function BulkOperationsRescheduleModalComponent_Template_c8y_operation_scheduler_ngModelChange_11_listener($event) { return ctx.dateAndDelay = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵelementStart(14, "button", 11);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsRescheduleModalComponent_Template_button_click_14_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementStart(16, "span", 12);
        ɵngcc0.ɵɵtext(17, "Cancel");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 13);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsRescheduleModalComponent_Template_button_click_18_listener() { return ctx.onSave(); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementStart(20, "span", 12);
        ɵngcc0.ɵɵtext(21, "Save");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(12);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, ctx.modalTitle));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("description", ctx.bulkOperation.operationPrototype.description);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dateAndDelay);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 8, "Cancel"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 10, "Save"));
        ɵngcc0.ɵɵproperty("disabled", _r0 == null ? null : _r0.control == null ? null : _r0.control.errors);
    } }, directives: [ɵngcc4.OperationSummaryComponent, ɵngcc5.OperationSchedulerComponent, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc3.C8yTranslateDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
BulkOperationsRescheduleModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: BulkOperationsService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsRescheduleModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations-reschedule-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc2.BsModalRef }, { type: ɵngcc1.BulkOperationsService }, { type: ɵngcc3.AlertService }]; }, null); })();

const BULK_OPERATION_STATUS_LABELS = {
    SCHEDULED: gettext('Scheduled'),
    EXECUTING: gettext('Executing'),
    CANCELED: gettext('Canceled'),
    FAILED: gettext('Completed with failures'),
    SUCCESSFUL: gettext('Completed successfully'),
    DELETED: gettext('Deleted')
};
const BULK_OPERATION_STATUS_OPTIONS = [
    {
        label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,
        generalStatus: [OperationBulkGeneralStatus.SCHEDULED],
        iconClass: 'dlt-c8y-icon-calendar text-info'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.EXECUTING,
        generalStatus: [
            OperationBulkGeneralStatus.EXECUTING,
            OperationBulkGeneralStatus.EXECUTING_WITH_ERROR
        ],
        iconClass: 'dlt-c8y-icon-refresh text-primary'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.DELETED,
        generalStatus: [OperationBulkGeneralStatus.DELETED],
        iconClass: 'dlt-c8y-icon-delete-document text-muted'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.CANCELED,
        generalStatus: [OperationBulkGeneralStatus.CANCELED],
        iconClass: 'dlt-c8y-icon-ban text-muted'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.FAILED,
        generalStatus: [OperationBulkGeneralStatus.FAILED],
        iconClass: 'dlt-c8y-icon-exclamation-triangle text-danger'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,
        generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],
        iconClass: 'dlt-c8y-icon-check-circle text-success'
    }
];
const BULK_OPERATION_FALLBACK_STATUS_ICON = 'dlt-c8y-icon-ask-question text-muted';

class BulkOperationListItemComponent {
    constructor(bulkOperationsService, modal, alert, bsModalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modal = modal;
        this.alert = alert;
        this.bsModalService = bsModalService;
        this.detailsCollapsed = true;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
        this.reload = new EventEmitter();
        this.refreshLoading = false;
        this.bulkOperationGeneralStatus = OperationBulkGeneralStatus;
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.finishDatePopoverText = gettext('Approximate date, estimated based on the bulk operation settings.');
        this.progressBarClass = 'progress';
        this.progressBarStatus = 0;
    }
    ngOnInit() {
        this.iconClass = this.getIconClass();
        this.finishDate = this.calculateFinishDateMs();
        this.setProgressBar();
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.iconClass = this.getIconClass();
            this.setProgressBar();
        }
    }
    getIconClass() {
        const statusOptions = this.bulkOperationStatusOptions.find(statusOption => statusOption.generalStatus.includes(this.bulkOperation.generalStatus));
        return statusOptions ? statusOptions.iconClass : BULK_OPERATION_FALLBACK_STATUS_ICON;
    }
    calculateFinishDateMs() {
        const startDateMs = new Date(this.bulkOperation.startDate).getTime();
        const creationRampMs = this.bulkOperation.creationRamp * 1000;
        return startDateMs + creationRampMs * this.bulkOperation.progress.all;
    }
    progressBarProgressFn() {
        return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
            this.bulkOperation.progress.all) *
            100);
    }
    setProgressBar() {
        const staticContentOfClass = 'progress-bar progress-striped active progress-bar';
        const progressBarState = {
            EXECUTING: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-primary`,
                progressBarStatus: this.progressBarProgressFn()
            },
            EXECUTING_WITH_ERROR: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: this.progressBarProgressFn()
            },
            FAILED: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: 100
            },
            SUCCESSFUL: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-success`,
                progressBarStatus: 100
            }
        };
        assign(this, progressBarState[this.bulkOperation.generalStatus]);
    }
    editSchedule() {
        const rescheduledOperation = cloneDeep(this.bulkOperation);
        const initialState = {
            bulkOperation: rescheduledOperation
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
    }
    cancelBulkOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Cancel bulk operation'), gettext('You are about to cancel the bulk operation. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);
                this.reload.emit();
                this.alert.success(gettext('Operation canceled.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    retryFailedOperation() {
        const clonedBulk = cloneDeep(this.bulkOperation);
        // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
        delete clonedBulk.groupId;
        clonedBulk.failedParentId = this.bulkOperation.id;
        // show reschdedule modal:
        const initialState = {
            bulkOperation: clonedBulk,
            isRetryOperation: true
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        this.bsModalRef.content.closeSubject.subscribe(() => {
            this.reload.emit();
        });
    }
    setToSuccessful() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Set manually bulk operation to SUCCESSFUL'), gettext('You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.updateBulkOperation({
                    id: this.bulkOperation.id,
                    generalStatus: OperationBulkGeneralStatus.SUCCESSFUL
                });
                this.reload.emit();
                this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    openFailedOperation(failedParentId) {
        this.showFailedOperation.emit(failedParentId);
    }
    isStatusScheduled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
    }
    isStatusExecutingOrExecutingWithError() {
        return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
            this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
    }
    allOperationsCreated() {
        return (this.bulkOperation.progress.all ===
            this.bulkOperation.progress.executing +
                this.bulkOperation.progress.failed +
                this.bulkOperation.progress.pending +
                this.bulkOperation.progress.successful);
    }
    isStatusCanceled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
    }
    isStatusFailed() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
    }
}
BulkOperationListItemComponent.ɵfac = function BulkOperationListItemComponent_Factory(t) { return new (t || BulkOperationListItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BsModalService)); };
BulkOperationListItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationListItemComponent, selectors: [["c8y-bulk-operation-list-item"]], viewQuery: function BulkOperationListItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItem = _t.first);
    } }, inputs: { detailsCollapsed: "detailsCollapsed", readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { showFailedOperation: "showFailedOperation", reload: "reload" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 35, vars: 30, consts: [[1, "c8y-list__item--double-actions", 3, "ngClass", "collapsed", "id"], ["listItem", ""], [3, "ngClass"], [1, "col-5"], [1, "text-truncate", 3, "title"], [1, "text-muted", "m-r-4"], [1, "flex-grow"], [1, "m-t-8", "visible-xs"], ["class", "m-t-16 m-b-0", 4, "ngIf", "ngIfElse"], ["statusNotCanceled", ""], [1, "col-4"], [1, "p-t-8", "visible-xs"], ["class", "m-r-8 icon-flex", 4, "ngIf"], [1, "c8y-list__item__footer"], [1, "m-r-16"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "icon-flex"], ["c8yIcon", "calendar", 1, "m-r-4"], ["class", "m-r-16", 4, "ngIf"], [4, "ngIf"], [1, "m-b-16"], [3, "bulkOperation", "readOnly", "onRetryFailedOperations", "showFailedOperation", 4, "ngIf"], [1, "m-t-16", "m-b-0"], [3, "title"], ["role", "progressbar", "aria-valuenow", "0", "aria-valuemin", "0", "aria-valuemax", "100"], [1, "m-r-8", "icon-flex"], ["c8yIcon", "check-circle", 1, "text-success", "m-r-4"], ["translate", "", 3, "translateParams"], ["c8yIcon", "warning", 1, "text-danger", "m-r-4"], ["c8yIcon", "clock-o", 1, "text-primary", "m-r-4"], ["container", "body", "class", "btn-clean m-l-4", "placement", "right", "outsideClick", "true", 3, "popover", 4, "ngIf"], ["container", "body", "placement", "right", "outsideClick", "true", 1, "btn-clean", "m-l-4", 3, "popover"], ["c8yIcon", "question-circle-o text-primary"], ["icon", "pencil", 3, "label", "click", 4, "ngIf"], ["icon", "remove", 3, "label", "click", 4, "ngIf"], ["icon", "repeat", 3, "label", "click", 4, "ngIf"], ["icon", "check-circle", 3, "label", "click", 4, "ngIf"], ["icon", "pencil", 3, "label", "click"], ["icon", "remove", 3, "label", "click"], ["icon", "repeat", 3, "label", "click"], ["icon", "check-circle", 3, "label", "click"], [3, "bulkOperation", "readOnly", "onRetryFailedOperations", "showFailedOperation"]], template: function BulkOperationListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-li", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
        ɵngcc0.ɵɵelement(3, "i");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "span", 4);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementStart(8, "strong", 5);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 6);
        ɵngcc0.ɵɵelement(13, "div", 7);
        ɵngcc0.ɵɵtemplate(14, BulkOperationListItemComponent_hr_14_Template, 1, 0, "hr", 8);
        ɵngcc0.ɵɵtemplate(15, BulkOperationListItemComponent_ng_template_15_Template, 4, 12, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 10);
        ɵngcc0.ɵɵelement(18, "div", 11);
        ɵngcc0.ɵɵtemplate(19, BulkOperationListItemComponent_small_19_Template, 4, 3, "small", 12);
        ɵngcc0.ɵɵtemplate(20, BulkOperationListItemComponent_small_20_Template, 4, 3, "small", 12);
        ɵngcc0.ɵɵtemplate(21, BulkOperationListItemComponent_small_21_Template, 4, 3, "small", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 13);
        ɵngcc0.ɵɵelementStart(23, "div", 14);
        ɵngcc0.ɵɵelementStart(24, "span", 15);
        ɵngcc0.ɵɵtext(25, "Start");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "small", 16);
        ɵngcc0.ɵɵelement(27, "i", 17);
        ɵngcc0.ɵɵelementStart(28, "span");
        ɵngcc0.ɵɵtext(29);
        ɵngcc0.ɵɵpipe(30, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(31, BulkOperationListItemComponent_div_31_Template, 9, 4, "div", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(32, BulkOperationListItemComponent_ng_container_32_Template, 5, 4, "ng-container", 19);
        ɵngcc0.ɵɵelementStart(33, "c8y-li-collapse", 20);
        ɵngcc0.ɵɵtemplate(34, BulkOperationListItemComponent_c8y_bulk_operation_details_tabs_34_Template, 1, 2, "c8y-bulk-operation-details-tabs", 21);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r2 = ɵngcc0.ɵɵreference(16);
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.bulkOperation.id);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(25, _c5, !ctx.detailsCollapsed))("collapsed", ctx.detailsCollapsed);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵclassMap(ctx.iconClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(27, _c6, !ctx.readOnly, ctx.readOnly));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate2("title", "", ctx.bulkOperation.id, " - ", ɵngcc0.ɵɵpipeBind1(7, 19, ctx.bulkOperation.operationPrototype.description), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.bulkOperation.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 21, ctx.bulkOperation.operationPrototype.description), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isStatusCanceled())("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.successful > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.pending > 0);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(30, 23, ctx.bulkOperation.startDate), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperationGeneralStatus.CANCELED !== ctx.bulkOperation.generalStatus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readOnly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !_r0.collapsed);
    } }, directives: function () { return [ɵngcc3.ListItemComponent, ɵngcc7.NgClass, ɵngcc3.ListItemIconComponent, ɵngcc7.NgIf, ɵngcc3.C8yTranslateDirective, ɵngcc3.IconDirective, ɵngcc3.ListItemCollapseComponent, ɵngcc8.PopoverDirective, ɵngcc3.ListItemActionComponent, BulkOperationDetailsTabsComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe, ɵngcc3.DatePipe, ɵngcc3.ɵb]; }, encapsulation: 2 });
BulkOperationListItemComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: ModalService },
    { type: AlertService },
    { type: BsModalService }
];
BulkOperationListItemComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    detailsCollapsed: [{ type: Input }],
    readOnly: [{ type: Input }],
    showFailedOperation: [{ type: Output }],
    reload: [{ type: Output }],
    listItem: [{ type: ViewChild, args: ['listItem', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationListItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-list-item',
                template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0\" />\n      <ng-template #statusNotCanceled>\n        <div\n          [class]=\"progressBarClass\"\n          title=\"{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%\"\n        >\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\"\n              >{{ progressBarStatus | c8yNumber: 'floor':'1.0-0' }}%</span\n            >\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <div class=\"p-t-8 visible-xs\"></div>\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"check-circle\" class=\"text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"warning\" class=\"text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i c8yIcon=\"clock-o\" class=\"text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"\n        isStatusScheduled() || (isStatusExecutingOrExecutingWithError() && !allOperationsCreated())\n      \"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to SUCCESSFUL' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check-circle\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-bulk-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [bulkOperation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n    >\n    </c8y-bulk-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc3.ModalService }, { type: ɵngcc3.AlertService }, { type: ɵngcc2.BsModalService }]; }, { detailsCollapsed: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], showFailedOperation: [{
            type: Output
        }], reload: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], listItem: [{
            type: ViewChild,
            args: ['listItem', { static: true }]
        }] }); })();

class BulkOperationsListComponent {
    constructor(realtime, bulkOperationsService, bulkOperationModalsService) {
        this.realtime = realtime;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.bulkTypes = [];
        this.selectedTypeFilters = this.getTypeFilters();
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.typeFilter$ = new BehaviorSubject(null);
        this.timeFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.bulkOperations$ = combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(tap(() => {
            this.refreshLoading = true;
        }), switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)), withLatestFrom(this.typeFilter$), map(([result, typeFilter]) => {
            this.filterPipe = pipe(map((data) => this.filterByType(data, typeFilter)));
            return Object.assign(Object.assign({}, result), { data: this.filterByType(result.data, typeFilter) });
        }), tap(() => {
            this.refreshLoading = false;
        }), shareReplay(1));
        this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
    }
    ngOnInit() {
        this.bulkTypes = this.bulkOperationsService.getBulkTypes();
    }
    filterByType(bulkOperations, typeFilter) {
        const flattenedFragments = this.flattenFilterFragments(typeFilter);
        if (
        // return data unfiltered if no filters selected...
        !flattenedFragments.length ||
            // ...or when all filters are selected
            this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))) {
            return bulkOperations;
        }
        const filteredData = bulkOperations.filter(item => {
            return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));
        });
        return filteredData;
    }
    resetFilter() {
        this.statusFilter$.next(null);
        this.timeFilter$.next(null);
        this.typeFilter$.next(null);
        this.datePicker.clearFilter();
        this.selectedTypeFilters = this.getTypeFilters();
        this.statusFilter.reset();
    }
    isFilterApplied() {
        return (this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue());
    }
    filter(statusFilters, timeFilter) {
        const status = statusFilters && statusFilters.length > 0
            ? {
                generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))
            }
            : {};
        const time = timeFilter
            ? Object.assign(Object.assign({}, (timeFilter.dateFrom && {
                dateFrom: timeFilter.dateFrom.toISOString()
            })), (timeFilter.dateTo && {
                dateTo: timeFilter.dateTo.toISOString()
            })) : {};
        return this.getBulkOperations(Object.assign(Object.assign({}, status), time));
    }
    getBulkOperations(filter) {
        return this.bulkOperationsService.getBulkOperations(filter);
    }
    getTypeFilters() {
        return this.bulkOperationsService.getBulkTypes();
    }
    addBulkOperation() {
        this.bulkOperationModalsService.showNewBulkOperationModal();
    }
    openFailedOperation(failedParentId) {
        this.listItems.forEach(item => {
            if (item.bulkOperation.id === failedParentId) {
                item.listItem.collapsed = false;
                item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    }
    compareOperations(operationA, operationB) {
        return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
    }
    flattenFilterFragments(filters) {
        return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);
    }
}
BulkOperationsListComponent.ɵfac = function BulkOperationsListComponent_Factory(t) { return new (t || BulkOperationsListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OperationBulkRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(BulkOperationModalsService)); };
BulkOperationsListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsListComponent, selectors: [["c8y-bulk-operations"]], viewQuery: function BulkOperationsListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c7, 7);
        ɵngcc0.ɵɵviewQuery(DatePickerComponent, 7);
        ɵngcc0.ɵɵviewQuery(BulkOperationListItemComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.statusFilter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datePicker = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItems = _t);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([OperationBulkRealtimeService])], decls: 30, vars: 42, consts: [["itemClass", "navbar-form", 3, "placement", 4, "ngIf"], ["itemClass", "navbar-form", 3, "placement"], [3, "options", "onFilterChanged"], ["statusFilter", ""], [3, "onDateSelected"], [3, "placement"], [3, "service"], ["class", "btn btn-link d-flex a-i-center", 3, "title", "click", 4, "ngIf"], [1, "btn", "btn-link", "d-flex", "a-i-center", 3, "title", "click"], ["c8yIcon", "refresh", 1, "m-r-4", 3, "ngClass"], [1, "text-truncate"], ["class", "c8y-empty-state text-center", 4, "ngIf"], [1, "m-b-24", 3, "ngClass"], ["class", "page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item", 4, "ngIf"], ["class", "d-contents", 4, "c8yFor", "c8yForOf", "c8yForRealtime", "c8yForPipe", "c8yForComparator", "c8yForLoadMore"], ["translate", "", 1, "hidden-sm"], [2, "width", "180px", 3, "items", "selected", "disableApplyOnNoSelection", "onChange"], ["c8yIcon", "plus-circle", 1, "m-r-4"], [1, "c8y-empty-state", "text-center"], [1, "c8y-icon", "c8y-icon-energy", "c8y-icon-duocolor"], ["translate", ""], ["type", "button", "class", "btn btn-primary", "translate", "", 3, "title", "click", 4, "ngIf"], ["type", "button", "translate", "", 1, "btn", "btn-primary", 3, "title", "click"], ["c8yIcon", "search", 1, "c8y-icon", "c8y-icon-duocolor"], [1, "page-sticky-header", "hidden-xs", "c8y-list__item--double-actions", "c8y-list__item"], [1, "c8y-list__item__block"], [1, "c8y-list__item__icon"], [1, "p-l-24"], [1, "c8y-list__item__body"], [1, "content-flex-57"], [1, "col-5"], [1, "flex-grow"], [1, "col-4"], [1, "c8y-list__item__actions"], [1, "d-contents"], [1, "d-contents", 3, "bulkOperation", "reload", "showFailedOperation"]], template: function BulkOperationsListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, BulkOperationsListComponent_c8y_action_bar_item_3_Template, 4, 4, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(5, "c8y-status-filter", 2, 3);
        ɵngcc0.ɵɵlistener("onFilterChanged", function BulkOperationsListComponent_Template_c8y_status_filter_onFilterChanged_5_listener($event) { return ctx.statusFilter$.next($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(8, "c8y-date-picker", 4);
        ɵngcc0.ɵɵlistener("onDateSelected", function BulkOperationsListComponent_Template_c8y_date_picker_onDateSelected_8_listener($event) { return ctx.timeFilter$.next($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵelement(10, "c8y-realtime-btn", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵtemplate(12, BulkOperationsListComponent_button_12_Template, 6, 6, "button", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "c8y-action-bar-item", 5);
        ɵngcc0.ɵɵelementStart(14, "button", 8);
        ɵngcc0.ɵɵlistener("click", function BulkOperationsListComponent_Template_button_click_14_listener() { return ctx.reload$.next(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelement(16, "i", 9);
        ɵngcc0.ɵɵelementStart(17, "span", 10);
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, BulkOperationsListComponent_div_20_Template, 7, 1, "div", 11);
        ɵngcc0.ɵɵpipe(21, "async");
        ɵngcc0.ɵɵtemplate(22, BulkOperationsListComponent_div_22_Template, 9, 3, "div", 11);
        ɵngcc0.ɵɵpipe(23, "async");
        ɵngcc0.ɵɵelementStart(24, "c8y-list-group", 12);
        ɵngcc0.ɵɵpipe(25, "async");
        ɵngcc0.ɵɵtemplate(26, BulkOperationsListComponent_div_26_Template, 16, 9, "div", 13);
        ɵngcc0.ɵɵpipe(27, "async");
        ɵngcc0.ɵɵtemplate(28, BulkOperationsListComponent_div_28_Template, 2, 1, "div", 14);
        ɵngcc0.ɵɵpipe(29, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_13_0;
        let tmp_14_0;
        let tmp_15_0;
        let tmp_16_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 22, "Device control"), "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkTypes == null ? null : ctx.bulkTypes.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("options", ctx.bulkOperationStatusOptions);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("service", ctx.realtime);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkTypes == null ? null : ctx.bulkTypes.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 24, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(38, _c8, ctx.refreshLoading));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 26, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_13_0 = ɵngcc0.ɵɵpipeBind1(21, 28, ctx.bulkOperations$)) == null ? null : tmp_13_0.data.length) === 0 && !ctx.isFilterApplied());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_14_0 = ɵngcc0.ɵɵpipeBind1(23, 30, ctx.bulkOperations$)) == null ? null : tmp_14_0.data.length) === 0 && ctx.isFilterApplied());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(40, _c9, ((tmp_15_0 = ɵngcc0.ɵɵpipeBind1(25, 32, ctx.bulkOperations$)) == null ? null : tmp_15_0.data.length) < 10));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_16_0 = ɵngcc0.ɵɵpipeBind1(27, 34, ctx.bulkOperations$)) == null ? null : tmp_16_0.data.length);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(29, 36, ctx.bulkOperations$))("c8yForRealtime", ctx.realtime)("c8yForPipe", ctx.filterPipe)("c8yForComparator", ctx.compareOperations.bind(ctx))("c8yForLoadMore", "auto");
    } }, directives: [ɵngcc3.TitleComponent, ɵngcc7.NgIf, ɵngcc3.ActionBarItemComponent, ɵngcc9.StatusFilterComponent, ɵngcc3.DatePickerComponent, ɵngcc3.RealtimeButtonComponent, ɵngcc3.IconDirective, ɵngcc7.NgClass, ɵngcc3.ListGroupComponent, ɵngcc3.ForOfDirective, ɵngcc3.C8yTranslateDirective, ɵngcc3.SelectComponent, BulkOperationListItemComponent], pipes: [ɵngcc3.C8yTranslatePipe, ɵngcc7.AsyncPipe], encapsulation: 2 });
BulkOperationsListComponent.ctorParameters = () => [
    { type: OperationBulkRealtimeService },
    { type: BulkOperationsService },
    { type: BulkOperationModalsService }
];
BulkOperationsListComponent.propDecorators = {
    listItems: [{ type: ViewChildren, args: [BulkOperationListItemComponent,] }],
    statusFilter: [{ type: ViewChild, args: ['statusFilter', { static: true },] }],
    datePicker: [{ type: ViewChild, args: [DatePickerComponent, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operations',
                template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item *ngIf=\"bulkTypes?.length\" itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate class=\"hidden-sm\">Type</label>\n  <c8y-select\n    style=\"width: 180px;\"\n    [items]=\"bulkTypes\"\n    [selected]=\"selectedTypeFilters\"\n    [disableApplyOnNoSelection]=\"true\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"bulkTypes?.length\"\n    class=\"btn btn-link d-flex a-i-center\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i> \n    <span class=\"text-truncate\">\n      {{ 'New bulk operation' | translate }}\n    </span> \n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link d-flex a-i-center\" \n    title=\"{{ 'Reload' | translate }}\" \n    (click)=\"reload$.next()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': refreshLoading }\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Reload' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n<!-- Empty state  -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor\"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type=\"button\"\n    *ngIf=\"bulkTypes?.length\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\n<!-- No results empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n>\n  <h1 c8yIcon=\"search\" class=\"c8y-icon c8y-icon-duocolor\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"p-l-24\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto';\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
                providers: [OperationBulkRealtimeService]
            }]
    }], function () { return [{ type: ɵngcc3.OperationBulkRealtimeService }, { type: ɵngcc1.BulkOperationsService }, { type: BulkOperationModalsService }]; }, { listItems: [{
            type: ViewChildren,
            args: [BulkOperationListItemComponent]
        }], statusFilter: [{
            type: ViewChild,
            args: ['statusFilter', { static: true }]
        }], datePicker: [{
            type: ViewChild,
            args: [DatePickerComponent, { static: true }]
        }] }); })();

class BulkOperationDetailsTabsComponent {
    constructor() {
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.showFailedOperation = new EventEmitter();
        this.tabs = [];
    }
    ngOnInit() {
        this.template = this.detailsTemplate;
        this.tabs = [
            {
                label: gettext('Details'),
                path: null,
                icon: 'asterisk',
                template: this.detailsTemplate
            },
            {
                label: gettext('History of changes'),
                path: null,
                icon: 'archive',
                template: this.auditTemplate
            }
        ];
    }
}
BulkOperationDetailsTabsComponent.ɵfac = function BulkOperationDetailsTabsComponent_Factory(t) { return new (t || BulkOperationDetailsTabsComponent)(); };
BulkOperationDetailsTabsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationDetailsTabsComponent, selectors: [["c8y-bulk-operation-details-tabs"]], viewQuery: function BulkOperationDetailsTabsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, 7);
        ɵngcc0.ɵɵviewQuery(_c11, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.auditTemplate = _t.first);
    } }, inputs: { readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { onRetryFailedOperations: "onRetryFailedOperations", showFailedOperation: "showFailedOperation" }, decls: 10, vars: 4, consts: [[1, "tabContainer"], ["container", ""], [1, "nav", "nav-tabs", "nav-tabsc8y"], [3, "ngClass", 4, "ngFor", "ngForOf"], [4, "ngTemplateOutlet"], ["details", ""], ["audit", ""], [1, "d-flex", "d-col", 3, "bulkOperation", "readOnly", "onRetryFailedOperations"], [3, "ngClass"], [1, "btn-clean", 3, "title", "click"], [3, "c8yIcon"], [1, "txt"], [3, "bulkOperation", "readOnly", "showFailedOperation"], [3, "source"]], template: function BulkOperationDetailsTabsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "ul", 2);
        ɵngcc0.ɵɵtemplate(3, BulkOperationDetailsTabsComponent_li_3_Template, 7, 10, "li", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, BulkOperationDetailsTabsComponent_ng_container_4_Template, 1, 0, "ng-container", 4);
        ɵngcc0.ɵɵtemplate(5, BulkOperationDetailsTabsComponent_ng_template_5_Template, 1, 2, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, BulkOperationDetailsTabsComponent_ng_template_7_Template, 1, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(9, "c8y-single-operations-list", 7);
        ɵngcc0.ɵɵlistener("onRetryFailedOperations", function BulkOperationDetailsTabsComponent_Template_c8y_single_operations_list_onRetryFailedOperations_9_listener($event) { return ctx.onRetryFailedOperations.emit($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("bulkOperation", ctx.bulkOperation)("readOnly", ctx.readOnly);
    } }, directives: function () { return [ɵngcc7.NgForOf, ɵngcc7.NgTemplateOutlet, SingleOperationsListComponent, ɵngcc7.NgClass, ɵngcc3.IconDirective, BulkOperationDetailsComponent, ɵngcc3.ɵbe]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
BulkOperationDetailsTabsComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    showFailedOperation: [{ type: Output }],
    detailsTemplate: [{ type: ViewChild, args: ['details', { static: true },] }],
    auditTemplate: [{ type: ViewChild, args: ['audit', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationDetailsTabsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-details-tabs',
                template: "<div #container class=\"tabContainer\">\n  <ul class=\"nav nav-tabs nav-tabsc8y\">\n    <li [ngClass]=\"{ active: tab.template === template }\" *ngFor=\"let tab of tabs\">\n      <button [title]=\"tab.label | translate\" class=\"btn-clean\" (click)=\"template = tab.template\">\n        <i [c8yIcon]=\"tab.icon\"></i>\n        <span class=\"txt\">{{ tab.label | translate }}</span>\n      </button>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n\n<ng-template #details>\n  <c8y-bulk-operation-details\n    [bulkOperation]=\"bulkOperation\"\n    [readOnly]=\"readOnly\"\n    (showFailedOperation)=\"showFailedOperation.emit($event)\"\n  >\n  </c8y-bulk-operation-details>\n</ng-template>\n\n<ng-template #audit>\n  <c8y-audit-log [source]=\"bulkOperation.id\"></c8y-audit-log>\n</ng-template>\n\n<c8y-single-operations-list\n  [bulkOperation]=\"bulkOperation\"\n  [readOnly]=\"readOnly\"\n  (onRetryFailedOperations)=\"onRetryFailedOperations.emit($event)\"\n  class=\"d-flex d-col\"\n></c8y-single-operations-list>\n"
            }]
    }], function () { return []; }, { readOnly: [{
            type: Input
        }], onRetryFailedOperations: [{
            type: Output
        }], showFailedOperation: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], detailsTemplate: [{
            type: ViewChild,
            args: ['details', { static: true }]
        }], auditTemplate: [{
            type: ViewChild,
            args: ['audit', { static: true }]
        }] }); })();

class BulkOperationDetailsComponent {
    constructor() {
        this.allFilterIsSelected = false;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
    }
    scrollToRetriedFromOperation(failedOperationId) {
        this.showFailedOperation.emit(failedOperationId);
    }
}
BulkOperationDetailsComponent.ɵfac = function BulkOperationDetailsComponent_Factory(t) { return new (t || BulkOperationDetailsComponent)(); };
BulkOperationDetailsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationDetailsComponent, selectors: [["c8y-bulk-operation-details"]], inputs: { readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { showFailedOperation: "showFailedOperation" }, decls: 43, vars: 22, consts: [[1, "row", "d-flex-md", "fit-h"], [1, "col-md-4", "flex-item-top"], ["translate", "", 1, "legend", "form-block"], [1, "list-unstyled", "small"], [1, "p-t-4", "p-b-4", "flex-row", "separator-bottom"], ["translate", "", 1, "small", "m-0"], [1, "flex-item-right"], [1, "small", "m-0"], ["container", "body", 1, "text-primary", 3, "tooltip"], [3, "c8yIcon"], [1, "flex-item-right", 3, "ngPlural"], ["ngPluralCase", "=1"], ["ngPluralCase", "other"], [1, "flex-item-right", "text-uppercase"], ["translate", "", 1, "small", "flex-item-top"], [1, "flex-row", "flex-grow", "flex-item-right", "flex-end"], ["class", "icon-flex flex-item-left m-r-8", 4, "ngIf"], ["class", "icon-flex flex-item-left", 4, "ngIf"], ["class", "p-t-4 p-b-4 flex-row separator-bottom", 4, "ngIf"], [1, "col-md-8", "fit-h", "d-flex", "d-col"], [1, "inner-scroll", "p-16", "m-b-0", "text-pre-wrap"], ["translate", ""], [1, "icon-flex", "flex-item-left", "m-r-8"], ["c8yIcon", "check-circle", 1, "text-success", "m-r-4"], ["translate", "", 3, "translateParams"], ["c8yIcon", "warning", 1, "text-danger", "m-r-4"], [1, "icon-flex", "flex-item-left"], ["c8yIcon", "clock-o", 1, "m-r-4", "text-info"], [1, "btn", "btn-default", "btn-xs", 3, "click"], [1, "flex-item-right", "text-right", "m-l-8", "text-truncate", 3, "title"]], template: function BulkOperationDetailsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, " Details ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "ul", 3);
        ɵngcc0.ɵɵelementStart(5, "li", 4);
        ɵngcc0.ɵɵelementStart(6, "label", 5);
        ɵngcc0.ɵɵtext(7, "Start date");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "span", 6);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "li", 4);
        ɵngcc0.ɵɵelementStart(12, "label", 7);
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementStart(15, "a", 8);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelement(17, "i", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "span", 10);
        ɵngcc0.ɵɵtemplate(19, BulkOperationDetailsComponent_ng_template_19_Template, 3, 1, "ng-template", 11);
        ɵngcc0.ɵɵtemplate(20, BulkOperationDetailsComponent_ng_template_20_Template, 3, 1, "ng-template", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "li", 4);
        ɵngcc0.ɵɵelementStart(22, "label", 5);
        ɵngcc0.ɵɵtext(23, "Status");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "span", 13);
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "li", 4);
        ɵngcc0.ɵɵelementStart(28, "label", 14);
        ɵngcc0.ɵɵtext(29, "Result");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "div", 15);
        ɵngcc0.ɵɵelementStart(31, "div");
        ɵngcc0.ɵɵtemplate(32, BulkOperationDetailsComponent_div_32_Template, 4, 3, "div", 16);
        ɵngcc0.ɵɵtemplate(33, BulkOperationDetailsComponent_div_33_Template, 4, 3, "div", 16);
        ɵngcc0.ɵɵtemplate(34, BulkOperationDetailsComponent_div_34_Template, 4, 3, "div", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(35, BulkOperationDetailsComponent_li_35_Template, 6, 1, "li", 18);
        ɵngcc0.ɵɵtemplate(36, BulkOperationDetailsComponent_li_36_Template, 5, 2, "li", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 19);
        ɵngcc0.ɵɵelementStart(38, "div", 2);
        ɵngcc0.ɵɵtext(39, " Operation ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(40, "pre", 20);
        ɵngcc0.ɵɵtext(41);
        ɵngcc0.ɵɵpipe(42, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 12, ctx.bulkOperation.startDate));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 14, "Delay"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(16, 16, "Delay before sending the operation to the next device."));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "info-circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngPlural", ctx.bulkOperation.creationRamp);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 18, ctx.bulkOperation.generalStatus.toString()), " ");
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.successful > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.pending > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.failedParentId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.note);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(42, 20, ctx.bulkOperation.operationPrototype));
    } }, directives: [ɵngcc3.C8yTranslateDirective, ɵngcc10.TooltipDirective, ɵngcc3.IconDirective, ɵngcc7.NgPlural, ɵngcc7.NgPluralCase, ɵngcc7.NgIf], pipes: [ɵngcc3.DatePipe, ɵngcc3.C8yTranslatePipe, ɵngcc7.JsonPipe], encapsulation: 2 });
BulkOperationDetailsComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    showFailedOperation: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationDetailsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-details',
                template: "<div class=\"row d-flex-md fit-h\">\n  <div class=\"col-md-4 flex-item-top\">\n    <div class=\"legend form-block\" translate>\n      Details\n    </div>\n    <ul class=\"list-unstyled small\">\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Start date</label>\n        <span class=\"flex-item-right\">{{ bulkOperation.startDate | c8yDate }}</span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\">\n          {{ 'Delay' | translate }}\n          <a\n            class=\"text-primary\"\n            tooltip=\"{{ 'Delay before sending the operation to the next device.' | translate }}\"\n            container=\"body\"\n          >\n            <i [c8yIcon]=\"'info-circle'\"></i>\n          </a>\n        </label>\n        <span [ngPlural]=\"bulkOperation.creationRamp\" class=\"flex-item-right\">\n          <ng-template ngPluralCase=\"=1\">\n            {{ bulkOperation.creationRamp }} <span translate>second</span>\n          </ng-template>\n          <ng-template ngPluralCase=\"other\">\n            {{ bulkOperation.creationRamp }} <span translate>seconds</span>\n          </ng-template>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Status</label>\n        <span class=\"flex-item-right text-uppercase\">\n          {{ bulkOperation.generalStatus.toString() | translate }}\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small flex-item-top\" translate>Result</label>\n        <div class=\"flex-row flex-grow flex-item-right flex-end\">\n          <div>\n            <div *ngIf=\"bulkOperation.progress.successful > 0\" class=\"icon-flex flex-item-left m-r-8\">\n              <i c8yIcon=\"check-circle\" class=\"text-success m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{\n                  bulkOperationsCountSuccessful: bulkOperation.progress.successful\n                }\"\n              >\n                {{ bulkOperationsCountSuccessful }} successful\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left m-r-8\" *ngIf=\"bulkOperation.progress.failed > 0\">\n              <i c8yIcon=\"warning\" class=\"text-danger m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n              >\n                {{ bulkOperationsCountFailed }} failed\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left\" *ngIf=\"bulkOperation.progress.pending > 0\">\n              <i c8yIcon=\"clock-o\" class=\"m-r-4 text-info\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n              >\n                {{ bulkOperationsCountPending }} pending\n              </span>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.failedParentId\">\n        <label class=\"small m-0\" translate>Retried from</label>\n        <span class=\"flex-item-right\">\n          <button\n            class=\"btn btn-default btn-xs\"\n            (click)=\"scrollToRetriedFromOperation(bulkOperation.failedParentId)\"\n          >\n            {{ bulkOperation.failedParentId }}\n          </button>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.note\">\n        <label class=\"small flex-item-top\" translate>Description</label>\n        <div\n          title=\"{{ bulkOperation.note }}\"\n          class=\"flex-item-right text-right m-l-8 text-truncate\"\n        >\n          {{ bulkOperation.note }}\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-md-8 fit-h d-flex d-col\">\n    <div class=\"legend form-block\" translate>\n      Operation\n    </div>\n    <pre class=\"inner-scroll p-16 m-b-0 text-pre-wrap\">{{\n      bulkOperation.operationPrototype | json\n    }}</pre>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { readOnly: [{
            type: Input
        }], showFailedOperation: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }] }); })();

const SINGLE_OP_STATUS_NAMES = {
    PENDING: gettext('Pending'),
    EXECUTING: gettext('Executing'),
    FAILED: gettext('Failed'),
    SUCCESSFUL: gettext('Successful'),
    ALL: gettext('All')
};
const SINGLE_OP_STATUS_PROPERTIES = [
    {
        label: SINGLE_OP_STATUS_NAMES.PENDING,
        iconClass: 'dlt-c8y-icon-clock-o text-info',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.EXECUTING,
        iconClass: 'dlt-c8y-icon-refresh text-info',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,
        iconClass: 'dlt-c8y-icon-check-circle text-success',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.FAILED,
        iconClass: 'dlt-c8y-icon-exclamation-circle text-danger',
        selected: false
    }
];

class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.singleOperationStatusNames.ALL
                ? []
                : [{ label: typeFilter }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.singleOperationStatusNames.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.singleOperationStatusNames.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.SUCCESSFUL;
        }
        return this.singleOperationStatusNames.ALL;
    }
    getOperationsByStatus(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
}
SingleOperationsListComponent.ɵfac = function SingleOperationsListComponent_Factory(t) { return new (t || SingleOperationsListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService)); };
SingleOperationsListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SingleOperationsListComponent, selectors: [["c8y-single-operations-list"]], viewQuery: function SingleOperationsListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(StatusFilterComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.statusFilter = _t.first);
    } }, inputs: { readOnly: "readOnly", bulkOperation: "bulkOperation" }, outputs: { onRetryFailedOperations: "onRetryFailedOperations" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["translate", "", 1, "legend", "form-block", "p-t-16", "m-b-0"], [1, "d-flex", "a-i-center"], [1, "d-flex", "a-i-center", "p-b-8"], ["translate", "", 1, "m-r-4", "text-medium"], ["small", "", 3, "options", "onFilterChanged"], ["class", "m-l-auto p-b-8", 4, "ngIf"], [1, "inner-scroll"], ["class", "d-contents", 4, "c8yFor", "c8yForOf", "c8yForLoadMore"], [1, "m-l-auto", "p-b-8"], [1, "btn", "btn-navbar", 3, "title", "click"], ["c8yIcon", "repeat", 1, "m-r-4"], ["translate", ""], [1, "d-contents"], [1, "d-contents", 3, "operation", "readOnly"], [1, "c8y-empty-state", "text-center"], [1, "c8y-icon", "c8y-icon-energy", "c8y-icon-duocolor", "m-b-16"], ["translate", "", 1, "m-b-16"]], template: function SingleOperationsListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SingleOperationsListComponent_ng_container_0_Template, 13, 5, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.bulkOperation.progress.failed || ctx.bulkOperation.progress.executing || ctx.bulkOperation.progress.pending || ctx.bulkOperation.progress.successful);
    } }, directives: function () { return [ɵngcc7.NgIf, ɵngcc3.C8yTranslateDirective, ɵngcc9.StatusFilterComponent, ɵngcc3.ListGroupComponent, ɵngcc3.ForOfDirective, ɵngcc3.IconDirective, SingleOperationItemComponent, ɵngcc3.ListItemComponent, ɵngcc3.ListItemBodyComponent]; }, pipes: function () { return [ɵngcc3.C8yTranslatePipe]; }, encapsulation: 2 });
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
SingleOperationsListComponent.propDecorators = {
    bulkOperation: [{ type: Input }],
    readOnly: [{ type: Input }],
    onRetryFailedOperations: [{ type: Output }],
    statusFilter: [{ type: ViewChild, args: [StatusFilterComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationsListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block p-t-16 m-b-0\" translate>\n    Operations\n  </div>\n  <div class=\"d-flex a-i-center\">\n    <div class=\" d-flex a-i-center p-b-8\">\n      <span class=\"m-r-4 text-medium\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"singleOperationStatusProperties\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"m-l-auto p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i c8yIcon=\"repeat\" class=\"m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item [operation]=\"operation\" [readOnly]=\"readOnly\" class=\"d-contents\">\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }]; }, { readOnly: [{
            type: Input
        }], onRetryFailedOperations: [{
            type: Output
        }], bulkOperation: [{
            type: Input
        }], statusFilter: [{
            type: ViewChild,
            args: [StatusFilterComponent, { static: false }]
        }] }); })();

class SingleOperationItemComponent {
    constructor(bulkOperationsService, alertService) {
        this.bulkOperationsService = bulkOperationsService;
        this.alertService = alertService;
        this.device = {};
        this.showIfTextTruncated = false;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
        this.singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.readOnly = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.iconClass = this.getIconClass();
            this.device = yield this.getDeviceMO(this.operation.deviceId);
        });
    }
    ngAfterViewInit() {
        this.isTextTruncated();
    }
    retrySingleOperation(singleOperation) {
        return __awaiter(this, void 0, void 0, function* () {
            const operationToCreate = omit(singleOperation, [
                'id',
                'self',
                'status',
                'failureReason',
                'creationTime',
                'delivery'
            ]);
            try {
                yield this.bulkOperationsService.createSingleOperation(operationToCreate);
                this.alertService.success(gettext('Operation created.'));
            }
            catch (er) {
                this.alertService.addServerFailure(er);
            }
        });
    }
    getIconClass() {
        return this.singleOperationsStatusProperties.find(operationProperties => operationProperties.label.toUpperCase() === this.operation.status).iconClass;
    }
    getDeviceMO(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const inventoryMO = yield this.bulkOperationsService.getManagedObject(deviceId);
            if (inventoryMO) {
                return inventoryMO.data;
            }
        });
    }
    isTextTruncated() {
        if (this.operation.failureReason) {
            const el = this.failureReasonRef.nativeElement;
            this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;
        }
    }
}
SingleOperationItemComponent.ɵfac = function SingleOperationItemComponent_Factory(t) { return new (t || SingleOperationItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
SingleOperationItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SingleOperationItemComponent, selectors: [["c8y-single-operation-item"]], viewQuery: function SingleOperationItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c13, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.failureReasonRef = _t.first);
    } }, inputs: { readOnly: "readOnly", operation: "operation" }, decls: 22, vars: 18, consts: [[1, "c8y-list__item--double-actions"], [3, "ngClass"], [1, "col-4"], [1, "m-r-4"], [3, "mo"], ["routerLinkActive", "active", 3, "routerLink"], [1, "col-3"], [1, "icon-flex", "text-muted"], ["c8yIcon", "calendar", 1, "m-r-4"], [1, "col-5"], [1, "flex-row"], [1, "text-truncate"], ["failureReason", ""], ["class", "m-l-8", "placement", "left", "outsideClick", "true", 3, "popover", 4, "ngIf"], ["class", "showOnHover p-l-8 p-r-8 fit-h-20 flex-item-right", 4, "ngIf"], ["placement", "left", "outsideClick", "true", 1, "m-l-8", 3, "popover"], [3, "c8yIcon"], [1, "showOnHover", "p-l-8", "p-r-8", "fit-h-20", "flex-item-right"], [1, "btn", "btn-default", "btn-xs", 3, "title", "click"], ["translate", ""]], template: function SingleOperationItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-li", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
        ɵngcc0.ɵɵelement(2, "i");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵelement(6, "device-status", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "a", 5);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵelementStart(10, "small", 7);
        ɵngcc0.ɵɵelement(11, "i", 8);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "div", 10);
        ɵngcc0.ɵɵelementStart(16, "span", 11, 12);
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, SingleOperationItemComponent_a_20_Template, 3, 4, "a", 13);
        ɵngcc0.ɵɵtemplate(21, SingleOperationItemComponent_div_21_Template, 6, 4, "div", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMap(ctx.iconClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(13, _c14, !ctx.readOnly, ctx.readOnly));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(16, _c15, ctx.operation.deviceId));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.operation.deviceName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 9, ctx.operation.creationTime), " ");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 11, ctx.operation.failureReason), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showIfTextTruncated);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readOnly && ctx.operation.status == ctx.singleOperationStatusNames.FAILED.toUpperCase());
    } }, directives: [ɵngcc3.ListItemComponent, ɵngcc3.ListItemIconComponent, ɵngcc7.NgClass, ɵngcc3.DeviceStatusComponent, ɵngcc11.RouterLinkWithHref, ɵngcc11.RouterLinkActive, ɵngcc3.IconDirective, ɵngcc7.NgIf, ɵngcc8.PopoverDirective, ɵngcc3.C8yTranslateDirective], pipes: [ɵngcc3.DatePipe, ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
SingleOperationItemComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: AlertService }
];
SingleOperationItemComponent.propDecorators = {
    operation: [{ type: Input }],
    readOnly: [{ type: Input }],
    failureReasonRef: [{ type: ViewChild, args: ['failureReason', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SingleOperationItemComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-single-operation-item',
                template: "<c8y-li class=\"c8y-list__item--double-actions\">\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-4\">\n      <span class=\"m-r-4\">\n        <device-status [mo]=\"\"></device-status>\n      </span>\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class=\"col-5\">\n      <div class=\"flex-row\">\n        <span class=\"text-truncate\" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf=\"showIfTextTruncated\"\n          class=\"m-l-8\"\n          popover=\"{{ operation.failureReason | translate }}\"\n          placement=\"left\"\n          outsideClick=\"true\"\n        >\n          <i [c8yIcon]=\"'info-circle text-primary'\"></i>\n        </a>\n        <div\n          class=\"showOnHover p-l-8 p-r-8 fit-h-20 flex-item-right\"\n          *ngIf=\"!readOnly && operation.status == singleOperationStatusNames.FAILED.toUpperCase()\"\n        >\n          <a\n            class=\"btn btn-default btn-xs\"\n            (click)=\"retrySingleOperation(operation)\"\n            title=\"{{ 'Retry operation' | translate }}\"\n          >\n            <i [c8yIcon]=\"'repeat m-r-4'\"></i>\n            <span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BulkOperationsService }, { type: ɵngcc3.AlertService }]; }, { readOnly: [{
            type: Input
        }], operation: [{
            type: Input
        }], failureReasonRef: [{
            type: ViewChild,
            args: ['failureReason', { static: true }]
        }] }); })();

class BulkOperationTypeListComponent {
    constructor(router, bulkOperationsService, bulkOperationModalsService) {
        this.router = router;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.onCustomType = new EventEmitter();
        this.bulkList = [];
    }
    ngOnInit() {
        this.bulkList = this.bulkOperationsService.getBulkTypes();
    }
    handleClick(item) {
        if (item.path) {
            this.bulkOperationModalsService.hideNewBulkOperationModal();
            this.router.navigateByUrl(item.path);
        }
        else if (item.component) {
            this.onCustomType.emit(item);
        }
    }
}
BulkOperationTypeListComponent.ɵfac = function BulkOperationTypeListComponent_Factory(t) { return new (t || BulkOperationTypeListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc11.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(BulkOperationModalsService)); };
BulkOperationTypeListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationTypeListComponent, selectors: [["c8y-bulk-operation-type-list"]], outputs: { onCustomType: "onCustomType" }, decls: 2, vars: 1, consts: [[1, "list-group", "list-group-links"], ["type", "button", "class", "list-group-item flex-row", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "list-group-item", "flex-row", 3, "click"], ["class", "list-item-icon", 4, "ngIf", "ngIfElse"], ["icon", ""], [1, "list-item-body", "text-truncate", 3, "title"], [1, "list-item-icon"], [3, "c8yIcon"], ["c8yIcon", "cogs"]], template: function BulkOperationTypeListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BulkOperationTypeListComponent_button_1_Template, 8, 8, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.bulkList);
    } }, directives: [ɵngcc7.NgForOf, ɵngcc7.NgIf, ɵngcc3.IconDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
BulkOperationTypeListComponent.ctorParameters = () => [
    { type: Router },
    { type: BulkOperationsService },
    { type: BulkOperationModalsService }
];
BulkOperationTypeListComponent.propDecorators = {
    onCustomType: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationTypeListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-bulk-operation-type-list',
                template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc11.Router }, { type: ɵngcc1.BulkOperationsService }, { type: BulkOperationModalsService }]; }, { onCustomType: [{
            type: Output
        }] }); })();

const bulkOperationListRoutes = [
    {
        path: 'devicecontrol/bulk',
        component: BulkOperationsListComponent
    }
];
/**
 * This module allows for displaying the list of bulk operations and their details.
 */
class BulkOperationsListModule {
}
BulkOperationsListModule.ɵfac = function BulkOperationsListModule_Factory(t) { return new (t || BulkOperationsListModule)(); };
BulkOperationsListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BulkOperationsListModule });
BulkOperationsListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [BulkOperationDetailsService, BulkOperationModalsService], imports: [[
            CoreModule,
            PopoverModule,
            TooltipModule,
            StatusFilterModule,
            OperationSummaryModule,
            BulkOperationSchedulerModule,
            RouterModule.forChild(bulkOperationListRoutes)
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsListModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    PopoverModule,
                    TooltipModule,
                    StatusFilterModule,
                    OperationSummaryModule,
                    BulkOperationSchedulerModule,
                    RouterModule.forChild(bulkOperationListRoutes)
                ],
                providers: [BulkOperationDetailsService, BulkOperationModalsService],
                declarations: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ],
                entryComponents: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ],
                exports: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BulkOperationsListModule, { declarations: function () { return [BulkOperationsListComponent, BulkOperationListItemComponent, BulkOperationDetailsTabsComponent, BulkOperationDetailsComponent, SingleOperationsListComponent, SingleOperationItemComponent, BulkOperationWrapperComponent, BulkOperationTypeListComponent, BulkOperationsModalComponent, BulkOperationsRescheduleModalComponent]; }, imports: function () { return [CoreModule,
        PopoverModule,
        TooltipModule,
        StatusFilterModule,
        OperationSummaryModule,
        BulkOperationSchedulerModule, ɵngcc11.RouterModule]; }, exports: function () { return [BulkOperationsListComponent, BulkOperationListItemComponent, BulkOperationDetailsTabsComponent, BulkOperationDetailsComponent, SingleOperationsListComponent, SingleOperationItemComponent, BulkOperationWrapperComponent, BulkOperationTypeListComponent, BulkOperationsModalComponent, BulkOperationsRescheduleModalComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BulkOperationDetailsComponent, BulkOperationDetailsService, BulkOperationDetailsTabsComponent, BulkOperationListItemComponent, BulkOperationModalsService, BulkOperationTypeListComponent, BulkOperationWrapperComponent, BulkOperationsListComponent, BulkOperationsListModule, BulkOperationsModalComponent, BulkOperationsRescheduleModalComponent, SingleOperationItemComponent, SingleOperationsListComponent, bulkOperationListRoutes };

//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-list.js.map