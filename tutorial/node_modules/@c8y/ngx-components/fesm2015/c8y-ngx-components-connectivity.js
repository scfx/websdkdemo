import { Injectable, NgModule, Component, Input } from '@angular/core';
import { toObservable, NavigatorNode, gettext, HOOK_NAVIGATOR_NODES, HOOK_TABS, Status, ModalService, AlertService, CoreModule, CommonModule, FormsModule, ConditionalTabsOutletComponent, Permissions, ProviderConfigurationModule } from '@c8y/ngx-components';
import { map } from 'rxjs/operators';
import { Router, RouterModule } from '@angular/router';
import { ApplicationService, FetchClient } from '@c8y/client';
import { Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { __awaiter } from 'tslib';
import { get } from 'lodash-es';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@c8y/ngx-components';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from 'ngx-bootstrap/popover';

function ImpactProviderSettingsComponent_div_7_c8y_message_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-message", 29);
    ɵngcc0.ɵɵtext(1, " This field is required. ");
    ɵngcc0.ɵɵelementEnd();
} }
function ImpactProviderSettingsComponent_div_7_c8y_message_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-message", 29);
    ɵngcc0.ɵɵtext(1, " This field is required. ");
    ɵngcc0.ɵɵelementEnd();
} }
function ImpactProviderSettingsComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(2, "label", 20);
    ɵngcc0.ɵɵtext(3, " Base URL ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "input", 21);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(7, "label", 22);
    ɵngcc0.ɵɵtext(8, " User ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "input", 23);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementStart(11, "c8y-messages");
    ɵngcc0.ɵɵtemplate(12, ImpactProviderSettingsComponent_div_7_c8y_message_12_Template, 2, 0, "c8y-message", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(14, "label", 25);
    ɵngcc0.ɵɵtext(15, " Password ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(16, "input", 26);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementStart(18, "c8y-messages");
    ɵngcc0.ɵɵtemplate(19, ImpactProviderSettingsComponent_div_7_c8y_message_19_Template, 2, 0, "c8y-message", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(21, "label", 27);
    ɵngcc0.ɵɵtext(22, " IMPACT group name prefix ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(23, "input", 28);
    ɵngcc0.ɵɵpipe(24, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 6, "e.g. https://impact.example.com"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 8, "e.g. joe`LOCALIZE`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.formGroup == null ? null : ctx_r0.formGroup.controls == null ? null : ctx_r0.formGroup.controls.user == null ? null : ctx_r0.formGroup.controls.user.errors == null ? null : ctx_r0.formGroup.controls.user.errors.required);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(17, 10, "e.g. my_password"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.formGroup == null ? null : ctx_r0.formGroup.controls == null ? null : ctx_r0.formGroup.controls.password == null ? null : ctx_r0.formGroup.controls.password.errors == null ? null : ctx_r0.formGroup.controls.password.errors.required);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(24, 12, "e.g. Europe.Nokia`LOCALIZE`"));
} }
function ImpactProviderSettingsComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "p", 29);
    ɵngcc0.ɵɵtext(2, " Credentials already provided.");
    ɵngcc0.ɵɵelement(3, "br");
    ɵngcc0.ɵɵtext(4, " Click \"Replace credentials\" below to overwrite them. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ImpactProviderSettingsComponent_button_22_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 30);
    ɵngcc0.ɵɵlistener("click", function ImpactProviderSettingsComponent_button_22_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.replaceCredentials(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Replace credentials"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Replace credentials"), " ");
} }
function ImpactProviderSettingsComponent_button_23_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 31);
    ɵngcc0.ɵɵlistener("click", function ImpactProviderSettingsComponent_button_23_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.deleteCredentials(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Delete credentials"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Delete credentials"), " ");
} }
function ImpactProviderSettingsComponent_button_24_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 32);
    ɵngcc0.ɵɵlistener("click", function ImpactProviderSettingsComponent_button_24_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.saveCredentials(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 3, "Save credentials & connect"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.formGroup.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "Save credentials & connect"), " ");
} }
function StatusDisplayComponent__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 10);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelementStart(2, "g", 12);
    ɵngcc0.ɵɵelement(3, "path", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StatusDisplayComponent__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 14);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelementStart(2, "g", 15);
    ɵngcc0.ɵɵelement(3, "path", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StatusDisplayComponent__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 17);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelementStart(2, "g", 18);
    ɵngcc0.ɵɵelement(3, "path", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StatusDisplayComponent__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 20);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelementStart(2, "g", 21);
    ɵngcc0.ɵɵelement(3, "path", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StatusDisplayComponent__svg_svg_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 23);
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵelementStart(2, "g", 24);
    ɵngcc0.ɵɵelement(3, "path", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0, a1, a2, a3) { return { "dot-success": a0, "dot-danger": a1, "dot-info": a2, "dot-default": a3 }; };
const _c1 = function (a0) { return { "text-muted": a0 }; };
class AbstractConnectivityTabFactory {
    constructor(router, guard) {
        this.router = router;
        this.guard = guard;
    }
    get() {
        return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];
    }
    tab() {
        return toObservable(this.guard.canActivate(this.router.routerState.snapshot.root, this.router.routerState.snapshot)).pipe(map(canActivate => (canActivate ? this.config() : null)));
    }
}

class AbstractConnectivityNodeFactory {
    constructor(tabFactory) {
        this.tabFactory = tabFactory;
        this.connectivityNode = new NavigatorNode({
            parent: gettext('Settings'),
            label: gettext('Connectivity'),
            path: 'connectivitySettings',
            icon: 'plug',
            preventDuplicates: true
        });
    }
    get() {
        return toObservable(this.tabFactory.tab()).pipe(map(tab => {
            return !!tab ? [this.connectivityNode] : [];
        }));
    }
}
AbstractConnectivityNodeFactory.ɵfac = function AbstractConnectivityNodeFactory_Factory(t) { return new (t || AbstractConnectivityNodeFactory)(ɵngcc0.ɵɵinject(AbstractConnectivityTabFactory)); };
AbstractConnectivityNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AbstractConnectivityNodeFactory, factory: AbstractConnectivityNodeFactory.ɵfac });
AbstractConnectivityNodeFactory.ctorParameters = () => [
    { type: AbstractConnectivityTabFactory }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbstractConnectivityNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: AbstractConnectivityTabFactory }]; }, null); })();

class ActilityGuard {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showActilityProvider === undefined) {
            this.showActilityProvider = this.applicationService
                .isAvailable(ActilityGuard.applicationName)
                .then(result => result && result.data);
        }
        return this.showActilityProvider;
    }
}
ActilityGuard.ɵfac = function ActilityGuard_Factory(t) { return new (t || ActilityGuard)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
ActilityGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ActilityGuard, factory: ActilityGuard.ɵfac });
ActilityGuard.applicationName = 'actility';
ActilityGuard.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

class ActilityTabFactory extends AbstractConnectivityTabFactory {
    constructor(router, guard) {
        super(router, guard);
        this.router = router;
        this.guard = guard;
        this.tabConfig = {
            label: gettext('Actility LoRa provider settings'),
            path: '/connectivitySettings/actility_lora_provider_settings',
            icon: 'c8y-device'
        };
    }
    config() {
        return this.tabConfig;
    }
}
ActilityTabFactory.ɵfac = function ActilityTabFactory_Factory(t) { return new (t || ActilityTabFactory)(ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ActilityGuard)); };
ActilityTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ActilityTabFactory, factory: ActilityTabFactory.ɵfac });
ActilityTabFactory.ctorParameters = () => [
    { type: Router },
    { type: ActilityGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityTabFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.Router }, { type: ActilityGuard }]; }, null); })();

class ActilityNodeFactory extends AbstractConnectivityNodeFactory {
    constructor(tabFactory) {
        super(tabFactory);
        this.tabFactory = tabFactory;
    }
}
ActilityNodeFactory.ɵfac = function ActilityNodeFactory_Factory(t) { return new (t || ActilityNodeFactory)(ɵngcc0.ɵɵinject(ActilityTabFactory)); };
ActilityNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ActilityNodeFactory, factory: ActilityNodeFactory.ɵfac });
ActilityNodeFactory.ctorParameters = () => [
    { type: ActilityTabFactory }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: ActilityTabFactory }]; }, null); })();

class ActilityModule {
}
ActilityModule.ɵfac = function ActilityModule_Factory(t) { return new (t || ActilityModule)(); };
ActilityModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ActilityModule });
ActilityModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ActilityGuard,
        ActilityTabFactory,
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: ActilityNodeFactory,
            multi: true
        },
        {
            provide: HOOK_TABS,
            useClass: ActilityTabFactory,
            multi: true
        }
    ] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityModule, [{
        type: NgModule,
        args: [{
                providers: [
                    ActilityGuard,
                    ActilityTabFactory,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ActilityNodeFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: ActilityTabFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();

class ImpactConnectivityService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact/connectivity';
        this.header = { 'Content-Type': 'application/json' };
    }
    getOptions() {
        const options = {
            method: 'GET',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    updateOptions(impactOptions) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(impactOptions)
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    deleteOptions() {
        const options = {
            method: 'DELETE',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
}
ImpactConnectivityService.ɵfac = function ImpactConnectivityService_Factory(t) { return new (t || ImpactConnectivityService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
ImpactConnectivityService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactConnectivityService, factory: ImpactConnectivityService.ɵfac });
ImpactConnectivityService.ctorParameters = () => [
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactConnectivityService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }]; }, null); })();

class ImpactGuard {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showImpactProvider === undefined) {
            this.showImpactProvider = this.applicationService
                .isAvailable(ImpactGuard.applicationName)
                .then(result => result && result.data);
        }
        return this.showImpactProvider;
    }
}
ImpactGuard.ɵfac = function ImpactGuard_Factory(t) { return new (t || ImpactGuard)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
ImpactGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactGuard, factory: ImpactGuard.ɵfac });
ImpactGuard.applicationName = 'impact';
ImpactGuard.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

class ImpactTabFactory {
    constructor(router, guard) {
        this.router = router;
        this.guard = guard;
        this.config = {
            label: gettext('IMPACT provider settings'),
            path: '/connectivitySettings/impact_provider_settings',
            icon: 'plug'
        };
    }
    get() {
        return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];
    }
    tab() {
        return toObservable(this.guard.canActivate(this.router.routerState.snapshot.root, this.router.routerState.snapshot)).pipe(map(canActivate => (canActivate ? this.config : null)));
    }
}
ImpactTabFactory.ɵfac = function ImpactTabFactory_Factory(t) { return new (t || ImpactTabFactory)(ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ImpactGuard)); };
ImpactTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactTabFactory, factory: ImpactTabFactory.ɵfac });
ImpactTabFactory.ctorParameters = () => [
    { type: Router },
    { type: ImpactGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactTabFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.Router }, { type: ImpactGuard }]; }, null); })();

class ImpactNodeFactory {
    constructor(tabFactory) {
        this.tabFactory = tabFactory;
        this.connectivityNode = new NavigatorNode({
            parent: gettext('Settings'),
            label: gettext('Connectivity'),
            path: 'connectivitySettings',
            icon: 'plug',
            preventDuplicates: true
        });
    }
    get() {
        return toObservable(this.tabFactory.tab()).pipe(map(tab => {
            return !!tab ? [this.connectivityNode] : [];
        }));
    }
}
ImpactNodeFactory.ɵfac = function ImpactNodeFactory_Factory(t) { return new (t || ImpactNodeFactory)(ɵngcc0.ɵɵinject(ImpactTabFactory)); };
ImpactNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactNodeFactory, factory: ImpactNodeFactory.ɵfac });
ImpactNodeFactory.ctorParameters = () => [
    { type: ImpactTabFactory }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: ImpactTabFactory }]; }, null); })();

var TenantConnectionStatus;
(function (TenantConnectionStatus) {
    TenantConnectionStatus["NO_CONNECTION"] = "NO_CONNECTION";
    TenantConnectionStatus["CONNECTING_IN_PROGRESS"] = "CONNECTING_IN_PROGRESS";
    TenantConnectionStatus["CONNECTED_SUCCESSFULLY"] = "CONNECTED_SUCCESSFULLY";
    TenantConnectionStatus["CONNECTED_FAILED"] = "CONNECTED_FAILED";
    TenantConnectionStatus["UNKNOWN"] = "UNKNOWN";
})(TenantConnectionStatus || (TenantConnectionStatus = {}));

class ImpactProviderSettingsComponent {
    constructor(impactService, formBuilder, modal, alert) {
        this.impactService = impactService;
        this.formBuilder = formBuilder;
        this.modal = modal;
        this.alert = alert;
        this.isEdit = false;
        this.credentialsExist = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.initForm();
            const response = yield this.impactService.getOptions();
            this.connectionStatus = yield response.json();
            if (this.connectionStatus && this.connectionStatus.options) {
                this.formGroup.patchValue(Object.assign({}, this.connectionStatus.options));
                this.credentialsExist = true;
            }
            else {
                this.isEdit = true;
            }
        });
    }
    replaceCredentials() {
        this.isEdit = true;
    }
    saveCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.formGroup.valid) {
                this.connectionStatus.status = TenantConnectionStatus.CONNECTING_IN_PROGRESS;
                const updated = yield this.safelyUpdateCredentials(this.formGroup.value);
                if (updated) {
                    const response = yield this.impactService.getOptions();
                    this.connectionStatus = yield response.json();
                    if (this.connectionStatus.status === TenantConnectionStatus.CONNECTED_SUCCESSFULLY) {
                        this.isEdit = false;
                    }
                    this.alert.success(gettext('Credentials saved.'));
                }
                else {
                    this.connectionStatus.status = TenantConnectionStatus.UNKNOWN;
                }
            }
        });
    }
    deleteCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Delete credentials'), gettext('You are about to delete your IMPACT credentials. Deleting credentials will break connection to IMPACT instance. Do you want to proceed?'), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                yield this.safelyDeleteCredentials();
            }
            catch (ex) {
                // Intentionally empty
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            baseUrl: [],
            user: ['', Validators.required],
            password: ['', Validators.required],
            groupName: [],
            initializeDevices: [false]
        });
    }
    resetForm() {
        this.formGroup.reset();
    }
    safelyUpdateCredentials(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.impactService.updateOptions(options);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alert.addServerFailure({ data, res });
                    return Promise.resolve(false);
                }
                else {
                    return Promise.resolve(true);
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                return Promise.resolve(false);
            }
        });
    }
    safelyDeleteCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.impactService.deleteOptions();
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alert.addServerFailure({ data, res });
                }
                else {
                    this.credentialsExist = false;
                    this.resetForm();
                    this.connectionStatus = null;
                    this.alert.success(gettext('Credentials deleted.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
}
ImpactProviderSettingsComponent.ɵfac = function ImpactProviderSettingsComponent_Factory(t) { return new (t || ImpactProviderSettingsComponent)(ɵngcc0.ɵɵdirectiveInject(ImpactConnectivityService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AlertService)); };
ImpactProviderSettingsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ImpactProviderSettingsComponent, selectors: [["c8y-impact-provider-settings"]], decls: 25, vars: 14, consts: [[1, "row"], [1, "col-xs-12", "col-md-8"], ["novalidate", "", 1, "card", "card--fullpage", 3, "formGroup"], [1, "card-header", "separator"], ["translate", "", 1, "card-title"], [1, "inner-scroll"], ["class", "card-block", 4, "ngIf"], [1, "card-block", "bg-gray-white"], [1, "d-flex"], [3, "status", "baseUrl"], [1, "d-flex", "flex-item-middle", "flex-item-right"], [1, "c8y-switch"], ["type", "checkbox", "formControlName", "initializeDevices"], ["container", "body", "placement", "right", "outsideClick", "false", 1, "btn-clean", "m-l-4", "flex-item-middle", 3, "popover"], ["c8yIcon", "question-circle-o text-primary"], [1, "card-footer", "separator"], ["class", "btn btn-default", "type", "submit", 3, "title", "click", 4, "ngIf"], ["class", "btn btn-danger", "type", "button", 3, "title", "click", 4, "ngIf"], ["class", "btn btn-primary", "type", "button", 3, "title", "disabled", "click", 4, "ngIf"], [1, "card-block"], ["for", "baseUrl", "translate", ""], ["id", "baseUrl", "name", "baseUrl", "type", "text", "autocomplete", "off", "formControlName", "baseUrl", 1, "form-control", 3, "placeholder"], ["for", "user", "translate", ""], ["id", "user", "name", "user", "type", "text", "required", "", "autocomplete", "off", "formControlName", "user", 1, "form-control", 3, "placeholder"], ["translate", "", 4, "ngIf"], ["for", "password", "translate", ""], ["id", "password", "name", "password", "type", "password", "required", "", "autocomplete", "off", "formControlName", "password", 1, "form-control", 3, "placeholder"], ["for", "groupName", "translate", ""], ["id", "groupName", "name", "groupName", "type", "text", "formControlName", "groupName", 1, "form-control", 3, "placeholder"], ["translate", ""], ["type", "submit", 1, "btn", "btn-default", 3, "title", "click"], ["type", "button", 1, "btn", "btn-danger", 3, "title", "click"], ["type", "button", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function ImpactProviderSettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "form", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "h4", 4);
        ɵngcc0.ɵɵtext(5, "Credentials");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵtemplate(7, ImpactProviderSettingsComponent_div_7_Template, 25, 14, "div", 6);
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵelement(10, "c8y-status-display", 9);
        ɵngcc0.ɵɵelementStart(11, "div", 10);
        ɵngcc0.ɵɵelementStart(12, "label", 11);
        ɵngcc0.ɵɵelement(13, "input", 12);
        ɵngcc0.ɵɵelement(14, "span");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "a", 13);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelement(19, "i", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, ImpactProviderSettingsComponent_div_20_Template, 5, 0, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 15);
        ɵngcc0.ɵɵtemplate(22, ImpactProviderSettingsComponent_button_22_Template, 4, 6, "button", 16);
        ɵngcc0.ɵɵtemplate(23, ImpactProviderSettingsComponent_button_23_Template, 4, 6, "button", 17);
        ɵngcc0.ɵɵtemplate(24, ImpactProviderSettingsComponent_button_24_Template, 4, 7, "button", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.formGroup);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEdit);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("status", ctx.connectionStatus == null ? null : ctx.connectionStatus.status)("baseUrl", ctx.connectionStatus == null ? null : ctx.connectionStatus.options == null ? null : ctx.connectionStatus.options.baseUrl);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "Refresh devices"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(18, 12, "Refresh device resources as part of connecting"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.credentialsExist && !ctx.isEdit);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isEdit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.credentialsExist && ctx.isEdit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEdit);
    } }, directives: function () { return [ɵngcc3.ɵNgNoValidate, ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.C8yTranslateDirective, ɵngcc5.NgIf, StatusDisplayComponent, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc6.PopoverDirective, ɵngcc4.IconDirective, ɵngcc4.FormGroupComponent, ɵngcc3.DefaultValueAccessor, ɵngcc4.RequiredInputPlaceholderDirective, ɵngcc3.RequiredValidator, ɵngcc4.MessagesComponent, ɵngcc4.MessageDirective]; }, pipes: function () { return [ɵngcc4.C8yTranslatePipe]; }, encapsulation: 2 });
ImpactProviderSettingsComponent.ctorParameters = () => [
    { type: ImpactConnectivityService },
    { type: FormBuilder },
    { type: ModalService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactProviderSettingsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-impact-provider-settings',
                template: "<div class=\"row\">\n  <div class=\"col-xs-12 col-md-8\">\n    <form class=\"card card--fullpage\"\n      [formGroup]=\"formGroup\"\n      novalidate\n    >\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Credentials</h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\" *ngIf=\"isEdit\">\n          <c8y-form-group>\n            <label for=\"baseUrl\" translate>\n              Base URL\n            </label>\n            <input\n              id=\"baseUrl\"\n              name=\"baseUrl\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. https://impact.example.com' | translate }}\"\n              autocomplete=\"off\"\n              formControlName=\"baseUrl\"\n            />\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"user\" translate>\n              User\n            </label>\n            <input\n              id=\"user\"\n              name=\"user\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n              required\n              autocomplete=\"off\"\n              formControlName=\"user\"\n            />\n            <c8y-messages>\n              <c8y-message *ngIf=\"formGroup?.controls?.user?.errors?.required\" translate>\n                This field is required.\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"password\" translate>\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. my_password' | translate }}\"\n              required\n              autocomplete=\"off\"\n              formControlName=\"password\"\n            />\n            <c8y-messages>\n              <c8y-message *ngIf=\"formGroup?.controls?.password?.errors?.required\" translate>\n                This field is required.\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <c8y-form-group>\n            <label for=\"groupName\" translate>\n              IMPACT group name prefix\n            </label>\n            <input\n              id=\"groupName\"\n              name=\"groupName\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g. Europe.Nokia`LOCALIZE`' | translate }}\"\n              formControlName=\"groupName\"\n            />\n          </c8y-form-group>\n        </div>\n        <div class=\"card-block bg-gray-white\">\n          <div class=\"d-flex\">\n            <c8y-status-display\n              [status]=\"connectionStatus?.status\"\n              [baseUrl]=\"connectionStatus?.options?.baseUrl\"\n            ></c8y-status-display>\n\n            <div class=\"d-flex flex-item-middle flex-item-right\">\n              <label class=\"c8y-switch\">\n                <input type=\"checkbox\" formControlName=\"initializeDevices\" />\n                <span></span> {{ 'Refresh devices' | translate }}\n              </label>\n              <a\n                container=\"body\"\n                class=\"btn-clean m-l-4 flex-item-middle\"\n                popover=\"{{ 'Refresh device resources as part of connecting' | translate }}\"\n                placement=\"right\"\n                outsideClick=\"false\"\n              >\n                <i c8yIcon=\"question-circle-o text-primary\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-block\" *ngIf=\"credentialsExist && !isEdit\">\n          <p translate>\n            Credentials already provided.<br />\n            Click \"Replace credentials\" below to overwrite them.\n          </p>\n        </div>\n      </div>\n      <div class=\"card-footer separator\">\n        <button class=\"btn btn-default\"\n          title=\"{{ 'Replace credentials' | translate }}\"\n          type=\"submit\"\n          *ngIf=\"!isEdit\"\n          (click)=\"replaceCredentials()\"\n        >\n          {{ 'Replace credentials' | translate }}\n        </button>\n        <button class=\"btn btn-danger\"\n          title=\"{{ 'Delete credentials' | translate }}\"\n          type=\"button\"\n          *ngIf=\"credentialsExist && isEdit\"\n          (click)=\"deleteCredentials()\"\n        >\n          {{ 'Delete credentials' | translate }}\n        </button>\n        <button class=\"btn btn-primary\"\n          title=\"{{ 'Save credentials & connect' | translate }}\"\n          type=\"button\"\n          *ngIf=\"isEdit\"\n          [disabled]=\"formGroup.invalid\"\n          (click)=\"saveCredentials()\"\n        >\n          {{ 'Save credentials & connect' | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ImpactConnectivityService }, { type: ɵngcc3.FormBuilder }, { type: ɵngcc4.ModalService }, { type: ɵngcc4.AlertService }]; }, null); })();

class StatusDisplayComponent {
    set status(status) {
        switch (status) {
            case TenantConnectionStatus.CONNECTED_SUCCESSFULLY:
                this.icon = 'success';
                this.statusName = gettext('Connected successfully');
                break;
            case TenantConnectionStatus.CONNECTED_FAILED:
                this.icon = 'failed';
                this.statusName = gettext('Connection failed');
                break;
            case TenantConnectionStatus.CONNECTING_IN_PROGRESS:
                this.icon = 'connecting';
                this.statusName = gettext('Connection in progress');
                break;
            case TenantConnectionStatus.NO_CONNECTION:
                this.icon = 'no-connection';
                this.statusName = gettext('No connection');
                break;
            default:
                this.icon = 'unknown';
                this.statusName = gettext('Unknown`connection status`');
        }
    }
}
StatusDisplayComponent.ɵfac = function StatusDisplayComponent_Factory(t) { return new (t || StatusDisplayComponent)(); };
StatusDisplayComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StatusDisplayComponent, selectors: [["c8y-status-display"]], inputs: { status: "status", baseUrl: "baseUrl" }, decls: 16, vars: 18, consts: [[1, "d-flex"], [1, "dot", "dot-64", "p-16", 3, "ngClass"], ["viewBox", "0 0 17 23", 4, "ngIf"], ["viewBox", "0 0 32 32", 4, "ngIf"], ["viewBox", "0 0 29 32", "class", "icon-spin", 4, "ngIf"], ["viewBox", "0 0 28 27", 4, "ngIf"], ["viewBox", "0 0 31 31", 4, "ngIf"], [1, "flex-item-middle", "m-l-16"], ["translate", "", 1, "text-label-small"], [1, "m-t-4", "m-b-8", 3, "ngClass"], ["viewBox", "0 0 17 23"], ["id", "Page-1", "stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"], ["id", "Artboard", "transform", "translate(-24.000000, -20.000000)", "fill", "currentColor", "fill-rule", "nonzero"], ["d", "M34.4437635,36.1999921 C34.8390765,36.1999921 35.1312643,35.7531166 35.1312643,35.3749911 C35.1312643,34.8765531 35.7672026,33.6906141 36.7812663,33.1062384 C38.4140808,32.1952999 40.6312709,30.9406109 40.6312709,27.674982 C40.6312709,23.7390398 36.506266,20.7999738 32.8281366,20.7999738 C29.3218824,20.7999738 26.7093793,22.2952881 24.8531271,25.3718542 C24.6640644,25.6812296 24.7328144,26.059355 25.0250023,26.2827928 L27.8437557,28.4312329 C27.9812558,28.5171705 28.118756,28.568733 28.2734437,28.568733 C28.4625064,28.568733 28.6687566,28.4656079 28.8062568,28.2937327 C29.8203205,27.0218562 30.232821,26.6093557 30.6453215,26.3171679 C31.0234469,26.059355 31.7281353,25.8187298 32.5015737,25.8187298 C33.8937629,25.8187298 35.1484519,26.6781058 35.1484519,27.6406069 C35.1484519,28.7406082 34.5984512,29.3077964 33.2750121,29.9093596 C31.7625103,30.5968605 29.7000079,32.3843626 29.7000079,34.4640526 L29.7000079,35.237491 C29.7000079,35.6156164 29.9406332,36.1999921 30.3187586,36.1999921 L34.4437635,36.1999921 Z M34.5125136,42.7999934 C34.8906391,42.7999934 35.2000079,42.4906246 35.2000079,42.1124992 L35.2000079,37.9874943 C35.2000079,37.6093688 34.8906391,37.2999934 34.5125136,37.2999934 L30.3875087,37.2999934 C30.0093832,37.2999934 29.7000079,37.6093688 29.7000079,37.9874943 L29.7000079,42.1124992 C29.7000079,42.4906246 30.0093832,42.7999934 30.3875087,42.7999934 L34.5125136,42.7999934 Z", "id", "\uF128"], ["viewBox", "0 0 32 32"], ["id", "Artboard-Copy", "transform", "translate(-16.000000, -16.000000)", "fill", "currentColor", "fill-rule", "nonzero"], ["d", "M36.090359,41.560381 L32.5058901,45.1435604 C28.9330257,48.7177143 23.134696,48.7177143 19.5592528,45.1435604 C15.9850989,41.5681172 15.9863883,35.7710769 19.5592528,32.1969231 L23.1424323,28.6137436 L25.8772015,31.3485128 L22.294022,34.9316923 C20.2335971,36.9921172 20.2335971,40.3470769 22.294022,42.4062125 C24.3570257,44.4692161 27.710696,44.4692161 29.7711209,42.4062125 L33.3543004,38.8256117 L36.090359,41.560381 L36.090359,41.560381 Z M32.1964396,19.5597363 L28.6132601,23.1429158 L31.3480293,25.877685 L34.9324982,22.2945055 C36.9929231,20.2340806 40.3465934,20.2340806 42.4044396,22.2957949 C44.470022,24.3562198 44.470022,27.7098901 42.4095971,29.770315 L38.8264176,33.3534945 L41.5611868,36.0882637 L45.1443663,32.5063736 C48.7172308,28.9309304 48.7172308,23.1338901 45.1443663,19.5597363 C41.5676337,15.9855824 35.7705934,15.9855824 32.1964396,19.5597363 Z M24.5310916,18.5346813 L26.3877949,18.2716484 L26.9525421,22.2467985 L25.0984176,22.5111209 L24.5310916,18.5346813 L24.5310916,18.5346813 Z M18.2711649,26.386989 L18.5367766,24.5289963 L22.5132161,25.0963223 L22.2476044,26.9530256 L18.2711649,26.386989 Z M24.4511502,23.1364689 L23.1256704,24.4645275 L20.2825934,21.6240293 L21.6093627,20.2972601 L24.4511502,23.1364689 L24.4511502,23.1364689 Z M40.1699487,46.1647473 L38.3119561,46.4277802 L37.7472088,42.45263 L39.6026227,42.1883077 L40.1699487,46.1647473 L40.1699487,46.1647473 Z M46.4311649,38.3124396 L46.1642638,40.1704322 L42.1878242,39.6043956 L42.4547253,37.7464029 L46.4311649,38.3124396 Z M40.2511795,41.5616703 L41.57537,40.2349011 L44.4184469,43.0766886 L43.0916777,44.4034579 L40.2511795,41.5616703 Z", "id", "Shape-Copy-2"], ["viewBox", "0 0 29 32", 1, "icon-spin"], ["id", "Artboard-Copy-2", "transform", "translate(-17.000000, -16.000000)", "fill", "currentColor", "fill-rule", "nonzero"], ["d", "M39.7170667,23.98025 L41.3802667,22.0206 C42.31325,22.9163667 43.1179,23.9391833 43.7788167,25.0608167 L41.4996167,26.2556 C40.9991167,25.424 40.4049333,24.6565667 39.7170667,23.98025 Z M44.6502,26.7766333 L42.3568833,27.9791167 C42.6841333,28.8094333 42.9151333,29.68595 43.0409,30.5958333 L45.6345167,30.5958333 C45.4843667,29.2573167 45.1494167,27.9752667 44.6502,26.7766333 L44.6502,26.7766333 Z M25.6440333,22.3363 C27.3868,21.2711333 29.4273,20.65 31.6166667,20.65 C34.0793833,20.65 36.3585833,21.4302667 38.2348167,22.7495333 L39.9005833,20.7873167 C37.5726167,19.0946 34.7159167,18.0833333 31.6166667,18.0833333 C28.8818833,18.0833333 26.3473,18.8841333 24.18745,20.23035 L21.8132833,16.8 L19.05155,25.7833333 L28.0271833,25.7833333 L25.6440333,22.3363 L25.6440333,22.3363 Z M43.1512667,32.5208333 C43.1166167,33.7554 42.8869,34.9399167 42.4916333,36.05 L45.1879167,36.05 C45.5074667,34.9232333 45.7025333,33.7425667 45.7333333,32.5208333 L43.1512667,32.5208333 Z M23.5162667,40.41975 L21.85435,42.3794 C20.9213667,41.4836333 20.1154333,40.4608167 19.4558,39.3391833 L21.7337167,38.1444 C22.2342167,38.976 22.8284,39.7434333 23.5162667,40.41975 L23.5162667,40.41975 Z M18.5831333,37.6233667 L20.87645,36.4208833 C20.5504833,35.5905667 20.3194833,34.71405 20.1924333,33.8041667 L17.5975333,33.8041667 C17.75025,35.1426833 18.0839167,36.4247333 18.5831333,37.6233667 Z M37.5893,42.0637 C35.8478167,43.1288667 33.8073167,43.75 31.6166667,43.75 C29.1552333,43.75 26.87475,42.9697333 24.9998,41.6504667 L23.33275,43.6126833 C25.6607167,45.3054 28.5187,46.3166667 31.6166667,46.3166667 C34.35145,46.3166667 36.8873167,45.5158667 39.0458833,44.16965 L41.42005,47.6 L44.1817833,38.6166667 L35.20615,38.6166667 L37.5893,42.0637 L37.5893,42.0637 Z M20.0820667,31.8791667 C20.1167167,30.6446 20.3477167,29.4600833 20.7404167,28.35 L18.0454167,28.35 C17.7258667,29.4767667 17.5295167,30.6574333 17.5,31.8791667 L20.0820667,31.8791667 Z", "id", "Shape", "transform", "translate(31.616667, 32.200000) scale(-1, 1) translate(-31.616667, -32.200000) "], ["viewBox", "0 0 28 27"], ["id", "Artboard-Copy-3", "transform", "translate(-18.000000, -18.000000)", "fill", "currentColor", "fill-rule", "nonzero"], ["d", "M32.1000157,45.0000026 C39.3875244,45.0000026 45.3000315,39.0874956 45.3000315,31.7999869 C45.3000315,24.5124782 39.3875244,18.5999712 32.1000157,18.5999712 C24.812507,18.5999712 18.9,24.5124782 18.9,31.7999869 C18.9,39.0874956 24.812507,45.0000026 32.1000157,45.0000026 Z M33.6812676,34.5499902 L30.5015763,34.5499902 C30.1750134,34.5499902 29.9172006,34.3609274 29.9172006,34.1203022 L29.6250128,23.4468519 C29.6250128,23.3265393 29.6765753,23.2062266 29.796888,23.1374766 C29.9000131,23.051539 30.0547008,22.9999764 30.2093885,22.9999764 L33.990643,22.9999764 C34.1453307,22.9999764 34.3000184,23.051539 34.4031435,23.1374766 C34.5234561,23.2062266 34.5750187,23.3265393 34.5750187,23.4468519 L34.2656433,34.1203022 C34.2484558,34.3609274 33.990643,34.5499902 33.6812676,34.5499902 Z M33.7672052,40.5999974 L30.4672013,40.5999974 C30.1578259,40.5999974 29.9000131,40.3421846 29.9000131,40.0328092 L29.9000131,36.7671803 C29.9000131,36.4578049 30.1578259,36.1999921 30.4672013,36.1999921 L33.7672052,36.1999921 C34.0593931,36.1999921 34.3000184,36.4578049 34.3000184,36.7671803 L34.3000184,40.0328092 C34.3000184,40.3421846 34.0593931,40.5999974 33.7672052,40.5999974 Z", "id", "\uF06A"], ["viewBox", "0 0 31 31"], ["id", "Artboard-Copy-4", "transform", "translate(-17.000000, -17.000000)", "fill", "currentColor", "fill-rule", "nonzero"], ["d", "M24.9403042,28.1887417 C25.5036875,27.6253583 26.1286708,27.1607917 26.7934375,26.7937583 C30.4984208,24.751975 35.2493208,25.837675 37.6311875,29.448975 L34.7488208,32.3300583 C33.9223542,30.4448417 31.8703042,29.371975 29.8285208,29.8288417 C29.0598042,30.0008083 28.3295875,30.384525 27.7328375,30.981275 L22.2093708,36.5073083 C20.5320542,38.184625 20.5320542,40.9129917 22.2093708,42.5903083 C23.8866875,44.267625 26.6150542,44.267625 28.2923708,42.5903083 L29.9953542,40.887325 C31.5443375,41.5020417 33.2049708,41.7471583 34.8450708,41.6252417 L31.0861875,45.384125 C27.8637375,48.606575 22.6392875,48.606575 19.4168375,45.384125 C16.1943875,42.161675 16.1943875,36.937225 19.4168375,33.714775 L24.9403042,28.1887417 Z M33.7131708,19.415875 L29.9542875,23.1747583 C31.5931042,23.0515583 33.2550208,23.2979583 34.8040042,23.9113917 L36.5057042,22.2096917 C38.1830208,20.532375 40.9113875,20.532375 42.5887042,22.2096917 C44.2660208,23.8870083 44.2660208,26.615375 42.5887042,28.2926917 L37.0639542,33.8174417 C35.3815042,35.4998917 32.6492875,35.485775 30.9809542,33.8174417 C30.5921042,33.4285917 30.2571542,32.944775 30.0479708,32.4686583 L27.1656042,35.3497417 C27.4684708,35.809175 27.7828875,36.205725 28.1871375,36.609975 C29.2292042,37.6520417 30.5561708,38.4284583 32.0833375,38.796775 C34.0622375,39.2728917 36.1823042,39.0098083 38.0033542,38.0049583 C38.6681208,37.637925 39.2931042,37.1733583 39.8564875,36.609975 L45.3799542,31.085225 C48.6036875,27.862775 48.6036875,22.638325 45.3812375,19.415875 C42.1587875,16.1947083 36.9356208,16.1947083 33.7131708,19.415875 Z", "id", "Shape-Copy"]], template: function StatusDisplayComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, StatusDisplayComponent__svg_svg_2_Template, 4, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(3, StatusDisplayComponent__svg_svg_3_Template, 4, 0, "svg", 3);
        ɵngcc0.ɵɵtemplate(4, StatusDisplayComponent__svg_svg_4_Template, 4, 0, "svg", 4);
        ɵngcc0.ɵɵtemplate(5, StatusDisplayComponent__svg_svg_5_Template, 4, 0, "svg", 5);
        ɵngcc0.ɵɵtemplate(6, StatusDisplayComponent__svg_svg_6_Template, 4, 0, "svg", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 7);
        ɵngcc0.ɵɵelementStart(8, "p", 8);
        ɵngcc0.ɵɵtext(9, "Connection status");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "h4", 9);
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "p");
        ɵngcc0.ɵɵelementStart(14, "strong");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(11, _c0, ctx.icon === "success", ctx.icon === "failed", ctx.icon === "connecting", ctx.icon === "no-connection" || ctx.icon === "unknown"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon === "unknown");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon === "no-connection");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon === "connecting");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon === "failed");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon === "success");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(16, _c1, ctx.icon === "unknown"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 9, ctx.statusName));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.baseUrl);
    } }, directives: [ɵngcc5.NgClass, ɵngcc5.NgIf, ɵngcc4.C8yTranslateDirective], pipes: [ɵngcc4.C8yTranslatePipe], encapsulation: 2 });
StatusDisplayComponent.propDecorators = {
    baseUrl: [{ type: Input }],
    status: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusDisplayComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-status-display',
                template: "<div class=\"d-flex\">\n  <div class=\"dot dot-64 p-16\"\n    [ngClass]=\"{\n      'dot-success': icon === 'success',\n      'dot-danger': icon === 'failed',\n      'dot-info': icon === 'connecting',\n      'dot-default': icon === 'no-connection' || icon === 'unknown'\n    }\"\n  >\n    <!-- unknown-->\n    <svg viewBox=\"0 0 17 23\" *ngIf=\"icon === 'unknown'\">\n        <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g id=\"Artboard\" transform=\"translate(-24.000000, -20.000000)\" fill=\"currentColor\" fill-rule=\"nonzero\">\n                <path d=\"M34.4437635,36.1999921 C34.8390765,36.1999921 35.1312643,35.7531166 35.1312643,35.3749911 C35.1312643,34.8765531 35.7672026,33.6906141 36.7812663,33.1062384 C38.4140808,32.1952999 40.6312709,30.9406109 40.6312709,27.674982 C40.6312709,23.7390398 36.506266,20.7999738 32.8281366,20.7999738 C29.3218824,20.7999738 26.7093793,22.2952881 24.8531271,25.3718542 C24.6640644,25.6812296 24.7328144,26.059355 25.0250023,26.2827928 L27.8437557,28.4312329 C27.9812558,28.5171705 28.118756,28.568733 28.2734437,28.568733 C28.4625064,28.568733 28.6687566,28.4656079 28.8062568,28.2937327 C29.8203205,27.0218562 30.232821,26.6093557 30.6453215,26.3171679 C31.0234469,26.059355 31.7281353,25.8187298 32.5015737,25.8187298 C33.8937629,25.8187298 35.1484519,26.6781058 35.1484519,27.6406069 C35.1484519,28.7406082 34.5984512,29.3077964 33.2750121,29.9093596 C31.7625103,30.5968605 29.7000079,32.3843626 29.7000079,34.4640526 L29.7000079,35.237491 C29.7000079,35.6156164 29.9406332,36.1999921 30.3187586,36.1999921 L34.4437635,36.1999921 Z M34.5125136,42.7999934 C34.8906391,42.7999934 35.2000079,42.4906246 35.2000079,42.1124992 L35.2000079,37.9874943 C35.2000079,37.6093688 34.8906391,37.2999934 34.5125136,37.2999934 L30.3875087,37.2999934 C30.0093832,37.2999934 29.7000079,37.6093688 29.7000079,37.9874943 L29.7000079,42.1124992 C29.7000079,42.4906246 30.0093832,42.7999934 30.3875087,42.7999934 L34.5125136,42.7999934 Z\" id=\"\uF128\"></path>\n            </g>\n        </g>\n    </svg>\n    <!-- no connection -->\n    <svg viewBox=\"0 0 32 32\" *ngIf=\"icon === 'no-connection'\">\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g id=\"Artboard-Copy\" transform=\"translate(-16.000000, -16.000000)\" fill=\"currentColor\" fill-rule=\"nonzero\">\n              <path d=\"M36.090359,41.560381 L32.5058901,45.1435604 C28.9330257,48.7177143 23.134696,48.7177143 19.5592528,45.1435604 C15.9850989,41.5681172 15.9863883,35.7710769 19.5592528,32.1969231 L23.1424323,28.6137436 L25.8772015,31.3485128 L22.294022,34.9316923 C20.2335971,36.9921172 20.2335971,40.3470769 22.294022,42.4062125 C24.3570257,44.4692161 27.710696,44.4692161 29.7711209,42.4062125 L33.3543004,38.8256117 L36.090359,41.560381 L36.090359,41.560381 Z M32.1964396,19.5597363 L28.6132601,23.1429158 L31.3480293,25.877685 L34.9324982,22.2945055 C36.9929231,20.2340806 40.3465934,20.2340806 42.4044396,22.2957949 C44.470022,24.3562198 44.470022,27.7098901 42.4095971,29.770315 L38.8264176,33.3534945 L41.5611868,36.0882637 L45.1443663,32.5063736 C48.7172308,28.9309304 48.7172308,23.1338901 45.1443663,19.5597363 C41.5676337,15.9855824 35.7705934,15.9855824 32.1964396,19.5597363 Z M24.5310916,18.5346813 L26.3877949,18.2716484 L26.9525421,22.2467985 L25.0984176,22.5111209 L24.5310916,18.5346813 L24.5310916,18.5346813 Z M18.2711649,26.386989 L18.5367766,24.5289963 L22.5132161,25.0963223 L22.2476044,26.9530256 L18.2711649,26.386989 Z M24.4511502,23.1364689 L23.1256704,24.4645275 L20.2825934,21.6240293 L21.6093627,20.2972601 L24.4511502,23.1364689 L24.4511502,23.1364689 Z M40.1699487,46.1647473 L38.3119561,46.4277802 L37.7472088,42.45263 L39.6026227,42.1883077 L40.1699487,46.1647473 L40.1699487,46.1647473 Z M46.4311649,38.3124396 L46.1642638,40.1704322 L42.1878242,39.6043956 L42.4547253,37.7464029 L46.4311649,38.3124396 Z M40.2511795,41.5616703 L41.57537,40.2349011 L44.4184469,43.0766886 L43.0916777,44.4034579 L40.2511795,41.5616703 Z\" id=\"Shape-Copy-2\"></path>\n          </g>\n      </g>\n  </svg>\n    <!-- Connecting -->\n    <svg viewBox=\"0 0 29 32\" class=\"icon-spin\" *ngIf=\"icon === 'connecting'\">\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Artboard-Copy-2\" transform=\"translate(-17.000000, -16.000000)\" fill=\"currentColor\" fill-rule=\"nonzero\">\n          <path d=\"M39.7170667,23.98025 L41.3802667,22.0206 C42.31325,22.9163667 43.1179,23.9391833 43.7788167,25.0608167 L41.4996167,26.2556 C40.9991167,25.424 40.4049333,24.6565667 39.7170667,23.98025 Z M44.6502,26.7766333 L42.3568833,27.9791167 C42.6841333,28.8094333 42.9151333,29.68595 43.0409,30.5958333 L45.6345167,30.5958333 C45.4843667,29.2573167 45.1494167,27.9752667 44.6502,26.7766333 L44.6502,26.7766333 Z M25.6440333,22.3363 C27.3868,21.2711333 29.4273,20.65 31.6166667,20.65 C34.0793833,20.65 36.3585833,21.4302667 38.2348167,22.7495333 L39.9005833,20.7873167 C37.5726167,19.0946 34.7159167,18.0833333 31.6166667,18.0833333 C28.8818833,18.0833333 26.3473,18.8841333 24.18745,20.23035 L21.8132833,16.8 L19.05155,25.7833333 L28.0271833,25.7833333 L25.6440333,22.3363 L25.6440333,22.3363 Z M43.1512667,32.5208333 C43.1166167,33.7554 42.8869,34.9399167 42.4916333,36.05 L45.1879167,36.05 C45.5074667,34.9232333 45.7025333,33.7425667 45.7333333,32.5208333 L43.1512667,32.5208333 Z M23.5162667,40.41975 L21.85435,42.3794 C20.9213667,41.4836333 20.1154333,40.4608167 19.4558,39.3391833 L21.7337167,38.1444 C22.2342167,38.976 22.8284,39.7434333 23.5162667,40.41975 L23.5162667,40.41975 Z M18.5831333,37.6233667 L20.87645,36.4208833 C20.5504833,35.5905667 20.3194833,34.71405 20.1924333,33.8041667 L17.5975333,33.8041667 C17.75025,35.1426833 18.0839167,36.4247333 18.5831333,37.6233667 Z M37.5893,42.0637 C35.8478167,43.1288667 33.8073167,43.75 31.6166667,43.75 C29.1552333,43.75 26.87475,42.9697333 24.9998,41.6504667 L23.33275,43.6126833 C25.6607167,45.3054 28.5187,46.3166667 31.6166667,46.3166667 C34.35145,46.3166667 36.8873167,45.5158667 39.0458833,44.16965 L41.42005,47.6 L44.1817833,38.6166667 L35.20615,38.6166667 L37.5893,42.0637 L37.5893,42.0637 Z M20.0820667,31.8791667 C20.1167167,30.6446 20.3477167,29.4600833 20.7404167,28.35 L18.0454167,28.35 C17.7258667,29.4767667 17.5295167,30.6574333 17.5,31.8791667 L20.0820667,31.8791667 Z\" id=\"Shape\" transform=\"translate(31.616667, 32.200000) scale(-1, 1) translate(-31.616667, -32.200000) \"></path>\n        </g>\n      </g>\n    </svg>\n    <!-- Failed -->\n    <svg viewBox=\"0 0 28 27\" *ngIf=\"icon === 'failed'\">\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Artboard-Copy-3\" transform=\"translate(-18.000000, -18.000000)\" fill=\"currentColor\" fill-rule=\"nonzero\">\n          <path d=\"M32.1000157,45.0000026 C39.3875244,45.0000026 45.3000315,39.0874956 45.3000315,31.7999869 C45.3000315,24.5124782 39.3875244,18.5999712 32.1000157,18.5999712 C24.812507,18.5999712 18.9,24.5124782 18.9,31.7999869 C18.9,39.0874956 24.812507,45.0000026 32.1000157,45.0000026 Z M33.6812676,34.5499902 L30.5015763,34.5499902 C30.1750134,34.5499902 29.9172006,34.3609274 29.9172006,34.1203022 L29.6250128,23.4468519 C29.6250128,23.3265393 29.6765753,23.2062266 29.796888,23.1374766 C29.9000131,23.051539 30.0547008,22.9999764 30.2093885,22.9999764 L33.990643,22.9999764 C34.1453307,22.9999764 34.3000184,23.051539 34.4031435,23.1374766 C34.5234561,23.2062266 34.5750187,23.3265393 34.5750187,23.4468519 L34.2656433,34.1203022 C34.2484558,34.3609274 33.990643,34.5499902 33.6812676,34.5499902 Z M33.7672052,40.5999974 L30.4672013,40.5999974 C30.1578259,40.5999974 29.9000131,40.3421846 29.9000131,40.0328092 L29.9000131,36.7671803 C29.9000131,36.4578049 30.1578259,36.1999921 30.4672013,36.1999921 L33.7672052,36.1999921 C34.0593931,36.1999921 34.3000184,36.4578049 34.3000184,36.7671803 L34.3000184,40.0328092 C34.3000184,40.3421846 34.0593931,40.5999974 33.7672052,40.5999974 Z\" id=\"\uF06A\"></path>\n        </g>\n      </g>\n    </svg>\n    <!-- Success -->\n    <svg viewBox=\"0 0 31 31\" *ngIf=\"icon === 'success'\">\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Artboard-Copy-4\" transform=\"translate(-17.000000, -17.000000)\" fill=\"currentColor\" fill-rule=\"nonzero\">\n          <path d=\"M24.9403042,28.1887417 C25.5036875,27.6253583 26.1286708,27.1607917 26.7934375,26.7937583 C30.4984208,24.751975 35.2493208,25.837675 37.6311875,29.448975 L34.7488208,32.3300583 C33.9223542,30.4448417 31.8703042,29.371975 29.8285208,29.8288417 C29.0598042,30.0008083 28.3295875,30.384525 27.7328375,30.981275 L22.2093708,36.5073083 C20.5320542,38.184625 20.5320542,40.9129917 22.2093708,42.5903083 C23.8866875,44.267625 26.6150542,44.267625 28.2923708,42.5903083 L29.9953542,40.887325 C31.5443375,41.5020417 33.2049708,41.7471583 34.8450708,41.6252417 L31.0861875,45.384125 C27.8637375,48.606575 22.6392875,48.606575 19.4168375,45.384125 C16.1943875,42.161675 16.1943875,36.937225 19.4168375,33.714775 L24.9403042,28.1887417 Z M33.7131708,19.415875 L29.9542875,23.1747583 C31.5931042,23.0515583 33.2550208,23.2979583 34.8040042,23.9113917 L36.5057042,22.2096917 C38.1830208,20.532375 40.9113875,20.532375 42.5887042,22.2096917 C44.2660208,23.8870083 44.2660208,26.615375 42.5887042,28.2926917 L37.0639542,33.8174417 C35.3815042,35.4998917 32.6492875,35.485775 30.9809542,33.8174417 C30.5921042,33.4285917 30.2571542,32.944775 30.0479708,32.4686583 L27.1656042,35.3497417 C27.4684708,35.809175 27.7828875,36.205725 28.1871375,36.609975 C29.2292042,37.6520417 30.5561708,38.4284583 32.0833375,38.796775 C34.0622375,39.2728917 36.1823042,39.0098083 38.0033542,38.0049583 C38.6681208,37.637925 39.2931042,37.1733583 39.8564875,36.609975 L45.3799542,31.085225 C48.6036875,27.862775 48.6036875,22.638325 45.3812375,19.415875 C42.1587875,16.1947083 36.9356208,16.1947083 33.7131708,19.415875 Z\" id=\"Shape-Copy\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n  <div class=\"flex-item-middle m-l-16\">\n    <p class=\"text-label-small\" translate>Connection status</p>\n    <h4 class=\"m-t-4 m-b-8\" [ngClass]=\"{ 'text-muted': icon === 'unknown' }\">{{ statusName | translate }}</h4>\n    <p><strong>{{ baseUrl }}</strong></p>\n  </div>\n</div>\n"
            }]
    }], null, { status: [{
            type: Input
        }], baseUrl: [{
            type: Input
        }] }); })();

const impactRoutes = [
    {
        path: 'connectivitySettings/impact_provider_settings',
        component: ImpactProviderSettingsComponent,
        canActivate: [ImpactGuard]
    }
];
class ImpactModule {
}
ImpactModule.ɵfac = function ImpactModule_Factory(t) { return new (t || ImpactModule)(); };
ImpactModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ImpactModule });
ImpactModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ImpactConnectivityService,
        ImpactGuard,
        ImpactTabFactory,
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: ImpactNodeFactory,
            multi: true
        },
        {
            provide: HOOK_TABS,
            useClass: ImpactTabFactory,
            multi: true
        }
    ], imports: [[
            CoreModule,
            CommonModule,
            FormsModule,
            RouterModule.forChild(impactRoutes),
            PopoverModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactModule, [{
        type: NgModule,
        args: [{
                declarations: [ImpactProviderSettingsComponent, StatusDisplayComponent],
                exports: [ImpactProviderSettingsComponent],
                imports: [
                    CoreModule,
                    CommonModule,
                    FormsModule,
                    RouterModule.forChild(impactRoutes),
                    PopoverModule,
                    ReactiveFormsModule
                ],
                entryComponents: [ImpactProviderSettingsComponent],
                providers: [
                    ImpactConnectivityService,
                    ImpactGuard,
                    ImpactTabFactory,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ImpactNodeFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: ImpactTabFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImpactModule, { declarations: function () { return [ImpactProviderSettingsComponent, StatusDisplayComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        FormsModule, ɵngcc2.RouterModule, PopoverModule,
        ReactiveFormsModule]; }, exports: function () { return [ImpactProviderSettingsComponent]; } }); })();

class SigfoxGuard {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showSigfoxProvider === undefined) {
            this.showSigfoxProvider = this.applicationService
                .isAvailable(SigfoxGuard.applicationName)
                .then(result => result && result.data);
        }
        return this.showSigfoxProvider;
    }
}
SigfoxGuard.ɵfac = function SigfoxGuard_Factory(t) { return new (t || SigfoxGuard)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
SigfoxGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SigfoxGuard, factory: SigfoxGuard.ɵfac });
SigfoxGuard.applicationName = 'sigfox-agent';
SigfoxGuard.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

class SigfoxTabFactory extends AbstractConnectivityTabFactory {
    constructor(router, guard) {
        super(router, guard);
        this.router = router;
        this.guard = guard;
        this.tabConfig = {
            label: gettext('Sigfox provider settings'),
            path: '/connectivitySettings/sigfox_provider_settings',
            icon: 'c8y-device'
        };
    }
    config() {
        return this.tabConfig;
    }
}
SigfoxTabFactory.ɵfac = function SigfoxTabFactory_Factory(t) { return new (t || SigfoxTabFactory)(ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(SigfoxGuard)); };
SigfoxTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SigfoxTabFactory, factory: SigfoxTabFactory.ɵfac });
SigfoxTabFactory.ctorParameters = () => [
    { type: Router },
    { type: SigfoxGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxTabFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.Router }, { type: SigfoxGuard }]; }, null); })();

class SigfoxNodeFactory extends AbstractConnectivityNodeFactory {
    constructor(tabFactory) {
        super(tabFactory);
        this.tabFactory = tabFactory;
    }
}
SigfoxNodeFactory.ɵfac = function SigfoxNodeFactory_Factory(t) { return new (t || SigfoxNodeFactory)(ɵngcc0.ɵɵinject(SigfoxTabFactory)); };
SigfoxNodeFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SigfoxNodeFactory, factory: SigfoxNodeFactory.ɵfac });
SigfoxNodeFactory.ctorParameters = () => [
    { type: SigfoxTabFactory }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxNodeFactory, [{
        type: Injectable
    }], function () { return [{ type: SigfoxTabFactory }]; }, null); })();

class SigfoxModule {
}
SigfoxModule.ɵfac = function SigfoxModule_Factory(t) { return new (t || SigfoxModule)(); };
SigfoxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SigfoxModule });
SigfoxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        SigfoxGuard,
        SigfoxTabFactory,
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: SigfoxNodeFactory,
            multi: true
        },
        {
            provide: HOOK_TABS,
            useClass: SigfoxTabFactory,
            multi: true
        }
    ] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SigfoxModule, [{
        type: NgModule,
        args: [{
                providers: [
                    SigfoxGuard,
                    SigfoxTabFactory,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: SigfoxNodeFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_TABS,
                        useClass: SigfoxTabFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();

const connectivityRoutes = [
    {
        path: 'connectivitySettings',
        component: ConditionalTabsOutletComponent
    }
];
class ConnectivityModule {
}
ConnectivityModule.ɵfac = function ConnectivityModule_Factory(t) { return new (t || ConnectivityModule)(); };
ConnectivityModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ConnectivityModule });
ConnectivityModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CoreModule,
            ActilityModule,
            ImpactModule,
            SigfoxModule,
            RouterModule.forChild(connectivityRoutes)
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConnectivityModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    ActilityModule,
                    ImpactModule,
                    SigfoxModule,
                    RouterModule.forChild(connectivityRoutes)
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ConnectivityModule, { imports: function () { return [CoreModule, ActilityModule, ImpactModule, SigfoxModule, ɵngcc2.RouterModule]; } }); })();

class SimGuard {
    constructor(permissions, applicationService) {
        this.permissions = permissions;
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showSimProvider === undefined) {
            const hasRole = Promise.resolve(this.permissions.hasRole('ROLE_CONNECTIVITY_READ'));
            this.showSimProvider = hasRole.then((hasPermissions) => hasPermissions &&
                this.applicationService
                    .isAvailable(SimGuard.applicationName)
                    .then(result => result && result.data));
        }
        return this.showSimProvider;
    }
}
SimGuard.ɵfac = function SimGuard_Factory(t) { return new (t || SimGuard)(ɵngcc0.ɵɵinject(ɵngcc4.Permissions), ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
SimGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SimGuard, factory: SimGuard.ɵfac });
SimGuard.applicationName = 'connectivity';
SimGuard.ctorParameters = () => [
    { type: Permissions },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc4.Permissions }, { type: ɵngcc1.ApplicationService }]; }, null); })();

function encodeFiles(model, fields) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = Object.assign({}, model);
        const fileFields = (get(fields, '[0].fieldGroup') || []).filter((field) => {
            return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';
        });
        for (const fileField of fileFields) {
            const files = model[fileField.key];
            if (files && Array.isArray(files) && files.length) {
                if (fileField.templateOptions.maxAllowedFiles === 1) {
                    result[fileField.key] = (yield files[0].readAsDataURL()).replace(/data:\S+;base64,/gi, '');
                }
                else {
                    const encodedFileContent = [];
                    for (const file of files) {
                        encodedFileContent.push((yield file.readAsDataURL()).replace(/data:\S+;base64,/gi, ''));
                    }
                    result[fileField.key] = encodedFileContent;
                }
            }
            else if (typeof files === 'string' || files instanceof String) {
                result[fileField.key] = files;
            }
        }
        return result;
    });
}
class SimModule {
}
SimModule.ɵfac = function SimModule_Factory(t) { return new (t || SimModule)(); };
SimModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SimModule });
SimModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [SimGuard], imports: [[
            ProviderConfigurationModule.config([
                {
                    navigation: {
                        label: gettext('Connectivity'),
                        path: 'connectivitySettings',
                        icon: 'plug',
                        parent: gettext('Settings'),
                        priority: 1000,
                        preventDuplicates: true
                    },
                    tab: {
                        path: 'sim_provider_settings',
                        label: 'SIM provider settings',
                        icon: 'mobile',
                        canActivate: [SimGuard]
                    },
                    layout: {
                        pageTitle: gettext('Connectivity'),
                        cardTitle: gettext('Settings'),
                        description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                        providerName: gettext('Provider'),
                        providerNamePlaceholder: gettext('Select or type to filter providers'),
                        providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                        deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        deleteBtnLabel: gettext('Delete'),
                        saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        saveBtnLabel: gettext('Save'),
                        beforeSaveHook: encodeFiles,
                        configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                        deleteConfigurationModalTitle: gettext('Delete settings'),
                        deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                        deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                        configurationDeletedSuccessMsg: gettext('Settings deleted.')
                    },
                    endpoint: {
                        definitionsEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'definitions'
                        },
                        configurationEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'sim/provider'
                        }
                    }
                }
            ])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimModule, [{
        type: NgModule,
        args: [{
                providers: [SimGuard],
                imports: [
                    ProviderConfigurationModule.config([
                        {
                            navigation: {
                                label: gettext('Connectivity'),
                                path: 'connectivitySettings',
                                icon: 'plug',
                                parent: gettext('Settings'),
                                priority: 1000,
                                preventDuplicates: true
                            },
                            tab: {
                                path: 'sim_provider_settings',
                                label: 'SIM provider settings',
                                icon: 'mobile',
                                canActivate: [SimGuard]
                            },
                            layout: {
                                pageTitle: gettext('Connectivity'),
                                cardTitle: gettext('Settings'),
                                description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                                providerName: gettext('Provider'),
                                providerNamePlaceholder: gettext('Select or type to filter providers'),
                                providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                                deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                deleteBtnLabel: gettext('Delete'),
                                saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                saveBtnLabel: gettext('Save'),
                                beforeSaveHook: encodeFiles,
                                configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                                deleteConfigurationModalTitle: gettext('Delete settings'),
                                deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                                deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                                configurationDeletedSuccessMsg: gettext('Settings deleted.')
                            },
                            endpoint: {
                                definitionsEndpoint: {
                                    baseUrl: 'service/connectivity/metadata',
                                    listUrl: 'definitions'
                                },
                                configurationEndpoint: {
                                    baseUrl: 'service/connectivity/metadata',
                                    listUrl: 'sim/provider'
                                }
                            }
                        }
                    ])
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SimModule, { imports: [ɵngcc4.ProviderConfigurationModule] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractConnectivityNodeFactory, AbstractConnectivityTabFactory, ActilityGuard, ActilityModule, ActilityNodeFactory, ActilityTabFactory, ConnectivityModule, ImpactConnectivityService, ImpactGuard, ImpactModule, ImpactNodeFactory, ImpactProviderSettingsComponent, ImpactTabFactory, SigfoxGuard, SigfoxModule, SigfoxNodeFactory, SigfoxTabFactory, SimGuard, SimModule, StatusDisplayComponent, TenantConnectionStatus, encodeFiles };

//# sourceMappingURL=c8y-ngx-components-connectivity.js.map