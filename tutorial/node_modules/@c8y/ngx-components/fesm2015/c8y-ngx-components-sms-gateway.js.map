{"version":3,"file":"c8y-ngx-components-sms-gateway.js","sources":["../../sms-gateway/pattern-messages.data.ts","../../sms-gateway/sms-gateway.guard.ts","../../sms-gateway/sms-gateway.module.ts","../../sms-gateway/c8y-ngx-components-sms-gateway.ts"],"names":[],"mappings":";;;;;;;MAEa,QAAQ,GAAG;AACxB,IAAE,eAAe,EAAE;AACnB,QAAI,OAAO,EAAE,OAAO,CAAC,aAAa,CAAC;AACnC,KAAG;AACH,IAAE,iCAAiC,EAAE;AACrC,QAAI,OAAO,EAAE,OAAO,CAAC,+BAA+B,CAAC;AACrD,KAAG;AACH,IAAE,kBAAkB,EAAE;AACtB,QAAI,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;AACtC,KAAG;AACH,IAAE,oCAAoC,EAAE;AACxC,QAAI,OAAO,EAAE,OAAO,CAAC,kCAAkC,CAAC;AACxD,KAAG;AACH,IAAE,YAAY,EAAE;AAChB,QAAI,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC;AAChC,KAAG;AACH,IAAE,YAAY,EAAE;AAChB,QAAI,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC;AAChC,KAAG;AACH,IAAE,eAAe,EAAE;AACnB,QAAI,OAAO,EAAE,OAAO,CAAC,aAAa,CAAC;AACnC,KAAG;AACH,IAAE,OAAO,EAAE;AACX,QAAI,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC;AAC3B,KAAG;AACH,IAAE,gBAAgB,EAAE;AACpB,QAAI,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC;AACpC,KAAG;AACH,IAAE,WAAW,EAAE;AACf,QAAI,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;AAC/B,KAAG;AACH,IAAE,SAAS,EAAE;AACb,QAAI,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC;AAC7B,KAAG;AACH,IAAE,SAAS,EAAE;AACb,QAAI,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC;AAC7B,KAAG;AACH,IAAE,yBAAyB,EAAE;AAC7B,QAAI,OAAO,EAAE,OAAO,CAAC,uBAAuB,CAAC;AAC7C,KAAG;AACH,IAAE,iEAAiE,EAAE;AACrE,QAAI,OAAO,EAAE,OAAO,CAAC,+DAA+D,CAAC;AACrF,KAAG;AACH,IAAE,kBAAkB,EAAE;AACtB,QAAI,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;AACtC,KAAG;AACH,IAAE,wEAAwE,EAAE;AAC5E,QAAI,OAAO,EAAE,OAAO,CAAC,sEAAsE,CAAC;AAC5F,KAAG;AACH,IAAE,mBAAmB,EAAE;AACvB,QAAI,OAAO,EAAE,OAAO,CAAC,iBAAiB,CAAC;AACvC,KAAG;AACH,IAAE,oFAAoF,EAAE;AACxF,QAAI,OAAO,EAAE,OAAO,CACd,kFAAkF,CACnF;AACL,KAAG;AACH,IAAE,wBAAwB,EAAE;AAC5B,QAAI,OAAO,EAAE,OAAO,CAAC,uBAAuB,CAAC;AAC7C,KAAG;AACH,IAAE,gDAAgD,EAAE;AACpD,QAAI,OAAO,EAAE,OAAO,CAAC,8CAA8C,CAAC;AACpE,KAAG;AACH,IAAE,0BAA0B,EAAE;AAC9B,QAAI,OAAO,EAAE,OAAO,CAAC,yBAAyB,CAAC;AAC/C,KAAG;AACH,IAAE,yCAAyC,EAAE;AAC7C,QAAI,OAAO,EAAE,OAAO,CAAC,uCAAuC,CAAC;AAC7D,KAAG;AACH,IAAE,wBAAwB,EAAE;AAC5B,QAAI,OAAO,EAAE,OAAO,CAAC,sBAAsB,CAAC;AAC5C,KAAG;AACH,IAAE,iHAAiH,EAAE;AACrH,QAAI,OAAO,EAAE,OAAO,CACd,gGAAgG,CACjG;AACL,KAAG;AACH,IAAE,WAAW,EAAE;AACf,QAAI,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;AAC/B,KAAG;AACH,IAAE,yBAAyB,EAAE;AAC7B,QAAI,OAAO,EAAE,OAAO,CAAC,uBAAuB,CAAC;AAC7C,KAAG;AACH,IAAE,qFAAqF,EAAE;AACzF,QAAI,OAAO,EAAE,OAAO,CACd,kFAAkF,CACnF;AACL,KAAG;AACH,IAAE,SAAS,EAAE;AACb,QAAI,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC;AAC7B,KAAG;AACH,IAAE,2BAA2B,EAAE;AAC/B,QAAI,OAAO,EAAE,OAAO,CAAC,yBAAyB,CAAC;AAC/C,KAAG;AACH,IAAE,aAAa,EAAE;AACjB,QAAI,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC;AACjC,KAAG;AACH,IAAE,iBAAiB,EAAE;AACrB,QAAI,OAAO,EAAE,OAAO,CAAC,eAAe,CAAC;AACrC,KAAG;AACH;AACA;AAAC,MCjGY,eAAe;AAAG,IAI7B,YAAoB,WAAwB,EAAU,kBAAsC;AAAI,QAA5E,gBAAW,GAAX,WAAW,CAAa;AAAC,QAAS,uBAAkB,GAAlB,kBAAkB,CAAoB;AAAC,KAAG;AAClG,IACE,WAAW,CAAC,KAA6B,EAAE,KAA0B;AAAI,QACvE,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;AAC5C,YAAM,MAAM,OAAO,GAAqB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AACnG,YACM,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,IAAI,CACjC,CAAC,cAAuB,KACtB,cAAc;AACxB,gBAAU,IAAI,CAAC,kBAAkB;AACjC,qBAAa,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC;AACzD,qBAAa,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAC3C,CAAC;AACR,SAAK;AACL,QACI,OAAO,IAAI,CAAC,eAAe,CAAC;AAChC,KAAG;AACH;;2HAAC;AApByB,+BAAe,GAAG,aAAa,CAAC,AADxD;AAAC;EADF,UAAU,ZACiC,YAHnC,WAAW;AAAI,YADf,kBAAkB;AAAG;;;iHAAE;AAAC;AAAC,WCiDyC;AAAU,MAExE,gBAAgB;AAAG;4CAhD/B,QAAQ,SAAC,kBACR,OAAO,EAAE;MACP,2BAA2B,CAAC,MAAM,CAAC,0BACjC;MACE,UAAU,EAAE,kCACV,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC,kCAC9B,IAAI,EAAE,YAAY,kCAClB;GAAI,EAAE,YAAY;EAClB,MAAM,EAAE,OAAO;AAAC,UAAU,CAAC;WAC3B,QAAQ,EAAE,IAAI;GACd,WAAW,EAAE,CAAC,eAAe,CAAC;mBAC/B;KACD,MAAM,EAAE,kCACN;GAAS,EAAE,OAAO,CAAC,cAAc,CAAC;sBAClC,SAAS,EAAE,OAAO,CAAC,aAAa;AAAC;WACjC,WAAW,EAAE;CAAO,CAClB;;6CAAkK,CACnK,kCACD,YAAY,EAAE,OAAO,CAAC,cAAc,CAAC,kCACrC,uBAAuB,EAAE,OAAO,CAAC;UAAoC,CAAC,kCACtE;OAAyB,EAAE,OAAO,CAAC,uCAAuC,CAAC,kCAC3E;MAAW,EAAE,CAAC,gBAAgB,CAAC,kCAC/B,cAAc,EAAE,OAAO,CAAC,QAAQ,CAAC;0BACjC,SAAS,EAAE,CAAC,gBAAgB,CAAC;gCAC7B,YAAY,EAAE,OAAO,CAAC;CAAM,CAAC,kCAC7B;WAA8B,EAAE,OAAO,CAAC,sBAAsB,CAAC;uBAC/D,6BAA6B,EAAE,OAAO,CAAC,oBAAoB,CAAC;4BAC5D,4BAA4B,EAAE,OAAO,CACnC;gNAAoO,CACrO,kCACD,kCAAkC,EAAE,OAAO,CAAC;EAAQ,CAAC,kCACrD,8BAA8B,EAAE,OAAO,CAAC;oBAAsB,CAAC,8BAChE,8BACD;CAAQ,EAAE;cACR;CAAmB,EAAE,sCACnB;CAAO,EAAE,6BAA6B;EACtC,OAAO,EAAE,aAAa;OACvB;cACD,qBAAqB,EAAE;0BACrB,OAAO,EAAE,6BAA6B;kCACtC,OAAO,EAAE;KAAe;aACzB;;GACF;cACF;qBACF,CAAC,kBACH,kBACD,SAAS,EAAE,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE;OAAqB,EAAE,QAAQ,IAAU,EAAE;IAAK,EAAE,IAAI,EAAE,CAAC;UAClG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uKACI;AAAC;ACrDN;AACA;AACA;AACA;AACA;AACmC","sourcesContent":["import { gettext } from '@c8y/ngx-components';\n\nexport const MESSAGES = {\n  '^Sender name$': {\n    gettext: gettext('Sender name')\n  },\n  '^Sender name used for sent SMS$': {\n    gettext: gettext('Sender name used for sent SMS')\n  },\n  '^Sender address$': {\n    gettext: gettext('Sender address')\n  },\n  '^Sender address used for sent SMS$': {\n    gettext: gettext('Sender address used for sent SMS')\n  },\n  '^Username$': {\n    gettext: gettext('Username')\n  },\n  '^Password$': {\n    gettext: gettext('Password')\n  },\n  '^Licence key$': {\n    gettext: gettext('License key')\n  },\n  '^Key$': {\n    gettext: gettext('Key')\n  },\n  '^API base URL$': {\n    gettext: gettext('API base URL')\n  },\n  '^API URL$': {\n    gettext: gettext('API URL')\n  },\n  '^oauth$': {\n    gettext: gettext('OAuth')\n  },\n  '^basic$': {\n    gettext: gettext('Basic')\n  },\n  '^Authentication method$': {\n    gettext: gettext('Authentication method')\n  },\n  '^Defines which authentication method is used with the provider$': {\n    gettext: gettext('Defines which authentication method is used with the provider')\n  },\n  '^Static headers$': {\n    gettext: gettext('Static headers')\n  },\n  '^Static headers that should be added to requests towards the provider$': {\n    gettext: gettext('Static headers that should be added to requests towards the provider')\n  },\n  '^OAuth token URL$': {\n    gettext: gettext('OAuth token URL')\n  },\n  '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {\n    gettext: gettext(\n      'URL where the OAuth token is requested from (required if OAuth method is chosen)'\n    )\n  },\n  '^OAuth toke mime type$': {\n    gettext: gettext('OAuth token mime type')\n  },\n  '^Overrides the OAuth token response mime type$': {\n    gettext: gettext('Overrides the OAuth token response mime type')\n  },\n  '^OAuth access toke type$': {\n    gettext: gettext('OAuth access token type')\n  },\n  '^Overrides the OAuth access token type$': {\n    gettext: gettext('Overrides the OAuth access token type')\n  },\n  '^Global configuration$': {\n    gettext: gettext('Global configuration')\n  },\n  '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {\n    gettext: gettext(\n      'Enables or disables the settings globally for all tenants (only possible in management tenant)'\n    )\n  },\n  '^API key$': {\n    gettext: gettext('API key')\n  },\n  '^Inherit to subtenants$': {\n    gettext: gettext('Inherit to subtenants')\n  },\n  \"^Enables or disables if this tenant's configuration may be inherited to subtenants$\": {\n    gettext: gettext(\n      'Enables or disables the option to inherit the tenant configuration to subtenants'\n    )\n  },\n  '^Login$': {\n    gettext: gettext('Login')\n  },\n  '^Source business unit ID$': {\n    gettext: gettext('Source business unit ID')\n  },\n  '^Client ID$': {\n    gettext: gettext('Client ID')\n  },\n  '^Client secret$': {\n    gettext: gettext('Client secret')\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SmsGatewayGuard implements CanActivate {\n  private static readonly applicationName = 'sms-gateway';\n  private showSMSProvider: Promise<boolean>;\n\n  constructor(private permissions: Permissions, private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSMSProvider === undefined) {\n      const hasRole: Promise<boolean> = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));\n\n      this.showSMSProvider = hasRole.then(\n        (hasPermissions: boolean) =>\n          hasPermissions &&\n          this.applicationService\n            .isAvailable(SmsGatewayGuard.applicationName)\n            .then(result => result && result.data)\n      );\n    }\n\n    return this.showSMSProvider;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { gettext, HOOK_PATTERN_MESSAGES, ProviderConfigurationModule } from '@c8y/ngx-components';\nimport { MESSAGES } from './pattern-messages.data';\nimport { SmsGatewayGuard } from './sms-gateway.guard';\n\n@NgModule({\n  imports: [\n    ProviderConfigurationModule.config([\n      {\n        navigation: {\n          label: gettext('SMS provider'),\n          path: 'smsgateway',\n          icon: 'envelope-o',\n          parent: gettext('Settings'),\n          priority: 1000,\n          canActivate: [SmsGatewayGuard]\n        },\n        layout: {\n          pageTitle: gettext('SMS provider'),\n          cardTitle: gettext('Credentials'),\n          description: gettext(\n            'Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'\n          ),\n          providerName: gettext('SMS provider'),\n          providerNamePlaceholder: gettext('Select or type to filter providers'),\n          providerNameNoMatchesHint: gettext('Select one of the existing providers.'),\n          deleteRoles: ['ROLE_SMS_ADMIN'],\n          deleteBtnLabel: gettext('Delete'),\n          saveRoles: ['ROLE_SMS_ADMIN'],\n          saveBtnLabel: gettext('Save'),\n          configurationUpdatedSuccessMsg: gettext('Credentials updated.'),\n          deleteConfigurationModalTitle: gettext('Delete credentials'),\n          deleteConfigurationModalBody: gettext(\n            `You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?`\n          ),\n          deleteConfigurationModalOkBtnLabel: gettext('Delete'),\n          configurationDeletedSuccessMsg: gettext('Credentials deleted.')\n        },\n        endpoint: {\n          definitionsEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'definitions'\n          },\n          configurationEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'configuration'\n          }\n        }\n      }\n    ])\n  ],\n  providers: [SmsGatewayGuard, { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true }]\n})\nexport class SmsGatewayModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}