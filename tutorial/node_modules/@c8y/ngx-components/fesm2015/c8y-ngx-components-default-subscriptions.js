import { Injectable, Component, NgModule } from '@angular/core';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { HumanizeAppNamePipe, gettext, AlertService, TenantUiService, NavigatorNode, CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { __awaiter } from 'tslib';
import { sortBy, isUndefined } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { ApplicationType, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';

/** The context for evaluating default subscriptions configuration */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';

function DefaultSubscriptionsComponent_div_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 23);
} }
function DefaultSubscriptionsComponent_div_41_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Loading application subscriptions\u2026");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function DefaultSubscriptionsComponent_div_42_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 23);
} }
function DefaultSubscriptionsComponent_div_44_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 25);
} }
function DefaultSubscriptionsComponent_div_45_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵelementStart(1, "div", 27);
    ɵngcc0.ɵɵelement(2, "h1", 28);
    ɵngcc0.ɵɵelementStart(3, "h3", 8);
    ɵngcc0.ɵɵtext(4, "No application subscriptions yet.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p", 8);
    ɵngcc0.ɵɵtext(6, " Select \"Override inherited\" to define the list of subscribed applications. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function DefaultSubscriptionsComponent_div_46_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 25);
} }
function DefaultSubscriptionsComponent_div_47_ng_container_1_span_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} }
function DefaultSubscriptionsComponent_div_47_ng_container_1_span_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 49);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r11.disabledCheckboxHint));
} }
function DefaultSubscriptionsComponent_div_47_ng_container_1_span_30_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} }
function DefaultSubscriptionsComponent_div_47_ng_container_1_span_31_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 49);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r13.disabledCheckboxHint));
} }
const _c0 = function (a0) { return { disabled: a0 }; };
function DefaultSubscriptionsComponent_div_47_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵelementStart(2, "div", 32);
    ɵngcc0.ɵɵelementStart(3, "div", 33);
    ɵngcc0.ɵɵelementStart(4, "div", 34);
    ɵngcc0.ɵɵelement(5, "c8y-app-icon", 35);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 36);
    ɵngcc0.ɵɵelementStart(7, "div", 37);
    ɵngcc0.ɵɵelementStart(8, "div", 38);
    ɵngcc0.ɵɵelementStart(9, "p", 39);
    ɵngcc0.ɵɵpipe(10, "async");
    ɵngcc0.ɵɵpipe(11, "humanizeAppName");
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "async");
    ɵngcc0.ɵɵpipe(14, "humanizeAppName");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "small", 40);
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 41);
    ɵngcc0.ɵɵelementStart(18, "p");
    ɵngcc0.ɵɵelementStart(19, "span", 42);
    ɵngcc0.ɵɵtext(20, " Tenant ID ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "div", 43);
    ɵngcc0.ɵɵelementStart(23, "label", 44);
    ɵngcc0.ɵɵelement(24, "input", 45);
    ɵngcc0.ɵɵtemplate(25, DefaultSubscriptionsComponent_div_47_ng_container_1_span_25_Template, 1, 0, "span", 46);
    ɵngcc0.ɵɵtemplate(26, DefaultSubscriptionsComponent_div_47_ng_container_1_span_26_Template, 2, 3, "span", 47);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "div", 43);
    ɵngcc0.ɵɵelementStart(28, "label", 44);
    ɵngcc0.ɵɵelement(29, "input", 48);
    ɵngcc0.ɵɵtemplate(30, DefaultSubscriptionsComponent_div_47_ng_container_1_span_30_Template, 1, 0, "span", 46);
    ɵngcc0.ɵɵtemplate(31, DefaultSubscriptionsComponent_div_47_ng_container_1_span_31_Template, 2, 3, "span", 47);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    const i_r8 = ctx_r14.index;
    const appRowControl_r7 = ctx_r14.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("formArrayName", i_r8);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("app", appRowControl_r7.value.app)("name", appRowControl_r7.value.app.name)("contextPath", appRowControl_r7.value.app.contextPath);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 14, ɵngcc0.ɵɵpipeBind1(11, 16, appRowControl_r7.value.app)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 18, ɵngcc0.ɵɵpipeBind1(14, 20, appRowControl_r7.value.app)), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(appRowControl_r7.value.app.contextPath);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", appRowControl_r7.value.app.owner.tenant.id, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(22, _c0, appRowControl_r7.controls.subscribedOnCreation.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !appRowControl_r7.controls.subscribedOnCreation.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", appRowControl_r7.controls.subscribedOnCreation.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(24, _c0, appRowControl_r7.controls.subscribedOnUpgrade.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !appRowControl_r7.controls.subscribedOnUpgrade.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", appRowControl_r7.controls.subscribedOnUpgrade.disabled);
} }
function DefaultSubscriptionsComponent_div_47_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, DefaultSubscriptionsComponent_div_47_ng_container_1_Template, 32, 26, "ng-container", 29);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appRowControl_r7 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.shouldShowAppRow(appRowControl_r7.getRawValue()));
} }
var DefaultSubscriptionsContext;
(function (DefaultSubscriptionsContext) {
    /** Current tenant context (only current tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["CURRENT_TENANT"] = 0] = "CURRENT_TENANT";
    /** Parent tenant context (only parent tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["PARENT_TENANT"] = 1] = "PARENT_TENANT";
})(DefaultSubscriptionsContext || (DefaultSubscriptionsContext = {}));

class DefaultSubscriptionsService {
    constructor(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    getSubscribableTenantApps() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            const allApps = (yield this.applicationService.listByTenant(null, { pageSize: 2000 })).data;
            const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);
            const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);
            const filteredApps = [...ownApps];
            inheritedApps.forEach(inheritedApp => {
                if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {
                    filteredApps.push(inheritedApp);
                }
            });
            const filteredAppsWithHumanizedNames = yield Promise.all(filteredApps.map((app) => __awaiter(this, void 0, void 0, function* () {
                const humanizedName = yield this.humanizeAppNamePipe
                    .transform(app.name)
                    .pipe(debounceTime(250), take(1))
                    .toPromise();
                return { app, humanizedName };
            })));
            const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
            const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);
            return sortedApps;
        });
    }
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    getDefaultSubscriptionsEvaluatedFromParentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContext.PARENT_TENANT);
        });
    }
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    getDefaultSubscriptionsFromCurrentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContext.CURRENT_TENANT);
        });
    }
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveOnCreationSubscriptions(defaultSubscriptions);
            yield this.saveOnUpgradeSubscriptions(defaultSubscriptions);
        });
    }
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    getDefaultSubscriptions(contextTenant) {
        return __awaiter(this, void 0, void 0, function* () {
            let tenantOptionsParams;
            let overridable;
            switch (contextTenant) {
                case DefaultSubscriptionsContext.CURRENT_TENANT:
                    tenantOptionsParams = { evaluate: 'current' };
                    overridable = true;
                    break;
                case DefaultSubscriptionsContext.PARENT_TENANT:
                    tenantOptionsParams = { evaluate: 'inherited' };
                    overridable = false;
                    break;
            }
            const { onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices } = yield this.getTenantOptions(tenantOptionsParams);
            const onCreationSubscriptions = this.namesToPartialApps({
                appsNamesStr: onCreationApps,
                microservicesNamesStr: onCreationMicroservices
            });
            const onUpgradeAppsDefault = overridable ? null : onCreationApps;
            const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
            const onUpgradeSubscriptions = this.namesToPartialApps({
                appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                microservicesNamesStr: onUpgradeMicroservicesEnabled
                    ? onUpgradeMicroservices
                    : onUpgradeMicroservicesDefault
            });
            const defaultSubscriptions = {
                onCreationSubscriptions,
                onUpgradeSubscriptions
            };
            if (overridable) {
                defaultSubscriptions.overrideOnCreationSubscriptions =
                    onCreationApps !== null || onCreationMicroservices !== null;
                defaultSubscriptions.overrideOnUpgradeSubscriptions =
                    onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
            }
            return defaultSubscriptions;
        });
    }
    getTenantOptions(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                onCreationApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                }, null, params),
                onCreationMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                }, null, params),
                onUpgradeAppsEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                }, false, params),
                onUpgradeApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                }, null, params),
                onUpgradeMicroservicesEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                }, false, params),
                onUpgradeMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                }, null, params)
            };
        });
    }
    saveOnCreationSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnCreationSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                });
            }
        });
    }
    saveOnUpgradeSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                });
            }
        });
    }
    getTenantOption(option, defaultValue = null, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let value;
            try {
                value = (yield this.tenantOptionsService.detail(option, params)).data.value;
                value = JSON.parse(value);
            }
            catch (ex) {
                value = !isUndefined(value) ? value : defaultValue;
            }
            return value;
        });
    }
    setTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tenantOptionsService.update(option);
        });
    }
    unsetTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.tenantOptionsService.delete(option);
            }
            catch (ex) {
                if (!ex || !ex.res || ex.res.status !== 404) {
                    throw ex;
                }
            }
        });
    }
    namesToPartialApps({ appsNamesStr, microservicesNamesStr }) {
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return [
            ...(appsNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({ name: name.trim() })),
            ...(microservicesNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({
                name: name.trim(),
                type: ApplicationType.MICROSERVICE
            }))
        ];
    }
    partialAppsListToAppsNames(apps) {
        return apps
            .filter(app => app.type !== ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
    partialAppsToMicroservicesNames(apps) {
        return apps
            .filter(app => app.type === ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
}
DefaultSubscriptionsService.ɵfac = function DefaultSubscriptionsService_Factory(t) { return new (t || DefaultSubscriptionsService)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService), ɵngcc0.ɵɵinject(ɵngcc1.TenantService), ɵngcc0.ɵɵinject(ɵngcc1.TenantOptionsService), ɵngcc0.ɵɵinject(ɵngcc2.HumanizeAppNamePipe)); };
DefaultSubscriptionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DefaultSubscriptionsService, factory: DefaultSubscriptionsService.ɵfac });
DefaultSubscriptionsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: TenantService },
    { type: TenantOptionsService },
    { type: HumanizeAppNamePipe }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }, { type: ɵngcc1.TenantService }, { type: ɵngcc1.TenantOptionsService }, { type: ɵngcc2.HumanizeAppNamePipe }]; }, null); })();

/**
 * The component shows the main view for managing default subscriptions configuration.
 */
class DefaultSubscriptionsComponent {
    constructor(fb, defaultSubscriptionsService, alertService) {
        this.fb = fb;
        this.defaultSubscriptionsService = defaultSubscriptionsService;
        this.alertService = alertService;
        /** Hint text for disabled checkboxes. */
        this.disabledCheckboxHint = gettext('Select "Override inherited" to enable.');
    }
    /** Initializes the loading of the form and the current settings. */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            yield this.initForm();
            yield this.loadDefaultSubscriptions();
            this.loading = false;
        });
    }
    /** Loads the list of apps, builds the form and hooks value change events for override switches. */
    initForm() {
        return __awaiter(this, void 0, void 0, function* () {
            this.form = this.fb.group({
                overrideOnCreationSubscriptions: [''],
                overrideOnUpgradeSubscriptions: [''],
                appRows: this.fb.array([])
            });
            const apps = yield this.defaultSubscriptionsService.getSubscribableTenantApps();
            const appRows = this.form.controls.appRows;
            apps.forEach(app => {
                appRows.push(this.fb.group({
                    app: [app],
                    subscribedOnCreation: [''],
                    subscribedOnUpgrade: ['']
                }));
            });
            this.form
                .get('overrideOnCreationSubscriptions')
                .valueChanges.subscribe(value => this.onOverrideOnCreationSubscriptionsChange(value));
            this.form
                .get('overrideOnUpgradeSubscriptions')
                .valueChanges.subscribe(value => this.onOverrideOnUpgradeSubscriptionsChange(value));
        });
    }
    /**
     * Checks if given application row should be displayed.
     * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.
     */
    shouldShowAppRow(appRowRawValue) {
        const { subscribedOnCreation, subscribedOnUpgrade } = appRowRawValue;
        const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.form.value;
        return (subscribedOnCreation ||
            subscribedOnUpgrade ||
            overrideOnCreationSubscriptions ||
            overrideOnUpgradeSubscriptions);
    }
    /** Checks if there are no application rows to be displayed. */
    isEmptyView() {
        return !this.form
            .getRawValue()
            .appRows.some(appRowRawValue => this.shouldShowAppRow(appRowRawValue));
    }
    /**
     * Checks if given application is subscribed (present in the given list of applications).
     * @param app Application object to check.
     * @param subscribedApps The list of application objects to check against.
     * @returns True, if the application is present in the list.
     */
    isSubscribed(app, subscribedApps) {
        return subscribedApps && subscribedApps.some(subscribedApp => subscribedApp.name === app.name);
    }
    /** Saves the current value of form object to backend. */
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const defaultSubscriptions = this.getDefaultSubscriptionsForSave();
                yield this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions);
                this.alertService.success(gettext('Saved.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    onOverrideOnCreationSubscriptionsChange(overrideOnCreationSubscriptions) {
        const appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnCreationSubscriptions) {
            this.enableSubscribeOnCreationCheckboxes();
            return;
        }
        this.disableSubscribeOnCreationCheckboxes();
        this.restoreSubscribeOnCreationFromParent();
    }
    enableSubscribeOnCreationCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });
        });
    }
    disableSubscribeOnCreationCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });
        });
    }
    restoreSubscribeOnCreationFromParent() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.patchValue({
                subscribedOnCreation: this.isSubscribed(appRowControl.value.app, this.parentDefaultSubscriptions.onCreationSubscriptions)
            });
        });
    }
    onOverrideOnUpgradeSubscriptionsChange(overrideOnUpgradeSubscriptions) {
        const appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnUpgradeSubscriptions) {
            this.enableSubscribeOnUpgradeCheckboxes();
            return;
        }
        this.disableSubscribeOnUpgradeCheckboxes();
        this.restoreSubscribeOnUpgradeFromParent();
    }
    enableSubscribeOnUpgradeCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });
        });
    }
    disableSubscribeOnUpgradeCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });
        });
    }
    restoreSubscribeOnUpgradeFromParent() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.patchValue({
                subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, this.parentDefaultSubscriptions.onUpgradeSubscriptions)
            });
        });
    }
    loadDefaultSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            this.parentDefaultSubscriptions = yield this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant();
            this.currentDefaultSubscriptions = yield this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant();
            const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.currentDefaultSubscriptions;
            const onCreationSubscriptions = overrideOnCreationSubscriptions
                ? this.currentDefaultSubscriptions.onCreationSubscriptions
                : this.parentDefaultSubscriptions.onCreationSubscriptions;
            const onUpgradeSubscriptions = overrideOnUpgradeSubscriptions
                ? this.currentDefaultSubscriptions.onUpgradeSubscriptions
                : this.parentDefaultSubscriptions.onUpgradeSubscriptions;
            this.form.patchValue({
                overrideOnCreationSubscriptions,
                overrideOnUpgradeSubscriptions
            });
            this.form.controls.appRows.controls.forEach(appRowControl => {
                appRowControl.patchValue({
                    subscribedOnCreation: this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),
                    subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)
                });
            });
        });
    }
    getDefaultSubscriptionsForSave() {
        const { value } = this.form;
        return {
            overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,
            onCreationSubscriptions: value.overrideOnCreationSubscriptions
                ? value.appRows.filter(app => app.subscribedOnCreation).map(app => app.app)
                : null,
            overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,
            onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions
                ? value.appRows.filter(app => app.subscribedOnUpgrade).map(app => app.app)
                : null
        };
    }
}
DefaultSubscriptionsComponent.ɵfac = function DefaultSubscriptionsComponent_Factory(t) { return new (t || DefaultSubscriptionsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormBuilder), ɵngcc0.ɵɵdirectiveInject(DefaultSubscriptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
DefaultSubscriptionsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DefaultSubscriptionsComponent, selectors: [["c8y-default-subscriptions"]], decls: 53, vars: 30, consts: [[3, "formGroup", "ngSubmit"], [1, "card", "card--fullpage", "col-lg-max"], [1, "card-header", "separator"], ["translate", "", 1, "card-title"], [1, "inner-scroll"], [1, "sticky-top", "separator-bottom"], [1, "flex-row"], [1, "col-sm-6", "col-xs-6", "p-l-24", "p-l-xs-16"], ["translate", ""], [1, "col-sm-6", "col-xs-6", "bg-gray-white", "p-16", "text-center", "separator-bottom"], [1, "row"], [1, "col-sm-6", "col-xs-6"], [1, "c8y-switch", 3, "title"], ["type", "checkbox", "formControlName", "overrideOnCreationSubscriptions"], ["type", "checkbox", "formControlName", "overrideOnUpgradeSubscriptions"], ["class", "card-block", 4, "ngIf"], ["class", "card-block card-block d-flex a-i-center j-c-center d-col", 4, "ngIf"], ["formArrayName", "appRows"], ["class", "bg-gray-white", 4, "ngIf"], ["class", "card-block bg-white", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "card-footer", "separator"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "title"], [1, "card-block"], [1, "card-block", "card-block", "d-flex", "a-i-center", "j-c-center", "d-col"], [1, "bg-gray-white"], [1, "card-block", "bg-white"], [1, "c8y-empty-state"], [1, "c8y-icon", "c8y-icon-c8y-data", "c8y-icon-duocolor"], [3, "formArrayName", 4, "ngIf"], [3, "formArrayName"], [1, "flex-row", "a-i-stretch"], [1, "col-sm-6", "col-xs-6", "separator-bottom"], [1, "c8y-list__item__block"], [1, "c8y-list__item__appicon"], [3, "app", "name", "contextPath"], [1, "c8y-list__item__body"], [1, "content-flex-30"], [1, "col-6"], [1, "text-truncate", 3, "title"], [1, "text-muted"], [1, "col-6", "text-right-sm"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "col-sm-3", "col-xs-3", "bg-gray-white", "separator-bottom", "d-flex", "j-c-center", "a-i-center"], [1, "c8y-checkbox", 3, "ngClass"], ["type", "checkbox", "formControlName", "subscribedOnCreation"], [4, "ngIf"], [3, "title", 4, "ngIf"], ["type", "checkbox", "formControlName", "subscribedOnUpgrade"], [3, "title"]], template: function DefaultSubscriptionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function DefaultSubscriptionsComponent_Template_form_ngSubmit_3_listener() { return ctx.save(); });
        ɵngcc0.ɵɵelementStart(4, "div", 1);
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "h4", 3);
        ɵngcc0.ɵɵtext(7, "Applications");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "p", 8);
        ɵngcc0.ɵɵtext(13, " Configure default subscriptions in the platform, both for tenant creation and for platform upgrade. To display a full list of available applications, override inherited settings. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "div", 10);
        ɵngcc0.ɵɵelementStart(16, "div", 11);
        ɵngcc0.ɵɵelementStart(17, "p");
        ɵngcc0.ɵɵelementStart(18, "strong", 8);
        ɵngcc0.ɵɵtext(19, "Subscribed on tenant creation");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div");
        ɵngcc0.ɵɵelementStart(21, "label", 12);
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelement(23, "input", 13);
        ɵngcc0.ɵɵelement(24, "span");
        ɵngcc0.ɵɵelementStart(25, "span");
        ɵngcc0.ɵɵtext(26);
        ɵngcc0.ɵɵpipe(27, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 11);
        ɵngcc0.ɵɵelementStart(29, "p");
        ɵngcc0.ɵɵelementStart(30, "strong", 8);
        ɵngcc0.ɵɵtext(31, "Subscribed on platform upgrade");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "div");
        ɵngcc0.ɵɵelementStart(33, "label", 12);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵelement(35, "input", 14);
        ɵngcc0.ɵɵelement(36, "span");
        ɵngcc0.ɵɵelementStart(37, "span");
        ɵngcc0.ɵɵtext(38);
        ɵngcc0.ɵɵpipe(39, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(40, DefaultSubscriptionsComponent_div_40_Template, 1, 0, "div", 15);
        ɵngcc0.ɵɵtemplate(41, DefaultSubscriptionsComponent_div_41_Template, 4, 0, "div", 16);
        ɵngcc0.ɵɵtemplate(42, DefaultSubscriptionsComponent_div_42_Template, 1, 0, "div", 15);
        ɵngcc0.ɵɵelementContainerStart(43, 17);
        ɵngcc0.ɵɵtemplate(44, DefaultSubscriptionsComponent_div_44_Template, 1, 0, "div", 18);
        ɵngcc0.ɵɵtemplate(45, DefaultSubscriptionsComponent_div_45_Template, 7, 0, "div", 19);
        ɵngcc0.ɵɵtemplate(46, DefaultSubscriptionsComponent_div_46_Template, 1, 0, "div", 18);
        ɵngcc0.ɵɵtemplate(47, DefaultSubscriptionsComponent_div_47_Template, 2, 1, "div", 20);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(48, "div", 21);
        ɵngcc0.ɵɵelementStart(49, "button", 22);
        ɵngcc0.ɵɵpipe(50, "translate");
        ɵngcc0.ɵɵtext(51);
        ɵngcc0.ɵɵpipe(52, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 16, "Default subscriptions"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(18);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 18, "Override inherited"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(27, 20, "Override inherited"), " ");
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(34, 22, "Override inherited"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(39, 24, "Override inherited"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && ctx.isEmptyView());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && ctx.isEmptyView());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && ctx.isEmptyView());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.form.get("appRows")["controls"]);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(50, 26, "Save default subscriptions"));
        ɵngcc0.ɵɵproperty("disabled", ctx.form.invalid || ctx.form.pristine);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(52, 28, "Save"), " ");
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc3.ɵNgNoValidate, ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.C8yTranslateDirective, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgIf, ɵngcc3.FormArrayName, ɵngcc4.NgForOf, ɵngcc2.LoadingComponent, ɵngcc2.AppIconComponent, ɵngcc4.NgClass], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.AsyncPipe, ɵngcc2.HumanizeAppNamePipe], encapsulation: 2 });
DefaultSubscriptionsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: DefaultSubscriptionsService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-default-subscriptions',
                template: "<c8y-title>{{ 'Default subscriptions' | translate }}</c8y-title>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"save()\">\n  <div class=\"card card--fullpage col-lg-max\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Applications</h4>\n    </div>\n    <div class=\"inner-scroll\">\n      <div class=\"sticky-top separator-bottom\">\n        <div class=\"flex-row\">\n          <div class=\"col-sm-6 col-xs-6 p-l-24 p-l-xs-16\">\n            <p translate>\n              Configure default subscriptions in the platform, both for tenant creation and for\n              platform upgrade. To display a full list of available applications, override inherited\n              settings.\n            </p>\n          </div>\n          <div class=\"col-sm-6 col-xs-6 bg-gray-white p-16 text-center separator-bottom\">\n            <div class=\"row\">\n              <div class=\"col-sm-6 col-xs-6\">\n                <p><strong translate>Subscribed on tenant creation</strong></p>\n                <div>\n                  <label class=\"c8y-switch\" title=\"{{ 'Override inherited' | translate }}\">\n                    <input type=\"checkbox\" formControlName=\"overrideOnCreationSubscriptions\" />\n                    <span></span>\n                    <span>\n                      {{ 'Override inherited' | translate }}\n                    </span>\n                  </label>\n                </div>\n              </div>\n              <div class=\"col-sm-6 col-xs-6\">\n                <p><strong translate>Subscribed on platform upgrade</strong></p>\n                <div>\n                  <label class=\"c8y-switch\" title=\"{{ 'Override inherited' | translate }}\">\n                    <input type=\"checkbox\" formControlName=\"overrideOnUpgradeSubscriptions\" />\n                    <span></span>\n                    <span>\n                      {{ 'Override inherited' | translate }}\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-block\" *ngIf=\"loading\"></div>\n      <div class=\"card-block card-block d-flex a-i-center j-c-center d-col\" *ngIf=\"loading\">\n        <c8y-loading></c8y-loading>\n        <span translate>Loading application subscriptions\u2026</span>\n      </div>\n      <div class=\"card-block\" *ngIf=\"loading\"></div>\n\n      <ng-container formArrayName=\"appRows\">\n        <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n        <div class=\"card-block bg-white\" *ngIf=\"!loading && isEmptyView()\">\n          <div class=\"c8y-empty-state\">\n            <h1 class=\"c8y-icon c8y-icon-c8y-data c8y-icon-duocolor\"></h1>\n            <h3 translate>No application subscriptions yet.</h3>\n            <p translate>\n              Select \"Override inherited\" to define the list of subscribed applications.\n            </p>\n          </div>\n        </div>\n        <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n\n        <div *ngFor=\"let appRowControl of form.get('appRows')['controls']; let i = index\">\n          <ng-container\n            *ngIf=\"shouldShowAppRow(appRowControl.getRawValue())\"\n            formArrayName=\"{{ i }}\"\n          >\n            <div class=\"flex-row a-i-stretch\">\n              <div class=\"col-sm-6 col-xs-6 separator-bottom\">\n                <div class=\"c8y-list__item__block\">\n                  <div class=\"c8y-list__item__appicon\">\n                    <c8y-app-icon\n                      [app]=\"appRowControl.value.app\"\n                      [name]=\"appRowControl.value.app.name\"\n                      [contextPath]=\"appRowControl.value.app.contextPath\"\n                    ></c8y-app-icon>\n                  </div>\n                  <div class=\"c8y-list__item__body\">\n                    <div class=\"content-flex-30\">\n                      <div class=\"col-6\">\n                        <p\n                          class=\"text-truncate\"\n                          title=\"{{ appRowControl.value.app | humanizeAppName | async }}\"\n                        >\n                          {{ appRowControl.value.app | humanizeAppName | async }}\n                        </p>\n                        <small class=\"text-muted\">{{ appRowControl.value.app.contextPath }}</small>\n                      </div>\n                      <div class=\"col-6 text-right-sm\">\n                        <p>\n                          <span class=\"text-label-small m-r-4\" translate> Tenant ID </span>\n                          {{ appRowControl.value.app.owner.tenant.id }}\n                        </p>\n                        <!-- TODO: uncomment when company name is available\n                            <p>\n                            <span class=\"text-label-small m-r-4\" translate>Company</span>\n                            <small class=\"text-muted\">company name</small>\n                          </p> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div\n                class=\"\n                  col-sm-3 col-xs-3\n                  bg-gray-white\n                  separator-bottom\n                  d-flex\n                  j-c-center\n                  a-i-center\n                \"\n              >\n                <label\n                  class=\"c8y-checkbox\"\n                  [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnCreation.disabled }\"\n                >\n                  <input type=\"checkbox\" formControlName=\"subscribedOnCreation\" />\n                  <span *ngIf=\"!appRowControl.controls.subscribedOnCreation.disabled\"></span>\n                  <span\n                    *ngIf=\"appRowControl.controls.subscribedOnCreation.disabled\"\n                    title=\"{{ disabledCheckboxHint | translate }}\"\n                  ></span>\n                </label>\n              </div>\n\n              <div\n                class=\"\n                  col-sm-3 col-xs-3\n                  bg-gray-white\n                  separator-bottom\n                  d-flex\n                  j-c-center\n                  a-i-center\n                \"\n              >\n                <label\n                  class=\"c8y-checkbox\"\n                  [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnUpgrade.disabled }\"\n                >\n                  <input type=\"checkbox\" formControlName=\"subscribedOnUpgrade\" />\n                  <span *ngIf=\"!appRowControl.controls.subscribedOnUpgrade.disabled\"></span>\n                  <span\n                    *ngIf=\"appRowControl.controls.subscribedOnUpgrade.disabled\"\n                    title=\"{{ disabledCheckboxHint | translate }}\"\n                  ></span>\n                </label>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"card-footer separator\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || form.pristine\"\n        title=\"{{ 'Save default subscriptions' | translate }}\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: ɵngcc3.FormBuilder }, { type: DefaultSubscriptionsService }, { type: ɵngcc2.AlertService }]; }, null); })();

class DefaultSubscriptionsGuard {
    constructor(tenantUiService) {
        this.tenantUiService = tenantUiService;
    }
    /**
     * Checks if default subscriptions feature should be active,
     * i.e. whether the current tenant is the management or an enterprise tenant.
     * **Note: the check is executed only once in the runtime.**
     *
     * @returns True, if the feature should be active.
     */
    canActivate() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.active === undefined) {
                this.active =
                    (yield this.tenantUiService.isManagementTenant()) ||
                        (yield this.tenantUiService.isEnterpriseTenant());
            }
            return this.active;
        });
    }
}
DefaultSubscriptionsGuard.ɵfac = function DefaultSubscriptionsGuard_Factory(t) { return new (t || DefaultSubscriptionsGuard)(ɵngcc0.ɵɵinject(ɵngcc2.TenantUiService)); };
DefaultSubscriptionsGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DefaultSubscriptionsGuard, factory: DefaultSubscriptionsGuard.ɵfac });
DefaultSubscriptionsGuard.ctorParameters = () => [
    { type: TenantUiService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.TenantUiService }]; }, null); })();

class DefaultSubscriptionsNavigationFactory {
    constructor(defaultSubscriptionsGuard) {
        this.defaultSubscriptionsGuard = defaultSubscriptionsGuard;
        this.navNode = new NavigatorNode({
            label: gettext('Default subscriptions'),
            path: '/default-subscriptions',
            icon: 'c8y-c8y-data',
            parent: gettext('Ecosystem'),
            priority: 100
        });
    }
    /** Returns the navigation node if the feature is active. */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.defaultSubscriptionsGuard.canActivate()) {
                return this.navNode;
            }
        });
    }
}
DefaultSubscriptionsNavigationFactory.ɵfac = function DefaultSubscriptionsNavigationFactory_Factory(t) { return new (t || DefaultSubscriptionsNavigationFactory)(ɵngcc0.ɵɵinject(DefaultSubscriptionsGuard)); };
DefaultSubscriptionsNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DefaultSubscriptionsNavigationFactory, factory: DefaultSubscriptionsNavigationFactory.ɵfac });
DefaultSubscriptionsNavigationFactory.ctorParameters = () => [
    { type: DefaultSubscriptionsGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: DefaultSubscriptionsGuard }]; }, null); })();

const ɵ0 = [
    {
        path: 'default-subscriptions',
        component: DefaultSubscriptionsComponent,
        canActivate: [DefaultSubscriptionsGuard]
    }
];
class DefaultSubscriptionsModule {
}
DefaultSubscriptionsModule.ɵfac = function DefaultSubscriptionsModule_Factory(t) { return new (t || DefaultSubscriptionsModule)(); };
DefaultSubscriptionsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DefaultSubscriptionsModule });
DefaultSubscriptionsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        DefaultSubscriptionsService,
        DefaultSubscriptionsGuard,
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: DefaultSubscriptionsNavigationFactory,
            multi: true
        },
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[CoreModule, ReactiveFormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultSubscriptionsModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, ReactiveFormsModule],
                declarations: [DefaultSubscriptionsComponent],
                entryComponents: [DefaultSubscriptionsComponent],
                exports: [DefaultSubscriptionsComponent],
                providers: [
                    DefaultSubscriptionsService,
                    DefaultSubscriptionsGuard,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DefaultSubscriptionsNavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DefaultSubscriptionsModule, { declarations: function () { return [DefaultSubscriptionsComponent]; }, imports: function () { return [CoreModule, ReactiveFormsModule]; }, exports: function () { return [DefaultSubscriptionsComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DefaultSubscriptionsComponent, DefaultSubscriptionsContext, DefaultSubscriptionsModule, DefaultSubscriptionsService, ɵ0, DefaultSubscriptionsGuard as ɵa, DefaultSubscriptionsNavigationFactory as ɵb };

//# sourceMappingURL=c8y-ngx-components-default-subscriptions.js.map