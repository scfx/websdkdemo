{"version":3,"file":"c8y-ngx-components-app-logs.js","sources":["../../app-logs/app-logs.service.ts","../../app-logs/app-logs-auto-refresh.component.ts","../../app-logs/app-logs-auto-refresh.module.ts","../../app-logs/c8y-ngx-components-app-logs.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LogsJSON } from './logs.model';\nimport { FetchClient, IFetchOptions } from '@c8y/client';\nimport { Observable, from } from 'rxjs';\nimport { flatMap } from 'rxjs/operators';\n\ninterface RequestParams {\n  dateFrom?;\n  dateTo?;\n  limit?;\n}\n\n@Injectable()\nexport class AppLogsService {\n  private BASE_PATH_APPLICATION: string = 'application/applications';\n  private header: any;\n\n  constructor(private client: FetchClient) {\n    this.header = {\n      Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'\n    };\n  }\n\n  getLogs$(appId: string, instanceName: string, params: RequestParams = {}): Observable<LogsJSON> {\n    const url = `${this.BASE_PATH_APPLICATION}/${appId}/logs/${instanceName}`;\n    const defaultConfig: IFetchOptions = {\n      headers: this.header,\n      method: 'GET'\n    };\n    const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;\n    const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;\n    const modifiedParams = {\n      ...params,\n      ...(formattedDateFrom && { dateFrom: formattedDateFrom }),\n      ...(formattedDateTo && { dateTo: formattedDateTo })\n    };\n\n    const config = params ? { ...defaultConfig, params: modifiedParams } : { ...defaultConfig };\n    return from(this.client.fetch(url, config)).pipe(flatMap(res => res.json()));\n  }\n\n  formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { LogsJSON } from './logs.model';\nimport { AppLogsService } from './app-logs.service';\nimport { Observable, fromEvent, Subject, of, interval, NEVER, Subscription } from 'rxjs';\nimport {\n  filter,\n  catchError,\n  tap,\n  debounce,\n  switchMap,\n  takeUntil,\n  finalize,\n  delay,\n  repeat,\n  merge,\n  scan\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-app-logs-auto-refresh',\n  templateUrl: './app-logs-auto-refresh.component.html'\n})\nexport class AppLogsAutoRefreshComponent {\n  cancel$: Subject<boolean> = new Subject<boolean>();\n  isAutoRefreshDisabled: boolean = false;\n  logsToOutput: LogsJSON = this.getEmptyLogsJson();\n  isAutoRefreshOn: boolean = true;\n\n  @Input() selectedInstance: any;\n  @Input() mo: any;\n  @Input() set buttonsDisabled(areDisabled: boolean) {\n    this.isAutoRefreshDisabled = areDisabled;\n    if (areDisabled && this.isAutoRefreshOn) {\n      this.isAutoRefreshOn = false;\n      this.cancel$.next(false);\n    }\n  }\n  @Output() onNewLogs = new EventEmitter<LogsJSON>();\n  @Output() isRealtimeEnabled = new EventEmitter<boolean>();\n  @ViewChild('autoRefresh', { static: true }) button: ElementRef;\n\n  private subscription: Subscription;\n\n  constructor(private appLogsService: AppLogsService) {}\n\n  ngAfterViewInit() {\n    const clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(\n      merge(this.cancel$),\n      debounce(() => interval(300)),\n      scan(this.toggleState, false),\n      tap(isAutoRefreshOn => this.setButtonState(isAutoRefreshOn)),\n      switchMap(isOn => (isOn ? this.watchForNewLogs() : NEVER))\n    );\n    this.subscription = clicks$.subscribe();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  private toggleState = currentState => !currentState;\n\n  private setButtonState(isAutoRefreshOn: boolean) {\n    this.isAutoRefreshOn = isAutoRefreshOn;\n    this.isRealtimeEnabled.emit(isAutoRefreshOn);\n  }\n\n  private watchForNewLogs() {\n    return this.startPolling().pipe(\n      takeUntil(this.cancel$.pipe(filter(isAutoRefreshOn => isAutoRefreshOn === false))),\n      finalize(() => {\n        this.isAutoRefreshOn = false;\n      })\n    );\n  }\n\n  private startPolling() {\n    return of(1).pipe(\n      switchMap(() => this.getNewLogs().pipe(catchError(er => of(this.getEmptyLogsJson())))),\n      tap(logs => this.updateLogsToOutput(logs)),\n      delay(10000),\n      repeat()\n    );\n  }\n\n  private getNewLogs(): Observable<LogsJSON> {\n    return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());\n  }\n\n  private getAppId(): string {\n    return this.mo.applicationId;\n  }\n  private getInstanceName(): string {\n    return this.selectedInstance.name;\n  }\n\n  private updateLogsToOutput(newLogs) {\n    const { dateFrom, dateTo } = newLogs;\n    if (dateFrom && dateTo) {\n      this.logsToOutput = { ...newLogs };\n      this.onNewLogs.emit(this.logsToOutput);\n    }\n  }\n\n  private getEmptyLogsJson(): LogsJSON {\n    return {\n      dateFrom: null,\n      dateTo: null,\n      logs: '',\n      truncated: false\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@c8y/ngx-components';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { AppLogsAutoRefreshComponent } from './app-logs-auto-refresh.component';\nimport { AppLogsService } from './app-logs.service';\n\n@NgModule({\n  declarations: [AppLogsAutoRefreshComponent],\n  exports: [AppLogsAutoRefreshComponent],\n  imports: [CommonModule, ButtonsModule],\n  entryComponents: [AppLogsAutoRefreshComponent],\n  providers: [AppLogsService]\n})\nexport class AppLogsAutoRefreshModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}