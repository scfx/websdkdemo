{"version":3,"file":"c8y-ngx-components-connectivity.js","sources":["../../connectivity/abstract-connectivity-tab.factory.ts","../../connectivity/abstract-connectivity-node.factory.ts","../../connectivity/actility/actility.guard.ts","../../connectivity/actility/actility-tab.factory.ts","../../connectivity/actility/actility-node.factory.ts","../../connectivity/actility/actility.module.ts","../../connectivity/impact/impact-connectivity.service.ts","../../connectivity/impact/impact.guard.ts","../../connectivity/impact/impact-tab.factory.ts","../../connectivity/impact/impact-node.factory.ts","../../connectivity/impact/impact.model.ts","../../connectivity/impact/impact-provider-settings.component.ts","../../connectivity/impact/status-display.component.ts","../../connectivity/impact/impact.module.ts","../../connectivity/sigfox/sigfox.guard.ts","../../connectivity/sigfox/sigfox-tab.factory.ts","../../connectivity/sigfox/sigfox-node.factory.ts","../../connectivity/sigfox/sigfox.module.ts","../../connectivity/connectivity.module.ts","../../connectivity/sim/sim.guard.ts","../../connectivity/sim/sim.module.ts","../../connectivity/c8y-ngx-components-connectivity.ts"],"names":[],"mappings":"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","sourcesContent":["import { CanActivate, Router } from '@angular/router';\nimport { Tab, TabFactory, toObservable } from '@c8y/ngx-components';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport abstract class AbstractConnectivityTabFactory implements TabFactory {\n  constructor(protected router: Router, protected guard: CanActivate) {}\n\n  get() {\n    return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];\n  }\n\n  tab(): Tab | Observable<Tab> {\n    return toObservable(\n      this.guard.canActivate(\n        this.router.routerState.snapshot.root,\n        this.router.routerState.snapshot\n      )\n    ).pipe(map(canActivate => (canActivate ? this.config() : null)));\n  }\n\n  protected abstract config(): Tab;\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory, toObservable } from '@c8y/ngx-components';\nimport { map } from 'rxjs/operators';\nimport { AbstractConnectivityTabFactory } from './abstract-connectivity-tab.factory';\n\n@Injectable()\nexport abstract class AbstractConnectivityNodeFactory implements NavigatorNodeFactory {\n  protected readonly connectivityNode: NavigatorNode = new NavigatorNode({\n    parent: gettext('Settings'),\n    label: gettext('Connectivity'),\n    path: 'connectivitySettings',\n    icon: 'plug',\n    preventDuplicates: true\n  });\n\n  constructor(protected tabFactory: AbstractConnectivityTabFactory) {}\n\n  get() {\n    return toObservable(this.tabFactory.tab()).pipe(\n      map(tab => {\n        return !!tab ? [this.connectivityNode] : [];\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class ActilityGuard implements CanActivate {\n  private static readonly applicationName = 'actility';\n  private showActilityProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showActilityProvider === undefined) {\n      this.showActilityProvider = this.applicationService\n        .isAvailable(ActilityGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showActilityProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab } from '@c8y/ngx-components';\nimport { AbstractConnectivityTabFactory } from '../abstract-connectivity-tab.factory';\nimport { ActilityGuard } from './actility.guard';\n\n@Injectable()\nexport class ActilityTabFactory extends AbstractConnectivityTabFactory {\n  private tabConfig: Tab = {\n    label: gettext('Actility LoRa provider settings'),\n    path: '/connectivitySettings/actility_lora_provider_settings',\n    icon: 'c8y-device'\n  };\n\n  constructor(protected router: Router, protected guard: ActilityGuard) {\n    super(router, guard);\n  }\n\n  protected config(): Tab {\n    return this.tabConfig;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractConnectivityNodeFactory } from '../abstract-connectivity-node.factory';\nimport { ActilityTabFactory } from './actility-tab.factory';\n\n@Injectable()\nexport class ActilityNodeFactory extends AbstractConnectivityNodeFactory {\n  constructor(protected tabFactory: ActilityTabFactory) {\n    super(tabFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HOOK_NAVIGATOR_NODES, HOOK_TABS } from '@c8y/ngx-components';\nimport { ActilityNodeFactory } from './actility-node.factory';\nimport { ActilityTabFactory } from './actility-tab.factory';\nimport { ActilityGuard } from './actility.guard';\n\n@NgModule({\n  providers: [\n    ActilityGuard,\n    ActilityTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: ActilityNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: ActilityTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class ActilityModule {}\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { ImpactOptions } from './impact.model';\n\n@Injectable()\nexport class ImpactConnectivityService {\n  private readonly microserviceUrl: string = '/service/impact/connectivity';\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(private client: FetchClient) {}\n\n  getOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  updateOptions(impactOptions: ImpactOptions): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.header,\n      body: JSON.stringify(impactOptions)\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  deleteOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'DELETE',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class ImpactGuard implements CanActivate {\n  private static readonly applicationName = 'impact';\n  private showImpactProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showImpactProvider === undefined) {\n      this.showImpactProvider = this.applicationService\n        .isAvailable(ImpactGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showImpactProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab, TabFactory, toObservable } from '@c8y/ngx-components';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ImpactGuard } from './impact.guard';\n\n@Injectable()\nexport class ImpactTabFactory implements TabFactory {\n  private config: Tab = {\n    label: gettext('IMPACT provider settings'),\n    path: '/connectivitySettings/impact_provider_settings',\n    icon: 'plug'\n  };\n\n  constructor(private router: Router, private guard: ImpactGuard) {}\n\n  get() {\n    return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];\n  }\n\n  tab(): Tab | Observable<Tab> {\n    return toObservable(\n      this.guard.canActivate(\n        this.router.routerState.snapshot.root,\n        this.router.routerState.snapshot\n      )\n    ).pipe(map(canActivate => (canActivate ? this.config : null)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory, toObservable } from '@c8y/ngx-components';\nimport { map } from 'rxjs/operators';\nimport { ImpactTabFactory } from './impact-tab.factory';\n\n@Injectable()\nexport class ImpactNodeFactory implements NavigatorNodeFactory {\n  private readonly connectivityNode: NavigatorNode = new NavigatorNode({\n    parent: gettext('Settings'),\n    label: gettext('Connectivity'),\n    path: 'connectivitySettings',\n    icon: 'plug',\n    preventDuplicates: true\n  });\n\n  constructor(private tabFactory: ImpactTabFactory) {}\n\n  get() {\n    return toObservable(this.tabFactory.tab()).pipe(\n      map(tab => {\n        return !!tab ? [this.connectivityNode] : [];\n      })\n    );\n  }\n}\n","export interface ImpactOptions {\n  baseUrl: string;\n  user: string;\n  password: string;\n  groupName: string;\n  callbackUrl: string;\n  initializeDevices: boolean;\n}\n\nexport interface TenantConnectionStatusResponse {\n  status: TenantConnectionStatus;\n  options: ImpactOptions;\n}\n\nexport enum TenantConnectionStatus {\n  NO_CONNECTION = 'NO_CONNECTION',\n  CONNECTING_IN_PROGRESS = 'CONNECTING_IN_PROGRESS',\n  CONNECTED_SUCCESSFULLY = 'CONNECTED_SUCCESSFULLY',\n  CONNECTED_FAILED = 'CONNECTED_FAILED',\n  UNKNOWN = 'UNKNOWN'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IFetchResponse } from '@c8y/client';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { ImpactConnectivityService } from './impact-connectivity.service';\nimport {\n  ImpactOptions,\n  TenantConnectionStatus,\n  TenantConnectionStatusResponse\n} from './impact.model';\n\n@Component({\n  selector: 'c8y-impact-provider-settings',\n  templateUrl: './impact-provider-settings.component.html'\n})\nexport class ImpactProviderSettingsComponent implements OnInit {\n  connectionStatus: TenantConnectionStatusResponse;\n  formGroup: FormGroup;\n\n  isEdit: boolean = false;\n  credentialsExist: boolean = false;\n\n  constructor(\n    private impactService: ImpactConnectivityService,\n    private formBuilder: FormBuilder,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.initForm();\n    const response: IFetchResponse = await this.impactService.getOptions();\n    this.connectionStatus = await response.json();\n\n    if (this.connectionStatus && this.connectionStatus.options) {\n      this.formGroup.patchValue({ ...this.connectionStatus.options });\n      this.credentialsExist = true;\n    } else {\n      this.isEdit = true;\n    }\n  }\n\n  replaceCredentials(): void {\n    this.isEdit = true;\n  }\n\n  async saveCredentials() {\n    if (this.formGroup.valid) {\n      this.connectionStatus.status = TenantConnectionStatus.CONNECTING_IN_PROGRESS;\n      const updated: boolean = await this.safelyUpdateCredentials(this.formGroup.value);\n\n      if (updated) {\n        const response: IFetchResponse = await this.impactService.getOptions();\n        this.connectionStatus = await response.json();\n\n        if (this.connectionStatus.status === TenantConnectionStatus.CONNECTED_SUCCESSFULLY) {\n          this.isEdit = false;\n        }\n\n        this.alert.success(gettext('Credentials saved.'));\n      } else {\n        this.connectionStatus.status = TenantConnectionStatus.UNKNOWN;\n      }\n    }\n  }\n\n  async deleteCredentials() {\n    try {\n      await this.modal.confirm(\n        gettext('Delete credentials'),\n        gettext(\n          'You are about to delete your IMPACT credentials. Deleting credentials will break connection to IMPACT instance. Do you want to proceed?'\n        ),\n        Status.DANGER,\n        { ok: gettext('Delete'), cancel: gettext('Cancel') }\n      );\n      await this.safelyDeleteCredentials();\n    } catch (ex) {\n      // Intentionally empty\n    }\n  }\n\n  private initForm(): void {\n    this.formGroup = this.formBuilder.group({\n      baseUrl: [],\n      user: ['', Validators.required],\n      password: ['', Validators.required],\n      groupName: [],\n      initializeDevices: [false]\n    });\n  }\n\n  private resetForm(): void {\n    this.formGroup.reset();\n  }\n\n  private async safelyUpdateCredentials(options: ImpactOptions): Promise<boolean> {\n    try {\n      const res = await this.impactService.updateOptions(options);\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n\n        return Promise.resolve(false);\n      } else {\n        return Promise.resolve(true);\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n\n      return Promise.resolve(false);\n    }\n  }\n\n  private async safelyDeleteCredentials() {\n    try {\n      const res = await this.impactService.deleteOptions();\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n      } else {\n        this.credentialsExist = false;\n        this.resetForm();\n        this.connectionStatus = null;\n        this.alert.success(gettext('Credentials deleted.'));\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { TenantConnectionStatus } from './impact.model';\n\n@Component({\n  selector: 'c8y-status-display',\n  templateUrl: './status-display.component.html'\n})\nexport class StatusDisplayComponent {\n  @Input() baseUrl: string;\n\n  icon: string;\n  statusName: string;\n\n  @Input() set status(status: TenantConnectionStatus) {\n    switch (status) {\n      case TenantConnectionStatus.CONNECTED_SUCCESSFULLY:\n        this.icon = 'success';\n        this.statusName = gettext('Connected successfully');\n        break;\n      case TenantConnectionStatus.CONNECTED_FAILED:\n        this.icon = 'failed';\n        this.statusName = gettext('Connection failed');\n        break;\n      case TenantConnectionStatus.CONNECTING_IN_PROGRESS:\n        this.icon = 'connecting';\n        this.statusName = gettext('Connection in progress');\n        break;\n      case TenantConnectionStatus.NO_CONNECTION:\n        this.icon = 'no-connection';\n        this.statusName = gettext('No connection');\n        break;\n      default:\n        this.icon = 'unknown';\n        this.statusName = gettext('Unknown`connection status`');\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CommonModule,\n  CoreModule,\n  FormsModule,\n  HOOK_NAVIGATOR_NODES,\n  HOOK_TABS,\n  Route\n} from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { ImpactConnectivityService } from './impact-connectivity.service';\nimport { ImpactNodeFactory } from './impact-node.factory';\nimport { ImpactProviderSettingsComponent } from './impact-provider-settings.component';\nimport { ImpactTabFactory } from './impact-tab.factory';\nimport { ImpactGuard } from './impact.guard';\nimport { StatusDisplayComponent } from './status-display.component';\n\nconst impactRoutes: Route[] = [\n  {\n    path: 'connectivitySettings/impact_provider_settings',\n    component: ImpactProviderSettingsComponent,\n    canActivate: [ImpactGuard]\n  }\n];\n\n@NgModule({\n  declarations: [ImpactProviderSettingsComponent, StatusDisplayComponent],\n  exports: [ImpactProviderSettingsComponent],\n  imports: [\n    CoreModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(impactRoutes),\n    PopoverModule,\n    ReactiveFormsModule\n  ],\n  entryComponents: [ImpactProviderSettingsComponent],\n  providers: [\n    ImpactConnectivityService,\n    ImpactGuard,\n    ImpactTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: ImpactNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: ImpactTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class ImpactModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class SigfoxGuard implements CanActivate {\n  private static readonly applicationName = 'sigfox-agent';\n  private showSigfoxProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSigfoxProvider === undefined) {\n      this.showSigfoxProvider = this.applicationService\n        .isAvailable(SigfoxGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showSigfoxProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab } from '@c8y/ngx-components';\nimport { AbstractConnectivityTabFactory } from '../abstract-connectivity-tab.factory';\nimport { SigfoxGuard } from './sigfox.guard';\n\n@Injectable()\nexport class SigfoxTabFactory extends AbstractConnectivityTabFactory {\n  private tabConfig: Tab = {\n    label: gettext('Sigfox provider settings'),\n    path: '/connectivitySettings/sigfox_provider_settings',\n    icon: 'c8y-device'\n  };\n\n  constructor(protected router: Router, protected guard: SigfoxGuard) {\n    super(router, guard);\n  }\n\n  protected config(): Tab {\n    return this.tabConfig;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractConnectivityNodeFactory } from '../abstract-connectivity-node.factory';\nimport { SigfoxTabFactory } from './sigfox-tab.factory';\n\n@Injectable()\nexport class SigfoxNodeFactory extends AbstractConnectivityNodeFactory {\n  constructor(protected tabFactory: SigfoxTabFactory) {\n    super(tabFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HOOK_NAVIGATOR_NODES, HOOK_TABS } from '@c8y/ngx-components';\nimport { SigfoxNodeFactory } from './sigfox-node.factory';\nimport { SigfoxTabFactory } from './sigfox-tab.factory';\nimport { SigfoxGuard } from './sigfox.guard';\n\n@NgModule({\n  providers: [\n    SigfoxGuard,\n    SigfoxTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: SigfoxNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: SigfoxTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class SigfoxModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ConditionalTabsOutletComponent, CoreModule, Route } from '@c8y/ngx-components';\nimport { ActilityModule } from './actility/actility.module';\nimport { ImpactModule } from './impact/impact.module';\nimport { SigfoxModule } from './sigfox/sigfox.module';\n\nconst connectivityRoutes: Route[] = [\n  {\n    path: 'connectivitySettings',\n    component: ConditionalTabsOutletComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    CoreModule,\n    ActilityModule,\n    ImpactModule,\n    SigfoxModule,\n    RouterModule.forChild(connectivityRoutes)\n  ]\n})\nexport class ConnectivityModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SimGuard implements CanActivate {\n  private static readonly applicationName = 'connectivity';\n  private showSimProvider: Promise<boolean>;\n\n  constructor(private permissions: Permissions, private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSimProvider === undefined) {\n      const hasRole: Promise<boolean> = Promise.resolve(\n        this.permissions.hasRole('ROLE_CONNECTIVITY_READ')\n      );\n\n      this.showSimProvider = hasRole.then(\n        (hasPermissions: boolean) =>\n          hasPermissions &&\n          this.applicationService\n            .isAvailable(SimGuard.applicationName)\n            .then(result => result && result.data)\n      );\n    }\n\n    return this.showSimProvider;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  DroppedFile,\n  gettext,\n  ProviderConfigurationModule,\n  ProviderProperties\n} from '@c8y/ngx-components';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { get } from 'lodash-es';\nimport { SimGuard } from './sim.guard';\n\nexport async function encodeFiles(\n  model: ProviderProperties,\n  fields: FormlyFieldConfig[]\n): Promise<ProviderProperties> {\n  const result: ProviderProperties = { ...model };\n  const fileFields: FormlyFieldConfig[] = (get(fields, '[0].fieldGroup') || []).filter(\n    (field: FormlyFieldConfig) => {\n      return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';\n    }\n  );\n\n  for (const fileField of fileFields) {\n    const files: DroppedFile[] = model[fileField.key as string];\n    if (files && Array.isArray(files) && files.length) {\n      if (fileField.templateOptions.maxAllowedFiles === 1) {\n        result[fileField.key as string] = (await files[0].readAsDataURL()).replace(\n          /data:\\S+;base64,/gi,\n          ''\n        );\n      } else {\n        const encodedFileContent: string[] = [];\n\n        for (const file of files) {\n          encodedFileContent.push((await file.readAsDataURL()).replace(/data:\\S+;base64,/gi, ''));\n        }\n\n        result[fileField.key as string] = encodedFileContent;\n      }\n    } else if (typeof files === 'string' || files instanceof String) {\n      result[fileField.key as string] = files;\n    }\n  }\n  return result;\n}\n\n@NgModule({\n  providers: [SimGuard],\n  imports: [\n    ProviderConfigurationModule.config([\n      {\n        navigation: {\n          label: gettext('Connectivity'),\n          path: 'connectivitySettings',\n          icon: 'plug',\n          parent: gettext('Settings'),\n          priority: 1000,\n          preventDuplicates: true\n        },\n        tab: {\n          path: 'sim_provider_settings',\n          label: 'SIM provider settings',\n          icon: 'mobile',\n          canActivate: [SimGuard]\n        },\n        layout: {\n          pageTitle: gettext('Connectivity'),\n          cardTitle: gettext('Settings'),\n          description: gettext(\n            `In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`\n          ),\n          providerName: gettext('Provider'),\n          providerNamePlaceholder: gettext('Select or type to filter providers'),\n          providerNameNoMatchesHint: gettext('Select one of the existing providers.'),\n          deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],\n          deleteBtnLabel: gettext('Delete'),\n          saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],\n          saveBtnLabel: gettext('Save'),\n          beforeSaveHook: encodeFiles,\n          configurationUpdatedSuccessMsg: gettext('Settings updated.'),\n          deleteConfigurationModalTitle: gettext('Delete settings'),\n          deleteConfigurationModalBody: gettext(\n            `You are about to delete SIM provider settings. Do you want to proceed?`\n          ),\n          deleteConfigurationModalOkBtnLabel: gettext('Delete'),\n          configurationDeletedSuccessMsg: gettext('Settings deleted.')\n        },\n        endpoint: {\n          definitionsEndpoint: {\n            baseUrl: 'service/connectivity/metadata',\n            listUrl: 'definitions'\n          },\n          configurationEndpoint: {\n            baseUrl: 'service/connectivity/metadata',\n            listUrl: 'sim/provider'\n          }\n        }\n      }\n    ])\n  ]\n})\nexport class SimModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}