import { Component, Injectable, NgModule } from '@angular/core';
import { CustomDeviceGridColumn, DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { gettext, OptionsService, NavigatorNode, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { find } from 'lodash-es';
import { __awaiter } from 'tslib';
import { RouterModule } from '@angular/router';

class DeviceGridExampleComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    getExampleWithStandardColumns() {
        const columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns
        };
    }
    getExampleWithStandardColumnsAndSavedFilteringSorting() {
        const columns = this.deviceGridService.getDefaultColumns();
        const nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns
        };
    }
    getExampleWithCustomColumnAndPredefinedFiltering() {
        const columns = this.deviceGridService.getDefaultColumns();
        const typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns
        };
    }
    onExampleSelect(example) {
        this.columnsInput = example.columns;
    }
}
DeviceGridExampleComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-grid-example',
                template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
DeviceGridExampleComponent.ctorParameters = () => [
    { type: DeviceGridService }
];

class DeviceGridExampleGuard {
    constructor(optionsService) {
        this.optionsService = optionsService;
    }
    canActivate(route, state) {
        // FIXME: not entirely correct but enough for testing (see beta provider isActivatedFor)
        return Boolean(this.optionsService.get('beta', false));
    }
}
DeviceGridExampleGuard.decorators = [
    { type: Injectable }
];
DeviceGridExampleGuard.ctorParameters = () => [
    { type: OptionsService }
];

class DeviceGridExampleNavigationFactory {
    constructor(deviceGridExampleGuard) {
        this.deviceGridExampleGuard = deviceGridExampleGuard;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nav && this.deviceGridExampleGuard.canActivate(null, null)) {
                this.nav = new NavigatorNode({
                    label: gettext('Grids'),
                    icon: 'table'
                });
                this.nav.add(new NavigatorNode({
                    label: gettext('Device grid'),
                    path: '/grids/device-grid',
                    icon: 'table'
                }));
            }
            return this.nav;
        });
    }
}
DeviceGridExampleNavigationFactory.decorators = [
    { type: Injectable }
];
DeviceGridExampleNavigationFactory.ctorParameters = () => [
    { type: DeviceGridExampleGuard }
];

const routes = [
    {
        path: 'grids/device-grid',
        component: DeviceGridExampleComponent,
        canActivate: [DeviceGridExampleGuard]
    }
];
class DeviceGridExampleModule {
}
DeviceGridExampleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    DeviceGridModule,
                    RouterModule.forRoot(routes, { useHash: true })
                ],
                declarations: [DeviceGridExampleComponent],
                entryComponents: [DeviceGridExampleComponent],
                exports: [],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DeviceGridExampleNavigationFactory,
                        multi: true
                    },
                    DeviceGridExampleGuard
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceGridExampleComponent, DeviceGridExampleGuard, DeviceGridExampleModule, DeviceGridExampleNavigationFactory };
//# sourceMappingURL=c8y-ngx-components-device-grid-example.js.map
