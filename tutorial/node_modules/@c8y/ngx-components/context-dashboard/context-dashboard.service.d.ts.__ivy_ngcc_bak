import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { IManagedObject, InventoryService, UserService } from '@c8y/client';
import { AppStateService, ModalService, NavigatorService, TabsService, Widget, Permissions } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { ContextDashboard, ContextDashboardManagedObject, ContextDashboardType } from './context-dashboard.model';
export declare class ContextDashboardService {
    private inventory;
    private tabs;
    private modal;
    private translateService;
    private router;
    private user;
    private appState;
    private navigator;
    private permissions;
    readonly REPORT_PARTIAL_NAME = "report_";
    private cache;
    private readonly DEFAULT_PAGESIZE;
    private readonly FRAGMENT_NAME;
    private readonly DASHBOARD_ROUTE_PATH;
    private readonly INDEX_SPLIT;
    private currentContextRoute;
    private _formDisabled;
    get formDisabled(): boolean;
    set formDisabled(value: boolean);
    constructor(inventory: InventoryService, tabs: TabsService, modal: ModalService, translateService: TranslateService, router: Router, user: UserService, appState: AppStateService, navigator: NavigatorService, permissions: Permissions);
    create(dashboardCfg: ContextDashboard, context?: {
        contextData: any;
    }, name?: string): Promise<ContextDashboardManagedObject>;
    detail(dashboardMO: ContextDashboardManagedObject): Promise<IManagedObject>;
    update(dashboard: ContextDashboardManagedObject): Promise<IManagedObject>;
    delete(dashboard: ContextDashboardManagedObject, withConfirmation?: boolean): Promise<void>;
    activateDashboards(route: ActivatedRouteSnapshot, types: ContextDashboardType[]): import("rxjs").Observable<boolean> | import("rxjs").Observable<{
        icon: string;
        path: string;
        label: string;
        priority: number;
        hide: any;
    }[]>;
    getNamedDashboardOrCreate(name: string, defaultWidgets: Widget[], context?: {
        contextData: any;
    }): import("rxjs").Observable<ContextDashboardManagedObject>;
    refreshTabs(dashboardMO: ContextDashboardManagedObject): Promise<void>;
    updateNavigatorItem(mo: IManagedObject): void;
    navigateToDashboard(dashboardMO: ContextDashboardManagedObject): Promise<void>;
    canEditDashboard(mo: any): Promise<boolean>;
    isNamed(dashboard: Partial<ContextDashboardManagedObject>): any;
    isReport(dashboard: Partial<ContextDashboardManagedObject>): any;
    isDeviceType(dashboard: Partial<ContextDashboardManagedObject>): any;
    getFilteredDashboardStyles(styleList: string[]): string[];
    getStyling(styleList: any, styleName: any, defaultValue: any): any;
    mapWidgets(widgets: Widget[]): any;
    getDashboard$(dashboardIdOrName: any, dashboardType: ContextDashboardType[], mo?: IManagedObject): import("rxjs").Observable<ContextDashboardManagedObject>;
    private getTabs$;
    private getContextDashboards$;
    private setBaseContextRoute;
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    private removeDashboardMoProperty;
    private cacheDashboard;
    private createDashboardTab;
    private clean;
    private getNamedDashboard;
    private getContextDashboards;
    private createDashboardFragment;
    private getDashboardTypeFromViewContext;
    private createFragmentKey;
    private shouldSetGlobal;
}
