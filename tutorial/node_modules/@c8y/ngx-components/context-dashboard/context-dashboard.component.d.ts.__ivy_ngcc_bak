import { OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AlertService, BreadcrumbItem, DashboardChildChange, DashboardSettings, DynamicComponentDefinition, GainsightService, Widget, WidgetChange } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ContextDashboard, ContextDashboardConfig, ContextDashboardManagedObject } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { WidgetService } from './widget.service';
import { IManagedObject, InventoryService } from '@c8y/client';
/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
export declare class ContextDashboardComponent implements OnInit, OnDestroy {
    private route;
    private router;
    private contextDashboardService;
    private alert;
    private renderer;
    moduleConfig: ContextDashboardConfig;
    private widgetService;
    private bsModal;
    private inventory;
    private gainsightService;
    name: string;
    childrenClasses: string;
    context: any;
    setTitle: boolean;
    disabled: boolean;
    defaultWidgets: Widget[];
    canDelete: boolean;
    isLoading: boolean;
    breadcrumbSettings: BreadcrumbItem;
    class: string;
    widgets: Widget[];
    mo: ContextDashboardManagedObject;
    dashboard: ContextDashboard;
    title: string;
    private dataSub;
    constructor(route: ActivatedRoute, router: Router, contextDashboardService: ContextDashboardService, alert: AlertService, renderer: Renderer2, moduleConfig: ContextDashboardConfig, widgetService: WidgetService, bsModal: BsModalService, inventory: InventoryService, gainsightService: GainsightService);
    ngOnInit(): void;
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget: any): void;
    /**
     * Removes the route listener.
     */
    ngOnDestroy(): void;
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore(): Promise<void>;
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child: DashboardChildChange): Promise<IManagedObject>;
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard(): Promise<void>;
    /**
     * Edits the current dashboard
     */
    editDashboard(): Promise<void>;
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change: WidgetChange): Promise<void>;
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected?: DynamicComponentDefinition): Promise<void>;
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget: any): Promise<void>;
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change: WidgetChange): void;
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody(): void;
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody(): void;
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings: DashboardSettings): Promise<void>;
    private updateReport;
    private toggleIsFrozenFlag;
    private loadContextDashboard;
    private loadNamedDashboard;
    private onLoad;
    private mergeWidgetClasses;
    private componentToWidget;
    private addReportDashboardSettings;
}
