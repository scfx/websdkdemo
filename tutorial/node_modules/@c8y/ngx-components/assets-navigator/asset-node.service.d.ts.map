{"version":3,"file":"asset-node.service.d.ts","sources":["asset-node.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InventoryService, QueriesUtil, UserService, IManagedObject, IResult } from '@c8y/client';\nimport { AlertService, BreadcrumbService, ModalService, NavigatorNode, AppStateService, NavigatorNodeData } from '@c8y/ngx-components';\nimport { ApiService } from '@c8y/ngx-components/api';\nimport { AssetNode } from './asset-node';\nimport { AssetNavigatorConfig } from './asset-node-config.model';\nimport { DynamicGroupNode } from './dynamic-group-node';\nimport { DeviceGroupService } from './group.service';\nexport interface AssetNodeMo {\n    id: string;\n    type: string;\n}\nexport declare class AssetNodeService {\n    inventory: InventoryService;\n    groups: DeviceGroupService;\n    apiService: ApiService;\n    modal: ModalService;\n    alert: AlertService;\n    protected breadcrumbService: BreadcrumbService;\n    protected user: UserService;\n    protected appState: AppStateService;\n    moduleConfig: AssetNavigatorConfig;\n    rootNode: AssetNode;\n    firstUrl: boolean;\n    draggedData: AssetNode;\n    queriesUtil: QueriesUtil;\n    protected PAGE_SIZE: number;\n    constructor(inventory: InventoryService, groups: DeviceGroupService, apiService: ApiService, modal: ModalService, alert: AlertService, breadcrumbService: BreadcrumbService, user: UserService, appState: AppStateService, moduleConfig: AssetNavigatorConfig);\n    createRootNode(config?: NavigatorNodeData): AssetNode;\n    createDynamicGroupNode(config: any): DynamicGroupNode;\n    createAssetNode(config: any): AssetNode;\n    createChildNode(managedObject: any): AssetNode | DynamicGroupNode;\n    getRootNodes(customFilter?: any): Promise<any>;\n    getGroupItems(moId: string, extraFilter?: object): Promise<import(\"@c8y/client\").IResultList<IManagedObject>>;\n    getDynamicGroupItems(groupQuery: string, filterObj?: any): Promise<import(\"@c8y/client\").IResultList<IManagedObject>>;\n    getDeviceChildren(moId: string, extraFilter?: object): Promise<import(\"@c8y/client\").IResultList<IManagedObject>>;\n    groupQueryFilter(moId: string): string;\n    navRootQueryFilter(): {\n        __filter: {\n            type: string;\n        };\n        __orderby: any[];\n    };\n    rootQueryFilter(): {\n        __filter: {\n            type: string;\n        };\n        __orderby: any[];\n    };\n    onUpdate({ mo, root }: {\n        mo: any;\n        root: any;\n    }): import(\"rxjs\").Observable<any>;\n    isNewManagedObjectRoot(response?: Partial<IResult<IManagedObject>>): boolean;\n    /**\n     * There could be multiple breadcrumbs for devices,\n     * so we set a preferred one on click on a device.\n     * @param parents The parent nodes of the device to select the prefered one.\n     */\n    preferBreadcrumb(parents: NavigatorNode[]): void;\n    protected createFilter(extraParams?: any): any;\n    private buildCombinedQuery;\n}\n"]}