/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var CarouselConfig = /** @class */ (function () {
    function CarouselConfig() {
        /* Default interval of auto changing of slides */
        this.interval = 5000;
        /* Is loop of auto changing of slides can be paused */
        this.noPause = false;
        /* Is slides can wrap from the last to the first slide */
        this.noWrap = false;
        /* Show carousel-indicators */
        this.showIndicators = true;
        /* Slides can be paused on focus */
        this.pauseOnFocus = false;
        /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */
        this.indicatorsByChunk = false;
        /* If value more then 1 — carousel works in multilist mode */
        this.itemsPerSlide = 1;
        /* If `true` — carousel shifts by one element. By default carousel shifts by number
            of visible elements (itemsPerSlide field) */
        this.singleSlideOffset = false;
    }
    /** @nocollapse */ CarouselConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CarouselConfig_Factory() { return new CarouselConfig(); }, token: CarouselConfig, providedIn: "root" });
CarouselConfig.ɵfac = function CarouselConfig_Factory(t) { return new (t || CarouselConfig)(); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CarouselConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return CarouselConfig;
}());
export { CarouselConfig };
if (false) {
    /** @type {?} */
    CarouselConfig.prototype.interval;
    /** @type {?} */
    CarouselConfig.prototype.noPause;
    /** @type {?} */
    CarouselConfig.prototype.noWrap;
    /** @type {?} */
    CarouselConfig.prototype.showIndicators;
    /** @type {?} */
    CarouselConfig.prototype.pauseOnFocus;
    /** @type {?} */
    CarouselConfig.prototype.indicatorsByChunk;
    /** @type {?} */
    CarouselConfig.prototype.itemsPerSlide;
    /** @type {?} */
    CarouselConfig.prototype.singleSlideOffset;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29uZmlnLmpzIiwic291cmNlcyI6WyJuZ3gtYm9vdHN0cmFwL2Nhcm91c2VsL2Nhcm91c2VsLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFDQTtBQUdZLElBSFo7QUFDYztBQUdJLFFBQ2hCLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDbEI7QUFFSyxRQUFILFlBQU8sR0FBRyxLQUFLLENBQUM7QUFDbEI7QUFFSyxRQUFILFdBQU0sR0FBRyxLQUFLLENBQUM7QUFDakI7QUFFSyxRQUFILG1CQUFjLEdBQUcsSUFBSSxDQUFDO0FBQ3hCO0FBRUssUUFBSCxpQkFBWSxHQUFHLEtBQUssQ0FBQztBQUN2QjtBQUVLLFFBQUgsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzVCO0FBRUssUUFBSCxrQkFBYSxHQUFHLENBQUMsQ0FBQztBQUNwQjtBQUVLO0FBQ1EsUUFBWCxzQkFBaUIsR0FBRyxLQUFLLENBQUM7QUFDNUIsS0FBQyxBQXpCUTtrREFIUixVQUFVLFNBQUMsc0JBQ1YsVUFBVSxFQUFFLE1BQU0sa0JBQ25CLC9IQUNTOzs7Ozs7O2dEQU9hO0FBQUMseUJBWnhCO0FBQUUsQ0E4QkQsQUE1QkQsSUE0QkM7QUFDRCxTQTFCYSxjQUFjO0FBQzFCO0FBQWE7QUFBcUIsSUFDakMsa0NBQWdCO0FBQ2xCO0FBQ29CLElBQ2xCLGlDQUFnQjtBQUNsQjtBQUNvQixJQUNsQixnQ0FBZTtBQUNqQjtBQUNvQixJQUNsQix3Q0FBc0I7QUFDeEI7QUFDb0IsSUFDbEIsc0NBQXFCO0FBQ3ZCO0FBQ29CLElBQ2xCLDJDQUEwQjtBQUM1QjtBQUNvQixJQUNsQix1Q0FBa0I7QUFDcEI7QUFDb0IsSUFFbEIsMkNBQTBCO0FBQzVCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29uZmlnIHtcbiAgLyogRGVmYXVsdCBpbnRlcnZhbCBvZiBhdXRvIGNoYW5naW5nIG9mIHNsaWRlcyAqL1xuICBpbnRlcnZhbCA9IDUwMDA7XG5cbiAgLyogSXMgbG9vcCBvZiBhdXRvIGNoYW5naW5nIG9mIHNsaWRlcyBjYW4gYmUgcGF1c2VkICovXG4gIG5vUGF1c2UgPSBmYWxzZTtcblxuICAvKiBJcyBzbGlkZXMgY2FuIHdyYXAgZnJvbSB0aGUgbGFzdCB0byB0aGUgZmlyc3Qgc2xpZGUgKi9cbiAgbm9XcmFwID0gZmFsc2U7XG5cbiAgLyogU2hvdyBjYXJvdXNlbC1pbmRpY2F0b3JzICovXG4gIHNob3dJbmRpY2F0b3JzID0gdHJ1ZTtcblxuICAvKiBTbGlkZXMgY2FuIGJlIHBhdXNlZCBvbiBmb2N1cyAqL1xuICBwYXVzZU9uRm9jdXMgPSBmYWxzZTtcblxuICAvKiBJZiBgdHJ1ZWAgLSBjYXJvdXNlbCBpbmRpY2F0b3JzIGluZGljYXRlIHNsaWRlcyBjaHVua3Mgd29ya3MgT05MWSBpZiBzaW5nbGVTbGlkZU9mZnNldCA9IEZBTFNFICovXG4gIGluZGljYXRvcnNCeUNodW5rID0gZmFsc2U7XG5cbiAgLyogSWYgdmFsdWUgbW9yZSB0aGVuIDEg4oCUIGNhcm91c2VsIHdvcmtzIGluIG11bHRpbGlzdCBtb2RlICovXG4gIGl0ZW1zUGVyU2xpZGUgPSAxO1xuXG4gIC8qIElmIGB0cnVlYCDigJQgY2Fyb3VzZWwgc2hpZnRzIGJ5IG9uZSBlbGVtZW50LiBCeSBkZWZhdWx0IGNhcm91c2VsIHNoaWZ0cyBieSBudW1iZXJcbiAgICBvZiB2aXNpYmxlIGVsZW1lbnRzIChpdGVtc1BlclNsaWRlIGZpZWxkKSAqL1xuICBzaW5nbGVTbGlkZU9mZnNldCA9IGZhbHNlO1xufVxuIl19