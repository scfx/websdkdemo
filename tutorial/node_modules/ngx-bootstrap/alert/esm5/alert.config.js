/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var AlertConfig = /** @class */ (function () {
    function AlertConfig() {
        /**
         * default alert type
         */
        this.type = 'warning';
        /**
         * is alerts are dismissible by default
         */
        this.dismissible = false;
        /**
         * default time before alert will dismiss
         */
        this.dismissOnTimeout = undefined;
    }
    /** @nocollapse */ AlertConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function AlertConfig_Factory() { return new AlertConfig(); }, token: AlertConfig, providedIn: "root" });
AlertConfig.ɵfac = function AlertConfig_Factory(t) { return new (t || AlertConfig)(); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AlertConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return AlertConfig;
}());
export { AlertConfig };
if (false) {
    /**
     * default alert type
     * @type {?}
     */
    AlertConfig.prototype.type;
    /**
     * is alerts are dismissible by default
     * @type {?}
     */
    AlertConfig.prototype.dismissible;
    /**
     * default time before alert will dismiss
     * @type {?}
     */
    AlertConfig.prototype.dismissOnTimeout;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29uZmlnLmpzIiwic291cmNlcyI6WyJuZ3gtYm9vdHN0cmFwL2FsZXJ0L2FsZXJ0LmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFDQTtBQUdTLElBSFQ7QUFDVztBQUNUO0FBRUE7QUFBWSxRQUNaLFNBQUksR0FBRyxTQUFTLENBQUM7QUFDbkI7QUFDVztBQUNFO0FBRVosUUFGQyxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUN0QjtBQUNXO0FBQ0U7QUFBWSxRQUF2QixxQkFBZ0IsR0FBWSxTQUFTLENBQUM7QUFDeEMsS0FBQyxBQVRROytDQUhSLFVBQVUsU0FBQyxzQkFDVixVQUFVLEVBQUUsTUFBTSxrQkFDbkIsNUhBQ1M7Ozs7Ozs7Z0RBT2tDO0FBQUMsc0JBWjdDO0FBQUUsQ0FjRCxBQVpELElBWUM7QUFDRCxTQVZhLFdBQVc7QUFDdkI7QUFBYTtBQUFRO0FBRXRCO0FBQ2dCO0FBQVEsSUFGdEIsMkJBQWlCO0FBQ25CO0FBQ087QUFDRjtBQUFpQjtBQUVoQixJQUZKLGtDQUFvQjtBQUN0QjtBQUNPO0FBQ0Y7QUFBaUI7QUFBUSxJQUE1Qix1Q0FBc0M7QUFDeEM7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQWxlcnRDb25maWcge1xuICAvKiogZGVmYXVsdCBhbGVydCB0eXBlICovXG4gIHR5cGUgPSAnd2FybmluZyc7XG5cbiAgLyoqIGlzIGFsZXJ0cyBhcmUgZGlzbWlzc2libGUgYnkgZGVmYXVsdCAqL1xuICBkaXNtaXNzaWJsZSA9IGZhbHNlO1xuXG4gIC8qKiBkZWZhdWx0IHRpbWUgYmVmb3JlIGFsZXJ0IHdpbGwgZGlzbWlzcyAqL1xuICBkaXNtaXNzT25UaW1lb3V0PzogbnVtYmVyID0gdW5kZWZpbmVkO1xufVxuIl19