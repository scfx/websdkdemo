/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, InjectionToken } from '@angular/core';
/**
 * @template T
 */
import * as ɵngcc0 from '@angular/core';
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function (t) { return ModalOptions.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return ModalOptions;
}());
export { ModalOptions };
if (false) {
    /**
     *  Allow user to ID for the modal. Otherwise, a unique number will be given
     * @type {?}
     */
    ModalOptions.prototype.id;
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
    /**
     * Modal providers
     * @type {?}
     */
    ModalOptions.prototype.providers;
    /**
     * aria-labelledby attribute value to set on the modal window
     * @type {?}
     */
    ModalOptions.prototype.ariaLabelledBy;
    /**
     * aria-describedby attribute value to set on the modal window
     * @type {?}
     */
    ModalOptions.prototype.ariaDescribedby;
}
/** @type {?} */
export var modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export var MODAL_CONFIG_DEFAULT_OVERRIDE = new InjectionToken('override-default-config');
/** @type {?} */
export var CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export var SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export var TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export var DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc',
    BACK: 'browser-back-navigation-clicked'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3B0aW9ucy5jbGFzcy5qcyIsInNvdXJjZXMiOlsibmd4LWJvb3RzdHJhcC9tb2RhbC9tb2RhbC1vcHRpb25zLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0U7QUFBSTtBQUFlOztBQUVuQjtBQUNrQyxJQURsQztBQUNZLElBZ0RaLENBQUM7Z0RBakRBLFVBQVU7Ozs7Z0RBQ0w7QUFBQyxJQWdEUCxtQkFBQztBQUVELENBRkMsQUFqREQsSUFpREM7QUFDRCxTQWpEYSxZQUFZO0FBQUk7QUFDM0I7QUFDRTtBQUVKO0FBQ0U7QUFDRSxJQUZGLDBCQUFZO0FBQ2Q7QUFDRTtBQUNFO0FBRUo7QUFBaUI7QUFBUSxJQUF2QixnQ0FBOEI7QUFDaEM7QUFDRTtBQUNFO0FBQ1c7QUFFZixJQUZFLGdDQUFtQjtBQUNyQjtBQUVDLElBREMsNkJBQWdCO0FBQ2xCO0FBQ0U7QUFDRTtBQUNXO0FBQ1YsSUFESCw0QkFBZTtBQUNqQjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLDJDQUE4QjtBQUNoQztBQUNFO0FBQ0U7QUFDVztBQUNWLElBREgsNkJBQWU7QUFDakI7QUFDRTtBQUNFO0FBQ1c7QUFDZCxJQURDLGdDQUFtQjtBQUNyQjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLG9DQUEwQjtBQUM1QjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLGlDQUE2QjtBQUMvQjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLHNDQUF3QjtBQUMxQjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLHVDQUF5QjtBQUMzQjtBQUNBO0FBQ0EsTUFBTSxLQUFPLG1CQUFtQixHQUFpQjtBQUNqRCxJQUFFLFFBQVEsRUFBRSxJQUFJO0FBQ2hCLElBQUUsUUFBUSxFQUFFLElBQUk7QUFDaEIsSUFBRSxLQUFLLEVBQUUsSUFBSTtBQUNiLElBQUUsSUFBSSxFQUFFLEtBQUs7QUFDYixJQUFFLG1CQUFtQixFQUFFLEtBQUs7QUFDNUIsSUFBRSxLQUFLLEVBQUUsRUFBRTtBQUNYLElBQUUsUUFBUSxFQUFFLElBQUk7QUFDaEIsSUFBRSxZQUFZLEVBQUUsRUFBRTtBQUNsQixDQUFDO0FBQ0Q7QUFDQSxNQUFNLEtBQU8sNkJBQTZCLEdBQ3hDLElBQUksY0FBYyxDQUFlLHlCQUF5QixDQUFDO0FBQzdEO0FBQ0EsTUFBTSxLQUFPLFVBQVUsR0FBYztBQUNyQyxJQUFFLGtCQUFrQixFQUFFLHlCQUF5QjtBQUMvQyxJQUFFLFFBQVEsRUFBRSxnQkFBZ0I7QUFDNUIsSUFBRSxJQUFJLEVBQUUsWUFBWTtBQUNwQixJQUFFLElBQUksRUFBRSxNQUFNO0FBQ2QsSUFBRSxFQUFFLEVBQUUsSUFBSTtBQUFFO0FBQ1IsSUFBRixJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU07QUFDckIsQ0FBQztBQUNEO0FBQ0EsTUFBTSxLQUFPLFFBQVEsR0FBYTtBQUNsQyxJQUFFLE1BQU0sRUFBRSxlQUFlO0FBQ3pCLElBQUUsV0FBVyxFQUFFLHVCQUF1QjtBQUN0QyxJQUFFLFlBQVksRUFBRSx3QkFBd0I7QUFDeEMsSUFBRSxhQUFhLEVBQUUsb0RBQW9EO0FBQ3JFLENBQUM7QUFDRDtBQUNBLE1BQU0sS0FBTyxvQkFBb0IsR0FBd0I7QUFDekQsSUFBRSxLQUFLLEVBQUUsR0FBRztBQUNaLElBQUUsUUFBUSxFQUFFLEdBQUc7QUFDZixDQUFDO0FBQ0Q7QUFDQSxNQUFNLEtBQU8sZUFBZSxHQUFtQjtBQUMvQyxJQUFFLFFBQVEsRUFBRSxnQkFBZ0I7QUFDNUIsSUFBRSxHQUFHLEVBQUUsS0FBSztBQUNaLElBQUUsSUFBSSxFQUFFLGlDQUFpQztBQUN6QyxDQUFDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTdGF0aWNQcm92aWRlciwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsYXNzTmFtZSwgRGlzbWlzc1JlYXNvbnMsIFNlbGVjdG9yLCBUcmFuc2l0aW9uRHVyYXRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kYWxPcHRpb25zPFQgPSBPYmplY3Q+IHtcbiAgLyoqXG4gICAqICBBbGxvdyB1c2VyIHRvIElEIGZvciB0aGUgbW9kYWwuIE90aGVyd2lzZSwgYSB1bmlxdWUgbnVtYmVyIHdpbGwgYmUgZ2l2ZW5cbiAgICovXG4gIGlkPzogbnVtYmVyO1xuICAvKipcbiAgICogIEluY2x1ZGVzIGEgbW9kYWwtYmFja2Ryb3AgZWxlbWVudC4gQWx0ZXJuYXRpdmVseSxcbiAgICogIHNwZWNpZnkgc3RhdGljIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgKi9cbiAgYmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYyc7XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgKi9cbiAga2V5Ym9hcmQ/OiBib29sZWFuO1xuXG4gIGZvY3VzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNob3dzIHRoZSBtb2RhbCB3aGVuIGluaXRpYWxpemVkLlxuICAgKi9cbiAgc2hvdz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZ25vcmUgdGhlIGJhY2tkcm9wIGNsaWNrXG4gICAqL1xuICBpZ25vcmVCYWNrZHJvcENsaWNrPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENzcyBjbGFzcyBmb3Igb3BlbmVkIG1vZGFsXG4gICAqL1xuICBjbGFzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRvZ2dsZSBhbmltYXRpb25cbiAgICovXG4gIGFuaW1hdGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE1vZGFsIGRhdGFcbiAgICovXG4gIGluaXRpYWxTdGF0ZT86IFBhcnRpYWw8VD47XG4gIC8qKlxuICAgKiBNb2RhbCBwcm92aWRlcnNcbiAgICovXG4gIHByb3ZpZGVycz86IFN0YXRpY1Byb3ZpZGVyW107XG4gIC8qKlxuICAgKiBhcmlhLWxhYmVsbGVkYnkgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93XG4gICAqL1xuICBhcmlhTGFiZWxsZWRCeT86IHN0cmluZztcbiAgLyoqXG4gICAqIGFyaWEtZGVzY3JpYmVkYnkgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93XG4gICAqL1xuICBhcmlhRGVzY3JpYmVkYnk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBtb2RhbENvbmZpZ0RlZmF1bHRzOiBNb2RhbE9wdGlvbnMgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWUsXG4gIHNob3c6IGZhbHNlLFxuICBpZ25vcmVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgY2xhc3M6ICcnLFxuICBhbmltYXRlZDogdHJ1ZSxcbiAgaW5pdGlhbFN0YXRlOiB7fVxufTtcblxuZXhwb3J0IGNvbnN0IE1PREFMX0NPTkZJR19ERUZBVUxUX09WRVJSSURFOiBJbmplY3Rpb25Ub2tlbjxNb2RhbE9wdGlvbnM+ID1cbiAgbmV3IEluamVjdGlvblRva2VuPE1vZGFsT3B0aW9ucz4oJ292ZXJyaWRlLWRlZmF1bHQtY29uZmlnJyk7XG5cbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FOiBDbGFzc05hbWUgPSB7XG4gIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgRkFERTogJ2ZhZGUnLFxuICBJTjogJ2luJywgLy8gYnMzXG4gIFNIT1c6ICdzaG93JyAvLyBiczRcbn07XG5cbmV4cG9ydCBjb25zdCBTRUxFQ1RPUjogU2VsZWN0b3IgPSB7XG4gIERJQUxPRzogJy5tb2RhbC1kaWFsb2cnLFxuICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgRklYRURfQ09OVEVOVDogJy5uYXZiYXItZml4ZWQtdG9wLCAubmF2YmFyLWZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkJ1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fRFVSQVRJT05TOiBUcmFuc2l0aW9uRHVyYXRpb25zID0ge1xuICBNT0RBTDogMzAwLFxuICBCQUNLRFJPUDogMTUwXG59O1xuXG5leHBvcnQgY29uc3QgRElTTUlTU19SRUFTT05TOiBEaXNtaXNzUmVhc29ucyA9IHtcbiAgQkFDS1JET1A6ICdiYWNrZHJvcC1jbGljaycsXG4gIEVTQzogJ2VzYycsXG4gIEJBQ0s6ICdicm93c2VyLWJhY2stbmF2aWdhdGlvbi1jbGlja2VkJ1xufTtcbiJdfQ==