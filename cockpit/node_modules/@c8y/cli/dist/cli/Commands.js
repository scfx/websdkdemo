"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Commands = void 0;
const fast_glob_1 = require("fast-glob");
const fs = require("fs-extra");
const _ = require("lodash");
const path = require("path");
const options_1 = require("../options");
const webpack_1 = require("../webpack");
class Commands {
    constructor(cli) {
        this.cli = cli;
        this.hidden = false;
        this.description = '';
        this.options = [];
        this.c8yManifestFileName = 'cumulocity.json';
    }
    initCommander() {
        if (this.hidden && this.cli.argv.indexOf(this.name) === -1) {
            return;
        }
        const cmd = (this.commander = this.cli.commander.command(this.name));
        if (this.alias) {
            cmd.alias(this.alias);
        }
        cmd.description(this.description).action(this.action.bind(this));
        if (this.options.length) {
            this.options.forEach(option => {
                cmd.option(option.name, option.description);
            });
        }
        this.commander = cmd;
    }
    getWebpackExtraOptions() {
        return Object.assign({ hmr: this.getOption('hot') }, this.cli.options.env, {
            output: this.commander.output
        });
    }
    getOption(key) {
        return (process.env[`${options_1.options.ENV_PREFIX}${key.toUpperCase()}`] ||
            this.commander[key] ||
            this.commander.parent[key] ||
            this.cli.options.cli[key]);
    }
    async action(...args) {
        // empty block
    }
    async getApps(folderGlobs) {
        let filePaths = [];
        let folderPaths = [];
        let apps = [];
        for (const g of folderGlobs) {
            folderPaths = folderPaths.concat(await fast_glob_1.async(g, { onlyDirectories: true }));
        }
        for (const g of folderGlobs) {
            filePaths = filePaths.concat(await fast_glob_1.async(g, { onlyFiles: true, absolute: true }));
        }
        for (const p of filePaths) {
            let app;
            if (/package.json$/.test(p)) {
                app = await this.getPackageApp(p);
            }
            if (app) {
                apps.push(app);
            }
        }
        for (const p of folderPaths) {
            apps = apps.concat(await this.getPackageApps(p));
        }
        if (!apps.length) {
            throw options_1.options['TXT.NO_APP'];
        }
        return apps;
    }
    async getStaticFoldersLocationPaths(webpackExtraOptions) {
        const result = [];
        const { serverStaticAppsFolder } = webpackExtraOptions;
        if (serverStaticAppsFolder) {
            const c8yManifests = await this.getManifestApps(serverStaticAppsFolder, `*/${this.c8yManifestFileName}`);
            if (c8yManifests.length > 0) {
                for (const c8yManifest of c8yManifests) {
                    result.push(await this.createStaticFolderLocationPath(c8yManifest));
                }
            }
        }
        return result;
    }
    async getManifestApps(cwd, pattern = options_1.options['GLOB.LEGACY_APP_MANIFESTS']) {
        const manifestPaths = await fast_glob_1.async(pattern, { absolute: true, cwd });
        const apps = [];
        for (const filePath of manifestPaths) {
            apps.push(await this.getManifestApp(filePath));
        }
        return apps;
    }
    async getManifestApp(filePath) {
        const legacyManifest = await fs.readJson(filePath);
        const appOptions = this.cli.options.app;
        const app = new webpack_1.Application(Object.assign(Object.assign({}, legacyManifest), appOptions), filePath);
        return app;
    }
    async createStaticFolderLocationPath(c8yManifest) {
        const c8yManifestContent = await fs.readJSON(c8yManifest.entry);
        return {
            path: c8yManifest.entry.replace(`/${this.c8yManifestFileName}`, ''),
            contextPath: c8yManifestContent.contextPath,
            contextPathPrefix: this.getContextPathPrefix(c8yManifestContent)
        };
    }
    getContextPathPrefix(c8yManifestContent) {
        return this.isPublicApp(c8yManifestContent) ? 'public/' : '';
    }
    isPublicApp(c8yManifestContent) {
        const publicAppsContextPaths = ['public-options', 'ui-assets'];
        return _.some(publicAppsContextPaths, contextPath => c8yManifestContent.contextPath.includes(contextPath));
    }
    async getPackageApps(cwd) {
        const packagePaths = await fast_glob_1.async('package.json', { absolute: true, cwd });
        const apps = [];
        for (const filePath of packagePaths) {
            const app = await this.getPackageApp(filePath);
            if (app) {
                apps.push(app);
            }
        }
        return apps;
    }
    async getPackageApp(filePath) {
        const packageJson = await fs.readJson(filePath);
        const entryPoint = path.dirname(filePath);
        const allowedPkgJsonRootProps = _.pick(packageJson, options_1.options['PACKAGE.CLI.PROPERTIES.WHITELIST']);
        const packageAppOptions = packageJson.c8y && packageJson.c8y.application;
        return packageAppOptions
            ? new webpack_1.Application(Object.assign(Object.assign(Object.assign({}, allowedPkgJsonRootProps), packageAppOptions), this.cli.options.app), entryPoint)
            : undefined;
    }
}
exports.Commands = Commands;
//# sourceMappingURL=Commands.js.map