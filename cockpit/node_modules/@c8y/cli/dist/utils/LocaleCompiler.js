"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocaleCompiler = void 0;
const pofile = require("pofile");
const angular_gettext_tools_1 = require("angular-gettext-tools");
class LocaleCompiler {
    constructor() {
        this.groupedPos = {};
    }
    loadPo(content, path) {
        const po = pofile.parse(content);
        const grouped = this.groupedPos;
        const { Language } = po.headers;
        if (!grouped[Language]) {
            grouped[Language] = new pofile();
        }
        const finalPo = grouped[Language];
        Object.assign(finalPo.headers, po.headers);
        finalPo.items = this.getCombinedItems(finalPo.items, po.items, path);
        return '';
    }
    compile() {
        const grouped = this.groupedPos;
        return Object.keys(grouped).map((po) => ({
            language: po,
            json: new angular_gettext_tools_1.Compiler({ format: 'json' }).convertPo([grouped[po].toString()])
        }));
    }
    getCombinedItems(destItems, srcItems, srcPath) {
        const fromNodeModules = /node_modules\/@c8y/.test(srcPath);
        if (fromNodeModules) {
            return this.addUniqueAndIgnoreDuplicates(destItems, srcItems);
        }
        else {
            return this.addUniqueAndOverwriteDuplicates(destItems, srcItems);
        }
    }
    addUniqueAndIgnoreDuplicates(destItems, srcItems) {
        const uniqueSrcItems = srcItems.filter(item => !destItems.some(({ msgid }) => msgid === item.msgid));
        return [...destItems, ...uniqueSrcItems];
    }
    addUniqueAndOverwriteDuplicates(destItems, srcItems) {
        const uniqueDestItems = destItems.filter(item => !srcItems.some(({ msgid }) => msgid === item.msgid));
        return [...uniqueDestItems, ...srcItems];
    }
}
exports.LocaleCompiler = LocaleCompiler;
//# sourceMappingURL=LocaleCompiler.js.map