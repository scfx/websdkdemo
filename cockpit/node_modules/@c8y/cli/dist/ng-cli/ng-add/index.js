"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const index_content_1 = require("../../webpack/plugin/index-content");
const app_module_1 = require("./app-module");
const i18n_1 = require("./i18n");
// tslint:disable-next-line:no-var-requires
const pkg = require('../../../package.json');
// tslint:disable-next-line:no-var-requires
const semver = require('semver');
function ngAdd(options) {
    return async (tree, _context) => {
        if (!semver.lt(process.version, '15.0.0')) {
            throw new schematics_1.SchematicsException(`You are running version ${process.version} of Node.js, which is not supported by c8y cli. Use a version less than v15.0.0`);
        }
        const json = JSON.parse(tree.read('angular.json').toString());
        const project = json.projects[json.defaultProject];
        const projectSourceRoot = project.sourceRoot;
        addDependencies(tree);
        updatePackageJson(tree, projectSourceRoot, options);
        updateAppModule(tree, projectSourceRoot);
        addTranslation(tree, projectSourceRoot);
        deleteAppComponents(tree, projectSourceRoot);
        hashRouteModule(tree, projectSourceRoot);
        updateTsConfig(tree);
        angularJson(tree);
        indexHtml(tree, projectSourceRoot);
        _context.addTask(new tasks_1.NodePackageInstallTask());
    };
}
exports.default = ngAdd;
function addDependencies(tree) {
    const packageJson = JSON.parse(tree.read('package.json').toString());
    const angularVersion = packageJson.dependencies['@angular/core'].split('.');
    const cdkVersion = `${angularVersion[0]}.${angularVersion[1]}.0`;
    const dependencies = [
        { name: '@c8y/ngx-components', version: pkg.version, type: dependencies_1.NodeDependencyType.Default },
        { name: '@c8y/style', version: pkg.version, type: dependencies_1.NodeDependencyType.Default },
        { name: '@angular/cdk', version: cdkVersion, type: dependencies_1.NodeDependencyType.Default },
        { name: '@c8y/cli', version: pkg.version, type: dependencies_1.NodeDependencyType.Dev },
        { name: 'autoprefixer', version: '^7.1.1', type: dependencies_1.NodeDependencyType.Dev }
    ];
    dependencies.forEach(dependency => dependencies_1.addPackageJsonDependency(tree, dependency));
}
function updatePackageJson(tree, projectSrcRoot, options = {}) {
    const applicationsDefaults = {
        name: 'application',
        contextPath: 'application',
        key: 'application-application-key'
    };
    const currentPackage = JSON.parse(tree.read('package.json').toString());
    currentPackage.c8y = {
        application: Object.assign(applicationsDefaults, options.application)
    };
    tree.overwrite('package.json', JSON.stringify(currentPackage, null, 2));
}
function updateAppModule(tree, projectSrcRoot) {
    const appModulePath = `${projectSrcRoot}/app/app.module.ts`;
    tree.overwrite(appModulePath, app_module_1.APP_MODULE);
}
function addTranslation(tree, projectSrcRoot) {
    const appTranslationFilePath = `${projectSrcRoot}/i18n.ts`;
    const mainFilePath = `${projectSrcRoot}/main.ts`;
    tree.create(appTranslationFilePath, i18n_1.I18N_TRANSLATIONS);
    const content = tree.read(mainFilePath).toString();
    tree.overwrite(mainFilePath, `import './i18n';\n${content}`);
}
function deleteAppComponents(tree, projectSrcRoot) {
    const appComponent = new RegExp(`${projectSrcRoot}/app/app.component`);
    tree.visit(file => {
        if (appComponent.test(file)) {
            tree.delete(file);
        }
    });
}
function hashRouteModule(tree, projectSrcRoot) {
    const routingModulePath = `${projectSrcRoot}/app/app-routing.module.ts`;
    try {
        const content = tree.read(routingModulePath).toString();
        const replacedContent = content.replace(/RouterModule\.forRoot\([^)]+\)/, 'RouterModule.forRoot(routes, { useHash: true })');
        tree.overwrite(routingModulePath, replacedContent);
    }
    catch (_a) {
        throw new schematics_1.SchematicsException(`Cannot find application routing module. To add @c8y/cli,
    application routing module should be present in app/app-routing.module.ts.`);
    }
}
function updateTsConfig(tree) {
    const fileContent = tree.read('tsconfig.json').toString();
    const fileContentWithoutComments = fileContent.replace(/(\/\*[^*]*\*\/)|(\/\/[^*]*)/g, '');
    const json = JSON.parse(fileContentWithoutComments);
    if (json.angularCompilerOptions) {
        json.angularCompilerOptions.enableIvy = true;
    }
    else {
        Object.assign(json, { angularCompilerOptions: { enableIvy: true } });
    }
    json.compilerOptions.skipLibCheck = true;
    tree.overwrite('tsconfig.json', JSON.stringify(json, null, 2));
}
function angularJson(tree) {
    const json = JSON.parse(tree.read('angular.json').toString());
    json.projects[json.defaultProject].architect.build.builder = '@c8y/cli:build';
    json.projects[json.defaultProject].architect.serve.builder = '@c8y/cli:dev-server';
    json.projects[json.defaultProject].architect.build.options.aot = false;
    json.projects[json.defaultProject].architect.build.configurations.production.buildOptimizer =
        false;
    delete json.projects[json.defaultProject].architect.build.options.index;
    tree.overwrite('angular.json', JSON.stringify(json, null, 2));
}
function indexHtml(tree, projectSrcRoot) {
    tree.overwrite(`${projectSrcRoot}/index.html`, index_content_1.default);
}
//# sourceMappingURL=index.js.map