"use strict";!function(){function e(e){return[{name:e("Change the severities of alarms based on activity time"),value:'/* Create "context" - definition of a group of events to be processed separately.\n * Context "Alarms" consists of AlarmCreated and AlarmUpdated: \n * with the same source and type = "power off". */\ncreate context Alarms partition by \nalarm.source from AlarmCreated(alarm.type = "power off"),\nalarm.source from AlarmUpdated(alarm.type = "power off");\n\n/* Update severity for all active AlarmCreated \n * after which there is no change to other status in 15 minutes. */\ncontext Alarms \ninsert into UpdateAlarm \nselect \n   a.alarm.id as id,\n   "MAJOR" as severity\nfrom pattern [\n   every a = AlarmCreated(alarm.status = CumulocityAlarmStatuses.ACTIVE) \n   -> (timer:interval(15 minutes) \n      and not AlarmUpdated(alarm.status != CumulocityAlarmStatuses.ACTIVE))\n];'},{name:e("Create alarm if temperature was too low for 15 minutes"),value:'create schema NotZeroMeasurementCreated (\n  measurement Measurement\n);\ncreate schema ZeroMeasurementCreated (\n  measurement Measurement\n);\ncreate schema CheckTimeDifference (\n  firstMeasurement Measurement,\n  lastMeasurement Measurement\n);\ninsert into CreateAlarm\n  select\n    check.lastMeasurement.source as source,\n    check.lastMeasurement.time as time,\n    "c8y_LowTemperatureAlarm" as type,\n    CumulocitySeverities.WARNING as severity,\n    CumulocityAlarmStatuses.ACTIVE as status,\n    "Temperature was too low for more than 15 minutes" as text\n  from CheckTimeDifference check\n  where check.lastMeasurement.time.after(check.firstMeasurement.time, 15min);\ninsert into CheckTimeDifference\n  select\n    firstZero.measurement as firstMeasurement,\n    firstNotZeroAgain.measurement as lastMeasurement\n  from pattern [\n    every (lastNotZero = NotZeroMeasurementCreated ->\n    firstZero = ZeroMeasurementCreated(measurement.source.value = lastNotZero.measurement.source.value)) ->\n    ZeroMeasurementCreated until firstNotZeroAgain = NotZeroMeasurementCreated(measurement.source.value = lastNotZero.measurement.source.value)\n  ];\ninsert into NotZeroMeasurementCreated\n  select\n    m.measurement as measurement\n  from\n    MeasurementCreated m\n  where getNumber(m, "c8y_TemperatureMeasurement.T.value") > 0\n  AND m.measurement.type = "c8y_TemperatureMeasurement";\ninsert into ZeroMeasurementCreated\n  select\n    m.measurement as measurement\n  from\n    MeasurementCreated m\n  where getNumber(m, "c8y_TemperatureMeasurement.T.value") <= 0\n  AND m.measurement.type = "c8y_TemperatureMeasurement";'},{name:e("Create alarm on not processed operation"),value:'create constant variable int operation_timeout_in_seconds = 300; \ncreate constant variable string alarm_severity = "MAJOR"; \ncreate constant variable string alarm_text = "Operation with id=#{id.value} haven\'t been finished!"; \ncreate constant variable string alarm_type = "c8y_OperationNotFinished"; \ncreate schema OperationNotFinished ( operation com.cumulocity.model.operation.Operation ); \ncreate schema OperationFinished ( operation com.cumulocity.model.operation.Operation, alarm Alarm); \n@Name("create_alarm_from_not_finished_operation")\ninsert into CreateAlarm\n  select \n    operation.deviceId as source,\n    "ACTIVE" as status,\n    alarm_severity as severity,\n    alarm_type as type,\n    current_timestamp().toDate() as time,\n    replaceAllPlaceholders(alarm_text, operation) as text,\n    { "operationId", operation.id.value } as fragments \n  from OperationNotFinished;\n@Name("handle_not_finished_operation")\ninsert into OperationNotFinished\n  select\n    prevOp.operation as operation\n  from pattern [ \n    every prevOp = OperationCreated \n    -> (timer:interval(operation_timeout_in_seconds second)\n    and not OperationUpdated(\n    operation.id.value = prevOp.operation.id.value\n    and (operation.status in (OperationStatus.SUCCESSFUL, OperationStatus.FAILED))\n    ))  ];\n'},{name:e("Create alarm when temperature below 0 degree"),value:'insert into CreateAlarm \n  select\n    e.measurement.time as time,\n    e.measurement.source.value as source,\n    "com_cumulocity_TemperatureAlert" as type,\n    "Temperature too low" as text,\n    "ACTIVE" as status,\n    "CRITICAL" as severity\n  from MeasurementCreated e\n  where getNumber(e, "c8y_TemperatureMeasurement.T.value") < 0'},{name:e("Create alarm when temperature over 100 degree"),value:'insert into CreateAlarm \n  select\n    e.measurement.time as time,\n    e.measurement.source.value as source,\n    "com_cumulocity_TemperatureAlert" as type,\n    "Temperature too high" as text,\n    "ACTIVE" as status,\n    "CRITICAL" as severity\n  from MeasurementCreated e\n  where getNumber(e, "c8y_TemperatureMeasurement.T.value") > 100'},{name:e("Create close relay operation when temperature readings over 100 degree"),value:'insert into CreateOperation\n  select\n    "PENDING" as status,\n    «heating ID» as deviceId,\n    {\n      "c8y_Relay.relayState", "CLOSED"\n    } as fragments\n  from MeasurementCreated e\n  where getNumber(e, "c8y_TemperatureMeasurement.T.value") > 100'},{name:e("Display current temperature on device"),value:'expression string js:prepareText(temp) [\n  function format(text, params){\n    for(param in params) {\n        text = text.replace("{" + param + "}", params[param])\n    }\n    return text\n  }\n  format("Current temperature is {0}", [temp])\n]\ninsert into CreateOperation\n select\n      "PENDING" as status,\n      e.measurement.source.value as deviceId,\n      { "c8y_Message.text", prepareText(\n        getNumber(e, "c8y_TemperatureMeasurement.T.value")\n    ) } as fragments\n  from MeasurementCreated e\n    where e.measurement.type = "c8y_TemperatureMeasurement";'},{name:e("Schedule device restart every day at 1am"),value:'insert into CreateOperation\nselect\n  "PENDING" as status,\n  «device ID» as deviceId,\n  { "c8y_Restart", {} } as fragments\nfrom pattern [every timer:at(*, 1, *, *, *, *)];'},{name:e("Select location change event once for 60 seconds"),value:'select * from EventCreated e\nwhere getObject(e, "c8y_LocationMeasurement") is not null\noutput first every 60 seconds'},{name:e("Select temperature readings over 100 degree"),value:'select * from MeasurementCreated e\nwhere getNumber(e, "c8y_TemperatureMeasurement.T.value") > 100'},{name:e("Send alarms that are active since 30 minutes to email"),value:'insert into SendEmail\nselect\n  "<RECEIVER@COMPANY.COM>" as receiver,\n  "Alarm active since 30 mins: " || e.alarm.text as subject,\n  "Time: " || e.alarm.time.format() || \n  " Severity: " || e.alarm.severity.name() || \n  " Source: " || findManagedObjectById(e.alarm.source.value).getName() as text,\n  "<REPLY_TO@COMPANY.COM>" as replyTo\nfrom pattern [\n   every e = AlarmCreated(alarm.status = CumulocityAlarmStatuses.ACTIVE, alarm.severity = CumulocitySeverities.CRITICAL) \n   -> (timer:interval(30 minutes) \n      and not AlarmUpdated(alarm.status != CumulocityAlarmStatuses.ACTIVE, alarm.id.value = e.alarm.id.value))\n];'},{name:e("Send sales to Zapier"),value:'@Name("sales")\nselect\n  getString(e, "com_nsn_startups_vendme_fragments_SalesReportInfo.vendingMachine_name") as id,\n  getString(e, "com_nsn_startups_vendme_fragments_SalesReportInfo.product_name") as name,\n  e.event.time.format() as time,\n  getNumber(e, "com_nsn_startups_vendme_fragments_SalesReportInfo.totalPaid") as value,\n  getString(e, "com_nsn_startups_vendme_fragments_SalesReportInfo.payment_type") as text\nfrom EventCreated e\n  where e.event.type = "com_nsn_startups_vendme_LiveSalesReport"\n'},{name:e("Send simulator temperature to Zapier"),value:'@Name("simulatortemperature")\nselect\n  e.measurement.source.value as id,\n  findManagedObjectById(e.measurement.source.value).getName() as name,\n  e.measurement.time.format() as time,\n  getNumber(e, "c8y_TemperatureMeasurement.T.value") as value\nfrom MeasurementCreated e\n  where e.measurement.type = "TemperatureMeasurement"\n'}]}e.$inject=["gettext"],angular.module("c8y.core").factory("c8yCepModuleExamples",e)}();