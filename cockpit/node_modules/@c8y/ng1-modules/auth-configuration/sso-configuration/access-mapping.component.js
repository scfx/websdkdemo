"use strict";!function(){function n(n,i){var o=this,e=i("If selected, you will be able to change assigned roles in Administration after user creation. Otherwise, roles will be synchronized with authorization server on each log in.");n.$watch("vm.ssoConfiguration",function(){var n={};return _.set(n,"onNewUser.dynamicMapping",function(){var i={mappings:[],configuration:{mapRolesOnlyForNewUser:o.ssoConfiguration.onNewUser.dynamicMapping.configuration.mapRolesOnlyForNewUser}};return _.forEach(_.get(o.ssoConfiguration,"onNewUser.dynamicMapping.mappings",[]),function(n){i.mappings.push({when:_.get(n,"when",{}),thenGroups:_.get(n,"thenGroups",[]).map(function(n){return parseInt(n.id,10)}),thenApplications:_.get(n,"thenApplications",[]).map(function(n){return parseInt(n.id,10)})})}),i}()),o.onChange({ssoConfigurationPartial:n})},!0),_.assign(o,{$onChanges:function(n){n.inputConfiguration&&(o.ssoConfiguration=_.cloneDeep(n.inputConfiguration.currentValue),_.defaultsDeep(o.ssoConfiguration.onNewUser,{dynamicMapping:{mappings:[],configuration:{mapRolesOnlyForNewUser:!1}}}),_.forEach(_.get(o.ssoConfiguration,"onNewUser.dynamicMapping.mappings",[]),function(i){i.thenGroups=o.groups.filter(function(n){return i.thenGroups.includes(n.id)}),i.thenApplications=o.apps.filter(function(n){return i.thenApplications.includes(parseInt(n.id,10))})}))},addAccessMapping:function(){o.ssoConfiguration.onNewUser.dynamicMapping.mappings.push({when:{operator:"AND",childPredicates:[{}]}})},onRemove:function(n){_.pull(o.ssoConfiguration.onNewUser.dynamicMapping.mappings,n)},dynamicAccessMappingTooltip:e})}n.$inject=["$scope","gettext"],angular.module("c8y.authenticationConfiguration").component("c8ySsoAccessMapping",{templateUrl:":::PLUGIN_PATH:::/sso-configuration/access-mapping.html",controller:n,controllerAs:"vm",bindings:{inputConfiguration:"<ssoConfiguration",fieldsConfig:"<",groups:"<",apps:"<",onChange:"&"}})}();