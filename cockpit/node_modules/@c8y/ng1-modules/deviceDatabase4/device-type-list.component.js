"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}!function(){function e(r,t,n,a,o,i,c,s,u,l){var p=this;function e(e){var t=_.get(e,"id","new");n.path("/device-types/".concat(t))}function y(e){if(_.isObjectLike(e)){var t=e.errorMessage;t?s.danger(l.getString('Could not import device type due to: "{{errorMessage | translate}}".',{errorMessage:t})):s.danger(u("Could not import device type."))}}function d(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return p.deviceTypes=void 0,t.refreshLoading=!0,e.prev=2,e.t0=v,e.next=6,regeneratorRuntime.awrap(g());case 6:e.t1=e.sent,(0,e.t0)(e.t1);case 8:return e.prev=8,t.refreshLoading=!1,e.finish(8);case 11:r.$apply();case 12:case"end":return e.stop()}},null,null,[[2,,8,11]],Promise)}function g(){return o.getAvailableDeviceTypes()}function v(e){p.deviceTypes||(p.deviceTypes=[]),p.deviceTypes=[].concat(_toConsumableArray(p.deviceTypes),_toConsumableArray(e)),t.paging=e.paging||{refresh:!0},r.$apply()}_.assign(p,{$onInit:function(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return i.changeTitle({title:u("Device database")}),e.t0=v,e.next=4,regeneratorRuntime.awrap(g());case 4:e.t1=e.sent,(0,e.t0)(e.t1),r.$apply();case 7:case"end":return e.stop()}},null,null,null,Promise)},addDeviceType:e,importDeviceType:function(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(o.importDeviceTypeWithUI());case 3:return s.success(u("New device type imported.")),e.next=6,regeneratorRuntime.awrap(d());case 6:e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),y(e.t0);case 11:r.$apply();case 12:case"end":return e.stop()}},null,null,[[0,8]],Promise)},navigateToDetails:e,onClickExport:function(e){return o.exportDeviceTypeAndSaveAs(e)},onClickDelete:function(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(c({title:u("Delete device type"),body:l.getString('You are about to delete device type "{{name}}". Connected devices of this type will become unavailable. Do you want to proceed?',t),status:"danger",labels:{ok:u("Delete")}}));case 3:return e.next=5,regeneratorRuntime.awrap(a.remove(t));case 5:p.deviceTypes=_.without(p.deviceTypes,t),s.success(u("Device type deleted.")),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),e.t0&&s.danger(e.t0);case 12:r.$apply();case 13:case"end":return e.stop()}},null,null,[[0,9]],Promise)},getFieldbusTypeLabel:function(e){return _.get(o.getDeviceTypeFeatures(e),"label",e.fieldbusType)},getFieldbusVersion:o.getFieldbusVersion}),t.paging={},t.loadNext=function(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t.paging.loading=!0,e.prev=1,e.t0=v,e.next=5,regeneratorRuntime.awrap(g());case 5:e.t1=e.sent,(0,e.t0)(e.t1);case 7:return e.prev=7,t.paging.loading=!1,e.finish(7);case 10:r.$apply();case 11:case"end":return e.stop()}},null,null,[[1,,7,10]],Promise)},t.refresh=d}e.$inject=["$rootScope","$scope","$location","c8yInventory","c8yDeviceDatabase","c8yTitle","c8yModal","c8yAlert","gettext","gettextCatalog"],angular.module("c8y.deviceDatabase4").component("c8yDeviceTypeList",{templateUrl:":::PLUGIN_PATH:::/device-type-list.html",bindings:{},controllerAs:"vm",controller:e})}();