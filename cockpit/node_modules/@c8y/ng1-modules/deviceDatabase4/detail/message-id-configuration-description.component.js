"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o=[],i=!0,s=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==r.return||r.return()}finally{if(s)throw a}}return o}}function _arrayWithHoles(e){if(Array.isArray(e))return e}!function(){function e(e,a){var o=this,i={BOTH:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Depending on the device, the type can be determined by looking either\n        at the FPort parameter of a message (<b>Source</b>: <i>FPort</i>)\n        or at the subset of the message payload itself (<b>Source</b>: <i>Payload</i>).\n        Indicate where the type information starts in the payload (<b>Start bit</b>)\n        and how long this information is (<b>Number of bits</b>)."),FPORT:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Type can be determined by looking at the FPort parameter of a message (<b>Source</b>: <i>FPort</i>)."),PAYLOAD:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Type can be determined by looking at the subset of the message payload (<b>Source</b>: <i>Payload</i>).\n        Indicate where the type information starts in the payload (<b>Start bit</b>)\n        and how long this information is (<b>Number of bits</b>).")};_.assign(o,{$onChanges:function(e){if(e.featureLabel){var t=i.BOTH;if(1===_.get(o,"messageIdConfiguration.length")){var r=_slicedToArray(o.messageIdConfiguration,1),n=r[0];t=i[n.name]}o.description=a.getString(t,{protocolName:o.featureLabel})}},descriptionTemplates:i})}e.$inject=["gettext","gettextCatalog"],angular.module("c8y.deviceDatabase4").component("c8yMessageIdConfigurationDescription",{bindings:{featureLabel:"<",messageIdConfiguration:"<"},template:'\n        <div ng-bind-html="vm.description">\n        </div>\n      ',controller:e,controllerAs:"vm"})}();