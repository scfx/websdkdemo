import { InjectionToken } from '@angular/core';
import { IManagedObject } from '@c8y/client';
import { Widget, DynamicComponentDefinition, Route } from '@c8y/ngx-components';
export declare const CONTEXT_DASHBOARD_CONFIG: InjectionToken<any>;
export interface ContextDashboardConfig {
    widgetFilter?: (component: DynamicComponentDefinition) => boolean;
    allowFullscreen?: boolean;
    routes?: Route[];
}
export interface ContextWidgetConfig {
    /**
     * Settings that define how the default config component is
     * displayed.
     */
    settings?: {
        /**
         * Avoids to show the widget in the "add widget" modal
         */
        noNewWidgets?: boolean;
        ng1?: {
            options: {
                /**
                 * Set this to false, to hide the device/group selector
                 * @deprecated: This is currently only implemented in angularjs and will be exported to a separate component.
                 */
                noDeviceTarget?: boolean;
                /**
                 * Set this to false to only select devices
                 * @deprecated: This is currently only implemented in angularjs and will be exported to a separate component.
                 */
                groupsSelectable?: boolean;
            };
            /**
             * The context from the device selector.
             */
            context?: {
                id?: string;
                name?: string;
            };
        };
        /**
         * Any other information you want to pass to the config template
         */
        [key: string]: any;
    };
    /**
     * The selected device or group (note: naming is inconsistent as group was added later
     * but must stay for already implemented widgets)
     */
    device?: {
        id?: string;
        name?: string;
    };
    /**
     * Any other information that should be stored here.
     */
    [key: string]: any;
}
export interface ContextDashboardManagedObject extends IManagedObject {
    c8y_Dashboard?: ContextDashboard;
    name?: string;
}
export interface ContextDashboard {
    icon?: string;
    name?: string;
    priority?: number;
    deviceType?: boolean;
    deviceTypeValue?: string;
    isFrozen?: boolean;
    classes?: {
        [key: string]: boolean;
    };
    widgetClasses?: {
        [key: string]: boolean;
    };
    widgetMargin?: number;
    translateWidgetTitle?: boolean;
    global?: boolean;
    children?: {
        [id: string]: Widget;
    };
    c8y_IsNavigatorNode?: object;
    description?: string;
}
export declare enum ContextDashboardType {
    Device = "device",
    DeviceType = "type",
    Group = "group",
    Named = "name",
    Report = "report"
}
export declare const WIDGET_HEADER_CLASSES: {
    label: any;
    class: string;
    description: any;
}[];
export declare const WIDGET_CONTENT_CLASSES: {
    label: any;
    class: string;
    description: any;
}[];
export declare const DASHBOARD_THEME_CLASSES: {
    label: any;
    class: string;
    description: any;
}[];
export declare const STYLING_CLASS_PREFIXES: string[];
