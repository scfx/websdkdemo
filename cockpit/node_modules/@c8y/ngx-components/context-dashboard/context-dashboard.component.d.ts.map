{"version":3,"file":"context-dashboard.component.d.ts","sources":["context-dashboard.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AlertService, BreadcrumbItem, DashboardChildChange, DashboardSettings, DynamicComponentDefinition, GainsightService, Widget, WidgetChange } from '@c8y/ngx-components';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ContextDashboard, ContextDashboardConfig, ContextDashboardManagedObject } from './context-dashboard.model';\nimport { ContextDashboardService } from './context-dashboard.service';\nimport { WidgetService } from './widget.service';\nimport { IManagedObject, InventoryService } from '@c8y/client';\n/**\n * The context dashboard is a dashboard which resolves it data from the current context (device or group)\n * it is displayed on. It usually uses the route.data for it, but you can pass\n * a different managedObject to the [mo] input parameter to change that behavior.\n */\nexport declare class ContextDashboardComponent implements OnInit, OnDestroy {\n    private route;\n    private router;\n    private contextDashboardService;\n    private alert;\n    private renderer;\n    moduleConfig: ContextDashboardConfig;\n    private widgetService;\n    private bsModal;\n    private inventory;\n    private gainsightService;\n    name: string;\n    childrenClasses: string;\n    context: any;\n    setTitle: boolean;\n    disabled: boolean;\n    defaultWidgets: Widget[];\n    canDelete: boolean;\n    isLoading: boolean;\n    breadcrumbSettings: BreadcrumbItem;\n    class: string;\n    widgets: Widget[];\n    mo: ContextDashboardManagedObject;\n    dashboard: ContextDashboard;\n    title: string;\n    private dataSub;\n    constructor(route: ActivatedRoute, router: Router, contextDashboardService: ContextDashboardService, alert: AlertService, renderer: Renderer2, moduleConfig: ContextDashboardConfig, widgetService: WidgetService, bsModal: BsModalService, inventory: InventoryService, gainsightService: GainsightService);\n    ngOnInit(): void;\n    /**\n     * Applies the current context to the widget\n     * @param widget The widget to apply the context to.\n     */\n    applyDeviceTarget(widget: any): void;\n    /**\n     * Removes the route listener.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Restores the dashboard widgets to the default widgets.\n     */\n    restore(): Promise<void>;\n    /**\n     * Updates all dashboards children's. Useful for position changes on the dashboard.\n     * @param child The child to change.\n     */\n    updateDashboardChildren(child: DashboardChildChange): Promise<IManagedObject>;\n    /**\n     * Remove the complete dashboard and navigate away.\n     */\n    deleteDashboard(): Promise<void>;\n    /**\n     * Edits the current dashboard\n     */\n    editDashboard(): Promise<void>;\n    /**\n     * Edits a widget on the dashboard.\n     * @param change The widget change event.\n     */\n    editWidget(change: WidgetChange): Promise<void>;\n    /**\n     * Adds a widget to the dashboard.\n     * @param selected Define a selected component to switch to edit mode directly.\n     */\n    addWidget(selected?: DynamicComponentDefinition): Promise<void>;\n    /**\n     * Updates a widget or adds a new one if it doesn't exist on\n     * the dashboard.\n     * @param widget The new widget\n     */\n    updateWidget(widget: any): Promise<void>;\n    /**\n     * Removes a widget and rearranges the remaining ones\n     * if necessary.\n     * @param change The change event.\n     */\n    deleteWidget(change: WidgetChange): void;\n    /**\n     * This is a workaround to ensure that the dragged-element\n     * (which is attached to the body) has the right styling.\n     */\n    addDashboardClassToBody(): void;\n    /**\n     * This is a workaround to ensure that the dragged-element\n     * (which is attached to the body) has the right styling.\n     */\n    removeDashboardClassFromBody(): void;\n    /**\n     * Changes the dashboard settings to frozen or vice versa.\n     * @param settings The current settings of the dashboard.\n     */\n    toggleFreeze(settings: DashboardSettings): Promise<void>;\n    private updateReport;\n    private toggleIsFrozenFlag;\n    private loadContextDashboard;\n    private loadNamedDashboard;\n    private onLoad;\n    private mergeWidgetClasses;\n    private componentToWidget;\n    private addReportDashboardSettings;\n}\n"]}