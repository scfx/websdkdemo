import { Component, Injectable, NgModule } from '@angular/core';
import { CustomDeviceGridColumn, DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { gettext, OptionsService, NavigatorNode, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { find } from 'lodash-es';
import { __awaiter } from 'tslib';
import { RouterModule } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/device-grid';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@c8y/ngx-components';
import * as ɵngcc5 from '@angular/router';

function DeviceGridExampleComponent_option_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const example_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", example_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(example_r1.label);
} }
const _c0 = function () { return []; };
class DeviceGridExampleComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    getExampleWithStandardColumns() {
        const columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns
        };
    }
    getExampleWithStandardColumnsAndSavedFilteringSorting() {
        const columns = this.deviceGridService.getDefaultColumns();
        const nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns
        };
    }
    getExampleWithCustomColumnAndPredefinedFiltering() {
        const columns = this.deviceGridService.getDefaultColumns();
        const typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns
        };
    }
    onExampleSelect(example) {
        this.columnsInput = example.columns;
    }
}
DeviceGridExampleComponent.ɵfac = function DeviceGridExampleComponent_Factory(t) { return new (t || DeviceGridExampleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DeviceGridService)); };
DeviceGridExampleComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceGridExampleComponent, selectors: [["c8y-device-grid-example"]], decls: 29, vars: 15, consts: [[1, "content-fullpage"], [3, "title", "columns", "actionControls", "onColumnsChange", "onDeviceQueryStringChange"], [1, "row"], [1, "col-sm-6"], [1, "card"], [1, "card-header", "separator"], [1, "card-title"], [1, "card-block"], [1, "c8y-select-wrapper"], [1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [1, "card-header"], [3, "ngValue"]], template: function DeviceGridExampleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-device-grid", 1);
        ɵngcc0.ɵɵlistener("onColumnsChange", function DeviceGridExampleComponent_Template_c8y_device_grid_onColumnsChange_1_listener($event) { return ctx.columnsOutput = $event; })("onDeviceQueryStringChange", function DeviceGridExampleComponent_Template_c8y_device_grid_onDeviceQueryStringChange_1_listener($event) { return ctx.deviceQueryStringOutput = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "h4", 6);
        ɵngcc0.ɵɵtext(7, "Input");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵelementStart(10, "select", 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function DeviceGridExampleComponent_Template_select_ngModelChange_10_listener($event) { return ctx.onExampleSelect($event); });
        ɵngcc0.ɵɵtemplate(11, DeviceGridExampleComponent_option_11_Template, 2, 2, "option", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "pre");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 3);
        ɵngcc0.ɵɵelementStart(17, "div", 4);
        ɵngcc0.ɵɵelementStart(18, "div", 11);
        ɵngcc0.ɵɵelementStart(19, "span");
        ɵngcc0.ɵɵelementStart(20, "h4", 6);
        ɵngcc0.ɵɵtext(21, "Output");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 7);
        ɵngcc0.ɵɵelementStart(23, "pre");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "pre");
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "json");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", "Select devices for bulk operation")("columns", ctx.columnsInput)("actionControls", ɵngcc0.ɵɵpureFunction0(14, _c0));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedExample);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.examples);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(15, 8, ctx.columnsInput), "\n        ");
        ɵngcc0.ɵɵadvance(10);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(25, 10, ctx.deviceQueryStringOutput), "\n        ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(28, 12, ctx.columnsOutput), "\n        ");
    } }, directives: [ɵngcc1.DeviceGridComponent, ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵNgSelectMultipleOption], pipes: [ɵngcc3.JsonPipe], encapsulation: 2 });
DeviceGridExampleComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-grid-example',
                template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DeviceGridService }]; }, null); })();

class DeviceGridExampleGuard {
    constructor(optionsService) {
        this.optionsService = optionsService;
    }
    canActivate(route, state) {
        // FIXME: not entirely correct but enough for testing (see beta provider isActivatedFor)
        return Boolean(this.optionsService.get('beta', false));
    }
}
DeviceGridExampleGuard.ɵfac = function DeviceGridExampleGuard_Factory(t) { return new (t || DeviceGridExampleGuard)(ɵngcc0.ɵɵinject(ɵngcc4.OptionsService)); };
DeviceGridExampleGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceGridExampleGuard, factory: DeviceGridExampleGuard.ɵfac });
DeviceGridExampleGuard.ctorParameters = () => [
    { type: OptionsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc4.OptionsService }]; }, null); })();

class DeviceGridExampleNavigationFactory {
    constructor(deviceGridExampleGuard) {
        this.deviceGridExampleGuard = deviceGridExampleGuard;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nav && this.deviceGridExampleGuard.canActivate(null, null)) {
                this.nav = new NavigatorNode({
                    label: gettext('Grids'),
                    icon: 'table'
                });
                this.nav.add(new NavigatorNode({
                    label: gettext('Device grid'),
                    path: '/grids/device-grid',
                    icon: 'table'
                }));
            }
            return this.nav;
        });
    }
}
DeviceGridExampleNavigationFactory.ɵfac = function DeviceGridExampleNavigationFactory_Factory(t) { return new (t || DeviceGridExampleNavigationFactory)(ɵngcc0.ɵɵinject(DeviceGridExampleGuard)); };
DeviceGridExampleNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceGridExampleNavigationFactory, factory: DeviceGridExampleNavigationFactory.ɵfac });
DeviceGridExampleNavigationFactory.ctorParameters = () => [
    { type: DeviceGridExampleGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: DeviceGridExampleGuard }]; }, null); })();

const routes = [
    {
        path: 'grids/device-grid',
        component: DeviceGridExampleComponent,
        canActivate: [DeviceGridExampleGuard]
    }
];
class DeviceGridExampleModule {
}
DeviceGridExampleModule.ɵfac = function DeviceGridExampleModule_Factory(t) { return new (t || DeviceGridExampleModule)(); };
DeviceGridExampleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceGridExampleModule });
DeviceGridExampleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: DeviceGridExampleNavigationFactory,
            multi: true
        },
        DeviceGridExampleGuard
    ], imports: [[
            CoreModule,
            CommonModule,
            DeviceGridModule,
            RouterModule.forRoot(routes, { useHash: true })
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridExampleModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    DeviceGridModule,
                    RouterModule.forRoot(routes, { useHash: true })
                ],
                declarations: [DeviceGridExampleComponent],
                entryComponents: [DeviceGridExampleComponent],
                exports: [],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DeviceGridExampleNavigationFactory,
                        multi: true
                    },
                    DeviceGridExampleGuard
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceGridExampleModule, { declarations: function () { return [DeviceGridExampleComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        DeviceGridModule, ɵngcc5.RouterModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceGridExampleComponent, DeviceGridExampleGuard, DeviceGridExampleModule, DeviceGridExampleNavigationFactory };

//# sourceMappingURL=c8y-ngx-components-device-grid-example.js.map