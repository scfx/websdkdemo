{"version":3,"file":"c8y-ngx-components-default-subscriptions.js","sources":["../../default-subscriptions/default-subscriptions.model.ts","../../default-subscriptions/default-subscriptions.service.ts","../../default-subscriptions/default-subscriptions.component.ts","../../default-subscriptions/default-subscriptions.guard.ts","../../default-subscriptions/default-subscriptions-navigation.factory.ts","../../default-subscriptions/default-subscriptions.module.ts","../../default-subscriptions/c8y-ngx-components-default-subscriptions.ts"],"sourcesContent":["import { IApplication } from '@c8y/client';\n\n/** The list of partial application objects. */\nexport type PartialAppsList = Array<Partial<IApplication>>;\n\n/** The interface for default subscriptions configuration. */\nexport interface DefaultSubscriptions {\n  /** Whether the list of on tenant creation subscriptions is overridden in the current tenant. Won't be defined for inherited configuration. */\n  overrideOnCreationSubscriptions?: boolean;\n  /** The list of applications subscribed to new tenants on creation. */\n  onCreationSubscriptions: PartialAppsList;\n  /** Whether the list of on platform upgrade subscriptions is overridden in the current tenant. Won't be defined for inherited configuration. */\n  overrideOnUpgradeSubscriptions?: boolean;\n  /** The list of applications subscribed to existing tenants on platform upgrade. */\n  onUpgradeSubscriptions: PartialAppsList;\n}\n\n/** The context for evaluating default subscriptions configuration */\nexport enum DefaultSubscriptionsContext {\n  /** Current tenant context (only current tenant options are taken into account). */\n  CURRENT_TENANT,\n  /** Parent tenant context (only parent tenant options are taken into account). */\n  PARENT_TENANT\n}\n","import { Injectable } from '@angular/core';\nimport { isUndefined, sortBy } from 'lodash-es';\nimport { debounceTime, take } from 'rxjs/operators';\n\nimport {\n  IApplication,\n  ApplicationType,\n  ApplicationService,\n  ISystemOption,\n  TenantService,\n  TenantOptionsService\n} from '@c8y/client';\nimport { HumanizeAppNamePipe } from '@c8y/ngx-components';\n\nimport {\n  PartialAppsList,\n  DefaultSubscriptions,\n  DefaultSubscriptionsContext as DefaultSubscriptionsContextTenant\n} from './default-subscriptions.model';\n\n@Injectable()\nexport class DefaultSubscriptionsService {\n  constructor(\n    private applicationService: ApplicationService,\n    private tenantService: TenantService,\n    private tenantOptionsService: TenantOptionsService,\n    private humanizeAppNamePipe: HumanizeAppNamePipe\n  ) {}\n\n  /**\n   * Gets the list of applications which can be used in default subscriptions, i.e.:\n   * - current tenant's all own applications,\n   * - inherited applications, which do not have the same names as current tenant's own apps.\n   * The list is sorted alphabetically by humanized app name and contains up to 2000 items.\n   * @returns The list of applications, which can be used in default subscriptions.\n   */\n  async getSubscribableTenantApps(): Promise<IApplication[]> {\n    const currentTenant = (await this.tenantService.current()).data;\n\n    const allApps = (await this.applicationService.listByTenant(null, { pageSize: 2000 })).data;\n    const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);\n    const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);\n\n    const filteredApps: IApplication[] = [...ownApps];\n    inheritedApps.forEach(inheritedApp => {\n      if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {\n        filteredApps.push(inheritedApp);\n      }\n    });\n\n    const filteredAppsWithHumanizedNames = await Promise.all(\n      filteredApps.map(async app => {\n        const humanizedName = await this.humanizeAppNamePipe\n          .transform(app.name)\n          .pipe(\n            debounceTime(250),\n            take(1)\n          )\n          .toPromise();\n        return { app, humanizedName };\n      })\n    );\n    const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);\n    const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);\n\n    return sortedApps;\n  }\n\n  /**\n   * Gets the default subscriptions configuration inherited from parent tenant.\n   * @returns The default subscriptions object with settings from parent tenant.\n   */\n  async getDefaultSubscriptionsEvaluatedFromParentTenant(): Promise<DefaultSubscriptions> {\n    return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.PARENT_TENANT);\n  }\n\n  /**\n   * Gets the default subscriptions configuration from the current tenant.\n   * @returns The default subscriptions object with settings from the current tenant.\n   */\n  async getDefaultSubscriptionsFromCurrentTenant(): Promise<DefaultSubscriptions> {\n    return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.CURRENT_TENANT);\n  }\n\n  /**\n   * Saves given default subscriptions configuration to the current tenant\n   * (either sets, updates, or deletes corresponding tenant options).\n   * @param defaultSubscriptions The default subscriptions configuration to be saved.\n   */\n  async saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions: DefaultSubscriptions) {\n    await this.saveOnCreationSubscriptions(defaultSubscriptions);\n    await this.saveOnUpgradeSubscriptions(defaultSubscriptions);\n  }\n\n  /**\n   * Gets default subscriptions in the context of current or parent tenant.\n   * @param contextTenant Tells whether to use current or parent tenant as context.\n   */\n  private async getDefaultSubscriptions(\n    contextTenant: DefaultSubscriptionsContextTenant\n  ): Promise<DefaultSubscriptions> {\n    let tenantOptionsParams: object;\n    let overridable: boolean;\n\n    switch (contextTenant) {\n      case DefaultSubscriptionsContextTenant.CURRENT_TENANT:\n        tenantOptionsParams = { evaluate: 'current' };\n        overridable = true;\n        break;\n\n      case DefaultSubscriptionsContextTenant.PARENT_TENANT:\n        tenantOptionsParams = { evaluate: 'inherited' };\n        overridable = false;\n        break;\n    }\n\n    const {\n      onCreationApps,\n      onCreationMicroservices,\n      onUpgradeAppsEnabled,\n      onUpgradeApps,\n      onUpgradeMicroservicesEnabled,\n      onUpgradeMicroservices\n    } = await this.getTenantOptions(tenantOptionsParams);\n\n    const onCreationSubscriptions = this.namesToPartialApps({\n      appsNamesStr: onCreationApps,\n      microservicesNamesStr: onCreationMicroservices\n    });\n\n    const onUpgradeAppsDefault = overridable ? null : onCreationApps;\n    const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;\n    const onUpgradeSubscriptions = this.namesToPartialApps({\n      appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,\n      microservicesNamesStr: onUpgradeMicroservicesEnabled\n        ? onUpgradeMicroservices\n        : onUpgradeMicroservicesDefault\n    });\n\n    const defaultSubscriptions: DefaultSubscriptions = {\n      onCreationSubscriptions,\n      onUpgradeSubscriptions\n    };\n\n    if (overridable) {\n      defaultSubscriptions.overrideOnCreationSubscriptions =\n        onCreationApps !== null || onCreationMicroservices !== null;\n      defaultSubscriptions.overrideOnUpgradeSubscriptions =\n        onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;\n    }\n\n    return defaultSubscriptions;\n  }\n\n  private async getTenantOptions(params = {}) {\n    return {\n      onCreationApps: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'default.tenant.applications'\n        },\n        null,\n        params\n      ),\n      onCreationMicroservices: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'default.tenant.microservices'\n        },\n        null,\n        params\n      ),\n      onUpgradeAppsEnabled: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.applications.enabled'\n        },\n        false,\n        params\n      ),\n      onUpgradeApps: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.applications'\n        },\n        null,\n        params\n      ),\n      onUpgradeMicroservicesEnabled: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.microservices.enabled'\n        },\n        false,\n        params\n      ),\n      onUpgradeMicroservices: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.microservices'\n        },\n        null,\n        params\n      )\n    };\n  }\n\n  private async saveOnCreationSubscriptions(defaultSubscriptions: DefaultSubscriptions) {\n    if (defaultSubscriptions.overrideOnCreationSubscriptions) {\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.applications',\n        value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.microservices',\n        value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)\n      });\n    } else {\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.applications'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.microservices'\n      });\n    }\n  }\n\n  private async saveOnUpgradeSubscriptions(defaultSubscriptions: DefaultSubscriptions) {\n    if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications.enabled',\n        value: 'true'\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices.enabled',\n        value: 'true'\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications',\n        value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices',\n        value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)\n      });\n    } else {\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications.enabled'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices.enabled'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices'\n      });\n    }\n  }\n\n  private async getTenantOption(option: ISystemOption, defaultValue = null, params = {}) {\n    let value;\n    try {\n      value = (await this.tenantOptionsService.detail(option, params)).data.value;\n      value = JSON.parse(value);\n    } catch (ex) {\n      value = !isUndefined(value) ? value : defaultValue;\n    }\n    return value;\n  }\n\n  private async setTenantOption(option: ISystemOption) {\n    return this.tenantOptionsService.update(option);\n  }\n\n  private async unsetTenantOption(option: ISystemOption) {\n    try {\n      await this.tenantOptionsService.delete(option);\n    } catch (ex) {\n      if (!ex || !ex.res || ex.res.status !== 404) {\n        throw ex;\n      }\n    }\n  }\n\n  private namesToPartialApps({\n    appsNamesStr,\n    microservicesNamesStr\n  }: {\n    appsNamesStr?: string;\n    microservicesNamesStr?: string;\n  }): PartialAppsList {\n    if (appsNamesStr === null && microservicesNamesStr === null) {\n      return null;\n    }\n\n    return [\n      ...(appsNamesStr || '')\n        .split(',')\n        .filter(name => name.length)\n        .map(name => ({ name: name.trim() })),\n      ...(microservicesNamesStr || '')\n        .split(',')\n        .filter(name => name.length)\n        .map(name => ({\n          name: name.trim(),\n          type: ApplicationType.MICROSERVICE\n        }))\n    ];\n  }\n\n  private partialAppsListToAppsNames(apps: PartialAppsList): string {\n    return apps\n      .filter(app => app.type !== ApplicationType.MICROSERVICE)\n      .map(app => app.name)\n      .join(',');\n  }\n\n  private partialAppsToMicroservicesNames(apps: PartialAppsList): string {\n    return apps\n      .filter(app => app.type === ApplicationType.MICROSERVICE)\n      .map(app => app.name)\n      .join(',');\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { IApplication } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { DefaultSubscriptions, PartialAppsList } from './default-subscriptions.model';\nimport { DefaultSubscriptionsService } from './default-subscriptions.service';\n\n/**\n * The component shows the main view for managing default subscriptions configuration.\n */\n@Component({\n  selector: 'c8y-default-subscriptions',\n  templateUrl: './default-subscriptions.component.html'\n})\nexport class DefaultSubscriptionsComponent {\n  /** Default subscriptions inherited from parent tenant. */\n  parentDefaultSubscriptions: DefaultSubscriptions;\n  /** Default subscriptions defined in the current tenant. */\n  currentDefaultSubscriptions: DefaultSubscriptions;\n  /** Form object. */\n  form: FormGroup;\n  /** Whether the configuration is being loaded. */\n  loading: boolean;\n  /** Hint text for disabled checkboxes. */\n  disabledCheckboxHint = gettext('Select \"Override inherited\" to enable.');\n\n  constructor(\n    private fb: FormBuilder,\n    private defaultSubscriptionsService: DefaultSubscriptionsService,\n    private alertService: AlertService\n  ) {}\n\n  /** Initializes the loading of the form and the current settings. */\n  async ngOnInit() {\n    this.loading = true;\n    await this.initForm();\n    await this.loadDefaultSubscriptions();\n    this.loading = false;\n  }\n\n  /** Loads the list of apps, builds the form and hooks value change events for override switches. */\n  async initForm() {\n    this.form = this.fb.group({\n      overrideOnCreationSubscriptions: [''],\n      overrideOnUpgradeSubscriptions: [''],\n      appRows: this.fb.array([])\n    });\n\n    const apps = await this.defaultSubscriptionsService.getSubscribableTenantApps();\n    const appRows = this.form.controls.appRows as FormArray;\n    apps.forEach(app => {\n      appRows.push(\n        this.fb.group({\n          app: [app],\n          subscribedOnCreation: [''],\n          subscribedOnUpgrade: ['']\n        })\n      );\n    });\n\n    this.form\n      .get('overrideOnCreationSubscriptions')\n      .valueChanges.subscribe(value => this.onOverrideOnCreationSubscriptionsChange(value));\n\n    this.form\n      .get('overrideOnUpgradeSubscriptions')\n      .valueChanges.subscribe(value => this.onOverrideOnUpgradeSubscriptionsChange(value));\n  }\n\n  /**\n   * Checks if given application row should be displayed.\n   * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.\n   */\n  shouldShowAppRow(appRowRawValue): boolean {\n    const { subscribedOnCreation, subscribedOnUpgrade } = appRowRawValue;\n    const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.form.value;\n\n    return (\n      subscribedOnCreation ||\n      subscribedOnUpgrade ||\n      overrideOnCreationSubscriptions ||\n      overrideOnUpgradeSubscriptions\n    );\n  }\n\n  /** Checks if there are no application rows to be displayed. */\n  isEmptyView(): boolean {\n    return !this.form\n      .getRawValue()\n      .appRows.some(appRowRawValue => this.shouldShowAppRow(appRowRawValue));\n  }\n\n  /**\n   * Checks if given application is subscribed (present in the given list of applications).\n   * @param app Application object to check.\n   * @param subscribedApps The list of application objects to check against.\n   * @returns True, if the application is present in the list.\n   */\n  isSubscribed(app: IApplication, subscribedApps: PartialAppsList): boolean {\n    return subscribedApps && subscribedApps.some(subscribedApp => subscribedApp.name === app.name);\n  }\n\n  /** Saves the current value of form object to backend. */\n  async save() {\n    try {\n      const defaultSubscriptions = this.getDefaultSubscriptionsForSave();\n      await this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(\n        defaultSubscriptions\n      );\n      this.alertService.success(gettext('Saved.'));\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n\n  private onOverrideOnCreationSubscriptionsChange(overrideOnCreationSubscriptions: boolean) {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    if (overrideOnCreationSubscriptions) {\n      this.enableSubscribeOnCreationCheckboxes();\n      return;\n    }\n    this.disableSubscribeOnCreationCheckboxes();\n    this.restoreSubscribeOnCreationFromParent();\n  }\n\n  private enableSubscribeOnCreationCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });\n    });\n  }\n\n  private disableSubscribeOnCreationCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });\n    });\n  }\n\n  private restoreSubscribeOnCreationFromParent() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnCreation: this.isSubscribed(\n          appRowControl.value.app,\n          this.parentDefaultSubscriptions.onCreationSubscriptions\n        )\n      });\n    });\n  }\n\n  private onOverrideOnUpgradeSubscriptionsChange(overrideOnUpgradeSubscriptions: boolean) {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    if (overrideOnUpgradeSubscriptions) {\n      this.enableSubscribeOnUpgradeCheckboxes();\n      return;\n    }\n    this.disableSubscribeOnUpgradeCheckboxes();\n    this.restoreSubscribeOnUpgradeFromParent();\n  }\n\n  private enableSubscribeOnUpgradeCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });\n    });\n  }\n\n  private disableSubscribeOnUpgradeCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });\n    });\n  }\n\n  private restoreSubscribeOnUpgradeFromParent() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnUpgrade: this.isSubscribed(\n          appRowControl.value.app,\n          this.parentDefaultSubscriptions.onUpgradeSubscriptions\n        )\n      });\n    });\n  }\n\n  private async loadDefaultSubscriptions() {\n    this.parentDefaultSubscriptions = await this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant();\n    this.currentDefaultSubscriptions = await this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant();\n\n    const {\n      overrideOnCreationSubscriptions,\n      overrideOnUpgradeSubscriptions\n    } = this.currentDefaultSubscriptions;\n    const onCreationSubscriptions = overrideOnCreationSubscriptions\n      ? this.currentDefaultSubscriptions.onCreationSubscriptions\n      : this.parentDefaultSubscriptions.onCreationSubscriptions;\n    const onUpgradeSubscriptions = overrideOnUpgradeSubscriptions\n      ? this.currentDefaultSubscriptions.onUpgradeSubscriptions\n      : this.parentDefaultSubscriptions.onUpgradeSubscriptions;\n\n    this.form.patchValue({\n      overrideOnCreationSubscriptions,\n      overrideOnUpgradeSubscriptions\n    });\n    (this.form.controls.appRows as FormArray).controls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnCreation: this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),\n        subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)\n      });\n    });\n  }\n\n  private getDefaultSubscriptionsForSave(): DefaultSubscriptions {\n    const { value } = this.form;\n    return {\n      overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,\n      onCreationSubscriptions: value.overrideOnCreationSubscriptions\n        ? value.appRows.filter(app => app.subscribedOnCreation).map(app => app.app)\n        : null,\n      overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,\n      onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions\n        ? value.appRows.filter(app => app.subscribedOnUpgrade).map(app => app.app)\n        : null\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { TenantUiService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class DefaultSubscriptionsGuard implements CanActivate {\n  private active: boolean;\n\n  constructor(private tenantUiService: TenantUiService) {}\n\n  /**\n   * Checks if default subscriptions feature should be active,\n   * i.e. whether the current tenant is the management or an enterprise tenant.\n   * **Note: the check is executed only once in the runtime.**\n   *\n   * @returns True, if the feature should be active.\n   */\n  async canActivate(): Promise<boolean> {\n    if (this.active === undefined) {\n      this.active =\n        (await this.tenantUiService.isManagementTenant()) ||\n        (await this.tenantUiService.isEnterpriseTenant());\n    }\n    return this.active;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { DefaultSubscriptionsGuard } from './default-subscriptions.guard';\n\n@Injectable()\nexport class DefaultSubscriptionsNavigationFactory implements NavigatorNodeFactory {\n  private navNode = new NavigatorNode({\n    label: gettext('Default subscriptions'),\n    path: '/default-subscriptions',\n    icon: 'c8y-c8y-data',\n    parent: gettext('Ecosystem'),\n    priority: 100\n  });\n\n  constructor(private defaultSubscriptionsGuard: DefaultSubscriptionsGuard) {}\n\n  /** Returns the navigation node if the feature is active. */\n  async get(): Promise<NavigatorNode> {\n    if (await this.defaultSubscriptionsGuard.canActivate()) {\n      return this.navNode;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, Route } from '@c8y/ngx-components';\n\nimport { DefaultSubscriptionsComponent } from './default-subscriptions.component';\nimport { DefaultSubscriptionsService } from './default-subscriptions.service';\nimport { DefaultSubscriptionsGuard } from './default-subscriptions.guard';\nimport { DefaultSubscriptionsNavigationFactory } from './default-subscriptions-navigation.factory';\n\n@NgModule({\n  imports: [CoreModule, ReactiveFormsModule],\n  declarations: [DefaultSubscriptionsComponent],\n  entryComponents: [DefaultSubscriptionsComponent],\n  exports: [DefaultSubscriptionsComponent],\n  providers: [\n    DefaultSubscriptionsService,\n    DefaultSubscriptionsGuard,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: DefaultSubscriptionsNavigationFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_ROUTE,\n      useValue: [\n        {\n          path: 'default-subscriptions',\n          component: DefaultSubscriptionsComponent,\n          canActivate: [DefaultSubscriptionsGuard]\n        }\n      ] as Route[],\n      multi: true\n    }\n  ]\n})\nexport class DefaultSubscriptionsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DefaultSubscriptionsNavigationFactory as ɵb} from './default-subscriptions-navigation.factory';\nexport {DefaultSubscriptionsGuard as ɵa} from './default-subscriptions.guard';"],"names":["DefaultSubscriptionsContextTenant"],"mappings":"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"}