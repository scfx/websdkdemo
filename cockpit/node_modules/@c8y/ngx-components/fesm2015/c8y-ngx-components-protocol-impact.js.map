{"version":3,"file":"c8y-ngx-components-protocol-impact.js","sources":["../../protocol-impact/impact-subscription.service.ts","../../protocol-impact/refresh-action.component.ts","../../protocol-impact/impact-action.factory.ts","../../protocol-impact/impact-protocol.module.ts","../../protocol-impact/c8y-ngx-components-protocol-impact.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FetchClient, IFetchOptions, IFetchResponse } from '@c8y/client';\n\n@Injectable()\nexport class ImpactSubscriptionService {\n  private readonly microserviceUrl: string = '/service/impact';\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(private client: FetchClient) {}\n\n  refreshDeviceResources(deviceId: string | number): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}/refresh/${deviceId}`, options);\n  }\n}\n","import { Component, OnInit, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IFetchResponse } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { ImpactSubscriptionService } from './impact-subscription.service';\n\n@Component({\n  selector: 'c8y-impact-refresh-action',\n  templateUrl: './refresh-action.component.html'\n})\nexport class RefreshActionComponent implements OnInit {\n  @ViewChild('templateCopy', { read: TemplateRef, static: true }) templateCopy;\n  requestInProgress: boolean;\n\n  constructor(\n    private vcRef: ViewContainerRef,\n    private router: Router,\n    private impactService: ImpactSubscriptionService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.vcRef.createEmbeddedView(this.templateCopy);\n  }\n\n  async refresh() {\n    // TODO This is only a dirty hack to retrieve deviceId from URL;\n    // In fact contextData should be provided for this component by a resolver?\n    const url: string =\n      this.router &&\n      this.router.routerState &&\n      this.router.routerState.snapshot &&\n      this.router.routerState.snapshot.url;\n    const deviceId: string = url && (/^\\/device\\/(\\d+)\\/.*$/gi.exec(url) || [])[1];\n\n    if (deviceId) {\n      this.requestInProgress = true;\n      try {\n        const res: IFetchResponse = await this.impactService.refreshDeviceResources(deviceId);\n        if (res && res.status !== 200) {\n          const data = res.json ? await res.json() : undefined;\n          this.alert.addServerFailure({ data, res });\n        } else {\n          this.alert.success(gettext('Device resource refresh scheduled.'));\n        }\n      } catch (ex) {\n        this.alert.addServerFailure(ex);\n      }\n      this.requestInProgress = false;\n    } else {\n      this.alert.danger(gettext('Could not find device ID in URL.'));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { ActionBarFactory, ActionBarItem } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { RefreshActionComponent } from './refresh-action.component';\n\n@Injectable()\nexport class ImpactActionFactory implements ActionBarFactory {\n  private static readonly applicationName = 'impact';\n\n  constructor(private applicationService: ApplicationService) {}\n\n  async get(activeRoute?: ActivatedRoute) {\n    const actions: ActionBarItem[] = [];\n\n    const data =\n      !activeRoute.parent || activeRoute.snapshot.data.context\n        ? activeRoute.snapshot.data\n        : activeRoute.parent.snapshot.data;\n    const { contextData } = data;\n\n    const isDeviceInfoTab: boolean = get(activeRoute, 'snapshot.url[0].path') === 'device-info';\n\n    const showRefreshActionButton: boolean =\n      isDeviceInfoTab &&\n      contextData &&\n      contextData.c8y_ImpactResourceInfo &&\n      /* call application service only for relevant devices to reduce number of service calls! */\n      (await this.applicationService.isAvailable(ImpactActionFactory.applicationName)).data;\n\n    if (showRefreshActionButton) {\n      actions.push({\n        priority: 500,\n        placement: 'right',\n        template: RefreshActionComponent\n      } as ActionBarItem);\n    }\n\n    return actions;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CoreModule, HOOK_ACTION_BAR } from '@c8y/ngx-components';\nimport { ImpactActionFactory } from './impact-action.factory';\nimport { ImpactSubscriptionService } from './impact-subscription.service';\nimport { RefreshActionComponent } from './refresh-action.component';\n\n@NgModule({\n  declarations: [RefreshActionComponent],\n  imports: [CoreModule],\n  providers: [\n    ImpactSubscriptionService,\n    { provide: HOOK_ACTION_BAR, useClass: ImpactActionFactory, multi: true }\n  ],\n  entryComponents: [RefreshActionComponent]\n})\nexport class ImpactProtocolModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}