import { Component, Input, Injectable, EventEmitter, NgModule } from '@angular/core';
import { TenantUiService, gettext, NavigatorNode, Permissions, ModalService, LoginService, AlertService, CoreModule, HOOK_TABS, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { TenantLoginOptionType, TenantLoginOptionsService, UserManagementSource, GrantType, TenantOptionsService, SystemOptionsService, ApplicationService, TfaStrategy } from '@c8y/client';
import { defaults, omitBy, isEmpty, omit, cloneDeep, isFinite } from 'lodash-es';
import { ControlContainer, NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { __awaiter } from 'tslib';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { map, catchError, tap, switchMap, shareReplay } from 'rxjs/operators';
import { forkJoin, from, of, BehaviorSubject } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';

class BasicAuthSettingsComponent {
    constructor(tenantLoginOptionsService, tenantUiService) {
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantUiService = tenantUiService;
        this.preferredLoginOptionType = TenantLoginOptionType.BASIC;
        this.tenantLoginOptionTypeEnum = TenantLoginOptionType;
    }
    ngOnChanges(changes) {
        if (changes.authConfiguration && changes.authConfiguration.currentValue) {
            const { loginOptions } = changes.authConfiguration.currentValue;
            const basic = loginOptions.find(this.tenantUiService.isBasic) || {};
            basic.authenticationRestrictions = defaults({}, omitBy(basic.authenticationRestrictions, isEmpty), {
                forbiddenUserAgents: [''],
                trustedUserAgents: [''],
                forbiddenClients: []
            });
            this.forbiddenUserAgents = basic.authenticationRestrictions.forbiddenUserAgents.map(val => ({ value: val }));
            this.trustedUserAgents = basic.authenticationRestrictions.trustedUserAgents.map(val => ({ value: val }));
            this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;
        }
    }
    ngDoCheck() {
        if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {
            this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;
        }
    }
    get forbiddenWebBrowsers() {
        return this.authenticationRestrictions.forbiddenClients.includes('WEB_BROWSERS');
    }
    set forbiddenWebBrowsers(value) {
        this.authenticationRestrictions.forbiddenClients = value ? ['WEB_BROWSERS'] : [];
    }
    forbiddenUserAgentsChanged({ event, index }) {
        this.forbiddenUserAgents[index].value = event;
        this.authenticationRestrictions.forbiddenUserAgents[index] = event;
    }
    forbiddenUserAgentsRemove(index) {
        this.authenticationRestrictions.forbiddenUserAgents.splice(index, 1);
        this.remove(this.forbiddenUserAgents, index);
    }
    trustedUserAgentsChanged({ event, index }) {
        this.trustedUserAgents[index].value = event;
        this.authenticationRestrictions.trustedUserAgents[index] = event;
    }
    trustedUserAgentsRemove(index) {
        this.authenticationRestrictions.trustedUserAgents.splice(index, 1);
        this.remove(this.trustedUserAgents, index);
    }
    get authenticationRestrictions() {
        return this.authConfiguration.loginOptions.find(this.tenantUiService.isBasic)
            .authenticationRestrictions;
    }
    add(collection) {
        collection.push({ value: '' });
    }
    remove(collection, index) {
        collection.splice(index, 1);
        if (!collection.length) {
            collection.push({ value: '' });
        }
    }
}
BasicAuthSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-basic-auth-settings',
                template: "<div class=\"card-block separator-top\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Basic Auth restrictions' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label class=\"c8y-switch\" title=\"{{ 'Forbidden for web browsers' | translate }}\">\n            <input\n              type=\"checkbox\"\n              name=\"forbiddenWebBrowsers\"\n              [(ngModel)]=\"forbiddenWebBrowsers\"\n            />\n            <span></span>\n            <span>{{ 'Forbidden for web browsers' | translate }}</span>\n          </label>\n          <div class=\"alert alert-warning\" *ngIf=\"preferredLoginOptionType === tenantLoginOptionTypeEnum.BASIC && forbiddenWebBrowsers\">\n            {{ 'You are about to forbid browsers from using Basic authentication. This will prevent users from using web applications on your tenant because you are going to set Basic authentication as the preferred login mode.' | translate }}\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <label title=\"{{ 'Forbidden user agents' | translate }}\">{{ 'Forbidden user agents' | translate }}</label>\n        <div\n          class=\"input-group m-t-8\"\n          *ngFor=\"\n            let forbiddenUserAgent of forbiddenUserAgents;\n            index as i;\n            last as isLast\n          \"\n        >\n          <input\n            type=\"text\"\n            [name]=\"'forbiddenUserAgent' + i\"\n            [ngModel]=\"forbiddenUserAgent.value\"\n            (ngModelChange)=\"forbiddenUserAgentsChanged({event: $event, index: i})\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} forbidden-agent\"\n          />\n          <div class=\"input-group-btn col-sm-2\">\n            <button\n              title=\"{{ 'Remove' | translate }}\"\n              type=\"button\"\n              (click)=\"forbiddenUserAgentsRemove(i)\"\n              class=\"btn btn-clean text-primary\"\n            >\n              <i class=\"dlt-c8y-icon-minus-circle text-danger\"></i>\n            </button>\n            <button\n              title=\"{{ 'Add' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-clean text-primary\"\n              (click)=\"add(forbiddenUserAgents)\"\n              *ngIf=\"isLast\"\n            >\n              <i class=\"dlt-c8y-icon-plus-circle\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-sm-6\">\n        <label title=\"{{ 'Trusted user agents' | translate }}\">{{ 'Trusted user agents' | translate }}</label>\n        <div\n          class=\"input-group m-t-8\"\n          *ngFor=\"\n            let trustedUserAgent of trustedUserAgents;\n            index as i;\n            last as isLast\n          \"\n        >\n          <input\n            type=\"text\"\n            [name]=\"'trustedUserAgent' + i\"\n            class=\"form-control\"\n            placeholder=\"{{ 'e.g.' | translate }} trusted-agent\"\n            [ngModel]=\"trustedUserAgent.value\"\n            (ngModelChange)=\"trustedUserAgentsChanged({event: $event, index: i})\"\n          />\n          <div class=\"input-group-btn col-sm-2\">\n            <button\n              title=\"{{ 'Remove' | translate }}\"\n              type=\"button\"\n              (click)=\"trustedUserAgentsRemove(i)\"\n              class=\"btn btn-clean text-primary\"\n            >\n              <i class=\"dlt-c8y-icon-minus-circle text-danger\"></i>\n            </button>\n            <button\n              title=\"{{ 'Add' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-clean text-primary\"\n              (click)=\"add(trustedUserAgents)\"\n              *ngIf=\"isLast\"\n            >\n              <i class=\"dlt-c8y-icon-plus-circle\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
BasicAuthSettingsComponent.ctorParameters = () => [
    { type: TenantLoginOptionsService },
    { type: TenantUiService }
];
BasicAuthSettingsComponent.propDecorators = {
    authConfiguration: [{ type: Input }]
};

class TabsFactory {
    constructor(router) {
        this.router = router;
    }
    get() {
        const tabs = [];
        if (this.router.url.match(/auth-configuration/g)) {
            tabs.push({
                path: 'auth-configuration/basic_settings',
                label: gettext('Basic settings'),
                icon: 'c8y-icon dlt-c8y-icon-unlock-alt',
                priority: 1100,
                orientation: 'horizontal'
            });
            tabs.push({
                path: 'auth-configuration/single_sign-on',
                label: gettext('Single sign-on'),
                icon: 'c8y-icon dlt-c8y-icon-sign-in',
                priority: 1050,
                orientation: 'horizontal'
            });
        }
        return tabs;
    }
}
TabsFactory.decorators = [
    { type: Injectable }
];
TabsFactory.ctorParameters = () => [
    { type: Router }
];

class NavigationFactory {
    constructor(permissions) {
        this.permissions = permissions;
        this.navs = [];
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const userHasPermission = this.permissions.hasAnyRole([
                'ROLE_TENANT_ADMIN',
                'ROLE_TENANT_MANAGEMENT_ADMIN'
            ]);
            if (this.navs.length === 0 && userHasPermission) {
                this.navs.push(new NavigatorNode({
                    label: gettext('Authentication'),
                    icon: 'c8y-shield',
                    path: '/auth-configuration',
                    parent: gettext('Settings'),
                    priority: 2000
                }));
            }
            return this.navs;
        });
    }
}
NavigationFactory.decorators = [
    { type: Injectable }
];
NavigationFactory.ctorParameters = () => [
    { type: Permissions }
];

class AuthConfigurationGuard {
    constructor(permissions) {
        this.permissions = permissions;
    }
    canActivate() {
        return this.permissions.hasAnyRole([
            'ROLE_TENANT_ADMIN',
            'ROLE_TENANT_MANAGEMENT_ADMIN'
        ]);
    }
}
AuthConfigurationGuard.decorators = [
    { type: Injectable }
];
AuthConfigurationGuard.ctorParameters = () => [
    { type: Permissions }
];

class AuthConfigurationService {
    constructor(tenantLoginOptionsService, tenantOptionsService, systemOptionsService, applicationService, tenantUiService) {
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantOptionsService = tenantOptionsService;
        this.systemOptionsService = systemOptionsService;
        this.applicationService = applicationService;
        this.tenantUiService = tenantUiService;
        this.systemOptionsWithDefaultValue = [
            { category: 'password', key: 'limit.validity', value: null },
            { category: 'password', key: 'enforce.strength', value: 'false' },
            { category: 'two-factor-authentication', key: 'tenant-scope-settings.enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
            { category: 'two-factor-authentication', key: 'enforced.group', value: '' }
        ];
        this.tenantOptionsWithDefaultValue = [
            { category: 'password', key: 'limit.validity', value: '0' },
            { category: 'password', key: 'strength.validity', value: 'false' },
            { category: 'two-factor-authentication', key: 'enabled', value: 'false' },
            { category: 'two-factor-authentication', key: 'token.validity', value: '43200' },
            { category: 'two-factor-authentication', key: 'pin.validity', value: '30' },
            { category: 'two-factor-authentication', key: 'enforced', value: 'false' },
            { category: 'two-factor-authentication', key: 'strategy', value: 'SMS' },
            { category: 'oauth.internal', key: 'basic-token.lifespan.seconds', value: null }
        ];
    }
    getAuthConfiguration$() {
        const loginOptions$ = this.getLoginOptions$();
        return forkJoin({
            loginOptions: loginOptions$,
            tenantOptions: this.getTenantOptions$(),
            systemOptions: this.getSystemOptions$(),
            smsGatewayAvailable: this.isSmsApplicationAvailable$(),
            preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)
        });
    }
    save(newAuthConfiguration, previousAuthConfiguration) {
        const tenantOptions = this.prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration);
        const updateTenantOptions = tenantOptions.map(tenantOption => this.tenantOptionsService.create(tenantOption));
        const basicLoginOption = this.prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration);
        const oauthInternalLoginOption = this.prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration);
        return Promise.all([
            this.saveOrUpdateLoginOption(basicLoginOption),
            this.saveOrUpdateLoginOption(oauthInternalLoginOption),
            updateTenantOptions
        ]);
    }
    saveOrUpdateLoginOption(loginOption) {
        return loginOption.id
            ? this.tenantLoginOptionsService.update(loginOption)
            : this.tenantLoginOptionsService.create(loginOption);
    }
    prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let basicLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption.authenticationRestrictions =
            this.authenticationRestriction(newAuthConfiguration);
        basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption = this.removeReadOnlyFields(basicLoginOption);
        return basicLoginOption;
    }
    prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        let oauthInternalLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        const sessionConfiguration = this.sessionConfiguration(newAuthConfiguration);
        sessionConfiguration !== null
            ? (oauthInternalLoginOption.sessionConfiguration = sessionConfiguration)
            : delete oauthInternalLoginOption.sessionConfiguration;
        oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        oauthInternalLoginOption = this.removeReadOnlyFields(oauthInternalLoginOption);
        return oauthInternalLoginOption;
    }
    originalLoginOptionWithDefaults(previousAuthConfiguration, loginOptionType) {
        return defaults({}, previousAuthConfiguration.loginOptions.find(loginOption => loginOption.type === loginOptionType), this.getDefaultLoginOption(loginOptionType));
    }
    sessionConfiguration(authConfiguration) {
        return authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
            .sessionConfiguration;
    }
    authenticationRestriction(authConfiguration) {
        const authenticationRestrictions = authConfiguration.loginOptions.find(this.tenantUiService.isBasic).authenticationRestrictions;
        return {
            trustedUserAgents: authenticationRestrictions.trustedUserAgents.filter(value => value),
            forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents.filter(value => value),
            forbiddenClients: authenticationRestrictions.forbiddenClients.filter(value => value)
        };
    }
    visibleOnLoginPage(authConfiguration, loginOptionType) {
        return authConfiguration.preferredLoginOptionType === loginOptionType;
    }
    removeReadOnlyFields(tenantLoginOption) {
        return omit(tenantLoginOption, [
            'self',
            'strengthValidity',
            'tfaStrategy',
            'greenMinLength',
            'enforceStrength',
            'strengthValidity',
            '_type'
        ]);
    }
    prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration) {
        const getValue = (authCfg, tenantOption) => authCfg.tenantOptions[tenantOption.category][tenantOption.key];
        const hasChanged = tenantOption => getValue(newAuthConfiguration, tenantOption) !==
            getValue(previousAuthConfiguration, tenantOption);
        return this.tenantOptionsWithDefaultValue
            .filter(tenantOption => getValue(newAuthConfiguration, tenantOption) !== null)
            .filter(tenantOption => hasChanged(tenantOption))
            .map(tenantOption => ({
            category: tenantOption.category,
            key: tenantOption.key,
            value: getValue(newAuthConfiguration, tenantOption).toString()
        }));
    }
    getLoginOptions$() {
        return from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(map(res => res.data), map(loginOptions => this.addDefaultLoginOptions(loginOptions)));
    }
    getPreferredLoginOptionType$(loginOptions$) {
        return loginOptions$.pipe(map(loginOptions => {
            return this.tenantUiService.getPreferredLoginOption(loginOptions).type;
        }));
    }
    addDefaultLoginOptions(loginOptions) {
        if (!loginOptions.find(this.tenantUiService.isBasic)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.BASIC));
        }
        if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.OAUTH2_INTERNAL));
        }
        return loginOptions;
    }
    getTenantOptions$() {
        return forkJoin(this.tenantOptionsWithDefaultValue.map((option) => from(this.tenantOptionsService.detail(option)).pipe(map(res => res.data), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    getSystemOptions$() {
        return forkJoin(this.systemOptionsWithDefaultValue.map((option) => from(this.systemOptionsService.detail(option)).pipe(map(res => res.data), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    isSmsApplicationAvailable$() {
        return from(this.applicationService.isAvailable('sms-gateway')).pipe(map(res => res.data));
    }
    getOptionsObject(options) {
        return options.reduce((optionsObject, option) => {
            optionsObject[option.category] = optionsObject[option.category] || {};
            optionsObject[option.category][option.key] = this.getValue(option);
            return optionsObject;
        }, {});
    }
    getValue(option) {
        try {
            return JSON.parse(option.value);
        }
        catch (e) {
            return option.value;
        }
    }
    getDefaultLoginOption(tenantLoginOptionType) {
        return {
            userManagementSource: UserManagementSource.INTERNAL,
            grantType: GrantType.PASSWORD,
            providerName: 'Cumulocity',
            visibleOnLoginPage: false,
            type: tenantLoginOptionType
        };
    }
}
AuthConfigurationService.decorators = [
    { type: Injectable }
];
AuthConfigurationService.ctorParameters = () => [
    { type: TenantLoginOptionsService },
    { type: TenantOptionsService },
    { type: SystemOptionsService },
    { type: ApplicationService },
    { type: TenantUiService }
];

class AuthConfigurationComponent {
    constructor(authConfigurationService, tenantLoginOptionsService, modalService, loginService, alertService) {
        this.authConfigurationService = authConfigurationService;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.modalService = modalService;
        this.loginService = loginService;
        this.alertService = alertService;
        this.reloading$ = new BehaviorSubject(false);
        this.reload = new EventEmitter();
        this.authConfiguration$ = this.reload.pipe(tap(() => this.reloading$.next(true)), switchMap(() => this.authConfigurationService.getAuthConfiguration$()), tap(() => this.reloading$.next(false)), shareReplay(1));
    }
    ngOnInit() {
        this.authConfigurationSubscription = this.authConfiguration$.subscribe((authConfiguration) => {
            this.authConfiguration = authConfiguration;
            this.previousAuthConfiguration = cloneDeep(this.authConfiguration);
        });
        this.loadAuthConfig();
    }
    loadAuthConfig() {
        this.reload.next();
    }
    ngOnDestroy() {
        this.authConfigurationSubscription.unsubscribe();
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalService.confirmLogout();
                yield this.authConfigurationService.save(this.authConfiguration, this.previousAuthConfiguration);
                yield this.loginService.logout(true);
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
}
AuthConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-auth-configuration',
                template: "<c8y-title>{{ 'Authentication' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"loadAuthConfig()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<form role=\"form\" class=\"card card--fullpage\" #authConfigurationForm=\"ngForm\" novalidate>\n  <div class=\"card-header separator\">\n    <div class=\"card-title\">\n      {{ 'Authentication' | translate }}\n    </div>\n  </div>\n  <div class=\"inner-scroll\" *ngIf=\"authConfiguration\">\n    <c8y-login-settings [authConfiguration]=\"authConfiguration\"></c8y-login-settings>\n    <c8y-basic-auth-settings [authConfiguration]=\"authConfiguration\"></c8y-basic-auth-settings>\n    <c8y-session-configuration [authConfiguration]=\"authConfiguration\"></c8y-session-configuration>\n    <c8y-auth-tfa [authConfiguration]=\"authConfiguration\"></c8y-auth-tfa>\n  </div>\n  <div class=\"card-footer separator\">\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!authConfigurationForm.form.valid || authConfigurationForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
            },] }
];
AuthConfigurationComponent.ctorParameters = () => [
    { type: AuthConfigurationService },
    { type: TenantLoginOptionsService },
    { type: ModalService },
    { type: LoginService },
    { type: AlertService }
];

// tslint:disable:no-string-literal
var TfaStateEnum;
(function (TfaStateEnum) {
    TfaStateEnum[TfaStateEnum["TFA_UNDEFINED_BY_SYSTEM"] = 0] = "TFA_UNDEFINED_BY_SYSTEM";
    TfaStateEnum[TfaStateEnum["TFA_ENFORCED_FOR_GROUP"] = 1] = "TFA_ENFORCED_FOR_GROUP";
    TfaStateEnum[TfaStateEnum["TFA_ENABLED_BY_SYSTEM"] = 2] = "TFA_ENABLED_BY_SYSTEM";
    TfaStateEnum[TfaStateEnum["TFA_ENFORCED_BY_SYSTEM"] = 3] = "TFA_ENFORCED_BY_SYSTEM";
})(TfaStateEnum || (TfaStateEnum = {}));
class TfaSettingsComponent {
    constructor() {
        this.preferredLoginOptionType = TenantLoginOptionType.BASIC;
        this.tfaStateEnum = TfaStateEnum;
        this.tfaStrategyEnum = TfaStrategy;
        this.tenantLoginOptionTypeEnum = TenantLoginOptionType;
        this.TOTP_REQUIRES_OAUTH_POPOVER = gettext('TOTP requires OAI-Secure login mode.');
        this.SMS_APP_NOT_SUBSCRIBED_POPOVER = gettext('SMS strategy requires messaging application to be subscribed.');
        this.TFA_IS_ENFORCED_BY_SYSTEM_POPOVER = gettext('The setting is enforced on the platform level.');
        this.TFA_IS_ENABLED_BY_SYSTEM_POPOVER = gettext('The setting is enabled on the platform level.');
        this.TOKEN_VALIDITY_DETERMINED_BY_JWT_POPOVER = gettext("In OAI-Secure login mode, the token's validity limit is determined by the JWT token and cannot be edited here.");
        this.TFA_IS_ENABLED_BY_ENFORCE_FOR_GROUP_POPOVER = gettext('The setting is enabled on the platform level because it is enforced for particular roles.');
    }
    ngOnChanges(changes) {
        if (changes.authConfiguration && changes.authConfiguration.currentValue) {
            this.smsGatewayAvailable = changes.authConfiguration.currentValue.smsGatewayAvailable;
            this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;
        }
    }
    ngDoCheck() {
        if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {
            this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;
            this.tenantTfaStrategy = this.tfaBySmsCanBeSet ? TfaStrategy.SMS : TfaStrategy.TOTP;
        }
    }
    get tenantTfaTokenValidity() {
        return this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'];
    }
    set tenantTfaTokenValidity(value) {
        this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'] = value;
    }
    get tenantTfaPinValidity() {
        return this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'];
    }
    set tenantTfaPinValidity(value) {
        this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'] = value;
    }
    get tenantTfaEnabled() {
        return this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'];
    }
    set tenantTfaEnabled(value) {
        this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'] = value;
    }
    get tenantTfaEnforced() {
        return this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'];
    }
    set tenantTfaEnforced(value) {
        this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'] = value;
    }
    get tenantTfaStrategy() {
        return this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'];
    }
    set tenantTfaStrategy(value) {
        this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'] = value;
    }
    get systemTfaEnforcedGroup() {
        return this.authConfiguration.systemOptions['two-factor-authentication']['enforced.group'];
    }
    get systemTfaTenantScopeSettingEnabled() {
        return this.authConfiguration.systemOptions['two-factor-authentication']['tenant-scope-settings.enabled'];
    }
    get systemTfaEnabled() {
        return this.authConfiguration.systemOptions['two-factor-authentication']['enabled'];
    }
    get systemTfaEnforced() {
        return this.authConfiguration.systemOptions['two-factor-authentication']['enforced'];
    }
    get tfaState() {
        if (this.systemTfaEnforced) {
            return this.tfaStateEnum.TFA_ENFORCED_BY_SYSTEM;
        }
        if (!isEmpty(this.systemTfaEnforcedGroup)) {
            return this.tfaStateEnum.TFA_ENFORCED_FOR_GROUP;
        }
        if (this.systemTfaEnabled) {
            return this.tfaStateEnum.TFA_ENABLED_BY_SYSTEM;
        }
        return this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM;
    }
    get tfaBySmsCanBeSet() {
        return (this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) && this.smsGatewayAvailable;
    }
    get tfaByTotpCanBeSet() {
        return ((this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) &&
            this.preferredLoginOptionType === TenantLoginOptionType.OAUTH2_INTERNAL);
    }
}
TfaSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-auth-tfa',
                template: "<div\n  class=\"card-block separator-top\"\n  *ngIf=\"preferredLoginOptionType !== tenantLoginOptionTypeEnum.OAUTH2\"\n>\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Two-factor authentication' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <c8y-form-group>\n      <label\n        class=\"c8y-switch\"\n        title=\"{{ 'Enable two-factor authentication' | translate }}\"\n        *ngIf=\"\n          tfaState === tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM;\n          else enabledOrEnforcedOnSystemLevelTemplate\n        \"\n      >\n        <input type=\"checkbox\" [(ngModel)]=\"tenantTfaEnabled\" name=\"tenantTfaEnabled\" />\n        <span></span>\n        <span>{{ 'Enable' | translate }}</span>\n      </label>\n\n      <ng-template #enabledOrEnforcedOnSystemLevelTemplate>\n        <div [ngSwitch]=\"tfaState\">\n          <span *ngSwitchCase=\"tfaStateEnum.TFA_ENABLED_BY_SYSTEM\">\n            {{ 'Two-factor authentication is enabled on all users' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ TFA_IS_ENABLED_BY_SYSTEM_POPOVER | translate }}\"\n              [outsideClick]=\"true\"\n              placement=\"bottom\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </span>\n          <div *ngSwitchCase=\"tfaStateEnum.TFA_ENFORCED_BY_SYSTEM\">\n            <span>\n              {{ 'Two-factor authentication is enforced on all users' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                placement=\"bottom\"\n                [outsideClick]=\"true\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </span>\n          </div>\n          <div *ngSwitchCase=\"tfaStateEnum.TFA_ENFORCED_FOR_GROUP\">\n            <span>\n              <span translate [translateParams]=\"{ role: systemTfaEnforcedGroup }\" ngNonBindable>\n                Two-factor authentication is enabled on all users and enforced on users with role\n                {{ role }}.\n              </span>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENABLED_BY_ENFORCE_FOR_GROUP_POPOVER | translate }}\"\n                [outsideClick]=\"true\"\n                placement=\"bottom\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </ng-template>\n    </c8y-form-group>\n\n    <fieldset *ngIf=\"tfaBySmsCanBeSet || tfaByTotpCanBeSet\">\n      <div class=\"row\">\n        <c8y-form-group class=\"col-sm-6\">\n          <label title=\"{{ 'TFA strategy' | translate }}\">\n            {{ 'TFA strategy' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ SMS_APP_NOT_SUBSCRIBED_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"!tfaBySmsCanBeSet\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ TOTP_REQUIRES_OAUTH_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"!tfaByTotpCanBeSet\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n            </button>\n          </label>\n\n          <div class=\"c8y-select-wrapper\">\n            <select class=\"form-control\" [(ngModel)]=\"tenantTfaStrategy\" name=\"tenantTfaStrategy\">\n              <option value=\"{{ tfaStrategyEnum.SMS }}\" translate [disabled]=\"!tfaBySmsCanBeSet\">\n                SMS based\n              </option>\n              <option value=\"{{ tfaStrategyEnum.TOTP }}\" translate [disabled]=\"!tfaByTotpCanBeSet\">\n                Google Authenticator (TOTP)\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </c8y-form-group>\n      </div>\n\n      <div\n        class=\"row\"\n        *ngIf=\"\n          tenantTfaStrategy === tfaStrategyEnum.TOTP &&\n          tfaState !== tfaStateEnum.TFA_ENFORCED_BY_SYSTEM\n        \"\n      >\n        <label title=\"{{ 'Enforcement' | translate }}\">{{ 'Enforcement' | translate }}</label>\n        <div class=\"form-control-static\">\n          <label\n            title=\"{{ 'Enforce two-factor authentication on all users' | translate }}\"\n            class=\"c8y-switch\"\n          >\n            <input type=\"checkbox\" name=\"tenantTfaEnforced\" [(ngModel)]=\"tenantTfaEnforced\" />\n            <span></span>\n            <span>{{ 'Enforce two-factor authentication on all users' | translate }}</span>\n          </label>\n        </div>\n      </div>\n\n      <div class=\"row\" *ngIf=\"tenantTfaStrategy === tfaStrategyEnum.SMS\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Token validity limit' | translate }}\"\n              >{{ 'Token validity limit' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                *ngIf=\"!systemTfaTenantScopeSettingEnabled\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TOKEN_VALIDITY_DETERMINED_BY_JWT_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                *ngIf=\"\n                  systemTfaTenantScopeSettingEnabled &&\n                  preferredLoginOptionType === tenantLoginOptionTypeEnum.OAUTH2_INTERNAL\n                \"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control text-right\"\n                name=\"tenantTfaTokenValidity\"\n                [(ngModel)]=\"tenantTfaTokenValidity\"\n                [disabled]=\"\n                  !systemTfaTenantScopeSettingEnabled ||\n                  preferredLoginOptionType === tenantLoginOptionTypeEnum.OAUTH2_INTERNAL\n                \"\n                [required]=\"systemTfaTenantScopeSettingEnabled\"\n                [max]=\"999999\"\n                [min]=\"0\"\n              />\n              <span class=\"input-group-addon\" translate>minutes</span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Verification code validity limit' | translate }}\">\n              {{ 'Verification code validity limit' | translate }}\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ TFA_IS_ENFORCED_BY_SYSTEM_POPOVER | translate }}\"\n                [outsideClick]=\"true\"\n                placement=\"right\"\n                *ngIf=\"!systemTfaTenantScopeSettingEnabled\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control text-right\"\n                name=\"tenantTfaPinValidity\"\n                [(ngModel)]=\"tenantTfaPinValidity\"\n                [disabled]=\"!systemTfaTenantScopeSettingEnabled\"\n                [required]=\"systemTfaTenantScopeSettingEnabled\"\n                [max]=\"999999\"\n                [min]=\"0\"\n              />\n              <span class=\"input-group-addon\" translate>minutes</span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n    </fieldset>\n    <div\n      *ngIf=\"\n        preferredLoginOptionType !== tenantLoginOptionTypeEnum.OAUTH2_INTERNAL &&\n        !smsGatewayAvailable\n      \"\n    >\n      <div class=\"alert alert-warning\">\n        <strong>{{ 'None of TFA strategy can be set.' | translate }}</strong><br />\n        {{ SMS_APP_NOT_SUBSCRIBED_POPOVER | translate }}<br />\n        {{ TOTP_REQUIRES_OAUTH_POPOVER | translate }}\n      </div>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
TfaSettingsComponent.propDecorators = {
    authConfiguration: [{ type: Input }]
};

class SessionConfigurationComponent {
    constructor(tenantUiService, translateService) {
        this.tenantUiService = tenantUiService;
        this.translateService = translateService;
        this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = gettext('The value must be greater than "Token lifespan" and not less than {{ minAbsoluteTimeout }}.');
        this.RENEWAL_TIMEOUT_VALIDATION_MESSAGE = gettext('The value must be less than "Token lifespan".');
        this.MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE = gettext('The value must be less than "Session absolute timeout".');
        this.MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE = gettext('The value must be greater than "Session renewal timeout".');
        this.USER_AGENT_VALIDATION_REQUIRED_POPOVER = gettext('If selected, then every request needs to use the same "User-Agent" header as the first request which initiated the session.');
        this.MIN_ABSOLUTE_TIMEOUT = 15 * 60;
        this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = this.translateService.instant(this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE, { minAbsoluteTimeout: this.MIN_ABSOLUTE_TIMEOUT });
    }
    ngOnChanges(changes) {
        if (changes.authConfiguration && changes.authConfiguration.currentValue) {
            const oauthInternal = changes.authConfiguration.currentValue.loginOptions.find(this.tenantUiService.isOauthInternal) || {};
            this.originalSessionConfiguration = cloneDeep(oauthInternal.sessionConfiguration);
            this.sessionConfiguration = oauthInternal.sessionConfiguration;
            this.previousTokenLifespan = this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];
        }
    }
    get renewalTimeoutSeconds() {
        const sessionConfiguration = this.sessionConfiguration;
        return this.convertToSeconds(sessionConfiguration.renewalTimeoutMillis);
    }
    set renewalTimeoutSeconds(value) {
        this.sessionConfiguration.renewalTimeoutMillis = this.convertToMillis(value);
    }
    get absoluteTimeoutSeconds() {
        const sessionConfiguration = this.sessionConfiguration;
        return this.convertToSeconds(sessionConfiguration.absoluteTimeoutMillis);
    }
    set absoluteTimeoutSeconds(value) {
        this.sessionConfiguration.absoluteTimeoutMillis = this.convertToMillis(value);
    }
    get maximumNumberOfParallelSessions() {
        return this.sessionConfiguration.maximumNumberOfParallelSessions;
    }
    set maximumNumberOfParallelSessions(value) {
        this.sessionConfiguration.maximumNumberOfParallelSessions = value;
    }
    get userAgentValidationRequired() {
        return this.sessionConfiguration.userAgentValidationRequired;
    }
    set userAgentValidationRequired(value) {
        this.sessionConfiguration.userAgentValidationRequired = value;
    }
    get basicTokenLifespan() {
        return this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];
    }
    set basicTokenLifespan(value) {
        this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'] = value;
    }
    get useSessionConfiguration() {
        return !!this.sessionConfiguration;
    }
    set useSessionConfiguration(value) {
        this.sessionConfiguration = value ? defaults({}, this.originalSessionConfiguration, {
            absoluteTimeoutMillis: 1209600000,
            renewalTimeoutMillis: 86400000,
            maximumNumberOfParallelSessions: 5,
            userAgentValidationRequired: false
        }) : null;
        this.basicTokenLifespan = this.previousTokenLifespan || 172800; // 2 days
    }
    get absoluteTimeoutConstraints() {
        return {
            min: Math.max(this.MIN_ABSOLUTE_TIMEOUT, this.basicTokenLifespan + 1)
        };
    }
    get renewalTimeoutConstraints() {
        return {
            min: this.MIN_ABSOLUTE_TIMEOUT / 2,
            max: this.basicTokenLifespan ? this.basicTokenLifespan - 1 : null
        };
    }
    get basicTokenLifespanConstraints() {
        return {
            min: this.renewalTimeoutSeconds ? this.renewalTimeoutSeconds + 1 : null,
            max: this.absoluteTimeoutSeconds ? this.absoluteTimeoutSeconds - 1 : null
        };
    }
    get sessionConfiguration() {
        return this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
            .sessionConfiguration;
    }
    set sessionConfiguration(value) {
        this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)
            .sessionConfiguration = value;
    }
    convertToMillis(seconds) {
        return isFinite(seconds) ? seconds * 1000 : null;
    }
    convertToSeconds(milliseconds) {
        return isFinite(milliseconds) ? Math.ceil(milliseconds / 1000) : null;
    }
}
SessionConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-session-configuration',
                template: "<div class=\"card-block separator-top overflow-auto\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'OAI-Secure session configuration' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label class=\"c8y-switch\" title=\"{{ 'Use session configuration' | translate }}\">\n            <input\n              type=\"checkbox\"\n              name=\"useSessionConfiguration\"\n              [(ngModel)]=\"useSessionConfiguration\"\n            />\n            <span></span>\n            <span>{{ 'Use session configuration' | translate }}</span>\n          </label>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <fieldset *ngIf=\"sessionConfiguration\">\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label class=\"c8y-switch\" title=\"{{ 'User agent validation required' | translate }}\">\n              <input\n                type=\"checkbox\"\n                name=\"userAgentValidationRequired\"\n                [(ngModel)]=\"userAgentValidationRequired\"\n              />\n              <span></span>\n              <span>{{ 'User agent validation required' | translate }}</span>\n              <button\n                class=\"btn btn-clean\"\n                popover=\"{{ USER_AGENT_VALIDATION_REQUIRED_POPOVER | translate }}\"\n                placement=\"right\"\n                [outsideClick]=\"true\"\n                container=\"body\"\n              >\n                <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n              </button>\n            </label>\n          </c8y-form-group>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Session absolute timeout' | translate }}\">{{ 'Session absolute timeout' | translate }}\n            </label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"absoluteTimeoutSeconds\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"absoluteTimeoutSeconds\"\n                [required]=\"useSessionConfiguration\"\n                [min]=\"absoluteTimeoutConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"min\"\n                text=\"{{ ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Session renewal timeout' | translate }}\">{{ 'Session renewal timeout' | translate }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"renewalTimeoutSeconds\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"renewalTimeoutSeconds\"\n                [required]=\"useSessionConfiguration\"\n                [max]=\"renewalTimeoutConstraints.max\"\n                [min]=\"renewalTimeoutConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"max\"\n                text=\"{{ RENEWAL_TIMEOUT_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Maximum parallel sessions per user' | translate }}\">{{\n              'Maximum parallel sessions per user' | translate\n            }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"maximumNumberOfParallelSessions\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"maximumNumberOfParallelSessions\"\n                [required]=\"useSessionConfiguration\"\n                [min]=\"1\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>sessions</span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-sm-6\">\n          <c8y-form-group>\n            <label title=\"{{ 'Token lifespan' | translate }}\">{{\n              'Token lifespan' | translate\n            }}</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                name=\"basicTokenLifespan\"\n                class=\"form-control text-right\"\n                [(ngModel)]=\"basicTokenLifespan\"\n                [required]=\"useSessionConfiguration\"\n                [max]=\"basicTokenLifespanConstraints.max\"\n                [min]=\"basicTokenLifespanConstraints.min\"\n                step=\"1\"\n              />\n              <span class=\"input-group-addon\" translate>seconds</span>\n            </div>\n            <c8y-messages>\n              <c8y-message\n                name=\"max\"\n                text=\"{{ MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n              <c8y-message\n                name=\"min\"\n                text=\"{{ MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE | translate }}\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </fieldset>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
SessionConfigurationComponent.ctorParameters = () => [
    { type: TenantUiService },
    { type: TranslateService }
];
SessionConfigurationComponent.propDecorators = {
    authConfiguration: [{ type: Input }]
};

class LoginSettingsComponent {
    constructor(tenantUiService) {
        this.tenantUiService = tenantUiService;
        this.PREFERRED_LOGIN_MODE_POPOVER = gettext('Main difference is the storage of the authentication information. With Basic Auth, it is saved in a session storage and with OAI-Secure in a HttpOnly cookie. OAI-Secure grant is recommended as the authentication information is not accessible via JavaScript. Single sign-on redirect allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.');
        this.ENFORCED_BY_PLATFORM_POPOVER = gettext('The setting is enforced on the platform level.');
        this.tenantLoginOptionTypeEnum = TenantLoginOptionType;
        this.PASSWORD_CATEGORY = 'password';
        this.LIMIT_VALIDITY_KEY = 'limit.validity';
        this.TENANT_STRENGTH_VALIDITY_KEY = 'strength.validity';
        this.SYSTEM_STRENGTH_VALIDITY_KEY = 'enforce.strength';
    }
    ngOnChanges(changes) {
        if (changes.authConfiguration && changes.authConfiguration.currentValue) {
            this.isOauth2 = !!changes.authConfiguration.currentValue.loginOptions.find(this.tenantUiService.isOauth2);
        }
    }
    get systemPasswordLimitValidity() {
        return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];
    }
    get passwordLimitValidity() {
        return this.systemPasswordLimitValidity !== null ?
            this.systemPasswordLimitValidity : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];
    }
    set passwordLimitValidity(value) {
        if (this.systemPasswordLimitValidity === null) {
            this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY] = value;
        }
    }
    get systemPasswordEnforceStrength() {
        return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.SYSTEM_STRENGTH_VALIDITY_KEY];
    }
    get passwordEnforceStrength() {
        return this.systemPasswordEnforceStrength ?
            this.systemPasswordEnforceStrength : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY];
    }
    set passwordEnforceStrength(value) {
        if (!this.systemPasswordEnforceStrength) {
            this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY] = value;
        }
    }
}
LoginSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-login-settings',
                template: "<div class=\"card-block separator-top overflow-auto\" *ngIf=\"authConfiguration\">\n  <div class=\"col-sm-2\">\n    <h4 class=\"text-right\">{{ 'Login settings' | translate }}</h4>\n  </div>\n\n  <div class=\"col-sm-9\">\n    <div class=\"row  m-b-8\">\n      <c8y-form-group class=\"col-sm-6\">\n        <label title=\"{{ 'Preferred login mode' | translate }}\">\n          {{ 'Preferred login mode' | translate }}\n          <button\n            class=\"btn btn-clean\"\n            popover=\"{{ PREFERRED_LOGIN_MODE_POPOVER | translate }}\"\n            placement=\"right\"\n            [outsideClick]=\"true\"\n          >\n            <i [c8yIcon]=\"'question-circle-o'\" class=\"text-info\"></i>\n          </button>\n        </label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"preferredLoginOptionType\"\n            name=\"preferredLoginOptionType\"\n            [(ngModel)]=\"authConfiguration.preferredLoginOptionType\"\n          >\n            <option value=\"{{tenantLoginOptionTypeEnum.BASIC}}\" translate>Basic Auth</option>\n            <option value=\"{{tenantLoginOptionTypeEnum.OAUTH2_INTERNAL}}\" translate>OAI-Secure</option>\n            <option value=\"{{tenantLoginOptionTypeEnum.OAUTH2}}\" [disabled]=\"!isOauth2\" translate>\n              Single sign-on redirect\n            </option>\n          </select>\n        </div>\n      </c8y-form-group>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label title=\"{{ 'Password validity limit' | translate }}\"\n            >{{ 'Password validity limit' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ ENFORCED_BY_PLATFORM_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"systemPasswordLimitValidity\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              name=\"passwordLimitValidity\"\n              class=\"form-control text-right\"\n              [(ngModel)]=\"passwordLimitValidity\"\n              min=\"0\"\n              max=\"999999\"\n              step=\"1\"\n              required\n              [disabled]=\"systemPasswordLimitValidity\"\n            />\n            <span class=\"input-group-addon\" translate>days</span>\n          </div>\n          <p class=\"help-block\">\n            {{ 'Default: 0 (unlimited validity)' | translate }}\n          </p>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-sm-6\">\n        <c8y-form-group>\n          <label title=\"{{ 'Password strength' | translate }}\"\n            >{{ 'Password strength' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ ENFORCED_BY_PLATFORM_POPOVER | translate }}\"\n              placement=\"bottom\"\n              [outsideClick]=\"true\"\n              *ngIf=\"systemPasswordEnforceStrength\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <div>\n            <label\n              title=\"{{ 'Enforce that all passwords are strong (green)' | translate }}\"\n              class=\"c8y-switch\"\n            >\n              <input\n                type=\"checkbox\"\n                name=\"passwordEnforceStrength\"\n                [(ngModel)]=\"passwordEnforceStrength\"\n                [disabled]=\"systemPasswordEnforceStrength\"\n              />\n              <span></span>\n              <span>{{ 'Enforce strong passwords (green)' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
LoginSettingsComponent.ctorParameters = () => [
    { type: TenantUiService }
];
LoginSettingsComponent.propDecorators = {
    authConfiguration: [{ type: Input }]
};

const ɵ0 = [
    {
        path: 'auth-configuration',
        redirectTo: 'auth-configuration/basic_settings',
        pathMatch: 'full'
    },
    {
        path: 'auth-configuration/basic_settings',
        component: AuthConfigurationComponent,
        canActivate: [AuthConfigurationGuard]
    }
];
class AuthConfigurationModule {
}
AuthConfigurationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SessionConfigurationComponent,
                    LoginSettingsComponent,
                    BasicAuthSettingsComponent,
                    AuthConfigurationComponent,
                    TfaSettingsComponent
                ],
                exports: [],
                imports: [CoreModule, PopoverModule],
                providers: [
                    AuthConfigurationService,
                    AuthConfigurationGuard,
                    { provide: HOOK_TABS, useClass: TabsFactory, multi: true },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: NavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AuthConfigurationModule, TabsFactory, ɵ0, SessionConfigurationComponent as ɵa, LoginSettingsComponent as ɵb, BasicAuthSettingsComponent as ɵc, AuthConfigurationComponent as ɵd, AuthConfigurationService as ɵe, TfaSettingsComponent as ɵf, AuthConfigurationGuard as ɵg, NavigationFactory as ɵh };
//# sourceMappingURL=c8y-ngx-components-auth-configuration.js.map
