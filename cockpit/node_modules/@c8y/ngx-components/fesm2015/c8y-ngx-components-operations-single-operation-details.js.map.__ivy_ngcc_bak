{"version":3,"file":"c8y-ngx-components-operations-single-operation-details.js","sources":["../../operations/single-operation-details/single-operation-modal.component.ts","../../operations/single-operation-details/single-operation-details.service.ts","../../operations/single-operation-details/single-operation.component.ts","../../operations/single-operation-details/single-operation-list-item.component.ts","../../operations/single-operation-details/single-operation-details.component.ts","../../operations/single-operation-details/single-operation-details.module.ts","../../operations/single-operation-details/c8y-ngx-components-operations-single-operation-details.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { IOperation } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-single-operation-modal',\n  templateUrl: './single-operation-modal.component.html'\n})\nexport class SingleOperationModalComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = false;\n  @Input() readOnly: boolean = false;\n\n  constructor(public modalRef: BsModalRef) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { IOperation, OperationService } from '@c8y/client';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\n\n@Injectable()\nexport class SingleOperationDetailsService {\n  constructor(private operationService: OperationService, private modalService: BsModalService) {}\n\n  /**\n   * Opens a modal window with the details of given single operation.\n   * @param operationOrOperationId Operation's object or id.\n   * @param options Additional options:\n   * - `collapsed`: boolean - whether the details pane should be initially collapsed\n   * - `readOnly`: boolean - whether the details should be displayed in read-only mode\n   */\n  async openDetails(\n    operationOrOperationId: IOperation | string | number,\n    options?: { collapsed?: boolean; readOnly?: boolean }\n  ) {\n    const operation: IOperation = (operationOrOperationId as IOperation).id\n      ? (operationOrOperationId as IOperation)\n      : (await this.operationService.detail(operationOrOperationId)).data;\n    const initialState = { operation, ...options };\n\n    this.modalService.show(SingleOperationModalComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { operationStatusClasses, operationStatusIcons } from '@c8y/ngx-components';\nimport { SingleOperationDetailsService } from './single-operation-details.service';\n\n/**\n * Single operation component displays a single operation's status, description and creationTime.\n *\n * Example:\n *\n * ```html\n * <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n * ```\n */\n@Component({\n  selector: 'c8y-single-operation',\n  templateUrl: './single-operation.component.html'\n})\nexport class SingleOperationComponent {\n  @Input() operation: IOperation;\n\n  statusIcons: object;\n  statusClasses: object;\n\n  constructor(private singleOperationDetailsService: SingleOperationDetailsService) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n  }\n\n  openDetails() {\n    this.singleOperationDetailsService.openDetails(this.operation);\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { assign, get } from 'lodash-es';\nimport { IOperation, OperationService, OperationStatus } from '@c8y/client';\nimport {\n  AlertService,\n  ListItemComponent,\n  Tab,\n  gettext,\n  operationStatusClasses,\n  operationStatusIcons\n} from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-single-operation-list-item',\n  templateUrl: './single-operation-list-item.component.html'\n})\nexport class SingleOperationListItemComponent implements OnInit {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = true;\n  @Input() readOnly: boolean = false;\n\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  @ViewChild('details', { static: true }) detailsTabTemplate: any;\n  @ViewChild('historyOfChanges', { static: true }) historyOfChangesTabTemplate: any;\n\n  tabs: Tab[] = [];\n  selectedTab: Tab;\n  statusIcons = operationStatusIcons;\n  statusClasses = operationStatusClasses;\n  OperationStatus = OperationStatus;\n\n  get displayedDescription() {\n    const commandText = get(this.operation, 'c8y_Command.text');\n    const opDescription = get(this.operation, 'description');\n    return commandText || opDescription || gettext('(no command text or description available)');\n  }\n\n  constructor(\n    private router: Router,\n    private operationService: OperationService,\n    private alertService: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        icon: 'asterisk',\n        template: this.detailsTabTemplate\n      } as Tab,\n      {\n        label: gettext('History of changes'),\n        icon: 'archive',\n        template: this.historyOfChangesTabTemplate\n      } as Tab\n    ];\n    this.selectedTab = this.tabs[0];\n  }\n\n  scheduleAsBulkOperation() {\n    this.router.navigateByUrl(`/devicecontrol/single/create-bulk/${this.operation.id}`);\n  }\n\n  async cancel() {\n    try {\n      const operationAfterUpdate = (await this.operationService.update({\n        id: this.operation.id,\n        status: OperationStatus.FAILED,\n        failureReason: gettext('Operation cancelled by user.')\n      })).data;\n      assign(this.operation, operationAfterUpdate);\n      this.alertService.success(gettext('Operation cancelled.'));\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { BulkOperationDetailsService } from '@c8y/ngx-components/operations/bulk-operations-list';\n\n@Component({\n  selector: 'c8y-single-operation-details',\n  templateUrl: './single-operation-details.component.html'\n})\nexport class SingleOperationDetailsComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() readOnly: boolean = false;\n\n  constructor(private bulkOperationDetailsService: BulkOperationDetailsService) {}\n\n  openBulkOperationDetails() {\n    this.bulkOperationDetailsService.openDetails(this.operation.bulkOperationId);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule } from '@c8y/ngx-components';\nimport { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\nimport { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';\n\nimport { SingleOperationDetailsService } from './single-operation-details.service';\nimport { SingleOperationComponent } from './single-operation.component';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\nimport { SingleOperationListItemComponent } from './single-operation-list-item.component';\nimport { SingleOperationDetailsComponent } from './single-operation-details.component';\n\n/**\n * This module allows to display details of a single operation in a modal.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    CollapseModule,\n    BulkOperationsListModule,\n    BulkOperationsServiceModule\n  ],\n  providers: [SingleOperationDetailsService],\n  declarations: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  entryComponents: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  exports: [SingleOperationComponent]\n})\nexport class SingleOperationDetailsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}