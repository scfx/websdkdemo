{"version":3,"file":"c8y-ngx-components-protocol-lpwan.js","sources":["../../protocol-lpwan/lpwan-set-device-protocol.service.ts","../../protocol-lpwan/lpwan-set-device-protocol.component.ts","../../protocol-lpwan/lpwan-agent.guard.ts","../../protocol-lpwan/lpwan-protocol.module.ts","../../protocol-lpwan/c8y-ngx-components-protocol-lpwan.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  IManagedObject,\n  InventoryService,\n  IResultList,\n  FetchClient,\n  IFetchOptions,\n  IdentityService\n} from '@c8y/client';\nimport { get } from 'lodash-es';\n\n@Injectable()\nexport class LpwanSetDeviceProtocolService {\n  supportedDevicesCfgs = [\n    {\n      name: 'lora',\n      match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora',\n      protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial']\n    },\n    {\n      name: 'sigfox',\n      match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',\n      protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['com.sigfox.deviceId']\n    }\n  ];\n\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(\n    private inventoryService: InventoryService,\n    private client: FetchClient,\n    private identityService: IdentityService\n  ) {}\n\n  async refreshCache(device) {\n    const externalId = await this.getExternalId(device);\n    if (externalId) {\n      const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;\n      const options: IFetchOptions = {\n        method: 'POST',\n        headers: this.header,\n        body: JSON.stringify({})\n      };\n      return this.client.fetch(url, options);\n    }\n  }\n\n  getMicroserviceUrl(device) {\n    const { serviceProvider } = device.c8y_LpwanDevice;\n\n    let serviceName = serviceProvider.toLowerCase();\n    if (serviceProvider === 'Sigfox') {\n      serviceName = 'sigfox-agent';\n    }\n\n    return `/service/${serviceName}`;\n  }\n\n  isSupportedDevice(device: IManagedObject): boolean {\n    return this.supportedDevicesCfgs.some(({ match }) => match(device));\n  }\n\n  async getCurrentProtocol(device: IManagedObject) {\n    const lpwanDevice = device.c8y_LpwanDevice;\n    let protocolId;\n\n    if (lpwanDevice.typeExternalId) {\n      const externalId = (await this.identityService.detail(lpwanDevice.typeExternalId)).data;\n      protocolId = externalId.managedObject.id;\n    }\n\n    if (!protocolId && lpwanDevice.type) {\n      protocolId = lpwanDevice.type.split('/')[2];\n    }\n\n    if (!protocolId) {\n      return null;\n    }\n\n    return (await this.inventoryService.detail(protocolId)).data;\n  }\n\n  async applyProtocol(device: IManagedObject, selectedProtocol: IManagedObject) {\n    const [protocolExternalId] = (await this.identityService.list(selectedProtocol.id)).data;\n    const { externalId, type } = protocolExternalId;\n    device.c8y_LpwanDevice.typeExternalId = { externalId, type };\n    device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;\n    device.type = selectedProtocol.name;\n    return this.inventoryService.update(device);\n  }\n\n  async getAvailableProtocols(device: IManagedObject): Promise<IResultList<IManagedObject>> {\n    const query = {\n      __filter: {\n        type: { __in: this.getProtocolTypesMatchingDevice(device) }\n      },\n      __orderby: [{ name: 1 }]\n    };\n    return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });\n  }\n\n  private getProtocolTypesMatchingDevice(device: IManagedObject): string[] {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    return matchingCfg ? matchingCfg.protocolTypes : [];\n  }\n\n  private async getExternalId(device: IManagedObject): Promise<string> {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const externalIds = (await this.identityService.list(device.id)).data;\n    const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));\n    return externalId ? externalId.externalId : null;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'set-device-protocol',\n  templateUrl: './lpwan-set-device-protocol.component.html'\n})\nexport class LpwanAssignDeviceProtocolComponent implements OnInit {\n  loading: boolean;\n  device: IManagedObject;\n  currentProtocol: IManagedObject;\n  availableProtocols: IResultList<IManagedObject>;\n  newProtocol: IManagedObject;\n\n  filterProtocols = pipe();\n  pattern = '';\n  @ViewChild('lpwanSetDeviceProtocolForm', { static: false }) lpwanSetDeviceProtocolForm: any;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService,\n    private router: Router,\n    private inventoryService: InventoryService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setPipe('');\n  }\n\n  setPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterProtocols = pipe(\n      map((protocols: IManagedObject[]) =>\n        protocols.filter(\n          protocol =>\n            (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&\n            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newProtocol = null;\n    try {\n      await this.loadDevice();\n      this.availableProtocols = await this.lpwanService.getAvailableProtocols(this.device);\n      this.currentProtocol = await this.lpwanService.getCurrentProtocol(this.device);\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  async loadDevice() {\n    const deviceId = this.router.routerState.snapshot.url.match(/\\d+/)[0];\n    const { data } = await this.inventoryService.detail(deviceId);\n    this.device = data;\n  }\n\n  async apply(selectedProtocol) {\n    try {\n      const moUpdated =\n        (await this.lpwanService.applyProtocol(this.device, selectedProtocol)).res.status === 200;\n      await this.reload();\n      this.alertService.success(gettext('Device protocol set.'));\n      this.lpwanSetDeviceProtocolForm.reset('dirty');\n      if (moUpdated) {\n        this.refreshCache();\n      }\n    } catch (ex) {\n      this.alertService.danger(gettext('Could not set device protocol.'));\n    }\n  }\n\n  async refreshCache() {\n    try {\n      await this.lpwanService.refreshCache(this.device);\n    } catch (ex) {\n      // do nothing (refreshing is an optional step)\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\n@Injectable()\nexport class LpwanAgentGuard implements CanActivate {\n  constructor(private lpwanService: LpwanSetDeviceProtocolService) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const device = route.data.contextData || route.parent.data.contextData;\n    return this.lpwanService.isSupportedDevice(device);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  FormsModule,\n  gettext,\n  HOOK_ROUTE,\n  Route,\n  ViewContext\n} from '@c8y/ngx-components';\nimport { LpwanAssignDeviceProtocolComponent } from './lpwan-set-device-protocol.component';\nimport { LpwanAgentGuard } from './lpwan-agent.guard';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\n\nconst routes: Route[] = [\n  {\n    context: ViewContext.Device,\n    path: 'assign-protocol',\n    component: LpwanAssignDeviceProtocolComponent,\n    label: gettext('LPWAN'),\n    icon: 'c8y-device-protocols',\n    canActivate: [LpwanAgentGuard]\n  }\n];\n\n@NgModule({\n  declarations: [\n    LpwanAssignDeviceProtocolComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule\n  ],\n  entryComponents: [LpwanAssignDeviceProtocolComponent],\n  providers: [\n    LpwanAgentGuard,\n    LpwanSetDeviceProtocolService,\n    {\n      provide: HOOK_ROUTE,\n      useValue: routes,\n      multi: true\n    }\n  ]\n})\nexport class LpwanProtocolModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {LpwanAgentGuard as ɵb} from './lpwan-agent.guard';\nexport {LpwanSetDeviceProtocolService as ɵa} from './lpwan-set-device-protocol.service';"]}