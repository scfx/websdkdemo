import { __awaiter } from 'tslib';
import { Injectable, Component, ViewContainerRef, ViewChild, TemplateRef, NgModule } from '@angular/core';
import { Router } from '@angular/router';
import { gettext, AlertService, CoreModule, HOOK_ACTION_BAR } from '@c8y/ngx-components';
import { FetchClient, ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';

class ImpactSubscriptionService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact';
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshDeviceResources(deviceId) {
        const options = {
            method: 'PUT',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}/refresh/${deviceId}`, options);
    }
}
ImpactSubscriptionService.decorators = [
    { type: Injectable }
];
ImpactSubscriptionService.ctorParameters = () => [
    { type: FetchClient }
];

class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
}
RefreshActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-impact-refresh-action',
                template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
            },] }
];
RefreshActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ImpactSubscriptionService },
    { type: AlertService }
];
RefreshActionComponent.propDecorators = {
    templateCopy: [{ type: ViewChild, args: ['templateCopy', { read: TemplateRef, static: true },] }]
};

class ImpactActionFactory {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    get(activeRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.applicationService.isAvailable(ImpactActionFactory.applicationName)).data;
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    template: RefreshActionComponent
                });
            }
            return actions;
        });
    }
}
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.decorators = [
    { type: Injectable }
];
ImpactActionFactory.ctorParameters = () => [
    { type: ApplicationService }
];

class ImpactProtocolModule {
}
ImpactProtocolModule.decorators = [
    { type: NgModule, args: [{
                declarations: [RefreshActionComponent],
                imports: [CoreModule],
                providers: [
                    ImpactSubscriptionService,
                    { provide: HOOK_ACTION_BAR, useClass: ImpactActionFactory, multi: true }
                ],
                entryComponents: [RefreshActionComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ImpactActionFactory, ImpactProtocolModule, ImpactSubscriptionService, RefreshActionComponent };
//# sourceMappingURL=c8y-ngx-components-protocol-impact.js.map
