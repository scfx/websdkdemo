import { EventEmitter, Component, Input, HostBinding, Output, NgModule } from '@angular/core';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { CoreModule } from '@c8y/ngx-components';
import { coerceBooleanProperty } from '@angular/cdk/coercion';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/dropdown';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@c8y/ngx-components';

function StatusFilterComponent_span_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementStart(2, "span", 7);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(option_r3.option == null ? null : option_r3.option.iconClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 3, option_r3.option == null ? null : option_r3.option.label));
} }
function StatusFilterComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtemplate(1, StatusFilterComponent_span_3_span_1_Template, 5, 5, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r3.selected);
} }
function StatusFilterComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵelement(1, "i", 8);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "All statuses"), " ");
} }
const _c0 = function (a0) { return { active: a0 }; };
function StatusFilterComponent_ul_5_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function StatusFilterComponent_ul_5_li_1_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const option_r7 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.changeFilter(option_r7); });
    ɵngcc0.ɵɵelement(2, "i");
    ɵngcc0.ɵɵelementStart(3, "span", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r7 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c0, option_r7.selected));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMap(option_r7.option == null ? null : option_r7.option.iconClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 4, option_r7.option == null ? null : option_r7.option.label));
} }
function StatusFilterComponent_ul_5_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 9);
    ɵngcc0.ɵɵtemplate(1, StatusFilterComponent_ul_5_li_1_Template, 6, 8, "li", 10);
    ɵngcc0.ɵɵelementStart(2, "li", 11);
    ɵngcc0.ɵɵelementStart(3, "button", 12);
    ɵngcc0.ɵɵlistener("click", function StatusFilterComponent_ul_5_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.removeFilter(); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "i", 8);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.statusOptions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c0, ctx_r2.isAllButtonSelected));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 4, "All"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 6, "All statuses"), " ");
} }
class StatusFilterComponent {
    constructor() {
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    /** List of filter options to be displayed */
    set options(options) {
        this.statusOptions = (options || []).map(option => ({ selected: false, option }));
    }
    /**
     * Allows multiple options to be active simultaneosly.
     */
    set _multiple(multiple) {
        this.multiple = coerceBooleanProperty(multiple);
    }
    /** Display the filter as a small button group */
    set _small(small) {
        this.small = coerceBooleanProperty(small);
    }
    get displaySmall() {
        return this.small;
    }
    changeFilter(option) {
        this.isAllButtonSelected = false;
        let emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    }
    removeFilter() {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(op => (op.selected = false));
        this.emitSelectedOptions();
    }
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `IStatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    preset(filters, emit = true) {
        let firstSelected = false;
        this.statusOptions.forEach(option => (option.selected = false));
        this.statusOptions
            .filter(option => (filters || []).map(o => o.label).includes(option.option.label))
            .filter(() => {
            // only first option passed will be set in single selection mode
            const include = this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(option => (option.selected = true));
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    }
    reset() {
        this.removeFilter();
    }
    activeFilters() {
        return this.statusOptions.filter(option => option.selected).map(option => option.option);
    }
    isFilterApplied() {
        return this.statusOptions.some(option => option.selected);
    }
    emitSelectedOptions() {
        this.onFilterChanged.emit(this.statusOptions.filter(option => option.selected).map(option => option.option));
    }
}
StatusFilterComponent.ɵfac = function StatusFilterComponent_Factory(t) { return new (t || StatusFilterComponent)(); };
StatusFilterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StatusFilterComponent, selectors: [["c8y-status-filter"]], hostVars: 2, hostBindings: function StatusFilterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("btn-group-sm", ctx.displaySmall);
    } }, inputs: { options: "options", _multiple: ["multiple", "_multiple"], _small: ["small", "_small"] }, outputs: { onFilterChanged: "onFilterChanged" }, decls: 6, vars: 5, consts: [["dropdown", "", "placement", "bottom left", 1, "dropdown", "c8y-child-assets-selector"], ["id", "status-filter", "dropdownToggle", "", "type", "button", "aria-controls", "dropdown-status-filter", 1, "btn", "dropdown-toggle", "d-flex", "a-i-center", "c8y-dropdown", 3, "title"], ["class", "d-contents", 4, "ngFor", "ngForOf"], ["class", "text-truncate", 4, "ngIf"], ["id", "dropdown-status-filter", "class", "dropdown-menu", "role", "menu", "aria-labelledby", "status-filter", 4, "dropdownMenu"], [1, "d-contents"], [1, "text-truncate"], [1, "m-l-4"], ["c8yIcon", "c8y-energy", 1, "m-r-4", "text-info"], ["id", "dropdown-status-filter", "role", "menu", "aria-labelledby", "status-filter", 1, "dropdown-menu"], [3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"], [3, "title", "click"], [3, "click"]], template: function StatusFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, StatusFilterComponent_span_3_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵtemplate(4, StatusFilterComponent_span_4_Template, 4, 3, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, StatusFilterComponent_ul_5_Template, 8, 10, "ul", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Status filter"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.statusOptions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isAllButtonSelected);
    } }, directives: [ɵngcc1.BsDropdownDirective, ɵngcc1.BsDropdownToggleDirective, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc1.BsDropdownMenuDirective, ɵngcc3.IconDirective, ɵngcc2.NgClass], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
StatusFilterComponent.propDecorators = {
    options: [{ type: Input }],
    _multiple: [{ type: Input, args: ['multiple',] }],
    _small: [{ type: Input, args: ['small',] }],
    displaySmall: [{ type: HostBinding, args: ['class.btn-group-sm',] }],
    onFilterChanged: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusFilterComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-status-filter',
                template: "<div dropdown \n  placement=\"bottom left\" \n  class=\"dropdown c8y-child-assets-selector\"\n>\n  <button id=\"status-filter\" \n    dropdownToggle \n    type=\"button\" \n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    title=\"{{ 'Status filter' | translate}}\"\n    aria-controls=\"dropdown-status-filter\">\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul id=\"dropdown-status-filter\" \n    *dropdownMenu \n    class=\"dropdown-menu\"\n    role=\"menu\" \n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\" >\n      <button\n        (click)=\"changeFilter(option)\"\n      >\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button\n        title=\"{{ 'All' | translate }}\"\n        (click)=\"removeFilter()\"\n      >\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>"
            }]
    }], function () { return []; }, { onFilterChanged: [{
            type: Output
        }], options: [{
            type: Input
        }], _multiple: [{
            type: Input,
            args: ['multiple']
        }], _small: [{
            type: Input,
            args: ['small']
        }], displaySmall: [{
            type: HostBinding,
            args: ['class.btn-group-sm']
        }] }); })();

/**
 * This module provides a component for selecting status filter.
 */
class StatusFilterModule {
}
StatusFilterModule.ɵfac = function StatusFilterModule_Factory(t) { return new (t || StatusFilterModule)(); };
StatusFilterModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StatusFilterModule });
StatusFilterModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, TooltipModule, BsDropdownModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StatusFilterModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, TooltipModule, BsDropdownModule],
                declarations: [StatusFilterComponent],
                entryComponents: [StatusFilterComponent],
                exports: [StatusFilterComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StatusFilterModule, { declarations: function () { return [StatusFilterComponent]; }, imports: function () { return [CoreModule, TooltipModule, BsDropdownModule]; }, exports: function () { return [StatusFilterComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { StatusFilterComponent, StatusFilterModule };

//# sourceMappingURL=c8y-ngx-components-operations-status-filter.js.map