import { Injectable, EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { from, Subject, fromEvent, interval, NEVER, of } from 'rxjs';
import { flatMap, merge, debounce, scan, tap, switchMap, takeUntil, filter, finalize, catchError, delay, repeat } from 'rxjs/operators';
import { CommonModule } from '@c8y/ngx-components';
import { ButtonsModule } from 'ngx-bootstrap/buttons';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@c8y/ngx-components';

const _c0 = ["autoRefresh"];
const _c1 = function () { return { "width": "auto" }; };
class AppLogsService {
    constructor(client) {
        this.client = client;
        this.BASE_PATH_APPLICATION = 'application/applications';
        this.header = {
            Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
        };
    }
    getLogs$(appId, instanceName, params = {}) {
        const url = `${this.BASE_PATH_APPLICATION}/${appId}/logs/${instanceName}`;
        const defaultConfig = {
            headers: this.header,
            method: 'GET'
        };
        const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        const modifiedParams = Object.assign(Object.assign(Object.assign({}, params), (formattedDateFrom && { dateFrom: formattedDateFrom })), (formattedDateTo && { dateTo: formattedDateTo }));
        const config = params ? Object.assign(Object.assign({}, defaultConfig), { params: modifiedParams }) : Object.assign({}, defaultConfig);
        return from(this.client.fetch(url, config)).pipe(flatMap(res => res.json()));
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}
AppLogsService.ɵfac = function AppLogsService_Factory(t) { return new (t || AppLogsService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
AppLogsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AppLogsService, factory: AppLogsService.ɵfac });
AppLogsService.ctorParameters = () => [
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppLogsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }]; }, null); })();

class AppLogsAutoRefreshComponent {
    constructor(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = true;
        this.onNewLogs = new EventEmitter();
        this.isRealtimeEnabled = new EventEmitter();
        this.toggleState = currentState => !currentState;
    }
    set buttonsDisabled(areDisabled) {
        this.isAutoRefreshDisabled = areDisabled;
        if (areDisabled && this.isAutoRefreshOn) {
            this.isAutoRefreshOn = false;
            this.cancel$.next(false);
        }
    }
    ngAfterViewInit() {
        const clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(() => interval(300)), scan(this.toggleState, false), tap(isAutoRefreshOn => this.setButtonState(isAutoRefreshOn)), switchMap(isOn => (isOn ? this.watchForNewLogs() : NEVER)));
        this.subscription = clicks$.subscribe();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    setButtonState(isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
        this.isRealtimeEnabled.emit(isAutoRefreshOn);
    }
    watchForNewLogs() {
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(isAutoRefreshOn => isAutoRefreshOn === false))), finalize(() => {
            this.isAutoRefreshOn = false;
        }));
    }
    startPolling() {
        return of(1).pipe(switchMap(() => this.getNewLogs().pipe(catchError(er => of(this.getEmptyLogsJson())))), tap(logs => this.updateLogsToOutput(logs)), delay(10000), repeat());
    }
    getNewLogs() {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    }
    getAppId() {
        return this.mo.applicationId;
    }
    getInstanceName() {
        return this.selectedInstance.name;
    }
    updateLogsToOutput(newLogs) {
        const { dateFrom, dateTo } = newLogs;
        if (dateFrom && dateTo) {
            this.logsToOutput = Object.assign({}, newLogs);
            this.onNewLogs.emit(this.logsToOutput);
        }
    }
    getEmptyLogsJson() {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    }
}
AppLogsAutoRefreshComponent.ɵfac = function AppLogsAutoRefreshComponent_Factory(t) { return new (t || AppLogsAutoRefreshComponent)(ɵngcc0.ɵɵdirectiveInject(AppLogsService)); };
AppLogsAutoRefreshComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AppLogsAutoRefreshComponent, selectors: [["c8y-app-logs-auto-refresh"]], viewQuery: function AppLogsAutoRefreshComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.button = _t.first);
    } }, inputs: { buttonsDisabled: "buttonsDisabled", selectedInstance: "selectedInstance", mo: "mo" }, outputs: { onNewLogs: "onNewLogs", isRealtimeEnabled: "isRealtimeEnabled" }, decls: 6, vars: 10, consts: [["type", "button", 1, "btn", "btn-link", "c8y-realtime", 3, "ngStyle", "title", "disabled"], ["autoRefresh", ""], [1, "c8y-pulse", 3, "ngClass"]], template: function AppLogsAutoRefreshComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "span", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 5, "Toggle auto refresh"));
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(9, _c1))("disabled", ctx.isAutoRefreshDisabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ctx.isAutoRefreshOn ? "active" : "inactive");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 7, "Auto refresh"), "\n");
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgClass], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
AppLogsAutoRefreshComponent.ctorParameters = () => [
    { type: AppLogsService }
];
AppLogsAutoRefreshComponent.propDecorators = {
    selectedInstance: [{ type: Input }],
    mo: [{ type: Input }],
    buttonsDisabled: [{ type: Input }],
    onNewLogs: [{ type: Output }],
    isRealtimeEnabled: [{ type: Output }],
    button: [{ type: ViewChild, args: ['autoRefresh', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppLogsAutoRefreshComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-app-logs-auto-refresh',
                template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
            }]
    }], function () { return [{ type: AppLogsService }]; }, { onNewLogs: [{
            type: Output
        }], isRealtimeEnabled: [{
            type: Output
        }], buttonsDisabled: [{
            type: Input
        }], selectedInstance: [{
            type: Input
        }], mo: [{
            type: Input
        }], button: [{
            type: ViewChild,
            args: ['autoRefresh', { static: true }]
        }] }); })();

class AppLogsAutoRefreshModule {
}
AppLogsAutoRefreshModule.ɵfac = function AppLogsAutoRefreshModule_Factory(t) { return new (t || AppLogsAutoRefreshModule)(); };
AppLogsAutoRefreshModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AppLogsAutoRefreshModule });
AppLogsAutoRefreshModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [AppLogsService], imports: [[CommonModule, ButtonsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppLogsAutoRefreshModule, [{
        type: NgModule,
        args: [{
                declarations: [AppLogsAutoRefreshComponent],
                exports: [AppLogsAutoRefreshComponent],
                imports: [CommonModule, ButtonsModule],
                entryComponents: [AppLogsAutoRefreshComponent],
                providers: [AppLogsService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppLogsAutoRefreshModule, { declarations: function () { return [AppLogsAutoRefreshComponent]; }, imports: function () { return [CommonModule, ButtonsModule]; }, exports: function () { return [AppLogsAutoRefreshComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AppLogsAutoRefreshComponent, AppLogsAutoRefreshModule, AppLogsService };

//# sourceMappingURL=c8y-ngx-components-app-logs.js.map