import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Component, Injectable, EventEmitter, Input, Output, ViewChild, HostListener, NgModule, TemplateRef } from '@angular/core';
import { InventoryService, UserService, SmartGroupsService, SmartRulesService } from '@c8y/client';
import * as i3 from '@c8y/ngx-components';
import { gettext, CellRendererContext, AppStateService, AlertService, Permissions, ModalService, Status, DataGridComponent, C8yStepper, CoreModule, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import * as i5 from '@c8y/ngx-components/assets-navigator';
import { DeviceGroupService, AssetNodeService, GroupFragment } from '@c8y/ngx-components/assets-navigator';
import * as i1 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import { BaseDeviceGridColumn, DeviceGridService, NameDeviceGridColumn, ModelDeviceGridColumn, SerialNumberDeviceGridColumn, RegistrationDateDeviceGridColumn, SystemIdDeviceGridColumn, ImeiDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import * as i2 from '@c8y/client';
import * as i4 from '@c8y/client';
import * as i6 from '@c8y/client';
import * as i7 from '@c8y/client';
import { ActivatedRoute } from '@angular/router';
import { BsModalService } from 'ngx-bootstrap/modal';
import { Subject } from 'rxjs';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/ngx-components/assets-navigator';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@ngx-translate/core';
import * as ɵngcc5 from '@c8y/client';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from 'ngx-bootstrap/popover';
import * as ɵngcc8 from '@angular/router';
import * as ɵngcc9 from 'ngx-bootstrap/modal';
import * as ɵngcc10 from '@c8y/ngx-components/device-grid';
import * as ɵngcc11 from '@angular/cdk/stepper';

function AssetTypeCellRendererComponent_device_status_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "device-status", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mo", ctx_r0.context.item);
} }
function AssetTypeCellRendererComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 3);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.iconTitle));
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r1.groupIcon);
} }
function GroupInfoComponent_small_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Smart group"), " ");
} }
function GroupInfoComponent_small_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Group"), " ");
} }
function GroupInfoComponent_small_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Remote group"), " ");
} }
function GroupInfoComponent_p_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.group.name);
} }
function GroupInfoComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "input", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function GroupInfoComponent_div_18_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.group.name = $event; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "div", 30);
    ɵngcc0.ɵɵelementStart(6, "button", 31);
    ɵngcc0.ɵɵlistener("click", function GroupInfoComponent_div_18_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); const _r3 = ɵngcc0.ɵɵreference(13); ctx_r13.update({ name: ctx_r13.group.name }); return _r3.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(13);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 7, "Name"));
    ɵngcc0.ɵɵpropertyInterpolate("size", ctx_r5.group.name.length + 2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 9, "e.g. My group"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.group.name);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 11, "Save"));
    ɵngcc0.ɵɵproperty("disabled", _r3.form.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 13, "Save"), " ");
} }
function GroupInfoComponent_p_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.group.c8y_Notes);
} }
function GroupInfoComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "textarea", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function GroupInfoComponent_div_24_Template_textarea_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.group.c8y_Notes = $event; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "div", 30);
    ɵngcc0.ɵɵelementStart(6, "button", 31);
    ɵngcc0.ɵɵlistener("click", function GroupInfoComponent_div_24_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); const _r6 = ɵngcc0.ɵɵreference(20); ctx_r16.update({ c8y_Notes: ctx_r16.group.c8y_Notes }); return _r6.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    const _r6 = ɵngcc0.ɵɵreference(20);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 7, "Description"));
    ɵngcc0.ɵɵpropertyInterpolate("cols", ctx_r8.group.c8y_Notes ? ctx_r8.group.c8y_Notes.length : 25);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 9, "e.g. My description"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.group.c8y_Notes);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 11, "Save"));
    ɵngcc0.ɵɵproperty("disabled", _r6.form.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 13, "Save"), " ");
} }
function GroupInfoComponent_form_25_p_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r18.smartGroupFilter, " ");
} }
function GroupInfoComponent_form_25_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "input", 38);
    ɵngcc0.ɵɵlistener("ngModelChange", function GroupInfoComponent_form_25_div_10_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.smartGroupFilter = $event; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "div", 30);
    ɵngcc0.ɵɵelementStart(6, "button", 31);
    ɵngcc0.ɵɵlistener("click", function GroupInfoComponent_form_25_div_10_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r21); ɵngcc0.ɵɵnextContext(); const _r17 = ɵngcc0.ɵɵreference(1); const ctx_r22 = ɵngcc0.ɵɵnextContext(); ctx_r22.update({ c8y_DeviceQueryString: ctx_r22.smartGroupFilter }); return _r17.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r17 = ɵngcc0.ɵɵreference(1);
    const ctx_r19 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("size", ctx_r19.smartGroupFilter.length + 2);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(2, 7, "e.g."), " $filter=(id eq '12*')");
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 9, "Smart group filter"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r19.smartGroupFilter);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 11, "Save"));
    ɵngcc0.ɵɵproperty("disabled", _r17.form.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 13, "Save"), " ");
} }
function GroupInfoComponent_form_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", null, 33);
    ɵngcc0.ɵɵelementStart(2, "c8y-form-group", 34);
    ɵngcc0.ɵɵelementStart(3, "label", 35);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementStart(6, "button", 36);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "i", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, GroupInfoComponent_form_25_p_9_Template, 2, 1, "p", 12);
    ɵngcc0.ɵɵtemplate(10, GroupInfoComponent_form_25_div_10_Template, 10, 15, "div", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "Smart group filter"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(7, 6, ctx_r9.filterHintMsg));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r9.canEdit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.canEdit);
} }
function GroupInfoComponent_li_47_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r23.group.c8y_BrokerSource.status, " ");
} }
function GroupInfoComponent_li_47_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Offline"), " ");
} }
function GroupInfoComponent_li_47_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 24);
    ɵngcc0.ɵɵelementStart(1, "label", 22);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, GroupInfoComponent_li_47_span_4_Template, 2, 1, "span", 39);
    ɵngcc0.ɵɵtemplate(5, GroupInfoComponent_li_47_span_5_Template, 3, 3, "span", 39);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "Status"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.group.c8y_BrokerSource);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r10.group.c8y_BrokerSource);
} }
function SubAssetsComponent_c8y_action_bar_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function SubAssetsComponent_c8y_action_bar_item_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.showAddGroup = !ctx_r5.showAddGroup; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵelementStart(4, "span", 14);
    ɵngcc0.ɵɵtext(5, "Add group");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Add group"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.shouldDisableAddGroup);
} }
function SubAssetsComponent_c8y_action_bar_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function SubAssetsComponent_c8y_action_bar_item_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.showAssignDevices = !ctx_r7.showAssignDevices; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵelementStart(4, "span", 14);
    ɵngcc0.ɵɵtext(5, "Assign devices");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Assign devices"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.shouldDisableAssignDevices);
} }
function SubAssetsComponent_c8y_add_group_9_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-add-group", 15);
    ɵngcc0.ɵɵlistener("onCancel", function SubAssetsComponent_c8y_add_group_9_Template_c8y_add_group_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.showAddGroup = false; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("currentGroupId", ctx_r2.currentGroupId)("refresh", ctx_r2.refresh);
} }
function SubAssetsComponent_c8y_assign_devices_13_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-assign-devices", 16);
    ɵngcc0.ɵɵlistener("onCancel", function SubAssetsComponent_c8y_assign_devices_13_Template_c8y_assign_devices_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.showAssignDevices = false; })("onShowChildDevices", function SubAssetsComponent_c8y_assign_devices_13_Template_c8y_assign_devices_onShowChildDevices_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.showAssignChildDevices = $event; })("selectedDevice", function SubAssetsComponent_c8y_assign_devices_13_Template_c8y_assign_devices_selectedDevice_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.showChildrenForDevice = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("refresh", ctx_r3.refresh)("currentGroupId", ctx_r3.currentGroupId);
} }
function SubAssetsComponent_c8y_assign_child_devices_17_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-assign-child-devices", 17);
    ɵngcc0.ɵɵlistener("onCancel", function SubAssetsComponent_c8y_assign_child_devices_17_Template_c8y_assign_child_devices_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.showAssignChildDevices = false; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("refresh", ctx_r4.refresh)("currentGroupId", ctx_r4.currentGroupId)("parentDevice", ctx_r4.showChildrenForDevice);
} }
const _c0 = function (a0) { return { drawerOpen: a0 }; };
const _c1 = ["modalRef"];
function DeleteAssetsModalComponent_c8y_form_group_7_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 5);
    ɵngcc0.ɵɵelementStart(1, "label", 6);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 7);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeleteAssetsModalComponent_c8y_form_group_7_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.config.cascade = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Delete devices"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.config.cascade);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 5, "Also delete all devices inside selected asset and its subassets."), " ");
} }
function DeleteAssetsModalComponent_c8y_form_group_8_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group", 5);
    ɵngcc0.ɵɵelementStart(1, "label", 6);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeleteAssetsModalComponent_c8y_form_group_8_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.config.withDeviceUser = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "Delete associated device owner"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.config.withDeviceUser);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 5, "Also delete associated device owner."), " ");
} }
function SubAssetsGridComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-column", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", column_r1.name);
} }
const _c2 = ["nameRef"];
function AddGroupComponent_c8y_title_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-title");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Add group"), "\n");
} }
function AddGroupComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementContainer(1, 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function AddGroupComponent_ng_template_2_c8y_message_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-message", 15);
    ɵngcc0.ɵɵtext(1, "This field is required.");
    ɵngcc0.ɵɵelementEnd();
} }
function AddGroupComponent_ng_template_2_div_31_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵtext(1, " You don't have permission to assign devices. ");
    ɵngcc0.ɵɵelementEnd();
} }
const _c3 = function () { return { edit: true, done: false }; };
const _c4 = function () { return ["col-md-6", "col-md-offset-3", "m-t-24", "m-b-40", "p-0", "flex-no-shrink"]; };
const _c5 = function (a0, a1) { return { next: a0, cancel: a1 }; };
const _c6 = function (a0, a1) { return { custom: a0, cancel: a1 }; };
const _c7 = function () { return { next: true, cancel: true }; };
const _c8 = function () { return { custom: true, cancel: true }; };
const _c9 = function () { return []; };
const _c10 = function (a0) { return { custom: a0 }; };
function AddGroupComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-stepper", 5);
    ɵngcc0.ɵɵelementStart(1, "cdk-step", 6);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "div", 7);
    ɵngcc0.ɵɵelementStart(4, "div", 8);
    ɵngcc0.ɵɵelementStart(5, "div", 9);
    ɵngcc0.ɵɵelementStart(6, "h4", 10);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 11);
    ɵngcc0.ɵɵelementStart(10, "div", 12);
    ɵngcc0.ɵɵelementStart(11, "div", 13);
    ɵngcc0.ɵɵelementStart(12, "div", 8);
    ɵngcc0.ɵɵelementStart(13, "div", 9);
    ɵngcc0.ɵɵelementStart(14, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(15, "div", 14);
    ɵngcc0.ɵɵelementStart(16, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(17, "label", 15);
    ɵngcc0.ɵɵtext(18, "Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(19, "input", 16, 17);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementStart(22, "c8y-messages");
    ɵngcc0.ɵɵtemplate(23, AddGroupComponent_ng_template_2_c8y_message_23_Template, 2, 0, "c8y-message", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(25, "label", 15);
    ɵngcc0.ɵɵtext(26, "Description");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(27, "input", 19);
    ɵngcc0.ɵɵpipe(28, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(29, "c8y-form-group");
    ɵngcc0.ɵɵelement(30, "div", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(31, AddGroupComponent_ng_template_2_div_31_Template, 2, 0, "div", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(32, "c8y-stepper-buttons", 21);
    ɵngcc0.ɵɵlistener("onCancel", function AddGroupComponent_ng_template_2_Template_c8y_stepper_buttons_onCancel_32_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onCancel.emit(); })("onCustom", function AddGroupComponent_ng_template_2_Template_c8y_stepper_buttons_onCustom_32_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.createGroup(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "cdk-step", 22);
    ɵngcc0.ɵɵpipe(34, "translate");
    ɵngcc0.ɵɵelementStart(35, "div", 7);
    ɵngcc0.ɵɵelementStart(36, "div", 8);
    ɵngcc0.ɵɵelementStart(37, "div", 9);
    ɵngcc0.ɵɵelementStart(38, "h4", 10);
    ɵngcc0.ɵɵtext(39);
    ɵngcc0.ɵɵpipe(40, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(41, "div", 23);
    ɵngcc0.ɵɵelementStart(42, "c8y-device-grid", 24);
    ɵngcc0.ɵɵlistener("itemsSelect", function AddGroupComponent_ng_template_2_Template_c8y_device_grid_itemsSelect_42_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onSelected($event); });
    ɵngcc0.ɵɵpipe(43, "translate");
    ɵngcc0.ɵɵelementStart(44, "div", 25);
    ɵngcc0.ɵɵelement(45, "h1", 26);
    ɵngcc0.ɵɵelementStart(46, "div");
    ɵngcc0.ɵɵelementStart(47, "p");
    ɵngcc0.ɵɵelementStart(48, "strong");
    ɵngcc0.ɵɵtext(49);
    ɵngcc0.ɵɵpipe(50, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(51, "small");
    ɵngcc0.ɵɵtext(52);
    ɵngcc0.ɵɵpipe(53, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(54, "c8y-stepper-buttons", 27);
    ɵngcc0.ɵɵlistener("onCancel", function AddGroupComponent_ng_template_2_Template_c8y_stepper_buttons_onCancel_54_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onCancel.emit(); })("onCustom", function AddGroupComponent_ng_template_2_Template_c8y_stepper_buttons_onCustom_54_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.createGroup(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(20);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disableDefaultIcons", ɵngcc0.ɵɵpureFunction0(45, _c3))("customClasses", ɵngcc0.ɵɵpureFunction0(46, _c4));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("stepControl", ctx_r3.formGroupStepOne)("label", ɵngcc0.ɵɵpipeBind1(2, 27, "New group"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 29, "New group"), " ");
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r3.formGroupStepOne);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(21, 31, "e.g. First floor"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.formGroupStepOne.untouched && !_r4.value);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(28, 33, "e.g. first floor devices"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r3.formGroupStepOne);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.canAssignDevice);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r3.canCreateGroup)("labels", ctx_r3.canAssignDevice ? ɵngcc0.ɵɵpureFunction2(47, _c5, ctx_r3.btnLabels.next, ctx_r3.btnLabels.cancel) : ɵngcc0.ɵɵpureFunction2(50, _c6, ctx_r3.btnLabels.create, ctx_r3.btnLabels.cancel))("showButtons", ctx_r3.canAssignDevice ? ɵngcc0.ɵɵpureFunction0(53, _c7) : ɵngcc0.ɵɵpureFunction0(54, _c8));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(34, 35, "Assign devices"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(40, 37, "Assign devices"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(43, 39, "Select target devices"))("actionControls", ɵngcc0.ɵɵpureFunction0(55, _c9))("infiniteScroll", "auto")("selectable", "true")("pagination", ctx_r3.pagination)("refresh", ctx_r3.refresh);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(50, 41, "No matching devices."));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(53, 43, "Refine your search terms"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("labels", ɵngcc0.ɵɵpureFunction1(56, _c10, ctx_r3.btnLabels.create))("disabled", !ctx_r3.canAssignDevice)("pending", ctx_r3.pendingStatus);
} }
function GroupsComponent_c8y_add_group_11_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-add-group", 8);
    ɵngcc0.ɵɵlistener("onCancel", function GroupsComponent_c8y_add_group_11_Template_c8y_add_group_onCancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.showAddGroup = false; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("refresh", ctx_r0.refresh);
} }
const _c11 = ["showDevicesToggle"];
function AssignDevicesComponent_ng_template_29_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 16);
    ɵngcc0.ɵɵtext(1, " Displays the button ");
    ɵngcc0.ɵɵelementStart(2, "button", 17);
    ɵngcc0.ɵɵelement(3, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4, " next to target devices with children. Clicking it displays a list with all child devices of the selected target device. ");
    ɵngcc0.ɵɵelementEnd();
} }
function AssignDevicesComponent_ng_template_29_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 11);
    ɵngcc0.ɵɵelementStart(1, "input", 12);
    ɵngcc0.ɵɵlistener("ngModelChange", function AssignDevicesComponent_ng_template_29_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.showChildren = $event; })("click", function AssignDevicesComponent_ng_template_29_Template_input_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const control_r2 = restoredCtx.headerActionControl; return control_r2.callback(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "span");
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 13);
    ɵngcc0.ɵɵelement(7, "i", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, AssignDevicesComponent_ng_template_29_ng_template_8_Template, 5, 0, "ng-template", null, 15, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const control_r2 = ctx.headerActionControl;
    const _r3 = ɵngcc0.ɵɵreference(9);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.showChildren);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 4, control_r2.text));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("popover", _r3)("outsideClick", true);
} }
const _c12 = function (a0) { return { "btn-pending": a0 }; };
class AssetTypeCellRendererComponent {
    constructor(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    ngOnInit() {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    }
}
AssetTypeCellRendererComponent.ɵfac = function AssetTypeCellRendererComponent_Factory(t) { return new (t || AssetTypeCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DeviceGroupService)); };
AssetTypeCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AssetTypeCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 2, consts: [["class", "m-l-8", 3, "mo", 4, "ngIf"], ["class", "m-l-8 c8y-icon-duocolor", 3, "c8yIcon", "title", 4, "ngIf"], [1, "m-l-8", 3, "mo"], [1, "m-l-8", "c8y-icon-duocolor", 3, "c8yIcon", "title"]], template: function AssetTypeCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AssetTypeCellRendererComponent_device_status_0_Template, 1, 1, "device-status", 0);
        ɵngcc0.ɵɵtemplate(1, AssetTypeCellRendererComponent_i_1_Template, 2, 4, "i", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDevice);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isAnyGroup || !ctx.isDevice);
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.DeviceStatusComponent, ɵngcc1.IconDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AssetTypeCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGroupService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetTypeCellRendererComponent, [{
        type: Component,
        args: [{
                template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ɵngcc2.DeviceGroupService }]; }, null); })();

class AssetTypeGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'type';
        this.header = gettext('Type');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = AssetTypeCellRendererComponent;
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `c8y_IsDeviceGroup` }]
        };
    }
}

class SubAssetsService extends DeviceGridService {
    constructor(translateService, inventoryService, appState, user, assetNodeService, deviceGroupService, smartGroupsService, smartRulesService, alertService, permissionsService, modal) {
        super(inventoryService, translateService, alertService, modal);
        this.translateService = translateService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.user = user;
        this.assetNodeService = assetNodeService;
        this.deviceGroupService = deviceGroupService;
        this.smartGroupsService = smartGroupsService;
        this.smartRulesService = smartRulesService;
        this.alertService = alertService;
        this.permissionsService = permissionsService;
        this.modal = modal;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'sub-assets-grid-config';
        this.IS_DEVICE_GROUP_FRAGMENT = 'c8y_IsDeviceGroup';
        this.IS_DYNAMIC_GROUP_FRAGMENT = 'c8y_IsDynamicGroup';
    }
    getDefaultColumns(filterable = true, sortable = true) {
        const defaultColumns = [
            new AssetTypeGridColumn({ sortOrder: 'desc' }),
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getDefaultPagination() {
        const { pagination } = this.getConfig();
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [];
    }
    unassignAsset(asset, parentRef) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id: assetId } = asset;
            const { id: parentId } = parentRef;
            if (this.isDevice(asset)) {
                try {
                    yield this.inventoryService.childAssetsRemove(assetId, parentId);
                    const alertMessage = this.translateService.instant(gettext('Asset unassigned.'));
                    this.alertService.success(alertMessage);
                }
                catch (error) {
                    const alertMessage = this.translateService.instant(gettext('Could not unassign asset.'));
                    this.alertService.danger(alertMessage);
                }
                yield this.deactivateSmartrulesForAsset(asset, parentRef);
            }
        });
    }
    isDevice(asset) {
        return (!asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) &&
            !asset.hasOwnProperty(this.IS_DYNAMIC_GROUP_FRAGMENT));
    }
    deleteAsset(asset, parentRef, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const isGroup = asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) ||
                this.smartGroupsService.isSmartGroup(asset);
            if (isGroup) {
                yield this.deleteGroup(asset, params);
            }
            else {
                yield this.deleteDevice(asset, params);
            }
            if (parentRef &&
                !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)) {
                yield this.deactivateSmartrulesForAsset(asset, parentRef);
            }
        });
    }
    shouldShowWithDeviceUserCheckbox(asset) {
        const { owner, c8y_IsDevice: isRootDevice } = asset;
        const hasDeviceUserAsOwner = asset.owner && this.isDeviceUser(owner);
        return Boolean(isRootDevice && hasDeviceUserAsOwner);
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getData(columns, pagination, parentReference, baseQuery = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const isRoot = !parentReference;
            if (isRoot) {
                const query = this.buildCombinedRootQueryFilter(columns, pagination);
                return this.assetNodeService.getRootNodes(Object.assign(Object.assign({}, pagination), { query }));
            }
            const filters = Object.assign(Object.assign({}, this.getAssetsFilters(columns, pagination, baseQuery)), { withParents: false });
            if (this.deviceGroupService.isGroup(parentReference)) {
                return this.assetNodeService.getGroupItems(parentReference.id, filters);
            }
            if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                return this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters);
            }
            if (this.deviceGroupService.isDevice(parentReference)) {
                return this.assetNodeService.getDeviceChildren(parentReference.id, filters);
            }
        });
    }
    getCount(columns, pagination, parentReference, baseQuery = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultFilters = {
                pageSize: 1,
                withChildren: false
            };
            const filters = !parentReference
                ? Object.assign({ query: this.buildCombinedRootQueryFilter(columns, pagination) }, defaultFilters) : Object.assign(Object.assign({}, this.getAssetsFilters(columns, pagination, baseQuery)), defaultFilters);
            return this.getAssetsStatistics(parentReference, filters);
        });
    }
    getTotal(parentReference, baseQuery = {}) {
        const queryFilter = this.assetNodeService.rootQueryFilter();
        const query = !parentReference
            ? this.queriesUtil.addAndFilter(queryFilter, baseQuery)
            : baseQuery;
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            withChildren: false,
            withTotalPages: true,
            pageSize: 1
        };
        return this.getAssetsStatistics(parentReference, filters);
    }
    canEditGroup(group) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.permissionsService.canEdit(['ROLE_INVENTORY_ADMIN'], group);
        });
    }
    canCreateGroup() {
        const currentUser = this.appState.currentUser.value;
        const hasAdminRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
        return hasAdminRole;
    }
    canAssignDevice(group) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.permissionsService.canEdit(['ROLE_INVENTORY_ADMIN'], group);
        });
    }
    canEditSmartGroup() {
        const SMART_GROUPS_ROLES_EDIT = ['ROLE_SMARTGROUP_UPDATE', 'ROLE_SMARTGROUP_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_EDIT);
    }
    canDeleteSmartGroup() {
        const SMART_GROUPS_ROLES_DELETE = ['ROLE_SMARTGROUP_ADMIN', 'ROLE_INVENTORY_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_DELETE);
    }
    isSmartGroup(group) {
        return (this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group));
    }
    isUsingInventoryRoles() {
        const currentUser = this.appState.currentUser.value;
        const hasAnyInventoryRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_READ',
            'ROLE_INVENTORY_CREATE'
        ]);
        return !hasAnyInventoryRole;
    }
    getAssetsStatistics(parentReference, filters) {
        return __awaiter(this, void 0, void 0, function* () {
            const isRoot = !parentReference;
            if (isRoot) {
                return (yield this.assetNodeService.getRootNodes(filters)).paging.totalPages;
            }
            if (this.deviceGroupService.isGroup(parentReference)) {
                return (yield this.assetNodeService.getGroupItems(parentReference.id, filters)).paging
                    .totalPages;
            }
            if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                return (yield this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)).paging.totalPages;
            }
            if (this.deviceGroupService.isDevice(parentReference)) {
                return (yield this.assetNodeService.getDeviceChildren(parentReference.id, filters)).paging
                    .totalPages;
            }
        });
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const queryFilter = this.assetNodeService.rootQueryFilter();
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(queryFilter, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    deleteGroup(group, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { cascade } = params;
            try {
                this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group)
                    ? yield this.smartGroupsService.delete(group, { cascade })
                    : yield this.inventoryService.delete(group, { cascade });
                const alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                this.alertService.success(alertMessage);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    deleteDevice(device, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { cascade, withDeviceUser } = params;
            try {
                const { owner } = device;
                const shouldRemoveOwner = withDeviceUser && owner && this.isDeviceUser(owner);
                shouldRemoveOwner
                    ? yield this.deleteDeviceWithUser(device, cascade)
                    : yield this.inventoryService.delete(device, { cascade });
                const alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                this.alertService.success(alertMessage);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    deactivateSmartrulesForAsset(asset, parentRef) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id: assetId } = asset;
            const { id: parentId } = parentRef;
            const rules = (yield this.smartRulesService.listByContext(parentId)).data;
            const upateSmartrulesPromises = rules.map(rule => this.smartRulesService.bulkDeactivateEnabledSources(rule, [assetId]));
            try {
                yield Promise.all(upateSmartrulesPromises);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not deactivate smart rules.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    isDeviceUser(userId) {
        return userId.match(/^device_/);
    }
    deleteDeviceWithUser(device, cascade) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = { cascade, withDeviceUser: true };
            try {
                return yield this.inventoryService.delete(device, params);
            }
            catch (error) {
                return yield this.inventoryService.delete(device, { cascade });
            }
        });
    }
    getAssetsFilters(columns, pagination, baseQuery) {
        const query = this.queriesUtil.addAndFilter(this.getQueryObj(columns), baseQuery);
        return {
            query: this.queriesUtil.buildQuery(query),
            pageSize: pagination.pageSize || this.DEFAULT_PAGE_SIZE,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    }
}
SubAssetsService.ɵfac = function SubAssetsService_Factory(t) { return new (t || SubAssetsService)(ɵngcc0.ɵɵinject(ɵngcc4.TranslateService), ɵngcc0.ɵɵinject(ɵngcc5.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc5.UserService), ɵngcc0.ɵɵinject(ɵngcc2.AssetNodeService), ɵngcc0.ɵɵinject(ɵngcc2.DeviceGroupService), ɵngcc0.ɵɵinject(ɵngcc5.SmartGroupsService), ɵngcc0.ɵɵinject(ɵngcc5.SmartRulesService), ɵngcc0.ɵɵinject(ɵngcc1.AlertService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ɵngcc1.ModalService)); };
SubAssetsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SubAssetsService_Factory() { return new SubAssetsService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.AppStateService), i0.ɵɵinject(i4.UserService), i0.ɵɵinject(i5.AssetNodeService), i0.ɵɵinject(i5.DeviceGroupService), i0.ɵɵinject(i6.SmartGroupsService), i0.ɵɵinject(i7.SmartRulesService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i3.Permissions), i0.ɵɵinject(i3.ModalService)); }, token: SubAssetsService, providedIn: "root" });
SubAssetsService.ctorParameters = () => [
    { type: TranslateService },
    { type: InventoryService },
    { type: AppStateService },
    { type: UserService },
    { type: AssetNodeService },
    { type: DeviceGroupService },
    { type: SmartGroupsService },
    { type: SmartRulesService },
    { type: AlertService },
    { type: Permissions },
    { type: ModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }, { type: ɵngcc5.InventoryService }, { type: ɵngcc1.AppStateService }, { type: ɵngcc5.UserService }, { type: ɵngcc2.AssetNodeService }, { type: ɵngcc2.DeviceGroupService }, { type: ɵngcc5.SmartGroupsService }, { type: ɵngcc5.SmartRulesService }, { type: ɵngcc1.AlertService }, { type: ɵngcc1.Permissions }, { type: ɵngcc1.ModalService }]; }, null); })();

class GroupInfoComponent {
    constructor(inventory, subAssetsService, deviceGroupService, smartGroupsService, alertService, translate, modalService) {
        this.inventory = inventory;
        this.subAssetsService = subAssetsService;
        this.deviceGroupService = deviceGroupService;
        this.smartGroupsService = smartGroupsService;
        this.alertService = alertService;
        this.translate = translate;
        this.modalService = modalService;
        this.onGroupChange = new EventEmitter();
        this.filterMsg = gettext('Smart groups are groups dynamically constructed based on filtering criteria.');
        this.canEditMsg = gettext('You can edit the filter here.');
        this.GROUP_UPDATED_MSG = gettext('Group updated.');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.canEdit = this.smartGroupsService.isSmartGroupV2(this.group)
                ? this.subAssetsService.canEditSmartGroup()
                : yield this.subAssetsService.canEditGroup(this.group);
            this.groupIcon = this.deviceGroupService.icon(this.group);
            this.smartGroupFilter = this.group.c8y_DeviceQueryString;
            this.setHintMsg();
        });
    }
    isSmartGroup() {
        return this.subAssetsService.isSmartGroup(this.group);
    }
    update(partialGroup) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const isSmartGroup = this.subAssetsService.isSmartGroup(this.group);
                isSmartGroup
                    ? yield this.updateSmartGroup(partialGroup)
                    : yield this.updateGroup(partialGroup);
            }
            catch (error) {
                this.alertService.addServerFailure(error);
            }
        });
    }
    setHintMsg() {
        const filterMsgTranslated = this.translate.instant(this.filterMsg);
        const canEditMsgTranslated = this.translate.instant(this.canEditMsg);
        this.filterHintMsg = this.canEdit
            ? `${filterMsgTranslated} ${canEditMsgTranslated}`
            : this.filterMsg;
    }
    updateGroup(partialGroup) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.group;
            const group = Object.assign({ id }, partialGroup);
            const updatedGroup = (yield this.inventory.update(group)).data;
            this.setGroup(updatedGroup);
        });
    }
    updateSmartGroup(partialGroup) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.group;
            const { c8y_DeviceQueryString } = partialGroup;
            const group = Object.assign({ id }, partialGroup);
            let updatedGroup;
            if (!c8y_DeviceQueryString) {
                updatedGroup = (yield this.smartGroupsService.update(group)).data;
                this.setGroup(updatedGroup);
                return;
            }
            try {
                const modalBody = gettext('You are about to change the smart group filter. Do you want to proceed?');
                const title = gettext('Smart group filter');
                yield this.modalService.confirm(title, modalBody, Status.WARNING, {
                    ok: gettext('Save'),
                    cancel: gettext('Cancel')
                });
                if (!(yield this.isQueryExecutable(c8y_DeviceQueryString))) {
                    return;
                }
            }
            catch (e) {
                return;
            }
            updatedGroup = (yield this.smartGroupsService.update(group)).data;
            this.setGroup(updatedGroup);
        });
    }
    setGroup(group) {
        this.onGroupChange.emit(group);
        this.alertService.success(this.GROUP_UPDATED_MSG);
    }
    isQueryExecutable(query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const filter = { q: query };
                yield this.inventory.list(filter);
                return true;
            }
            catch (error) {
                this.alertService.addServerFailure(error);
                return false;
            }
        });
    }
}
GroupInfoComponent.ɵfac = function GroupInfoComponent_Factory(t) { return new (t || GroupInfoComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.InventoryService), ɵngcc0.ɵɵdirectiveInject(SubAssetsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DeviceGroupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.SmartGroupsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService)); };
GroupInfoComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GroupInfoComponent, selectors: [["c8y-group-info"]], inputs: { group: "group" }, outputs: { onGroupChange: "onGroupChange" }, decls: 48, vars: 25, consts: [[1, "bg-gray-white"], [1, "card-block", "p-t-24", "p-b-24", "large-padding"], [1, "content-flex-70"], [1, "text-center"], [1, "c8y-icon-duocolor", "icon-48", 3, "c8yIcon"], ["class", "label label-info", 4, "ngIf"], [1, "flex-grow", "col-10"], [1, "content-flex-80"], [1, "col-9"], ["groupNameForm", "ngForm"], [1, "form-group-lg", "m-b-0"], ["translate", "", 1, "sr-only"], ["class", "form-control-static", 4, "ngIf"], ["class", "input-group input-group-editable", 4, "ngIf"], ["groupDescriptionForm", "ngForm"], [4, "ngIf"], [1, "flex-grow"], [1, "m-b-8"], ["c8yIcon", "info-circle", 1, "text-info", "m-r-8"], [1, "text-label-small"], [1, "list-unstyled", "small"], [1, "p-t-4", "p-b-4", "flex-row", "separator-top-bottom", "text-nowrap"], [1, "small", "m-b-0", "m-r-8"], [1, "flex-item-right"], [1, "p-t-4", "p-b-4", "flex-row", "separator-bottom", "text-nowrap"], ["class", "p-t-4 p-b-4 flex-row separator-bottom text-nowrap", 4, "ngIf"], [1, "label", "label-info"], [1, "form-control-static"], [1, "input-group", "input-group-editable"], ["type", "text", "name", "name", "maxlength", "254", "required", "", 1, "form-control", 3, "ngModel", "title", "size", "placeholder", "ngModelChange"], [1, "input-group-btn"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], ["name", "description", 1, "form-control", 3, "ngModel", "title", "cols", "placeholder", "ngModelChange"], ["smartGroupFilterForm", "ngForm"], [1, "m-b-0", "m-t-8"], [1, "m-b-0", "text-nowrap"], ["type", "button", "triggers", "focus", 1, "btn-clean", "text-primary", "m-r-4", 3, "popover"], ["c8yIcon", "question-circle-o"], ["type", "text", "name", "filter", "maxlength", "254", 1, "form-control", 3, "ngModel", "size", "placeholder", "title", "ngModelChange"], ["class", "flex-item-right", 4, "ngIf"]], template: function GroupInfoComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelement(4, "i", 4);
        ɵngcc0.ɵɵelementStart(5, "p");
        ɵngcc0.ɵɵtemplate(6, GroupInfoComponent_small_6_Template, 3, 3, "small", 5);
        ɵngcc0.ɵɵtemplate(7, GroupInfoComponent_small_7_Template, 3, 3, "small", 5);
        ɵngcc0.ɵɵtemplate(8, GroupInfoComponent_small_8_Template, 3, 3, "small", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "form", null, 9);
        ɵngcc0.ɵɵelementStart(14, "c8y-form-group", 10);
        ɵngcc0.ɵɵelementStart(15, "label", 11);
        ɵngcc0.ɵɵtext(16, " Name ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, GroupInfoComponent_p_17_Template, 2, 1, "p", 12);
        ɵngcc0.ɵɵtemplate(18, GroupInfoComponent_div_18_Template, 10, 15, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "form", null, 14);
        ɵngcc0.ɵɵelementStart(21, "label", 11);
        ɵngcc0.ɵɵtext(22, " Description ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(23, GroupInfoComponent_p_23_Template, 2, 1, "p", 12);
        ɵngcc0.ɵɵtemplate(24, GroupInfoComponent_div_24_Template, 10, 15, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(25, GroupInfoComponent_form_25_Template, 11, 8, "form", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "div", 16);
        ɵngcc0.ɵɵelementStart(27, "p", 17);
        ɵngcc0.ɵɵelement(28, "i", 18);
        ɵngcc0.ɵɵelementStart(29, "span", 19);
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "ul", 20);
        ɵngcc0.ɵɵelementStart(33, "li", 21);
        ɵngcc0.ɵɵelementStart(34, "label", 22);
        ɵngcc0.ɵɵtext(35);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "span", 23);
        ɵngcc0.ɵɵtext(38);
        ɵngcc0.ɵɵpipe(39, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(40, "li", 24);
        ɵngcc0.ɵɵelementStart(41, "label", 22);
        ɵngcc0.ɵɵtext(42);
        ɵngcc0.ɵɵpipe(43, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(44, "span", 23);
        ɵngcc0.ɵɵtext(45);
        ɵngcc0.ɵɵpipe(46, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(47, GroupInfoComponent_li_47_Template, 6, 5, "li", 25);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("c8yIcon", ctx.groupIcon + "-open");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.group.c8y_IsDynamicGroup);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.group.c8y_IsDynamicGroup && !ctx.group.com_cumulocity_model_Agent);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.group.com_cumulocity_model_Agent);
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.canEdit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.canEdit);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.canEdit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.canEdit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSmartGroup());
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(31, 15, "Group info"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(36, 17, "Created"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(39, 19, ctx.group.creationTime));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(43, 21, "Last updated"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(46, 23, ctx.group.lastUpdated));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.group.com_cumulocity_model_Agent);
    } }, directives: [ɵngcc1.IconDirective, ɵngcc3.NgIf, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc1.FormGroupComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.MaxLengthValidator, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc7.PopoverDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc1.DatePipe], encapsulation: 2 });
GroupInfoComponent.ctorParameters = () => [
    { type: InventoryService },
    { type: SubAssetsService },
    { type: DeviceGroupService },
    { type: SmartGroupsService },
    { type: AlertService },
    { type: TranslateService },
    { type: ModalService }
];
GroupInfoComponent.propDecorators = {
    group: [{ type: Input }],
    onGroupChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupInfoComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-group-info',
                template: "<div class=\"bg-gray-white\">\n  <div class=\"card-block p-t-24 p-b-24 large-padding\">\n    <div class=\"content-flex-70\">\n      <div class=\"text-center\">\n        <i class=\"c8y-icon-duocolor icon-48\" [c8yIcon]=\"groupIcon + '-open'\"></i>\n        <p>\n          <small class=\"label label-info\" *ngIf=\"group.c8y_IsDynamicGroup\">\n            {{ 'Smart group' | translate }}\n          </small>\n          <small\n            class=\"label label-info\"\n            *ngIf=\"!group.c8y_IsDynamicGroup && !group.com_cumulocity_model_Agent\"\n          >\n            {{ 'Group' | translate }}\n          </small>\n          <small class=\"label label-info\" *ngIf=\"group.com_cumulocity_model_Agent\">\n            {{ 'Remote group' | translate }}\n          </small>\n        </p>\n      </div>\n\n      <div class=\"flex-grow col-10\">\n        <div class=\"content-flex-80\">\n          <div class=\"col-9\">\n            <form #groupNameForm=\"ngForm\">\n              <c8y-form-group class=\"form-group-lg m-b-0\">\n                <label class=\"sr-only\" translate>\n                  Name\n                </label>\n\n                <p *ngIf=\"!canEdit\" class=\"form-control-static\">{{ group.name }}</p>\n                <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    [(ngModel)]=\"group.name\"\n                    name=\"name\"\n                    title=\"{{ 'Name' | translate }}\"\n                    size=\"{{ group.name.length + 2 }}\"\n                    placeholder=\"{{ 'e.g. My group' | translate }}\"\n                    maxlength=\"254\"\n                    required\n                  />\n                  <span></span>\n                  <div class=\"input-group-btn\">\n                    <button\n                      (click)=\"update({ name: group.name }); groupNameForm.form.markAsPristine()\"\n                      class=\"btn btn-primary\"\n                      title=\"{{ 'Save' | translate }}\"\n                      [disabled]=\"groupNameForm.form.invalid\"\n                    >\n                      {{ 'Save' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </c8y-form-group>\n            </form>\n            <form #groupDescriptionForm=\"ngForm\">\n              <label class=\"sr-only\" translate>\n                Description\n              </label>\n              <p *ngIf=\"!canEdit\" class=\"form-control-static\">{{ group.c8y_Notes }}</p>\n              <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                <textarea\n                  class=\"form-control\"\n                  [(ngModel)]=\"group.c8y_Notes\"\n                  name=\"description\"\n                  title=\"{{ 'Description' | translate }}\"\n                  cols=\"{{ group.c8y_Notes ? group.c8y_Notes.length : 25 }}\"\n                  placeholder=\"{{ 'e.g. My description' | translate }}\"\n                ></textarea>\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      update({ c8y_Notes: group.c8y_Notes });\n                      groupDescriptionForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"groupDescriptionForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </form>\n\n            <form #smartGroupFilterForm=\"ngForm\" *ngIf=\"isSmartGroup()\">\n              <c8y-form-group class=\"m-b-0 m-t-8\">\n                <label class=\"m-b-0 text-nowrap\">\n                  {{ 'Smart group filter' | translate }}\n                  <button\n                    class=\"btn-clean text-primary m-r-4\"\n                    type=\"button\"\n                    popover=\"{{ filterHintMsg | translate }}\"\n                    triggers=\"focus\"\n                  >\n                    <i c8yIcon=\"question-circle-o\"></i>\n                  </button>\n                </label>\n\n                <p *ngIf=\"!canEdit\" class=\"form-control-static\">\n                  {{ smartGroupFilter }}\n                </p>\n                <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    [(ngModel)]=\"smartGroupFilter\"\n                    name=\"filter\"\n                    size=\"{{ smartGroupFilter.length + 2 }}\"\n                    placeholder=\"{{ 'e.g.' | translate }} $filter=(id eq '12*')\"\n                    maxlength=\"254\"\n                    title=\"{{ 'Smart group filter' | translate }}\"\n                  />\n                  <span></span>\n                  <div class=\"input-group-btn\">\n                    <button\n                      (click)=\"\n                        update({ c8y_DeviceQueryString: smartGroupFilter });\n                        smartGroupFilterForm.form.markAsPristine()\n                      \"\n                      class=\"btn btn-primary\"\n                      title=\"{{ 'Save' | translate }}\"\n                      [disabled]=\"smartGroupFilterForm.form.invalid\"\n                    >\n                      {{ 'Save' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </c8y-form-group>\n            </form>\n          </div>\n          <div class=\"flex-grow\">\n            <p class=\"m-b-8\">\n              <i c8yIcon=\"info-circle\" class=\"text-info m-r-8\"></i>\n              <span class=\"text-label-small\">{{ 'Group info' | translate }}</span>\n            </p>\n            <ul class=\"list-unstyled small\">\n              <li class=\"p-t-4 p-b-4 flex-row separator-top-bottom text-nowrap\">\n                <label class=\"small m-b-0 m-r-8\">{{ 'Created' | translate }}</label>\n                <span class=\"flex-item-right\">{{ group.creationTime | c8yDate }}</span>\n              </li>\n              <li class=\"p-t-4 p-b-4 flex-row separator-bottom text-nowrap\">\n                <label class=\"small m-b-0 m-r-8\">{{ 'Last updated' | translate }}</label>\n                <span class=\"flex-item-right\">{{ group.lastUpdated | c8yDate }}</span>\n              </li>\n\n              <li\n                *ngIf=\"group.com_cumulocity_model_Agent\"\n                class=\"p-t-4 p-b-4 flex-row separator-bottom text-nowrap\"\n              >\n                <label class=\"small m-b-0 m-r-8\">{{ 'Status' | translate }}</label>\n                <span class=\"flex-item-right\" *ngIf=\"group.c8y_BrokerSource\">\n                  {{ group.c8y_BrokerSource.status }}\n                </span>\n                <span class=\"flex-item-right\" *ngIf=\"!group.c8y_BrokerSource\">\n                  {{ 'Offline' | translate }}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.InventoryService }, { type: SubAssetsService }, { type: ɵngcc2.DeviceGroupService }, { type: ɵngcc5.SmartGroupsService }, { type: ɵngcc1.AlertService }, { type: ɵngcc4.TranslateService }, { type: ɵngcc1.ModalService }]; }, { onGroupChange: [{
            type: Output
        }], group: [{
            type: Input
        }] }); })();

class SubAssetsComponent {
    constructor(route, deviceGroupService, subAssetsService) {
        this.route = route;
        this.deviceGroupService = deviceGroupService;
        this.subAssetsService = subAssetsService;
        this.toggle = false;
        this.showAddGroup = false;
        this.showAssignDevices = false;
        this.showAssignChildDevices = false;
        this.refresh = new EventEmitter();
        this.filterable = true;
        this.shouldDisableAddGroup = false;
        this.shouldDisableAssignDevices = false;
        this.dataSub = this.route.parent.data.subscribe(({ contextData }) => {
            this.title = contextData.name;
            this.currentGroupId = contextData.id;
            this.group = contextData;
            this.filterable = !this.deviceGroupService.isDynamicGroup(contextData);
        });
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.shouldDisableAddGroup = !this.subAssetsService.canCreateGroup();
            this.shouldDisableAssignDevices = yield !this.subAssetsService.canAssignDevice(this.group);
            this.displayOptions = {
                striped: true,
                bordered: false,
                gridHeader: true,
                filter: !this.isSmartGroup()
            };
        });
    }
    groupChange(group) {
        /**
         * Group is cached in the context-route guard. To avoid loading old data (when switching tabs) we need to update
         * this object in the cache.
         */
        Object.assign(this.group, group);
        this.title = group.name;
        this.refresh.emit();
    }
    isSmartGroup() {
        return this.subAssetsService.isSmartGroup(this.group);
    }
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
}
SubAssetsComponent.ɵfac = function SubAssetsComponent_Factory(t) { return new (t || SubAssetsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc8.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DeviceGroupService), ɵngcc0.ɵɵdirectiveInject(SubAssetsService)); };
SubAssetsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SubAssetsComponent, selectors: [["c8y-sub-assets"]], decls: 18, vars: 20, consts: [[3, "placement", 4, "ngIf"], [1, "card", "content-fullpage", "d-flex", "d-col"], [3, "group", "onGroupChange"], [1, "d-contents", 3, "refresh", "parent-group", "filterable", "displayOptions"], [3, "ngClass"], [1, "bottom-drawer"], [3, "currentGroupId", "refresh", "onCancel", 4, "ngIf"], [1, "d-flex", "d-col", "no-align-items", "fit-h"], ["class", "d-contents", 3, "refresh", "currentGroupId", "onCancel", "onShowChildDevices", "selectedDevice", 4, "ngIf"], [1, "bottom-drawer", "m-t-40"], ["class", "d-contents", 3, "refresh", "currentGroupId", "parentDevice", "onCancel", 4, "ngIf"], [3, "placement"], [1, "btn", "btn-link", 3, "title", "disabled", "click"], ["c8yIcon", "plus-circle", 1, "m-r-4"], ["translate", ""], [3, "currentGroupId", "refresh", "onCancel"], [1, "d-contents", 3, "refresh", "currentGroupId", "onCancel", "onShowChildDevices", "selectedDevice"], [1, "d-contents", 3, "refresh", "currentGroupId", "parentDevice", "onCancel"]], template: function SubAssetsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, SubAssetsComponent_c8y_action_bar_item_2_Template, 6, 5, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵtemplate(3, SubAssetsComponent_c8y_action_bar_item_3_Template, 6, 5, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "div", 1);
        ɵngcc0.ɵɵelementStart(5, "c8y-group-info", 2);
        ɵngcc0.ɵɵlistener("onGroupChange", function SubAssetsComponent_Template_c8y_group_info_onGroupChange_5_listener($event) { return ctx.groupChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "c8y-sub-assets-grid", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵtemplate(9, SubAssetsComponent_c8y_add_group_9_Template, 1, 2, "c8y-add-group", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵelementStart(11, "div", 5);
        ɵngcc0.ɵɵelementStart(12, "div", 7);
        ɵngcc0.ɵɵtemplate(13, SubAssetsComponent_c8y_assign_devices_13_Template, 1, 2, "c8y-assign-devices", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 4);
        ɵngcc0.ɵɵelementStart(15, "div", 9);
        ɵngcc0.ɵɵelementStart(16, "div", 7);
        ɵngcc0.ɵɵtemplate(17, SubAssetsComponent_c8y_assign_child_devices_17_Template, 1, 3, "c8y-assign-child-devices", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSmartGroup());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSmartGroup());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("group", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("refresh", ctx.refresh)("parent-group", ctx.group)("filterable", ctx.filterable)("displayOptions", ctx.displayOptions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c0, ctx.showAddGroup));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showAddGroup);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(16, _c0, ctx.showAssignDevices));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showAssignDevices);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(18, _c0, ctx.showAssignChildDevices));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showAssignChildDevices);
    } }, directives: function () { return [ɵngcc1.TitleComponent, ɵngcc3.NgIf, GroupInfoComponent, SubAssetsGridComponent, ɵngcc3.NgClass, ɵngcc1.ActionBarItemComponent, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective, AddGroupComponent, AssignDevicesComponent, AssignChildDevicesComponent]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe]; }, encapsulation: 2 });
SubAssetsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DeviceGroupService },
    { type: SubAssetsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-sub-assets',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"!isSmartGroup()\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Add group' | translate }}\"\n    (click)=\"showAddGroup = !showAddGroup\"\n    [disabled]=\"shouldDisableAddGroup\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i><span translate>Add group</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"!isSmartGroup()\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Assign devices' | translate }}\"\n    (click)=\"showAssignDevices = !showAssignDevices\"\n    [disabled]=\"shouldDisableAssignDevices\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i><span translate>Assign devices</span>\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-flex d-col\">\n  <c8y-group-info [group]=\"group\" (onGroupChange)=\"groupChange($event)\"></c8y-group-info>\n  <c8y-sub-assets-grid\n    [refresh]=\"refresh\"\n    [parent-group]=\"group\"\n    [filterable]=\"filterable\"\n    [displayOptions]=\"displayOptions\"\n    class=\"d-contents\"\n  ></c8y-sub-assets-grid>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAddGroup }\">\n  <div class=\"bottom-drawer\">\n    <c8y-add-group\n      [currentGroupId]=\"currentGroupId\"\n      [refresh]=\"refresh\"\n      (onCancel)=\"showAddGroup = false\"\n      *ngIf=\"showAddGroup\"\n    ></c8y-add-group>\n  </div>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAssignDevices }\">\n  <div class=\"bottom-drawer\">\n    <div class=\"d-flex d-col no-align-items fit-h\">\n      <c8y-assign-devices\n        class=\"d-contents\"\n        (onCancel)=\"showAssignDevices = false\"\n        [refresh]=\"refresh\"\n        [currentGroupId]=\"currentGroupId\"\n        (onShowChildDevices)=\"showAssignChildDevices = $event\"\n        (selectedDevice)=\"showChildrenForDevice = $event\"\n        *ngIf=\"showAssignDevices\"\n      ></c8y-assign-devices>\n    </div>\n  </div>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAssignChildDevices }\">\n  <div class=\"bottom-drawer m-t-40\">\n    <div class=\"d-flex d-col no-align-items fit-h\">\n      <c8y-assign-child-devices\n        *ngIf=\"showAssignChildDevices\"\n        class=\"d-contents\"\n        (onCancel)=\"showAssignChildDevices = false\"\n        [refresh]=\"refresh\"\n        [currentGroupId]=\"currentGroupId\"\n        [parentDevice]=\"showChildrenForDevice\"\n      ></c8y-assign-child-devices>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc8.ActivatedRoute }, { type: ɵngcc2.DeviceGroupService }, { type: SubAssetsService }]; }, null); })();

class DeleteAssetsModalComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.showWithCascadeCheckbox = true;
        this.showWithDeviceUserCheckbox = false;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Delete'), cancel: gettext('Cancel') };
        this.title = gettext('Delete asset');
        this.status = Status.DANGER;
        this.config = {
            cascade: false,
            withDeviceUser: false
        };
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to delete asset: "{{name}}". This operation is irreversible. Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.closeSubject.next(this.config);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.complete();
    }
}
DeleteAssetsModalComponent.ɵfac = function DeleteAssetsModalComponent_Factory(t) { return new (t || DeleteAssetsModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
DeleteAssetsModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeleteAssetsModalComponent, selectors: [["c8y-delete-assets-modal"]], viewQuery: function DeleteAssetsModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRef = _t.first);
    } }, inputs: { showWithCascadeCheckbox: "showWithCascadeCheckbox", showWithDeviceUserCheckbox: "showWithDeviceUserCheckbox", asset: "asset" }, decls: 9, vars: 8, consts: [[3, "title", "status", "labels"], ["modalRef", ""], ["assetsForm", "ngForm"], [1, "text-wrap", "m-b-16"], ["class", "m-b-0", 4, "ngIf"], [1, "m-b-0"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "name", "cascade", 3, "ngModel", "ngModelChange"], ["type", "checkbox", "name", "withDeviceUser", 3, "ngModel", "ngModelChange"]], template: function DeleteAssetsModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-confirm-modal", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "form", null, 2);
        ɵngcc0.ɵɵelementStart(4, "p", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, DeleteAssetsModalComponent_c8y_form_group_7_Template, 8, 7, "c8y-form-group", 4);
        ɵngcc0.ɵɵtemplate(8, DeleteAssetsModalComponent_c8y_form_group_8_Template, 8, 7, "c8y-form-group", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("status", ctx.status)("labels", ctx.labels);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 6, ctx.message), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showWithCascadeCheckbox);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showWithDeviceUserCheckbox);
    } }, directives: [ɵngcc1.ConfirmModalComponent, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc3.NgIf, ɵngcc1.FormGroupComponent, ɵngcc6.CheckboxControlValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
DeleteAssetsModalComponent.ctorParameters = () => [
    { type: TranslateService }
];
DeleteAssetsModalComponent.propDecorators = {
    showWithCascadeCheckbox: [{ type: Input }],
    showWithDeviceUserCheckbox: [{ type: Input }],
    asset: [{ type: Input }],
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeleteAssetsModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-delete-assets-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <form #assetsForm=\"ngForm\">\n    <p class=\"text-wrap m-b-16\">\n      {{ message | translate }}\n    </p>\n    <c8y-form-group *ngIf=\"showWithCascadeCheckbox\" class=\"m-b-0\">\n      <label title=\"{{ 'Delete devices' | translate }}\" class=\"c8y-checkbox\">\n        <input type=\"checkbox\" name=\"cascade\" [(ngModel)]=\"config.cascade\" />\n        <span></span>\n        <span>\n          {{ 'Also delete all devices inside selected asset and its subassets.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n    <c8y-form-group *ngIf=\"showWithDeviceUserCheckbox\" class=\"m-b-0\">\n      <label title=\"{{ 'Delete associated device owner' | translate }}\" class=\"c8y-checkbox\">\n        <input type=\"checkbox\" name=\"withDeviceUser\" [(ngModel)]=\"config.withDeviceUser\" />\n        <span></span>\n        <span>\n          {{ 'Also delete associated device owner.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n  </form>\n</c8y-confirm-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }]; }, { showWithCascadeCheckbox: [{
            type: Input
        }], showWithDeviceUserCheckbox: [{
            type: Input
        }], asset: [{
            type: Input
        }], modalRef: [{
            type: ViewChild,
            args: ['modalRef', { static: false }]
        }] }); })();

class UnassignModalComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign asset');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign asset "{{name}}". Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.complete();
    }
}
UnassignModalComponent.ɵfac = function UnassignModalComponent_Factory(t) { return new (t || UnassignModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslateService)); };
UnassignModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UnassignModalComponent, selectors: [["c8y-unassign-modal"]], viewQuery: function UnassignModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalRef = _t.first);
    } }, inputs: { asset: "asset" }, decls: 5, vars: 6, consts: [[3, "title", "status", "labels"], ["modalRef", ""]], template: function UnassignModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-confirm-modal", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("status", ctx.status)("labels", ctx.labels);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx.message));
    } }, directives: [ɵngcc1.ConfirmModalComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
UnassignModalComponent.ctorParameters = () => [
    { type: TranslateService }
];
UnassignModalComponent.propDecorators = {
    asset: [{ type: Input }],
    modalRef: [{ type: ViewChild, args: ['modalRef', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnassignModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-unassign-modal',
                template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc4.TranslateService }]; }, { asset: [{
            type: Input
        }], modalRef: [{
            type: ViewChild,
            args: ['modalRef', { static: false }]
        }] }); })();

class SubAssetsGridComponent {
    constructor(subAssetsGridService, bsModalService, smartGroupsService) {
        this.subAssetsGridService = subAssetsGridService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.title = gettext('Subassets');
        this.emptyStateText = gettext('Add your first group or assign devices using the buttons on the action bar.');
        this.loadingItemsLabel = gettext('Loading assets…');
        this.selectable = false;
        this.baseQuery = {};
        this.filterable = true;
        this.sortable = true;
        this.onColumnsChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.pagination = this.subAssetsGridService.getDefaultPagination();
        this.showCounterWarning = false;
        this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    get columns() {
        return this._columns;
    }
    set columns(value) {
        if (value) {
            this._columns = this.subAssetsGridService.getUserConfiguredColumns(value);
        }
        else {
            this._columns = this.subAssetsGridService.getUserConfiguredColumns(this.subAssetsGridService.getDefaultColumns());
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.subAssetsGridService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.subAssetsGridService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        }
    }
    get isRootGroup() {
        return !this.parentGroup;
    }
    get getInfiniteScrollMode() {
        return this.isRootGroup && this.subAssetsGridService.isUsingInventoryRoles()
            ? 'auto'
            : undefined;
    }
    set _displayOptions(displayOptions) {
        this.displayOptions = Object.assign(Object.assign({}, this.displayOptions), displayOptions);
    }
    ngOnInit() {
        this.columns = this.subAssetsGridService.getDefaultColumns(this.filterable, this.sortable);
        if (!this.filterable || !this.sortable) {
            this.columns.forEach(column => {
                column.filterable = this.filterable;
                column.sortable = this.sortable;
            });
        }
        this.setActionControls();
    }
    setActionControls() {
        return __awaiter(this, void 0, void 0, function* () {
            const actionControls = [];
            const { data: isMicroserviceInstalled } = yield this.smartGroupsService.isSmartGroupsV2MicroserviceInstalled();
            const deleteAction = {
                type: "DELETE" /* Delete */,
                callback: (asset) => this.onDeleteAsset(asset, this.parentGroup),
                showIf: (asset) => {
                    if (this.smartGroupsService.isSmartGroupV2(asset)) {
                        return isMicroserviceInstalled ? this.subAssetsGridService.canDeleteSmartGroup() : false;
                    }
                    if (this.smartGroupsService.isSmartGroup(asset)) {
                        return this.subAssetsGridService.canDeleteSmartGroup();
                    }
                    return true;
                }
            };
            actionControls.push(deleteAction);
            const unassignAction = {
                type: 'UNASSIGN',
                icon: 'unlink',
                text: gettext('Unassign'),
                callback: (asset) => this.onUnassignAsset(asset, this.parentGroup),
                showIf: (asset) => this.subAssetsGridService.isDevice(asset) &&
                    !this.subAssetsGridService.isSmartGroup(this.parentGroup)
            };
            actionControls.push(unassignAction);
            if (!this.actionControls) {
                this.actionControls = actionControls;
            }
        });
    }
    onUnassignAsset(asset, parentRef) {
        const initialState = {
            asset
        };
        const modalRef = this.bsModalService.show(UnassignModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe((result) => __awaiter(this, void 0, void 0, function* () {
            if (result) {
                yield this.subAssetsGridService.unassignAsset(asset, parentRef);
                this.refresh.emit();
            }
        }));
    }
    onDeleteAsset(asset, parentRef) {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
                asset,
                showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                    !this.smartGroupsService.isSmartGroupV2(asset)
            };
            const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
            modalRef.content.closeSubject.subscribe((result) => __awaiter(this, void 0, void 0, function* () {
                if (result) {
                    yield this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                    this.showCounterWarning = true;
                    this.refresh.emit();
                }
            }));
        });
    }
    ngOnChanges(changes) {
        if (changes.parentGroup && !changes.parentGroup.firstChange) {
            this.dataGrid.reload();
        }
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            let counters;
            promises.push(this.subAssetsGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
            promises.push(this.subAssetsGridService.getTotal(this.parentGroup, this.baseQuery));
            promises.push(this.subAssetsGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
            const [dataResponse, size, filteredSize] = yield Promise.all(promises);
            if (!counters) {
                counters = {
                    size,
                    filteredSize
                };
            }
            this.onColumnsChange.emit(dataSourceModifier.columns);
            return Object.assign({ res: dataResponse.res, data: dataResponse.data, paging: dataResponse.paging }, counters);
        });
    }
    configChange(config) {
        this.subAssetsGridService.saveConfig(config);
    }
}
SubAssetsGridComponent.ɵfac = function SubAssetsGridComponent_Factory(t) { return new (t || SubAssetsGridComponent)(ɵngcc0.ɵɵdirectiveInject(SubAssetsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.SmartGroupsService)); };
SubAssetsGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SubAssetsGridComponent, selectors: [["c8y-sub-assets-grid"]], viewQuery: function SubAssetsGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataGridComponent, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataGrid = _t.first);
    } }, inputs: { title: "title", emptyStateText: "emptyStateText", loadingItemsLabel: "loadingItemsLabel", selectable: "selectable", baseQuery: "baseQuery", filterable: "filterable", sortable: "sortable", columns: "columns", _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], _displayOptions: ["displayOptions", "_displayOptions"], parentGroup: ["parent-group", "parentGroup"], refresh: "refresh" }, outputs: { onColumnsChange: "onColumnsChange", itemsSelect: "itemsSelect" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 12, vars: 20, consts: [[1, "d-contents", 3, "title", "loadingItemsLabel", "columns", "pagination", "actionControls", "selectable", "bulkActionControls", "serverSideDataCallback", "infiniteScroll", "showCounterWarning", "refresh", "displayOptions", "onConfigChange", "itemsSelect"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "c8y-empty-state"], ["c8yIcon", "c8y-group-add", 1, "c8y-icon-duocolor"], [3, "name"]], template: function SubAssetsGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-data-grid", 0);
        ɵngcc0.ɵɵlistener("onConfigChange", function SubAssetsGridComponent_Template_c8y_data_grid_onConfigChange_0_listener($event) { return ctx.configChange($event); })("itemsSelect", function SubAssetsGridComponent_Template_c8y_data_grid_itemsSelect_0_listener($event) { return ctx.itemsSelect.emit($event); });
        ɵngcc0.ɵɵtemplate(1, SubAssetsGridComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "h1", 3);
        ɵngcc0.ɵɵelementStart(4, "div");
        ɵngcc0.ɵɵelementStart(5, "p");
        ɵngcc0.ɵɵelementStart(6, "strong");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "small");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.title)("loadingItemsLabel", ctx.loadingItemsLabel)("columns", ctx.columns)("pagination", ctx.pagination)("actionControls", ctx.actionControls)("selectable", ctx.selectable)("bulkActionControls", ctx.bulkActionControls)("serverSideDataCallback", ctx.serverSideDataCallback)("infiniteScroll", ctx.getInfiniteScrollMode)("showCounterWarning", ctx.showCounterWarning)("refresh", ctx.refresh)("displayOptions", ctx.displayOptions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByName);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 16, "No items to display."));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 18, ctx.emptyStateText));
    } }, directives: [ɵngcc1.DataGridComponent, ɵngcc3.NgForOf, ɵngcc1.IconDirective, ɵngcc1.ColumnDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
SubAssetsGridComponent.ctorParameters = () => [
    { type: SubAssetsService },
    { type: BsModalService },
    { type: SmartGroupsService }
];
SubAssetsGridComponent.propDecorators = {
    parentGroup: [{ type: Input, args: ['parent-group',] }],
    refresh: [{ type: Input }],
    title: [{ type: Input }],
    emptyStateText: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    columns: [{ type: Input }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    baseQuery: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    filterable: [{ type: Input }],
    sortable: [{ type: Input }],
    onColumnsChange: [{ type: Output }],
    itemsSelect: [{ type: Output }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }],
    _displayOptions: [{ type: Input, args: ['displayOptions',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsGridComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-sub-assets-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [showCounterWarning]=\"showCounterWarning\"\n  [refresh]=\"refresh\"\n  [displayOptions]=\"displayOptions\"\n  (onConfigChange)=\"configChange($event)\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  class=\"d-contents\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"c8y-group-add\" class=\"c8y-icon-duocolor\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No items to display.' | translate }}</strong>\n      </p>\n      <small>{{ emptyStateText | translate }}</small>\n    </div>\n  </div>\n</c8y-data-grid>\n"
            }]
    }], function () { return [{ type: SubAssetsService }, { type: ɵngcc9.BsModalService }, { type: ɵngcc5.SmartGroupsService }]; }, { title: [{
            type: Input
        }], emptyStateText: [{
            type: Input
        }], loadingItemsLabel: [{
            type: Input
        }], selectable: [{
            type: Input
        }], baseQuery: [{
            type: Input
        }], filterable: [{
            type: Input
        }], sortable: [{
            type: Input
        }], onColumnsChange: [{
            type: Output
        }], itemsSelect: [{
            type: Output
        }], columns: [{
            type: Input
        }], _pagination: [{
            type: Input,
            args: ['pagination']
        }], _actionControls: [{
            type: Input,
            args: ['actionControls']
        }], _bulkActionControls: [{
            type: Input,
            args: ['bulkActionControls']
        }], _displayOptions: [{
            type: Input,
            args: ['displayOptions']
        }], parentGroup: [{
            type: Input,
            args: ['parent-group']
        }], refresh: [{
            type: Input
        }], dataGrid: [{
            type: ViewChild,
            args: [DataGridComponent, { static: true }]
        }] }); })();

class AddGroupService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
    }
    createGroupAndAssignDevices(groupForm, groupContextId, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            let group;
            const { name, description } = groupForm;
            const newGroupMO = this.getGroupMO(name, description, groupContextId);
            if (groupContextId) {
                group = (yield this.inventoryService.childAssetsCreate(newGroupMO, groupContextId)).data;
            }
            else {
                group = (yield this.inventoryService.create(newGroupMO)).data;
            }
            if (selectedDevices.length > 0) {
                yield this.assignDevices(group.id, selectedDevices);
            }
            return group;
        });
    }
    getGroupMO(name, description = '', groupContextId) {
        const group = {
            type: this.getGroupType(groupContextId),
            [this.GROUP_FRAGMENT_TYPE]: {},
            name,
            c8y_Notes: description
        };
        return group;
    }
    getGroupType(groupContextId) {
        return groupContextId ? GroupFragment.subGroupType : GroupFragment.groupType;
    }
    assignDevices(id, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            selectedDevices.forEach(moId => {
                promises.push(this.inventoryService.childAssetsAdd(moId, id));
            });
            return yield Promise.all(promises);
        });
    }
}
AddGroupService.ɵfac = function AddGroupService_Factory(t) { return new (t || AddGroupService)(ɵngcc0.ɵɵinject(ɵngcc5.InventoryService)); };
AddGroupService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AddGroupService, factory: AddGroupService.ɵfac });
AddGroupService.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddGroupService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.InventoryService }]; }, null); })();

class AddGroupComponent {
    constructor(deviceGridService, fb, addGroupService, alert, subAssetsService) {
        this.deviceGridService = deviceGridService;
        this.fb = fb;
        this.addGroupService = addGroupService;
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.refresh = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.pendingStatus = false;
        this.pagination = { pageSize: 20, currentPage: 1 };
        this.selected = [];
        this.canCreateGroup = false;
        this.canAssignDevice = false;
        this.ITEMS_SELECT_LIMIT = 15;
        this.btnLabels = {
            next: gettext('Next'),
            cancel: gettext('Cancel'),
            create: gettext('Create')
        };
    }
    onEnterKeyDown(event) {
        // Order matters! Needs to be placed before this.stepper.next
        if ((this.isGroupDetailsStep() && !this.canAssignDevice) || this.isAssignDeviceStep()) {
            this.createGroup();
            return;
        }
        this.stepper.next();
    }
    onEscapeKeyDown(event) {
        this.onCancel.emit();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.formGroupStepOne = this.fb.group({
                name: ['', Validators.required],
                description: ['']
            });
            this.subscription = this.onCancel.subscribe(() => this.resetStepper());
            this.canCreateGroup = this.subAssetsService.canCreateGroup();
            this.canAssignDevice = yield this.subAssetsService.canAssignDevice({
                id: this.currentGroupId
            });
        });
    }
    ngAfterViewInit() {
        this.nameInput = this.nameInputRef.nativeElement;
        this.setFocusOnNameInput();
    }
    createGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canCreateGroup === false) {
                return;
            }
            this.pendingStatus = true;
            yield this.addGroupService.createGroupAndAssignDevices(this.formGroupStepOne.value, this.currentGroupId, this.selected);
            this.pendingStatus = false;
            this.resetStepper();
            this.alert.success(gettext('Group created.'));
            this.refresh.emit();
            this.onCancel.emit();
        });
    }
    onSelected(selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    }
    resetStepper() {
        this.stepper.reset();
        this.stepper.selectedIndex = 1;
        this.selected = [];
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    isGroupDetailsStep() {
        return this.stepper.selectedIndex === 0;
    }
    isAssignDeviceStep() {
        return this.stepper.selectedIndex === 1;
    }
    setFocusOnNameInput() {
        if (this.nameInput) {
            this.nameInput.focus();
            this.nameInput.select();
        }
    }
}
AddGroupComponent.ɵfac = function AddGroupComponent_Factory(t) { return new (t || AddGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.DeviceGridService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormBuilder), ɵngcc0.ɵɵdirectiveInject(AddGroupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(SubAssetsService)); };
AddGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddGroupComponent, selectors: [["c8y-add-group"]], viewQuery: function AddGroupComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(C8yStepper, 5);
        ɵngcc0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nameInputRef = _t.first);
    } }, hostBindings: function AddGroupComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function AddGroupComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument)("keydown.escape", function AddGroupComponent_keydown_escape_HostBindingHandler($event) { return ctx.onEscapeKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { refresh: "refresh", currentGroupId: "currentGroupId" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange", onCancel: "onCancel" }, decls: 4, vars: 3, consts: [[4, "ngIf"], ["class", "d-contents", 4, "ngIf", "ngIfElse"], ["stepper", ""], [1, "d-contents"], [3, "ngTemplateOutlet"], ["linear", "", 1, "flex-col", "flex-nowrap", "no-align-items", "fit-h", "c8y-stepper--no-btns", 3, "disableDefaultIcons", "customClasses"], [3, "stepControl", "label"], [1, "p-16", "p-t-0", "flex-no-shrink", "separator-bottom", "col-xs-12"], [1, "row"], [1, "col-md-6", "col-md-offset-3", "col-lg-4", "col-lg-offset-4"], [1, "text-center", "text-medium"], [1, "col-xs-12", "flex-grow", "no-gutter"], [1, "card-inner-scroll", "fit-h"], [1, "card-block", "p-b-0"], [3, "formGroup"], ["translate", ""], ["type", "text", "formControlName", "name", "maxlength", "254", "required", "", 1, "form-control", 3, "placeholder"], ["nameRef", ""], ["translate", "", 4, "ngIf"], ["type", "text", "formControlName", "description", 1, "form-control", 3, "placeholder"], ["class", "alert alert-info max-width-100", "translate", "", 4, "ngIf"], [1, "d-block", "card-footer", "p-24", "separator", 3, "disabled", "labels", "showButtons", "onCancel", "onCustom"], [3, "label"], [1, "col-xs-12", "no-gutter", "flex-grow"], [1, "d-contents", 3, "title", "actionControls", "infiniteScroll", "selectable", "pagination", "refresh", "itemsSelect"], [1, "c8y-empty-state"], ["c8yIcon", "search"], [1, "d-block", "card-footer", "p-24", "separator", 3, "labels", "disabled", "pending", "onCancel", "onCustom"], ["translate", "", 1, "alert", "alert-info", "max-width-100"]], template: function AddGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AddGroupComponent_c8y_title_0_Template, 3, 3, "c8y-title", 0);
        ɵngcc0.ɵɵtemplate(1, AddGroupComponent_div_1_Template, 2, 1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, AddGroupComponent_ng_template_2_Template, 55, 58, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.currentGroupId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.currentGroupId)("ngIfElse", _r2);
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.TitleComponent, ɵngcc3.NgTemplateOutlet, ɵngcc1.C8yStepper, ɵngcc11.CdkStep, ɵngcc1.FormGroupComponent, ɵngcc6.NgControlStatusGroup, ɵngcc6.FormGroupDirective, ɵngcc1.C8yTranslateDirective, ɵngcc6.DefaultValueAccessor, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc6.NgControlStatus, ɵngcc6.FormControlName, ɵngcc6.MaxLengthValidator, ɵngcc6.RequiredValidator, ɵngcc1.MessagesComponent, ɵngcc1.C8yStepperButtons, ɵngcc10.DeviceGridComponent, ɵngcc1.IconDirective, ɵngcc1.MessageDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AddGroupComponent.ctorParameters = () => [
    { type: DeviceGridService },
    { type: FormBuilder },
    { type: AddGroupService },
    { type: AlertService },
    { type: SubAssetsService }
];
AddGroupComponent.propDecorators = {
    currentGroupId: [{ type: Input }],
    refresh: [{ type: Input }],
    onDeviceQueryStringChange: [{ type: Output }],
    onCancel: [{ type: Output }],
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: false },] }],
    nameInputRef: [{ type: ViewChild, args: ['nameRef', { static: false },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddGroupComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-add-group',
                template: "<c8y-title *ngIf=\"!currentGroupId\">\n  {{ 'Add group' | translate }}\n</c8y-title>\n\n<div class=\"d-contents\" *ngIf=\"!currentGroupId; else stepper\">\n  <ng-container [ngTemplateOutlet]=\"stepper\"></ng-container>\n</div>\n\n<ng-template #stepper>\n  <c8y-stepper\n    class=\"flex-col flex-nowrap no-align-items fit-h c8y-stepper--no-btns\"\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    [customClasses]=\"['col-md-6', 'col-md-offset-3', 'm-t-24', 'm-b-40', 'p-0', 'flex-no-shrink']\"\n    linear\n  >\n    <cdk-step [stepControl]=\"formGroupStepOne\" [label]=\"'New group' | translate\">\n      <div class=\"p-16 p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center text-medium\">\n              {{ 'New group' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <div class=\"card-inner-scroll fit-h\">\n          <div class=\"card-block p-b-0\">\n            <div class=\"row\">\n              <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n                <c8y-form-group>\n                  <div [formGroup]=\"formGroupStepOne\">\n                    <c8y-form-group>\n                      <label translate>Name</label>\n                      <input\n                        class=\"form-control\"\n                        type=\"text\"\n                        formControlName=\"name\"\n                        placeholder=\"{{ 'e.g. First floor' | translate }} \"\n                        maxlength=\"254\"\n                        #nameRef\n                        required\n                      />\n                      <c8y-messages>\n                        <c8y-message *ngIf=\"!formGroupStepOne.untouched && !nameRef.value\" translate\n                          >This field is required.</c8y-message\n                        >\n                      </c8y-messages>\n                    </c8y-form-group>\n\n                    <c8y-form-group>\n                      <label translate>Description</label>\n                      <input\n                        class=\"form-control\"\n                        type=\"text\"\n                        formControlName=\"description\"\n                        placeholder=\"{{ 'e.g. first floor devices' | translate }}\"\n                      />\n                    </c8y-form-group>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group>\n                  <div [formGroup]=\"formGroupStepOne\"></div>\n                </c8y-form-group>\n                <div class=\"alert alert-info max-width-100\" translate *ngIf=\"!canAssignDevice\">\n                  You don't have permission to assign devices.\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onCancel)=\"onCancel.emit()\"\n        (onCustom)=\"createGroup()\"\n        [disabled]=\"!canCreateGroup\"\n        [labels]=\"\n          canAssignDevice\n            ? { next: btnLabels.next, cancel: btnLabels.cancel }\n            : { custom: btnLabels.create, cancel: btnLabels.cancel }\n        \"\n        [showButtons]=\"\n          canAssignDevice ? { next: true, cancel: true } : { custom: true, cancel: true }\n        \"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step [label]=\"'Assign devices' | translate\">\n      <div class=\"p-16 p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center text-medium\">\n              {{ 'Assign devices' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-xs-12 no-gutter flex-grow\">\n        <c8y-device-grid\n          [title]=\"'Select target devices' | translate\"\n          [actionControls]=\"[]\"\n          [infiniteScroll]=\"'auto'\"\n          [selectable]=\"'true'\"\n          [pagination]=\"pagination\"\n          (itemsSelect)=\"onSelected($event)\"\n          [refresh]=\"refresh\"\n          class=\"d-contents\"\n        >\n          <div class=\"c8y-empty-state\">\n            <h1 c8yIcon=\"search\"></h1>\n            <div>\n              <p>\n                <strong>{{ 'No matching devices.' | translate }}</strong>\n              </p>\n              <small>{{ 'Refine your search terms' | translate }}</small>\n            </div>\n          </div>\n        </c8y-device-grid>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onCancel)=\"onCancel.emit()\"\n        (onCustom)=\"createGroup()\"\n        [labels]=\"{ custom: btnLabels.create }\"\n        [disabled]=\"!canAssignDevice\"\n        [pending]=\"pendingStatus\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc10.DeviceGridService }, { type: ɵngcc6.FormBuilder }, { type: AddGroupService }, { type: ɵngcc1.AlertService }, { type: SubAssetsService }]; }, { refresh: [{
            type: Input
        }], onDeviceQueryStringChange: [{
            type: Output
        }], onCancel: [{
            type: Output
        }], onEnterKeyDown: [{
            type: HostListener,
            args: ['document:keydown.enter', ['$event']]
        }], onEscapeKeyDown: [{
            type: HostListener,
            args: ['document:keydown.escape', ['$event']]
        }], currentGroupId: [{
            type: Input
        }], stepper: [{
            type: ViewChild,
            args: [C8yStepper, { static: false }]
        }], nameInputRef: [{
            type: ViewChild,
            args: ['nameRef', { static: false }]
        }] }); })();

const ɵ0$1 = [
    {
        path: 'add-group',
        component: AddGroupComponent
    }
];
class AddGroupModule {
}
AddGroupModule.ɵfac = function AddGroupModule_Factory(t) { return new (t || AddGroupModule)(); };
AddGroupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AddGroupModule });
AddGroupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0$1,
            multi: true
        },
        AddGroupService
    ], imports: [[CoreModule, DeviceGridModule, FormsModule, ReactiveFormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddGroupModule, [{
        type: NgModule,
        args: [{
                declarations: [AddGroupComponent],
                imports: [CoreModule, DeviceGridModule, FormsModule, ReactiveFormsModule],
                entryComponents: [AddGroupComponent],
                exports: [AddGroupComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0$1,
                        multi: true
                    },
                    AddGroupService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AddGroupModule, { declarations: function () { return [AddGroupComponent]; }, imports: function () { return [CoreModule, DeviceGridModule, FormsModule, ReactiveFormsModule]; }, exports: function () { return [AddGroupComponent]; } }); })();

class GroupsComponent {
    constructor(permissions, subAssetsService) {
        this.permissions = permissions;
        this.subAssetsService = subAssetsService;
        this.refresh = new EventEmitter();
        this.showAddGroup = false;
        this.filterable = false;
        this.sortable = true;
        this.shouldDisableAddGroup = false;
    }
    ngOnInit() {
        if (!this.permissions.hasRole('ROLE_INVENTORY_READ')) {
            this.sortable = false;
        }
        this.shouldDisableAddGroup = !this.subAssetsService.canCreateGroup();
    }
}
GroupsComponent.ɵfac = function GroupsComponent_Factory(t) { return new (t || GroupsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Permissions), ɵngcc0.ɵɵdirectiveInject(SubAssetsService)); };
GroupsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GroupsComponent, selectors: [["c8y-groups-name"]], decls: 13, vars: 15, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "disabled", "click"], ["c8yIcon", "plus-circle", 1, "m-r-4"], ["translate", ""], [3, "ngClass"], [1, "bottom-drawer"], [3, "refresh", "onCancel", 4, "ngIf"], [1, "content-fullpage", "d-flex", "d-col", 3, "refresh", "filterable", "sortable"], [3, "refresh", "onCancel"]], template: function GroupsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "button", 1);
        ɵngcc0.ɵɵlistener("click", function GroupsComponent_Template_button_click_4_listener() { return ctx.showAddGroup = !ctx.showAddGroup; });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 2);
        ɵngcc0.ɵɵelementStart(7, "span", 3);
        ɵngcc0.ɵɵtext(8, "Add group");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelementStart(10, "div", 5);
        ɵngcc0.ɵɵtemplate(11, GroupsComponent_c8y_add_group_11_Template, 1, 1, "c8y-add-group", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "c8y-sub-assets-grid", 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 9, "Groups"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 11, "Add group"));
        ɵngcc0.ɵɵproperty("disabled", ctx.shouldDisableAddGroup);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(13, _c0, ctx.showAddGroup));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showAddGroup);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("refresh", ctx.refresh)("filterable", ctx.filterable)("sortable", ctx.sortable);
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.ActionBarItemComponent, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective, ɵngcc3.NgClass, ɵngcc3.NgIf, SubAssetsGridComponent, AddGroupComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
GroupsComponent.ctorParameters = () => [
    { type: Permissions },
    { type: SubAssetsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-groups-name',
                template: "<c8y-title>\n  {{ 'Groups' | translate }}\n</c8y-title>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Add group' | translate }}\"\n    (click)=\"showAddGroup = !showAddGroup\"\n    [disabled]=\"shouldDisableAddGroup\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i><span translate>Add group</span>\n  </button>\n</c8y-action-bar-item>\n <!-- TODO: uncomment when help is available \n  <c8y-help src=\"/users-guide/device-management/#grouping-devices\"></c8y-help> \n-->\n\n<div [ngClass]=\"{ drawerOpen: showAddGroup }\">\n  <div class=\"bottom-drawer\">\n    <c8y-add-group\n      [refresh]=\"refresh\"\n      (onCancel)=\"showAddGroup = false\"\n      *ngIf=\"showAddGroup\"\n    ></c8y-add-group>\n  </div>\n</div>\n<c8y-sub-assets-grid\n  [refresh]=\"refresh\"\n  [filterable]=\"filterable\"\n  [sortable]=\"sortable\"\n  class=\"content-fullpage d-flex d-col\"\n></c8y-sub-assets-grid>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Permissions }, { type: SubAssetsService }]; }, null); })();

class AssignDevicesComponent {
    constructor(alert, subAssetsService, inventoryService) {
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.inventoryService = inventoryService;
        this.refresh = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.onShowChildDevices = new EventEmitter();
        this.selectedDevice = new EventEmitter();
        this.pendingStatus = false;
        this.pagination = { pageSize: 20, currentPage: 1 };
        this.selected = [];
        this.canAssignDevice = false;
        this.actionControls = [];
        this.headerActionControls = [];
        this.showChildren = false;
        this.isSelectable = true;
    }
    onEnterKeyDown(event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    }
    onEscapeKeyDown(event) {
        this.onCancel.emit();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setNotIncludedInGroupQuery();
            this.canAssignDevice = yield this.subAssetsService.canAssignDevice({
                id: this.currentGroupId
            });
            this.setHeaderActionControls();
        });
    }
    setNotIncludedInGroupQuery() {
        const notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    }
    setHeaderActionControls() {
        const headerActionControls = [];
        const showChildDevices = {
            type: 'DISPLAY_CHILD_DEVICES_BUTTON',
            text: gettext('Display child devices button'),
            template: this.showDevicesToggle,
            callback: () => {
                this.showChildren = !this.showChildren;
                this.setActionControls(this.showChildren);
            }
        };
        headerActionControls.push(showChildDevices);
        this.headerActionControls = headerActionControls;
    }
    setActionControls(showChildren) {
        const actionControls = [];
        const selectChildrenAction = {
            type: 'SHOW_TARGET_CHILD_DEVICES',
            icon: 'enter-bottom',
            text: gettext('Show target child devices'),
            callback: (asset) => this.selectChildren(asset),
            showIf: (asset) => asset.childDevices.references.length > 0
        };
        if (showChildren) {
            actionControls.push(selectChildrenAction);
        }
        this.actionControls = actionControls;
        this.refresh.emit();
    }
    assignDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canAssignDevice === false) {
                return;
            }
            this.pendingStatus = true;
            try {
                yield this.inventoryService.childAssetsBulkAdd(this.selected, this.currentGroupId);
                this.refresh.emit();
                this.alert.success(gettext('Devices assigned to the group.'));
            }
            catch (error) {
                this.alert.danger(gettext('Could not assign devices to the group'), error);
            }
            this.pendingStatus = false;
            this.selected = [];
            this.onCancel.emit();
        });
    }
    onSelected(selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    }
    selectChildren(asset) {
        this.onShowChildDevices.emit(true);
        this.selectedDevice.emit(asset);
    }
}
AssignDevicesComponent.ɵfac = function AssignDevicesComponent_Factory(t) { return new (t || AssignDevicesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(SubAssetsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.InventoryService)); };
AssignDevicesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AssignDevicesComponent, selectors: [["c8y-assign-devices"]], viewQuery: function AssignDevicesComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c11, 5, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.showDevicesToggle = _t.first);
    } }, hostBindings: function AssignDevicesComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function AssignDevicesComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument)("keydown.escape", function AssignDevicesComponent_keydown_escape_HostBindingHandler($event) { return ctx.onEscapeKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { refresh: "refresh", currentGroupId: "currentGroupId" }, outputs: { onCancel: "onCancel", onShowChildDevices: "onShowChildDevices", selectedDevice: "selectedDevice" }, decls: 31, vars: 36, consts: [[1, "card-block", "flex-no-shrink", "separator-bottom", "col-xs-12", "large-padding", "p-t-24", "p-b-24"], [1, "row"], [1, "col-md-6", "col-md-offset-3", "col-lg-4", "col-lg-offset-4"], [1, "text-center", "text-medium"], [1, "flex-grow", "col-xs-12", "no-gutter", 3, "title", "actionControls", "infiniteScroll", "selectable", "pagination", "refresh", "baseQuery", "headerActionControls", "withChildren", "itemsSelect"], [1, "c8y-empty-state"], ["c8yIcon", "search"], [1, "text-center", "card-footer", "p-24", "separator"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["type", "button", 1, "btn", "btn-primary", 3, "ngClass", "title", "disabled", "click"], ["showDevicesToggle", ""], [1, "c8y-switch"], ["type", "checkbox", 3, "ngModel", "ngModelChange", "click"], ["placement", "bottom", 1, "btn-clean", "m-r-8", 3, "popover", "outsideClick"], ["c8yIcon", "question-circle-o", 1, "text-primary"], ["childDevicesPop", ""], ["translate", ""], [1, "btn", "btn-xs", "btn-icon", "btn-default", "no-pointer"], [1, "text-primary", "dlt-c8y-icon-enter-bottom"]], template: function AssignDevicesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-device-grid", 4);
        ɵngcc0.ɵɵlistener("itemsSelect", function AssignDevicesComponent_Template_c8y_device_grid_itemsSelect_6_listener($event) { return ctx.onSelected($event); });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelement(9, "h1", 6);
        ɵngcc0.ɵɵelementStart(10, "div");
        ɵngcc0.ɵɵelementStart(11, "p");
        ɵngcc0.ɵɵelementStart(12, "strong");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "small");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 7);
        ɵngcc0.ɵɵelementStart(19, "button", 8);
        ɵngcc0.ɵɵlistener("click", function AssignDevicesComponent_Template_button_click_19_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementStart(21, "span");
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "button", 9);
        ɵngcc0.ɵɵlistener("click", function AssignDevicesComponent_Template_button_click_24_listener() { return ctx.assignDevices(); });
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementStart(26, "span");
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(29, AssignDevicesComponent_ng_template_29_Template, 10, 6, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 18, "Assign devices"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(7, 20, "Select devices"))("actionControls", ctx.actionControls)("infiniteScroll", "auto")("selectable", ctx.isSelectable)("pagination", ctx.pagination)("refresh", ctx.refresh)("baseQuery", ctx.baseQuery)("headerActionControls", ctx.headerActionControls)("withChildren", true);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 22, "No matching devices."));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 24, "Refine your search terms"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 26, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 28, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 30, "Assign"));
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(34, _c12, ctx.pendingStatus))("disabled", ctx.selected.length === 0 || !ctx.canAssignDevice);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(28, 32, "Assign"));
    } }, directives: [ɵngcc10.DeviceGridComponent, ɵngcc1.IconDirective, ɵngcc3.NgClass, ɵngcc6.CheckboxControlValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc7.PopoverDirective, ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AssignDevicesComponent.ctorParameters = () => [
    { type: AlertService },
    { type: SubAssetsService },
    { type: InventoryService }
];
AssignDevicesComponent.propDecorators = {
    currentGroupId: [{ type: Input }],
    refresh: [{ type: Input }],
    onCancel: [{ type: Output }],
    onShowChildDevices: [{ type: Output }],
    selectedDevice: [{ type: Output }],
    showDevicesToggle: [{ type: ViewChild, args: ['showDevicesToggle', { read: TemplateRef },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssignDevicesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-assign-devices',
                template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-medium\">\n        {{ 'Assign devices' | translate }}\n      </h4>\n    </div>\n  </div>\n</div>\n<c8y-device-grid\n  [title]=\"'Select devices' | translate\"\n  [actionControls]=\"actionControls\"\n  [infiniteScroll]=\"'auto'\"\n  [selectable]=\"isSelectable\"\n  [pagination]=\"pagination\"\n  (itemsSelect)=\"onSelected($event)\"\n  [refresh]=\"refresh\"\n  [baseQuery]=\"baseQuery\"\n  [headerActionControls]=\"headerActionControls\"\n  [withChildren]=\"true\"\n  class=\"flex-grow col-xs-12 no-gutter\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    (click)=\"onCancel.emit()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    (click)=\"assignDevices()\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    title=\"{{ 'Assign' | translate }}\"\n    [disabled]=\"selected.length === 0 || !canAssignDevice\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n\n<ng-template #showDevicesToggle let-control=\"headerActionControl\">\n  <label class=\"c8y-switch\">\n    <input type=\"checkbox\" [(ngModel)]=\"showChildren\" (click)=\"control.callback()\" />\n    <span></span>\n    <span>{{ control.text | translate }}</span>\n  </label>\n  <button\n    class=\"btn-clean m-r-8\"\n    [popover]=\"childDevicesPop\"\n    placement=\"bottom\"\n    [outsideClick]=\"true\"\n  >\n    <i c8yIcon=\"question-circle-o\" class=\"text-primary\"></i>\n  </button>\n  <ng-template #childDevicesPop>\n    <span translate>\n      Displays the button\n      <button class=\"btn btn-xs btn-icon btn-default no-pointer\">\n        <i class=\"text-primary dlt-c8y-icon-enter-bottom\"></i>\n      </button>\n      next to target devices with children. Clicking it displays a list with all child devices of\n      the selected target device.\n    </span>\n  </ng-template>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AlertService }, { type: SubAssetsService }, { type: ɵngcc5.InventoryService }]; }, { refresh: [{
            type: Input
        }], onCancel: [{
            type: Output
        }], onShowChildDevices: [{
            type: Output
        }], selectedDevice: [{
            type: Output
        }], onEnterKeyDown: [{
            type: HostListener,
            args: ['document:keydown.enter', ['$event']]
        }], onEscapeKeyDown: [{
            type: HostListener,
            args: ['document:keydown.escape', ['$event']]
        }], currentGroupId: [{
            type: Input
        }], showDevicesToggle: [{
            type: ViewChild,
            args: ['showDevicesToggle', { read: TemplateRef }]
        }] }); })();

class AssignChildDevicesComponent {
    constructor(alert, subAssetsService, inventoryService) {
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.inventoryService = inventoryService;
        this.onCancel = new EventEmitter();
        this.refresh = new EventEmitter();
        this.selected = [];
        this.canAssignDevice = false;
        this.pendingStatus = false;
    }
    onEnterKeyDown(event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    }
    onEscapeKeyDown(event) {
        this.onCancel.emit();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setNotIncludedInGroupQuery();
            this.canAssignDevice = yield this.subAssetsService.canAssignDevice({
                id: this.currentGroupId
            });
        });
    }
    setNotIncludedInGroupQuery() {
        const notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    }
    assignDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canAssignDevice === false) {
                return;
            }
            this.pendingStatus = true;
            try {
                yield this.inventoryService.childAssetsBulkAdd(this.selected, this.currentGroupId);
                this.refresh.emit();
                this.alert.success(gettext('Child devices assigned to the group.'));
            }
            catch (error) {
                this.alert.danger(gettext('Could not assign child devices to the group'), error);
            }
            this.pendingStatus = false;
            this.selected = [];
            this.onCancel.emit();
        });
    }
    onSelected(selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    }
}
AssignChildDevicesComponent.ɵfac = function AssignChildDevicesComponent_Factory(t) { return new (t || AssignChildDevicesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(SubAssetsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.InventoryService)); };
AssignChildDevicesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AssignChildDevicesComponent, selectors: [["c8y-assign-child-devices"]], hostBindings: function AssignChildDevicesComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.enter", function AssignChildDevicesComponent_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument)("keydown.escape", function AssignChildDevicesComponent_keydown_escape_HostBindingHandler($event) { return ctx.onEscapeKeyDown($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { refresh: "refresh", currentGroupId: "currentGroupId", parentDevice: "parentDevice" }, outputs: { onCancel: "onCancel" }, decls: 21, vars: 31, consts: [[1, "card-block", "flex-no-shrink", "separator-bottom", "col-xs-12", "large-padding", "p-t-24", "p-b-24"], [1, "row"], [1, "col-md-6", "col-md-offset-3", "col-lg-4", "col-lg-offset-4"], [1, "text-center", "text-medium"], [1, "d-flex", "d-col", "no-align-items", "fit-h"], [1, "d-contents", 3, "title", "emptyStateText", "refresh", "actionControls", "selectable", "parent-group", "baseQuery", "itemsSelect"], [1, "text-center", "card-footer", "p-24", "separator"], ["type", "button", 1, "btn", "btn-default", 3, "title", "click"], ["type", "button", 1, "btn", "btn-primary", 3, "ngClass", "title", "disabled", "click"]], template: function AssignChildDevicesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "c8y-sub-assets-grid", 5);
        ɵngcc0.ɵɵlistener("itemsSelect", function AssignChildDevicesComponent_Template_c8y_sub_assets_grid_itemsSelect_7_listener($event) { return ctx.onSelected($event); });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "button", 7);
        ɵngcc0.ɵɵlistener("click", function AssignChildDevicesComponent_Template_button_click_11_listener() { return ctx.onCancel.emit(); });
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementStart(13, "span");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 8);
        ɵngcc0.ɵɵlistener("click", function AssignChildDevicesComponent_Template_button_click_16_listener() { return ctx.assignDevices(); });
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementStart(18, "span");
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 14, "Assign child devices"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(8, 16, "Select child devices"))("emptyStateText", ɵngcc0.ɵɵpipeBind1(9, 18, "All child devices are already assigned to the group"))("refresh", ctx.refresh)("actionControls", ɵngcc0.ɵɵpureFunction0(28, _c9))("selectable", true)("parent-group", ctx.parentDevice)("baseQuery", ctx.baseQuery);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 20, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 22, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 24, "Assign"));
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(29, _c12, ctx.pendingStatus))("disabled", ctx.selected.length === 0 || !ctx.canAssignDevice);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 26, "Assign"));
    } }, directives: [SubAssetsGridComponent, ɵngcc3.NgClass], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AssignChildDevicesComponent.ctorParameters = () => [
    { type: AlertService },
    { type: SubAssetsService },
    { type: InventoryService }
];
AssignChildDevicesComponent.propDecorators = {
    currentGroupId: [{ type: Input }],
    parentDevice: [{ type: Input }],
    onCancel: [{ type: Output }],
    refresh: [{ type: Input }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssignChildDevicesComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-assign-child-devices',
                template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-medium\">\n        {{ 'Assign child devices' | translate }}\n      </h4>\n    </div>\n  </div>\n</div>\n\n<div class=\"d-flex d-col no-align-items fit-h\">\n  <c8y-sub-assets-grid\n    [title]=\"'Select child devices' | translate\"\n    [emptyStateText]=\"'All child devices are already assigned to the group' | translate\"\n    [refresh]=\"refresh\"\n    [actionControls]=\"[]\"\n    [selectable]=\"true\"\n    [parent-group]=\"parentDevice\"\n    [baseQuery]=\"baseQuery\"\n    (itemsSelect)=\"onSelected($event)\"\n    class=\"d-contents\"\n  >\n  </c8y-sub-assets-grid>\n</div>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    (click)=\"onCancel.emit()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    (click)=\"assignDevices()\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    title=\"{{ 'Assign' | translate }}\"\n    [disabled]=\"selected.length === 0 || !canAssignDevice\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AlertService }, { type: SubAssetsService }, { type: ɵngcc5.InventoryService }]; }, { onCancel: [{
            type: Output
        }], refresh: [{
            type: Input
        }], onEnterKeyDown: [{
            type: HostListener,
            args: ['document:keydown.enter', ['$event']]
        }], onEscapeKeyDown: [{
            type: HostListener,
            args: ['document:keydown.escape', ['$event']]
        }], currentGroupId: [{
            type: Input
        }], parentDevice: [{
            type: Input
        }] }); })();

const ɵ0 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
class SubAssetsModule {
}
SubAssetsModule.ɵfac = function SubAssetsModule_Factory(t) { return new (t || SubAssetsModule)(); };
SubAssetsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SubAssetsModule });
SubAssetsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        SubAssetsService
    ], imports: [[CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SubAssetsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SubAssetsComponent,
                    SubAssetsGridComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    GroupInfoComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent,
                    AssignDevicesComponent,
                    AssignChildDevicesComponent
                ],
                imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
                entryComponents: [
                    SubAssetsComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent
                ],
                exports: [],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    SubAssetsService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SubAssetsModule, { declarations: function () { return [SubAssetsComponent, SubAssetsGridComponent, AssetTypeCellRendererComponent, GroupsComponent, GroupInfoComponent, DeleteAssetsModalComponent, UnassignModalComponent, AssignDevicesComponent, AssignChildDevicesComponent]; }, imports: function () { return [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AddGroupComponent, AddGroupModule, AddGroupService, AssetTypeCellRendererComponent, AssetTypeGridColumn, AssignChildDevicesComponent, AssignDevicesComponent, DeleteAssetsModalComponent, GroupInfoComponent, GroupsComponent, SubAssetsComponent, SubAssetsGridComponent, SubAssetsModule, SubAssetsService, UnassignModalComponent, AssetTypeCellRendererComponent as ɵa, DeleteAssetsModalComponent as ɵb, UnassignModalComponent as ɵc, AddGroupModule as ɵd, AddGroupComponent as ɵe, AddGroupService as ɵf };

//# sourceMappingURL=c8y-ngx-components-sub-assets.js.map