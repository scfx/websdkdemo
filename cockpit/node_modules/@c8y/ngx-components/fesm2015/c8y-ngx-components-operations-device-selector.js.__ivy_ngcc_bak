import { EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';
import { TypeDeviceGridColumn, StatusDeviceGridColumn, NameDeviceGridColumn, ModelDeviceGridColumn, GroupDeviceGridColumn, RegistrationDateDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridComponent, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { FilteringActionType, CoreModule } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';

class DeviceSelectorComponent {
    constructor() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe((types) => {
                this.deviceGrid.updateFiltering([this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
}
DeviceSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-selector',
                template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n"
            },] }
];
DeviceSelectorComponent.propDecorators = {
    deviceGrid: [{ type: ViewChild, args: [DeviceGridComponent, { static: true },] }],
    deviceTypes: [{ type: Input }],
    onDeviceQueryStringChange: [{ type: Output }]
};

/**
 * This module provides a component for selecting devices based on filters.
 */
class DeviceSelectorModule {
}
DeviceSelectorModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, DeviceGridModule],
                declarations: [DeviceSelectorComponent],
                exports: [DeviceSelectorComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceSelectorComponent, DeviceSelectorModule };
//# sourceMappingURL=c8y-ngx-components-operations-device-selector.js.map
