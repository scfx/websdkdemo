import { Component, Input, Injectable, EventEmitter, Output, Directive, forwardRef, ElementRef, Injector, ViewChild, ChangeDetectorRef, ViewChildren, Optional, NgModule } from '@angular/core';
import { ControlContainer, NgModelGroup, NG_VALIDATORS, NgForm, ReactiveFormsModule } from '@angular/forms';
import { get, omit, isEmpty, some, isEqual, assign, cloneDeep, unset, set, has, reject } from 'lodash-es';
import { __awaiter } from 'tslib';
import { FetchClient, InventoryService } from '@c8y/client';
import { BehaviorSubject, merge, Subject } from 'rxjs';
import { Router, RouterModule } from '@angular/router';
import { AlertService, gettext, AppStateService, DropAreaComponent, ContextRouteComponent, ViewContext, CoreModule, FormsModule, DropAreaModule, DeviceStatusModule, HOOK_ROUTE } from '@c8y/ngx-components';
import { UpgradeComponent, downgradeComponent } from '@angular/upgrade/static';
import { NestedTreeControl, CdkTreeModule } from '@angular/cdk/tree';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { get as get$1, find, assign as assign$1, findIndex, omit as omit$1, pick, toInteger, unset as unset$1, set as set$1, clone } from 'lodash';
import { TranslateService } from '@ngx-translate/core';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { map, takeUntil } from 'rxjs/operators';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import * as angular from 'angular';
import { registerNgModule } from '@c8y/ng1-modules';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from 'ngx-bootstrap/collapse';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@c8y/client';
import * as ɵngcc6 from '@angular/router';
import * as ɵngcc7 from 'ngx-bootstrap/dropdown';
import * as ɵngcc8 from 'ngx-bootstrap/buttons';
import * as ɵngcc9 from '@ngx-translate/core';
import * as ɵngcc10 from 'ngx-bootstrap/popover';
import * as ɵngcc11 from '@angular/cdk/tree';
import * as ɵngcc12 from 'ngx-bootstrap/tooltip';

function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_19_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 35);
    ɵngcc0.ɵɵelementStart(1, "i", 36);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_19_Template_i_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const i_r5 = ɵngcc0.ɵɵnextContext().index; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.removeCustomAction(i_r5); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_20_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 35);
    ɵngcc0.ɵɵelementStart(1, "i", 37);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_20_Template_i_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(3); return ctx_r12.addHeader(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵelementStart(1, "div", 27);
    ɵngcc0.ɵɵelementStart(2, "c8y-form-group", 20);
    ɵngcc0.ɵɵelementStart(3, "label", 28);
    ɵngcc0.ɵɵtext(4, "Key");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 21);
    ɵngcc0.ɵɵelementStart(6, "input", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_Template_input_ngModelChange_6_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r15); const header_r4 = restoredCtx.$implicit; return header_r4.key = $event; });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 27);
    ɵngcc0.ɵɵelementStart(9, "c8y-form-group", 20);
    ɵngcc0.ɵɵelementStart(10, "label", 28);
    ɵngcc0.ɵɵtext(11, "Value");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 21);
    ɵngcc0.ɵɵelementStart(13, "input", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_Template_input_ngModelChange_13_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r15); const header_r4 = restoredCtx.$implicit; return header_r4.value = $event; });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 31);
    ɵngcc0.ɵɵelementStart(16, "div", 32);
    ɵngcc0.ɵɵelementStart(17, "label", 33);
    ɵngcc0.ɵɵtext(18, "\u00A0");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(19, OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_19_Template, 2, 0, "button", 34);
    ɵngcc0.ɵɵtemplate(20, OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_button_20_Template, 2, 0, "button", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const header_r4 = ctx.$implicit;
    const i_r5 = ctx.index;
    const isLast_r6 = ctx.last;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModelGroup", i_r5);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(7, 7, "e.g."), " Content-Type");
    ɵngcc0.ɵɵproperty("ngModel", header_r4.key);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(14, 9, "e.g."), " application/json");
    ɵngcc0.ɵɵproperty("ngModel", header_r4.value);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.customAction.headers.length !== 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", isLast_r6);
} }
function OpcuaDeviceProtocolMappingCustomAction_div_12_div_30_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "The following placeholders are available:"), " ", ctx_r3.placeholders, " ");
} }
function OpcuaDeviceProtocolMappingCustomAction_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "fieldset", 12);
    ɵngcc0.ɵɵelementStart(2, "div", 13);
    ɵngcc0.ɵɵtext(3, "Headers");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 14);
    ɵngcc0.ɵɵelementStart(5, "div", 15);
    ɵngcc0.ɵɵelementStart(6, "label", 16);
    ɵngcc0.ɵɵtext(7, "Key");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 15);
    ɵngcc0.ɵɵelementStart(9, "label", 16);
    ɵngcc0.ɵɵtext(10, "Value");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, OpcuaDeviceProtocolMappingCustomAction_div_12_div_11_Template, 21, 11, "div", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 13);
    ɵngcc0.ɵɵtext(13, "Action");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "div", 18);
    ɵngcc0.ɵɵelementStart(15, "div", 19);
    ɵngcc0.ɵɵelementStart(16, "c8y-form-group", 20);
    ɵngcc0.ɵɵelementStart(17, "label");
    ɵngcc0.ɵɵelementStart(18, "span", 16);
    ɵngcc0.ɵɵtext(19, "Endpoint");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "div", 21);
    ɵngcc0.ɵɵelementStart(21, "input", 22);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMappingCustomAction_div_12_Template_input_ngModelChange_21_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.customAction.endpoint = $event; });
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "div", 19);
    ɵngcc0.ɵɵelementStart(24, "c8y-form-group", 20);
    ɵngcc0.ɵɵelementStart(25, "label", 16);
    ɵngcc0.ɵɵtext(26, "Body template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "textarea", 23, 24);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMappingCustomAction_div_12_Template_textarea_ngModelChange_27_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.customAction.bodyTemplate = $event; });
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(30, OpcuaDeviceProtocolMappingCustomAction_div_12_div_30_Template, 3, 4, "div", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(28);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(11);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.headers)("ngForTrackBy", ctx_r0.trackByIndex);
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(22, 8, "e.g."), " http://localhost:1080/cucumber");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.customAction.endpoint);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "(", ɵngcc0.ɵɵpipeBind1(29, 10, "required"), ")");
    ɵngcc0.ɵɵproperty("heightPerRow", 40)("ngModel", ctx_r0.customAction.bodyTemplate);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", _r2.untouched || !_r2.errors);
} }
function OpcuaAddressSpaceDetailComponent_tr_23_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, item_r2.value), " ");
} }
function OpcuaAddressSpaceDetailComponent_tr_23_td_4_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 13);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceDetailComponent_tr_23_td_4_a_1_Template_a_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const value_r8 = restoredCtx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(3); return ctx_r9.navigateTo(value_r8); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const value_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, value_r8), "");
} }
function OpcuaAddressSpaceDetailComponent_tr_23_td_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 11);
    ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceDetailComponent_tr_23_td_4_a_1_Template, 3, 3, "a", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", item_r2.value);
} }
function OpcuaAddressSpaceDetailComponent_tr_23_td_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r2.value, " ");
} }
function OpcuaAddressSpaceDetailComponent_tr_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, OpcuaAddressSpaceDetailComponent_tr_23_td_3_Template, 3, 3, "td", 9);
    ɵngcc0.ɵɵtemplate(4, OpcuaAddressSpaceDetailComponent_tr_23_td_4_Template, 2, 1, "td", 9);
    ɵngcc0.ɵɵtemplate(5, OpcuaAddressSpaceDetailComponent_tr_23_td_5_Template, 2, 1, "td", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r2.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.key === "absolutePaths");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.key === "ancestorNodeIds");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.key !== "absolutePaths" && item_r2.key !== "ancestorNodeIds");
} }
function OpcuaAddressSpaceDetailComponent_tr_45_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r13 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r13.referenceLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r13.targetLabel);
} }
const _c0 = function (a0, a1) { return { fadeInRightBig: a0, fadeOutRightBig: a1 }; };
const _c1 = ["variableForm"];
const _c2 = ["browsePathModel"];
function OpcuaDeviceProtocolMapping_small_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 19);
    ɵngcc0.ɵɵpipe(1, "json");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r0.mapping.browsePath));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r0.mapping.browsePath));
} }
function OpcuaDeviceProtocolMapping_div_26_div_12_opcua_address_space_tree_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "opcua-address-space-tree", 48);
    ɵngcc0.ɵɵlistener("selectedNode", function OpcuaDeviceProtocolMapping_div_26_div_12_opcua_address_space_tree_1_Template_opcua_address_space_tree_selectedNode_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); ɵngcc0.ɵɵnextContext(2); const _r3 = ɵngcc0.ɵɵreference(7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); ctx_r8.updateBrowsePath($event); return _r3.hide(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("node", ctx_r7.referencedNode)("moId", ctx_r7.referencedServerId);
} }
function OpcuaDeviceProtocolMapping_div_26_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 46);
    ɵngcc0.ɵɵtemplate(1, OpcuaDeviceProtocolMapping_div_26_div_12_opcua_address_space_tree_1_Template, 1, 2, "opcua-address-space-tree", 47);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.showAddressSpaceTree());
} }
function OpcuaDeviceProtocolMapping_div_26_div_44_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 49);
    ɵngcc0.ɵɵelement(1, "opcua-device-protocol-data-reporting", 50);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("model", ctx_r6.mapping);
} }
const _c3 = function () { return ["2:Node1", "2:SubNode1"]; };
function OpcuaDeviceProtocolMapping_div_26_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 20, 21);
    ɵngcc0.ɵɵelementStart(2, "div", 22);
    ɵngcc0.ɵɵelementStart(3, "c8y-form-group", 23);
    ɵngcc0.ɵɵelementStart(4, "label", 24);
    ɵngcc0.ɵɵtext(5, "Path");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 25, 26);
    ɵngcc0.ɵɵelementStart(8, "input", 27, 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMapping_div_26_Template_input_ngModelChange_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.browsePath = $event; })("change", function OpcuaDeviceProtocolMapping_div_26_Template_input_change_8_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.updateBrowsePathInput(); })("focus", function OpcuaDeviceProtocolMapping_div_26_Template_input_focus_8_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.setTreeFromRefNode(); });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵpipe(11, "json");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, OpcuaDeviceProtocolMapping_div_26_div_12_Template, 2, 1, "div", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "c8y-messages");
    ɵngcc0.ɵɵelement(14, "c8y-message", 30);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelement(16, "c8y-message", 31);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "c8y-form-group", 32);
    ɵngcc0.ɵɵelementStart(19, "label", 24);
    ɵngcc0.ɵɵtext(20, "Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 33);
    ɵngcc0.ɵɵelementStart(22, "input", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMapping_div_26_Template_input_ngModelChange_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.nodeDisplayName = $event; })("change", function OpcuaDeviceProtocolMapping_div_26_Template_input_change_22_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.updateDisplayname(); });
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "div", 35);
    ɵngcc0.ɵɵelementStart(25, "c8y-form-group", 36);
    ɵngcc0.ɵɵelementStart(26, "label");
    ɵngcc0.ɵɵelementStart(27, "span", 24);
    ɵngcc0.ɵɵtext(28, "Data reporting");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(29, "div", 33);
    ɵngcc0.ɵɵelementStart(30, "label", 37);
    ɵngcc0.ɵɵpipe(31, "translate");
    ɵngcc0.ɵɵelementStart(32, "input", 38);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMapping_div_26_Template_input_ngModelChange_32_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.dataReporting = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(33, "span");
    ɵngcc0.ɵɵelementStart(34, "span");
    ɵngcc0.ɵɵtext(35);
    ɵngcc0.ɵɵpipe(36, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(37, "label", 37);
    ɵngcc0.ɵɵpipe(38, "translate");
    ɵngcc0.ɵɵelementStart(39, "input", 39);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMapping_div_26_Template_input_ngModelChange_39_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.dataReporting = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(40, "span");
    ɵngcc0.ɵɵelementStart(41, "span");
    ɵngcc0.ɵɵtext(42);
    ɵngcc0.ɵɵpipe(43, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(44, OpcuaDeviceProtocolMapping_div_26_div_44_Template, 2, 1, "div", 40);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(45, "c8y-object-mapping", 41);
    ɵngcc0.ɵɵelementStart(46, "div", 42);
    ɵngcc0.ɵɵelement(47, "opcua-device-protocol-mapping-customaction", 43);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(48, "button", 44);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMapping_div_26_Template_button_click_48_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.cancel(); });
    ɵngcc0.ɵɵpipe(49, "translate");
    ɵngcc0.ɵɵtext(50);
    ɵngcc0.ɵɵpipe(51, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(52, "button", 45);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMapping_div_26_Template_button_click_52_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.save(); });
    ɵngcc0.ɵɵpipe(53, "translate");
    ɵngcc0.ɵɵtext(54);
    ɵngcc0.ɵɵpipe(55, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(1);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModelGroup", ctx_r1.index);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("status", !ctx_r1.isBrowsePathUniq ? "error" : "");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("insideClick", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate2("placeholder", "", ɵngcc0.ɵɵpipeBind1(10, 29, "e.g."), " ", ɵngcc0.ɵɵpipeBind1(11, 31, ɵngcc0.ɵɵpureFunction0(55, _c3)), "");
    ɵngcc0.ɵɵproperty("getMappings", ctx_r1.getMappings)("model", ctx_r1.mapping)("ngModel", ctx_r1.browsePath);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(15, 33, "Must be a valid array of strings."));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(17, 35, "Variable with this path is already added."));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(23, 37, "e.g. childDevice2"), " ");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.nodeDisplayName);
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(31, 39, "Default"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("name", ctx_r1.dataReportingName);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.dataReporting);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(36, 41, "Default"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(38, 43, "Custom"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("name", ctx_r1.dataReportingName);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.dataReporting);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(43, 45, "Custom"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.dataReporting === "custom");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mapping", ctx_r1.mapping)("hideAutoObserve", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customAction", ctx_r1.customAction);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(49, 47, "Cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(51, 49, "Cancel"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(53, 51, "Save"));
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.canSave(_r2));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(55, 53, "Save"), " ");
} }
const _c4 = function (a0) { return { expanded: a0 }; };
const _c5 = function (a0) { return { active: a0 }; };
function OpcuaDeviceProtocolDetailComponent_c8y_title_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-title");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.model.name);
} }
function OpcuaDeviceProtocolDetailComponent_form_2_div_7_opcua_device_protocol_mapping_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "opcua-device-protocol-mapping", 22);
    ɵngcc0.ɵɵlistener("onAction", function OpcuaDeviceProtocolDetailComponent_form_2_div_7_opcua_device_protocol_mapping_1_Template_opcua_device_protocol_mapping_onAction_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(3); return ctx_r8.actionHandler($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const resource_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("index", i_r7)("referencedServerId", ctx_r5.model.referencedServerId)("referencedRootNodeId", ctx_r5.model.referencedRootNodeId)("resource", ctx_r5.getStructuredResource(resource_r6))("getParentAttr", ctx_r5.getParentAttr);
} }
function OpcuaDeviceProtocolDetailComponent_form_2_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵtemplate(1, OpcuaDeviceProtocolDetailComponent_form_2_div_7_opcua_device_protocol_mapping_1_Template, 1, 5, "opcua-device-protocol-mapping", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.getMapping())("ngForTrackBy", ctx_r3.trackByIndex);
} }
function OpcuaDeviceProtocolDetailComponent_form_2_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "h1", 24);
    ɵngcc0.ɵɵelementStart(2, "p", 7);
    ɵngcc0.ɵɵtext(3, "No variables to display. Click below to add.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaDeviceProtocolDetailComponent_form_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 2, 3);
    ɵngcc0.ɵɵelement(2, "opcua-device-protocol-description", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelementStart(4, "div", 6);
    ɵngcc0.ɵɵelementStart(5, "h4", 7);
    ɵngcc0.ɵɵtext(6, "Variables");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, OpcuaDeviceProtocolDetailComponent_form_2_div_7_Template, 2, 2, "div", 8);
    ɵngcc0.ɵɵelementStart(8, "div", 9);
    ɵngcc0.ɵɵtemplate(9, OpcuaDeviceProtocolDetailComponent_form_2_div_9_Template, 4, 0, "div", 10);
    ɵngcc0.ɵɵelementStart(10, "button", 11);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolDetailComponent_form_2_Template_button_click_10_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.addVariable(); });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "i", 12);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 5);
    ɵngcc0.ɵɵelementStart(16, "div", 6);
    ɵngcc0.ɵɵelementStart(17, "h4", 7);
    ɵngcc0.ɵɵtext(18, "Data reporting");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "div", 13);
    ɵngcc0.ɵɵelement(20, "opcua-device-protocol-data-reporting", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 15);
    ɵngcc0.ɵɵelementStart(22, "div", 6);
    ɵngcc0.ɵɵelementStart(23, "h4", 7);
    ɵngcc0.ɵɵtext(24, "Auto apply constraints");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "div", 16);
    ɵngcc0.ɵɵelement(26, "opcua-auto-apply", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "span");
    ɵngcc0.ɵɵelementStart(28, "div", 17);
    ɵngcc0.ɵɵelementStart(29, "div", 18);
    ɵngcc0.ɵɵelementStart(30, "button", 19);
    ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolDetailComponent_form_2_Template_button_click_30_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.save(); });
    ɵngcc0.ɵɵpipe(31, "translate");
    ɵngcc0.ɵɵtext(32, " Save ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(1);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("model", ctx_r1.model);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.model.mappings.length > 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.model.mappings.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 10, "Add variable"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 12, "Add variable"), " ");
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("groupName", "subscription")("model", ctx_r1.model);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("model", ctx_r1.model);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(31, 14, "Save"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.canSave(_r2));
} }
function OpcuaDeviceProtocolDataReportingComponent_label_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "input", 16);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_label_3_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.subscription.type = $event; })("change", function OpcuaDeviceProtocolDataReportingComponent_label_3_Template_input_change_2_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateModel(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const mechanism_r4 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, mechanism_r4.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("name", ctx_r0.subscriptionTypeName);
    ɵngcc0.ɵɵproperty("value", mechanism_r4.value)("ngModel", ctx_r0.subscription.type);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, mechanism_r4.label));
} }
function OpcuaDeviceProtocolDataReportingComponent_label_38_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "input", 17);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_label_38_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.subscriptionParameters.discardOldest = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const discardOption_r8 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, discardOption_r8.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", discardOption_r8.value)("ngModel", ctx_r1.subscriptionParameters.discardOldest)("required", ctx_r1.requireSubscription);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, discardOption_r8.label));
} }
function OpcuaDeviceProtocolDataReportingComponent_label_44_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "input", 18);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_label_44_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.subscriptionParameters.dataChangeTrigger = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const trigger_r11 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, trigger_r11.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", trigger_r11.value)("ngModel", ctx_r2.subscriptionParameters.dataChangeTrigger)("required", ctx_r2.requireSubscription);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, trigger_r11.label));
} }
function OpcuaDeviceProtocolDataReportingComponent_label_49_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "input", 19);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_label_49_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.subscriptionParameters.deadbandType = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deadbandFilter_r14 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 5, deadbandFilter_r14.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", deadbandFilter_r14.value)("ngModel", ctx_r3.subscriptionParameters.deadbandType)("required", ctx_r3.requireSubscription);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 7, deadbandFilter_r14.label));
} }
function OpcuaAddressSpaceComponent_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceComponent_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.searchNodes(); });
    ɵngcc0.ɵɵelement(1, "i", 14);
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaAddressSpaceComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.clearSearch(); });
    ɵngcc0.ɵɵelement(1, "i", 16);
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaAddressSpaceComponent_div_10_p_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵelementStart(1, "em");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4, "\u00A0 ");
    ɵngcc0.ɵɵelementStart(5, "span", 19);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 2, ctx_r10.nodeList.resultLabel));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.nodeList == null ? null : ctx_r10.nodeList.length);
} }
function OpcuaAddressSpaceComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceComponent_div_10_p_1_Template, 7, 4, "p", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.searchInProgress);
} }
function OpcuaAddressSpaceComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelement(2, "div", 22);
    ɵngcc0.ɵɵelement(3, "div", 23);
    ɵngcc0.ɵɵelement(4, "div", 24);
    ɵngcc0.ɵɵelement(5, "div", 25);
    ɵngcc0.ɵɵelement(6, "div", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c6 = function () { return { "list-group-item flex-row": true }; };
function OpcuaAddressSpaceComponent_div_12_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 31);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceComponent_div_12_div_1_button_1_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r15); const nodeItem_r13 = restoredCtx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.selectNode(nodeItem_r13); });
    ɵngcc0.ɵɵelementStart(1, "div", 32);
    ɵngcc0.ɵɵelement(2, "i", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 34);
    ɵngcc0.ɵɵelementStart(4, "span", 35);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const nodeItem_r13 = ctx.$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction0(4, _c6));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r12.getIcon(nodeItem_r13.nodeClassName));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(nodeItem_r13.nodeId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", nodeItem_r13.displayName, " ");
} }
function OpcuaAddressSpaceComponent_div_12_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceComponent_div_12_div_1_button_1_Template, 7, 5, "button", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r11.nodeList);
} }
function OpcuaAddressSpaceComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 27);
    ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceComponent_div_12_div_1_Template, 2, 1, "div", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.isSearch && !ctx_r4.loading);
} }
function OpcuaAddressSpaceComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 27);
    ɵngcc0.ɵɵelementStart(1, "opcua-address-space-tree", 36);
    ɵngcc0.ɵɵlistener("selectedNode", function OpcuaAddressSpaceComponent_div_13_Template_opcua_address_space_tree_selectedNode_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.toggleCurrentNode($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("focusEmitter", ctx_r5.focusStatus);
} }
const _c7 = ["opcuaConfigForm"];
function OpcuaServerConfigComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelement(1, "h1", 3);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵelementStart(3, "h3");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "p");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, "No server to display."));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 4, "Add or select a server."));
} }
function OpcuaServerConfigComponent_form_1_option_70_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const mode_r9 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", mode_r9);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(mode_r9);
} }
function OpcuaServerConfigComponent_form_1_div_72_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 33);
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵelementStart(2, "label", 48);
    ɵngcc0.ɵɵtext(3, "Security policy");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 49);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_72_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.model.config.securityMode = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("readonly", true)("ngModel", ctx_r4.model.config.securityMode);
} }
function OpcuaServerConfigComponent_form_1_div_73_select_5_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const policy_r15 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", policy_r15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(policy_r15);
} }
function OpcuaServerConfigComponent_form_1_div_73_select_5_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "select", 51);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_73_select_5_Template_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.model.config.securityMode = $event; });
    ɵngcc0.ɵɵtemplate(1, OpcuaServerConfigComponent_form_1_div_73_select_5_option_1_Template, 2, 2, "option", 38);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r12.model.config.securityMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.securityPolicies.sign);
} }
function OpcuaServerConfigComponent_form_1_div_73_select_6_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const policy_r19 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", policy_r19);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(policy_r19);
} }
function OpcuaServerConfigComponent_form_1_div_73_select_6_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "select", 51);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_73_select_6_Template_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.model.config.securityMode = $event; });
    ɵngcc0.ɵɵtemplate(1, OpcuaServerConfigComponent_form_1_div_73_select_6_option_1_Template, 2, 2, "option", 38);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r13.model.config.securityMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.securityPolicies.sign_enc);
} }
function OpcuaServerConfigComponent_form_1_div_73_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 33);
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵelementStart(2, "label", 48);
    ɵngcc0.ɵɵtext(3, "Security policy");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 36);
    ɵngcc0.ɵɵtemplate(5, OpcuaServerConfigComponent_form_1_div_73_select_5_Template, 2, 2, "select", 50);
    ɵngcc0.ɵɵtemplate(6, OpcuaServerConfigComponent_form_1_div_73_select_6_Template, 2, 2, "select", 50);
    ɵngcc0.ɵɵelement(7, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.currentSecMode === ctx_r5.SIGN);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.currentSecMode === ctx_r5.SIGN_ENC);
} }
function OpcuaServerConfigComponent_form_1_option_79_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const auth_r22 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", auth_r22);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, auth_r22.value));
} }
function OpcuaServerConfigComponent_form_1_div_81_div_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Change password"), " ");
} }
function OpcuaServerConfigComponent_form_1_div_81_div_8_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "Cancel password change"), " ");
} }
function OpcuaServerConfigComponent_form_1_div_81_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵelementStart(1, "button", 57);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerConfigComponent_form_1_div_81_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.toggleChangePassword(); });
    ɵngcc0.ɵɵtemplate(2, OpcuaServerConfigComponent_form_1_div_81_div_8_ng_container_2_Template, 3, 3, "ng-container", 56);
    ɵngcc0.ɵɵtemplate(3, OpcuaServerConfigComponent_form_1_div_81_div_8_ng_container_3_Template, 3, 3, "ng-container", 56);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r23.changePassword);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r23.changePassword);
} }
function OpcuaServerConfigComponent_form_1_div_81_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "label", 58);
    ɵngcc0.ɵɵtext(2, "Password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "input", 59);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_81_div_10_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(3); return ctx_r29.model.config.userPassword = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r24.model.config.userPassword);
} }
function OpcuaServerConfigComponent_form_1_div_81_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "div", 52);
    ɵngcc0.ɵɵelementStart(2, "div", 34);
    ɵngcc0.ɵɵelementStart(3, "label", 53);
    ɵngcc0.ɵɵtext(4, "Username");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 54);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_81_Template_input_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.model.config.userName = $event; });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 33);
    ɵngcc0.ɵɵtemplate(8, OpcuaServerConfigComponent_form_1_div_81_div_8_Template, 4, 2, "div", 55);
    ɵngcc0.ɵɵelementStart(9, "div", 34);
    ɵngcc0.ɵɵtemplate(10, OpcuaServerConfigComponent_form_1_div_81_div_10_Template, 4, 1, "div", 56);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(6, 4, "e.g. joe.doe`LOCALIZE`"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r7.model.config.userName);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.initialPasswordRequired);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.changePassword);
} }
function OpcuaServerConfigComponent_form_1_div_82_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "div", 34);
    ɵngcc0.ɵɵelementStart(3, "label", 60);
    ɵngcc0.ɵɵtext(4, "Keystore password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 61);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_82_Template_input_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.model.config.keystorePass = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 33);
    ɵngcc0.ɵɵelementStart(7, "div", 34);
    ɵngcc0.ɵɵelementStart(8, "label", 62);
    ɵngcc0.ɵɵtext(9, "Certificate password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "input", 63);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_div_82_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r35 = ɵngcc0.ɵɵnextContext(2); return ctx_r35.model.config.certificatePass = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 52);
    ɵngcc0.ɵɵelementStart(12, "div", 34);
    ɵngcc0.ɵɵelementStart(13, "label", 64);
    ɵngcc0.ɵɵtext(14, "Upload keystore");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "input", 65);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementStart(17, "c8y-drop-area", 66);
    ɵngcc0.ɵɵlistener("dropped", function OpcuaServerConfigComponent_form_1_div_82_Template_c8y_drop_area_dropped_17_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r36 = ɵngcc0.ɵɵnextContext(2); return ctx_r36.uploadFile($event); });
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.model.config.keystorePass);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.model.config.certificatePass);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(16, 7, "e.g."), " yourKeystore.jks");
    ɵngcc0.ɵɵproperty("readonly", true)("ngModel", ctx_r8.fileName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("loadingMessage", ɵngcc0.ɵɵpipeBind1(18, 9, "Importing, please wait."))("title", ɵngcc0.ɵɵpipeBind1(19, 11, "Import keystore with jks file extension"));
} }
function OpcuaServerConfigComponent_form_1_Template(rf, ctx) { if (rf & 1) {
    const _r38 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 4, 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵelementStart(3, "button", 7);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerConfigComponent_form_1_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r37 = ɵngcc0.ɵɵnextContext(); return ctx_r37.cancel(); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "i", 8);
    ɵngcc0.ɵɵelementStart(6, "span", 9);
    ɵngcc0.ɵɵtext(7, "Back");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 10);
    ɵngcc0.ɵɵelementStart(9, "div", 11);
    ɵngcc0.ɵɵelementStart(10, "c8y-form-group", 12);
    ɵngcc0.ɵɵelementStart(11, "label");
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "input", 13);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_input_ngModelChange_14_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r39 = ɵngcc0.ɵɵnextContext(); return ctx_r39.model.name = $event; });
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "c8y-messages");
    ɵngcc0.ɵɵelement(17, "c8y-message", 14);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "div", 15);
    ɵngcc0.ɵɵelementStart(20, "div", 16);
    ɵngcc0.ɵɵelementStart(21, "div", 17);
    ɵngcc0.ɵɵelementStart(22, "label", 18);
    ɵngcc0.ɵɵtext(23, "Server connection");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "button", 19);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_button_ngModelChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r40 = ɵngcc0.ɵɵnextContext(); return ctx_r40.targetConnectionState = $event; })("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_button_ngModelChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r41 = ɵngcc0.ɵɵnextContext(); return ctx_r41.setServerConnection($event); });
    ɵngcc0.ɵɵelementStart(25, "span", 20);
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵtext(27, "Enabled");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(28, "span", 20);
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵtext(30, "Disabled");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "div", 17);
    ɵngcc0.ɵɵelementStart(32, "label", 9);
    ɵngcc0.ɵɵtext(33, "Connection status");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(34, "div", 21);
    ɵngcc0.ɵɵelement(35, "device-status", 22);
    ɵngcc0.ɵɵelementStart(36, "span");
    ɵngcc0.ɵɵtext(37);
    ɵngcc0.ɵɵpipe(38, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(39, "div", 11);
    ɵngcc0.ɵɵelementStart(40, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(41, "label", 23);
    ɵngcc0.ɵɵtext(42, "Server URL");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(43, "input", 24);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_input_ngModelChange_43_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r42 = ɵngcc0.ɵɵnextContext(); return ctx_r42.model.config.serverUrl = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(44, "div", 25);
    ɵngcc0.ɵɵelementStart(45, "div", 26);
    ɵngcc0.ɵɵelementStart(46, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(47, "label", 27);
    ɵngcc0.ɵɵtext(48, "Timeout");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(49, "div", 28);
    ɵngcc0.ɵɵelementStart(50, "input", 29);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_input_ngModelChange_50_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r43 = ɵngcc0.ɵɵnextContext(); return ctx_r43.model.config.timeout = $event; });
    ɵngcc0.ɵɵpipe(51, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(52, "span", 30);
    ɵngcc0.ɵɵtext(53, " seconds ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(54, "div", 26);
    ɵngcc0.ɵɵelementStart(55, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(56, "label", 31);
    ɵngcc0.ɵɵtext(57, "Status check interval");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(58, "div", 28);
    ɵngcc0.ɵɵelementStart(59, "input", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_input_ngModelChange_59_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r44 = ɵngcc0.ɵɵnextContext(); return ctx_r44.model.config.statusCheckInterval = $event; });
    ɵngcc0.ɵɵpipe(60, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(61, "span", 30);
    ɵngcc0.ɵɵtext(62, " seconds ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(63, "div", 16);
    ɵngcc0.ɵɵelementStart(64, "div", 33);
    ɵngcc0.ɵɵelementStart(65, "div", 34);
    ɵngcc0.ɵɵelementStart(66, "label", 35);
    ɵngcc0.ɵɵtext(67, "Security mode");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(68, "div", 36);
    ɵngcc0.ɵɵelementStart(69, "select", 37);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_select_ngModelChange_69_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r45 = ɵngcc0.ɵɵnextContext(); return ctx_r45.currentSecMode = $event; })("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_select_ngModelChange_69_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r46 = ɵngcc0.ɵɵnextContext(); return ctx_r46.setPolicy($event); });
    ɵngcc0.ɵɵtemplate(70, OpcuaServerConfigComponent_form_1_option_70_Template, 2, 2, "option", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(71, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(72, OpcuaServerConfigComponent_form_1_div_72_Template, 5, 2, "div", 39);
    ɵngcc0.ɵɵtemplate(73, OpcuaServerConfigComponent_form_1_div_73_Template, 8, 2, "div", 39);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(74, "div", 34);
    ɵngcc0.ɵɵelementStart(75, "label", 40);
    ɵngcc0.ɵɵtext(76, "Authentication");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(77, "div", 36);
    ɵngcc0.ɵɵelementStart(78, "select", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_select_ngModelChange_78_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r47 = ɵngcc0.ɵɵnextContext(); return ctx_r47.authenticationMode = $event; })("ngModelChange", function OpcuaServerConfigComponent_form_1_Template_select_ngModelChange_78_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r48 = ɵngcc0.ɵɵnextContext(); return ctx_r48.updateAuthentication($event); });
    ɵngcc0.ɵɵtemplate(79, OpcuaServerConfigComponent_form_1_option_79_Template, 3, 4, "option", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(80, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(81, OpcuaServerConfigComponent_form_1_div_81_Template, 11, 6, "div", 42);
    ɵngcc0.ɵɵtemplate(82, OpcuaServerConfigComponent_form_1_div_82_Template, 20, 13, "div", 42);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(83, "div", 43);
    ɵngcc0.ɵɵelementStart(84, "button", 44);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerConfigComponent_form_1_Template_button_click_84_listener() { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r49 = ɵngcc0.ɵɵnextContext(); return ctx_r49.cancel(); });
    ɵngcc0.ɵɵpipe(85, "translate");
    ɵngcc0.ɵɵtext(86, " Cancel ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(87, "button", 45);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerConfigComponent_form_1_Template_button_click_87_listener() { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r50 = ɵngcc0.ɵɵnextContext(); return ctx_r50.remove(); });
    ɵngcc0.ɵɵpipe(88, "translate");
    ɵngcc0.ɵɵtext(89, " Remove ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(90, "button", 46);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerConfigComponent_form_1_Template_button_click_90_listener() { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r51 = ɵngcc0.ɵɵnextContext(); return ctx_r51.save(); });
    ɵngcc0.ɵɵpipe(91, "translate");
    ɵngcc0.ɵɵtext(92, " Save ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(1);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 31, "Back"));
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 33, "Server name"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(15, 35, "e.g. My server"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(18, 37, "Server name is required"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.targetConnectionState);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(26, 39, "Enabled"));
    ɵngcc0.ɵɵproperty("hidden", ctx_r1.targetConnectionState !== "1");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(29, 41, "Disabled"));
    ɵngcc0.ɵɵproperty("hidden", ctx_r1.targetConnectionState !== "0");
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("mo", ctx_r1.server);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(38, 43, ctx_r1.connectionStatusLabel));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.config.serverUrl);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(51, 45, "e.g."), " 30");
    ɵngcc0.ɵɵproperty("min", ctx_r1.minIntervalNumber)("ngModel", ctx_r1.model.config.timeout);
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(60, 47, "e.g."), " 40");
    ɵngcc0.ɵɵproperty("min", ctx_r1.minIntervalNumber)("ngModel", ctx_r1.model.config.statusCheckInterval);
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.currentSecMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.securityModes);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.currentSecMode === ctx_r1.NONE);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.currentSecMode !== ctx_r1.NONE);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.authenticationMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.authenticationModes);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.authenticationMode.id === 2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.authenticationMode.id === 3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(85, 49, "Cancel"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(88, 51, "Remove"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(91, 53, "Save"));
    ɵngcc0.ɵɵproperty("disabled", !_r2.valid);
} }
function OpcuaServerListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵlistener("click", function OpcuaServerListComponent_div_0_Template_div_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const server_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.presentConfig(server_r1); });
    ɵngcc0.ɵɵelement(1, "i", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelementStart(3, "p", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "small", 5);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 6);
    ɵngcc0.ɵɵelement(8, "device-status", 7);
    ɵngcc0.ɵɵelementStart(9, "a", 8);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelement(11, "i", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const server_r1 = ctx.$implicit;
    ɵngcc0.ɵɵclassProp("active", server_r1.active);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "server");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(server_r1.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(server_r1.config.serverUrl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("mo", server_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 8, server_r1.quickInfo.padlockMsg));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", server_r1.quickInfo.padlock);
} }
const _c8 = function (a0) { return { "split-view__detail--selected": a0 }; };
function OpcuaDeviceProtocolDescription_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2._model.description, " ");
} }
function OpcuaDeviceProtocolDescription_span_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "i", 21);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "Active`auto scanning`"), " ");
} }
function OpcuaDeviceProtocolDescription_span_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "i", 22);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "Inactive`auto scanning`"), " ");
} }
const _c9 = function (a0) { return { updated: a0 }; };
const _c10 = function (a0) { return { strong: a0 }; };
function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "cdk-nested-tree-node", 7);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template_cdk_nested_tree_node_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.toggleFocusedNode(node_r5); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵelement(2, "i", 8);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r5 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c10, ctx_r3.isFocusedNode(node_r5)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r3.getIcon(node_r5.nodeClassName))("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c10, ctx_r3.isFocusedNode(node_r5)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r5.displayName, " ");
} }
const _c11 = function (a0, a1) { return { "dlt-c8y-icon-plus-square": a0, "dlt-c8y-icon-minus-square": a1 }; };
function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "cdk-nested-tree-node");
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "button", 10);
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "i", 12);
    ɵngcc0.ɵɵelementStart(5, "span", 7);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template_span_click_5_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const node_r8 = restoredCtx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.toggleFocusedNode(node_r8); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "span", 13);
    ɵngcc0.ɵɵelement(8, "i", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainer(9, 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r8 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", node_r8.currentlyLoadingChildren);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(7, _c11, !node_r8.expanded, node_r8.expanded));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r4.getIcon(node_r8.nodeClassName));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c10, ctx_r4.isFocusedNode(node_r8)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r8.displayName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("visibility", node_r8.currentlyLoadingChildren ? "visible" : "hidden");
} }
function OpcuaAddressSpaceTreeComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "cdk-tree", 4);
    ɵngcc0.ɵɵtemplate(2, OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template, 4, 8, "cdk-nested-tree-node", 5);
    ɵngcc0.ɵɵtemplate(3, OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template, 10, 12, "cdk-nested-tree-node", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.dataSource)("treeControl", ctx_r0.nestedTreeControl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("cdkTreeNodeDefWhen", ctx_r0.hasChild);
} }
function OpcuaAddressSpaceTreeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "div", 17);
    ɵngcc0.ɵɵelement(2, "div", 18);
    ɵngcc0.ɵɵelement(3, "div", 19);
    ɵngcc0.ɵɵelement(4, "div", 20);
    ɵngcc0.ɵɵelement(5, "div", 21);
    ɵngcc0.ɵɵelement(6, "div", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaAddressSpaceTreeComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtext(1, " No source data available to fetch address space.\n");
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaAutoApplySettingsComponent_c8y_li_19_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 20);
    ɵngcc0.ɵɵelementStart(1, "c8y-filter", 21);
    ɵngcc0.ɵɵlistener("onSearch", function OpcuaAutoApplySettingsComponent_c8y_li_19_Template_c8y_filter_onSearch_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.filterItems($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", "search");
} }
function OpcuaAutoApplySettingsComponent_c8y_li_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-body");
    ɵngcc0.ɵɵelementStart(2, "div", 22);
    ɵngcc0.ɵɵelementStart(3, "p");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 1, "No items to display."));
} }
function OpcuaAutoApplySettingsComponent_c8y_li_21_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-checkbox", 23);
    ɵngcc0.ɵɵlistener("onSelect", function OpcuaAutoApplySettingsComponent_c8y_li_21_Template_c8y_li_checkbox_onSelect_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const item_r6 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onSelect($event, item_r6); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-body");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "br");
    ɵngcc0.ɵɵelementStart(6, "span", 24);
    ɵngcc0.ɵɵtext(7, "ID");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "small");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selected", ctx_r2.isChecked(item_r6));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 3, item_r6.name));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(item_r6.id);
} }
function OpcuaAutoApplySettingsComponent_li_56_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 25);
    ɵngcc0.ɵɵelementStart(1, "c8y-input-group-list", 26);
    ɵngcc0.ɵɵlistener("onAdd", function OpcuaAutoApplySettingsComponent_li_56_Template_c8y_input_group_list_onAdd_1_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.add(); })("onRemove", function OpcuaAutoApplySettingsComponent_li_56_Template_c8y_input_group_list_onRemove_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.remove($event); });
    ɵngcc0.ɵɵelementStart(2, "c8y-form-group", 27);
    ɵngcc0.ɵɵelementStart(3, "input", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaAutoApplySettingsComponent_li_56_Template_input_ngModelChange_3_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const i_r10 = restoredCtx.index; const ctx_r14 = ɵngcc0.ɵɵnextContext(); return (ctx_r14.constraints.matchesNodeIds[i_r10] = $event); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r10 = ctx.index;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("index", i_r10);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(4, 4, "e.g."), " nodeId");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.constraints.matchesNodeIds[i_r10])("required", true);
} }
class OpcuaDeviceProtocolMappingCustomAction {
    constructor() {
        this.hasCustomAction = false;
        // no translation needed
        this.placeholders = '${value}, ${serverId}, ${nodeId}, ${deviceId}';
    }
    getHeaderPair() {
        return { key: '', value: '' };
    }
    get headers() {
        return this.customAction.headers;
    }
    addHeader() {
        const { headers } = this.customAction;
        headers.push(this.getHeaderPair());
    }
    updateCustomAction() {
        this.hasCustomAction = !this.hasCustomAction;
    }
    removeCustomAction(index) {
        const { headers } = this.customAction;
        headers.splice(index, 1);
    }
    trackByIndex(index) {
        return index;
    }
    ngOnInit() {
        if (get(this.customAction, 'endpoint')) {
            this.hasCustomAction = true;
        }
    }
}
OpcuaDeviceProtocolMappingCustomAction.ɵfac = function OpcuaDeviceProtocolMappingCustomAction_Factory(t) { return new (t || OpcuaDeviceProtocolMappingCustomAction)(); };
OpcuaDeviceProtocolMappingCustomAction.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaDeviceProtocolMappingCustomAction, selectors: [["opcua-device-protocol-mapping-customaction"]], inputs: { customAction: "customAction" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgModelGroup }])], decls: 13, vars: 4, consts: [[1, "list-group"], [1, "list-group-item"], [1, "flex-row"], [1, "list-item-switch"], [1, "c8y-switch"], ["type", "checkbox", "name", "hasCustomAction", 3, "ngModel", "ngModelChange", "click"], [1, "list-item-icon"], ["c8yIcon", "wrench"], ["translate", "", 1, "list-item-title"], [3, "collapse", "isAnimated"], ["class", "p-t-8", 4, "ngIf"], [1, "p-t-8"], ["ngModelGroup", "headers"], ["translate", "", 1, "legend", "form-block"], [1, "tight-grid", "flex-row", "hidden-xs"], [1, "col-sm-4"], ["translate", ""], ["class", "flex-row tight-grid row", 3, "ngModelGroup", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "row"], [1, "col-md-4"], [1, "form-group-sm"], [1, "input-group"], ["type", "text", "name", "endpoint", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["rows", "3", "name", "bodyTemplate", "required", "", 1, "form-control", 3, "heightPerRow", "placeholder", "ngModel", "ngModelChange"], ["model", "ngModel"], ["class", "help-block", 4, "ngIf"], [1, "flex-row", "tight-grid", "row", 3, "ngModelGroup"], [1, "col-xs-5", "col-sm-4"], ["translate", "", 1, "visible-xs"], ["type", "text", "name", "key", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["type", "text", "name", "value", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], [1, "col-xs-2"], [1, "form-group"], [1, "visible-xs"], ["class", "btn btn-clean", 4, "ngIf"], [1, "btn", "btn-clean"], ["c8yIcon", "minus-circle", 1, "text-danger", 3, "click"], ["c8yIcon", "plus-circle", 1, "text-primary", 3, "click"], [1, "help-block"]], template: function OpcuaDeviceProtocolMappingCustomAction_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "label", 4);
        ɵngcc0.ɵɵelementStart(5, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolMappingCustomAction_Template_input_ngModelChange_5_listener($event) { return ctx.hasCustomAction = $event; })("click", function OpcuaDeviceProtocolMappingCustomAction_Template_input_click_5_listener() { return ctx.updateCustomAction(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵelement(8, "i", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵtext(10, " Custom action ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵtemplate(12, OpcuaDeviceProtocolMappingCustomAction_div_12_Template, 31, 12, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.hasCustomAction);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("collapse", !ctx.hasCustomAction)("isAnimated", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCustomAction);
    } }, directives: [ɵngcc1.CheckboxControlValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc3.CollapseDirective, ɵngcc4.NgIf, ɵngcc1.NgControlStatusGroup, ɵngcc1.NgModelGroup, ɵngcc4.NgForOf, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc1.DefaultValueAccessor, ɵngcc1.RequiredValidator, ɵngcc2.TextAreaRowHeightDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaDeviceProtocolMappingCustomAction.propDecorators = {
    customAction: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolMappingCustomAction, [{
        type: Component,
        args: [{
                selector: 'opcua-device-protocol-mapping-customaction',
                template: "<div class=\"list-group\">\n  <div class=\"list-group-item\">\n    <div class=\"flex-row\">\n      <div class=\"list-item-switch\">\n        <label class=\"c8y-switch\">\n          <input\n            type=\"checkbox\"\n            name=\"hasCustomAction\"\n            [(ngModel)]=\"hasCustomAction\"\n            (click)=\"updateCustomAction()\"\n          />\n          <span></span>\n        </label>\n      </div>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"wrench\"></i>\n      </div>\n      <div class=\"list-item-title\" translate>\n        Custom action\n      </div>\n    </div>\n    <div [collapse]=\"!hasCustomAction\" [isAnimated]=\"true\">\n      <div class=\"p-t-8\" *ngIf=\"hasCustomAction\">\n        <fieldset ngModelGroup=\"headers\">\n          <div class=\"legend form-block\" translate>Headers</div>\n          <div class=\"tight-grid flex-row hidden-xs\">\n            <div class=\"col-sm-4\">\n              <label translate>Key</label>\n            </div>\n            <div class=\"col-sm-4\">\n              <label translate>Value</label>\n            </div>\n          </div>\n          <div\n            *ngFor=\"let header of headers; trackBy: trackByIndex; let i = index; last as isLast\"\n            class=\"flex-row tight-grid row\"\n            [ngModelGroup]=\"i\"\n          >\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Key</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"key\"\n                    placeholder=\"{{ 'e.g.' | translate }} Content-Type\"\n                    required\n                    [(ngModel)]=\"header.key\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Value</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"value\"\n                    placeholder=\"{{ 'e.g.' | translate }} application/json\"\n                    required\n                    [(ngModel)]=\"header.value\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-2\">\n              <div class=\"form-group\">\n                <label class=\"visible-xs\">&nbsp;</label>\n                <button class=\"btn btn-clean\" *ngIf=\"customAction.headers.length !== 1\">\n                  <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"removeCustomAction(i)\"></i>\n                </button>\n                <button class=\"btn btn-clean\" *ngIf=\"isLast\">\n                  <i c8yIcon=\"plus-circle\" class=\"text-primary\" (click)=\"addHeader()\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n        <div class=\"legend form-block\" translate>Action</div>\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label>\n                <span translate>Endpoint</span>\n              </label>\n              <div class=\"input-group\">\n                <input\n                  class=\"form-control\"\n                  type=\"text\"\n                  name=\"endpoint\"\n                  placeholder=\"{{ 'e.g.' | translate }} http://localhost:1080/cucumber\"\n                  required\n                  [(ngModel)]=\"customAction.endpoint\"\n                />\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label translate>Body template</label>\n              <textarea\n                #model='ngModel'\n                [heightPerRow]=\"40\"\n                class=\"form-control\"\n                rows=\"3\"\n                name=\"bodyTemplate\"\n                placeholder=\"({{'required' | translate}})\"\n                [(ngModel)]=\"customAction.bodyTemplate\"\n                required\n              ></textarea>\n              <div class=\"help-block\" *ngIf=\"model.untouched || !model.errors\">\n                {{ 'The following placeholders are available:' | translate }} {{ placeholders }}\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
            }]
    }], function () { return []; }, { customAction: [{
            type: Input
        }] }); })();

class AddressSpaceService {
    constructor(fetchClient) {
        this.client = fetchClient;
        this.microserviceUrl = '/service/opcua-mgmt-service/address-space';
        this.header = { 'Content-Type': 'application/json' };
        this.nodeNavigationData$ = new BehaviorSubject({
            node: undefined,
            selectedAncestorIds: []
        });
    }
    resetTreeToRootNode() {
        this.triggerNodeToOpen({ node: undefined, selectedAncestorIds: [] });
    }
    triggerNodeToOpen(nodeNavigationData) {
        this.nodeNavigationData$.next(nodeNavigationData);
    }
    getNodeNavData$() {
        return this.nodeNavigationData$.asObservable();
    }
    getNode(serverId, nodeId) {
        if (serverId && serverId.length > 0) {
            if (nodeId && nodeId.length > 0) {
                return this.getNodeById(serverId, nodeId);
            }
            return this.getRootNode(serverId);
        }
    }
    getRootNode(serverId) {
        if (serverId && serverId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${serverId}`, options);
        }
    }
    getNodeById(serverId, nodeId) {
        if (serverId && nodeId && serverId.length > 0 && nodeId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const param = encodeURIComponent(nodeId);
            return this.client.fetch(`${this.microserviceUrl}/${serverId}?nodeId=${param}`, options);
        }
    }
    getChildrenOf(node, serverId) {
        if (serverId && node.nodeId && serverId.length > 0 && node.nodeId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const param = encodeURIComponent(node.nodeId);
            return this.client.fetch(`${this.microserviceUrl}/${serverId}/children?nodeId=${param}`, options);
        }
    }
    childrenAvailable(nodeReferences) {
        if (!nodeReferences || nodeReferences.length === 0) {
            return false;
        }
        return nodeReferences.some(ref => !ref.inverse && ref.hierarchical);
    }
    getSearchedNodes(searchKey, serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `service/opcua-mgmt-service/search/${serverId}/`;
            const options = {
                headers: this.header,
                params: {
                    searchString: '*' + searchKey + '*'
                }
            };
            const res = yield this.client.fetch(url, options);
            return res.json();
        });
    }
    getIcon(nodeClassName) {
        const iconList = {
            Object: 'cube',
            Variable: 'th-list',
            Method: 'random',
            View: 'window-maximize',
            ObjectType: 'c8y-group',
            VariableType: 'c8y-group',
            ReferenceType: 'c8y-group',
            DataType: 'c8y-group'
        };
        return iconList[nodeClassName] || 'circle';
    }
}
AddressSpaceService.ɵfac = function AddressSpaceService_Factory(t) { return new (t || AddressSpaceService)(ɵngcc0.ɵɵinject(ɵngcc5.FetchClient)); };
AddressSpaceService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AddressSpaceService, factory: AddressSpaceService.ɵfac });
AddressSpaceService.ctorParameters = () => [
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddressSpaceService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.FetchClient }]; }, null); })();

class OpcuaAddressSpaceDetailComponent {
    constructor(addressSpaceService) {
        this.addressSpaceService = addressSpaceService;
        this.selected = false;
        this.showDetails = false;
        this.toggleAttrDetail = new EventEmitter();
    }
    set node(n) {
        this._node = n;
        if (n) {
            this.setNodeData(n);
        }
        else {
            // remove details from current view
            this.showDetails = false;
        }
    }
    setNodeData(nodeData) {
        this.showDetails = true;
        const { attributes, references } = nodeData;
        this.nodeDataRef = references;
        const omitList = [
            'attributes',
            'references',
            'children',
            'currentlyLoadingChildren',
            'expanded',
            'browsePath',
            'relativePath',
            'parentNode'
        ];
        this.nodeDataAttr = Object.assign({}, attributes, omit(nodeData, omitList));
    }
    toggleDetail(node) {
        this.showDetails = !this.showDetails;
        this.toggleAttrDetail.emit(node);
    }
    navigateTo(ancestors) {
        const nodeNavData = {
            node: this._node,
            selectedAncestorIds: ancestors
        };
        this.toggleDetail(this._node);
        this.addressSpaceService.triggerNodeToOpen(nodeNavData);
    }
}
OpcuaAddressSpaceDetailComponent.ɵfac = function OpcuaAddressSpaceDetailComponent_Factory(t) { return new (t || OpcuaAddressSpaceDetailComponent)(ɵngcc0.ɵɵdirectiveInject(AddressSpaceService)); };
OpcuaAddressSpaceDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaAddressSpaceDetailComponent, selectors: [["opcua-address-space-detail"]], inputs: { node: "node" }, outputs: { toggleAttrDetail: "toggleAttrDetail" }, decls: 46, vars: 33, consts: [[1, "card", "flex-scroll", "m-b-4", "split-row-2", "animated", "fast", 2, "pointer-events", "all", 3, "ngClass"], [1, "card-header", "separator"], [1, "close", "flex-item-right", "visible-sm", "visible-xs", 3, "title", "click"], [1, "card-inner-scroll"], [1, "card-block"], [1, "table", "table-striped", "table-condensed"], ["width", "50%"], [4, "ngFor", "ngForOf"], [1, "card", "flex-scroll", "split-row-2", "animated", "fast", 2, "pointer-events", "all", 3, "ngClass"], ["class", "text-break-word", 4, "ngIf"], [4, "ngIf"], [1, "text-break-word"], [3, "click", 4, "ngFor", "ngForOf"], [3, "click"]], template: function OpcuaAddressSpaceDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h4");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 2);
        ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceDetailComponent_Template_button_click_5_listener() { return ctx.toggleDetail(ctx.nodeDataAttr); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵtext(7, " \u00D7 ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelementStart(10, "table", 5);
        ɵngcc0.ɵɵelementStart(11, "colgroup");
        ɵngcc0.ɵɵelement(12, "col", 6);
        ɵngcc0.ɵɵelement(13, "col", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "thead");
        ɵngcc0.ɵɵelementStart(15, "tr");
        ɵngcc0.ɵɵelementStart(16, "th");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "th");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "tbody");
        ɵngcc0.ɵɵtemplate(23, OpcuaAddressSpaceDetailComponent_tr_23_Template, 6, 4, "tr", 7);
        ɵngcc0.ɵɵpipe(24, "keyvalue");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 8);
        ɵngcc0.ɵɵelementStart(26, "div", 1);
        ɵngcc0.ɵɵelementStart(27, "h4");
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "div", 3);
        ɵngcc0.ɵɵelementStart(31, "div", 4);
        ɵngcc0.ɵɵelementStart(32, "table", 5);
        ɵngcc0.ɵɵelementStart(33, "colgroup");
        ɵngcc0.ɵɵelement(34, "col", 6);
        ɵngcc0.ɵɵelement(35, "col", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "thead");
        ɵngcc0.ɵɵelementStart(37, "tr");
        ɵngcc0.ɵɵelementStart(38, "th");
        ɵngcc0.ɵɵtext(39);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(41, "th");
        ɵngcc0.ɵɵtext(42);
        ɵngcc0.ɵɵpipe(43, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(44, "tbody");
        ɵngcc0.ɵɵtemplate(45, OpcuaAddressSpaceDetailComponent_tr_45_Template, 5, 2, "tr", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(27, _c0, ctx.showDetails, !ctx.showDetails));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 11, "Attributes"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 13, "Close"));
        ɵngcc0.ɵɵadvance(12);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 15, "Attribute"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 17, "Value"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(24, 19, ctx.nodeDataAttr));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(30, _c0, ctx.showDetails, !ctx.showDetails));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(29, 21, "References"));
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(40, 23, "Attribute"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(43, 25, "Value"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.nodeDataRef);
    } }, directives: [ɵngcc4.NgClass, ɵngcc4.NgForOf, ɵngcc4.NgIf], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.KeyValuePipe, ɵngcc4.JsonPipe], encapsulation: 2 });
OpcuaAddressSpaceDetailComponent.ctorParameters = () => [
    { type: AddressSpaceService }
];
OpcuaAddressSpaceDetailComponent.propDecorators = {
    node: [{ type: Input }],
    toggleAttrDetail: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAddressSpaceDetailComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-address-space-detail',
                template: "<div\n  class=\"card flex-scroll m-b-4 split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator \">\n    <h4>{{ 'Attributes' | translate }}</h4>\n    <button\n      class=\"close flex-item-right visible-sm visible-xs\"\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"toggleDetail(nodeDataAttr)\"\n    >\n      &times;\n    </button>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataAttr | keyvalue\">\n            <td>{{ item.key }}</td>\n            <td *ngIf=\"item.key === 'absolutePaths'\" class=\"text-break-word\">\n              {{ item.value | json }}\n            </td>\n            <td *ngIf=\"item.key === 'ancestorNodeIds'\" class=\"text-break-word\">\n              <a *ngFor=\"let value of item.value\" (click)=\"navigateTo(value)\">\n                {{ value | json }}</a\n              >\n            </td>\n            <td *ngIf=\"item.key !== 'absolutePaths' && item.key !== 'ancestorNodeIds'\">\n              {{ item.value }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n<div\n  class=\"card flex-scroll split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator\">\n    <h4>{{ 'References' | translate }}</h4>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataRef\">\n            <td>{{ item.referenceLabel }}</td>\n            <td class=\"text-break-word\">{{ item.targetLabel }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: AddressSpaceService }]; }, { toggleAttrDetail: [{
            type: Output
        }], node: [{
            type: Input
        }] }); })();

class OpcuaService {
    constructor(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    getServers(id) {
        if (id && id.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${id}`, options);
        }
    }
    createServer(data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.microserviceUrl}`, options);
        }
    }
    updateServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.doesGatewayIdExist(server) && this.doesIdExist(server)) {
                this.cleanUpPayload(server);
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify(server)
                };
                const res = yield this.client.fetch(`${this.microserviceUrl}`, options);
                let data;
                try {
                    data = yield res.json();
                }
                catch (e) {
                    // nothing
                }
                if (res.status !== 200) {
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    return data;
                }
            }
        });
    }
    removeServer(data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${this.microserviceUrl}/${data.gatewayId}/${data.id}`, options);
        }
    }
    getKeystore(binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    }
    uploadKeystore(file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    }
    updateKeystore(id, file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id && id.length > 0 && file && file.size > 0) {
                const { res } = yield this.removeKeystore(id);
                if (res && res.status === 204) {
                    return this.uploadKeystore(file);
                }
            }
            return Promise.reject('Invalid file');
        });
    }
    removeKeystore(id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    }
    getMoId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    }
    getId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    }
    getDeviceProtocol(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header,
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${id}`, options);
        });
    }
    updateDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${data.id}`, options);
        });
    }
    createDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}`, options);
        });
    }
    doesGatewayIdExist(data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    }
    doesIdExist(data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    }
    cleanUpPayload(data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    }
}
OpcuaService.ɵfac = function OpcuaService_Factory(t) { return new (t || OpcuaService)(ɵngcc0.ɵɵinject(ɵngcc5.FetchClient), ɵngcc0.ɵɵinject(ɵngcc5.InventoryService), ɵngcc0.ɵɵinject(ɵngcc6.Router), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
OpcuaService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpcuaService, factory: OpcuaService.ɵfac });
OpcuaService.ctorParameters = () => [
    { type: FetchClient },
    { type: InventoryService },
    { type: Router },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.FetchClient }, { type: ɵngcc5.InventoryService }, { type: ɵngcc6.Router }, { type: ɵngcc2.AlertService }]; }, null); })();

class OpcuaAgentGuard {
    constructor() {
        this.type = 'c8y_OPCUA_Device_Agent';
    }
    canActivate({ data }) {
        const { contextData } = data;
        return contextData && contextData.type === this.type;
    }
}
OpcuaAgentGuard.ɵfac = function OpcuaAgentGuard_Factory(t) { return new (t || OpcuaAgentGuard)(); };
OpcuaAgentGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpcuaAgentGuard, factory: OpcuaAgentGuard.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAgentGuard, [{
        type: Injectable
    }], function () { return []; }, null); })();

class OpcuaDeviceProtocolBrowsePathValidation {
    constructor(el) {
        this.el = el;
    }
    validate(control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    }
    isValidJson(value) {
        try {
            const browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    }
    toArray(str) {
        return JSON.parse(str);
    }
    isBrowsePathUnique(value) {
        const mappings = this.getMappings();
        const found = some(mappings, item => {
            if (isEqual(item.browsePath, this.toArray(value)) && item.id !== this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    }
}
OpcuaDeviceProtocolBrowsePathValidation.ɵfac = function OpcuaDeviceProtocolBrowsePathValidation_Factory(t) { return new (t || OpcuaDeviceProtocolBrowsePathValidation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OpcuaDeviceProtocolBrowsePathValidation.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OpcuaDeviceProtocolBrowsePathValidation, selectors: [["", "c8yBrowsePathValidator", "", "ngModel", ""]], inputs: { getMappings: "getMappings", model: "model" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                multi: true
            }
        ])] });
OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = () => [
    { type: ElementRef }
];
OpcuaDeviceProtocolBrowsePathValidation.propDecorators = {
    getMappings: [{ type: Input }],
    model: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolBrowsePathValidation, [{
        type: Directive,
        args: [{
                selector: '[c8yBrowsePathValidator][ngModel]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { getMappings: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class OpcuaDeviceProtocolObjectMapping extends UpgradeComponent {
    constructor(elementRef, injector) {
        super('c8yObjectMapping', elementRef, injector);
    }
}
OpcuaDeviceProtocolObjectMapping.ɵfac = function OpcuaDeviceProtocolObjectMapping_Factory(t) { return new (t || OpcuaDeviceProtocolObjectMapping)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
OpcuaDeviceProtocolObjectMapping.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OpcuaDeviceProtocolObjectMapping, selectors: [["c8y-object-mapping"]], inputs: { mapping: "mapping", customActions: "customActions", autoObserveParams: "autoObserveParams", hideAutoObserve: "hideAutoObserve" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
OpcuaDeviceProtocolObjectMapping.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
OpcuaDeviceProtocolObjectMapping.propDecorators = {
    mapping: [{ type: Input }],
    customActions: [{ type: Input }],
    autoObserveParams: [{ type: Input }],
    hideAutoObserve: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolObjectMapping, [{
        type: Directive,
        args: [{
                selector: 'c8y-object-mapping'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Injector }]; }, { mapping: [{
            type: Input
        }], customActions: [{
            type: Input
        }], autoObserveParams: [{
            type: Input
        }], hideAutoObserve: [{
            type: Input
        }] }); })();

class OpcuaDeviceProtocolMapping {
    constructor(alertService, addressSpaceService) {
        this.alertService = alertService;
        this.addressSpaceService = addressSpaceService;
        this.onAction = new EventEmitter();
        this.isPathFocused = false;
        this.isBrowsePathUniq = true;
        this.dataReporting = 'default';
        this.isTreeOpen = false;
        this.isNew = false;
        this.resetModel = false;
        this.moId = '';
        this.getMappings = () => this.getParentAttr('mappings');
    }
    toggleDetail() {
        this.isDetailOpen = !this.isDetailOpen;
        if (this.resetModel) {
            this.initialFormSetup();
        }
    }
    ngOnInit() {
        this.dataReportingName = 'ReportingMode' + this.index;
        this.initialFormSetup();
    }
    ngOnChanges(changes) {
        if (changes._model.previousValue &&
            !isEqual(this._model, changes._model.previousValue.SimpleChange)) {
            if (this.mapping && this.mapping.name === this._model.name) {
                this.mapping.id = this._model.id;
            }
        }
    }
    initialFormSetup() {
        const mapping = {
            id: '',
            browsePath: [],
            name: '',
            subscriptionType: {
                type: 'None'
            }
        };
        const customAction = {
            headers: [{ key: 'Authorization', value: '' }, { key: 'Content-Type', value: '' }],
            bodyTemplate: '',
            type: 'HttpPost',
            endpoint: ''
        };
        this.mapping = assign({}, mapping, cloneDeep(this._model));
        if (isEmpty(this.mapping.browsePath)) {
            this.isNew = true;
            this.isDetailOpen = true;
        }
        else {
            this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
            this.nodeDisplayName = this.mapping.name;
        }
        if (this.referencedRootNodeId) {
            this.referencedNode = { nodeId: this.referencedRootNodeId };
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
        else {
            this.referencedNode = { nodeId: '' };
        }
        if (get(this.mapping, 'customAction')) {
            this.customAction = assign(customAction, get(this.mapping, 'customAction'));
            this.customAction.headers = this.mapHeadersObjectToList(get(this.customAction, 'headers'));
        }
        else {
            this.customAction = assign({}, customAction);
        }
        unset(this.mapping, 'customAction');
        if (get(this._model, 'subscriptionType')) {
            this.dataReporting = 'custom';
        }
        else {
            this.dataReporting = 'default';
        }
        this.resetModel = false;
    }
    showAddressSpaceTree() {
        return !isEmpty(this.referencedServerId);
    }
    ngAfterViewInit() {
        if (get(this.mapping, 'subscriptionType') &&
            get(this.mapping, 'subscriptionType.type') !== 'None') {
            this.dataReporting = 'custom';
        }
    }
    mapHeadersObjectToList(headers) {
        if (Object.keys(headers).length > 0) {
            return Object.keys(headers).map(item => {
                return { key: item, value: headers[item] };
            });
        }
    }
    stringfyBrowsePath(path) {
        return JSON.stringify(path);
    }
    updateBrowsePath(node) {
        this.mapping.browsePath = node.relativePath;
        this.nodeDisplayName = node.displayName;
        this.mapping.name = this.nodeDisplayName;
        this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
        this.browsePathModel.control.markAsDirty();
    }
    updateDisplayname() {
        this.mapping.name = this.nodeDisplayName;
    }
    updateBrowsePathInput() {
        if (this.browsePath) {
            try {
                this.mapping.browsePath = JSON.parse(this.browsePath);
            }
            catch (error) {
                return;
            }
        }
    }
    save() {
        if (this.dataReporting === 'default') {
            unset(this.mapping, 'subscriptionType');
        }
        if (get(this.mapping, 'measurementCreation')) {
            const { measurementCreation } = this.mapping;
            set(measurementCreation, 'fragmentName', get(measurementCreation, 'type'));
        }
        const { customAction } = this.subFormRef.value;
        let modifiedCustomAction;
        if (customAction.hasCustomAction) {
            const reducedHeaders = this.customAction.headers.reduce((result, item) => {
                result[item.key] = item.value;
                return result;
            }, {});
            modifiedCustomAction = assign({}, this.customAction, { headers: reducedHeaders });
        }
        this.onAction.emit({
            action: 'save',
            data: assign({}, this.mapping, { customAction: modifiedCustomAction })
        });
        this.isDetailOpen = false;
    }
    cancel() {
        this.isDetailOpen = false;
        this.resetModel = true;
        if (this.mapping.id === 'new') {
            this.onAction.emit({ action: 'delete', data: assign({}, this.mapping) });
        }
    }
    onDelete() {
        this.onAction.emit({ action: 'delete', data: this.mapping });
    }
    canSave(variableForm) {
        const areValid = () => variableForm.valid && this.objectMappingForm.$componentScope.mappingForm.$valid;
        const areDirty = () => variableForm.dirty || this.objectMappingForm.$componentScope.mappingForm.$dirty;
        return areValid() && areDirty();
    }
    isActive() {
        return this.isDetailOpen;
    }
    setTreeFromRefNode() {
        if (this.referencedRootNodeId) {
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
    }
}
OpcuaDeviceProtocolMapping.ɵfac = function OpcuaDeviceProtocolMapping_Factory(t) { return new (t || OpcuaDeviceProtocolMapping)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(AddressSpaceService)); };
OpcuaDeviceProtocolMapping.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaDeviceProtocolMapping, selectors: [["opcua-device-protocol-mapping"]], viewQuery: function OpcuaDeviceProtocolMapping_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(OpcuaDeviceProtocolObjectMapping, 5);
        ɵngcc0.ɵɵviewQuery(_c1, 5);
        ɵngcc0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.objectMappingForm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.subFormRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.browsePathModel = _t.first);
    } }, inputs: { _model: ["resource", "_model"], index: "index", getParentAttr: "getParentAttr", referencedServerId: "referencedServerId", referencedRootNodeId: "referencedRootNodeId" }, outputs: { onAction: "onAction" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgModelGroup }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 27, vars: 18, consts: [[1, "list-group-item", "collapsible", 3, "ngClass"], [1, "flex-row", 3, "click"], [1, "list-item-actions"], [1, "btn", "btn-clean", "showOnHover", "flex-item-right", 3, "title"], ["c8yIcon", "minus-circle", 1, "text-danger", 3, "click"], ["type", "button", 1, "collapse-btn", 3, "title", "ngClass"], ["c8yIcon", "chevron-down"], [1, "list-item-icon"], ["c8yIcon", "sliders"], [1, "list-item-body"], [1, "row", "flex-row"], [1, "col-sm-7", "col-xs-12"], ["class", "text-muted text-truncate", 3, "title", 4, "ngIf"], [1, "col-sm-4", "col-xs-10"], [1, "list-functionalities"], ["translate", "", 1, "small", "m-r-8", "hidden-xs"], [3, "mapping"], [1, "detail", 3, "collapse", "isAnimated"], ["class", "form", 3, "ngModelGroup", 4, "ngIf"], [1, "text-muted", "text-truncate", 3, "title"], [1, "form", 3, "ngModelGroup"], ["variableForm", "ngModelGroup"], [1, "row", "p-t-8"], [1, "col-md-4", 3, "status"], ["translate", ""], ["dropdown", "", 1, "dropdown", 2, "width", "100%", 3, "insideClick"], ["dropdown", "bs-dropdown"], ["c8yBrowsePathValidator", "", "type", "text", "name", "browsePath", "dropdownToggle", "", "required", "", "autocomplete", "off", 1, "form-control", 3, "getMappings", "model", "placeholder", "ngModel", "ngModelChange", "change", "focus"], ["browsePathModel", "ngModel"], ["class", "dropdown-menu panel-inner-scroll", "style", "max-height:200px; width: 100%;", 4, "dropdownMenu"], ["name", "invalidBrowsePathNotation", 3, "text"], ["name", "browsePathNotUnique", 3, "text"], [1, "col-md-4"], [1, "input-group"], ["type", "test", "name", "displayName", "required", "", "autocomplete", "off", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange", "change"], ["ngModelGroup", "dataReportingSection", 1, "row"], [1, "col-sm-4", "col-md-3", "col-lg-2"], [1, "c8y-radio", "radio-inline", 3, "title"], ["type", "radio", "value", "default", 3, "ngModel", "name", "ngModelChange"], ["type", "radio", "value", "custom", 3, "ngModel", "name", "ngModelChange"], ["class", "col-sm-8 col-md-9 col-lg-10", "ngModelGroup", "overriddenSubscription", 4, "ngIf"], [3, "mapping", "hideAutoObserve"], ["ngModelGroup", "customAction"], [3, "customAction"], ["id", "cancelBtn", 1, "btn", "btn-default", "m-t-16", "m-b-16", 3, "title", "click"], ["id", "saveBtn", 1, "btn", "btn-primary", "m-t-16", "m-b-16", 3, "title", "disabled", "click"], [1, "dropdown-menu", "panel-inner-scroll", 2, "max-height", "200px", "width", "100%"], [3, "node", "moId", "selectedNode", 4, "ngIf"], [3, "node", "moId", "selectedNode"], ["ngModelGroup", "overriddenSubscription", 1, "col-sm-8", "col-md-9", "col-lg-10"], [3, "model"]], template: function OpcuaDeviceProtocolMapping_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMapping_Template_div_click_1_listener() { return ctx.toggleDetail(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementStart(5, "i", 4);
        ɵngcc0.ɵɵlistener("click", function OpcuaDeviceProtocolMapping_Template_i_click_5_listener() { return ctx.onDelete(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelement(8, "i", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelement(10, "i", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵelementStart(12, "div", 10);
        ɵngcc0.ɵɵelementStart(13, "div", 11);
        ɵngcc0.ɵɵelementStart(14, "p");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelement(16, "br");
        ɵngcc0.ɵɵtemplate(17, OpcuaDeviceProtocolMapping_small_17_Template, 4, 6, "small", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(18, "p");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "div", 13);
        ɵngcc0.ɵɵelementStart(20, "div", 14);
        ɵngcc0.ɵɵelementStart(21, "label", 15);
        ɵngcc0.ɵɵtext(22, "Functionalities");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(23, "\u00A0 ");
        ɵngcc0.ɵɵelement(24, "c8y-object-mapping-status-icons", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 17);
        ɵngcc0.ɵɵtemplate(26, OpcuaDeviceProtocolMapping_div_26_Template, 56, 56, "div", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c4, ctx.isDetailOpen));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(4, 10, "Delete"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 12, "Expand"));
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(16, _c5, ctx.isDetailOpen));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.nodeDisplayName, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mapping.browsePath.length > 0);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("mapping", ctx.mapping);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("collapse", !ctx.isDetailOpen)("isAnimated", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDetailOpen);
    } }, directives: function () { return [ɵngcc4.NgClass, ɵngcc2.IconDirective, ɵngcc4.NgIf, ɵngcc2.C8yTranslateDirective, OpcuaDeviceProtocolObjectMappingStatus, ɵngcc3.CollapseDirective, ɵngcc1.NgControlStatusGroup, ɵngcc1.NgModelGroup, ɵngcc2.FormGroupComponent, ɵngcc7.BsDropdownDirective, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc1.DefaultValueAccessor, OpcuaDeviceProtocolBrowsePathValidation, ɵngcc7.BsDropdownToggleDirective, ɵngcc1.RequiredValidator, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc7.BsDropdownMenuDirective, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc1.RadioControlValueAccessor, OpcuaDeviceProtocolObjectMapping, OpcuaDeviceProtocolMappingCustomAction, OpcuaAddressSpaceTreeComponent, OpcuaDeviceProtocolDataReportingComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe, ɵngcc4.JsonPipe]; }, encapsulation: 2 });
OpcuaDeviceProtocolMapping.ctorParameters = () => [
    { type: AlertService },
    { type: AddressSpaceService }
];
OpcuaDeviceProtocolMapping.propDecorators = {
    objectMappingForm: [{ type: ViewChild, args: [OpcuaDeviceProtocolObjectMapping, { static: false },] }],
    subFormRef: [{ type: ViewChild, args: ['variableForm', { static: false },] }],
    browsePathModel: [{ type: ViewChild, args: ['browsePathModel', { static: false },] }],
    _model: [{ type: Input, args: ['resource',] }],
    index: [{ type: Input }],
    getParentAttr: [{ type: Input }],
    referencedServerId: [{ type: Input }],
    referencedRootNodeId: [{ type: Input }],
    onAction: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolMapping, [{
        type: Component,
        args: [{
                selector: 'opcua-device-protocol-mapping',
                template: "<div class=\"list-group-item collapsible\" [ngClass]=\"{ expanded: isDetailOpen }\">\n  <div class=\"flex-row\" (click)=\"toggleDetail()\">\n    <div class=\"list-item-actions\">\n      <button class=\"btn btn-clean showOnHover flex-item-right\" title=\"{{ 'Delete' | translate }}\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Expand' | translate }}\"\n        class=\"collapse-btn\"\n        [ngClass]=\"{ active: isDetailOpen }\"\n      >\n        <i c8yIcon=\"chevron-down\"></i>\n      </button>\n    </div>\n\n    <div class=\"list-item-icon\">\n      <i c8yIcon=\"sliders\"></i>\n    </div>\n\n    <div class=\"list-item-body\">\n      <div class=\"row flex-row\">\n        <div class=\"col-sm-7 col-xs-12\">\n          <p>\n            {{ nodeDisplayName }}<br />\n            <small\n              *ngIf=\"mapping.browsePath.length > 0\"\n              class=\"text-muted text-truncate\"\n              title=\"{{ mapping.browsePath | json }}\"\n              >{{ mapping.browsePath | json }}</small\n            >\n          </p>\n          <p></p>\n        </div>\n        <div class=\"col-sm-4 col-xs-10\">\n          <div class=\"list-functionalities\">\n            <label class=\"small m-r-8 hidden-xs\" translate>Functionalities</label>&nbsp;\n            <c8y-object-mapping-status-icons [mapping]=\"mapping\"></c8y-object-mapping-status-icons>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"detail\" [collapse]=\"!isDetailOpen\" [isAnimated]=\"true\">\n    <div class=\"form\" [ngModelGroup]=\"index\" #variableForm=\"ngModelGroup\" *ngIf=\"isDetailOpen\">\n      <div class=\"row p-t-8\">\n        <c8y-form-group class=\"col-md-4\" [status]=\"!isBrowsePathUniq ? 'error' : ''\">\n          <label translate>Path</label>\n          <div\n            class=\"dropdown\"\n            dropdown\n            #dropdown=\"bs-dropdown\"\n            [insideClick]=\"true\"\n            style=\"width:100%;\"\n          >\n            <input\n              class=\"form-control\"\n              c8yBrowsePathValidator\n              [getMappings]=\"getMappings\"\n              [model]=\"mapping\"\n              type=\"text\"\n              name=\"browsePath\"\n              dropdownToggle\n              placeholder=\"{{ 'e.g.' | translate }} {{ ['2:Node1', '2:SubNode1'] | json }}\"\n              [(ngModel)]=\"browsePath\"\n              (change)=\"updateBrowsePathInput()\"\n              (focus)=\"setTreeFromRefNode()\"\n              required\n              #browsePathModel=\"ngModel\"\n              autocomplete=\"off\"\n            />\n            <div\n              *dropdownMenu\n              class=\"dropdown-menu panel-inner-scroll\"\n              style=\"max-height:200px; width: 100%;\"\n            >\n              <opcua-address-space-tree\n                *ngIf=\"showAddressSpaceTree()\"\n                [node]=\"referencedNode\"\n                [moId]=\"referencedServerId\"\n                (selectedNode)=\"updateBrowsePath($event); dropdown.hide()\"\n              ></opcua-address-space-tree>\n            </div>\n          </div>\n          <c8y-messages>\n            <c8y-message\n              name=\"invalidBrowsePathNotation\"\n              text=\"{{ 'Must be a valid array of strings.' | translate }}\"\n            ></c8y-message>\n            <c8y-message\n              name=\"browsePathNotUnique\"\n              text=\"{{ 'Variable with this path is already added.' | translate }}\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group class=\"col-md-4\">\n          <label translate>Name</label>\n          <div class=\"input-group\">\n            <input\n              class=\"form-control\"\n              type=\"test\"\n              name=\"displayName\"\n              placeholder=\"{{ 'e.g. childDevice2' | translate }} \"\n              required\n              [(ngModel)]=\"nodeDisplayName\"\n              (change)=\"updateDisplayname()\"\n              autocomplete=\"off\"\n            />\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"row\" ngModelGroup=\"dataReportingSection\">\n        <c8y-form-group class=\"col-sm-4 col-md-3 col-lg-2\">\n          <label>\n            <span translate>Data reporting</span>\n          </label>\n          <div class=\"input-group\">\n            <label title=\"{{ 'Default' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"default\"\n              />\n              <span></span>\n              <span>{{ 'Default' | translate }}</span>\n            </label>\n            <label title=\"{{ 'Custom' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"custom\"\n              />\n              <span></span>\n              <span>{{ 'Custom' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n        <div\n          class=\"col-sm-8 col-md-9 col-lg-10\"\n          *ngIf=\"dataReporting === 'custom'\"\n          ngModelGroup=\"overriddenSubscription\"\n        >\n          <opcua-device-protocol-data-reporting\n            [model]=\"mapping\"\n          ></opcua-device-protocol-data-reporting>\n        </div>\n      </div>\n\n      <c8y-object-mapping [mapping]=\"mapping\" [hideAutoObserve]=\"true\"></c8y-object-mapping>\n      <div ngModelGroup=\"customAction\">\n        <opcua-device-protocol-mapping-customaction\n          [customAction]=\"customAction\"\n        ></opcua-device-protocol-mapping-customaction>\n      </div>\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        id=\"cancelBtn\"\n        class=\"btn btn-default m-t-16 m-b-16\"\n        (click)=\"cancel()\"\n      >\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        id=\"saveBtn\"\n        class=\"btn btn-primary m-t-16 m-b-16\"\n        (click)=\"save()\"\n        [disabled]=\"!canSave(variableForm)\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
            }]
    }], function () { return [{ type: ɵngcc2.AlertService }, { type: AddressSpaceService }]; }, { onAction: [{
            type: Output
        }], objectMappingForm: [{
            type: ViewChild,
            args: [OpcuaDeviceProtocolObjectMapping, { static: false }]
        }], subFormRef: [{
            type: ViewChild,
            args: ['variableForm', { static: false }]
        }], browsePathModel: [{
            type: ViewChild,
            args: ['browsePathModel', { static: false }]
        }], _model: [{
            type: Input,
            args: ['resource']
        }], index: [{
            type: Input
        }], getParentAttr: [{
            type: Input
        }], referencedServerId: [{
            type: Input
        }], referencedRootNodeId: [{
            type: Input
        }] }); })();

class OpcuaDeviceProtocolDetailComponent {
    constructor(changeDetectorRef, opcuaService, alertService, router) {
        this.changeDetectorRef = changeDetectorRef;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.router = router;
        this.initialModel = {
            id: '',
            fieldbusType: 'opcuaV2',
            description: '',
            unit: '',
            fieldbusVersion: 4,
            name: '',
            referencedServerId: '',
            referencedRootNodeId: '',
            subscriptionType: {
                type: 'None'
            },
            mappings: [],
            overriddenSubscriptions: [],
            applyConstraints: {
                browsePathMatchesRegex: '',
                matchesNodeIds: [],
                serverObjectHasFragment: '',
                matchesServerIds: []
            },
            enabled: ''
        };
        this.isLoaded = true;
        this.getParentAttr = key => get$1(this.model, key);
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    getMapping() {
        return this.model.mappings;
    }
    getEmptyMappingObject() {
        return {
            id: 'new',
            browsePath: []
        };
    }
    getOverriddenSubscriptionsByPath(browsePath) {
        return find(this.model.overriddenSubscriptions, { browsePath });
    }
    getStructuredResource(resource) {
        const overriddenSubscriptions = this.getOverriddenSubscriptionsByPath(resource.browsePath);
        let result = assign$1({}, resource);
        if (overriddenSubscriptions) {
            result = assign$1({}, resource, { subscriptionType: overriddenSubscriptions.subscriptionType });
        }
        return result;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const id = this.opcuaService.getId();
            if (id) {
                const res = yield this.opcuaService.getDeviceProtocol(id);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.isLoaded = false;
                }
                else {
                    const data = yield res.json();
                    if (data && data.applyConstraints === null) {
                        delete data.applyConstraints;
                    }
                    if (data && data.subscriptionType === null) {
                        delete data.subscriptionType;
                    }
                    this.model = assign$1(this.initialModel, data);
                    if (!this.model.mappings) {
                        this.model.mappings = [];
                    }
                    this.model = assign$1(this.initialModel, this.updateViableMapping(data));
                    this.isLoaded = false;
                }
            }
        });
    }
    updateViableMapping(model) {
        const { mappings } = model;
        let result = [];
        if (mappings) {
            result = mappings.map((item, i) => {
                return assign$1(item, { id: i });
            });
        }
        return assign$1(model, { mappings: result });
    }
    trackByIndex(index) {
        return index;
    }
    addVariable() {
        this.model.mappings.push(this.getEmptyMappingObject());
    }
    updateVariable(mappingObject) {
        const { mappings } = this.model;
        const index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
        if (mappingObject.id === 'new') {
            mappingObject.id = mappings.length;
        }
        mappings.push(mappingObject);
    }
    removeVariable(mappingObject) {
        const { mappings } = this.model;
        const index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
    }
    actionHandler(actionObject) {
        switch (actionObject.action) {
            case 'save':
                this.updateVariable(actionObject.data);
                break;
            case 'delete':
                this.removeVariable(actionObject.data);
                break;
        }
    }
    extractOverridSubscriptionType(_mapping) {
        const overriddenSubscriptions = [];
        const variableMapping = [];
        _mapping.forEach(element => {
            if (element.id !== 'new') {
                if (element.subscriptionType) {
                    overriddenSubscriptions.push(assign$1({ browsePath: element.browsePath }, { subscriptionType: element.subscriptionType }));
                }
                variableMapping.push(omit$1(element, ['subscriptionType']));
            }
        });
        return [variableMapping, overriddenSubscriptions];
    }
    prepareRequestJson(_model) {
        let requestJson = {};
        const [mappings, overriddenSubscriptions] = this.extractOverridSubscriptionType(_model.mappings);
        requestJson = assign$1(requestJson, pick(_model, Object.keys(this.initialModel)), {
            mappings,
            overriddenSubscriptions
        });
        return requestJson;
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.opcuaService.updateDeviceProtocol(this.prepareRequestJson(this.model));
                const data = yield res.json();
                if (res && res.status === 200) {
                    this.router.navigate(['deviceprotocols']);
                    this.alertService.success(gettext('Device protocol saved.'));
                }
                else {
                    const { details } = data;
                    this.alertService.addServerFailure({ res, data: details });
                }
            }
            catch (ex) {
                this.alertService.danger(gettext('Failed to save. Try again.'));
            }
        });
    }
    canSave(deviceTypeForm) {
        if (this.instanceList) {
            const activeInstances = this.instanceList.filter(item => item.isActive());
            if (activeInstances.length > 0) {
                return true;
            }
        }
        return !deviceTypeForm.form.valid;
    }
}
OpcuaDeviceProtocolDetailComponent.ɵfac = function OpcuaDeviceProtocolDetailComponent_Factory(t) { return new (t || OpcuaDeviceProtocolDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(OpcuaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.Router)); };
OpcuaDeviceProtocolDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaDeviceProtocolDetailComponent, selectors: [["opcua-device-protocol-detail"]], viewQuery: function OpcuaDeviceProtocolDetailComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(OpcuaDeviceProtocolMapping, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.instanceList = _t);
    } }, decls: 3, vars: 2, consts: [[4, "ngIf"], ["name", "detailForm", 4, "ngIf"], ["name", "detailForm"], ["deviceTypeForm", "ngForm"], [3, "model"], [1, "card", "m-b-4"], [1, "card-header", "separator"], ["translate", ""], ["class", "list-group", "ngModelGroup", "variable", 4, "ngIf"], [1, "card-block"], ["class", "c8y-empty-state text-left", 4, "ngIf"], [1, "btn-add-block", "addVariableBtn", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["ngModelGroup", "subscription", 1, "card-block"], [3, "groupName", "model"], [1, "card"], ["ngModelGroup", "autoApply", 1, "card-block", "overflow-visible"], [1, "text-center", "page-footer", "m-t-16"], [1, "btn-save-wrapper", "animated"], ["id", "deviceTypeSave", "translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"], ["ngModelGroup", "variable", 1, "list-group"], [3, "index", "referencedServerId", "referencedRootNodeId", "resource", "getParentAttr", "onAction", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "index", "referencedServerId", "referencedRootNodeId", "resource", "getParentAttr", "onAction"], [1, "c8y-empty-state", "text-left"], ["c8yIcon", "sliders"]], template: function OpcuaDeviceProtocolDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OpcuaDeviceProtocolDetailComponent_c8y_title_0_Template, 2, 1, "c8y-title", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵtemplate(2, OpcuaDeviceProtocolDetailComponent_form_2_Template, 33, 16, "form", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoaded);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoaded);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc2.TitleComponent, ɵngcc1.ɵNgNoValidate, ɵngcc1.NgControlStatusGroup, ɵngcc1.NgForm, OpcuaDeviceProtocolDescription, ɵngcc2.C8yTranslateDirective, ɵngcc2.IconDirective, ɵngcc1.NgModelGroup, OpcuaDeviceProtocolDataReportingComponent, OpcuaAutoApplySettingsComponent, ɵngcc4.NgForOf, OpcuaDeviceProtocolMapping]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
OpcuaDeviceProtocolDetailComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: OpcuaService },
    { type: AlertService },
    { type: Router }
];
OpcuaDeviceProtocolDetailComponent.propDecorators = {
    instanceList: [{ type: ViewChildren, args: [OpcuaDeviceProtocolMapping,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolDetailComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-device-protocol-detail',
                template: "<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<div>\n  <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\">\n    <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Variables</h4>\n      </div>\n      <div class=\"list-group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n        <opcua-device-protocol-mapping\n          *ngFor=\"let resource of getMapping(); trackBy: trackByIndex; let i = index\"\n          [index]=\"i\"\n          [referencedServerId]=\"model.referencedServerId\"\n          [referencedRootNodeId]=\"model.referencedRootNodeId\"\n          [resource]=\"getStructuredResource(resource)\"\n          [getParentAttr]=\"getParentAttr\"\n          (onAction)=\"actionHandler($event)\"\n        >\n        </opcua-device-protocol-mapping>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-empty-state text-left\" *ngIf=\"model.mappings.length === 0\">\n          <h1 c8yIcon=\"sliders\"></h1>\n          <p translate>No variables to display. Click below to add.</p>\n        </div>\n        <button\n          title=\"{{ 'Add variable' | translate }}\"\n          class=\"btn-add-block addVariableBtn\"\n          (click)=\"addVariable()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'Add variable' | translate }}\n        </button>\n      </div>\n    </div>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Data reporting</h4>\n      </div>\n      <div class=\"card-block\" ngModelGroup=\"subscription\">\n        <opcua-device-protocol-data-reporting\n          [groupName]=\"'subscription'\"\n          [model]=\"model\"\n        ></opcua-device-protocol-data-reporting>\n      </div>\n    </div>\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 translate>Auto apply constraints</h4>\n      </div>\n      <div class=\"card-block overflow-visible\" ngModelGroup=\"autoApply\">\n        <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n      </div>\n    </div>\n\n    <span>\n      <div class=\"text-center page-footer m-t-16\">\n        <div class=\"btn-save-wrapper animated\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            translate\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </span>\n  </form>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: OpcuaService }, { type: ɵngcc2.AlertService }, { type: ɵngcc6.Router }]; }, { instanceList: [{
            type: ViewChildren,
            args: [OpcuaDeviceProtocolMapping]
        }] }); })();

class OpcuaDeviceProtocolDataReportingComponent {
    constructor() {
        this.onSubscriptionChange = new EventEmitter();
        this.subscription = {
            type: 'None'
        };
        this.subscriptionParameters = {
            samplingRate: undefined,
            deadbandType: 'None',
            deadbandValue: undefined,
            ranges: '',
            queueSize: undefined,
            dataChangeTrigger: 'Status',
            discardOldest: true
        };
        this.cyclicReadParameters = {
            rate: undefined
        };
        this.types = [
            { value: 'None', label: gettext('None') },
            { value: 'CyclicRead', label: gettext('Cyclic read') },
            { value: 'Subscription', label: gettext('Subscription') }
        ];
        this.filters = [
            { value: 'None', label: gettext('None') },
            { value: 'absolute', label: gettext('Absolute') },
            { value: 'percent', label: gettext('Percent') }
        ];
        this.triggers = [
            { value: 'Status', label: gettext('Status') },
            { value: 'StatusValue', label: gettext('Status/Value') },
            { value: 'StatusValueTimestamp', label: gettext('Status/Value/Timestamp') }
        ];
        this.discard = [
            { value: true, label: gettext('oldest`data`') },
            { value: false, label: gettext('newest`data`') }
        ];
        this.requireCyclic = false;
        this.requireSubscription = false;
        this.subscriptionTypeName = 'subscriptionType';
        this.parseReadingInterval = $event => toInteger($event.target.value);
    }
    set model(_model) {
        if (_model.subscriptionType) {
            this.subscription = _model.subscriptionType;
            if (this.subscription.type === 'CyclicRead') {
                this.cyclicReadParameters = _model.subscriptionType.cyclicReadParameters;
                this.requireCyclic = true;
                this.requireSubscription = false;
            }
            if (this.subscription.type === 'Subscription') {
                this.subscriptionParameters = _model.subscriptionType.subscriptionParameters;
                this.requireCyclic = false;
                this.requireSubscription = true;
            }
            if (this.subscription.type === 'None') {
                this.requireCyclic = false;
                this.requireSubscription = false;
            }
        }
        this._model = _model;
        this.subscriptionTypeName = 'subscriptionType' + _model.id;
    }
    updateModel() {
        setTimeout(() => {
            unset$1(this.subscription, 'subscriptionParameters');
            unset$1(this.subscription, 'cyclicReadParameters');
            if (this.subscription.type === 'CyclicRead') {
                this.requireCyclic = true;
                this.requireSubscription = false;
                set$1(this.subscription, 'cyclicReadParameters', this.cyclicReadParameters);
            }
            else if (this.subscription.type === 'Subscription') {
                this.requireCyclic = false;
                this.requireSubscription = true;
                set$1(this.subscription, 'subscriptionParameters', this.subscriptionParameters);
            }
            else if (this.subscription.type === 'None') {
                this.requireCyclic = false;
                this.requireSubscription = false;
            }
        });
    }
}
OpcuaDeviceProtocolDataReportingComponent.ɵfac = function OpcuaDeviceProtocolDataReportingComponent_Factory(t) { return new (t || OpcuaDeviceProtocolDataReportingComponent)(); };
OpcuaDeviceProtocolDataReportingComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaDeviceProtocolDataReportingComponent, selectors: [["opcua-device-protocol-data-reporting"]], inputs: { model: "model", groupName: "groupName" }, outputs: { onSubscriptionChange: "onSubscriptionChange" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgModelGroup }])], decls: 56, vars: 38, consts: [["translate", ""], ["class", "c8y-radio radio-inline", 3, "title", 4, "ngFor", "ngForOf"], [1, "row", "collapse", 3, "collapse", "isAnimated"], [1, "col-sm-6", "col-md-4", "col-lg-3"], [1, "input-group"], ["type", "number", "name", "rate", "min", "50", 1, "form-control", 3, "ngModel", "placeholder", "required", "ngModelChange"], [1, "input-group-addon", "units", 3, "title"], [1, "col-sm-6", "col-lg-4"], ["type", "number", "name", "samplingRate", "min", "0", 1, "form-control", 3, "ngModel", "placeholder", "required", "ngModelChange"], ["translate", "", 1, "input-group-addon", "units", 3, "title"], ["type", "number", "name", "queueSize", "min", "1", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], [1, "input-group-addon"], [1, "clearfix"], [3, "collapse", "isAnimated"], ["type", "number", "name", "deadbandValue", "min", "0", 1, "form-control", 3, "ngModel", "placeholder", "required", "ngModelChange"], [1, "c8y-radio", "radio-inline", 3, "title"], ["type", "radio", "required", "", 3, "name", "value", "ngModel", "ngModelChange", "change"], ["type", "radio", "name", "discard", 3, "value", "ngModel", "required", "ngModelChange"], ["type", "radio", "name", "dataChangeTrigger", 3, "value", "ngModel", "required", "ngModelChange"], ["type", "radio", "name", "deadbandType", 3, "value", "ngModel", "required", "ngModelChange"]], template: function OpcuaDeviceProtocolDataReportingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2, "Mechanism");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, OpcuaDeviceProtocolDataReportingComponent_label_3_Template, 7, 9, "label", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(7, "label", 0);
        ɵngcc0.ɵɵtext(8, "Reading interval");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelementStart(10, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_Template_input_ngModelChange_10_listener($event) { return ctx.cyclicReadParameters.rate = $event; });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "span", 6);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 2);
        ɵngcc0.ɵɵelementStart(17, "div", 7);
        ɵngcc0.ɵɵelementStart(18, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(19, "label", 0);
        ɵngcc0.ɵɵtext(20, "Sampling interval");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 4);
        ɵngcc0.ɵɵelementStart(22, "input", 8);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_Template_input_ngModelChange_22_listener($event) { return ctx.subscriptionParameters.samplingRate = $event; });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "span", 9);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵtext(26, " msec ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "div", 7);
        ɵngcc0.ɵɵelementStart(28, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(29, "label", 0);
        ɵngcc0.ɵɵtext(30, "Queue size");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "div", 4);
        ɵngcc0.ɵɵelementStart(32, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_Template_input_ngModelChange_32_listener($event) { return ctx.subscriptionParameters.queueSize = $event; });
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(34, "span", 11);
        ɵngcc0.ɵɵelementStart(35, "strong", 0);
        ɵngcc0.ɵɵtext(36, "Discard");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(37, "\u00A0 ");
        ɵngcc0.ɵɵtemplate(38, OpcuaDeviceProtocolDataReportingComponent_label_38_Template, 7, 9, "label", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(39, "div", 12);
        ɵngcc0.ɵɵelementStart(40, "div", 7);
        ɵngcc0.ɵɵelementStart(41, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(42, "label", 0);
        ɵngcc0.ɵɵtext(43, "Data change trigger");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(44, OpcuaDeviceProtocolDataReportingComponent_label_44_Template, 7, 9, "label", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(45, "div", 7);
        ɵngcc0.ɵɵelementStart(46, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(47, "label", 0);
        ɵngcc0.ɵɵtext(48, "Deadband filter");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(49, OpcuaDeviceProtocolDataReportingComponent_label_49_Template, 7, 9, "label", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(50, "div", 13);
        ɵngcc0.ɵɵelementStart(51, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(52, "label", 0);
        ɵngcc0.ɵɵtext(53, "Deadband value");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(54, "input", 14);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDataReportingComponent_Template_input_ngModelChange_54_listener($event) { return ctx.subscriptionParameters.deadbandValue = $event; });
        ɵngcc0.ɵɵpipe(55, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.types);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("collapse", ctx.subscription.type != "CyclicRead")("isAnimated", true);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(11, 24, "e.g."), " 50");
        ɵngcc0.ɵɵproperty("ngModel", ctx.cyclicReadParameters.rate)("required", ctx.requireCyclic);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 26, "Milliseconds"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 28, "msec"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("collapse", ctx.subscription.type != "Subscription")("isAnimated", true);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(23, 30, "e.g."), " 500");
        ɵngcc0.ɵɵproperty("ngModel", ctx.subscriptionParameters.samplingRate)("required", ctx.requireSubscription);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 32, "Milliseconds"));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(33, 34, "e.g."), " 10");
        ɵngcc0.ɵɵproperty("ngModel", ctx.subscriptionParameters.queueSize);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.discard);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.triggers);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filters);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("collapse", ctx.subscriptionParameters.deadbandType == "None")("isAnimated", true);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(55, 36, "e.g."), " 10");
        ɵngcc0.ɵɵproperty("ngModel", ctx.subscriptionParameters.deadbandValue)("required", ctx.subscriptionParameters.deadbandType != "None");
    } }, directives: [ɵngcc2.FormGroupComponent, ɵngcc2.C8yTranslateDirective, ɵngcc4.NgForOf, ɵngcc3.CollapseDirective, ɵngcc1.MinValidator, ɵngcc1.NumberValueAccessor, ɵngcc1.DefaultValueAccessor, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc2.MinValidationDirective, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc1.RequiredValidator, ɵngcc1.RadioControlValueAccessor], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaDeviceProtocolDataReportingComponent.propDecorators = {
    model: [{ type: Input }],
    groupName: [{ type: Input }],
    onSubscriptionChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolDataReportingComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-device-protocol-data-reporting',
                template: "<c8y-form-group>\n  <label translate>Mechanism</label>\n  <label\n    title=\"{{ mechanism.label | translate }}\"\n    class=\"c8y-radio radio-inline\"\n    *ngFor=\"let mechanism of types\"\n  >\n    <input\n      type=\"radio\"\n      name=\"{{subscriptionTypeName}}\"\n      [value]=\"mechanism.value\"\n      [(ngModel)]=\"subscription.type\"\n      (change)=\"updateModel()\"\n      required\n    />\n    <span></span>\n    <span>{{ mechanism.label | translate }}</span>\n  </label>\n</c8y-form-group>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'CyclicRead'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-md-4 col-lg-3\">\n    <c8y-form-group>\n      <label translate>Reading interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"rate\"\n          [(ngModel)]=\"cyclicReadParameters.rate\"\n          placeholder=\"{{ 'e.g.' | translate }} 50\"\n          [required]=\"requireCyclic\"\n          min=\"50\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\">\n          {{ 'msec' | translate }}\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n</div>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'Subscription'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Sampling interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"samplingRate\"\n          [(ngModel)]=\"subscriptionParameters.samplingRate\"\n          placeholder=\"{{ 'e.g.' | translate }} 500\"\n          [required]=\"requireSubscription\"\n          min=\"0\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\" translate>\n          msec\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Queue size</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"queueSize\"\n          [(ngModel)]=\"subscriptionParameters.queueSize\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          min=\"1\"\n        />\n        <span class=\"input-group-addon\">\n          <strong translate>Discard</strong>&nbsp;\n          <label\n            *ngFor=\"let discardOption of discard\"\n            title=\"{{ discardOption.label | translate }}\"\n            class=\"c8y-radio radio-inline\"\n          >\n            <input\n              type=\"radio\"\n              name=\"discard\"\n              [value]=\"discardOption.value\"\n              [(ngModel)]=\"subscriptionParameters.discardOldest\"\n              [required]=\"requireSubscription\"\n            />\n            <span></span>\n            <span>{{ discardOption.label | translate }}</span>\n          </label>\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"clearfix\"></div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Data change trigger</label>\n      <label\n        *ngFor=\"let trigger of triggers\"\n        title=\"{{ trigger.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"dataChangeTrigger\"\n          [value]=\"trigger.value\"\n          [(ngModel)]=\"subscriptionParameters.dataChangeTrigger\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ trigger.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Deadband filter</label>\n      <label\n        *ngFor=\"let deadbandFilter of filters\"\n        title=\"{{ deadbandFilter.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"deadbandType\"\n          [value]=\"deadbandFilter.value\"\n          [(ngModel)]=\"subscriptionParameters.deadbandType\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ deadbandFilter.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n    <div [collapse]=\"subscriptionParameters.deadbandType == 'None'\" [isAnimated]=\"true\">\n      <c8y-form-group>\n        <label translate>Deadband value</label>\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"deadbandValue\"\n          [(ngModel)]=\"subscriptionParameters.deadbandValue\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          [required]=\"subscriptionParameters.deadbandType != 'None'\"\n          min=\"0\"\n        />\n      </c8y-form-group>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
            }]
    }], function () { return []; }, { onSubscriptionChange: [{
            type: Output
        }], model: [{
            type: Input
        }], groupName: [{
            type: Input
        }] }); })();

class OpcuaDeviceProtocolObjectMappingStatus extends UpgradeComponent {
    constructor(elementRef, injector) {
        super('c8yObjectMappingStatusIcons', elementRef, injector);
    }
}
OpcuaDeviceProtocolObjectMappingStatus.ɵfac = function OpcuaDeviceProtocolObjectMappingStatus_Factory(t) { return new (t || OpcuaDeviceProtocolObjectMappingStatus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
OpcuaDeviceProtocolObjectMappingStatus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OpcuaDeviceProtocolObjectMappingStatus, selectors: [["c8y-object-mapping-status-icons"]], inputs: { mapping: "mapping" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
OpcuaDeviceProtocolObjectMappingStatus.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
OpcuaDeviceProtocolObjectMappingStatus.propDecorators = {
    mapping: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolObjectMappingStatus, [{
        type: Directive,
        args: [{
                selector: 'c8y-object-mapping-status-icons'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Injector }]; }, { mapping: [{
            type: Input
        }] }); })();

class OpcuaAddressSpaceComponent {
    constructor(addressSpaceService, opcuaService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.selectednode = false;
        this.loading = false;
        this.searchInProgress = false;
        this.focusStatus = new EventEmitter();
        this.moId = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.filterLabel = gettext('Filter…');
            this.moId = this.opcuaService.getMoId();
        });
    }
    ngOnDestroy() {
        // The BehaviourSubject will store the last array of ancestorNodes from the previous search
        // this would cause the component while subscribing in the init-phase to the subject to travers
        // to the last searched node again. From user perspective it does not make sense, because the user
        // left the Address space (tab) and should loose the context and just request a new search or
        // browse the tree manually.
        this.addressSpaceService.resetTreeToRootNode();
    }
    searchNodes() {
        return __awaiter(this, void 0, void 0, function* () {
            this.searchInProgress = true;
            this.clearNodeListAndCheckSearchString();
            if (this.isSearch) {
                this.currentNode = undefined;
                this.nodeList = yield this.addressSpaceService.getSearchedNodes(this.searchKey, this.moId);
                this.searchInProgress = false;
                this.nodeList.resultLabel = gettext('Results found');
            }
        });
    }
    clearNodeListAndCheckSearchString() {
        this.isSearch = this.searchKey !== undefined && this.searchKey !== '' ? true : false;
        if (!this.isSearch) {
            this.searchInProgress = false;
        }
    }
    clearSearch() {
        this.isSearch = false;
        this.searchKey = '';
        this.currentNode = undefined;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    selectNode(node) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node && node.nodeId && node.nodeId.length > 0) {
                const res = yield this.addressSpaceService.getNodeById(this.moId, node.nodeId);
                this.toggleCurrentNode((yield res.json()));
            }
        });
    }
    toggleCurrentNode(node) {
        this.currentNode = this.isNodeSet(node) ? undefined : node;
    }
    backHandler(node) {
        this.isSearch = false;
        this.focusStatus.emit(node);
        this.toggleCurrentNode(node);
    }
    isNodeSet(node) {
        if (this.currentNode !== undefined && this.currentNode.nodeId === node.nodeId) {
            return true;
        }
        return false;
    }
}
OpcuaAddressSpaceComponent.ɵfac = function OpcuaAddressSpaceComponent_Factory(t) { return new (t || OpcuaAddressSpaceComponent)(ɵngcc0.ɵɵdirectiveInject(AddressSpaceService), ɵngcc0.ɵɵdirectiveInject(OpcuaService)); };
OpcuaAddressSpaceComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaAddressSpaceComponent, selectors: [["opcua-address-space"]], outputs: { focusStatus: "focusStatus" }, decls: 15, vars: 11, consts: [[1, "row", "split-scroll"], [1, "col-md-5", "col-xs-12", "scroll-column", "no-gutter-r"], [1, "card", "bg-gray-lighter", "split-scroll", "flex-scroll"], [1, "card-block", "separator-bottom"], [1, "input-group", "input-group-search", 2, "margin", "-4px 0"], ["type", "search", 1, "form-control", 3, "placeholder", "ngModel", "keydown.enter", "ngModelChange"], [1, "input-group-btn"], ["type", "submit", "class", "btn btn-clean", 3, "click", 4, "ngIf"], ["class", "btn btn-clean", 3, "click", 4, "ngIf"], ["class", "p-t-16", 4, "ngIf"], ["class", "p-8", 4, "ngIf"], ["class", "flex-content-scroll", 4, "ngIf"], [1, "col-md-7", "col-xs-12", "scroll-column", "no-gutter-l", 2, "pointer-events", "none", 3, "node", "toggleAttrDetail"], ["type", "submit", 1, "btn", "btn-clean", 3, "click"], ["c8yIcon", "search"], [1, "btn", "btn-clean", 3, "click"], ["c8yIcon", "times"], [1, "p-t-16"], [4, "ngIf"], [1, "badge", "badge-info"], [1, "p-8"], [1, "spinner", "p-relative"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], [1, "flex-content-scroll"], ["class", "list-group list-group-links", 4, "ngIf"], [1, "list-group", "list-group-links"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], [3, "ngClass", "click"], [1, "list-group-icon", "m-r-4"], [1, "m-r-4", 3, "c8yIcon"], [1, "list-item-body", "text-truncate"], ["tile", "nodeId"], [3, "focusEmitter", "selectedNode"]], template: function OpcuaAddressSpaceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "input", 5);
        ɵngcc0.ɵɵlistener("keydown.enter", function OpcuaAddressSpaceComponent_Template_input_keydown_enter_5_listener() { return ctx.searchNodes(); })("ngModelChange", function OpcuaAddressSpaceComponent_Template_input_ngModelChange_5_listener($event) { return ctx.searchKey = $event; });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "span", 6);
        ɵngcc0.ɵɵtemplate(8, OpcuaAddressSpaceComponent_button_8_Template, 2, 0, "button", 7);
        ɵngcc0.ɵɵtemplate(9, OpcuaAddressSpaceComponent_button_9_Template, 2, 0, "button", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, OpcuaAddressSpaceComponent_div_10_Template, 2, 1, "div", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, OpcuaAddressSpaceComponent_div_11_Template, 7, 0, "div", 10);
        ɵngcc0.ɵɵtemplate(12, OpcuaAddressSpaceComponent_div_12_Template, 2, 1, "div", 11);
        ɵngcc0.ɵɵtemplate(13, OpcuaAddressSpaceComponent_div_13_Template, 2, 1, "div", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "opcua-address-space-detail", 12);
        ɵngcc0.ɵɵlistener("toggleAttrDetail", function OpcuaAddressSpaceComponent_Template_opcua_address_space_detail_toggleAttrDetail_14_listener($event) { return ctx.backHandler($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(6, 9, ctx.filterLabel));
        ɵngcc0.ɵɵproperty("ngModel", ctx.searchKey);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearch && !ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearch && ctx.loading || ctx.searchInProgress);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearch && !ctx.loading && !ctx.searchInProgress);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("node", ctx.currentNode);
    } }, directives: function () { return [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc4.NgIf, OpcuaAddressSpaceDetailComponent, ɵngcc2.IconDirective, ɵngcc4.NgForOf, ɵngcc4.NgClass, OpcuaAddressSpaceTreeComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
OpcuaAddressSpaceComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService }
];
OpcuaAddressSpaceComponent.propDecorators = {
    focusStatus: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAddressSpaceComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-address-space',
                template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-gray-lighter split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -4px 0;\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button *ngIf=\"!isSearch\" type=\"submit\" class=\"btn btn-clean\" (click)=\"searchNodes()\">\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button *ngIf=\"isSearch\" class=\"btn btn-clean\" (click)=\"clearSearch()\">\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em\n            >&nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div class=\"p-8\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <div class=\"spinner p-relative\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div\n          class=\"list-group list-group-links\"\n          *ngIf=\"isSearch && !loading\"\n          >\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item flex-row': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"m-r-4\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span>\n              {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none;\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n"
            }]
    }], function () { return [{ type: AddressSpaceService }, { type: OpcuaService }]; }, { focusStatus: [{
            type: Output
        }] }); })();

class OpcuaMicroserviceGuard {
    constructor(app) {
        this.app = app;
        this.microserviceName = 'opcua-mgmt-service';
    }
    canActivate() {
        if (!this.checkApp) {
            this.checkApp = this.app.isApplicationAvailable(this.microserviceName);
        }
        return this.checkApp;
    }
}
OpcuaMicroserviceGuard.ɵfac = function OpcuaMicroserviceGuard_Factory(t) { return new (t || OpcuaMicroserviceGuard)(ɵngcc0.ɵɵinject(ɵngcc2.AppStateService)); };
OpcuaMicroserviceGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpcuaMicroserviceGuard, factory: OpcuaMicroserviceGuard.ɵfac });
OpcuaMicroserviceGuard.ctorParameters = () => [
    { type: AppStateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaMicroserviceGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.AppStateService }]; }, null); })();

class OpcuaServerConfigComponent {
    constructor(opcuaService) {
        this.fileName = '';
        this.targetConnectionState = '1';
        this.minIntervalNumber = 1;
        this.connectionStatusLabel = '';
        this.canceled = new EventEmitter();
        this.removed = new EventEmitter();
        this.saved = new EventEmitter();
        this.changePassword = false;
        this.initialPasswordRequired = true;
        this.NONE = 'NONE';
        this.SIGN = 'SIGN';
        this.SIGN_ENC = 'SIGN_ENCRYPT';
        this.securityPolicies = {
            sign: [
                `BASIC256_${this.SIGN}`,
                `BASIC128RSA15_${this.SIGN}`,
                `BASIC256SHA256_${this.SIGN}`
            ],
            sign_enc: [
                `BASIC256_${this.SIGN_ENC}`,
                `BASIC128RSA15_${this.SIGN_ENC}`,
                `BASIC256SHA256_${this.SIGN_ENC}`,
            ]
        };
        this.ANONYM = {
            id: 1,
            value: gettext('Anonymous')
        };
        this.USER_PASSWORD = {
            id: 2,
            value: gettext('Username/Password')
        };
        this.KEY_BASED = {
            id: 3,
            value: gettext('Key-based Authentication')
        };
        this.initialKeystore = {
            lastModified: 0,
            name: '',
            type: '',
            slice: null,
            size: 0
        };
        this.keystore = this.initialKeystore;
        this.authSwitch = false;
        this.opcuaService = opcuaService;
    }
    set server(server) {
        if (server) {
            this._server = cloneDeep(server);
            this.model = cloneDeep(server);
            this.fileName = this.model.config.keystoreFilename;
            if (server.id && server.id === 'new') {
                // enabled connection state
                this.targetConnectionState = '1';
                this.model.config.targetConnectionState = 'enabled';
            }
            else {
                this.targetConnectionState = (this.model.config.targetConnectionState === 'enabled') ? '1' : '0';
            }
            this.updateConnectionStatusLabel(this._server);
            this.setNewPassword();
        }
    }
    get server() {
        return this._server;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.authSwitch = false;
            this.securityModes = [
                this.NONE,
                this.SIGN,
                this.SIGN_ENC
            ];
            this.authenticationModes = [
                this.ANONYM,
                this.USER_PASSWORD,
                this.KEY_BASED
            ];
            this.setCurrentAuthenticationMode();
            this.setCurrentSecurityMode();
        });
    }
    ngOnChanges() {
        this.setCurrentSecurityMode();
        this.setCurrentAuthenticationMode();
    }
    cancel() {
        this.canceled.emit(this.model);
        this._server = null;
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeKeystore(this.model);
            this.removed.emit(this.model);
            this._server = null;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.keystore && this.keystore.size > 0 && this.keystore.name && this.keystore.name.length > 0) {
                const response = yield this.uploadKeystore(this.model.config.keystoreBinaryId);
                if (response && response.data && response.data.id) {
                    this.model.config.keystoreBinaryId = response.data.id;
                }
                // if the keystore was uploaded successful we can remove
                // the local keystore. This will prevent another request to binary api
                // when the user will edit other inputs in the form and hit save again.
                this.keystore = this.initialKeystore;
            }
            // will remove keystore (binary) when the user switched
            // authentication settings from key-based to anonymous or username/password
            if (this.authSwitch) {
                this.removeKeystore(this.server);
            }
            // when the user sets a new password, make sure to mark it as
            // "not encrypted" by setting passwordEncrypted to false
            const userPassword = this.getModelConfig('userPassword');
            if (userPassword && userPassword.length > 0) {
                this.model.config.passwordEncrypted = false;
            }
            this.saved.emit(this.model);
        });
    }
    uploadFile(droppedFiles) {
        if (droppedFiles.length === 1) {
            this.keystore = droppedFiles[0].file;
            this.fileName = this.keystore.name;
        }
        else {
            // dropped more than one file
            console.warn('Tried to import... Import aborted.');
        }
    }
    setPolicy(data) {
        if (data === this.NONE) {
            this.model.config.securityMode = this.NONE;
        }
        else if (data === this.SIGN) {
            this.model.config.securityMode = this.securityPolicies.sign[0];
        }
        else if (data === this.SIGN_ENC) {
            this.model.config.securityMode = this.securityPolicies.sign_enc[0];
        }
    }
    setServerConnection(data) {
        this.model.config.targetConnectionState = (data !== '0') ? 'enabled' : 'disabled';
    }
    updateAuthentication(data) {
        if (data && data.id) {
            switch (data.id) {
                // Anonymous
                case 1:
                    this.resetUserAuthentication();
                    this.resetKeyBasedAuthentication();
                    break;
                // User/Password
                case 2:
                    this.resetKeyBasedAuthentication();
                    this.restoreUserData();
                    this.setNewPassword();
                    break;
                // Key-based
                case 3:
                    this.resetUserAuthentication();
                    this.restoreKeyBasedData();
                    break;
                default:
                    console.warn('Invalid authentication id', data.id);
                    break;
            }
        }
    }
    updateConnectionStatusLabel(server) {
        const connected = server.c8y_Connection && server.c8y_Connection.status === 'CONNECTED';
        const label = connected ? gettext('Connected') : gettext('Disconnected');
        this.connectionStatusLabel = label;
    }
    setNewPassword() {
        const username = this.getModelConfig('userName');
        if (username && username.length > 0) {
            // userName is given, NO need to change the password because it is already set
            this.changePassword = false;
            this.initialPasswordRequired = false;
        }
        else {
            // no userName in response, so require the user to set the initial pw
            this.changePassword = true;
            this.initialPasswordRequired = true;
        }
    }
    toggleChangePassword() {
        this.changePassword = !this.changePassword;
        // When the user hides the pw-input field but has entered a
        // string to it before, we need to discard the changes reflected in the model
        // otherwise we PUT it with the model when user hits the save button
        if (!this.changePassword) {
            if (this.getModelConfig('userPassword')) {
                delete this.model.config.userPassword;
            }
        }
    }
    uploadKeystore(binaryId) {
        if (!binaryId) {
            return this.opcuaService.uploadKeystore(this.keystore);
        }
        else if (binaryId && binaryId.length > 0) {
            // update existing binary
            return this.opcuaService.updateKeystore(binaryId, this.keystore);
        }
    }
    removeKeystore(server) {
        if (server &&
            server.config &&
            server.config.keystoreBinaryId &&
            server.config.keystoreBinaryId.length > 0) {
            this.authSwitch = false;
            return this.opcuaService.removeKeystore(this.server.config.keystoreBinaryId);
        }
    }
    resetUserAuthentication() {
        this.model.config.userName = null;
        this.model.config.userPassword = null;
        this.model.config.userIdentityMode = 'none';
    }
    resetKeyBasedAuthentication() {
        this.authSwitch = true;
        this.model.config.keystorePass = null;
        this.model.config.certificatePass = null;
        this.model.config.keystoreBinaryId = '';
        this.model.config.keystoreFilename = '';
        this.model.config.userIdentityMode = 'none';
    }
    restoreUserData() {
        this.model.config.userName = this._server.config.userName;
        this.model.config.userIdentityMode = 'userAndPassword';
    }
    restoreKeyBasedData() {
        this.authSwitch = false;
        this.model.config.keystorePass = this._server.config.keystorePass;
        this.model.config.certificatePass = this._server.config.certificatePass;
        this.model.config.keystoreBinaryId = this._server.config.keystoreBinaryId;
        this.model.config.keystoreFilename = this._server.config.keystoreFilename;
        this.model.config.userIdentityMode = 'certificate';
    }
    getServerConfig() {
        let cfg = {
            securityMode: this.NONE,
            userIdentityMode: 'none'
        };
        if (this.server && this.server.config) {
            cfg = this.server.config;
        }
        return cfg;
    }
    setCurrentSecurityMode() {
        const { securityMode } = this.getServerConfig();
        if (securityMode) {
            const foundInSign = this.securityPolicies.sign.find((el) => el === securityMode);
            if (foundInSign) {
                this.currentSecMode = this.SIGN;
            }
            else {
                const foundInSignEncrypt = this.securityPolicies.sign_enc.find((el) => el === securityMode);
                foundInSignEncrypt ? this.currentSecMode = this.SIGN_ENC : this.currentSecMode = this.NONE;
            }
        }
    }
    setCurrentAuthenticationMode() {
        const { userIdentityMode } = this.getServerConfig();
        switch (userIdentityMode) {
            case 'certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            case 'userAndPassword':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Anonymous':
                this.authenticationMode = this.ANONYM;
                break;
            case 'UserName':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            default:
                this.authenticationMode = this.ANONYM;
                break;
        }
    }
    getModelConfig(fragment) {
        if (this.model && this.model.config) {
            if (fragment && fragment.length > 0) {
                return has(this.model.config, fragment) ? this.model.config[`${fragment}`] : undefined;
            }
        }
        return undefined;
    }
}
OpcuaServerConfigComponent.ɵfac = function OpcuaServerConfigComponent_Factory(t) { return new (t || OpcuaServerConfigComponent)(ɵngcc0.ɵɵdirectiveInject(OpcuaService)); };
OpcuaServerConfigComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaServerConfigComponent, selectors: [["opcua-server-config"]], viewQuery: function OpcuaServerConfigComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c7, 5);
        ɵngcc0.ɵɵviewQuery(DropAreaComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.opcuaConfigForm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropArea = _t.first);
    } }, inputs: { server: "server" }, outputs: { canceled: "canceled", removed: "removed", saved: "saved" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["class", "c8y-empty-state m-t-24", "ng-if", "!vm.editInstruction.type", 4, "ngIf"], ["class", "d-contents", 4, "ngIf"], ["ng-if", "!vm.editInstruction.type", 1, "c8y-empty-state", "m-t-24"], ["c8yIcon", "server", 1, "c8y-icon", "c8y-icon-duocolor"], [1, "d-contents"], ["opcuaConfigForm", "ngForm"], [1, "card-header", "large-padding", "separator", "sticky-top", "visible-sm", "visible-xs"], [1, "btn", "btn-clean", "text-primary", "visible-sm", "visible-xs", 3, "title", "click"], ["c8yIcon", "chevron-left"], ["translate", ""], [1, "flex-grow"], [1, "card-block", "large-padding"], [1, "m-b-8"], ["type", "text", "id", "name", "name", "name", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["name", "required", 3, "text"], [1, "card-block", "large-padding", "bg-gray-lighter"], [1, "tight-grid"], [1, "col-sm-6"], ["translate", "", 2, "width", "100%"], ["type", "button", "name", "serverConnection", "btnCheckbox", "", "btnCheckboxTrue", "1", "btnCheckboxFalse", "0", 1, "btn", "m-t-4", 3, "ngModel", "ngModelChange"], ["translate", "", 3, "title", "hidden"], [1, "form-control-static"], [1, "p-r-8", 3, "mo"], ["for", "configServerUrl", "translate", ""], ["type", "text", "id", "configServerUrl", "name", "serverUrl", "c8yDefaultValidation", "opcuaBrowsePath", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], [1, "content-flex-32"], [1, "col-6"], ["for", "config.timeout", "translate", ""], [1, "input-group"], ["type", "number", "id", "config.timeout", "name", "timeout", "required", "", 1, "form-control", 3, "min", "placeholder", "ngModel", "ngModelChange"], ["translate", "", 1, "input-group-addon", "units"], ["for", "config.statusCheckInterval", "translate", ""], ["type", "number", "id", "config.statusCheckInterval", "name", "statusCheckInterval", "required", "", 1, "form-control", 3, "min", "placeholder", "ngModel", "ngModelChange"], [1, "col-md-6"], [1, "form-group"], ["for", "config.securityMode", "translate", ""], [1, "c8y-select-wrapper"], ["id", "config.securityMode", "name", "securityMode", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], ["class", "col-md-6", 4, "ngIf"], ["for", "config.authenticationMode", "translate", ""], ["id", "config.authenticationMode", "name", "authenticationMode", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["class", "tight-grid", 4, "ngIf"], [1, "card-footer", "large-padding", "separator", "sticky-bottom"], ["translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", 1, "btn", "btn-danger", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"], [3, "ngValue"], ["for", "config.securityPolicy", "translate", ""], ["type", "text", "id", "config.securityPolicy", "name", "securityPolicy", "required", "", 1, "form-control", 3, "readonly", "ngModel", "ngModelChange"], ["class", "form-control", "id", "config.securityPolicy", "name", "securityPolicy", "required", "", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["id", "config.securityPolicy", "name", "securityPolicy", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], [1, "col-md-12"], ["for", "config.userName", "translate", ""], ["type", "text", "id", "config.userName", "name", "userName", "autocomplete", "new-password", "required", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["class", "form-group", 4, "ngIf"], [4, "ngIf"], ["type", "button", 1, "btn", "btn-default", 3, "click"], ["for", "config.password", "translate", ""], ["type", "password", "id", "config.userPassword", "name", "password", "autocomplete", "new-password", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["for", "config.keystorePass", "translate", ""], ["type", "password", "id", "config.keystorePass", "name", "keystorePass", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["for", "config.certificatePass", "translate", ""], ["type", "password", "id", "config.certificatePass", "name", "keystorePass", "required", "", 1, "form-control", 3, "ngModel", "ngModelChange"], ["for", "certificateUpload", "translate", ""], ["type", "text", "name", "certificateUpload", "required", "", 1, "form-control", "m-b-8", 3, "readonly", "ngModel", "placeholder"], [3, "loadingMessage", "title", "dropped"]], template: function OpcuaServerConfigComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OpcuaServerConfigComponent_div_0_Template, 9, 6, "div", 0);
        ɵngcc0.ɵɵtemplate(1, OpcuaServerConfigComponent_form_1_Template, 93, 55, "form", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.server);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.server);
    } }, directives: [ɵngcc4.NgIf, ɵngcc2.IconDirective, ɵngcc1.ɵNgNoValidate, ɵngcc1.NgControlStatusGroup, ɵngcc1.NgForm, ɵngcc2.C8yTranslateDirective, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc1.DefaultValueAccessor, ɵngcc1.RequiredValidator, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc8.ButtonCheckboxDirective, ɵngcc2.DeviceStatusComponent, ɵngcc2.DefaultValidationDirective, ɵngcc1.MinValidator, ɵngcc1.NumberValueAccessor, ɵngcc2.MinValidationDirective, ɵngcc1.SelectControlValueAccessor, ɵngcc4.NgForOf, ɵngcc1.NgSelectOption, ɵngcc1.ɵNgSelectMultipleOption, ɵngcc2.DropAreaComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaServerConfigComponent.ctorParameters = () => [
    { type: OpcuaService }
];
OpcuaServerConfigComponent.propDecorators = {
    opcuaConfigForm: [{ type: ViewChild, args: ['opcuaConfigForm', { static: false },] }],
    dropArea: [{ type: ViewChild, args: [DropAreaComponent, { static: false },] }],
    canceled: [{ type: Output }],
    removed: [{ type: Output }],
    saved: [{ type: Output }],
    server: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaServerConfigComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-server-config',
                template: "\n  <div class=\"c8y-empty-state m-t-24\"  ng-if=\"!vm.editInstruction.type\" *ngIf=\"!server\">\n    <h1 class=\"c8y-icon c8y-icon-duocolor\" c8yIcon=\"server\"></h1>\n    <div>\n      <h3>{{ 'No server to display.' | translate }}</h3>\n      <p>{{ 'Add or select a server.' | translate}}</p>\n    </div>\n  </div>\n\n\n<form #opcuaConfigForm=\"ngForm\" class=\"d-contents\" *ngIf=\"server\">\n  <div class=\"card-header large-padding separator sticky-top visible-sm visible-xs\" >\n    <button\n    class=\"btn btn-clean text-primary visible-sm visible-xs\"\n    title=\"{{ 'Back' | translate }}\"\n    (click)=\"cancel()\"\n    >\n      <i c8yIcon=\"chevron-left\"></i>\n      <span translate>Back</span>\n    </button>\n  </div>\n  <div class=\"flex-grow\">\n  <div class=\"card-block large-padding\">\n    <!-- SERVER NAME -->\n    <c8y-form-group class=\"m-b-8\">\n      <label>\n        {{ 'Server name' | translate }}\n      </label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g. My server' | translate }}\"\n        id=\"name\"\n        name=\"name\"\n        [(ngModel)]=\"model.name\"\n        required\n      />\n      <c8y-messages>\n        <c8y-message name=\"required\" text=\"{{ 'Server name is required' | translate }}\"></c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n  </div>\n\n    <div class=\"card-block large-padding bg-gray-lighter\">\n      <div class=\"tight-grid\">\n        <div class=\"col-sm-6\">\n          <label style=\"width: 100%;\" translate>Server connection</label>\n          <button\n            type=\"button\"\n            class=\"btn m-t-4\"\n            name=\"serverConnection\"\n            [(ngModel)]=\"targetConnectionState\"\n            (ngModelChange)=\"setServerConnection($event)\"\n            btnCheckbox\n            btnCheckboxTrue=\"1\"\n            btnCheckboxFalse=\"0\"\n          >\n            <span\n              title=\"{{ 'Enabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '1'\"\n              translate\n              >Enabled</span\n            >\n            <span\n              title=\"{{ 'Disabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '0'\"\n              translate\n              >Disabled</span\n            >\n          </button>\n        </div>\n        <div class=\"col-sm-6\">\n          <label translate>Connection status</label>\n          <div class=\"form-control-static\">\n            <device-status class=\"p-r-8\" [mo]=\"server\"></device-status>\n            <span>{{ connectionStatusLabel | translate }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-block large-padding\">\n      <!-- SERVER URL-->\n      <c8y-form-group>\n        <label for=\"configServerUrl\" translate>Server URL</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"configServerUrl\"\n          name=\"serverUrl\"\n          [(ngModel)]=\"model.config.serverUrl\"\n          c8yDefaultValidation=\"opcuaBrowsePath\"\n          required\n        />\n      </c8y-form-group>\n\n      <!-- TIMEOUT & STATUS-CHECK-INTERVAL-->\n      <div class=\"content-flex-32\">\n        <div class=\"col-6\">\n          <c8y-form-group>\n            <label for=\"config.timeout\" translate>Timeout</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.timeout\"\n                name=\"timeout\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 30\"\n                [(ngModel)]=\"model.config.timeout\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-6\">\n          <c8y-form-group>\n            <label for=\"config.statusCheckInterval\" translate>Status check interval</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.statusCheckInterval\"\n                name=\"statusCheckInterval\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 40\"\n                [(ngModel)]=\"model.config.statusCheckInterval\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <!-- SECURITY MODE -->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <!-- NONE, SIGN, SIGN & ENCRYPT-->\n            <label for=\"config.securityMode\" translate>Security mode</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                class=\"form-control\"\n                id=\"config.securityMode\"\n                [(ngModel)]=\"currentSecMode\"\n                (ngModelChange)=\"setPolicy($event)\"\n                name=\"securityMode\"\n                required\n              >\n                <option *ngFor=\"let mode of securityModes\" [ngValue]=\"mode\">{{ mode }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode === NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.securityPolicy\"\n              name=\"securityPolicy\"\n              [readonly]=\"true\"\n              [(ngModel)]=\"model.config.securityMode\"\n              required\n            />\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode !== NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                *ngIf=\"currentSecMode === SIGN\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <select\n                *ngIf=\"currentSecMode === SIGN_ENC\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign_enc\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- AUTHENTICATION -->\n      <div class=\"form-group\">\n        <label for=\"config.authenticationMode\" translate>Authentication</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"config.authenticationMode\"\n            [(ngModel)]=\"authenticationMode\"\n            name=\"authenticationMode\"\n            (ngModelChange)=\"updateAuthentication($event)\"\n            required\n          >\n            <option *ngFor=\"let auth of authenticationModes\" [ngValue]=\"auth\">{{\n              auth.value | translate\n            }}</option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n\n      <!-- User/Pw-->\n      <div *ngIf=\"authenticationMode.id === 2\" class=\"tight-grid\">\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"config.userName\" translate>Username</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.userName\"\n              name=\"userName\"\n              placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n              [(ngModel)]=\"model.config.userName\"\n              autocomplete=\"new-password\"\n              required\n            />\n          </div>\n        </div>\n        <!-- change password section BEGINS-->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\" *ngIf=\"!initialPasswordRequired\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n              <ng-container *ngIf=\"!changePassword\">\n                {{ 'Change password' | translate }}\n              </ng-container>\n              <ng-container *ngIf=\"changePassword\">\n                {{ 'Cancel password change' | translate }}\n              </ng-container>\n            </button>\n          </div>\n\n          <div class=\"form-group\">\n            <div *ngIf=\"changePassword\">\n              <label for=\"config.password\" translate>Password</label>\n              <input\n                type=\"password\"\n                class=\"form-control\"\n                id=\"config.userPassword\"\n                name=\"password\"\n                [(ngModel)]=\"model.config.userPassword\"\n                autocomplete=\"new-password\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n        <!-- change password section ENDS-->\n      </div>\n      <!-- Key-based -->\n      <div *ngIf=\"authenticationMode.id === 3\" class=\"tight-grid\">\n        <!-- KEYSTORE PASSWORD -->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.keystorePass\" translate>Keystore password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.keystorePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.keystorePass\"\n              required\n            />\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.certificatePass\" translate>Certificate password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.certificatePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.certificatePass\"\n              required\n            />\n          </div>\n        </div>\n        <!-- UPLOAD KEYSTORE -->\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"certificateUpload\" translate>Upload keystore</label>\n            <input\n              type=\"text\"\n              [readonly]=\"true\"\n              name=\"certificateUpload\"\n              class=\"form-control m-b-8\"\n              [ngModel]=\"fileName\"\n              placeholder=\"{{ 'e.g.' | translate }} yourKeystore.jks\"\n              required\n            />\n            <c8y-drop-area\n              (dropped)=\"uploadFile($event)\"\n              [loadingMessage]=\"'Importing, please wait.' | translate\"\n              [title]=\"'Import keystore with jks file extension' | translate\"\n            >\n            </c8y-drop-area>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer large-padding separator sticky-bottom\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"cancel()\" translate>\n      Cancel\n    </button>\n    <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-danger\" (click)=\"remove()\" translate>\n      Remove\n    </button>\n    <!-- Add [disabled]=\"method()\" when form is invalid-->\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!opcuaConfigForm.valid\"\n      translate\n    >\n      Save\n    </button>\n  </div> \n</form>\n"
            }]
    }], function () { return [{ type: OpcuaService }]; }, { canceled: [{
            type: Output
        }], removed: [{
            type: Output
        }], saved: [{
            type: Output
        }], server: [{
            type: Input
        }], opcuaConfigForm: [{
            type: ViewChild,
            args: ['opcuaConfigForm', { static: false }]
        }], dropArea: [{
            type: ViewChild,
            args: [DropAreaComponent, { static: false }]
        }] }); })();

class OpcuaServerListComponent {
    constructor() {
        this.serverList = [];
        this.present = new EventEmitter();
    }
    presentConfig(server) {
        server.active = true;
        this.present.emit(server);
    }
}
OpcuaServerListComponent.ɵfac = function OpcuaServerListComponent_Factory(t) { return new (t || OpcuaServerListComponent)(); };
OpcuaServerListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaServerListComponent, selectors: [["opcua-server-list"]], inputs: { serverList: "serverList" }, outputs: { present: "present" }, decls: 1, vars: 1, consts: [["class", "c8y-stacked-item", 3, "active", "click", 4, "ngFor", "ngForOf"], [1, "c8y-stacked-item", 3, "click"], [1, "icon-20", 3, "c8yIcon"], [1, "p-l-16", "text-truncate"], ["id", "serverName", 1, "text-truncate"], ["id", "serverUrl", 1, "text-truncate", "text-muted"], [1, "flex-item-right", "p-l-8", "d-flex", "p-r-16"], [1, "p-r-8", 3, "mo"], ["placement", "left", 1, "text-gray-darker", 3, "title"], [3, "c8yIcon"]], template: function OpcuaServerListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OpcuaServerListComponent_div_0_Template, 12, 10, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.serverList);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc2.IconDirective, ɵngcc2.DeviceStatusComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaServerListComponent.propDecorators = {
    serverList: [{ type: Input }],
    present: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaServerListComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-server-list',
                template: "<!-- add active class to c8y-stacked-item when clicked -->\n<div\n  class=\"c8y-stacked-item\"\n  [class.active]=\"server.active\"\n  *ngFor=\"let server of serverList\"\n  (click)=\"presentConfig(server)\"\n>\n  <i [c8yIcon]=\"'server'\" class=\"icon-20 \"></i>\n  <div class=\"p-l-16 text-truncate\">\n    <p id=\"serverName\" class=\"text-truncate\">{{ server.name }}</p>\n    <small id=\"serverUrl\" class=\"text-truncate text-muted\">{{ server.config.serverUrl }}</small>\n  </div>\n  <div class=\"flex-item-right p-l-8 d-flex p-r-16\">\n    <device-status class=\"p-r-8\" [mo]=\"server\"></device-status>\n    <a\n      title=\"{{ server.quickInfo.padlockMsg | translate }}\"\n      placement=\"left\"\n      class=\"text-gray-darker\"\n    >\n      <i [c8yIcon]=\"server.quickInfo.padlock\"></i>\n    </a>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { serverList: [{
            type: Input
        }], present: [{
            type: Output
        }] }); })();

class OpcuaServerGuard {
    constructor() {
        this.type = 'c8y_OpcuaServer';
    }
    canActivate({ data }) {
        const { contextData } = data;
        return contextData && contextData.type === this.type;
    }
}
OpcuaServerGuard.ɵfac = function OpcuaServerGuard_Factory(t) { return new (t || OpcuaServerGuard)(); };
OpcuaServerGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpcuaServerGuard, factory: OpcuaServerGuard.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaServerGuard, [{
        type: Injectable
    }], function () { return []; }, null); })();

class OpcuaServersComponent {
    constructor(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.moId = this.opcuaService.getMoId();
            if (this.moId && this.moId.length > 0) {
                const res = yield this.opcuaService.getServers(this.moId);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    this.serverObjectList = (yield res.json());
                    this.serverObjectList.map(server => this.setQuickInfo(server));
                }
            }
        });
    }
    localServerObjectExist() {
        return !!this.serverObjectList.find(server => server.id === this.NEW_SERVER_ID);
    }
    addServer() {
        const server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    }
    onSaved(server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    }
    reloadTabs() {
        if (this.context) {
            this.context.refreshTabs();
        }
    }
    onCanceled(server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(item => {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    }
    onRemoved(server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    }
    getKeystore(binaryId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.opcuaService.getKeystore(binaryId);
            return data;
        });
    }
    onPresent(server) {
        return __awaiter(this, void 0, void 0, function* () {
            if (server &&
                server.id !== this.NEW_SERVER_ID &&
                server.config &&
                server.config.keystoreBinaryId) {
                try {
                    const mo = yield this.getKeystore(server.config.keystoreBinaryId);
                    server.config.keystoreFilename = mo.name;
                }
                catch (ex) {
                    this.server = Object.assign({}, server);
                    console.log('Could not get existing keystore:', ex);
                }
            }
            if (this.serverObjectList.length > 0) {
                this.serverObjectList.forEach(item => {
                    item.active = false;
                    if (item.id === server.id) {
                        item.active = true;
                        server.active = item.active;
                    }
                });
                this.setQuickInfo(server);
                this.server = Object.assign({}, server);
            }
        });
    }
    createServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.opcuaService.createServer(server);
            const svr = (yield response.json());
            this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
            this.reloadTabs();
        });
    }
    updateServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatedServer = (yield this.opcuaService.updateServer(server));
            if (updatedServer) {
                this.updateServerObjectListById(updatedServer.id, updatedServer);
            }
        });
    }
    removeServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.opcuaService.removeServer(server);
                this.removeServerObjectListById(server.id);
                this.reloadTabs();
            }
            catch (ex) {
                console.log('Could not remove OPC UA server:', ex);
            }
        });
    }
    removeServerObjectListById(id) {
        this.serverObjectList.forEach((item, index) => {
            if (item.id === id) {
                this.serverObjectList.splice(index, 1);
                delete this.server;
            }
        });
    }
    updateServerObjectListById(id, server) {
        const idx = this.serverObjectList.findIndex(item => item.id === id);
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    }
    setQuickInfo(server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    }
}
OpcuaServersComponent.ɵfac = function OpcuaServersComponent_Factory(t) { return new (t || OpcuaServersComponent)(ɵngcc0.ɵɵdirectiveInject(OpcuaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContextRouteComponent, 8)); };
OpcuaServersComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaServersComponent, selectors: [["opcua-servers"]], decls: 18, vars: 16, consts: [[1, "card", "content-fullpage", "split-view--5-7"], [1, "card-header", "grid__col--fullspan", "separator"], [1, "card-title"], ["placement", "right", "triggers", "focus", 1, "btn-clean", "m-l-4", 3, "popover"], ["c8yIcon", "question-circle-o", 1, "text-info"], [1, "inner-scroll", "split-view__list"], [1, "bg-gray-white", "flex-grow"], [1, "c8y-nav-stacked"], [3, "serverList", "present"], [1, "card-footer", "separator", "sticky-bottom"], [1, "btn", "btn-default", 3, "title", "disabled", "click"], [3, "c8yIcon"], [1, "inner-scroll", "split-view__detail", 3, "ngClass", "server", "canceled", "removed", "saved"]], template: function OpcuaServersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h4", 2);
        ɵngcc0.ɵɵtext(3, "OPC UA servers");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "button", 3);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "opcua-server-list", 8);
        ɵngcc0.ɵɵlistener("present", function OpcuaServersComponent_Template_opcua_server_list_present_10_listener($event) { return ctx.onPresent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵelementStart(12, "button", 10);
        ɵngcc0.ɵɵlistener("click", function OpcuaServersComponent_Template_button_click_12_listener() { return ctx.addServer(); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelement(14, "i", 11);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "opcua-server-config", 12);
        ɵngcc0.ɵɵlistener("canceled", function OpcuaServersComponent_Template_opcua_server_config_canceled_17_listener($event) { return ctx.onCanceled($event); })("removed", function OpcuaServersComponent_Template_opcua_server_config_removed_17_listener($event) { return ctx.onRemoved($event); })("saved", function OpcuaServersComponent_Template_opcua_server_config_saved_17_listener($event) { return ctx.onSaved($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(5, 8, "Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected."));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("serverList", ctx.serverObjectList);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 10, "Add server"));
        ɵngcc0.ɵɵproperty("disabled", ctx.localServerObjectExist());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 12, "Add server"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c8, ctx.server))("server", ctx.server);
    } }, directives: [ɵngcc10.PopoverDirective, ɵngcc2.IconDirective, OpcuaServerListComponent, OpcuaServerConfigComponent, ɵngcc4.NgClass], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaServersComponent.ctorParameters = () => [
    { type: OpcuaService },
    { type: AlertService },
    { type: TranslateService },
    { type: ContextRouteComponent, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaServersComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-servers',
                template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header grid__col--fullspan separator\">\n    <h4 class=\"card-title\">OPC UA servers</h4>\n    <button class=\"btn-clean m-l-4\"\n      popover=\"{{ 'Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected.' | translate }}\"\n      placement=\"right\"\n      triggers=\"focus\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info \"></i>\n    </button>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-gray-white flex-grow\">\n      <div class=\"c8y-nav-stacked\">\n        <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n        </opcua-server-list>\n      </div>\n    </div>\n    <div class=\"card-footer separator sticky-bottom\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-default\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"inner-scroll split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"
            }]
    }], function () { return [{ type: OpcuaService }, { type: ɵngcc2.AlertService }, { type: ɵngcc9.TranslateService }, { type: ɵngcc2.ContextRouteComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

class OpcuaDeviceProtocolDescription {
    constructor() {
        this.moId = '';
    }
    set model(_model) {
        this.moId = _model.referencedServerId;
        this._model = _model;
        this.autoScan = _model.enabled ? '1' : '0';
    }
    setAutoScanOption(data) {
        this._model.enabled = data !== '0' ? true : false;
    }
}
OpcuaDeviceProtocolDescription.ɵfac = function OpcuaDeviceProtocolDescription_Factory(t) { return new (t || OpcuaDeviceProtocolDescription)(); };
OpcuaDeviceProtocolDescription.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaDeviceProtocolDescription, selectors: [["opcua-device-protocol-description"]], inputs: { model: "model" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgForm }])], decls: 55, vars: 24, consts: [[1, "card", "m-b-4"], [1, "card-block"], [1, "row"], [1, "col-md-7"], [1, "form-group"], ["translate", ""], [1, "editable", 3, "ngClass"], ["type", "text", "name", "name", 1, "form-control", 3, "ngModel", "ngModelChange"], ["ctrlName", "ngModel"], ["rows", "1", "name", "description", 1, "form-control", 3, "ngModel", "ngModelChange"], ["ctrlDescription", "ngModel"], [4, "ngIf"], [1, "flex-row"], [2, "min-width", "120px"], ["type", "button", "name", "autoScanAddressSpace", "btnCheckbox", "", "btnCheckboxTrue", "1", "btnCheckboxFalse", "0", "ngDefaultControl", "", 1, "btn", "m-t-4", 3, "ngModel", "ngModelChange"], [1, "m-l-16", "text-muted"], [1, "col-md-5"], [1, "dl-horizontal", "m-b-0"], [1, "label", "label-info", "m-r-8", "text-capitalize"], ["translate", "", 1, "small"], [2, "font-size", "1.5em"], ["c8yIcon", "check", 1, "text-success"], ["c8yIcon", "ban", 1, "text-danger"]], template: function OpcuaDeviceProtocolDescription_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "label", 5);
        ɵngcc0.ɵɵtext(6, "Name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "label", 6);
        ɵngcc0.ɵɵelementStart(8, "input", 7, 8);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDescription_Template_input_ngModelChange_8_listener($event) { return ctx._model.name = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵelementStart(11, "label", 5);
        ɵngcc0.ɵɵtext(12, "Description");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "label", 6);
        ɵngcc0.ɵɵelementStart(14, "textarea", 9, 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDescription_Template_textarea_ngModelChange_14_listener($event) { return ctx._model.description = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, OpcuaDeviceProtocolDescription_span_16_Template, 2, 1, "span", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 12);
        ɵngcc0.ɵɵelementStart(18, "div", 13);
        ɵngcc0.ɵɵelementStart(19, "button", 14);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaDeviceProtocolDescription_Template_button_ngModelChange_19_listener($event) { return ctx.autoScan = $event; })("ngModelChange", function OpcuaDeviceProtocolDescription_Template_button_ngModelChange_19_listener($event) { return ctx.setAutoScanOption($event); });
        ɵngcc0.ɵɵtemplate(20, OpcuaDeviceProtocolDescription_span_20_Template, 4, 3, "span", 11);
        ɵngcc0.ɵɵtemplate(21, OpcuaDeviceProtocolDescription_span_21_Template, 4, 3, "span", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "small", 15);
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 16);
        ɵngcc0.ɵɵelementStart(26, "dl", 17);
        ɵngcc0.ɵɵelementStart(27, "dt");
        ɵngcc0.ɵɵelementStart(28, "label", 5);
        ɵngcc0.ɵɵtext(29, "Device protocol type");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "dd");
        ɵngcc0.ɵɵelementStart(31, "span", 18);
        ɵngcc0.ɵɵtext(32);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(33, "dt");
        ɵngcc0.ɵɵelementStart(34, "label", 19);
        ɵngcc0.ɵɵtext(35, "ID");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "dd", 20);
        ɵngcc0.ɵɵtext(37);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "dt");
        ɵngcc0.ɵɵelementStart(39, "label", 19);
        ɵngcc0.ɵɵtext(40, "Date created");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(41, "dd");
        ɵngcc0.ɵɵtext(42);
        ɵngcc0.ɵɵpipe(43, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(44, "dt");
        ɵngcc0.ɵɵelementStart(45, "label", 19);
        ɵngcc0.ɵɵtext(46, "Last update");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(47, "dd");
        ɵngcc0.ɵɵtext(48);
        ɵngcc0.ɵɵpipe(49, "c8yDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(50, "dt");
        ɵngcc0.ɵɵelementStart(51, "label", 19);
        ɵngcc0.ɵɵtext(52, "Fieldbus version");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(53, "dd");
        ɵngcc0.ɵɵtext(54);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(9);
        const _r1 = ɵngcc0.ɵɵreference(15);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(20, _c9, _r0.dirty));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx._model.name);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(22, _c9, _r1.dirty));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx._model.description);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx._model.description);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.autoScan);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.autoScan === "1");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.autoScan === "0");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(24, 14, "When active, the gateway scans the address space of all servers and automatically applies this device protocol to all nodes matching the criteria."), " ");
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx._model.fieldbusType, " ");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx._model.id);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(43, 16, ctx._model.creationTime));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(49, 18, ctx._model.lastUpdated));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ctx._model.fieldbusVersion);
    } }, directives: [ɵngcc2.C8yTranslateDirective, ɵngcc4.NgClass, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc4.NgIf, ɵngcc8.ButtonCheckboxDirective, ɵngcc2.IconDirective], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc2.DatePipe], encapsulation: 2 });
OpcuaDeviceProtocolDescription.propDecorators = {
    model: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolDescription, [{
        type: Component,
        args: [{
                selector: 'opcua-device-protocol-description',
                template: "<div class=\"card m-b-4\">\n  <div class=\"card-block\">\n    <div class=\"row\">\n      <div class=\"col-md-7\">\n        <div class=\"form-group\">\n          <label translate>Name</label>\n          <label class=\"editable\" [ngClass]=\"{ updated: ctrlName.dirty }\">\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              name=\"name\"\n              #ctrlName=\"ngModel\"\n              [(ngModel)]=\"_model.name\"\n            />\n          </label>\n        </div>\n        <div class=\"form-group\">\n          <label translate>Description</label>\n          <label class=\"editable\" [ngClass]=\"{ updated: ctrlDescription.dirty }\">\n            <textarea\n              class=\"form-control\"\n              rows=\"1\"\n              name=\"description\"\n              #ctrlDescription=\"ngModel\"\n              [(ngModel)]=\"_model.description\"\n            ></textarea>\n            <span *ngIf=\"_model.description\">\n              {{ _model.description }}\n            </span>\n          </label>\n        </div>\n        <div class=\"flex-row\">\n          <div style=\"min-width: 120px;\">\n            <button\n              type=\"button\"\n              class=\"btn m-t-4\"\n              name=\"autoScanAddressSpace\"\n              [(ngModel)]=\"autoScan\"\n              (ngModelChange)=\"setAutoScanOption($event)\"\n              btnCheckbox\n              btnCheckboxTrue=\"1\"\n              btnCheckboxFalse=\"0\"\n              ngDefaultControl\n            >\n              <span *ngIf=\"autoScan === '1'\">\n                <i c8yIcon=\"check\" class=\"text-success\"></i>\n                {{ 'Active`auto scanning`' | translate }}\n              </span>\n              <span *ngIf=\"autoScan === '0'\">\n                <i c8yIcon=\"ban\" class=\"text-danger\"></i>\n                {{ 'Inactive`auto scanning`' | translate }}\n              </span>\n            </button>\n          </div>\n          <small class=\"m-l-16 text-muted\">\n            {{ 'When active, the gateway scans the address space of all servers and automatically applies this device protocol to all nodes matching the criteria.' | translate }}\n          </small>\n        </div>\n      </div>\n      <div class=\"col-md-5\">\n        <dl class=\"dl-horizontal m-b-0\">\n          <dt><label translate>Device protocol type</label></dt>\n          <dd>\n            <span class=\"label label-info m-r-8 text-capitalize\">\n              {{ _model.fieldbusType }}\n            </span>\n          </dd>\n          <dt><label class=\"small\" translate>ID</label></dt>\n          <dd style=\"font-size:1.5em\">{{ _model.id }}</dd>\n          <dt><label class=\"small\" translate>Date created</label></dt>\n          <dd>{{ _model.creationTime | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Last update</label></dt>\n          <dd>{{ _model.lastUpdated | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Fieldbus version</label></dt>\n          <dd>{{ _model.fieldbusVersion }}</dd>\n        </dl>\n      </div>\n    </div>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            }]
    }], function () { return []; }, { model: [{
            type: Input
        }] }); })();

class DynamicDataSource {
    constructor(treeControl, addressSpaceService, serverId) {
        this.treeControl = treeControl;
        this.addressSpaceService = addressSpaceService;
        this.serverId = serverId;
        this.dataChange = new BehaviorSubject([]);
        this.treeControl.isExpanded = (node) => node.expanded;
    }
    get data() {
        return this.dataChange.value;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.treeControl.expansionModel.changed.subscribe((change) => {
            if (change.added || change.removed) {
                this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    /** Handle expand/collapse behaviors */
    handleTreeControl(change) {
        if (change.added) {
            change.added.forEach(node => this.toggleNode(node, true));
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(node => this.toggleNode(node, false));
        }
    }
    /**
     * Toggle the node, remove from display list
     */
    toggleNode(addressSpaceNode, expand) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!addressSpaceNode.children || addressSpaceNode.children.length === 0) {
                addressSpaceNode.currentlyLoadingChildren = true;
                const res = yield this.addressSpaceService.getChildrenOf(addressSpaceNode, this.serverId);
                const children = (yield res.json());
                addressSpaceNode.children = children || [];
                addressSpaceNode.children = addressSpaceNode.children.map((node) => {
                    node.parentNode = addressSpaceNode;
                    return node;
                });
                addressSpaceNode.currentlyLoadingChildren = false;
                this.treeControl.expand(addressSpaceNode);
            }
            addressSpaceNode.expanded = expand && addressSpaceNode.children.length > 0;
            this.refreshNestedTree(this.data);
            return Promise.resolve(addressSpaceNode);
        });
    }
    catch() {
        // do nothing
    }
    refreshNestedTree(treeData) {
        // necessary to rerender tree, otherwise new nodes will not
        // appear, but they are added to the list.
        this.data = [];
        this.dataChange.next(treeData);
        this.triggerResize(); // to resize the modal window when creating a new device protocol
    }
    triggerResize() {
        setTimeout(() => {
            try {
                window.dispatchEvent(new Event('resize'));
            }
            catch (error) {
                // do nothing
            }
        }, 200);
    }
}

class OpcuaAddressSpaceTreeComponent {
    constructor(addressSpaceService, opcuaService, alertService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.destroy$ = new Subject();
        this.getChildren = (node) => (node.expanded ? node.children : []);
        this.hasChild = (_, _nodeData) => this.addressSpaceService.childrenAvailable(_nodeData.references);
    }
    set moId(id) {
        this._moId = id || undefined;
    }
    ngOnInit() {
        this.initializeDataSet();
    }
    ngOnChanges(changes) {
        if (changes.moId && changes.moId.previousValue && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    }
    initializeDataSet() {
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .pipe(takeUntil(this.destroy$))
            .subscribe(nodeNavData => this.openNode(nodeNavData));
        this.subscriptionRef = this.focusEmitter.subscribe(node => {
            this.focused = this.isFocusedNode(node) ? undefined : node;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    }
    openNode(nodeNavData) {
        return __awaiter(this, void 0, void 0, function* () {
            const { node, selectedAncestorIds } = nodeNavData;
            let nodeId;
            // We just set the nodeId when the selectedAncestorIds variable an empty array.
            // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
            // from the root node.
            if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                nodeId = node.nodeId;
            }
            // Always recreate the tree when routing to a specific nested node,
            // because previous modifications to the tree-structure could cause errors
            // while traversing with 'old' tree-data
            // -----------------
            // setupTree is able to handle nodeId = undefined
            yield this.setupTree(nodeId);
            if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                return;
            }
            if (nodeNavData && this.dataSource) {
                const clonedAncestors = clone(selectedAncestorIds);
                clonedAncestors.shift();
                const n = yield this.dataSource.toggleNode(this.dataSource.data[0], true);
                this.setChildNodes(n.children, clonedAncestors);
                this.toggleFocusedNode(node);
            }
        });
    }
    setChildNodes(nodes, ids) {
        if (nodes) {
            ids.forEach((id) => __awaiter(this, void 0, void 0, function* () {
                const match = nodes.find(n => n.nodeId === id);
                if (match && ids.length > 0) {
                    const idx = ids.findIndex(value => value === id);
                    if (idx >= 0) {
                        ids.splice(idx, 1);
                    }
                    const toggledNode = yield this.dataSource.toggleNode(match, true);
                    this.setChildNodes(toggledNode.children, ids);
                }
            }));
        }
    }
    setupTree(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            if (!this._moId || this._moId.length === 0) {
                this._moId = this.opcuaService.getMoId();
            }
            // addressSpaceService.getNode returns either the root node of the server (moId)
            // or if nodeId !== undefined the node with given nodeId
            const res = yield this.addressSpaceService.getNode(this._moId, nodeId);
            if (res) {
                if (res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.dataSource = undefined;
                }
                else {
                    const rootNode = (yield res.json());
                    this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                    this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                    this.dataSource.data = [rootNode];
                }
                this.loading = false;
            }
            else {
                this.loading = false;
            }
        });
    }
    getMoId() {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    toggleFocusedNode(node) {
        const relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    }
    isFocusedNode(node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    }
    getRelativePath(node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    }
}
OpcuaAddressSpaceTreeComponent.ɵfac = function OpcuaAddressSpaceTreeComponent_Factory(t) { return new (t || OpcuaAddressSpaceTreeComponent)(ɵngcc0.ɵɵdirectiveInject(AddressSpaceService), ɵngcc0.ɵɵdirectiveInject(OpcuaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
OpcuaAddressSpaceTreeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaAddressSpaceTreeComponent, selectors: [["opcua-address-space-tree"]], inputs: { focusEmitter: "focusEmitter", moId: "moId", node: "node" }, outputs: { selectedNode: "selectedNode" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [["class", "card-block", 4, "ngIf"], ["class", "p-8", 4, "ngIf"], ["class", "alert alert-info m-t-16", "translate", "", 4, "ngIf"], [1, "card-block"], [3, "dataSource", "treeControl"], ["class", "interact", 3, "ngClass", "click", 4, "cdkTreeNodeDef"], [4, "cdkTreeNodeDef", "cdkTreeNodeDefWhen"], [1, "interact", 3, "ngClass", "click"], [1, "m-r-4", "interact", 3, "c8yIcon", "ngClass"], [1, "flex-row"], ["cdkTreeNodeToggle", "", 1, "btn-clean", "text-primary", "m-r-4", 3, "disabled"], [3, "ngClass"], [1, "m-r-4", "interact", 3, "c8yIcon"], [1, "m-l-4"], [1, "dlt-c8y-icon-circle-o-notch", "icon-spin"], ["cdkTreeNodeOutlet", ""], [1, "p-8"], [1, "spinner", "p-relative"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], ["translate", "", 1, "alert", "alert-info", "m-t-16"]], template: function OpcuaAddressSpaceTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OpcuaAddressSpaceTreeComponent_div_0_Template, 4, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceTreeComponent_div_1_Template, 7, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(2, OpcuaAddressSpaceTreeComponent_div_2_Template, 2, 0, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataSource && !ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.dataSource && !ctx.loading);
    } }, directives: [ɵngcc4.NgIf, ɵngcc11.CdkTree, ɵngcc11.CdkTreeNodeDef, ɵngcc11.CdkNestedTreeNode, ɵngcc4.NgClass, ɵngcc2.IconDirective, ɵngcc11.CdkTreeNodeToggle, ɵngcc11.CdkTreeNodeOutlet, ɵngcc2.C8yTranslateDirective], encapsulation: 2 });
OpcuaAddressSpaceTreeComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService },
    { type: AlertService }
];
OpcuaAddressSpaceTreeComponent.propDecorators = {
    moId: [{ type: Input }],
    node: [{ type: Input }],
    focusEmitter: [{ type: Input }],
    selectedNode: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAddressSpaceTreeComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-address-space-tree',
                template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node\n      *cdkTreeNodeDef=\"let node\"\n      (click)=\"toggleFocusedNode(node)\"\n      [ngClass]=\"{ strong: isFocusedNode(node) }\"\n      class=\"interact\"\n    >\n      <span>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n        ></i>\n        {{ node.displayName }}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button\n          cdkTreeNodeToggle\n          class=\"btn-clean text-primary m-r-4\"\n          [disabled]=\"node.currentlyLoadingChildren\"\n        >\n          <i\n            [ngClass]=\"{ 'dlt-c8y-icon-plus-square': !node.expanded, 'dlt-c8y-icon-minus-square': node.expanded }\"\n          ></i>\n        </button>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n        ></i>\n        <span\n          (click)=\"toggleFocusedNode(node)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n          class=\"interact\"\n        >\n          {{ node.displayName }}\n        </span>\n        <span\n          class=\"m-l-4\"\n          [style.visibility]=\"node.currentlyLoadingChildren ? 'visible' : 'hidden'\"\n        >\n          <i class=\"dlt-c8y-icon-circle-o-notch icon-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div class=\"p-8\" *ngIf=\"loading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>\n"
            }]
    }], function () { return [{ type: AddressSpaceService }, { type: OpcuaService }, { type: ɵngcc2.AlertService }]; }, { focusEmitter: [{
            type: Input
        }], selectedNode: [{
            type: Output
        }], moId: [{
            type: Input
        }], node: [{
            type: Input
        }] }); })();

class OpcuaAutoApplySettingsComponent {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.opcuaServers = [];
        this.selectedItems = [];
        this.filteredList = [];
        this.checked = {};
        this.sizeToShowFilter = 5;
        this.constraints = {
            browsePathMatchesRegex: '',
            matchesNodeIds: [],
            serverObjectHasFragment: '',
            matchesServerIds: []
        };
        this.placeholderSelectServerIds = gettext('Select server IDs from list');
        this.updateSelectedItem = new EventEmitter();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventoryService.list({
                pageSize: 1000,
                withTotalPages: true,
                type: 'c8y_OpcuaServer'
            });
            this.opcuaServers = data;
            this.filteredList = data;
            this.selectedItems = [];
            const { matchesServerIds } = this.constraints;
            data.forEach(server => {
                if (matchesServerIds &&
                    matchesServerIds.length > 0 &&
                    matchesServerIds.find(itemId => itemId === server.id)) {
                    this.selectedItems.push(server);
                    this.checked[server.id] = true;
                    this.showServerIds = true;
                }
            });
        });
    }
    set model(model) {
        if (model && model.applyConstraints) {
            this.constraints = model.applyConstraints;
        }
        this._model = model;
    }
    get model() {
        return this._model;
    }
    serverIdsSelected(items) {
        if (this.constraints) {
            this.constraints.matchesServerIds = items.map((item) => item.id);
        }
        this.selectedItems = items;
    }
    onChangeNodeId(event) {
        if (event.target.checked) {
            this.showRootNodes = true;
            this.add();
        }
        else {
            this.showRootNodes = false;
            this.constraints.matchesNodeIds = [];
        }
    }
    onChangeShowServerIds(event) {
        if (!event.target.checked) {
            this.constraints.matchesServerIds = [];
            this.showServerIds = false;
            this.selectedItems = [];
            this.checked = {};
        }
        else {
            this.showServerIds = true;
        }
    }
    onChangeShowBrowsePath(event) {
        if (!event.target.checked) {
            this.constraints.browsePathMatchesRegex = '';
            this.showBrowsePath = false;
        }
        else {
            this.showBrowsePath = true;
        }
    }
    onChangeShowServerFragment(event) {
        if (!event.target.checked) {
            this.constraints.serverObjectHasFragment = '';
            this.showServerFragment = false;
        }
        else {
            this.showServerFragment = true;
        }
    }
    add() {
        this.constraints.matchesNodeIds.push('');
    }
    remove(index) {
        this.constraints.matchesNodeIds.splice(index, 1);
    }
    trackByFn(index, item) {
        return index;
    }
    updateConstraints(items) {
        if (this.constraints) {
            this.constraints.matchesServerIds = items.map((item) => item.id);
        }
    }
    filterItems(filterText) {
        if (filterText.length !== 0) {
            const search = new RegExp(filterText, 'i');
            this.filteredList = this.opcuaServers.filter(({ name, id }) => {
                return search.test(name) || search.test(id);
            });
        }
        else {
            this.filteredList = this.opcuaServers;
        }
    }
    isChecked(item) {
        return this.checked[item.id];
    }
    onSelect(selected, item) {
        if (!selected) {
            this.selectedItems = reject(this.selectedItems, { id: item.id });
            delete this.checked[item.id];
        }
        else {
            this.selectedItems.push(item);
            this.checked[item.id] = selected;
        }
        this.updateSelectedItem.emit(true);
        this.updateConstraints(this.selectedItems);
    }
}
OpcuaAutoApplySettingsComponent.ɵfac = function OpcuaAutoApplySettingsComponent_Factory(t) { return new (t || OpcuaAutoApplySettingsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.InventoryService)); };
OpcuaAutoApplySettingsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaAutoApplySettingsComponent, selectors: [["opcua-auto-apply"]], inputs: { model: "model" }, decls: 57, vars: 52, consts: [[1, "row"], [1, "col-md-4"], ["translate", ""], [1, "col-md-6"], [1, "list-group", 2, "box-shadow", "none"], [1, "list-group-item"], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", 3, "checked", "change"], [1, "m-l-8"], [1, "collapse", 3, "collapse"], [3, "items", "selected", "placeholder", "updateItems", "onChange"], ["class", "sticky-top", 4, "ngIf"], [4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "collapse", 3, "isAnimated", "collapse"], [1, "m-t-8", "m-b-8"], ["name", "browsePath", "type", "text", "ngDefaultControl", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["name", "serverFragment", "type", "text", "ngDefaultControl", "", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], ["c8yInputGroupListContainer", "", 1, "list-unstyled", "p-t-16"], ["class", "m-b-8", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "sticky-top"], [3, "icon", "onSearch"], [1, "c8y-empty-state", "text-left"], [3, "selected", "onSelect"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "m-b-8"], [3, "index", "onAdd", "onRemove"], [1, "form-group--tooltip-validation"], ["type", "text", 1, "form-control", 3, "placeholder", "ngModel", "required", "ngModelChange"]], template: function OpcuaAutoApplySettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "p", 2);
        ɵngcc0.ɵɵtext(3, " Specifying auto-apply constraints allows you to limit the scope where the device protocols are applied, for example by specifying a set of possible servers or node IDs. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "p", 2);
        ɵngcc0.ɵɵtext(5, " If no constraints are set, device protocols are applied at any fitting location on the OPC UA server. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵelementStart(7, "ul", 4);
        ɵngcc0.ɵɵelementStart(8, "li", 5);
        ɵngcc0.ɵɵelementStart(9, "label", 6);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementStart(11, "input", 7);
        ɵngcc0.ɵɵlistener("change", function OpcuaAutoApplySettingsComponent_Template_input_change_11_listener($event) { return ctx.onChangeShowServerIds($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "span");
        ɵngcc0.ɵɵelementStart(13, "span", 8);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 9);
        ɵngcc0.ɵɵelementStart(17, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(18, "c8y-select", 10);
        ɵngcc0.ɵɵlistener("onChange", function OpcuaAutoApplySettingsComponent_Template_c8y_select_onChange_18_listener($event) { return ctx.serverIdsSelected($event); });
        ɵngcc0.ɵɵtemplate(19, OpcuaAutoApplySettingsComponent_c8y_li_19_Template, 2, 1, "c8y-li", 11);
        ɵngcc0.ɵɵtemplate(20, OpcuaAutoApplySettingsComponent_c8y_li_20_Template, 6, 3, "c8y-li", 12);
        ɵngcc0.ɵɵtemplate(21, OpcuaAutoApplySettingsComponent_c8y_li_21_Template, 10, 5, "c8y-li", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "li", 5);
        ɵngcc0.ɵɵelementStart(23, "label", 6);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementStart(25, "input", 7);
        ɵngcc0.ɵɵlistener("change", function OpcuaAutoApplySettingsComponent_Template_input_change_25_listener($event) { return ctx.onChangeShowBrowsePath($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(26, "span");
        ɵngcc0.ɵɵelementStart(27, "span", 8);
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "div", 14);
        ɵngcc0.ɵɵelementStart(31, "c8y-form-group", 15);
        ɵngcc0.ɵɵelementStart(32, "input", 16);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaAutoApplySettingsComponent_Template_input_ngModelChange_32_listener($event) { return ctx.constraints.browsePathMatchesRegex = $event; });
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(34, "li", 5);
        ɵngcc0.ɵɵelementStart(35, "label", 6);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementStart(37, "input", 7);
        ɵngcc0.ɵɵlistener("change", function OpcuaAutoApplySettingsComponent_Template_input_change_37_listener($event) { return ctx.onChangeShowServerFragment($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(38, "span");
        ɵngcc0.ɵɵelementStart(39, "span", 8);
        ɵngcc0.ɵɵtext(40);
        ɵngcc0.ɵɵpipe(41, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(42, "div", 14);
        ɵngcc0.ɵɵelementStart(43, "c8y-form-group", 15);
        ɵngcc0.ɵɵelementStart(44, "input", 17);
        ɵngcc0.ɵɵlistener("ngModelChange", function OpcuaAutoApplySettingsComponent_Template_input_ngModelChange_44_listener($event) { return ctx.constraints.serverObjectHasFragment = $event; });
        ɵngcc0.ɵɵpipe(45, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(46, "li", 5);
        ɵngcc0.ɵɵelementStart(47, "label", 6);
        ɵngcc0.ɵɵpipe(48, "translate");
        ɵngcc0.ɵɵelementStart(49, "input", 7);
        ɵngcc0.ɵɵlistener("change", function OpcuaAutoApplySettingsComponent_Template_input_change_49_listener($event) { return ctx.onChangeNodeId($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(50, "span");
        ɵngcc0.ɵɵelementStart(51, "span", 8);
        ɵngcc0.ɵɵtext(52);
        ɵngcc0.ɵɵpipe(53, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(54, "div", 14);
        ɵngcc0.ɵɵelementStart(55, "ul", 18);
        ɵngcc0.ɵɵtemplate(56, OpcuaAutoApplySettingsComponent_li_56_Template, 5, 6, "li", 19);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 32, "Limit device protocol to a set of servers"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("checked", ctx.constraints.matchesServerIds !== null && ctx.constraints.matchesServerIds.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 34, "Limit device protocol to a set of servers"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("collapse", !ctx.showServerIds && (ctx.constraints.matchesServerIds !== null && ctx.constraints.matchesServerIds.length < 1) || !ctx.showServerIds && ctx.constraints.matchesServerIds === null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ctx.opcuaServers)("selected", ctx.selectedItems)("placeholder", ctx.placeholderSelectServerIds)("updateItems", ctx.updateSelectedItem);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.opcuaServers.length > ctx.sizeToShowFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.filteredList && ctx.filteredList.length === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filteredList);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(24, 36, "Limit device protocol scope in the address space"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("checked", ctx.constraints.browsePathMatchesRegex !== null && ctx.constraints.browsePathMatchesRegex.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(29, 38, "Limit device protocol scope in the address space"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAnimated", true)("collapse", !ctx.showBrowsePath && ctx.constraints.browsePathMatchesRegex !== null && ctx.constraints.browsePathMatchesRegex.length < 1 || !ctx.showBrowsePath && ctx.constraints.browsePathMatchesRegex === null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(33, 40, "e.g."), " /objects/devices/.*");
        ɵngcc0.ɵɵproperty("ngModel", ctx.constraints.browsePathMatchesRegex);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(36, 42, "Limit device protocol to servers with a certain fragment"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("checked", ctx.constraints.serverObjectHasFragment !== null && ctx.constraints.serverObjectHasFragment.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(41, 44, "Limit device protocol to servers with a certain fragment"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAnimated", true)("collapse", !ctx.showServerFragment && ctx.constraints.serverObjectHasFragment !== null && ctx.constraints.serverObjectHasFragment.length < 1 || !ctx.showServerFragment && ctx.constraints.serverObjectHasFragment === null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(45, 46, "e.g."), " c8y_SomeServerMarker");
        ɵngcc0.ɵɵproperty("ngModel", ctx.constraints.serverObjectHasFragment);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(48, 48, "Limit device protocol to specific root nodes ID"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("checked", ctx.constraints.matchesNodeIds !== null && ctx.constraints.matchesNodeIds.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(53, 50, "Limit device protocol to specific root nodes ID"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isAnimated", true)("collapse", !ctx.showRootNodes && ctx.constraints.matchesNodeIds !== null && ctx.constraints.matchesNodeIds.length < 1 || !ctx.showRootNodes && ctx.constraints.matchesNodeIds === null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.constraints.matchesNodeIds)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc2.C8yTranslateDirective, ɵngcc3.CollapseDirective, ɵngcc2.FormGroupComponent, ɵngcc2.SelectComponent, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.InputGroupListContainerDirective, ɵngcc2.ListItemComponent, ɵngcc2.FilterInputComponent, ɵngcc2.ListItemBodyComponent, ɵngcc2.ListItemCheckboxComponent, ɵngcc2.InputGroupListComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc1.RequiredValidator], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaAutoApplySettingsComponent.ctorParameters = () => [
    { type: InventoryService }
];
OpcuaAutoApplySettingsComponent.propDecorators = {
    model: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAutoApplySettingsComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-auto-apply',
                template: "<div class=\"row\">\n  <div class=\"col-md-4\">\n    <p translate>\n      Specifying auto-apply constraints allows you to limit the scope where the device protocols are\n      applied, for example by specifying a set of possible servers or node IDs.\n    </p>\n    <p translate>\n      If no constraints are set, device protocols are applied at any fitting location on the OPC UA\n      server.\n    </p>\n  </div>\n\n  <div class=\"col-md-6\">\n    <ul class=\"list-group\" style=\"box-shadow: none;\">\n      <!-- Limit device type to a set of servers -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to a set of servers' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.matchesServerIds !== null && constraints.matchesServerIds.length > 0\n            \"\n            (change)=\"onChangeShowServerIds($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to a set of servers' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [collapse]=\"\n            (!showServerIds &&\n              (constraints.matchesServerIds !== null && constraints.matchesServerIds.length < 1)) ||\n            (!showServerIds && constraints.matchesServerIds === null)\n          \"\n        >\n          <c8y-form-group>\n            <c8y-select\n              [items]=\"opcuaServers\"\n              [selected]=\"selectedItems\"\n              [placeholder]=\"placeholderSelectServerIds\"\n              (onChange)=\"serverIdsSelected($event)\"\n              [updateItems]=\"updateSelectedItem\"\n            >\n            \n              <c8y-li *ngIf=\"opcuaServers.length > sizeToShowFilter\" class=\"sticky-top\">\n                <c8y-filter [icon]=\"'search'\"  (onSearch)=\"filterItems($event)\"></c8y-filter>\n              </c8y-li>\n              <c8y-li *ngIf=\"filteredList && filteredList.length === 0\">\n                <c8y-li-body> \n                  <div class=\"c8y-empty-state text-left\">\n                  <p>{{ 'No items to display.' | translate }}</p>\n                </div>\n                </c8y-li-body>\n              </c8y-li>\n              <c8y-li *ngFor=\"let item of filteredList\">\n                <c8y-li-checkbox\n                  [selected]=\"isChecked(item)\"\n                  (onSelect)=\"onSelect($event, item)\"\n                ></c8y-li-checkbox>\n                <c8y-li-body>{{ item.name | translate }}<br>\n                  <span class=\"text-label-small m-r-4\" translate>ID</span> <small>{{ item.id }}</small>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-select>\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type scope in the address space -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol scope in the address space' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length > 0\n            \"\n            (change)=\"onChangeShowBrowsePath($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol scope in the address space' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"\n            (!showBrowsePath &&\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length < 1) ||\n            (!showBrowsePath && constraints.browsePathMatchesRegex === null)\n          \"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"browsePath\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} /objects/devices/.*\"\n              [(ngModel)]=\"constraints.browsePathMatchesRegex\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to servers with a certain fragment-->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to servers with a certain fragment' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length > 0\"\n            (change)=\"onChangeShowServerFragment($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to servers with a certain fragment' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showServerFragment && constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length < 1) || (!showServerFragment && constraints.serverObjectHasFragment === null)\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"serverFragment\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_SomeServerMarker\"\n              [(ngModel)]=\"constraints.serverObjectHasFragment\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to a specific root node ID -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to specific root nodes ID' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length > 0\"\n            (change)=\"onChangeNodeId($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to specific root nodes ID' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showRootNodes && constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length < 1) || ( !showRootNodes && constraints.matchesNodeIds === null)\"\n        >\n            <ul c8yInputGroupListContainer class=\"list-unstyled p-t-16\">\n              <li\n                class=\"m-b-8\"\n                *ngFor=\"let item of constraints.matchesNodeIds; let i = index; trackBy: trackByFn\"\n              >\n                <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n                  <c8y-form-group class=\"form-group--tooltip-validation\">\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{ 'e.g.' | translate }} nodeId\"\n                      [(ngModel)]=\"constraints.matchesNodeIds[i]\"\n                      [required]=\"true\"\n                    />\n                  </c8y-form-group>\n                </c8y-input-group-list>\n              </li>\n            </ul> \n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.InventoryService }]; }, { model: [{
            type: Input
        }] }); })();

const routes = [
    {
        context: ViewContext.Device,
        path: 'opcua-servers',
        component: OpcuaServersComponent,
        label: gettext('OPC UA server'),
        icon: 'server',
        canActivate: [OpcuaAgentGuard, OpcuaMicroserviceGuard]
    },
    {
        context: ViewContext.Device,
        path: 'address-space',
        component: OpcuaAddressSpaceComponent,
        label: gettext('Address space'),
        icon: 'cloud-network',
        canActivate: [OpcuaServerGuard, OpcuaMicroserviceGuard]
    }
];
const deviceProtocolRoutes = [
    {
        path: 'deviceprotocols/opcuaV2/:id',
        component: OpcuaDeviceProtocolDetailComponent
    }
];
const ɵ0 = routes;
class OpcuaProtocolModule {
}
OpcuaProtocolModule.ɵfac = function OpcuaProtocolModule_Factory(t) { return new (t || OpcuaProtocolModule)(); };
OpcuaProtocolModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OpcuaProtocolModule });
OpcuaProtocolModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        OpcuaAgentGuard,
        OpcuaServerGuard,
        OpcuaMicroserviceGuard,
        OpcuaService,
        AddressSpaceService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            DropAreaModule,
            ButtonsModule,
            CdkTreeModule,
            RouterModule.forRoot(deviceProtocolRoutes, { useHash: true }),
            TooltipModule.forRoot(),
            PopoverModule.forRoot(),
            DeviceStatusModule,
            BrowserAnimationsModule,
            CollapseModule.forRoot(),
            BsDropdownModule.forRoot()
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaProtocolModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    OpcuaServersComponent,
                    OpcuaServerListComponent,
                    OpcuaServerConfigComponent,
                    OpcuaAddressSpaceComponent,
                    OpcuaAddressSpaceTreeComponent,
                    OpcuaAddressSpaceDetailComponent,
                    OpcuaDeviceProtocolDescription,
                    OpcuaDeviceProtocolDetailComponent,
                    OpcuaDeviceProtocolDataReportingComponent,
                    OpcuaDeviceProtocolMapping,
                    OpcuaDeviceProtocolObjectMapping,
                    OpcuaDeviceProtocolMappingCustomAction,
                    OpcuaDeviceProtocolObjectMappingStatus,
                    OpcuaAutoApplySettingsComponent,
                    OpcuaDeviceProtocolBrowsePathValidation
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DropAreaModule,
                    ButtonsModule,
                    CdkTreeModule,
                    RouterModule.forRoot(deviceProtocolRoutes, { useHash: true }),
                    TooltipModule.forRoot(),
                    PopoverModule.forRoot(),
                    DeviceStatusModule,
                    BrowserAnimationsModule,
                    CollapseModule.forRoot(),
                    BsDropdownModule.forRoot()
                ],
                entryComponents: [
                    OpcuaAddressSpaceTreeComponent,
                    OpcuaAddressSpaceComponent,
                    OpcuaServersComponent
                ],
                providers: [
                    OpcuaAgentGuard,
                    OpcuaServerGuard,
                    OpcuaMicroserviceGuard,
                    OpcuaService,
                    AddressSpaceService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OpcuaProtocolModule, { declarations: function () { return [OpcuaServersComponent, OpcuaServerListComponent, OpcuaServerConfigComponent, OpcuaAddressSpaceComponent, OpcuaAddressSpaceTreeComponent, OpcuaAddressSpaceDetailComponent, OpcuaDeviceProtocolDescription, OpcuaDeviceProtocolDetailComponent, OpcuaDeviceProtocolDataReportingComponent, OpcuaDeviceProtocolMapping, OpcuaDeviceProtocolObjectMapping, OpcuaDeviceProtocolMappingCustomAction, OpcuaDeviceProtocolObjectMappingStatus, OpcuaAutoApplySettingsComponent, OpcuaDeviceProtocolBrowsePathValidation]; }, imports: function () { return [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        DropAreaModule,
        ButtonsModule,
        CdkTreeModule, ɵngcc6.RouterModule, ɵngcc12.TooltipModule, ɵngcc10.PopoverModule, DeviceStatusModule,
        BrowserAnimationsModule, ɵngcc3.CollapseModule, ɵngcc7.BsDropdownModule]; } }); })();

const opcuaAddressSpaceTreeComponent = downgradeComponent({
    component: OpcuaAddressSpaceTreeComponent,
    inputs: ['moId'],
    outputs: ['selectedNode']
});

const NAME = 'c8y.upgrade.opcua';
const angularJsModule = angular
    .module(NAME, [])
    .directive('c8yOpcuaAddressSpaceTree', opcuaAddressSpaceTreeComponent);
const ng1Modules = [NAME];
registerNgModule(ng1Modules);

/**
 * Generated bundle index. Do not edit.
 */

export { AddressSpaceService, DynamicDataSource, OpcuaAddressSpaceComponent, OpcuaAddressSpaceDetailComponent, OpcuaAddressSpaceTreeComponent, OpcuaAgentGuard, OpcuaAutoApplySettingsComponent, OpcuaDeviceProtocolBrowsePathValidation, OpcuaDeviceProtocolDataReportingComponent, OpcuaDeviceProtocolDescription, OpcuaDeviceProtocolDetailComponent, OpcuaDeviceProtocolMapping, OpcuaDeviceProtocolMappingCustomAction, OpcuaDeviceProtocolObjectMapping, OpcuaDeviceProtocolObjectMappingStatus, OpcuaMicroserviceGuard, OpcuaProtocolModule, OpcuaServerConfigComponent, OpcuaServerGuard, OpcuaServerListComponent, OpcuaServersComponent, OpcuaService, ng1Modules, ɵ0 };

//# sourceMappingURL=c8y-ngx-components-protocol-opcua.js.map