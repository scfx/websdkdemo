import { __awaiter } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { OperationStatus, OperationService, InventoryBinaryService } from '@c8y/client';
import { gettext, ModalService, AlertService, operationStatusIcons, operationStatusClasses, OperationRealtimeService, ViewContext, CoreModule, ListGroupModule, HOOK_ROUTE } from '@c8y/ngx-components';
import { assign } from 'lodash-es';
import { switchMap, map } from 'rxjs/operators';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { BehaviorSubject, pipe } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import { RepositoryModule } from '@c8y/ngx-components/repository';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@angular/router';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'ngx-bootstrap/tooltip';
import * as ɵngcc6 from '@c8y/ngx-components/repository';

function DiagnosticsComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵelementStart(2, "div", 9);
    ɵngcc0.ɵɵelementStart(3, "label");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 10);
    ɵngcc0.ɵɵelementStart(7, "div", 11);
    ɵngcc0.ɵɵelement(8, "i", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 13);
    ɵngcc0.ɵɵelementStart(10, "div", 14);
    ɵngcc0.ɵɵelementStart(11, "div", 15);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "div", 16);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, "Date"));
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(13, 5, "Event"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(16, 7, "File"));
} }
function DiagnosticsComponent_ng_template_8_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "span", 24);
    ɵngcc0.ɵɵtext(3, " File ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 25);
    ɵngcc0.ɵɵelement(5, "c8y-file-download", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", operation_r3.c8y_DiagnosticReport.file);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("url", operation_r3.c8y_DiagnosticReport.file);
} }
function DiagnosticsComponent_ng_template_8_c8y_li_action_14_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 27);
    ɵngcc0.ɵɵlistener("click", function DiagnosticsComponent_ng_template_8_c8y_li_action_14_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const operation_r3 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onCancel(operation_r3); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Cancel"));
} }
function DiagnosticsComponent_ng_template_8_c8y_li_action_15_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li-action", 28);
    ɵngcc0.ɵɵlistener("click", function DiagnosticsComponent_ng_template_8_c8y_li_action_15_Template_c8y_li_action_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const operation_r3 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onDelete(operation_r3); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(1, 1, "Delete"));
} }
function DiagnosticsComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li-timeline");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "c8yDate");
    ɵngcc0.ɵɵelementStart(3, "c8y-li");
    ɵngcc0.ɵɵelementStart(4, "c8y-li-icon");
    ɵngcc0.ɵɵelement(5, "i", 17);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "c8y-li-body", 14);
    ɵngcc0.ɵɵelementStart(8, "div", 15);
    ɵngcc0.ɵɵelementStart(9, "p", 18);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, DiagnosticsComponent_ng_template_8_div_13_Template, 6, 2, "div", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, DiagnosticsComponent_ng_template_8_c8y_li_action_14_Template, 2, 3, "c8y-li-action", 20);
    ɵngcc0.ɵɵtemplate(15, DiagnosticsComponent_ng_template_8_c8y_li_action_15_Template, 2, 3, "c8y-li-action", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const operation_r3 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 9, operation_r3.creationTime), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r1.statusIcons[operation_r3.status])("ngClass", ctx_r1.statusClasses[operation_r3.status])("tooltip", ɵngcc0.ɵɵpipeBind1(6, 11, operation_r3.status == null ? null : operation_r3.status.toString()));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 13, operation_r3.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 15, operation_r3.description), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", operation_r3.c8y_DiagnosticReport == null ? null : operation_r3.c8y_DiagnosticReport.file);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", operation_r3.status === "PENDING");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", operation_r3.status === "SUCCESSFUL");
} }
function DiagnosticsComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelementStart(1, "h1", 30);
    ɵngcc0.ɵɵelement(2, "i", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h3", 3);
    ɵngcc0.ɵɵtext(4, "No diagnostic files available.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
class DiagnosticsService {
    constructor(operationService, inventoryBinary, modalService, alertService) {
        this.operationService = operationService;
        this.inventoryBinary = inventoryBinary;
        this.modalService = modalService;
        this.alertService = alertService;
        this.fragment = 'c8y_DiagnosticReport';
    }
    isSupportedDevice(device) {
        const supportedOperations = (device && device.c8y_SupportedOperations) || [];
        return supportedOperations.includes(this.fragment);
    }
    getOperations$(device$) {
        return device$.pipe(switchMap(device => this.operationService.list({
            deviceId: device.id,
            fragmentType: this.fragment,
            dateFrom: new Date(0).toISOString(),
            dateTo: new Date(Date.now()).toISOString(),
            revert: true,
            pageSize: 10,
            withTotalPages: true
        })));
    }
    createOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = {
                deviceId,
                description: gettext('Diagnostic file request'),
                [this.fragment]: {}
            };
            try {
                yield this.operationService.create(operation);
                this.alertService.success(gettext('Diagnostic file request sent.'));
            }
            catch (error) {
                this.alertService.addServerFailure(error);
            }
        });
    }
    deleteOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.modalService.confirm(gettext('Delete diagnostic file'), gettext('You are about to delete this diagnostic file. Do you want to proceed?'), 'danger', {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                if (result) {
                    this.deleteDiagnosticsBinary(operation);
                }
            }
            catch (error) {
                // Do nothing
            }
        });
    }
    cancelOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const operationAfterUpdate = (yield this.operationService.update({
                    id: operation.id,
                    status: OperationStatus.FAILED,
                    failureReason: gettext('Operation cancelled by user.')
                })).data;
                assign(operation, operationAfterUpdate);
                this.alertService.success(gettext('Diagnostic file request cancelled.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getOperation(op) {
        if (!op) {
            return null;
        }
        return op && op[this.fragment];
    }
    deleteDiagnosticsBinary(op) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = this.getOperation(op);
            if (operation && operation.file) {
                const { file } = operation;
                try {
                    const binaryId = this.inventoryBinary.getIdFromUrl(file);
                    const result = yield this.inventoryBinary.delete(binaryId);
                    if (result) {
                        this.deleteDiagnosticsFragment(op);
                    }
                }
                catch (err) {
                    if (err.res.status === 404) {
                        // In case the file is already deleted via other means we want to delete the fragment
                        this.deleteDiagnosticsFragment(op);
                    }
                    else {
                        const msg = gettext('Could not delete the diagnostic file.');
                        this.alertService.danger(msg);
                    }
                }
            }
        });
    }
    deleteDiagnosticsFragment(op) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteOp = {
                id: op.id,
                status: op.status,
                [this.fragment]: null
            };
            try {
                const operationAfterUpdate = (yield this.operationService.update(deleteOp)).data;
                assign(op, operationAfterUpdate);
                this.alertService.success(gettext('Diagnostic file deleted.'));
            }
            catch (error) {
                this.alertService.addServerFailure(error);
            }
        });
    }
}
DiagnosticsService.ɵfac = function DiagnosticsService_Factory(t) { return new (t || DiagnosticsService)(ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc1.InventoryBinaryService), ɵngcc0.ɵɵinject(ɵngcc2.ModalService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
DiagnosticsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DiagnosticsService, factory: DiagnosticsService.ɵfac });
DiagnosticsService.ctorParameters = () => [
    { type: OperationService },
    { type: InventoryBinaryService },
    { type: ModalService },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.OperationService }, { type: ɵngcc1.InventoryBinaryService }, { type: ɵngcc2.ModalService }, { type: ɵngcc2.AlertService }]; }, null); })();

class DiagnosticsTabGuard {
    constructor(diagnosticsService) {
        this.diagnosticsService = diagnosticsService;
    }
    canActivate(route) {
        const device = route.data.contextData || route.parent.data.contextData;
        return this.diagnosticsService.isSupportedDevice(device);
    }
}
DiagnosticsTabGuard.ɵfac = function DiagnosticsTabGuard_Factory(t) { return new (t || DiagnosticsTabGuard)(ɵngcc0.ɵɵinject(DiagnosticsService)); };
DiagnosticsTabGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DiagnosticsTabGuard, factory: DiagnosticsTabGuard.ɵfac });
DiagnosticsTabGuard.ctorParameters = () => [
    { type: DiagnosticsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsTabGuard, [{
        type: Injectable
    }], function () { return [{ type: DiagnosticsService }]; }, null); })();

class DiagnosticsComponent {
    constructor(route, diagnosticService, operationRealtime) {
        this.route = route;
        this.diagnosticService = diagnosticService;
        this.operationRealtime = operationRealtime;
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
        this.deviceId = this.route.snapshot.parent.data.contextData.id;
        this.device$ = new BehaviorSubject(this.route.snapshot.parent.data.contextData);
        this.operations$ = this.diagnosticService.getOperations$(this.device$);
        this.operationsPipe = pipe(map((ops) => ops.filter(op => op[this.diagnosticService.fragment])));
        this.realtimeOptions = {
            entityOrId: this.deviceId,
            removeOnUpdate: true,
            insertOnUpdate: true
        };
    }
    onDiagnosticRequest() {
        this.diagnosticService.createOperation(this.deviceId);
    }
    onDelete(operation) {
        this.diagnosticService.deleteOperation(operation);
    }
    onCancel(operation) {
        this.diagnosticService.cancelOperation(operation);
    }
}
DiagnosticsComponent.ɵfac = function DiagnosticsComponent_Factory(t) { return new (t || DiagnosticsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(DiagnosticsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationRealtimeService)); };
DiagnosticsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DiagnosticsComponent, selectors: [["c8y-diagnostics"]], decls: 10, vars: 10, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "stethoscope"], ["translate", ""], ["class", "page-sticky-header hidden-xs c8y-list__item c8y-list--timeline", 4, "ngIf"], ["c8yFor", "", 3, "c8yForOf", "c8yForPipe", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForCount"], ["class", "c8y-empty-state m-t-40", 4, "ngIf"], [1, "page-sticky-header", "hidden-xs", "c8y-list__item", "c8y-list--timeline"], [1, "d-flex"], [1, "c8y-list--timeline__item__date", "flex-item-v-center"], [1, "c8y-list__item__block", "flex-grow"], [1, "c8y-list__item__icon"], [1, "p-l-24"], [1, "c8y-list__item__body"], [1, "content-flex-40"], [1, "col-4"], [1, "col-5", "m-l-8"], [3, "c8yIcon", "ngClass", "tooltip"], [1, "text-truncate-wrap", 3, "title"], ["class", "col-5", 4, "ngIf"], ["icon", "times", 3, "label", "click", 4, "ngIf"], ["icon", "trash", 3, "label", "click", 4, "ngIf"], [1, "col-5"], [1, "text-truncate-wrap", "m-t-xs-8"], ["translate", "", 1, "text-label-small", "visible-xs"], [3, "title"], [3, "url"], ["icon", "times", 3, "label", "click"], ["icon", "trash", 3, "label", "click"], [1, "c8y-empty-state", "m-t-40"], [1, "c8y-icon"]], template: function DiagnosticsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DiagnosticsComponent_Template_button_click_1_listener() { return ctx.onDiagnosticRequest(); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵelementStart(4, "span", 3);
        ɵngcc0.ɵɵtext(5, "Request diagnostic file");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, DiagnosticsComponent_div_6_Template, 17, 9, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "c8y-list-group");
        ɵngcc0.ɵɵtemplate(8, DiagnosticsComponent_ng_template_8_Template, 16, 17, "ng-template", 5);
        ɵngcc0.ɵɵlistener("c8yForCount", function DiagnosticsComponent_Template_ng_template_c8yForCount_8_listener($event) { return ctx.operationCount = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, DiagnosticsComponent_div_9_Template, 5, 0, "div", 6);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 8, "Request diagnostic file"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.operationCount > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.operations$)("c8yForPipe", ctx.operationsPipe)("c8yForRealtime", ctx.operationRealtime)("c8yForRealtimeOptions", ctx.realtimeOptions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.operationCount === 0);
    } }, directives: [ɵngcc2.ActionBarItemComponent, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc4.NgIf, ɵngcc2.ListGroupComponent, ɵngcc2.ForOfDirective, ɵngcc2.ListItemTimelineComponent, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc4.NgClass, ɵngcc5.TooltipDirective, ɵngcc2.ListItemBodyComponent, ɵngcc6.ɵb, ɵngcc2.ListItemActionComponent], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc2.DatePipe], encapsulation: 2 });
DiagnosticsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DiagnosticsService },
    { type: OperationRealtimeService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsComponent, [{
        type: Component,
        args: [{
                template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Request diagnostic file' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"onDiagnosticRequest()\"\n  >\n    <i c8yIcon=\"stethoscope\"></i> <span translate>Request diagnostic file</span>\n  </button>\n</c8y-action-bar-item>\n\n<div\n  class=\"page-sticky-header hidden-xs c8y-list__item c8y-list--timeline\"\n  *ngIf=\"operationCount > 0\"\n>\n  <div class=\"d-flex\">\n    <div class=\"c8y-list--timeline__item__date flex-item-v-center\">\n      <label>{{ 'Date' | translate }}</label>\n    </div>\n    <div class=\"c8y-list__item__block flex-grow\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"p-l-24\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-40\">\n          <div class=\"col-4\">{{ 'Event' | translate }}</div>\n          <div class=\"col-5 m-l-8\">{{ 'File' | translate }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<c8y-list-group>\n  <ng-template\n    c8yFor\n    let-operation\n    [c8yForOf]=\"operations$\"\n    [c8yForPipe]=\"operationsPipe\"\n    [c8yForRealtime]=\"operationRealtime\"\n    [c8yForRealtimeOptions]=\"realtimeOptions\"\n    (c8yForCount)=\"operationCount = $event\"\n  >\n    <c8y-li-timeline>\n      {{ operation.creationTime | c8yDate }}\n      <c8y-li>\n        <c8y-li-icon>\n          <i\n            [c8yIcon]=\"statusIcons[operation.status]\"\n            [ngClass]=\"statusClasses[operation.status]\"\n            [tooltip]=\"operation.status?.toString() | translate\"\n          ></i>\n        </c8y-li-icon>\n        <c8y-li-body class=\"content-flex-40\">\n          <div class=\"col-4\">\n            <p class=\"text-truncate-wrap\" title=\"{{ operation.description | translate }}\">\n              {{ operation.description | translate }}\n            </p>\n          </div>\n          <div class=\"col-5\" *ngIf=\"operation.c8y_DiagnosticReport?.file\">\n            <div class=\"text-truncate-wrap m-t-xs-8\">\n              <span class=\"text-label-small visible-xs\" translate> File </span>\n              <span title=\"{{ operation.c8y_DiagnosticReport.file }}\">\n                <c8y-file-download\n                  url=\"{{ operation.c8y_DiagnosticReport.file }}\"\n                ></c8y-file-download>\n              </span>\n            </div>\n          </div>\n        </c8y-li-body>\n        <c8y-li-action\n          (click)=\"onCancel(operation)\"\n          *ngIf=\"operation.status === 'PENDING'\"\n          icon=\"times\"\n          label=\"{{ 'Cancel' | translate }}\"\n        >\n        </c8y-li-action>\n        <c8y-li-action\n          (click)=\"onDelete(operation)\"\n          *ngIf=\"operation.status === 'SUCCESSFUL'\"\n          icon=\"trash\"\n          label=\"{{ 'Delete' | translate }}\"\n        >\n        </c8y-li-action>\n      </c8y-li>\n    </c8y-li-timeline>\n  </ng-template>\n</c8y-list-group>\n\n<!-- EMPTY STATE -->\n\n<div class=\"c8y-empty-state m-t-40\" *ngIf=\"operationCount === 0\">\n  <h1 class=\"c8y-icon\">\n    <i c8yIcon=\"stethoscope\"></i>\n  </h1>\n  <h3 translate>No diagnostic files available.</h3>\n</div>\n",
                selector: 'c8y-diagnostics'
            }]
    }], function () { return [{ type: ɵngcc3.ActivatedRoute }, { type: DiagnosticsService }, { type: ɵngcc2.OperationRealtimeService }]; }, null); })();

const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'diagnostics',
        component: DiagnosticsComponent,
        label: gettext('Diagnostics'),
        icon: 'stethoscope',
        canActivate: [DiagnosticsTabGuard],
        priority: 200
    }
];
class DiagnosticsModule {
}
DiagnosticsModule.ɵfac = function DiagnosticsModule_Factory(t) { return new (t || DiagnosticsModule)(); };
DiagnosticsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DiagnosticsModule });
DiagnosticsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        DiagnosticsService,
        BsDropdownConfig,
        DiagnosticsTabGuard,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            RouterModule,
            CommonModule,
            ListGroupModule,
            RepositoryModule,
            BsDropdownModule,
            TooltipModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DiagnosticsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    RouterModule,
                    CommonModule,
                    ListGroupModule,
                    RepositoryModule,
                    BsDropdownModule,
                    TooltipModule
                ],
                declarations: [DiagnosticsComponent],
                exports: [DiagnosticsComponent],
                providers: [
                    DiagnosticsService,
                    BsDropdownConfig,
                    DiagnosticsTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DiagnosticsModule, { declarations: function () { return [DiagnosticsComponent]; }, imports: function () { return [CoreModule,
        RouterModule,
        CommonModule,
        ListGroupModule,
        RepositoryModule,
        BsDropdownModule,
        TooltipModule]; }, exports: function () { return [DiagnosticsComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DiagnosticsComponent, DiagnosticsModule, DiagnosticsService, DiagnosticsTabGuard, ɵ0 };

//# sourceMappingURL=c8y-ngx-components-diagnostics.js.map