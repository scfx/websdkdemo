import { EventEmitter, Injectable, Component, Input, ViewChild, Output, NgModule } from '@angular/core';
import { Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { gettext, Status, ModalService, AlertService, HumanizeAppNamePipe, AppStateService, ZipService, WizardComponent, C8yStepper, WizardService, PluginsService, ViewContext, Permissions, OptionsService, DropAreaComponent, CoreModule, FormsModule, HOOK_TABS, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, HOOK_WIZARD } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { __awaiter } from 'tslib';
import { ApplicationType, ApplicationService, TenantService, Isolation, BillingMode, InventoryService, FetchClient } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { saveAs } from 'file-saver/FileSaver';
import { groupBy, get, pick, kebabCase, cloneDeep } from 'lodash-es';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { debounceTime, take, tap, switchMap, shareReplay, map } from 'rxjs/operators';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { lexer, parser } from 'marked';

/** Wizard types  */
var Wizards;
(function (Wizards) {
    Wizards["APPLICATION_UPLOAD"] = "applicationUpload";
    Wizards["MICROSERVICE_UPLOAD"] = "microserviceUpload";
})(Wizards || (Wizards = {}));
var ERROR_TYPE;
(function (ERROR_TYPE) {
    ERROR_TYPE["TYPE_VALIDATION"] = "TYPE_VALIDATION";
    ERROR_TYPE["ALREADY_SUBSCRIBED"] = "ALREADY_SUBSCRIBED";
    ERROR_TYPE["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    ERROR_TYPE["NO_MANIFEST_FILE"] = "NO_MANIFEST_FILE";
    ERROR_TYPE["INVALID_PACKAGE"] = "INVALID_PACKAGE";
    ERROR_TYPE["INVALID_APPLICATION"] = "INVALID_APPLICATION";
})(ERROR_TYPE || (ERROR_TYPE = {}));

const ERROR_MESSAGES = {
    [ERROR_TYPE.TYPE_VALIDATION]: gettext('Wrong file format. Expected a *.zip file with a valid manifest.'),
    [ERROR_TYPE.ALREADY_SUBSCRIBED]: gettext('Could not subscribe to the microservice because another application with the same context path is already subscribed.'),
    [ERROR_TYPE.NO_MANIFEST_FILE]: gettext('Could not find a manifest.'),
    [ERROR_TYPE.INVALID_PACKAGE]: gettext('You have not uploaded a valid package.'),
    [ERROR_TYPE.INVALID_APPLICATION]: gettext('You have not uploaded a valid application.'),
    [ERROR_TYPE.INTERNAL_ERROR]: gettext('An internal error occurred, try to upload again.')
};
const APP_STATE = {
    SUBSCRIBED: {
        label: gettext('Subscribed`application`'),
        class: 'label-primary'
    },
    CUSTOM: {
        label: gettext('Custom`application`'),
        class: 'label-info'
    },
    EXTERNAL: {
        label: gettext('External`application`'),
        class: 'label-warning'
    },
    UNPACKED: {
        label: gettext('Unpacked`application`'),
        class: 'label-success'
    },
    PACKAGE_APP: {
        label: gettext('Application'),
        class: 'label-success'
    },
    PACKAGE_PLUGIN: {
        label: gettext('Plugins'),
        class: 'label-info'
    }
};
const ɵ0$1 = (repository) => ((repository === null || repository === void 0 ? void 0 : repository.url) ? repository.url : repository), ɵ1$1 = (e, link) => window.open(link.value, '_blank', 'noopener,noreferrer'), ɵ2$1 = (e, link) => window.open(link.value, '_blank', 'noopener,noreferrer');
const packageProperties = [
    {
        label: gettext('Version'),
        key: 'version'
    },
    {
        label: gettext('Author'),
        key: 'author'
    },
    {
        label: gettext('Keywords'),
        key: 'keywords'
    },
    {
        label: gettext('Source'),
        key: 'repository',
        transform: ɵ0$1,
        type: 'link',
        action: ɵ1$1
    },
    {
        label: gettext('Homepage'),
        key: 'homepage',
        type: 'link',
        action: ɵ2$1
    },
    {
        label: gettext('Required platform version'),
        key: 'requiredPlatformVersion'
    },
    {
        label: gettext('License'),
        key: 'license'
    }
];

const CUMULOCITY_JSON = 'cumulocity.json';
class EcosystemService {
    constructor(modal, alertService, humanizeAppName, translateService, applicationService, appStateService, zipService, tenantService) {
        this.modal = modal;
        this.alertService = alertService;
        this.humanizeAppName = humanizeAppName;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.appStateService = appStateService;
        this.zipService = zipService;
        this.tenantService = tenantService;
        this.appDeleted = new EventEmitter();
        this.progress = new BehaviorSubject(null);
    }
    getUniqueAppConfig(srcApp, existingApps) {
        let app = {
            name: srcApp.name,
            key: srcApp.key,
            contextPath: srcApp.contextPath
        };
        for (let retryNo = 0; retryNo < 9;) {
            if (this.checkIfAppNameKeyPathExists(existingApps, app, retryNo)) {
                retryNo++;
                app = {
                    name: [srcApp.name, retryNo].join('-'),
                    key: [srcApp.key, retryNo].join('-'),
                    contextPath: [srcApp.contextPath, retryNo].join('-')
                };
            }
            else {
                return app;
            }
        }
        return app;
    }
    getApplication(appId) {
        return this.applicationService.detail(appId).then((res) => res.data);
    }
    getApplications(customFilter = {}) {
        const filter = {
            pageSize: 2000,
            withTotalPages: true
        };
        Object.assign(filter, customFilter);
        const currentTenant = this.appStateService.currentTenant.value;
        return this.applicationService.listByTenant(currentTenant.name, filter);
    }
    getMicroservices() {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications()).data;
            const microservices = apps.filter((app) => this.isMicroservice(app));
            return microservices.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getWebApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter((app) => this.isApplication(app));
            this.appsGroupedByContextPath = groupBy(webApps, 'contextPath');
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getFeatureApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter((app) => this.isFeature(app));
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    getPackageApplications(customFilter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = (yield this.getApplications(customFilter)).data;
            const webApps = apps.filter((app) => this.isPackage(app));
            return webApps.sort((a, b) => a.name.localeCompare(b.name));
        });
    }
    isMicroserviceHostingAllowed() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: apps } = yield this.applicationService.listByName('feature-microservice-hosting');
            return !!apps.filter(app => { var _a, _b; return ((_b = (_a = app.owner) === null || _a === void 0 ? void 0 : _a.tenant) === null || _b === void 0 ? void 0 : _b.id) === 'management'; }).length;
        });
    }
    canOpenAppInBrowser(app) {
        const isNotAFeature = !this.isFeature(app);
        const hasProperType = [
            ApplicationType.HOSTED,
            ApplicationType.EXTERNAL,
            ApplicationType.REPOSITORY
        ].includes(app.type);
        const isNotAPackage = !this.isPackage(app);
        return isNotAFeature && hasProperType && isNotAPackage;
    }
    canDeleteApp(app) {
        return !this.isCurrentApp(app) && this.isOwner(app);
    }
    isOwner(app) {
        const currentTenant = this.appStateService.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant.name === appOwner;
    }
    isFeature(app) {
        return !!app.name.match(/feature-/);
    }
    isMicroservice(app) {
        return app.type === 'MICROSERVICE';
    }
    isExternal(app) {
        return app.type === 'EXTERNAL';
    }
    isPackage(app) {
        var _a;
        return ((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.isPackage) === true;
    }
    cancelAppCreation(app) {
        if (this.xhr) {
            this.xhr.abort();
        }
        if (app) {
            this.applicationService.delete(app);
        }
    }
    updateUploadProgress(event) {
        if (event.lengthComputable) {
            const currentProgress = this.progress.value;
            this.progress.next(currentProgress + (event.loaded / event.total) * (95 - currentProgress));
        }
    }
    setAppActiveVersion(app, activeVersionId) {
        return this.applicationService.update({ id: app.id, activeVersionId });
    }
    getHumanizedAppName(app) {
        return this.humanizeAppName.transform(app.name).pipe(debounceTime(250), take(1)).toPromise();
    }
    createConfig(app, formGroupValue) {
        const { id, manifest } = app;
        let config = pick(formGroupValue, ['name', 'key', 'contextPath']);
        config = Object.assign(Object.assign({}, config), { setup: true, id, description: manifest.description });
        return config;
    }
    updateAppManifest(application, sourcePackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = application;
            const cleanedApp = this.removeAppProperties(application);
            cleanedApp.setup = true;
            cleanedApp.manifest.isPackage = false;
            cleanedApp.manifest.source = sourcePackage.id;
            return yield this.applicationService
                .binary(id)
                .updateFiles([{ path: CUMULOCITY_JSON, contents: JSON.stringify(cleanedApp) }]);
        });
    }
    listArchives(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                pageSize: 100
            };
            return (yield this.applicationService.binary(appId).list(filter)).data;
        });
    }
    deleteArchive(archive, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedArchiveName = yield this.getHumanizedAppName(archive);
            try {
                yield this.modal.confirm(gettext('Delete archive'), this.translateService.instant(gettext(`You are about to delete archive "{{ humanizedArchiveName }}". Do you want to proceed?`), { humanizedArchiveName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                yield this.applicationService.binary(app).delete(archive.id);
                this.alertService.success(gettext('Archive deleted.'));
            }
            catch (ex) {
                if (ex) {
                    this.alertService.danger(get(ex, 'data.message'), ex.data);
                }
                throw new Error('Cancelled');
            }
        });
    }
    downloadArchive(app, archive) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const binary = yield this.getBinary(app, archive);
                const fileBinary = new Blob([binary], { type: 'application/x-zip-compressed' });
                saveAs(fileBinary, archive.name);
            }
            catch (e) {
                // empty
            }
        });
    }
    updateApp(app, deleteOnFailure = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.applicationService.update(app);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
                if (deleteOnFailure) {
                    yield this.applicationService.delete(app.id);
                    throw new Error('Application creation failed.');
                }
            }
        });
    }
    deleteApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedAppName = yield this.getHumanizedAppName(app);
            yield this.modal.confirm(gettext('Delete application'), this.translateService.instant(gettext(`You are about to delete application "{{ humanizedAppName }}". Do you want to proceed?`), { humanizedAppName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
            yield this.applicationService.delete(app.id);
            this.alertService.success(gettext('Application deleted.'));
            this.appDeleted.emit(app);
        });
    }
    checkIfSubscribed(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = yield this.tenantService.current();
            const subscribedApps = currentTenant.data.applications.references;
            return subscribedApps.some((application) => application.application.id === app.id);
        });
    }
    subscribeApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            try {
                yield this.tenantService.subscribeApplication(currentTenant, app);
                this.alertService.success(gettext('Successfully subscribed to application.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    unsubscribeApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = this.appStateService.currentTenant.value;
            try {
                yield this.tenantService.unsubscribeApplication(currentTenant, app);
                this.alertService.success(gettext('Successfully unsubscribed from application.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    isValidAppType(archive, appType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const currentType = yield this.getAppType(archive);
                if (currentType !== appType) {
                    throw new Error(ERROR_TYPE.TYPE_VALIDATION);
                }
                else {
                    this.progress.next(this.progress.value + 10);
                    return true;
                }
            }
            catch (ex) {
                throw new Error(ERROR_TYPE.TYPE_VALIDATION);
            }
        });
    }
    uploadArchiveToApp(archive, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const binaryService = this.applicationService.binary(app);
            this.xhr = binaryService.uploadWithProgressXhr(archive, this.updateUploadProgress.bind(this));
            const binaryMo = yield binaryService.getXMLHttpResponse(this.xhr);
            return (yield this.setAppActiveVersion(app, binaryMo.id)).data;
        });
    }
    createAppForArchive(archive, isPackageTypeArchive = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let isPackage = false;
            const appType = yield this.getAppType(archive);
            let appModel = {};
            if (appType === ApplicationType.HOSTED) {
                try {
                    appModel = yield this.getCumulocityJson(archive).toPromise();
                    isPackage = appModel.isPackage;
                }
                catch (e) {
                    // do nothing, we allow having HOSTED applications without the manifest file
                }
            }
            const name = this.getBaseNameFromArchiveOrAppModel(archive, appType, appModel);
            const clearedName = this.removeForbiddenCharacters(name);
            const key = this.getAppKey(appModel, clearedName);
            const contextPath = this.getContextPath(appModel, name);
            const appToSave = {
                resourcesUrl: '/',
                type: appType,
                name,
                key,
                contextPath
            };
            if (isPackageTypeArchive && !isPackage) {
                throw new Error(ERROR_TYPE.INVALID_PACKAGE);
            }
            else if (!isPackageTypeArchive && isPackage) {
                throw new Error(ERROR_TYPE.INVALID_APPLICATION);
            }
            return (yield this.applicationService.create(Object.assign(Object.assign({}, appToSave), { manifest: { isPackage } }))).data;
        });
    }
    reactivateArchive(app) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.applicationService.reactivateArchive(app.id);
                this.alertService.success(gettext('Application reactivated.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    removeOldestArchive(app, archives) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Delete oldest archive and continue'), gettext('Up to 6 archives can be saved in the platform. If you upload a new archive, the oldest archive that is not active will be deleted. Do you want to proceed?'), Status.INFO, { ok: gettext('Delete and continue') });
                const archiveToDelete = archives[archives.length - 2];
                yield this.applicationService.binary(app).delete(archiveToDelete.id);
                this.alertService.success(gettext('Archive deleted.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getAppState(app) {
        if (!this.isOwner(app)) {
            return APP_STATE.SUBSCRIBED;
        }
        else if (this.isUnpacked(app)) {
            return APP_STATE.UNPACKED;
        }
        else if (app.type === ApplicationType.EXTERNAL) {
            return APP_STATE.EXTERNAL;
        }
        else if (this.isApplicationPackage(app)) {
            return APP_STATE.PACKAGE_APP;
        }
        else if (this.isPluginsPackage(app)) {
            return APP_STATE.PACKAGE_PLUGIN;
        }
        return APP_STATE.CUSTOM;
    }
    isApplicationPackage(app) {
        return this.isPackage(app) && app.manifest.package === 'application';
    }
    isPluginsPackage(app) {
        return this.isPackage(app) && app.manifest.package === 'plugin';
    }
    isUnpacked(app) {
        var _a;
        return !!((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.source);
    }
    hasExports(app) {
        var _a, _b;
        return !!((_b = (_a = app.manifest) === null || _a === void 0 ? void 0 : _a.exports) === null || _b === void 0 ? void 0 : _b.length);
    }
    isApplication(app) {
        return (app.type !== ApplicationType.MICROSERVICE && !this.isFeature(app) && !this.isPackage(app));
    }
    isCustomMicroservice(app) {
        return this.isOwner(app) && app.type === ApplicationType.MICROSERVICE;
    }
    isOverwrittenByCustomApp(app) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.appsGroupedByContextPath) {
                yield this.getWebApplications();
            }
            return (app.contextPath &&
                this.appsGroupedByContextPath[app.contextPath].length === 2 &&
                !this.isOwner(app));
        });
    }
    getAppKey(appModel, name) {
        let key = appModel === null || appModel === void 0 ? void 0 : appModel.key;
        if (!key) {
            key = `${kebabCase(name)}-key`;
        }
        return key;
    }
    getContextPath(appModel, name) {
        return (appModel === null || appModel === void 0 ? void 0 : appModel.contextPath) || name.toLowerCase();
    }
    removeForbiddenCharacters(str) {
        return str.replace(/[^a-zA-Z0-9-_]/g, '');
    }
    isCurrentApp(app) {
        const currentApp = this.appStateService.state.app;
        return currentApp.contextPath === app.contextPath;
    }
    getCumulocityJson(archive) {
        return this.zipService.getJsonData(archive, {
            filename: CUMULOCITY_JSON
        });
    }
    getAppType(archive) {
        return this.getCumulocityJson(archive)
            .toPromise()
            .then((data) => get(data, 'type') ||
            (get(data, 'apiVersion') ? ApplicationType.MICROSERVICE : ApplicationType.HOSTED))
            .catch(() => ApplicationType.HOSTED);
    }
    getBinary(app, archive) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            try {
                const res = yield this.applicationService.binary(app).downloadArchive(archive.id);
                binary = yield res.arrayBuffer();
            }
            catch (ex) {
                const msg = gettext('Could not get the binary.');
                this.alertService.danger(msg);
            }
            return binary;
        });
    }
    getBaseNameFromArchiveOrAppModel(archive, appType, appModel) {
        let baseName = (appModel === null || appModel === void 0 ? void 0 : appModel.name) || archive.name.replace(/\.zip$/i, '');
        if (appType === 'MICROSERVICE') {
            baseName = baseName.replace(/-\d+\.\d+\.\d+(-SNAPSHOT)?$/, '');
        }
        return baseName;
    }
    checkIfAppNameKeyPathExists(existingApps, app, retryNo) {
        return existingApps.find((existingApp) => existingApp.name === app.name ||
            existingApp.key === app.key ||
            existingApp.contextPath === app.contextPath ||
            existingApp.name === [app.name, retryNo].join('-') ||
            existingApp.key === [app.key, retryNo].join('-') ||
            existingApp.contextPath === [app.contextPath, retryNo].join('-'));
    }
    removeAppProperties(app) {
        const tempApp = cloneDeep(app);
        const propertiesToRemove = ['id', 'owner', 'activeVersionId'];
        propertiesToRemove.forEach(prop => delete tempApp[prop]);
        return tempApp;
    }
}
EcosystemService.decorators = [
    { type: Injectable }
];
EcosystemService.ctorParameters = () => [
    { type: ModalService },
    { type: AlertService },
    { type: HumanizeAppNamePipe },
    { type: TranslateService },
    { type: ApplicationService },
    { type: AppStateService },
    { type: ZipService },
    { type: TenantService }
];

class AddWebApplicationComponent {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
        this.headerText = gettext('Upload web application');
        this.successText = gettext('Application created');
        this.createApplicationHandler = (f) => this.createApplication(f);
        this.uploadApplicationHandler = (f, app) => this.uploadApplication(f, app);
    }
    createApplication(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.isValidAppType(file, ApplicationType.HOSTED);
            return this.ecosystemService.createAppForArchive(file);
        });
    }
    uploadApplication(file, app) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.ecosystemService.uploadArchiveToApp(file, app);
        });
    }
}
AddWebApplicationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-web-application',
                template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'upload'"
    [successText]="successText"
    [createApplicationHandler]="createApplicationHandler"
    [uploadApplicationHandler]="uploadApplicationHandler"
    [canGoBack]="true"
  ></c8y-add-application>`
            },] }
];
AddWebApplicationComponent.ctorParameters = () => [
    { type: EcosystemService }
];

class ApplicationPropertiesFormComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.initForm();
            this.setForm(this.application);
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            name: [Validators.required, Validators.maxLength(120)],
            key: [Validators.required, Validators.maxLength(120)],
            contextPath: [Validators.required, Validators.maxLength(120)]
        });
    }
    setForm(applicationConfig) {
        this.formGroup.patchValue(Object.assign({}, applicationConfig));
    }
}
ApplicationPropertiesFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-application-properties-form',
                template: "<form\n  (ngSubmit)=\"(formGroup.valid)\"\n  [formGroup]=\"formGroup\"\n  class=\"c8y-wizard-form text-left\"\n  name=\"appDeployForm\"\n  novalidate\n>\n  <c8y-form-group>\n    <label for=\"name\" translate>Name</label>\n    <input\n      class=\"form-control\"\n      formControlName=\"name\"\n      name=\"name\"\n      placeholder=\"{{ 'e.g. My application' | translate }}\"\n      required\n      type=\"text\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"key\" translate>Application key</label>\n    <input\n      class=\"form-control\"\n      formControlName=\"key\"\n      name=\"key\"\n      placeholder=\"{{ 'e.g. my-application-key' | translate }}\"\n      required\n      type=\"text\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"contextPath\" translate>Path</label>\n    <div class=\"input-group\">\n      <span class=\"input-group-addon\">/apps/</span>\n      <input\n        class=\"form-control\"\n        formControlName=\"contextPath\"\n        name=\"contextPath\"\n        placeholder=\"{{ 'e.g. my-application' | translate }}\"\n        required\n        type=\"text\"\n      />\n    </div>\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group *ngIf=\"isPackage\">\n    <label for=\"version\" translate>Use package version</label>\n    <div class=\"input-group\">\n      <input\n        class=\"form-control\"\n        disabled\n        formControlName=\"version\"\n        name=\"version\"\n        placeholder=\"{{ 'e.g. \\{\\{ example \\}\\}' | translate:{ example: '1.0.0' } }}\"\n        type=\"text\"\n      />\n    </div>\n  </c8y-form-group>\n</form>\n"
            },] }
];
ApplicationPropertiesFormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
ApplicationPropertiesFormComponent.propDecorators = {
    application: [{ type: Input }],
    isPackage: [{ type: Input }]
};

class InstallFromPackageComponent {
    constructor(ecosystemService, applicationService, wizardComponent) {
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.wizardComponent = wizardComponent;
        this.deployedWithSuccess = false;
        this.isDeployed = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loadPackages();
        });
    }
    back() {
        this.wizardComponent.reset();
    }
    cancel() {
        this.wizardComponent.close();
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
            this.inProgress = true;
            const { data: clonedPkg } = yield this.applicationService.clone(this.selectedPackage);
            const config = this.ecosystemService.createConfig(clonedPkg, formGroupValue);
            try {
                const { data: updatedApp } = yield this.ecosystemService.updateApp(config, true);
                if (updatedApp) {
                    yield this.ecosystemService.updateAppManifest(updatedApp, this.selectedPackage);
                }
                this.deployedWithSuccess = true;
            }
            catch (error) {
                this.inProgress = false;
                yield this.applicationService.delete(clonedPkg.id);
            }
            this.markAsDeployed();
        });
    }
    selectPackage(selectedPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = yield this.ecosystemService.getWebApplications();
            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(selectedPackage, apps);
            this.selectedPackage = selectedPackage;
        });
    }
    /* The 'select package version' option will be added later when BE support for multiple app versions has been implemented. MTM-40278
    // onSelectedArchive(archive) {
    //   this.formGroup.controls['packageVersion'].setValue(archive.name);
    // } */
    markAsDeployed() {
        this.isDeployed = true;
        this.inProgress = false;
    }
    loadPackages() {
        return __awaiter(this, void 0, void 0, function* () {
            const applications = yield this.ecosystemService.getApplications();
            this.packages = applications.data.filter((app) => this.ecosystemService.isApplicationPackage(app));
        });
    }
}
InstallFromPackageComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-install-from-package',
                template: "<c8y-wizard-header>\n  <i [c8yIcon]=\"'big-parcel'\"></i>\n  <h4 translate>Install from package</h4>\n</c8y-wizard-header>\n<c8y-wizard-body>\n  <ng-container *ngIf=\"!selectedPackage\">\n    <div class=\"modal-inner-scroll\">\n      <p class=\"p-16 text-medium text-center separator-bottom sticky-top bg-white\">\n        {{ 'Select from available packages' | translate }}\n      </p>\n      <div *ngIf=\"!packages?.length\" class=\"c8y-empty-state text-center\">\n        <p class=\"text-center\">{{ 'No packages to display.' | translate }}</p>\n      </div>\n      <div *ngIf=\"packages?.length\" class=\"c8y-wizard-list-nav\" style=\"min-height: 257px\">\n        <button\n          class=\"list-group-item text-truncate\"\n          *ngFor=\"let package of packages\"\n          (click)=\"selectPackage(package)\"\n          title=\"{{ package.name }}\"\n          type=\"button\"\n        >\n          <i c8yIcon=\"big-parcel\" class=\"list-group-icon\"></i>\n          <span [innerText]=\"package.name\"></span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"!isDeployed && selectedPackage\">\n    <p class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white\">\n      {{ 'Provide application details' | translate }}\n    </p>\n    <div class=\"d-flex d-col a-i-center j-c-center\" style=\"min-height: 257px\">\n      <c8y-application-properties-form\n        *ngIf=\"!inProgress\"\n        [application]=\"newAppConfig\"\n        class=\"d-block fit-w\"\n      ></c8y-application-properties-form>\n      <c8y-progress-bar\n        [message]=\"'Installing\u2026' | translate\"\n        class=\"text-center d-block\"\n        *ngIf=\"inProgress\"\n      ></c8y-progress-bar>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDeployed\">\n    <div\n      *ngIf=\"deployedWithSuccess; else failedDeploy\"\n      class=\"d-flex a-i-center j-c-center\"\n      style=\"min-height: 257px\"\n    >\n      <c8y-operation-result\n        text=\"{{ 'Application created' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"success\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </div>\n    <ng-template #failedDeploy>\n      <div class=\"d-flex a-i-center j-c-center\" style=\"min-height: 257px\">\n        <c8y-operation-result\n          text=\"{{ 'Application creation failed' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n      </div>\n    </ng-template>\n  </ng-container>\n</c8y-wizard-body>\n\n<c8y-wizard-footer>\n  <button\n    *ngIf=\"!isDeployed\"\n    (click)=\"selectedPackage ? (selectedPackage = null) : back()\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    [disabled]=\"inProgress\"\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button\n    title=\"{{ isDeployed && deployedWithSuccess ? ('Close' | translate) : ('Cancel' | translate) }}\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"cancel()\"\n  >\n    {{ isDeployed && deployedWithSuccess ? ('Close' | translate) : ('Cancel' | translate) }}\n  </button>\n\n  <button\n    title=\"{{ 'Install' | translate }}\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    (click)=\"save()\"\n    [disabled]=\"inProgress\"\n    *ngIf=\"!isDeployed\"\n  >\n    {{ 'Install' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
            },] }
];
InstallFromPackageComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: ApplicationService },
    { type: WizardComponent }
];
InstallFromPackageComponent.propDecorators = {
    applicationPropertiesForm: [{ type: ViewChild, args: [ApplicationPropertiesFormComponent,] }]
};

class DuplicateApplicationListComponent {
    constructor(ecosystemService, wizardComponent) {
        this.ecosystemService = ecosystemService;
        this.wizardComponent = wizardComponent;
        this.onSelectedApp = new EventEmitter();
    }
    select(selectedApp) {
        this.onSelectedApp.emit(selectedApp);
        this.stepper.next();
    }
    cancel() {
        this.wizardComponent.close();
    }
    back() {
        this.wizardComponent.reset();
    }
}
DuplicateApplicationListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-duplicate-application-list',
                template: "<div class=\"c8y-wizard-list-nav\">\n  <button\n    (click)=\"select(app)\"\n    *ngFor=\"let app of existingApps\"\n    class=\"list-group-item text-truncate p-t-8 p-b-8\"\n    type=\"button\"\n  >\n    <c8y-app-icon\n      [app]=\"app\"\n      [contextPath]=\"app.contextPath\"\n      [name]=\"app.name\"\n      class=\"list-group-icon\"\n    ></c8y-app-icon>\n    <span [innerText]=\"app | humanizeAppName | async\" class=\"pointer\"></span>\n    <span [ngClass]=\"ecosystemService.getAppState(app).class\" class=\"label m-l-16\">{{\n      ecosystemService.getAppState(app).label | translate\n    }}</span>\n  </button>\n</div>\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\" translate>\n    Cancel\n  </button>\n</c8y-wizard-footer>\n"
            },] }
];
DuplicateApplicationListComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: WizardComponent }
];
DuplicateApplicationListComponent.propDecorators = {
    stepper: [{ type: Input }],
    existingApps: [{ type: Input }],
    onSelectedApp: [{ type: Output }]
};

class DuplicateApplicationPropertiesComponent {
    constructor(bsModalRef, ecosystemService, applicationService) {
        this.bsModalRef = bsModalRef;
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.duplicatedApp = new EventEmitter();
        this.inProgress = false;
    }
    ngOnInit() {
        this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.selectedApp.value, this.existingApps);
    }
    duplicateApp() {
        return __awaiter(this, void 0, void 0, function* () {
            const formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
            this.inProgress = true;
            const clonedApp = (yield this.applicationService.clone(this.selectedApp.value)).data;
            Object.assign(clonedApp, formGroupValue);
            delete clonedApp.type;
            yield this.updateApp(clonedApp);
            this.inProgress = false;
        });
    }
    cancel() {
        this.bsModalRef.hide();
    }
    back() {
        this.stepper.previous();
    }
    updateApp(clonedAppConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const app = (yield this.ecosystemService.updateApp(clonedAppConfig, true)).data;
                this.duplicatedApp.emit(app);
                this.stepper.next();
            }
            catch (err) {
                this.inProgress = false;
            }
        });
    }
}
DuplicateApplicationPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-duplicate-application-properties',
                template: "<p\n  class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white fit-w\"\n  *ngIf=\"!inProgress\"\n>\n  {{ 'Provide application details' | translate }}\n</p>\n<c8y-application-properties-form\n  *ngIf=\"!inProgress\"\n  [application]=\"newAppConfig\"\n  class=\"d-block fit-w\"\n></c8y-application-properties-form>\n<c8y-progress-bar\n  *ngIf=\"inProgress\"\n  [message]=\"'Duplicating\u2026' | translate\"\n  class=\"text-center d-block\"\n></c8y-progress-bar>\n\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Back' | translate }}\"\n  >\n    {{ 'Back' | translate }}\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    (click)=\"duplicateApp()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Duplicate' | translate }}\"\n  >\n    {{ 'Duplicate' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
            },] }
];
DuplicateApplicationPropertiesComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: EcosystemService },
    { type: ApplicationService }
];
DuplicateApplicationPropertiesComponent.propDecorators = {
    stepper: [{ type: Input }],
    existingApps: [{ type: Input }],
    selectedApp: [{ type: Input }],
    duplicatedApp: [{ type: Output }],
    applicationPropertiesForm: [{ type: ViewChild, args: [ApplicationPropertiesFormComponent,] }]
};

class DuplicateApplicationComponent {
    constructor(ecosystemService, applicationService, wizardComponent) {
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.wizardComponent = wizardComponent;
        this.selectedApp = new BehaviorSubject(null);
        this.existingApps = [];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.existingApps = yield this.ecosystemService.getWebApplications();
        });
    }
    onSelectedApp(app) {
        this.selectedApp.next(app);
    }
    getHref(app) {
        return this.applicationService.getHref(app);
    }
    done() {
        this.wizardComponent.close();
    }
}
DuplicateApplicationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-duplicate-application',
                template: "<c8y-wizard-header>\n  <h1 [c8yIcon]=\"'copy'\"></h1>\n  <h4 translate>Duplicate application</h4>\n</c8y-wizard-header>\n\n<c8y-wizard-body>\n  <c8y-stepper\n    [customClasses]=\"['hidden']\"\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    linear\n  >\n    <!-- 1st step -->\n    <cdk-step>\n      <p class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white\">\n        {{ 'Select application' | translate }}\n      </p>\n      <c8y-duplicate-application-list\n        (onSelectedApp)=\"onSelectedApp($event)\"\n        *ngIf=\"stepper.selectedIndex === 0\"\n        [existingApps]=\"existingApps\"\n        [stepper]=\"stepper\"\n        class=\"d-block\"\n        style=\"min-height: 257px\"\n      ></c8y-duplicate-application-list>\n    </cdk-step>\n    <!-- 2nd step -->\n    <cdk-step>\n      <c8y-duplicate-application-properties\n        class=\"d-flex d-col j-c-center a-i-center\"\n        style=\"min-height: 257px\"\n        (duplicatedApp)=\"duplicatedApp = $event\"\n        *ngIf=\"stepper.selectedIndex === 1\"\n        [existingApps]=\"existingApps\"\n        [selectedApp]=\"selectedApp\"\n        [stepper]=\"stepper\"\n      ></c8y-duplicate-application-properties>\n    </cdk-step>\n    <!-- Final step -->\n    <cdk-step>\n      <ng-container *ngIf=\"stepper.selectedIndex === 2\">\n        <div\n          *ngIf=\"duplicatedApp; else duplicateAppFailed\"\n          style=\"min-height: 257px\"\n          class=\"d-flex a-i-center j-c-center\"\n        >\n          <c8y-operation-result\n            text=\"{{ 'Application created' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n          ></c8y-operation-result>\n        </div>\n        <ng-template #duplicateAppFailed>\n          <div style=\"min-height: 257px\" class=\"d-flex a-i-center j-c-center\">\n            <c8y-operation-result\n              text=\"{{ 'Application creation failed' | translate }}\"\n              [size]=\"84\"\n              [vertical]=\"true\"\n              type=\"error\"\n            ></c8y-operation-result>\n          </div>\n        </ng-template>\n      </ng-container>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-wizard-body>\n\n<c8y-wizard-footer *ngIf=\"stepper.selectedIndex === 2\">\n  <button type=\"button\" (click)=\"done()\" class=\"btn btn-default\" title=\"{{ 'Done' | translate }}\">\n    {{ 'Done' | translate }}\n  </button>\n  <a\n    (click)=\"$event.stopPropagation()\"\n    [href]=\"getHref(duplicatedApp)\"\n    target=\"_blank\"\n    class=\"btn btn-primary\"\n    title=\"{{ 'Open' | translate }}\"\n  >\n    <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n    {{ 'Open' | translate }}\n  </a>\n</c8y-wizard-footer>\n"
            },] }
];
DuplicateApplicationComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: ApplicationService },
    { type: WizardComponent }
];
DuplicateApplicationComponent.propDecorators = {
    stepper: [{ type: ViewChild, args: [C8yStepper, { static: true },] }]
};

class AddExternalApplicationComponent {
    constructor(applicationService, formBuilder, alertService, wizardComponent) {
        this.applicationService = applicationService;
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.wizardComponent = wizardComponent;
    }
    ngOnInit() {
        this.initForm();
    }
    back() {
        this.wizardComponent.reset();
    }
    cancel() {
        this.wizardComponent.close();
    }
    done() {
        this.wizardComponent.close();
    }
    save(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const appToSave = {
                manifest: {},
                externalUrl: app.externalUrl,
                type: ApplicationType.EXTERNAL,
                name: app.name,
                key: app.key
            };
            try {
                this.createdApp = yield this.applicationService.create(appToSave);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            name: ['', [Validators.required, Validators.maxLength(120)]],
            key: ['', [Validators.required, Validators.maxLength(120)]],
            externalUrl: ['', Validators.required]
        });
    }
}
AddExternalApplicationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-external-application',
                template: "<form *ngIf=\"!createdApp; else appCreated\" [formGroup]=\"formGroup\" novalidate>\n  <c8y-wizard-header>\n    <h1 [c8yIcon]=\"'cloud-link'\"></h1>\n    <h4 translate>Add external application</h4>\n  </c8y-wizard-header>\n\n  <c8y-wizard-body>\n    <p class=\"p-16 text-medium text-center bg-white separator-bottom sticky-top\">\n      {{ 'Provide external application details' | translate }}\n    </p>\n    <div class=\"modal-body p-t-8\">\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'Name' | translate }}</label>\n        <input\n          class=\"form-control\"\n          formControlName=\"name\"\n          name=\"name\"\n          placeholder=\"{{ 'e.g. My application' | translate }}\"\n          required\n          type=\"text\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"formGroup?.controls?.name?.errors?.required && !formGroup.controls.name.pristine\"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.maxlength\" translate>\n            Maximum 120 characters allowed.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'Application key' | translate }}</label>\n        <input\n          class=\"form-control\"\n          formControlName=\"key\"\n          name=\"key\"\n          placeholder=\"{{ 'e.g. my-external-application-key' | translate }}\"\n          required\n          type=\"text\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"formGroup?.controls?.key?.errors?.required && !formGroup.controls.key.pristine\"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.maxlength\" translate>\n            Maximum 120 characters allowed.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'External URL' | translate }}</label>\n        <input\n          [pattern]=\"'^(?!javascript:).+'\"\n          class=\"form-control\"\n          formControlName=\"externalUrl\"\n          name=\"externalUrl\"\n          placeholder=\"{{ 'e.g.' | translate }} https://www.example.com\"\n          required\n          type=\"url\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"\n              formGroup?.controls?.externalUrl?.errors?.required &&\n              !formGroup.controls.externalUrl.pristine\n            \"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </c8y-wizard-body>\n\n  <c8y-wizard-footer>\n    <button\n      (click)=\"back()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Back' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Back\n    </button>\n    <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\" translate>\n      Cancel\n    </button>\n    <button\n      (click)=\"save(formGroup.value)\"\n      [disabled]=\"formGroup.invalid || formGroup.pristine\"\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Add application' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Add application' | translate }}\n    </button>\n  </c8y-wizard-footer>\n</form>\n<ng-template #appCreated>\n  <c8y-wizard-body>\n    <div class=\"d-flex d-col j-c-center a-i-center\" style=\"min-height: 324px\">\n      <c8y-operation-result\n        text=\"{{ 'Application created' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"success\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </div>\n  </c8y-wizard-body>\n  <c8y-wizard-footer>\n    <button (click)=\"done()\" class=\"btn btn-default\" title=\"{{ 'Done' | translate }}\" translate>\n      Done\n    </button>\n    <a\n      (click)=\"$event.stopPropagation()\"\n      [href]=\"formGroup.value.externalUrl\"\n      target=\"_blank\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Open' | translate }}\"\n    >\n      <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n      {{ 'Open' | translate }}\n    </a>\n  </c8y-wizard-footer>\n</ng-template>\n"
            },] }
];
AddExternalApplicationComponent.ctorParameters = () => [
    { type: ApplicationService },
    { type: FormBuilder },
    { type: AlertService },
    { type: WizardComponent }
];

class AddMicroserviceComponent {
    constructor(ecosystemService, modal, tenantService) {
        this.ecosystemService = ecosystemService;
        this.modal = modal;
        this.tenantService = tenantService;
        this.headerText = gettext('Add microservice');
        this.successText = gettext('Microservice created');
        this.createMicroserviceApplicationHandler = (f) => this.createMicroserviceApplication(f);
        this.uploadMicroserviceHandler = (f, app) => this.uploadMicroservice(f, app);
    }
    createMicroserviceApplication(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.isValidAppType(file, ApplicationType.MICROSERVICE);
            return this.ecosystemService.createAppForArchive(file);
        });
    }
    uploadMicroservice(file, microservice) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscribeToCurrentTenant = yield this.askIfActivationAfterUploadNeeded();
            yield this.ecosystemService.uploadArchiveToApp(file, microservice);
            yield this.subscribeMicroservice(microservice, subscribeToCurrentTenant);
        });
    }
    askIfActivationAfterUploadNeeded() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Subscribe to microservice'), gettext('You are about to subscribe to the microservice after upload. Do you want to subscribe to it?'), Status.INFO, { ok: gettext('Subscribe'), cancel: gettext("Don't subscribe") });
                return true;
            }
            catch (ex) {
                return false;
            }
        });
    }
    subscribeMicroservice(app, subscribeToCurrentTenant) {
        return __awaiter(this, void 0, void 0, function* () {
            const tenant = (yield this.tenantService.current()).data;
            const applications = tenant.applications.references;
            const isSubscribed = applications.some(({ application }) => application.id === app.id);
            if (!isSubscribed && subscribeToCurrentTenant) {
                try {
                    return yield this.tenantService.subscribeApplication(tenant, app);
                }
                catch (res) {
                    if (res.status === 409) {
                        throw Error(ERROR_TYPE.ALREADY_SUBSCRIBED);
                    }
                }
            }
            else if (isSubscribed && !subscribeToCurrentTenant) {
                return this.tenantService.unsubscribeApplication(tenant, app);
            }
        });
    }
}
AddMicroserviceComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-microservice',
                template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'microchip'"
    [successText]="successText"
    [createApplicationHandler]="createMicroserviceApplicationHandler"
    [uploadApplicationHandler]="uploadMicroserviceHandler"
  ></c8y-add-application>`
            },] }
];
AddMicroserviceComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: ModalService },
    { type: TenantService }
];

class ApplicationListComponent {
    constructor(ecosystemService, wizardService) {
        this.ecosystemService = ecosystemService;
        this.wizardService = wizardService;
        this.reloading = false;
        this.reload$ = new BehaviorSubject(null);
        this.apps$ = this.reload$.pipe(tap(() => (this.reloading = true)), switchMap(() => this.ecosystemService.getWebApplications()), tap(() => (this.reloading = false)), shareReplay());
    }
    ngOnInit() {
        this.loadApplications();
    }
    loadApplications() {
        this.reload$.next();
    }
    addApplication() {
        const wizardConfig = {
            headerText: 'Add Application',
            headerIcon: 'c8y-atom'
        };
        const initialState = {
            wizardConfig,
            id: 'uploadApplication'
        };
        const modalOptions = { initialState };
        const modalRef = this.wizardService.show(modalOptions);
        modalRef.content.onClose.subscribe(() => {
            this.loadApplications();
        });
    }
}
ApplicationListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-application-list',
                template: "<c8y-title>{{ 'All applications' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'All applications' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"addApplication()\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add application' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add application' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"loadApplications()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(apps$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(apps$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No applications to display.</h3>\n  <p translate>Add your first application by clicking below.</p>\n  <p>\n    <button\n      (click)=\"addApplication()\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add application' | translate }}\"\n    >\n      {{ 'Add application' | translate }}\n    </button>\n  </p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(apps$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Application' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let app of apps$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      (onAppDeleted)=\"loadApplications()\"\n      [app]=\"app\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
            },] }
];
ApplicationListComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: WizardService }
];

class InstallPluginComponent {
    constructor(bsModalRef, modal) {
        this.bsModalRef = bsModalRef;
        this.modal = modal;
        this.filterTerm$ = new BehaviorSubject('');
        this.filteredPlugins$ = new BehaviorSubject([]);
        this.selectedPlugins = [];
        this.result = new Promise((resolve, reject) => {
            this._install = resolve;
            this._cancel = reject;
        });
    }
    ngOnInit() {
        this.filteredPlugins$ = combineLatest(this.plugins$, this.filterTerm$).pipe(map(([plugins, filterTerm]) => filterTerm.trim().length === 0
            ? plugins
            : plugins.filter((plugin) => this.filterContainString(plugin.name, filterTerm))));
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
    install() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.modal.confirm(gettext('Install plugins'), gettext('The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?'), Status.INFO, { ok: gettext('Continue') });
            this._install(this.selectedPlugins);
            this.bsModalRef.hide();
        });
    }
    filterContainString(name, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    }
}
InstallPluginComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-install-plugin',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'plugin'\"></i>\n    <h4 translate>Available plugins</h4>\n  </div>\n  <div class=\"p-t-8 p-16 text-center separator-bottom\">\n    <p class=\"text-medium m-b-8\" translate>Select the compatible plugins to install</p>\n    <c8y-filter (onSearch)=\"this.filterTerm$.next($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body p-t-0 p-b-0\">\n      <c8y-plugin-list\n        (selectedItems)=\"selectedPlugins = $event\"\n        [emptyListText]=\"'No plugins available' | translate\"\n        [plugins$]=\"filteredPlugins$\"\n        [selectable]=\"true\"\n        class=\"m-t-16\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Cancel\n    </button>\n    <button\n      (click)=\"install()\"\n      [disabled]=\"selectedPlugins.length === 0\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Install' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Install' | translate }} ({{ selectedPlugins.length }})\n    </button>\n  </div>\n</div>\n"
            },] }
];
InstallPluginComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ModalService }
];
InstallPluginComponent.propDecorators = {
    plugins$: [{ type: Input }]
};

class ApplicationPluginsComponent {
    constructor(activatedRoute, ecosystemService, bsModalService, modal, translateService, pluginsService, alertService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.modal = modal;
        this.translateService = translateService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.exportedPlugins$ = new BehaviorSubject([]);
        this.remotePlugins$ = new BehaviorSubject({});
        this.allAvailablePlugins$ = new BehaviorSubject([]);
        this.installedPlugins$ = combineLatest([
            this.remotePlugins$.pipe(map((remotes) => this.getRemotePluginsList(remotes))),
            this.allAvailablePlugins$
        ]).pipe(map(([remotePlugins, allPlugins]) => allPlugins.filter((p) => remotePlugins.includes(p.id))), shareReplay(1));
        this.pluginsToDelete = [];
        this.archives = [];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.activatedRoute.snapshot.parent.data.contextData;
            this.app = yield this.ecosystemService.getApplication(id);
            this.archives = yield this.ecosystemService.listArchives(this.app.id);
            this.archives.sort((a, b) => {
                return new Date(b.created) - new Date(a.created);
            });
            const manifest = this.app.manifest;
            if (manifest) {
                const exports = manifest.exports || [];
                this.exportedPlugins$.next(this.extendPluginList(exports, this.app.contextPath));
                const remotes = manifest.remotes || {};
                this.remotePlugins$.next(remotes);
            }
            this.allAvailablePlugins$.next(yield this.getAllPlugins());
        });
    }
    installPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                plugins$: combineLatest([
                    this.allAvailablePlugins$,
                    this.installedPlugins$.pipe(map((plugins) => plugins.map((p) => p.id))),
                    this.exportedPlugins$.pipe(map((plugins) => plugins.map((p) => p.id)))
                ]).pipe(map(([allPlugins, installedPlugins, exportedPluginNames]) => {
                    const plugins = [];
                    allPlugins
                        .filter((p) => !exportedPluginNames.includes(p.id))
                        .forEach((p) => plugins.push(Object.assign(Object.assign({}, p), { installed: !!installedPlugins.includes(p.id) })));
                    return plugins;
                }), shareReplay(1))
            };
            try {
                const pluginsToAdd = (yield this.bsModalService.show(InstallPluginComponent, {
                    class: 'modal-md',
                    initialState,
                    ignoreBackdropClick: true
                }).content.result);
                const currentRemotes = Object.assign({}, this.remotePlugins$.value);
                pluginsToAdd.forEach((pluginId) => {
                    const { contextPath, name } = this.parsePluginId(pluginId);
                    (currentRemotes[contextPath] = currentRemotes[contextPath] || []).push(name);
                });
                if (this.archives.length === 6) {
                    yield this.ecosystemService.removeOldestArchive(this.app, this.archives);
                }
                this.updateApplicationRemotes(currentRemotes);
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    removePlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const humanizedAppName = yield this.ecosystemService.getHumanizedAppName(this.app);
            try {
                yield this.modal.confirm(gettext('Remove plugins'), this.translateService.instant(gettext(`You are about to remove plugins from application "{{ humanizedAppName }}". The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?`), { humanizedAppName }), Status.DANGER, {
                    ok: gettext('Remove'),
                    cancel: gettext('Cancel')
                });
                const remotes = Object.assign({}, this.remotePlugins$.value);
                this.pluginsToDelete.forEach((pluginId) => {
                    const { contextPath, name } = this.parsePluginId(pluginId);
                    remotes[contextPath] = remotes[contextPath].filter((p) => p !== name);
                });
                this.updateApplicationRemotes(remotes);
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    getAllPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const plugins = [];
            const packages = yield this.ecosystemService.getPackageApplications();
            const apps = [...packages, this.app];
            apps.forEach((app) => {
                const exports = (app.manifest && app.manifest.exports) || [];
                plugins.push(...this.extendPluginList(exports, app.contextPath));
            });
            return plugins;
        });
    }
    updateApplicationRemotes(remotes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            try {
                yield this.pluginsService.updateRemotesInCumulocityJson(this.app, remotes);
                this.remotePlugins$.next(remotes);
            }
            catch (ex) {
                this.alertService.danger(ex);
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    getRemotePluginsList(remotes) {
        const importContextPaths = Object.keys(remotes);
        const plugins = [];
        importContextPaths.forEach((contextPath) => {
            const moduleNames = remotes[contextPath];
            plugins.push(...moduleNames.map((module) => this.createPluginId(contextPath, module)));
        });
        return plugins;
    }
    extendPluginList(plugins, contextPath) {
        const extendedPlugins = [];
        plugins.map((p) => {
            extendedPlugins.push(Object.assign(Object.assign({}, p), { id: this.createPluginId(contextPath, p.name, p.module), contextPath }));
        });
        return extendedPlugins;
    }
    createPluginId(contextPath, pluginName, pluginModuleName) {
        return `${contextPath}/${pluginModuleName || pluginName}`;
    }
    parsePluginId(id) {
        const [contextPath, name] = id.split('/');
        return { contextPath, name };
    }
}
ApplicationPluginsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-app-plugins',
                template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'All applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll bg-gray-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\" translate>Included plugins</h4>\n    </div>\n    <div class=\"card-block large-padding\">\n      <p class=\"d-flex a-i-start p-b-16\">\n        <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n        <span translate>\n          Plugins included with the application. These plugins are required for running the\n          application and cannot be removed.\n        </span>\n      </p>\n      <c8y-plugin-list\n        [emptyListText]=\"'This application doesn\\'t contain plugins.' | translate\"\n        [plugins$]=\"exportedPlugins$\"\n        class=\"separator-top d-block\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"content-fullpage d-flex d-col\">\n    <div class=\"card-header large-padding separator\">\n      <h4 class=\"card-title\" translate>Installed plugins</h4>\n    </div>\n    <div class=\"inner-scroll flex-grow\">\n      <div class=\"card-block large-padding\">\n        <p class=\"d-flex a-i-start p-b-16\">\n          <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n          <span translate>\n            Plugins currently installed for this application. Upgrading the application won't change\n            any of these plugins.\n          </span>\n        </p>\n        <c8y-plugin-list\n          (selectedItems)=\"pluginsToDelete = $event\"\n          [emptyListText]=\"'No plugins installed' | translate\"\n          [plugins$]=\"installedPlugins$\"\n          [selectable]=\"true\"\n          class=\"separator-top d-block\"\n        ></c8y-plugin-list>\n      </div>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <button\n        (click)=\"removePlugins()\"\n        [disabled]=\"pluginsToDelete.length === 0 || isLoading\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Remove plugins' | translate }}\"\n        translate\n      >\n        Remove plugins\n      </button>\n      <button\n        (click)=\"installPlugins()\"\n        [ngClass]=\"{ 'btn-pending': isLoading }\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Install plugins' | translate }}\"\n        translate\n      >\n        Install plugins\n      </button>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ApplicationPluginsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: EcosystemService },
    { type: BsModalService },
    { type: ModalService },
    { type: TranslateService },
    { type: PluginsService },
    { type: AlertService }
];

class ApplicationPluginsGuard {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
    }
    canActivate(route) {
        const app = route.data.contextData || route.parent.data.contextData;
        if (!app) {
            return false;
        }
        return (app.type === ApplicationType.HOSTED &&
            this.ecosystemService.isOwner(app) &&
            !this.ecosystemService.isPackage(app));
    }
}
ApplicationPluginsGuard.decorators = [
    { type: Injectable }
];
ApplicationPluginsGuard.ctorParameters = () => [
    { type: EcosystemService }
];

class PluginListItemComponent {
    constructor() {
        this.isItemSelected = new EventEmitter();
    }
    onChange(event) {
        this.isItemSelected.next(event);
    }
}
PluginListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-plugin-list-item',
                template: "<c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n  <c8y-li-checkbox\n    (change)=\"onChange($event.target.checked)\"\n    *ngIf=\"selectable\"\n    [disabled]=\"plugin.installed\"\n    class=\"p-r-0 p-l-0\"\n  ></c8y-li-checkbox>\n  <c8y-li-icon>\n    <i class=\"c8y-plugin-icon\">\n      <span>{{ plugin.name?.substr(0, 2) }}</span>\n    </i>\n  </c8y-li-icon>\n  <c8y-li-body class=\"d-flex\">\n    <div class=\"p-r-8\">\n      <p>\n        <span class=\"text-medium\">{{ plugin.name }}</span>\n        <em class=\"text-muted small m-l-8\">{{ plugin.version }}</em>\n        <span *ngIf=\"plugin.installed\">\n          <i [c8yIcon]=\"'check-circle'\" class=\"text-success\"></i>\n          <em class=\"text-muted small\" translate>Installed</em>\n        </span>\n      </p>\n      <p class=\"small l-h-tight\">{{ plugin.description }}</p>\n    </div>\n    <span *ngIf=\"selectable\" class=\"label label-info m-l-auto a-s-start\">{{\n      plugin.contextPath\n    }}</span>\n  </c8y-li-body>\n</c8y-li>\n"
            },] }
];
PluginListItemComponent.propDecorators = {
    plugin: [{ type: Input }],
    selectable: [{ type: Input }],
    isItemSelected: [{ type: Output }]
};

class PluginListComponent {
    constructor() {
        this.emptyListText = '';
        this.selectedItems = new EventEmitter();
        this.selectedPlugins = {};
    }
    updateSelectedItems(value, name) {
        this.selectedPlugins[name] = value;
        this.selectedItems.emit(Object.keys(this.selectedPlugins).filter((k) => this.selectedPlugins[k]));
    }
}
PluginListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-plugin-list',
                template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-plugin-list-item\n        (isItemSelected)=\"updateSelectedItems($event, plugin.id)\"\n        [plugin]=\"plugin\"\n        [selectable]=\"selectable\"\n      ></c8y-plugin-list-item>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n"
            },] }
];
PluginListComponent.propDecorators = {
    plugins$: [{ type: Input }],
    emptyListText: [{ type: Input }],
    selectable: [{ type: Input }],
    selectedItems: [{ type: Output }]
};

class ActivityLogComponent {
    constructor(ecosystemService, alertService) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.archives = [];
        this.canReactivate = false;
    }
    get uploadProgress() {
        return this.ecosystemService.progress;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.canReactivate = this.showReactivate();
            this.refresh();
        });
    }
    isActive(archive) {
        return this.application.activeVersionId === archive.id;
    }
    toActivate(archive) {
        return this.toActivateVersionId === archive.id;
    }
    checkIfLast(archive) {
        return archive.id === this.last.id;
    }
    showReactivate() {
        return this.ecosystemService.isApplication(this.application);
    }
    setActive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = archive.id || archive;
            this.toActivateVersionId = id;
            this.isLoading = true;
            try {
                this.application = (yield this.ecosystemService.setAppActiveVersion(this.application, id)).data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            this.isLoading = false;
            this.refresh();
        });
    }
    deleteArchive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.deleteArchive(archive, this.application);
            this.refresh();
        });
    }
    downloadArchive(archive) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.downloadArchive(this.application, archive);
        });
    }
    reactivateArchive() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.reactivateArchive(this.application);
        });
    }
    onRefresh() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.refresh();
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.archives = yield this.ecosystemService.listArchives(this.application.id);
            this.archives.sort((a, b) => {
                return new Date(b.created) - new Date(a.created);
            });
            this.last = this.archives[this.archives.length - 1];
            this.isLoading = false;
        });
    }
}
ActivityLogComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-activity-log',
                template: "<div class=\"inner-scroll bg-gray-white flex-grow\">\n  <div class=\"card-block overflow-visible\">\n    <c8y-list-group>\n      <c8y-li-timeline *ngFor=\"let archive of archives\" [ngClass]=\"{ active: isActive(archive) }\">\n        {{ archive.created | date: 'd MMM YYYY' }}\n        {{ archive.created | date: 'shortTime' }}\n        <c8y-li>\n          <c8y-li-icon\n            [icon]=\"checkIfLast(archive) ? 'flag-checkered' : 'file-zip-o'\"\n          ></c8y-li-icon>\n          <c8y-li-body>\n            <div class=\"d-flex a-i-start\">\n              <div style=\"min-width: 0; flex: 1\">\n                <span class=\"text-truncate-wrap\" title=\" {{ archive.description || archive.name }}\">\n                  {{ archive.description || archive.name }}\n                </span>\n                <small *ngIf=\"archive.description\" class=\"text-muted\">{{\n                  archive.description\n                }}</small>\n              </div>\n              <i\n                *ngIf=\"isLoading && toActivate(archive)\"\n                [c8yIcon]=\"'circle-o-notch'\"\n                class=\"icon-spin\"\n                title=\"{{ 'Activating' | translate }}\"\n              ></i>\n\n              <span *ngIf=\"isActive(archive)\" class=\"label label-primary m-l-auto m-t-4\">{{\n                'Active' | translate\n              }}</span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-action\n            (click)=\"setActive(archive)\"\n            *ngIf=\"!isLoading && !isActive(archive)\"\n            icon=\"check-square-o\"\n          >\n            {{ 'Set as active`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action (click)=\"downloadArchive(archive)\" icon=\"download\">\n            {{ 'Download`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"deleteArchive(archive)\"\n            *ngIf=\"archives.length > 1 && !checkIfLast(archive) && !isActive(archive)\"\n            icon=\"trash\"\n          >\n            {{ 'Delete`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"reactivateArchive()\"\n            *ngIf=\"canReactivate && isActive(archive)\"\n            icon=\"undo\"\n          >\n            {{ 'Reactivate archive' | translate }}\n          </c8y-li-action>\n        </c8y-li>\n      </c8y-li-timeline>\n    </c8y-list-group>\n  </div>\n</div>\n<div class=\"card-footer\">\n  <c8y-form-group *ngIf=\"!isLoading\" class=\"m-auto\">\n    <c8y-upload-archive [(application)]=\"application\" (refresh)=\"onRefresh()\"></c8y-upload-archive>\n  </c8y-form-group>\n</div>\n"
            },] }
];
ActivityLogComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService }
];
ActivityLogComponent.propDecorators = {
    application: [{ type: Input }]
};

const MICROSERVICES_BASE_PATH = '/microservices';
const APPLICATIONS_BASE_PATH = '/ecosystem';
class ApplicationPropertiesComponent {
    constructor(activatedRoute, ecosystemService, router, formBuilder, applicationService, alertService, inventoryService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.router = router;
        this.formBuilder = formBuilder;
        this.applicationService = applicationService;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.singleTenant = false;
        this.subscription = false;
        this.iconMap = {
            HOSTED: 'cloud',
            EXTERNAL: 'external-link-square',
            MICROSERVICE: 'microchip'
        };
        this.isLoading = true;
        this.packageProperties = [...packageProperties];
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
            this.isUnpacked = this.ecosystemService.isUnpacked(this.application);
            this.isPackage = this.ecosystemService.isPackage(this.application);
            this.isFeature = this.ecosystemService.isFeature(this.application);
            this.isExternal = this.ecosystemService.isExternal(this.application);
            this.isMicroservice = this.ecosystemService.isMicroservice(this.application);
            this.appState = this.ecosystemService.getAppState(this.application);
            if (this.isUnpacked) {
                yield this.resolveSourcePackage();
            }
            this.setBreadcrumbConifg();
            if (this.isCustomMicroservice) {
                this.loadBinaryMo();
            }
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.initForm();
            yield this.loadApplication();
            this.isLoading = false;
        });
    }
    onApplication(app) {
        if (app.manifest) {
            this.singleTenant = app.manifest.isolation === Isolation.PER_TENANT;
            this.subscription = app.manifest.billingMode === BillingMode.SUBSCRIPTION;
        }
    }
    cancel() {
        if (this.application.type === ApplicationType.MICROSERVICE) {
            this.router.navigateByUrl(MICROSERVICES_BASE_PATH);
        }
        else {
            this.router.navigateByUrl(APPLICATIONS_BASE_PATH);
        }
    }
    openApp(app) {
        window.open(this.applicationService.getHref(app));
    }
    getPackage(entityOrId) {
        return this.applicationService.detail(entityOrId);
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ecosystemService.deleteApp(this.application);
                if (this.application.type === ApplicationType.MICROSERVICE) {
                    this.router.navigateByUrl(MICROSERVICES_BASE_PATH);
                }
                else {
                    this.router.navigateByUrl(APPLICATIONS_BASE_PATH);
                }
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.subscribeApp(this.application);
            this.loadApplication();
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.unsubscribeApp(this.application);
            this.loadApplication();
        });
    }
    loadApplication() {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.activatedRoute.snapshot.parent.data.contextData;
            this.application = yield this.ecosystemService.getApplication(id);
            if (this.application.type === ApplicationType.MICROSERVICE) {
                this.formGroup.get('name').disable();
            }
            this.formGroup.patchValue(Object.assign({}, this.application));
            this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.application);
            this.disableOpenInBrowser =
                this.canOpenInBrowser &&
                    (yield this.ecosystemService.isOverwrittenByCustomApp(this.application));
            this.canDelete = this.ecosystemService.canDeleteApp(this.application);
            this.isOwner = this.ecosystemService.isOwner(this.application);
            this.isActivityLogSupported = this.isActivityLogSupportedByApp(this.application);
            this.isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
            this.isSubscribed = yield this.ecosystemService.checkIfSubscribed(this.application);
            this.onApplication(this.application);
        });
    }
    save(app) {
        return __awaiter(this, void 0, void 0, function* () {
            app.id = this.application.id;
            try {
                yield this.ecosystemService.updateApp(app);
                this.alertService.success(gettext('Application saved.'));
                this.formGroup.reset();
                this.loadApplication();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    onNewArchive() {
        this.loadBinaryMo();
    }
    resolveSourcePackage() {
        return __awaiter(this, void 0, void 0, function* () {
            this.package = (yield this.getPackage(this.application.manifest.source)).data;
            if (this.package) {
                this.packageProperties.push({
                    label: gettext('Source package'),
                    value: this.package.name,
                    type: 'link',
                    action: () => this.router.navigateByUrl(ViewContext.Application.replace(':id', this.package.id.toString()))
                });
            }
        });
    }
    initForm() {
        this.formGroup = this.formBuilder.group({
            id: [{ value: '' }],
            name: [Validators.required, Validators.maxLength(120)],
            key: [Validators.required, Validators.maxLength(120)],
            contextPath: [Validators.required, Validators.maxLength(120)],
            description: ['', Validators.maxLength(200)],
            resourcesUrl: [Validators.required],
            username: [Validators.required],
            password: [Validators.required],
            externalUrl: [Validators.required]
        });
    }
    isActivityLogSupportedByApp(app) {
        return (this.ecosystemService.isOwner(app) &&
            app.type !== ApplicationType.MICROSERVICE &&
            app.type !== ApplicationType.EXTERNAL);
    }
    setBreadcrumbConifg() {
        this.breadcrumbConfig = {
            icon: this.isMicroservice ? 'microchip' : this.isFeature ? 'tab' : 'c8y-modules',
            label: this.isMicroservice
                ? gettext('Microservices')
                : this.isFeature
                    ? gettext('Features')
                    : gettext('All applications'),
            path: this.isMicroservice
                ? 'microservices'
                : this.isFeature
                    ? 'ecosystem/features'
                    : 'ecosystem/applications'
        };
    }
    loadBinaryMo() {
        return __awaiter(this, void 0, void 0, function* () {
            this.binaryMo = (yield this.inventoryService.detail(this.application.activeVersionId)).data;
        });
    }
}
ApplicationPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-application-properties',
                template: "<c8y-title>{{ application | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb *ngIf=\"!isMicroservice\">\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumbConfig?.icon\"\n    [label]=\"breadcrumbConfig?.label\"\n    [path]=\"breadcrumbConfig?.path\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Properties' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-breadcrumb *ngIf=\"isMicroservice\">\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumbConfig?.icon\"\n    [label]=\"breadcrumbConfig?.label\"\n    [path]=\"breadcrumbConfig?.path\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Properties' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"row\">\n  <div [ngClass]=\"{ 'col-md-8': !isActivityLogSupported, 'col-md-12': isActivityLogSupported }\">\n    <div\n      *ngIf=\"application\"\n      [ngClass]=\"{ 'd-grid grid__col--7-5--md': isActivityLogSupported }\"\n      class=\"card content-fullpage\"\n    >\n      <form\n        (ngSubmit)=\"formGroup.valid && save(formGroup.value)\"\n        [formGroup]=\"formGroup\"\n        class=\"d-flex d-col content-fullpage\"\n        novalidate\n      >\n        <div *ngIf=\"!isLoading\" class=\"d-contents\">\n          <div class=\"card-block separator-bottom large-padding flex-no-shrink\">\n            <div class=\"d-flex-md a-i-start text-center text-left-md\">\n              <c8y-app-icon\n                *ngIf=\"!isPackage && !isFeature && !isMicroservice && !isExternal\"\n                [app]=\"application\"\n                [contextPath]=\"application.contextPath\"\n                [name]=\"application.name\"\n                class=\"icon-48\"\n              ></c8y-app-icon>\n              <i *ngIf=\"isPackage\" c8yIcon=\"big-parcel\" class=\"icon-48\"></i>\n              <i *ngIf=\"isFeature\" c8yIcon=\"tab\" class=\"icon-48\"></i>\n              <i *ngIf=\"isMicroservice\" c8yIcon=\"microchip\" class=\"icon-48\"></i>\n              <i *ngIf=\"isExternal\" c8yIcon=\"globe1\" class=\"icon-48\"></i>\n\n              <div class=\"p-t-md-16 p-l-md-16 p-r-md-32 flex-grow\">\n                <h4 class=\"text-medium m-b-8\">{{ application | humanizeAppName | async }}</h4>\n                <p *ngIf=\"!isOwner\">\n                  <em class=\"text-muted\">\n                    {{ application.description || ('No description available.' | translate) }}\n                  </em>\n                </p>\n                <div *ngIf=\"isOwner\" class=\"form-group m-b-0\">\n                  <label\n                    [ngClass]=\"{ updated: formGroup?.controls?.description?.dirty }\"\n                    class=\"editable\"\n                  >\n                    <textarea\n                      c8y-textarea-autoresize\n                      class=\"form-control no-resize\"\n                      formControlName=\"description\"\n                      name=\"description\"\n                      placeholder=\"{{ 'No description available.' | translate }}\"\n                    ></textarea>\n                  </label>\n                </div>\n              </div>\n              <div class=\"text-right-md m-t-4\">\n                <span [ngClass]=\"appState?.class\" class=\"label\">{{\n                  appState?.label | translate\n                }}</span>\n                <div\n                  *ngIf=\"application.manifest?.version && (isPackage || isMicroservice)\"\n                  class=\"fit-w m-t-2\"\n                >\n                  <label class=\"text-label-small\" translate>Version:</label>\n                  <small class=\"p-l-4 text-bold\">{{ application.manifest?.version }}</small>\n                </div>\n                <div *ngIf=\"binaryMo?.creationTime\" class=\"fit-w m-t-2\">\n                  <label class=\"text-label-small\" translate>Creation time:</label>\n                  <small class=\"p-l-4 text-bold\">{{ binaryMo?.creationTime | c8yDate }}</small>\n                </div>\n                <div class=\"m-t-8\">\n                  <button\n                    (click)=\"openApp(application); $event.stopPropagation()\"\n                    [disabled]=\"disableOpenInBrowser\"\n                    *ngIf=\"canOpenInBrowser\"\n                    class=\"btn btn-default btn-xs\"\n                    title=\"{{ 'Open' | translate }}\"\n                  >\n                    <i [c8yIcon]=\"'external-link'\"></i>\n                    {{ 'Open' | translate }}\n                  </button>\n                  <div *ngIf=\"canOpenInBrowser && disableOpenInBrowser\">\n                    <small class=\"text-muted\" translate\n                      >The application is overwritten by a custom application sharing the same\n                      path</small\n                    >\n                  </div>\n                  <span *ngIf=\"isCustomMicroservice\">\n                    <button\n                      (click)=\"subscribe()\"\n                      *ngIf=\"!isSubscribed\"\n                      class=\"btn btn-default btn-xs\"\n                      title=\"{{ 'Subscribe' | translate }}\"\n                    >\n                      <i [c8yIcon]=\"'check-circle-o'\"></i>\n                      {{ 'Subscribe' | translate }}\n                    </button>\n                    <button\n                      (click)=\"unsubscribe()\"\n                      *ngIf=\"isSubscribed\"\n                      class=\"btn btn-default btn-xs\"\n                      title=\"{{ 'Unsubscribe' | translate }}\"\n                    >\n                      <i [c8yIcon]=\"'minus-circle'\"></i>\n                      {{ 'Unsubscribe' | translate }}\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"inner-scroll bg-white flex-grow\">\n            <div class=\"card-block large-padding\">\n              <div *ngIf=\"isPackage\" class=\"row p-16\">\n                <c8y-properties-list\n                  [data]=\"application.manifest\"\n                  [properties]=\"packageProperties\"\n                  [title]=\"'Package details' | translate\"\n                  icon=\"info\"\n                ></c8y-properties-list>\n              </div>\n              <div *ngIf=\"package\" class=\"row p-16\">\n                <c8y-properties-list\n                  [data]=\"package.manifest\"\n                  [properties]=\"packageProperties\"\n                  [title]=\"'Source package information' | translate\"\n                  icon=\"info\"\n                ></c8y-properties-list>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-sm-5\">\n                  <c8y-form-group>\n                    <label>ID</label>\n                    <input\n                      [readonly]=\"true\"\n                      autocomplete=\"off\"\n                      class=\"form-control\"\n                      formControlName=\"id\"\n                      name=\"id\"\n                      type=\"text\"\n                    />\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-7\">\n                  <c8y-form-group>\n                    <label>{{ 'Name' | translate }}</label>\n                    <input\n                      [readonly]=\"!isOwner\"\n                      class=\"form-control\"\n                      formControlName=\"name\"\n                      name=\"name\"\n                      placeholder=\"{{ 'e.g. My application' | translate }}\"\n                      required\n                      type=\"text\"\n                    />\n                    <c8y-messages>\n                      <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.required\" translate>\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-sm-5\">\n                  <c8y-form-group>\n                    <label>{{ 'Application key' | translate }}</label>\n                    <input\n                      [readonly]=\"application.id || !isOwner\"\n                      class=\"form-control\"\n                      name=\"key\"\n                      formControlName=\"key\"\n                      placeholder=\"{{ 'e.g. my-application-key' | translate }}\"\n                      required\n                      type=\"text\"\n                    />\n                    <c8y-messages>\n                      <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.required\" translate>\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-7\">\n                  <c8y-form-group>\n                    <label>{{ 'Type' | translate }}</label>\n                    <div>\n                      <div *ngIf=\"application.id\">\n                        <p class=\"form-control-static\">\n                          <i [c8yIcon]=\"iconMap[application.type]\"></i>\n                          <span>\n                            {{ application.type | translate }}\n                          </span>\n                        </p>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div [ngSwitch]=\"application.type\">\n                <div *ngSwitchCase=\"'HOSTED'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\">/apps/</span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                        formControlName=\"contextPath\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n\n                <div *ngSwitchCase=\"'MICROSERVICE'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\">/service/</span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-microservice`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                        formControlName=\"contextPath\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                  <div class=\"row\">\n                    <div *ngIf=\"application.manifest.version\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Version' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        {{ application.manifest.version }}\n                      </p>\n                    </div>\n                    <div *ngIf=\"application.manifest.isolation\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Isolation' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        <span *ngIf=\"singleTenant\">\n                          <i [c8yIcon]=\"'c8y-enterprise'\" class=\"c8y-icon-duocolor h4\"></i>\n                          {{ 'Single tenant' | translate }}\n                        </span>\n                        <span *ngIf=\"!singleTenant\">\n                          <i [c8yIcon]=\"'c8y-sub-tenants'\" class=\"c8y-icon-duocolor h4\"></i>\n                          {{ 'Multi tenant' | translate }}\n                        </span>\n                      </p>\n                    </div>\n                    <div *ngIf=\"application.manifest.isolation\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Billing mode' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        <span\n                          *ngIf=\"subscription\"\n                          [tooltip]=\"'Resources usage assigned to: Owner' | translate\"\n                        >\n                          {{ 'Subscription' | translate }}\n                        </span>\n                        <span\n                          *ngIf=\"!subscription && singleTenant\"\n                          [tooltip]=\"'Resources usage assigned to: Subscriber | translate'\"\n                        >\n                          {{ 'Resources' | translate }}\n                        </span>\n                        <span\n                          *ngIf=\"!subscription && !singleTenant\"\n                          [tooltip]=\"'Resources usage assigned to: Owner' | translate\"\n                        >\n                          {{ 'Resources' | translate }}\n                        </span>\n                      </p>\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"application.manifest.provider\" class=\"legend form-block m-t-40\">\n                    {{ 'Provider' | translate }}\n                  </div>\n                  <div class=\"list-inline\" *ngIf=\"application.manifest.provider\">\n                    <div *ngIf=\"application.manifest.provider.name\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Name' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.name }}\n                        </p>\n                      </div>\n                    </div>\n                    <div *ngIf=\"application.manifest.provider.domain\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Domain' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.domain }}\n                        </p>\n                      </div>\n                    </div>\n                    <div *ngIf=\"application.manifest.provider.support\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Support' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.support }}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div *ngSwitchCase=\"'REPOSITORY'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\"> /apps/ </span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        formControlName=\"contextPath\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n\n                  <c8y-form-group>\n                    <label>{{ 'Server URL' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      name=\"resourcesUrl\"\n                      formControlName=\"resourcesUrl\"\n                      placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                      required\n                      type=\"url\"\n                    />\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.resourcesUrl?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n\n                  <div class=\"form-group\">\n                    <label> {{ 'Username' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      formControlName=\"username\"\n                      name=\"username\"\n                      type=\"text\"\n                    />\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label>{{ 'Password' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      formControlName=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                    />\n                  </div>\n                </div>\n\n                <div *ngSwitchCase=\"'EXTERNAL'\">\n                  <c8y-form-group>\n                    <label>{{ 'External URL' | translate }}</label>\n                    <input\n                      [pattern]=\"'^(?!javascript:).+'\"\n                      [readOnly]=\"!isOwner\"\n                      class=\"form-control\"\n                      formControlName=\"externalUrl\"\n                      name=\"externalUrl\"\n                      placeholder=\"{{ 'e.g.' | translate }} http://www.example.com/\"\n                      required\n                      type=\"url\"\n                    />\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.externalUrl?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.externalUrl?.errors?.pattern\"\n                        translate\n                      >\n                        Valid URL required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ng-container *ngIf=\"isCustomMicroservice\">\n            <div *ngIf=\"!isLoading\" class=\"d-contents\">\n              <c8y-upload-archive\n                [(application)]=\"application\"\n                (refresh)=\"onNewArchive()\"\n              ></c8y-upload-archive>\n            </div>\n          </ng-container>\n          <div *ngIf=\"application && !!isOwner\" class=\"card-footer separator\">\n            <button\n              (click)=\"cancel()\"\n              class=\"btn btn-default\"\n              title=\"{{ 'Cancel' | translate }}\"\n              type=\"button\"\n            >\n              {{ 'Cancel' | translate }}\n            </button>\n            <button\n              (click)=\"delete()\"\n              *ngIf=\"canDelete\"\n              class=\"btn btn-danger\"\n              title=\"{{ 'Delete' | translate }}\"\n              type=\"button\"\n            >\n              {{ 'Delete' | translate }}\n            </button>\n            <button\n              [disabled]=\"!application.type || formGroup.invalid || formGroup.pristine\"\n              class=\"btn btn-primary btn-form\"\n              title=\"{{ 'Save' | translate }}\"\n              type=\"submit\"\n            >\n              {{ 'Save' | translate }}\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div *ngIf=\"isActivityLogSupported\" class=\"content-fullpage d-flex d-col bg-gray-white\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\" translate>Activity log</h4>\n          <div class=\"m-l-auto\">\n            <button\n              (click)=\"load()\"\n              class=\"btn btn-link\"\n              title=\"{{ 'Reload' | translate }}\"\n              type=\"button\"\n            >\n              <i [ngClass]=\"{ 'icon-spin': isLoading }\" c8yIcon=\"refresh\"></i>\n              {{ 'Reload' | translate }}\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"isLoading\" class=\"p-16 text-center\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <c8y-activity-log\n          *ngIf=\"!isLoading\"\n          [application]=\"application\"\n          class=\"d-contents\"\n        ></c8y-activity-log>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ApplicationPropertiesComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: EcosystemService },
    { type: Router },
    { type: FormBuilder },
    { type: ApplicationService },
    { type: AlertService },
    { type: InventoryService }
];

class EcosystemNavigationFactory {
    constructor(permissions) {
        this.permissions = permissions;
        this.navs = [];
        this.showNavigatorNodes = this.permissions.hasAnyRole([
            'ROLE_APPLICATION_MANAGEMENT_READ',
            'ROLE_APPLICATION_MANAGEMENT_ADMIN'
        ]);
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            /*
            The NavigatorNodes are added in AngularJS code to keep the Quick links widget working.
            After the Quick links widget is migrated to Angular, the logic of adding the NavigatorNodes can be migrated as well.
                if (this.navs.length === 0 && this.showNavigatorNodes) {
                  const applicationsNode: NavigatorNode = new NavigatorNode({
                    label: gettext('Applications'),
                    icon: 'c8y-modules',
                    path: '/ecosystem',
                    priority: 300,
                    routerLinkExact: false
                  });
            
                  const microservicesNode = new NavigatorNode({
                    label: gettext('Microservices'),
                    icon: 'microchip',
                    path: '/microservices',
                    priority: 200,
                    routerLinkExact: false
                  });
            
                  this.navs.push(
                    new NavigatorNode({
                      label: gettext('Ecosystem'),
                      icon: 'c8y-atom',
                      priority: 3200,
                      children: [applicationsNode, microservicesNode]
                    })
                  );
                }
            */
            return this.navs;
        });
    }
}
EcosystemNavigationFactory.decorators = [
    { type: Injectable }
];
EcosystemNavigationFactory.ctorParameters = () => [
    { type: Permissions }
];

class EcosystemGuard {
    constructor(optionsService) {
        this.optionsService = optionsService;
    }
    canActivate(route, state) {
        return this.isFeatureEnabled();
    }
    isFeatureEnabled() {
        return Boolean(this.optionsService.get('beta', false));
    }
}
EcosystemGuard.decorators = [
    { type: Injectable }
];
EcosystemGuard.ctorParameters = () => [
    { type: OptionsService }
];

class EcosystemTabs {
    constructor(router, ecosystemGuard) {
        this.router = router;
        this.ecosystemGuard = ecosystemGuard;
    }
    get() {
        const tabs = [];
        if (this.router.url === '/ecosystem/applications' ||
            this.router.url === '/ecosystem/package-list' ||
            this.router.url === '/ecosystem/features') {
            tabs.push({
                icon: 'c8y-modules',
                priority: 1000,
                label: gettext('All applications'),
                path: 'ecosystem/applications'
            });
            if (this.ecosystemGuard.isFeatureEnabled()) {
                tabs.push({
                    icon: 'big-parcel',
                    priority: 999,
                    label: gettext('Packages'),
                    path: 'ecosystem/package-list'
                });
            }
            tabs.push({
                icon: 'tab',
                priority: 998,
                label: gettext('Features'),
                path: '/ecosystem/features'
            });
        }
        return tabs;
    }
}
EcosystemTabs.decorators = [
    { type: Injectable }
];
EcosystemTabs.ctorParameters = () => [
    { type: Router },
    { type: EcosystemGuard }
];

class MicroserviceListComponent {
    constructor(ecosystemService, wizardService) {
        this.ecosystemService = ecosystemService;
        this.wizardService = wizardService;
        this.reloading = false;
        this.reload$ = new BehaviorSubject(null);
        this.microservices$ = this.reload$.pipe(tap(() => (this.reloading = true)), switchMap(() => this.ecosystemService.getMicroservices()), tap(() => (this.reloading = false)), shareReplay());
        this.isMicroserviceHostingAllowed$ = this.reload$.pipe(switchMap(() => this.ecosystemService.isMicroserviceHostingAllowed()), shareReplay());
    }
    ngOnInit() {
        this.loadMicroservices();
    }
    loadMicroservices() {
        this.reload$.next();
    }
    addMicroservice() {
        const initialState = {
            id: 'uploadMicroservice'
        };
        const modalOptions = { initialState };
        const modalRef = this.wizardService.show(modalOptions);
        modalRef.content.onClose.subscribe(() => {
            this.loadMicroservices();
        });
    }
}
MicroserviceListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-microservice-list',
                template: "<c8y-title>{{ 'Microservices' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'microchip'\"\n    [label]=\"'Microservices' | translate\"\n    [path]=\"'microservices'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"100\"\n  *ngIf=\"isMicroserviceHostingAllowed$ | async\"\n>\n  <button\n    (click)=\"addMicroservice()\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add microservice' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add microservice' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"reload$.next()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(microservices$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(microservices$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No microservices to display.</h3>\n  <p translate>Add your first microservice by clicking below.</p>\n  <p>\n    <button\n      (click)=\"addMicroservice()\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add microservice' | translate }}\"\n    >\n      {{ 'Add microservice' | translate }}\n    </button>\n  </p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div\n    class=\"page-sticky-header hidden-xs flex-row\"\n    *ngIf=\"(microservices$ | async)?.length > 0\"\n  >\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Microservice' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div\n    *ngFor=\"let microservice of microservices$ | async\"\n    class=\"col-xs-12 col-sm-4 col-md-3\"\n  >\n    <c8y-application-card\n      (onAppDeleted)=\"loadMicroservices()\"\n      [app]=\"microservice\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
            },] }
];
MicroserviceListComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: WizardService }
];

class PackagesListComponent {
    constructor(ecosystemService, wizardService) {
        this.ecosystemService = ecosystemService;
        this.wizardService = wizardService;
        this.reloading = false;
        this.reload$ = new BehaviorSubject(null);
        this.packages$ = this.reload$.pipe(tap(() => (this.reloading = true)), switchMap(() => this.ecosystemService.getPackageApplications()), tap(() => (this.reloading = false)), shareReplay());
    }
    ngOnInit() {
        this.loadPackages();
    }
    loadPackages() {
        this.reload$.next();
    }
    addPackage() {
        const initialState = {
            id: 'uploadPackage'
        };
        const modalOptions = { initialState };
        const modalRef = this.wizardService.show(modalOptions);
        modalRef.content.onClose.subscribe(() => {
            this.loadPackages();
        });
    }
}
PackagesListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-packages-list',
                template: "<c8y-title>{{ 'Packages' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'big-parcel'\" [label]=\"'Packages' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"addPackage()\" class=\"btn btn-link\" title=\"{{ 'Add package' | translate }}\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add package' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"loadPackages()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(packages$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(packages$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Package' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let app of packages$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      (onAppDeleted)=\"loadPackages()\"\n      [app]=\"app\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n  <div *ngIf=\"(packages$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n    <h1 c8yIcon=\"big-parcel\" class=\"c8y-icon-duocolor\"></h1>\n    <h3 translate>No packages to display.</h3>\n    <p translate>Add your first package by clicking below.</p>\n    <p>\n      <button\n        (click)=\"addPackage()\"\n        class=\"btn btn-primary\"\n        title=\"{{ 'Add package' | translate }}\"\n      >\n        {{ 'Add package' | translate }}\n      </button>\n    </p>\n  </div>\n</div>\n"
            },] }
];
PackagesListComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: WizardService }
];

class AddPackageComponent {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
        this.headerText = gettext('Add package');
        this.successText = gettext('Package created');
        this.createPackageAppHandler = (f) => this.createPackageApp(f);
        this.uploadPackageHandler = (f, app) => this.uploadPackage(f, app);
    }
    createPackageApp(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.isValidAppType(file, ApplicationType.HOSTED);
            return this.ecosystemService.createAppForArchive(file, true);
        });
    }
    uploadPackage(file, pckg) {
        return this.ecosystemService.uploadArchiveToApp(file, pckg);
    }
}
AddPackageComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-package',
                template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'big-parcel'"
    [successText]="successText"
    [createApplicationHandler]="createPackageAppHandler"
    [uploadApplicationHandler]="uploadPackageHandler"
  ></c8y-add-application>`
            },] }
];
AddPackageComponent.ctorParameters = () => [
    { type: EcosystemService }
];

class PackageDetailsComponent {
    constructor(activatedRoute, client, wizard, ecosystemService) {
        this.activatedRoute = activatedRoute;
        this.client = client;
        this.wizard = wizard;
        this.ecosystemService = ecosystemService;
        this.package = {};
        this.packageProperties = packageProperties;
        this.headers = { 'Content-Type': 'text/markdown', responseType: 'blob' };
        this.NOT_FOUND_ERROR_CODE = 404;
    }
    ngOnInit() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this.package = this.getPackage();
            this.name = (_a = this.package) === null || _a === void 0 ? void 0 : _a.name;
            this.description = (_c = (_b = this.package) === null || _b === void 0 ? void 0 : _b.manifest) === null || _c === void 0 ? void 0 : _c.description;
            this.readme = yield this.getReadmeFileContentAsHtml();
            this.appState = this.ecosystemService.getAppState(this.package);
            this.isApplicationPackage = this.ecosystemService.isApplicationPackage(this.package);
        });
    }
    deploy() {
        const initialState = {
            wizardConfig: {},
            id: 'deployPackage',
            package: this.package
        };
        const modalOptions = { initialState };
        this.wizard.show(modalOptions);
    }
    getPackage() {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.snapshot) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.contextData;
    }
    getReadmeFileContentAsHtml() {
        return __awaiter(this, void 0, void 0, function* () {
            const readmeFile = yield this.getReadmeFile();
            const readmeContent = yield readmeFile.text();
            if (readmeFile.status === 200) {
                const tokens = lexer(readmeContent);
                const html = parser(tokens);
                return html;
            }
        });
    }
    getReadmeFile() {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const options = {
                method: 'GET',
                headers: this.headers
            };
            result = yield this.client.fetch(`/apps/${this.package.contextPath}/readme.md`, options);
            if (result && result.status === this.NOT_FOUND_ERROR_CODE) {
                result = yield this.client.fetch(`/apps/${this.package.contextPath}/README.md`, options);
            }
            return result;
        });
    }
}
PackageDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-package-details',
                template: "<c8y-title>{{ name | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'big-parcel'\"\n    [label]=\"'Packages' | translate\"\n    [path]=\"'ecosystem/package-list'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"name | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Info' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"card content-fullpage d-grid grid__col--8-4--md grid__row--fit-auto\">\n  <div class=\"bg-gray-white grid__col--fullspan separator-bottom\">\n    <div class=\"card-block p-t-24 p-b-24 large-padding\">\n      <div class=\"content-flex-70\">\n        <div class=\"text-center\">\n          <i c8yIcon=\"big-parcel\" class=\"c8y-icon-duocolor icon-48\"></i>\n          <p>\n            <span [ngClass]=\"appState?.class\" class=\"label\">{{ appState?.label | translate }}</span>\n          </p>\n        </div>\n\n        <div class=\"flex-grow col-10\">\n          <div class=\"content-flex-80\">\n            <div class=\"col-5\">\n              <h4 class=\"card-title text-bold m-b-8\">{{ name | humanizeAppName | async }}</h4>\n              <p *ngIf=\"description\">{{ description }}</p>\n              <p *ngIf=\"!description\" class=\"text-muted\">\n                <em>{{ 'No description available.' | translate }}</em>\n              </p>\n            </div>\n            <div *ngIf=\"isApplicationPackage\" class=\"col-3 text-right-md\">\n              <button (click)=\"deploy()\" class=\"btn btn-primary btn-xs\">\n                <i c8yIcon=\"output\" class=\"m-r-4\"></i>\n                {{ 'Deploy application' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-grow\">\n              <c8y-properties-list\n                [data]=\"package.manifest\"\n                [emptyLabel]=\"'--'\"\n                [icon]=\"'info-circle'\"\n                [properties]=\"packageProperties\"\n                [title]=\"'Package info' | translate\"\n              ></c8y-properties-list>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <div class=\"card-header separator sticky-top\">\n      <h4 class=\"card-title\">{{ 'Package overview' | translate }}</h4>\n    </div>\n    <div class=\"card-block p-l-16 p-r-16\">\n      <div *ngIf=\"!readme\" class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"user-manual\" class=\"c8y-icon-duocolor\"></h1>\n        <div>\n          <h3 translate>No README.md found.</h3>\n          <p class=\"m-r-8\" translate>\n            To view the contents of \"README\", add the file \"README.md\" to the package.\n          </p>\n        </div>\n      </div>\n\n      <div [innerHTML]=\"readme\" class=\"markdown-content\"></div>\n    </div>\n    <div class=\"separator-bottom visible-sm visible-xs\"></div>\n  </div>\n\n  <div class=\"inner-scroll\">\n    <div class=\"card-header separator sticky-top\">\n      <h4 class=\"card-title\">{{ 'Package plugins' | translate }}</h4>\n    </div>\n    <div class=\"card-block\">\n      <!-- empty state -->\n      <div *ngIf=\"true\" class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"plugin\"></h1>\n        <div>\n          <h3 translate>No plugins to display.</h3>\n          <p class=\"m-r-8\" translate>\n           This package doesn't contain plugins.\n          </p>\n        </div>\n      </div>\n\n      <!-- TODO: display the included plugins list -->\n    </div>\n  </div>\n</div>\n\n"
            },] }
];
PackageDetailsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: FetchClient },
    { type: WizardService },
    { type: EcosystemService }
];

class DeployApplicationComponent {
    constructor(ecosystemService, applicationService, wizardComponent, translate) {
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.wizardComponent = wizardComponent;
        this.translate = translate;
        this.inProgress = true;
        this.isDeployed = false;
        this.deployedWithSuccess = false;
        this.descriptionTemplate = gettext('Deploy application using "{{ packageName }}" package');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.package = this.wizardComponent.package;
            const apps = (yield this.ecosystemService.getApplications()).data;
            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.package, apps);
            this.headerText = this.getHeaderText();
            this.inProgress = false;
        });
    }
    deployApp() {
        return __awaiter(this, void 0, void 0, function* () {
            const formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
            this.inProgress = true;
            const { data: clonedPkg } = yield this.applicationService.clone(this.package);
            const config = this.ecosystemService.createConfig(clonedPkg, formGroupValue);
            try {
                const { data: updatedApp } = yield this.ecosystemService.updateApp(config, true);
                if (updatedApp) {
                    yield this.ecosystemService.updateAppManifest(updatedApp, this.package);
                }
                this.deployedWithSuccess = true;
            }
            catch (error) {
                this.markAsDeployed();
                yield this.applicationService.delete(clonedPkg.id);
            }
            this.markAsDeployed();
        });
    }
    cancel() {
        this.wizardComponent.close();
    }
    markAsDeployed() {
        this.isDeployed = true;
        this.inProgress = false;
    }
    getHeaderText() {
        return this.translate.instant(this.descriptionTemplate, {
            packageName: this.package.name
        });
    }
}
DeployApplicationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-deploy-application',
                template: "<c8y-wizard-header>\n  <div class=\"modal-header dialog-header\">\n    <h1 c8yIcon=\"output\"></h1>\n    <h4>{{ 'Deploy application' | translate }}</h4>\n  </div>\n</c8y-wizard-header>\n\n<c8y-wizard-body>\n  <ng-container *ngIf=\"!isDeployed\">\n    <div class=\"fadeIn animated d-flex a-i-center j-c-center d-col\" style=\"min-height: 309px\">\n      <p\n        class=\"bg-white fit-w p-16 text-center text-medium sticky-top bg-white separator-bottom\"\n        *ngIf=\"!inProgress\"\n      >\n        {{ headerText | translate }}\n      </p>\n      <c8y-application-properties-form\n        *ngIf=\"!inProgress\"\n        [application]=\"newAppConfig\"\n        class=\"d-block fit-w bg-gray-white\"\n      ></c8y-application-properties-form>\n\n      <c8y-progress-bar\n        *ngIf=\"inProgress\"\n        [message]=\"'Deploying\u2026' | translate\"\n        class=\"text-center\"\n      ></c8y-progress-bar>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDeployed\">\n    <div\n      *ngIf=\"deployedWithSuccess; else failedDeploy\"\n      class=\"modal-body fadeIn animated\"\n      style=\"min-height: 309px\"\n    >\n      <div class=\"d-flex a-i-center j-c-center d-col\">\n        <c8y-operation-result\n          type=\"success\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          text=\"{{ 'Application' | translate }} {{ package.name }} {{ 'created' | translate }}\"\n          class=\"lead d-block m-b-16\"\n        ></c8y-operation-result>\n      </div>\n    </div>\n    <ng-template #failedDeploy>\n      <div class=\"modal-body fadeIn animated text-center\" style=\"min-height: 257px\">\n        <c8y-operation-result\n          type=\"error\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          text=\"{{ 'Application creation failed' | translate }}\"\n          class=\"lead\"\n        ></c8y-operation-result>\n      </div>\n    </ng-template>\n  </ng-container>\n</c8y-wizard-body>\n\n<c8y-wizard-footer>\n  <button\n    (click)=\"cancel()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ isDeployed && deployedWithSuccess ? 'Done' : ('Cancel' | translate) }}\"\n  >\n    {{ isDeployed && deployedWithSuccess ? 'Done' : ('Cancel' | translate) }}\n  </button>\n\n  <button\n    (click)=\"deployApp()\"\n    *ngIf=\"!isDeployed\"\n    [disabled]=\"inProgress\"\n    [ngClass]=\"{ 'btn-pending': inProgress }\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Deploy' | translate }}\"\n  >\n    {{ 'Deploy' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
            },] }
];
DeployApplicationComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: ApplicationService },
    { type: WizardComponent },
    { type: TranslateService }
];
DeployApplicationComponent.propDecorators = {
    applicationPropertiesForm: [{ type: ViewChild, args: [ApplicationPropertiesFormComponent,] }]
};

class AddApplicationComponent {
    constructor(ecosystemService, alertService, applicationService, wizardComponent) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.applicationService = applicationService;
        this.wizardComponent = wizardComponent;
        this.canGoBack = false;
        this.canOpenInBrowser = false;
        this.uploadCanceled = false;
    }
    get progress() {
        return this.ecosystemService.progress;
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            const file = event[0].file;
            this.onFile(file);
        }
    }
    onFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.errorMessage = null;
            this.progress.next(0);
            try {
                this.createdApp = yield this.createApplicationHandler(file);
                yield this.uploadApplicationHandler(file, this.createdApp);
                this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.createdApp);
                this.isAppCreated = true;
            }
            catch (ex) {
                this.ecosystemService.cancelAppCreation(this.createdApp);
                this.createdApp = null;
                this.dropAreaComponent.onDelete();
                this.errorMessage = ERROR_MESSAGES[ex.message];
                if (!this.errorMessage && !this.uploadCanceled) {
                    this.alertService.addServerFailure(ex);
                }
            }
            this.progress.next(100);
            this.isLoading = false;
        });
    }
    getHref(app) {
        return this.applicationService.getHref(app);
    }
    cancel() {
        this.cancelFileUpload();
        this.wizardComponent.close();
    }
    done() {
        this.wizardComponent.close();
    }
    back() {
        this.wizardComponent.reset();
    }
    cancelFileUpload() {
        this.uploadCanceled = true;
        this.ecosystemService.cancelAppCreation(this.createdApp);
        this.createdApp = null;
    }
}
AddApplicationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-application',
                template: "<c8y-wizard-header>\n  <h1 [c8yIcon]=\"headerIcon\"></h1>\n  <h4>{{ headerText | translate }}</h4>\n</c8y-wizard-header>\n\n<div class=\"modal-inner-scroll animated fadeIn\">\n  <div class=\"modal-body\">\n    <c8y-form-group\n      *ngIf=\"!isAppCreated; else appCreated\"\n      [hasError]=\"errorMessage\"\n      class=\"m-auto\"\n      style=\"max-width: 285px\"\n    >\n      <c8y-drop-area\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [accept]=\"'.zip'\"\n        [loading]=\"isLoading\"\n        [maxAllowedFiles]=\"1\"\n        [message]=\"'Upload a *.zip file' | translate\"\n        [progress]=\"progress | async\"\n        class=\"drop-area\"\n      >\n      </c8y-drop-area>\n      <c8y-messages>\n        <c8y-message *ngIf=\"errorMessage\">\n          {{ errorMessage | translate }}\n        </c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n    <ng-template #appCreated>\n      <div class=\"d-flex a-i-center j-c-center\" style=\"min-height: 285px\">\n        <c8y-operation-result\n          text=\"{{ successText | translate }}\"\n          [vertical]=\"true\"\n          [size]=\"84\"\n          class=\"lead\"\n          type=\"success\"\n        >\n        </c8y-operation-result>\n      </div>\n    </ng-template>\n  </div>\n</div>\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    *ngIf=\"!isAppCreated && canGoBack\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button\n    (click)=\"cancel()\"\n    *ngIf=\"!isAppCreated\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Cancel\n  </button>\n  <button\n    (click)=\"done()\"\n    *ngIf=\"isAppCreated\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Done' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Done\n  </button>\n  <a\n    (click)=\"$event.stopPropagation()\"\n    *ngIf=\"isAppCreated && canOpenInBrowser\"\n    [href]=\"getHref(createdApp)\"\n    target=\"_blank\"\n    class=\"btn btn-primary\"\n    title=\"{{ 'Open' | translate }}\"\n  >\n    <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n    {{ 'Open' | translate }}\n  </a>\n</c8y-wizard-footer>\n"
            },] }
];
AddApplicationComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService },
    { type: ApplicationService },
    { type: WizardComponent }
];
AddApplicationComponent.propDecorators = {
    headerText: [{ type: Input }],
    headerIcon: [{ type: Input }],
    successText: [{ type: Input }],
    createApplicationHandler: [{ type: Input }],
    uploadApplicationHandler: [{ type: Input }],
    canGoBack: [{ type: Input }],
    dropAreaComponent: [{ type: ViewChild, args: [DropAreaComponent,] }]
};

class PackageGuard {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
    }
    canActivate(route) {
        const app = route.data.contextData || route.parent.data.contextData;
        if (!app) {
            return false;
        }
        return this.ecosystemService.isPackage(app);
    }
}
PackageGuard.decorators = [
    { type: Injectable }
];
PackageGuard.ctorParameters = () => [
    { type: EcosystemService }
];

class ApplicationCardComponent {
    constructor(applicationService, ecosystemService, alertService, router) {
        this.applicationService = applicationService;
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.router = router;
        this.canEdit = true;
        this.onAppDeleted = new EventEmitter();
    }
    get openButtonTitle() {
        return !this.disableOpenInBrowser ?
            gettext('Open') :
            gettext('This application is overridden.');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.appState = this.ecosystemService.getAppState(this.app);
            const contextPath = this.app.contextPath;
            this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.app);
            this.disableOpenInBrowser =
                this.canOpenInBrowser && (yield this.ecosystemService.isOverwrittenByCustomApp(this.app));
            this.canDelete = this.ecosystemService.canDeleteApp(this.app);
            this.isPackage = this.ecosystemService.isPackage(this.app);
            this.isFeature = this.ecosystemService.isFeature(this.app);
            this.isMicroservice = this.ecosystemService.isMicroservice(this.app);
            this.isExternal = this.ecosystemService.isExternal(this.app);
        });
    }
    detail() {
        this.isMicroservice
            ? this.router.navigateByUrl(`/microservices/${this.app.id}`)
            : this.router.navigateByUrl(`/ecosystem/application/${this.app.id}`);
    }
    openApp() {
        window.open(this.applicationService.getHref(this.app));
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ecosystemService.deleteApp(this.app);
                this.onAppDeleted.emit();
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
}
ApplicationCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-application-card',
                template: "<div class=\"card pointer card--d-col\">\n  <div (click)=\"detail()\" class=\"card-block text-center card-column-40\">\n    <div class=\"card-appicon\">\n      <c8y-app-icon\n        *ngIf=\"!isPackage && !isFeature && !isMicroservice && !isExternal\"\n        [app]=\"app\"\n        [contextPath]=\"app.contextPath\"\n        [name]=\"app.name\"\n      ></c8y-app-icon>\n      <i *ngIf=\"isPackage\" c8yIcon=\"big-parcel\"></i>\n      <i *ngIf=\"isFeature\" c8yIcon=\"tab\"></i>\n      <i *ngIf=\"isMicroservice\" c8yIcon=\"microchip\"></i>\n      <i *ngIf=\"isExternal\" c8yIcon=\"globe1\"></i>\n    </div>\n    <p class=\"e2e-appCardName text-medium\" title=\"{{ app | humanizeAppName | async }}\">\n      {{ app | humanizeAppName | async }}\n    </p>\n    <small *ngIf=\"app.manifest?.version && (isPackage || isMicroservice)\" class=\"text-muted\">\n      <em>{{ app.manifest.version }}</em>\n    </small>\n  </div>\n  <div (click)=\"detail()\" class=\"card-block p-0 no-min-height card--d-col card-column-80 flex-grow\">\n    <div class=\"card-block no-min-height p-t-0 p-b-0 card-column-80\">\n      <div *ngIf=\"app.description\" class=\"text-center-grid\">\n        <div class=\"p-b-8 card-hidden-grid\"></div>\n        <p class=\"small l-h-tight p-b-8 p-l-0 p-r-0\">{{ app.description | translate }}</p>\n      </div>\n    </div>\n    <div class=\"card-block no-min-height p-t-0 p-b-0 card-column-20 text-center-grid\">\n      <span [ngClass]=\"appState.class\" class=\"label\">{{ appState.label | translate }}</span>\n    </div>\n    <div class=\"card-footer no-min-height p-t-0 p-b-0 card-column-20 text-center-grid\">\n      <div class=\"p-b-16 card-hidden-list\"></div>\n      <button\n        (click)=\"openApp(); $event.stopPropagation()\"\n        *ngIf=\"canOpenInBrowser\"\n        [disabled]=\"disableOpenInBrowser\"\n        class=\"btn btn-xs btn-default\"\n        [title]=\"openButtonTitle | translate\"\n      >\n        <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n        {{ 'Open' | translate }}\n      </button>\n      <div class=\"p-b-32 card-hidden-list\"></div>\n    </div>\n  </div>\n\n  <div *ngIf=\"canEdit || canOpenInBrowser || canDelete\" class=\"card-actions m-t-0\">\n    <div class=\"dropdown\" dropdown>\n      <button\n        class=\"dropdown-toggle c8y-dropdown\"\n        dropdownToggle\n        title=\"{{ 'Settings' | translate }}\"\n      >\n        <i c8yIcon=\"ellipsis-v\"></i>\n      </button>\n      <ul *dropdownMenu class=\"dropdown-menu dropdown-menu-right\">\n        <li *ngIf=\"canEdit\">\n          <button (click)=\"detail()\" title=\"{{ 'Edit' | translate }}\">\n            <i c8yIcon=\"pencil\" class=\"m-r-4\"></i>\n            {{ 'Edit' | translate }}\n          </button>\n        </li>\n        <li *ngIf=\"canDelete\">\n          <button\n            (click)=\"delete()\"\n            href=\"\"\n            title=\"{{ 'Delete' | translate }}\"\n          >\n            <i c8yIcon=\"trash\" class=\"m-r-4\"></i>\n            {{ 'Delete' | translate }}\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ApplicationCardComponent.ctorParameters = () => [
    { type: ApplicationService },
    { type: EcosystemService },
    { type: AlertService },
    { type: Router }
];
ApplicationCardComponent.propDecorators = {
    app: [{ type: Input }],
    canEdit: [{ type: Input }],
    onAppDeleted: [{ type: Output }]
};

class ApplicationPropertiesGuard {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
    }
    canActivate(route) {
        const app = route.data.contextData || route.parent.data.contextData;
        if (!app) {
            return false;
        }
        return !this.ecosystemService.isPackage(app);
    }
}
ApplicationPropertiesGuard.decorators = [
    { type: Injectable }
];
ApplicationPropertiesGuard.ctorParameters = () => [
    { type: EcosystemService }
];

class FeatureListComponent {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
        this.reloading = false;
        this.reload$ = new BehaviorSubject(null);
        this.features$ = this.reload$.pipe(tap(() => (this.reloading = true)), switchMap(() => this.ecosystemService.getFeatureApplications()), tap(() => (this.reloading = false)), shareReplay());
    }
    ngOnInit() {
        this.loadFeatures();
    }
    loadFeatures() {
        this.reload$.next();
    }
}
FeatureListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-feature-list',
                template: "<c8y-title>{{ 'Features' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'tab'\" [label]=\"'Features' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"reload$.next()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(features$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(features$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No features to display.</h3>\n  <p translate>No additional features are subscribed to the tenant.</p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(features$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Feature' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let feature of features$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      [app]=\"feature\"\n      [canEdit]=\"false\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
            },] }
];
FeatureListComponent.ctorParameters = () => [
    { type: EcosystemService }
];

class PackageArchivesComponent {
    constructor(activatedRoute, ecosystemService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.isLoading = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadApplication();
        });
    }
    loadApplication() {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = this.activatedRoute.snapshot.parent.data.contextData;
            this.isLoading = true;
            this.application = yield this.ecosystemService.getApplication(id);
            this.isLoading = false;
        });
    }
}
PackageArchivesComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-package-archives',
                template: "<c8y-title>{{ application | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'big-parcel'\"\n    [label]=\"'Packages' | translate\"\n    [path]=\"'ecosystem/package-list'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Archives' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"row\">\n  <div class=\"col-lg-8\">\n    <div class=\"card content-fullpage d-flex d-col\">\n      <div class=\"card-header large-padding separator\">\n        <h4 class>{{ 'Archives' | translate }}</h4>\n      </div>\n      <c8y-activity-log class=\"d-contents\" *ngIf=\"!isLoading\" [application]=\"application\">\n      </c8y-activity-log>\n    </div>\n  </div>\n</div>\n"
            },] }
];
PackageArchivesComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: EcosystemService }
];

class EcosystemWizardFactory {
    constructor(ecosystemGuard) {
        this.ecosystemGuard = ecosystemGuard;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.ecosystemGuard.isFeatureEnabled()) {
                return;
            }
            else {
                return {
                    wizardId: 'uploadApplication',
                    component: InstallFromPackageComponent,
                    name: 'Install from available packages',
                    c8yIcon: 'big-parcel'
                };
            }
        });
    }
}
EcosystemWizardFactory.decorators = [
    { type: Injectable }
];
EcosystemWizardFactory.ctorParameters = () => [
    { type: EcosystemGuard }
];

class UploadArchiveComponent {
    constructor(ecosystemService, alertService) {
        this.ecosystemService = ecosystemService;
        this.alertService = alertService;
        this.applicationChange = new EventEmitter();
        this.refresh = new EventEmitter();
        this.archives = [];
        this.uploadInProgress = false;
        this.canReactivate = false;
    }
    get uploadProgress() {
        return this.ecosystemService.progress;
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            const file = event[0].file;
            this.onFile(file);
        }
    }
    onFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ecosystemService.isValidAppType(file, this.application.type);
                const isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
                this.archives = isCustomMicroservice
                    ? []
                    : yield this.ecosystemService.listArchives(this.application.id);
                this.archives.sort((a, b) => {
                    return new Date(b.created) - new Date(a.created);
                });
                this.uploadInProgress = true;
                this.uploadProgress.next(0);
                if (this.archives.length === 6 && !isCustomMicroservice) {
                    yield this.ecosystemService.removeOldestArchive(this.application, this.archives);
                }
                const app = yield this.ecosystemService.uploadArchiveToApp(file, this.application);
                this.applicationChange.emit(app);
                this.uploadProgress.next(100);
                this.uploadInProgress = false;
                this.refresh.emit();
                this.alertService.success(gettext('Archive uploaded and activated.'));
            }
            catch (ex) {
                this.uploadInProgress = false;
                this.alertService.addServerFailure(ex);
            }
        });
    }
}
UploadArchiveComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-upload-archive',
                template: "<c8y-drop-area\n  (dropped)=\"onFileDroppedEvent($event)\"\n  [accept]=\"'.zip'\"\n  [files]=\"fileList\"\n  [loading]=\"uploadInProgress\"\n  [maxAllowedFiles]=\"1\"\n  [message]=\"'Upload a *.zip file' | translate\"\n  [progress]=\"uploadProgress | async\"\n  [forceHideList]=\"true\"\n  class=\"drop-area-sm\"\n>\n</c8y-drop-area>\n"
            },] }
];
UploadArchiveComponent.ctorParameters = () => [
    { type: EcosystemService },
    { type: AlertService }
];
UploadArchiveComponent.propDecorators = {
    application: [{ type: Input }],
    applicationChange: [{ type: Output }],
    refresh: [{ type: Output }]
};

const ecosystemMainRoutes = [
    {
        path: 'ecosystem/applications',
        component: ApplicationListComponent
    },
    {
        path: 'ecosystem/package-list',
        component: PackagesListComponent,
        canActivate: [EcosystemGuard]
    },
    {
        path: 'ecosystem/features',
        component: FeatureListComponent
    },
    {
        path: 'ecosystem',
        redirectTo: 'ecosystem/applications'
    },
    {
        path: 'microservices',
        component: MicroserviceListComponent
    }
];
const applicationDetailsRoutes = [
    {
        path: 'properties',
        component: ApplicationPropertiesComponent,
        icon: 'list',
        label: gettext('Properties'),
        context: ViewContext.Application,
        priority: 5,
        canActivate: [ApplicationPropertiesGuard]
    },
    {
        path: 'plugins',
        component: ApplicationPluginsComponent,
        icon: 'plugin',
        label: gettext('Plugins'),
        context: ViewContext.Application,
        priority: 3,
        canActivate: [ApplicationPluginsGuard, EcosystemGuard]
    },
    {
        path: 'package-details',
        component: PackageDetailsComponent,
        icon: 'big-parcel',
        label: gettext('Info'),
        context: ViewContext.Application,
        priority: 10,
        canActivate: [PackageGuard, EcosystemGuard]
    },
    {
        path: 'package-archives',
        component: PackageArchivesComponent,
        icon: 'c8y-archive',
        label: gettext('Archives'),
        context: ViewContext.Application,
        priority: 5,
        canActivate: [PackageGuard, EcosystemGuard]
    },
    {
        path: 'properties',
        component: ApplicationPropertiesComponent,
        icon: 'list',
        label: gettext('Properties'),
        context: ViewContext.Microservice,
        priority: 5,
        canActivate: [ApplicationPropertiesGuard]
    }
];
const ɵ0 = applicationDetailsRoutes, ɵ1 = {
    wizardId: 'uploadApplication',
    component: AddWebApplicationComponent,
    name: 'Upload web application',
    c8yIcon: 'upload'
}, ɵ2 = {
    wizardId: 'uploadPackage',
    component: AddPackageComponent
}, ɵ3 = {
    wizardId: 'uploadApplication',
    component: AddExternalApplicationComponent,
    name: 'External application',
    c8yIcon: 'cloud-link'
}, ɵ4 = {
    wizardId: 'deployPackage',
    component: DeployApplicationComponent,
    name: 'Deploy package',
    c8yIcon: 'big-parcel'
}, ɵ5 = {
    wizardId: 'uploadApplication',
    component: DuplicateApplicationComponent,
    name: 'Duplicate existing application',
    c8yIcon: 'copy'
}, ɵ6 = {
    wizardId: 'uploadMicroservice',
    component: AddMicroserviceComponent
};
class EcosystemModule {
}
EcosystemModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ApplicationListComponent,
                    MicroserviceListComponent,
                    ApplicationCardComponent,
                    ApplicationPropertiesComponent,
                    AddMicroserviceComponent,
                    ActivityLogComponent,
                    ApplicationPluginsComponent,
                    PluginListItemComponent,
                    InstallPluginComponent,
                    PluginListComponent,
                    AddWebApplicationComponent,
                    AddExternalApplicationComponent,
                    DuplicateApplicationComponent,
                    DuplicateApplicationListComponent,
                    DuplicateApplicationPropertiesComponent,
                    ApplicationPropertiesComponent,
                    InstallFromPackageComponent,
                    AddMicroserviceComponent,
                    ApplicationPropertiesComponent,
                    PackagesListComponent,
                    PackageDetailsComponent,
                    DeployApplicationComponent,
                    AddPackageComponent,
                    AddApplicationComponent,
                    ApplicationPropertiesFormComponent,
                    FeatureListComponent,
                    PackageArchivesComponent,
                    UploadArchiveComponent
                ],
                entryComponents: [
                    AddMicroserviceComponent,
                    AddWebApplicationComponent,
                    AddExternalApplicationComponent,
                    DuplicateApplicationComponent,
                    DuplicateApplicationListComponent,
                    DuplicateApplicationPropertiesComponent,
                    ApplicationPropertiesComponent,
                    ActivityLogComponent,
                    ApplicationPluginsComponent,
                    InstallPluginComponent,
                    PackagesListComponent,
                    InstallFromPackageComponent,
                    PackageDetailsComponent,
                    DeployApplicationComponent,
                    AddPackageComponent,
                    FeatureListComponent,
                    PackageArchivesComponent
                ],
                imports: [
                    CoreModule,
                    BsDropdownModule,
                    TooltipModule,
                    FormsModule,
                    ReactiveFormsModule,
                    RouterModule.forChild(ecosystemMainRoutes),
                    PopoverModule
                ],
                exports: [ApplicationPropertiesComponent],
                providers: [
                    {
                        provide: HOOK_TABS,
                        useClass: EcosystemTabs,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: EcosystemNavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    EcosystemGuard,
                    EcosystemService,
                    ApplicationPluginsGuard,
                    PackageGuard,
                    ApplicationPropertiesGuard,
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ1,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ2,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ3,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ4,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useClass: EcosystemWizardFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ5,
                        multi: true
                    },
                    {
                        provide: HOOK_WIZARD,
                        useValue: ɵ6,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { EcosystemModule, ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ApplicationListComponent as ɵa, EcosystemService as ɵb, EcosystemGuard as ɵba, EcosystemTabs as ɵbb, EcosystemNavigationFactory as ɵbc, ApplicationPropertiesGuard as ɵbd, ApplicationPluginsGuard as ɵbe, PackageGuard as ɵbf, EcosystemWizardFactory as ɵbg, MicroserviceListComponent as ɵc, ApplicationCardComponent as ɵd, ApplicationPropertiesComponent as ɵe, AddMicroserviceComponent as ɵf, ActivityLogComponent as ɵg, ApplicationPluginsComponent as ɵh, PluginListItemComponent as ɵi, InstallPluginComponent as ɵj, PluginListComponent as ɵk, AddWebApplicationComponent as ɵl, AddExternalApplicationComponent as ɵm, DuplicateApplicationComponent as ɵn, DuplicateApplicationListComponent as ɵo, DuplicateApplicationPropertiesComponent as ɵp, ApplicationPropertiesFormComponent as ɵq, InstallFromPackageComponent as ɵr, PackagesListComponent as ɵs, PackageDetailsComponent as ɵt, DeployApplicationComponent as ɵu, AddPackageComponent as ɵv, AddApplicationComponent as ɵw, FeatureListComponent as ɵx, PackageArchivesComponent as ɵy, UploadArchiveComponent as ɵz };
//# sourceMappingURL=c8y-ngx-components-ecosystem.js.map
