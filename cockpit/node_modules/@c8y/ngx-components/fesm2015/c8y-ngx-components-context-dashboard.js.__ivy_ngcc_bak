import { __awaiter, __rest } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ViewChild, Input, EventEmitter, Output, Renderer2, HostBinding, NgModule, Host } from '@angular/core';
import { cloneDeep, sortBy, get, assign, pick, some, keys, keyBy, has, forEach, clone, omit, escapeRegExp, findIndex, values, kebabCase } from 'lodash-es';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { of, from, Subject, iif, timer, BehaviorSubject, combineLatest } from 'rxjs';
import { tap, map, catchError, throwIfEmpty, filter, toArray, mergeAll, mergeMap, switchMap, debounceTime, distinctUntilChanged, shareReplay, take } from 'rxjs/operators';
import * as i1 from '@c8y/ngx-components';
import { gettext, DynamicComponentService, Status, NavigatorNode, getActivatedRoute, ViewContext, TabsService, ModalService, AppStateService, NavigatorService, Permissions, ICON_LIST, DashboardChildChange, AlertService, GainsightService, HOOK_ROUTE, HOOK_ACTION, CoreModule, FilterInputComponent, DocsService, DocsModule, QuickLinkModule, HOOK_NAVIGATOR_NODES, HOOK_COMPONENTS, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import * as i2 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { InventoryService, UserService, QueriesUtil, TenantService, ApplicationService } from '@c8y/client';
import { ControlContainer, NgForm } from '@angular/forms';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '@angular/common';

const CONTEXT_DASHBOARD_CONFIG = new InjectionToken('ContextDashboardConfig');
var ContextDashboardType;
(function (ContextDashboardType) {
    ContextDashboardType["Device"] = "device";
    ContextDashboardType["DeviceType"] = "type";
    ContextDashboardType["Group"] = "group";
    ContextDashboardType["Named"] = "name";
    ContextDashboardType["Report"] = "report";
})(ContextDashboardType || (ContextDashboardType = {}));
const WIDGET_HEADER_CLASSES = [
    {
        label: gettext('Regular`style`'),
        class: 'panel-title-regular',
        description: gettext('The widget has no border between header and content.')
    },
    {
        label: gettext('Border`style`'),
        class: 'panel-title-border',
        description: gettext('The widget has a small separation border between header and content.')
    },
    {
        label: gettext('Overlay`style`'),
        class: 'panel-title-overlay',
        description: gettext('The widget content overlays the header.')
    },
    {
        label: gettext('Hidden`style`'),
        class: 'panel-title-hidden',
        description: gettext('The widget header is not shown.')
    }
];
const WIDGET_CONTENT_CLASSES = [
    {
        label: gettext('Light`style`'),
        class: 'panel-content-light',
        description: gettext('The widget is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`style`'),
        class: 'panel-content-dark',
        description: gettext('The widget is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`style`'),
        class: 'panel-content-transparent',
        description: gettext('The widget is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`style`'),
        class: 'panel-content-branded',
        description: gettext('The widget is styled with the main brand color.')
    }
];
const DASHBOARD_THEME_CLASSES = [
    {
        label: gettext('Light`theme`'),
        class: 'dashboard-theme-light',
        description: gettext('The dashboard is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`theme`'),
        class: 'dashboard-theme-dark',
        description: gettext('The dashboard is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`theme`'),
        class: 'dashboard-theme-transparent',
        description: gettext('The dashboard is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`theme`'),
        class: 'dashboard-theme-branded',
        description: gettext('The dashboard is styled with the main brand color.')
    }
];
const STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];

class WidgetService {
    constructor(dynamicComponentService, translateService, moduleConfig) {
        this.dynamicComponentService = dynamicComponentService;
        this.translateService = translateService;
        this.moduleConfig = moduleConfig;
        this.dynamicComponentService.items$.subscribe(widgets => {
            this.widgets = widgets;
        });
    }
    getWidgetDefinition(componentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dynamicComponentService.getById(componentId);
        });
    }
    getWidgetDefinitions() {
        const translatedComponents = this.widgets.map(cmp => (Object.assign(Object.assign({}, cmp), { label: this.translateService.instant(cmp.label) })));
        return cloneDeep(sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
    }
    mapLegacy(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.getWidgetDefinition(widget.componentId || widget.name);
            if (get(cmp, 'data.settings.upgrade')) {
                widget.widgetComponent = cmp.data.settings.widgetComponent;
                widget.configComponent = cmp.data.settings.configComponent;
                widget.templateUrl = cmp.data.settings.templateUrl;
                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                widget.transformConfigWithContext =
                    cmp.data.settings.componentTransformConfigWithContext ||
                        cmp.data.settings.transformConfigWithContext ||
                        widget.transformConfigWithContext;
            }
            else {
                delete widget.templateUrl;
                delete widget.configTemplateUrl;
            }
            return widget;
        });
    }
}
WidgetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(i0.ɵɵinject(i1.DynamicComponentService), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); }, token: WidgetService, providedIn: "root" });
WidgetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
WidgetService.ctorParameters = () => [
    { type: DynamicComponentService },
    { type: TranslateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
];

class ContextDashboardService {
    constructor(inventory, tabs, modal, translateService, router, user, appState, navigator, permissions) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.user = user;
        this.appState = appState;
        this.navigator = navigator;
        this.permissions = permissions;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    get formDisabled() {
        return this._formDisabled;
    }
    set formDisabled(value) {
        this._formDisabled = value;
    }
    create(dashboardCfg, context, name = '') {
        return __awaiter(this, void 0, void 0, function* () {
            let id = '';
            let dashboardType;
            if (context) {
                id = context.contextData.id;
                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
            }
            if (name) {
                dashboardType = ContextDashboardType.Named;
            }
            const dashboard = {};
            assign(dashboard, { c8y_Dashboard: dashboardCfg });
            const value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : (name || id);
            const fragmentKey = this.createFragmentKey(dashboardType, value);
            dashboard[fragmentKey] = {};
            if (this.shouldSetGlobal(dashboard, context)) {
                assign(dashboard, { c8y_Global: {} });
            }
            dashboard.name = dashboard.c8y_Dashboard.name;
            const { data } = dashboardType === ContextDashboardType.Group || dashboardType === ContextDashboardType.Device || (context && dashboardType === ContextDashboardType.Named)
                ? yield this.inventory.childAdditionsCreate(dashboard, id)
                : yield this.inventory.create(dashboard);
            return data;
        });
    }
    detail(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.detail(dashboardMO);
            this.cache.set(dashboardMO.id, data);
            return data;
        });
    }
    update(dashboard) {
        return __awaiter(this, void 0, void 0, function* () {
            dashboard.name = dashboard.c8y_Dashboard.name;
            const keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
            const { data } = yield this.inventory.update(keepFragments);
            this.cache.set(dashboard.id, data);
            return data;
        });
    }
    delete(dashboard, withConfirmation = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (withConfirmation) {
                    let msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}". Do you want to proceed?`);
                    if (this.isDeviceType(dashboard)) {
                        msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}" from all devices of the type "{{ deviceType }}".
           Do you want to proceed?`);
                    }
                    yield this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                        dashboardName: dashboard.c8y_Dashboard.name,
                        deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                    }), Status.DANGER, {
                        ok: gettext('Delete'),
                        cancel: gettext('Cancel')
                    });
                }
                yield this.inventory.delete(dashboard);
                const tabToRemove = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboard.id}`));
                this.tabs.remove(tabToRemove);
                this.tabs.refresh();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    activateDashboards(route, types) {
        const { dashboardId } = route.params;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(dashboard => {
                route.data = { dashboard };
            }), map(() => true), catchError(() => {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    }
    getNamedDashboardOrCreate(name, defaultWidgets, context) {
        const children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(() => from(this.create({
            children,
            widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
        }, context, name))));
    }
    refreshTabs(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isNamed(dashboardMO)) {
                const tabToUpdate = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboardMO.id}`));
                const data = yield this.detail(dashboardMO);
                if (tabToUpdate) {
                    const { icon, priority, name } = data.c8y_Dashboard;
                    tabToUpdate.icon = icon;
                    tabToUpdate.priority = priority;
                    tabToUpdate.label = name;
                }
                this.tabs.refresh();
            }
        });
    }
    updateNavigatorItem(mo) {
        this.navigator.state.forEach(node => {
            if (node.path === `reports/${mo.id}`) {
                this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            const nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: `reports/${mo.id}`,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    }
    navigateToDashboard(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (/dashboard/.test(this.router.url)) {
                this.router.navigate(['..', dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
            else {
                this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
        });
    }
    canEditDashboard(mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    }
    isNamed(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}`).test(prop));
    }
    isReport(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${this.REPORT_PARTIAL_NAME}`).test(prop));
    }
    isDeviceType(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.DeviceType}${this.INDEX_SPLIT}`).test(prop));
    }
    getFilteredDashboardStyles(styleList) {
        return styleList.filter(c => STYLING_CLASS_PREFIXES.some((classPrefix) => c.startsWith(classPrefix)));
    }
    getStyling(styleList, styleName, defaultValue) {
        const styling = styleList.find(style => style && new RegExp(`-${styleName}$`, 'i').test(style.class));
        return styling ? styling.class : defaultValue;
    }
    mapWidgets(widgets) {
        return keyBy(widgets.map(widget => {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    }
    getDashboard$(dashboardIdOrName, dashboardType, mo) {
        const cache = this.cache.get(dashboardIdOrName);
        const dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        const cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(dashboard => this.cacheDashboard(dashboard)), filter(dashboard => dashboard.id === dashboardIdOrName ||
            has(dashboard, `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${dashboardIdOrName}`)));
        return cache ? of(cache) : cacheRefresh;
    }
    getTabs$(mo, dashboardType) {
        const dashboards = this.getContextDashboards(mo, dashboardType);
        this.setBaseContextRoute(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(map(dashboard => this.removeDashboardMoProperty(dashboard)), tap(dashboard => this.cacheDashboard(dashboard)), map(dashboard => this.createDashboardTab(dashboard)), toArray());
    }
    getContextDashboards$(requests) {
        return from(requests).pipe(mergeAll(), mergeMap(response => response.data));
    }
    setBaseContextRoute(mo, dashboardType) {
        const type = dashboardType.includes(ContextDashboardType.Device)
            ? ContextDashboardType.Device
            : ContextDashboardType.Group;
        this.currentContextRoute = `${type}/${mo.id}`;
    }
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    removeDashboardMoProperty(dashboard) {
        const dashboardCopy = cloneDeep(dashboard);
        const children = get(dashboardCopy, 'c8y_Dashboard.children');
        let updateDashboard = false;
        forEach(children, child => {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            this.update(dashboardCopy);
        }
        return dashboardCopy;
    }
    cacheDashboard(dashboard) {
        this.cache.set(dashboard.id, dashboard);
    }
    createDashboardTab(dashboard) {
        const { c8y_Dashboard: _dashboard, id } = dashboard;
        return {
            icon: _dashboard.icon,
            path: `${this.DASHBOARD_ROUTE_PATH}/${id}`,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    }
    clean(dashboard) {
        const jsonString = JSON.stringify(dashboard, (key, value) => {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    }
    getNamedDashboard(name) {
        return this.inventory.list({
            fragmentType: `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${name}`,
            pageSize: 1
        });
    }
    getContextDashboards(mo, dashboardType) {
        return dashboardType.map((type) => this.inventory.list({
            fragmentType: this.createDashboardFragment(mo, type),
            pageSize: this.DEFAULT_PAGESIZE
        }));
    }
    createDashboardFragment(mo, type) {
        let value;
        if (mo.c8y_Report) {
            value = `${this.REPORT_PARTIAL_NAME}${mo.id}`;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${type}${this.INDEX_SPLIT}${value}`;
    }
    getDashboardTypeFromViewContext(dashboardCfg, context) {
        let dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    }
    createFragmentKey(contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    }
    shouldSetGlobal(dashboard, context) {
        if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) || this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    }
}
ContextDashboardService.decorators = [
    { type: Injectable }
];
ContextDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: TabsService },
    { type: ModalService },
    { type: TranslateService },
    { type: Router },
    { type: UserService },
    { type: AppStateService },
    { type: NavigatorService },
    { type: Permissions }
];

class WidgetConfigComponent {
    constructor(widgetService, modal, contextDashboardService) {
        this.widgetService = widgetService;
        this.modal = modal;
        this.contextDashboardService = contextDashboardService;
        this.mode = 'select';
        this.searchChange$ = new Subject();
        this.searchTerm = '';
        this.styling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.defaultStyling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.possibleStyling = { WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES };
        this.isUpgrade = false;
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    get isEdit() {
        return !!this.current;
    }
    ngAfterContentInit() {
        this.components = this.widgetService.getWidgetDefinitions();
        if (this.selected) {
            this.current = clone(this.selected);
            this.select(this.selected, this.isEdit ? 'config' : 'select');
        }
        this.searchSub = this.searchChange$
            .pipe(switchMap((event) => iif(() => event.which !== 13, timer(200), timer(10))))
            .subscribe(() => {
            this.search();
        });
        if (this.mo.c8y_Dashboard.classes) {
            this.styling = this.setDefaultStyle(Object.assign(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses), (this.isEdit ? this.current.data.classes : {})));
            this.defaultStyling = this.setDefaultStyle(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses));
        }
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const hookSuccess = yield this.dynamicComponent.callLifeCycleHooks().toPromise();
            if (!hookSuccess) {
                return;
            }
            const { _x, _y, _width, _height } = this.selected.data;
            if (this.widgetConfig && this.widgetConfig.device) {
                const { id, name } = this.widgetConfig.device;
                this.widgetConfig.device = { id, name };
            }
            const widget = Object.assign({ _x,
                _y,
                _width,
                _height, config: omit(this.widgetConfig, 'settings'), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
            this._save(widget);
        });
    }
    select(cmp, mode = 'config') {
        cmp.data = cmp.data || {};
        this.selected = cmp;
        this.isUpgrade = !!get(cmp, 'data.settings.upgrade');
        this.contextDashboardService.formDisabled = this.isUpgrade;
        if (this.isEdit) {
            const { _x, _y, _width, _height, classes, title } = this.current.data;
            this.selected.data = Object.assign(Object.assign({}, this.selected.data), { _x, _y, _width, _height, classes, title });
        }
        this.widgetConfig = cloneDeep(this.composeWidgetConfig(this.selected, this.context));
        this.selected.data.title = this.selected.data.title || cmp.label;
        this.componentLabel = cmp.label;
        this.mode = mode;
    }
    search() {
        if (this.searchTerm.length > 0) {
            this.searchResult = this.components.filter(cmp => new RegExp(escapeRegExp(this.searchTerm.trim()), 'i').test(cmp.label));
        }
        else {
            this.resetSearch();
        }
    }
    resetSearch() {
        this.searchTerm = '';
        this.searchResult = undefined;
    }
    changeMode(mode) {
        this.mode = mode;
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getStyle(isPreview = false) {
        const cssClasses = {};
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
            cssClasses[this.styling.headerClass] = true;
        }
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
            cssClasses[this.styling.contentClass] = true;
        }
        if (isPreview) {
            cssClasses[`dashboard-theme-${this.defaultStyling.contentClass.split('-').pop()}`] = true;
        }
        return cssClasses;
    }
    ngOnDestroy() {
        this.contextDashboardService.formDisabled = true;
        if (this.searchSub) {
            this.searchSub.unsubscribe();
        }
    }
    isDashboardDefaultStyle(className) {
        const allClasses = Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(cssClass => ({ class: cssClass }));
        const style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
        return !!style;
    }
    setDefaultStyle(setClasses) {
        let contentClass = this.styling.contentClass;
        let headerClass = this.styling.headerClass;
        const styles = this.contextDashboardService.getFilteredDashboardStyles(Object.keys(setClasses))
            .map(c => c.split('-').pop());
        styles.forEach(styleName => {
            contentClass = this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
            headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
        });
        return { headerClass, contentClass };
    }
    composeWidgetConfig(selectedComponent, context = {}) {
        const setting = Object.assign({ settings: Object.assign(Object.assign(Object.assign(Object.assign({}, selectedComponent.data.settings), get(selectedComponent.data.settings, 'ng1.options')), get(selectedComponent.data, 'ng1.options')), { context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
        return this.applyTargetIfDeviceDashboard(setting);
    }
    applyTargetIfDeviceDashboard(widgetConfig) {
        const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
        if (isDeviceType) {
            widgetConfig.settings.hideTarget = isDeviceType;
            const noDeviceTarget = widgetConfig.settings.ng1
                ? widgetConfig.settings.ng1.options.noDeviceTarget
                : widgetConfig.settings.noDeviceTarget;
            if (!noDeviceTarget) {
                widgetConfig.device = {
                    id: this.context.id,
                    name: this.context.name
                };
            }
        }
        return widgetConfig;
    }
}
WidgetConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-widget-config',
                template: "<div class=\"modal-header separator\">\n  <h3 *ngIf=\"!current\" translate>Add widget</h3>\n  <h3 *ngIf=\"current\" translate>Edit widget</h3>\n</div>\n<form #configForm=\"ngForm\" name=\"form\">\n  <div class=\"c8y-modal-tabs\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button type=\"button\" class=\"btn\" (click)=\"changeMode('select'); (false)\">\n            <i c8yIcon=\"th-large\"></i> <span class=\"txt\" translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i> <span class=\"txt\" translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i> <span class=\"txt\" translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div\n      *ngIf=\"mode === 'select'\"\n      class=\"bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2;\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-clean\" (click)=\"resetSearch()\" type=\"button\">\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-body bg-gray-lighter\" *ngIf=\"mode === 'select'\">\n      <div class=\"card-group card-select m-b-0\" >\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          *ngFor=\"let cmp of searchResult || components\"\n          title=\"{{ cmp.description | translate }}\"\n        >\n          <div class=\"card p-8\" [class.active]=\"selected === cmp\" (click)=\"select(cmp)\">\n            <div\n              class=\"text-center p-8 m-b-8 flex-col flex-center\"\n              style=\"min-height: 170px; background-color: var(--body-background-color, #f2f3f4);\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <h1><i c8yIcon=\"file-image-o\"></i></h1>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img class=\"img-responsive\" [src]=\"cmp.previewImage\" />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"c8y-empty-state text-center\" *ngIf=\"searchResult && searchResult.length === 0\">\n          <h1 c8yIcon=\"search\"></h1>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p translate class=\"m-r-8\">Rephrase your search term.</p>\n            <button class=\"btn btn-primary\" (click)=\"resetSearch()\" translate>\n              Reset search\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div\n      class=\"modal-body\"\n      *ngIf=\"selected\"\n      [hidden]=\"mode !== 'config'\"\n      style=\"min-height: calc(100vh - 290px);\"\n    >\n      <h4 class=\"text-left\">\n        <strong>\n          {{ selected.label | translate }}\n        </strong>\n      </h4>\n      <p class=\"m-b-24\">\n        {{ selected.description | translate }}\n      </p>\n      <div class=\"row\">\n        <!-- change to col-sm-6 when preview is available -->\n        <div class=\"col-sm-12\">\n          <div class=\"legend form-block\" translate>Configuration</div>\n          <c8y-form-group>\n            <label for=\"widgetTitle\" translate>Title</label>\n            <input\n              id=\"widgetTitle\"\n              [(ngModel)]=\"selected.data.title\"\n              type=\"text\"\n              name=\"title\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n              required\n            />\n          </c8y-form-group>\n\n          <!-- This is an upgraded component for the device selector and still needs to be migrated -->\n          <c8y-dynamic-component\n            componentId=\"device.selector.legacy\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            *ngIf=\"!isUpgrade\"\n          ></c8y-dynamic-component>\n\n          <c8y-dynamic-component\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n        <!-- markup for the preview\n\n        <div class=\"col-sm-6 sticky-header-top-0\" >\n          <div class=\"legend form-block\">\n            Preview\n          </div>\n          <div class=\"bg-gray-lighter p-16\">\n            <div class=\"card card-dashboard m-b-0\">\n              <div class=\"card-header-actions\">\n                <div class=\"card-title text-uppercase\">{{ selected.data.title }}</div>\n                <div class=\"header-actions\">\n                  <div class=\"optionsBtn dropdow\" class=\"btnIcon dropdown-toggle c8y-dropdown\">\n                    <i c8yIcon=\"cog\"></i>\n                  </div>\n                </div>\n              </div>\n              <div class=\"card-inner-scroll\">\n                <div class=\"card-block\" style=\"min-height: 240px;\">\n                  include here the widget\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      --></div>\n    </div>\n\n    <div *ngIf=\"mode === 'style'\" class=\"modal-body p-t-0\" style=\"min-height: calc(100vh - 290px);\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          >\n          </c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview [previewClasses]=\"getStyle(true)\"></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      (click)=\"close()\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      translate\n      [disabled]=\"contextDashboardService.formDisabled || configForm.invalid\"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
            },] }
];
WidgetConfigComponent.ctorParameters = () => [
    { type: WidgetService },
    { type: BsModalRef },
    { type: ContextDashboardService }
];
WidgetConfigComponent.propDecorators = {
    dynamicComponent: [{ type: ViewChild, args: ['config', { static: false },] }]
};

class DeviceDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [
            ContextDashboardType.Device,
            ContextDashboardType.DeviceType
        ]);
    }
}
DeviceDashboardGuard.decorators = [
    { type: Injectable }
];
DeviceDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];

class GroupDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Group]);
    }
}
GroupDashboardGuard.decorators = [
    { type: Injectable }
];
GroupDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];

class WidgetPreviewComponent {
    constructor() {
        this.previewClasses = {
            'dashboard-theme-light': true,
            'panel-title-regular': true
        };
    }
}
WidgetPreviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-widget-preview',
                template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px;\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li class=\"active\" style=\"left: 16px;\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span></a\n          >\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 360px;\">\n      <div class=\"card-header-actions\" style=\"z-index: 8;\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <a href=\"\" (click)=\"(false)\" class=\"dropdown-toggle c8y-dropdown\">\n              <i c8yIcon=\"cog\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
WidgetPreviewComponent.propDecorators = {
    previewClasses: [{ type: Input }],
    tab: [{ type: Input }]
};

class DashboardDetailComponent {
    constructor(modal, iconList, contextDashboardService, navigatorService, permissionsService, translateService) {
        this.modal = modal;
        this.contextDashboardService = contextDashboardService;
        this.navigatorService = navigatorService;
        this.permissionsService = permissionsService;
        this.translateService = translateService;
        this.styling = {
            themeClass: 'dashboard-theme-light',
            headerClass: 'panel-title-regular'
        };
        this.possibleStyling = { DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
        this.DEFAULT_DASHBOARD_MARGIN = 12;
        this.DEFAULT_DASHBOARD_ICON = 'th';
        this.DEFAULT_DASHBOARD_PRIORITY = 10000;
        this.icons = iconList;
        this.filteredIcons = iconList;
    }
    get applyToDevicesOfTypeTitle() {
        const text = this.applyToDevicesOfTypePermitted ?
            gettext('Apply dashboard to all devices of type {{ type }}') :
            gettext('Apply dashboard to all devices of type {{ type }} (permission required)');
        return this.translateService.instant(text, { type: this.dashboard.deviceTypeValue });
    }
    ngAfterContentInit() {
        const defaultDashboardCfg = {
            name: this.isReport ? 'Report' : 'Dashboard',
            priority: this.DEFAULT_DASHBOARD_PRIORITY,
            icon: this.DEFAULT_DASHBOARD_ICON,
            deviceTypeValue: this.deviceType
        };
        if (this.dashboard) {
            this.current = clone(this.dashboard);
            this.setDashboardStyle();
        }
        else {
            this.dashboard = defaultDashboardCfg;
            this.dashboardDetailForm.form.markAsDirty();
        }
        this.setTitle();
        this.setupApplyToDevicesOfTypeCheckbox();
        this.navigatorNodes$ = this.navigatorService.items$;
        this.namePlaceholder = this.isReport ? gettext('e.g. My report') : gettext('e.g. My dashboard');
    }
    setTitle() {
        this.titleName = this.isReport ? gettext('report') : gettext('dashboard');
        this.titleAction = this.current ? gettext('Edit') : gettext('Add');
    }
    setupApplyToDevicesOfTypeCheckbox() {
        const rolesToCheck = ['ROLE_INVENTORY_CREATE', 'ROLE_INVENTORY_ADMIN'];
        this.applyToDevicesOfTypePermitted = this.permissionsService.hasAnyRole(rolesToCheck);
    }
    save() {
        this.dashboard.classes = { [this.styling.themeClass]: true };
        this.dashboard.widgetClasses = { [this.styling.headerClass]: true };
        this.dashboard.c8y_IsNavigatorNode = this.dashboard.c8y_IsNavigatorNode
            ? {}
            : this.current
                ? null
                : undefined;
        this._save(this.dashboard);
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getDashboardPreviewStyle() {
        const cssClasses = {};
        cssClasses[this.styling.headerClass] = true;
        cssClasses[this.styling.themeClass] = true;
        return cssClasses;
    }
    selectIcon(icon) {
        this.dashboard.icon = icon;
        this.dashboardDetailForm.form.markAsDirty();
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredIcons = this.icons.filter(val => search.test(val));
        }
        else {
            this.filteredIcons = this.icons;
        }
    }
    setDashboardStyle() {
        const allClasses = Object.assign(Object.assign({}, this.dashboard.classes), this.dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(c => c.split('-').pop());
        styles.forEach(styleName => {
            this.styling.themeClass = this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, this.styling.themeClass);
            this.styling.headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, this.styling.headerClass);
        });
    }
}
DashboardDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-dashboard-detail',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3>{{ titleAction | translate }}&nbsp;{{ titleName | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <h6 class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </h6>\n              <div class=\"d-flex\">\n                <c8y-form-group>\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      class=\"btn-default btn btn-gray\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px;\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn btn-clean\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      triggers=\"focus\"\n                      placement=\"right\"\n                      container=\"body\"\n                    >\n                      <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                    </button>\n                  </label>\n                  <input\n                    title=\"{{ 'Menu label' | translate }}\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboard.name\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label translate>Description</label>\n                <textarea\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigation' | translate }}</span>\n                      <button\n                        class=\"btn btn-clean\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      /><span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\"> {{ node.priority }} </span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn btn-clean\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!current && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span class=\"m-r-4\" translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                      Apply dashboard to all devices of type <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                    This dashboard is shared between all devices of the type <i>{{ type }}</i>.\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            >\n            </c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label>{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      title=\"{{ 'Widget margin' | translate }}\"\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    /><span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\">\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n"
            },] }
];
DashboardDetailComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: Array, decorators: [{ type: Inject, args: [ICON_LIST,] }] },
    { type: ContextDashboardService },
    { type: NavigatorService },
    { type: Permissions },
    { type: TranslateService }
];
DashboardDetailComponent.propDecorators = {
    dashboardDetailForm: [{ type: ViewChild, args: ['dashboardDetailForm', { static: true },] }]
};

class AppearanceSettingsComponent {
    constructor() {
        this.themeClass = 'dashboard-theme-light';
        this.headerClass = 'panel-title-regular';
        this.themeClassChange = new EventEmitter();
        this.headerClassChange = new EventEmitter();
        this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
        this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
    }
    themeClassClick(value) {
        value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
        this.themeClass = value;
        this.themeClassChange.emit(value);
    }
    headerClassClick(value) {
        value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
        this.headerClass = value;
        this.headerClassChange.emit(value);
    }
    resetToDefault(value, compareTo, defaultValue) {
        if (defaultValue && value === compareTo) {
            value = defaultValue;
        }
        return value;
    }
}
AppearanceSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-appearance-settings',
                template: "<h6 class=\"legend form-block\"><span translate>Layout</span></h6>\n<div class=\"row \">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradiocontentclass' + i\">\n          <span>{{ themeClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"themeClassItem.class === defaultThemeClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row a-i-center\"\n        style=\"box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradioheaderclass' + i\">\n          <span>{{ headerClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"headerClassItem.class === defaultHeaderClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            },] }
];
AppearanceSettingsComponent.propDecorators = {
    themeClass: [{ type: Input }],
    headerClass: [{ type: Input }],
    defaultThemeClass: [{ type: Input }],
    defaultHeaderClass: [{ type: Input }],
    themeClassChange: [{ type: Output }],
    headerClassChange: [{ type: Output }],
    possibleStylingTheme: [{ type: Input }],
    possibleStylingHeader: [{ type: Input }]
};

/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.inventory = inventory;
        this.gainsightService = gainsightService;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canDelete = true;
        this.isLoading = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
            yield this.contextDashboardService.update(this.mo);
            this.onLoad();
        });
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child) {
        return __awaiter(this, void 0, void 0, function* () {
            const { children } = child;
            const dashboardMO = this.mo;
            const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
            dashboardMO.c8y_Dashboard.children = mappedChildren;
            return this.contextDashboardService.update(dashboardMO);
        });
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.contextDashboardService.delete(this.mo);
            if (this.route.parent) {
                const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
                this.router.navigateByUrl(route);
            }
        });
    }
    /**
     * Edits the current dashboard
     */
    editDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            const isReport = this.contextDashboardService.isReport(this.mo);
            if (isReport) {
                const { name, icon, priority, c8y_IsNavigatorNode, description } = this.context;
                Object.assign(this.dashboard, { name, icon, priority, c8y_IsNavigatorNode, description });
            }
            const initialState = {
                dashboard: this.dashboard,
                deviceType: this.context.type,
                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                isReport
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardMO = cloneDeep(this.mo);
                const cfg = yield modal.result;
                if (isReport) {
                    const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                    dashboardMO.c8y_Dashboard = dashboardCfg;
                    this.updateReport({
                        id: this.context.id,
                        name,
                        icon,
                        c8y_IsNavigatorNode,
                        priority,
                        description
                    });
                }
                else {
                    dashboardMO.c8y_Dashboard = cfg;
                }
                yield this.contextDashboardService.update(dashboardMO);
                yield this.contextDashboardService.refreshTabs(dashboardMO);
                this.onLoad();
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const { x, y, width, height } = change.source;
            const component = yield this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
            if (!component) {
                this.addWidget();
                return;
            }
            yield this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }));
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected) {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                mo: this.mo,
                context: this.context.c8y_Report ? {} : this.context,
                selected: cloneDeep(selected)
            };
            const modal = this.bsModal.show(WidgetConfigComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const newWidget = yield modal.result;
                if (!this.mo.c8y_Dashboard.children) {
                    this.mo.c8y_Dashboard.children = {};
                }
                this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                this.contextDashboardService.update(this.mo);
                newWidget.classes = this.mergeWidgetClasses(newWidget);
                yield this.updateWidget(newWidget);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = findIndex(this.widgets, { id: widget.id });
            const isNew = index === -1;
            const mappedWidget = yield this.widgetService.mapLegacy(widget);
            if (isNew) {
                this.widgets.push(mappedWidget);
            }
            else {
                this.widgets.splice(index, 1, mappedWidget);
            }
        });
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change) {
        const { widget, source } = change;
        delete this.mo.c8y_Dashboard.children[widget.id];
        const removed = this.widgets.find(({ id }) => id === widget.id);
        this.widgets.splice(this.widgets.indexOf(removed), 1);
        const { dashboard } = source;
        dashboard.children = dashboard.children.filter(c => c.data.id !== widget.id);
        // using setTimeout to give the component the chance to remove it.
        setTimeout(() => {
            const child = new DashboardChildChange(source);
            child.collapseUpAll();
            this.updateDashboardChildren(child);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleIsFrozenFlag(settings);
            try {
                yield this.contextDashboardService.update(this.mo);
                if (this.dashboard.isFrozen) {
                    this.alert.success(gettext('Your dashboard is locked now.'));
                }
                else {
                    this.alert.success(gettext('Your dashboard is unlocked now.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.toggleIsFrozenFlag(settings);
            }
        });
    }
    updateReport(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventory.update(mo);
            this.context = res.data;
            if (this.route.parent) {
                this.route.parent.snapshot.data.contextData = this.context;
            }
            this.contextDashboardService.updateNavigatorItem(res.data);
        });
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            this.context = this.route.parent.snapshot.data.contextData;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    onLoad(trackExperience) {
        return __awaiter(this, void 0, void 0, function* () {
            const canEditDashboard = yield this.contextDashboardService.canEditDashboard(this.mo);
            this.disabled = !canEditDashboard;
            const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
            const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            const isReport = this.contextDashboardService.isReport(this.mo);
            const dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
            this.widgets = yield Promise.all(values(dashboardChildren).map(widget => {
                widget.classes = this.mergeWidgetClasses(widget);
                if (isDeviceType) {
                    this.applyDeviceTarget(widget);
                }
                if (trackExperience) {
                    this.gainsightService.triggerEvent('loadWidget', {
                        widgetName: widget.componentId || widget.name
                    });
                }
                return this.widgetService.mapLegacy(widget);
            }));
            this.class = Object.keys(dashboardClasses).join(' ');
            if (isReport) {
                this.addReportDashboardSettings();
            }
            this.isLoading = false;
        });
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
        return Object.assign({ card: true, 'card-dashboard': true, [kebabCase(widget.componentId || widget.name)]: true }, widgetClasses);
    }
    componentToWidget(child) {
        return Object.assign(Object.assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    }
    addReportDashboardSettings() {
        this.setTitle = true;
        this.title = this.context.name;
        this.breadcrumbSettings = {
            icon: 'th',
            label: 'Reports',
            path: 'reports'
        };
        this.canDelete = false;
    }
}
ContextDashboardComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-context-dashboard',
                template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                host: {
                    style: `
      display: block;
    `,
                    class: 'dashboard c8y-grid-dashboard'
                }
            },] }
];
ContextDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ContextDashboardService },
    { type: AlertService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
    { type: WidgetService },
    { type: BsModalService },
    { type: InventoryService },
    { type: GainsightService }
];
ContextDashboardComponent.propDecorators = {
    name: [{ type: Input }],
    childrenClasses: [{ type: Input }],
    context: [{ type: Input }],
    setTitle: [{ type: Input }],
    disabled: [{ type: Input }],
    defaultWidgets: [{ type: Input }],
    canDelete: [{ type: Input }],
    isLoading: [{ type: Input }],
    breadcrumbSettings: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }]
};

class DashboardActionsFactory {
    constructor(router, contextDashboardService, bsModal, permissions) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.permissions = permissions;
    }
    get(activatedRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = !activatedRoute.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            const canEditDashboard = yield this.isEnabled(context);
            return [
                {
                    label: gettext('Add dashboard'),
                    priority: 2500,
                    action: () => this.addDashboard(context),
                    disabled: !canEditDashboard
                }
            ];
        });
    }
    addDashboard(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (context.context === ViewContext.Device) {
                initialState = {
                    deviceType: context.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, context);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended emptys
            }
        });
    }
    isEnabled(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.contextData && context.contextData.id) {
                return ((yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context.contextData)) && [ViewContext.Device, ViewContext.Group].includes(context.context));
            }
            return (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']) &&
                [ViewContext.Device, ViewContext.Group].includes(context.context));
        });
    }
}
DashboardActionsFactory.decorators = [
    { type: Injectable }
];
DashboardActionsFactory.ctorParameters = () => [
    { type: Router },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: Permissions }
];

const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
const ɵ0$4 = defaultConfig;
class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                    multi: true
                },
                {
                    provide: HOOK_ACTION,
                    useClass: DashboardActionsFactory,
                    multi: true
                }
            ]
        };
    }
}
ContextDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0$4
                    }
                ]
            },] }
];

class ReportDashboardService {
    constructor(inventoryService, navigatorService) {
        this.inventoryService = inventoryService;
        this.navigatorService = navigatorService;
        this.queriesUtil = new QueriesUtil();
    }
    listReports(options = {}) {
        let query = { __has: 'c8y_Report' };
        if (options.filter) {
            query = this.queriesUtil.addAndFilter(query, options.filter);
        }
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            pageSize: options.pageSize || 50,
            withTotalPages: true
        };
        return this.inventoryService.list(filters);
    }
    createReport(reportCfg) {
        const report = {};
        Object.assign(report, reportCfg);
        Object.assign(report, { c8y_Report: {} });
        return this.inventoryService.create(report);
    }
    addReportNavigatorNode(report) {
        const node = new NavigatorNode({
            label: report.name,
            path: `reports/${report.id}`,
            icon: report.icon,
            priority: report.priority
        });
        this.navigatorService.add(node);
    }
    removeNavigatorNode(report) {
        this.navigatorService.state.forEach(node => {
            if (node.path === `reports/${report.id}`) {
                this.navigatorService.remove(node);
                return;
            }
        });
    }
}
ReportDashboardService.decorators = [
    { type: Injectable }
];
ReportDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: NavigatorService }
];

class ReportDashboardListComponent {
    constructor(inventoryService, contextDashboardService, bsModal, translateService, modal, alertService, reportDashboardService) {
        this.inventoryService = inventoryService;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.translateService = translateService;
        this.modal = modal;
        this.alertService = alertService;
        this.reportDashboardService = reportDashboardService;
        this.textFilter$ = new BehaviorSubject('');
        this.reload$ = new BehaviorSubject(null);
        this.reloading = false;
        this.reports$ = combineLatest(this.textFilter$.pipe(debounceTime(400), distinctUntilChanged()), this.reload$).pipe(tap(() => {
            this.reloading = true;
        }), switchMap(([text]) => this.loadReports(text)), tap(() => {
            this.reloading = false;
        }), shareReplay(1));
        this.DELETED_SUCCESS_MSG = gettext('Report deleted.');
    }
    loadReports(partialName) {
        return __awaiter(this, void 0, void 0, function* () {
            return partialName
                ? this.reportDashboardService.listReports({ filter: { name: `*${partialName}*` } })
                : this.reportDashboardService.listReports();
        });
    }
    add() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                isReport: true,
                isNamedDashboard: true
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                ignoreBackdropClick: true,
                initialState
            }).content;
            try {
                const cfg = yield modal.result;
                const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                const report = (yield this.reportDashboardService.createReport({
                    name,
                    icon,
                    c8y_IsNavigatorNode,
                    priority,
                    description
                })).data;
                yield this.contextDashboardService.create(dashboardCfg, undefined, `${this.contextDashboardService.REPORT_PARTIAL_NAME}${report.id}`);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.addReportNavigatorNode(report);
                }
                this.reload$.next();
                modal.close();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    delete(report) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const msg = gettext(`You are about to delete the report "{{ reportName }}". Do you want to proceed?`);
                yield this.modal.confirm(gettext('Delete report'), this.translateService.instant(msg, {
                    reportName: report.name
                }), Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                this.contextDashboardService
                    .getDashboard$(`report_${report.id}`, [ContextDashboardType.Named])
                    .pipe(take(1))
                    .subscribe(dashboard => this.contextDashboardService.delete(dashboard, false));
                yield this.inventoryService.delete(report.id);
                this.alertService.success(this.DELETED_SUCCESS_MSG);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.removeNavigatorNode(report);
                }
                this.reload$.next();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    update(report) {
        return __awaiter(this, void 0, void 0, function* () {
            report.c8y_IsNavigatorNode = report.c8y_IsNavigatorNode ? {} : null;
            yield this.inventoryService.update(report);
            report.c8y_IsNavigatorNode
                ? this.reportDashboardService.addReportNavigatorNode(report)
                : this.reportDashboardService.removeNavigatorNode(report);
        });
    }
}
ReportDashboardListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-report-dashboard-list',
                template: "<c8y-title>\n  <span translate>\n    Reports\n  </span>&nbsp;\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\"\n        *ngIf=\"(textFilter$ | async).length === 0\"\n      ></i>\n      <i class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Add report' | translate }}\"\n    (click)=\"add()\"\n    >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"loadReports()\"\n  >\n    <i [ngClass]=\"{ 'icon-spin': reloading }\"\n      c8yIcon=\"refresh\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n <!-- TODO: uncomment when help is available\n  <c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n-->\n\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li class=\"page-sticky-header hidden-xs hidden-sm\"\n      *ngIf=\"(reports$ | async)?.data.length > 0\"\n    >\n      <c8y-li-icon>\n        <i class=\"p-l-24\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-80\">\n        <div class=\"col-3\">\n          {{ 'Report' | translate }}\n        </div>\n        <div class=\"col-6\">\n          {{ 'Description' | translate }}\n        </div>\n        <div class=\"col-2\">\n          {{ 'Show in navigator' | translate }}\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n\n    <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n      <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n      <c8y-li-body class=\"content-flex-70\">\n        <div class=\"col-3\">\n          <button class=\"btn-clean\"\n            title=\"{{ report.name }}\"\n            routerLink=\"/reports/{{ report.id }}\"\n          >\n            <span class=\"text-truncate\">\n              {{ report.name }}\n            </span>\n          </button>\n        </div>\n        <div class=\"col-6\">\n          <small class=\"text-truncate-wrap\">\n            <em class=\"text-muted\"\n              *ngIf=\"!report.description; else showDescription\"\n            >\n              {{ 'No description available.' | translate }}\n            </em>\n            <ng-template #showDescription>\n              {{ report.description }}\n            </ng-template>\n          </small>\n        </div>\n        <div class=\"col-2\">\n          <span class=\"m-t-8 visible-xs\"></span>\n          <label class=\"c8y-switch c8y-switch--inline\"\n            title=\"{{ 'Show in navigator' | translate }}\"\n          >\n            <input\n              [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n              type=\"checkbox\"\n              (change)=\"update(report)\"\n            />\n            <span></span>\n            <span class=\"visible-xs\">\n              {{ 'Show in navigator' | translate }}\n            </span>\n          </label>\n        </div>\n        <div class=\"col-1 text-right hidden-xs\">\n          <button class=\"btn-dot showOnHover pull-right\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i class=\"text-danger\"\n            c8yIcon=\"minus-circle\"\n            ></i>\n          </button>\n        </div>\n        <div class=\"visible-xs p-t-8 text-right\">\n          <button class=\"btn-danger btn btn-xs\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i c8yIcon=\"trash\"></i>\n            Delete\n          </button>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"c8y-empty-state text-center m-t-40\"\n  *ngIf=\"(reports$ | async)?.data.length === 0\"\n  >\n  <h1 c8yIcon=\"c8y-reports\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>\n    There are no reports defined\n  </h3>\n  <p translate>\n    Add a report first.\n  </p>\n  <div>\n    <button class=\"btn btn-primary\"\n      (click)=\"add()\"\n      translate\n    >\n      Add report\n    </button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\">\n        User guide`KEEP_ORIGINAL`\n      </a>.\n      </small>\n  </p>\n</div>\n"
            },] }
];
ReportDashboardListComponent.ctorParameters = () => [
    { type: InventoryService },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: TranslateService },
    { type: ModalService },
    { type: AlertService },
    { type: ReportDashboardService }
];
ReportDashboardListComponent.propDecorators = {
    filter: [{ type: ViewChild, args: [FilterInputComponent, { static: false },] }]
};

/**
 * A hook to define the default widgets of the home dashboard in the cockpit app.
 */
const COCKPIT_HOME_DASHBOARD_CONFIG = new InjectionToken('CockpitHomeDashboardConfig');
/**
 * An array of widgets that is per default placed on the home dashboard of the cockpit app.
 */
const DEFAULT_COCKPIT_HOME_WIDGETS = [
    {
        name: 'cockpit.welcome.widget',
        title: gettext(''),
        _x: 0,
        _y: 0,
        _height: 5,
        _width: 12,
        classes: { 'panel-title-hidden': true }
    },
    {
        name: 'Asset Alarms',
        title: gettext('Active, critical alarms'),
        _x: 0,
        _y: 5,
        _height: 4,
        _width: 6
    },
    {
        name: 'Recent Alarms',
        title: gettext('Recent alarms'),
        _x: 0,
        _y: 9,
        _height: 4,
        _width: 6
    },
    {
        name: 'Map',
        title: gettext('Map'),
        _x: 6,
        _y: 5,
        _height: 8,
        _width: 6
    }
];

class CockpitDashboardComponent {
    constructor(appState, homeDashboardConfig) {
        this.appState = appState;
        this.homeDashboardConfig = homeDashboardConfig;
        this.defaultWidgets = DEFAULT_COCKPIT_HOME_WIDGETS;
        this.dashboardName = 'home-cockpit1';
        this.pageTitle = gettext('Home');
        this.applyDashboardConfig(this.homeDashboardConfig);
    }
    applyDashboardConfig(config) {
        if (!config) {
            return;
        }
        if (config.dashboardName) {
            this.dashboardName = config.dashboardName;
        }
        if (config.defaultWidgets) {
            this.defaultWidgets = config.defaultWidgets;
        }
        if (config.userSpecific && this.appState.currentUser.value) {
            this.dashboardName = `${this.appState.currentUser.value.userName.replace(/\./g, '__')}_${this.dashboardName}`;
        }
        if (config.pageTitle) {
            this.pageTitle = config.pageTitle;
        }
    }
}
CockpitDashboardComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-cockpit-dashboard',
                template: "<c8y-title>\n  {{ pageTitle | translate}}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n"
            },] }
];
CockpitDashboardComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COCKPIT_HOME_DASHBOARD_CONFIG,] }] }
];

class WelcomeToCockpit {
    constructor(tenantService, docs, router, navigator, applicationService) {
        this.tenantService = tenantService;
        this.docs = docs;
        this.router = router;
        this.navigator = navigator;
        this.applicationService = applicationService;
        this.quickLinks = [];
        this.CONFIGURATION_NODE = 'Configuration';
        this.TRIAL = 'TRIAL';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.tenantType = yield this.tenantService.currentTenantType();
            this.setMessage();
            this.navSubscription = this.navigator.items$.subscribe(nodes => {
                this.navNodes = nodes;
                this.configurationNode = nodes.find((node) => node.label === this.CONFIGURATION_NODE);
            });
            this.docsSubscription = this.docs.items$.subscribe(links => {
                this.links = links;
            });
            // <---TRIAL & REGULAR TENANT --->
            this.createConnectSmartphoneQuickLink();
            yield this.createQuicklinkRegisterDevice();
            // <--- TRIAL TENANT --->
            if (this.tenantType === this.TRIAL) {
                this.createQuicklinkUserGuide();
                return;
            }
            // <--- REGULAR TENANT --->
            this.createQuicklinkAddGroup();
            this.createQuickLinkReports();
            this.createQuickLinkExports();
            this.createQuicklinkSmartRules();
        });
    }
    ngOnDestroy() {
        if (this.docsSubscription && !this.docsSubscription.closed) {
            this.docsSubscription.unsubscribe();
        }
        if (this.navSubscription && !this.navSubscription.closed) {
            this.navSubscription.unsubscribe();
        }
    }
    setMessage() {
        if (this.tenantType === this.TRIAL) {
            this.welcomeMessage = gettext(`
        The Cockpit application allows you to build IoT applications in minutes.
        To get started, connect any device to the platform.
        If you do not have an IoT device to hand, you can start by connecting your smartphone.
        Click below to be guided through the process.
      `);
        }
        else {
            this.welcomeMessage = gettext(`
        The Cockpit application provides you with options to manage
        and monitor Internet of Things assets and data from business perspective.
      `);
        }
    }
    createQuicklinkAddGroup() {
        // comes from angularJS factory c8yQuickLinks
        const addGroup = this.links.find(link => link.label === 'Add group');
        if (addGroup) {
            this.quickLinks.push(addGroup);
        }
    }
    createConnectSmartphoneQuickLink() {
        // Provider in SensorPhoneModule defines the
        // 'Connect smartphone' quicklink.
        const connectSmartphone = this.links.find(link => link.label === 'Connect smartphone');
        if (connectSmartphone) {
            this.quickLinks.push(connectSmartphone);
        }
    }
    createQuickLinkReports() {
        const label = gettext('Reports');
        const reports = {
            icon: 'th',
            label,
            url: '/reports'
        };
        const reportsNode = this.findNavigatorNode(label, this.navNodes);
        if (reportsNode) {
            reports.click = () => {
                reportsNode.open = true;
                this.router.navigateByUrl(reports.url);
            };
            this.quickLinks.push(reports);
        }
    }
    createQuickLinkExports() {
        const label = gettext('Exports');
        const exports = {
            icon: 'c8y-reports',
            label,
            url: '/export'
        };
        if (this.isConfigChildNodeShown(label)) {
            exports.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(exports.url);
            };
            this.quickLinks.push(exports);
        }
    }
    createQuicklinkSmartRules() {
        const label = gettext('Smart rules');
        const smartRules = {
            icon: 'c8y-smart-rules',
            label,
            url: '/rules'
        };
        if (this.isConfigChildNodeShown('Global smart rules')) {
            smartRules.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(smartRules.url);
            };
            this.quickLinks.push(smartRules);
        }
    }
    createQuicklinkRegisterDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser();
            if (data) {
                const deviceManagement = data.find(app => app.contextPath === 'devicemanagement');
                if (deviceManagement) {
                    const deviceMgmtUrl = this.applicationService.getHref(deviceManagement);
                    const registerDevice = {
                        icon: 'c8y-device-connect',
                        label: gettext('Register device'),
                        click: () => window.open(`${deviceMgmtUrl}/#/deviceregistration`, '_self')
                    };
                    this.quickLinks.push(registerDevice);
                }
            }
        });
    }
    createQuicklinkUserGuide() {
        const userGuide = {
            icon: 'c8y-user',
            label: gettext('User guide'),
            url: '/users-guide/getting-started',
            click: () => {
                const userGuideURL = this.docs.getUserGuideLink(userGuide.url);
                window.open(userGuideURL);
            }
        };
        this.quickLinks.push(userGuide);
    }
    isConfigChildNodeShown(nodeName) {
        if (this.configurationNode && this.configurationNode.show) {
            const navNode = this.findNavigatorNode(nodeName, this.configurationNode.children);
            return !!navNode && navNode.show;
        }
        return false;
    }
    findNavigatorNode(nodeName, navNodes) {
        if (navNodes && navNodes.length > 0) {
            return navNodes.find((node) => node.label === nodeName);
        }
        return undefined;
    }
}
WelcomeToCockpit.decorators = [
    { type: Component, args: [{
                selector: 'c8y-welcome-to-cockpit',
                template: "<div class=\"welcome-widget welcome-cockpit\">\n  <div class=\"flex-row\">\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\n      <div class=\"card-group interact-grid tight-grid\">\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\n          <c8y-quick-link\n            (click)=\"link.click ? link.click() : false\"\n            [icon]=\"link.icon\"\n            [label]=\"link.label\"\n            class=\"card\"\n            c8yProductExperience\n            [actionName]=\"'welcomeWidgetClicked'\"\n            [actionData]=\"{ link: link.label }\"\n          >\n          </c8y-quick-link>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\n  </div>\n</div>\n"
            },] }
];
WelcomeToCockpit.ctorParameters = () => [
    { type: TenantService },
    { type: DocsService },
    { type: Router },
    { type: NavigatorService },
    { type: ApplicationService }
];
WelcomeToCockpit.propDecorators = {
    config: [{ type: Input }]
};

class LegacyWelcomeComponent {
    constructor(dashboard) {
        this.dashboard = dashboard;
    }
    restore() {
        this.dashboard.restore();
    }
}
LegacyWelcomeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-legacy-welcome-widget',
                template: "<div class=\"card-block\">\n  <p class=\"lead\" c8y-guide-docs>\n    <span>{{ 'Welcome to Cockpit' | translate }}.</span>\n    <span title=\"{{ 'Browse the manual' | translate }}\" class=\"cockpit-welcome-manual\" translate ngNonBindable\n      >Browse the manual <a c8y-guide-href=\"users-guide/cockpit/\">here</a>.</span\n    >\n  </p>\n  <p class=\"m-t-16\">\n    <em>{{ 'New default dashboard available.' | translate }} </em>\n  </p>\n  <button class=\"btn btn-primary btn-sm m-t-16\" (click)=\"restore(); (false)\" translate>\n    Get new dashboard\n  </button>\n</div>\n"
            },] }
];
LegacyWelcomeComponent.ctorParameters = () => [
    { type: ContextDashboardComponent, decorators: [{ type: Host }] }
];

// import for the preview img to get into the build.
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/welcome-widget-pr.png');
}
catch (ex) {
    // intended empty
}
const ɵ0$3 = [{ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' }], ɵ1$1 = [
    {
        id: 'cockpit.welcome.widget',
        label: gettext('Welcome to Cockpit'),
        description: gettext('Displays a welcome message for Cockpit'),
        component: WelcomeToCockpit,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 12,
                    _height: 6
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
], ɵ2 = [
    {
        id: 'Cockpit Welcome',
        label: gettext('Welcome to Cockpit'),
        description: gettext('Displays a welcome message for Cockpit'),
        component: LegacyWelcomeComponent,
        data: {
            settings: {
                noNewWidgets: true,
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
class CockpitDashboardModule {
    static config(config = {}) {
        return {
            ngModule: CockpitDashboardModule,
            providers: [
                {
                    provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
CockpitDashboardModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                imports: [
                    DocsModule,
                    CoreModule,
                    ContextDashboardModule.config({
                        routes: [
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [DeviceDashboardGuard],
                                context: ViewContext.Device
                            },
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [GroupDashboardGuard],
                                context: ViewContext.Group
                            },
                            {
                                path: '',
                                component: CockpitDashboardComponent
                            }
                        ]
                    }),
                    QuickLinkModule
                ],
                declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useValue: ɵ0$3,
                        multi: true
                    },
                    {
                        provide: HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ1$1
                    },
                    {
                        provide: HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ2
                    }
                ]
            },] }
];

class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService.create(dashboardCfg, undefined, `report_${reportId}`).then(() => true);
    }
}
ReportDashboardGuard.decorators = [
    { type: Injectable }
];
ReportDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];

class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    priority: 5
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority,
                        routerLinkExact: false
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
}
ReportDashboardNavigationFactory.decorators = [
    { type: Injectable }
];
ReportDashboardNavigationFactory.ctorParameters = () => [
    { type: NavigatorService },
    { type: InventoryService },
    { type: ReportDashboardService }
];

const ɵ0$2 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
class ReportDashboardModule {
}
ReportDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    CoreModule,
                    ContextDashboardModule,
                    RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ])
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0$2,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            },] }
];

class DeviceManagementHomeDashboardComponent {
    constructor(widgetService) {
        this.widgetService = widgetService;
        this.widgets = [];
        this.DEFAULT_HOME_WIDGETS = [
            {
                name: 'Asset Alarms',
                title: gettext('Active, critical alarms'),
                _x: 0,
                _y: 0,
                _height: 4,
                _width: 6
            },
            {
                name: 'Map',
                title: gettext('Map'),
                _x: 6,
                _y: 0,
                _height: 8,
                _width: 6
            }
        ];
    }
    ngOnInit() {
        this.DEFAULT_HOME_WIDGETS.map((widget) => __awaiter(this, void 0, void 0, function* () {
            yield this.widgetService
                .mapLegacy(widget)
                .then(transformedWidget => this.widgets.push(transformedWidget));
        }));
    }
}
DeviceManagementHomeDashboardComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-management-home-dashboard',
                template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [contextDashboard]=\"{}\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isDisabled: false,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            },] }
];
DeviceManagementHomeDashboardComponent.ctorParameters = () => [
    { type: WidgetService }
];

class DeviceInfoDashboardComponent {
    constructor(router, widgetService, translateService) {
        this.router = router;
        this.widgetService = widgetService;
        this.translateService = translateService;
        this.isLoading$ = new BehaviorSubject(true);
        this.DEVICE_INFO_WIDGETS = [
            {
                name: 'Alarm list',
                title: gettext('Active, critical alarms'),
                _x: 4,
                _y: 7,
                _height: 4,
                _width: 4,
                config: {
                    options: {
                        orderMode: 'ACTIVE_FIRST',
                        severity: { CRITICAL: true },
                        status: {
                            ACTIVE: true,
                            ACKNOWLEDGED: false,
                            CLEARED: false
                        },
                        types: []
                    }
                }
            },
            {
                name: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            },
            {
                name: 'Asset Properties',
                title: gettext('Device data'),
                config: {
                    options: {
                        properties: [],
                        allowDisplayAndEditKnownProperties: true,
                        hiddenPropertiesKeyPaths: ['owner']
                    }
                },
                _x: 0,
                _y: 7,
                _height: 8,
                _width: 4
            },
            {
                name: 'Data points graph',
                title: gettext('Device and communication'),
                _x: 4,
                _y: 2,
                _height: 5,
                _width: 8,
                config: {
                    interval: 'hours',
                    aggregation: 'NONE',
                    realtime: true,
                    datapointsInitialDisplayLimit: 3,
                    datapoints: [
                        {
                            fragment: 'c8y_Battery',
                            series: 'level',
                            label: this.translateService.instant('Battery: level'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e07b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'rssi',
                            label: this.translateService.instant('Signal: RSSI'),
                            unit: 'dBm',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#a7d0f1',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Used',
                            label: this.translateService.instant('Memory: used'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f75229',
                            __active: true
                        },
                        {
                            fragment: 'c8y_CPUMeasurement',
                            series: 'Workload',
                            label: this.translateService.instant('CPU: workload'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#b24f3e',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Upload',
                            label: this.translateService.instant('Network: upload'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#88c039',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RCSP',
                            label: this.translateService.instant('Signal: RCSP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSCP',
                            label: this.translateService.instant('Signal: RSCP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRP',
                            label: this.translateService.instant('Signal: RSRP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#43ba3b',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRQ',
                            label: this.translateService.instant('Signal: RSRQ'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#14b0b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ber',
                            label: this.translateService.instant('Signal: BER'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#44ff33',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ECN0',
                            label: this.translateService.instant('Signal: ECN0'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#873efa',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Download',
                            label: this.translateService.instant('Network: download'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f27a45',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Total',
                            label: this.translateService.instant('Memory: total'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#dadd8c',
                            __active: true
                        }
                    ],
                    alarmsEventsConfigs: [
                        {
                            label: 'c8y_LocationUpdate',
                            timelineType: 'EVENT',
                            color: '#6f6cd0',
                            filters: {
                                type: 'c8y_LocationUpdate'
                            },
                            __active: true
                        },
                        {
                            label: 'c8y_UnavailabilityAlarm',
                            timelineType: 'ALARM',
                            color: '#375bf2',
                            filters: {
                                type: 'c8y_UnavailabilityAlarm'
                            },
                            __active: true
                        }
                    ]
                },
                transformConfigWithContext(config, context, c8yDevices) {
                    'ngInject';
                    return c8yDevices
                        .getSupportedSeries(context.id)
                        .then(supportedMeasurementSeries => config.datapoints.filter(configMeasurement => supportedMeasurementSeries.find(supportedSeries => supportedSeries.fragment === configMeasurement.fragment &&
                        supportedSeries.series === configMeasurement.series)))
                        .then(datapoints => (Object.assign(Object.assign({}, config), { datapoints })));
                }
            },
            {
                name: 'deviceStatusWidget',
                title: gettext('Device status'),
                _x: 0,
                _y: 2,
                _height: 5,
                _width: 4
            },
            {
                name: 'deviceGroupAssignmentWidget',
                title: gettext('Group assignment'),
                _x: 8,
                _y: 7,
                _height: 4,
                _width: 4
            },
            {
                componentId: 'assetNotesWidget',
                title: gettext('Message of the day'),
                classes: { 'panel-title-hidden': true },
                _x: 0,
                _y: 0,
                _height: 2,
                _width: 12
            },
            {
                componentId: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            }
        ];
        this.currentContext$ = this.router.parent.data.pipe(map(({ contextData }) => {
            this.title = contextData.name;
            return contextData;
        }));
        this.widgets$ = from(this.DEVICE_INFO_WIDGETS).pipe(mergeMap(widget => this.widgetService.mapLegacy(widget)), map(widget => (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: this.router.parent.snapshot.data.contextData }) }))), toArray());
        this.widgetsSubscription = combineLatest([this.widgets$, this.currentContext$]).subscribe(() => {
            this.isLoading$.next(false);
        });
    }
    ngOnDestroy() {
        this.widgetsSubscription.unsubscribe();
    }
}
DeviceInfoDashboardComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-info-dashboard-dashboard',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [context]=\"currentContext$ | async\"\n  [widgets]=\"widgets$ | async\"\n  [settings]=\"{\n    isLoading: isLoading$ | async,\n    isDisabled: true,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            },] }
];
DeviceInfoDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: WidgetService },
    { type: TranslateService }
];

const ɵ0$1 = {
    path: '',
    component: DeviceManagementHomeDashboardComponent
}, ɵ1 = [{ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' }];
class DeviceManagementHomeDashboardModule {
}
DeviceManagementHomeDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DeviceManagementHomeDashboardComponent],
                imports: [CommonModule, CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceManagementHomeDashboardComponent],
                providers: [
                    {
                        provide: HOOK_ONCE_ROUTE,
                        useValue: ɵ0$1,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            },] }
];

const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'device-info',
        component: DeviceInfoDashboardComponent,
        label: gettext('Info'),
        priority: 10000,
        icon: 'asterisk'
    }
];
class DeviceInfoDashboardModule {
}
DeviceInfoDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DeviceInfoDashboardComponent],
                imports: [CommonModule, CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceInfoDashboardComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AppearanceSettingsComponent, COCKPIT_HOME_DASHBOARD_CONFIG, CONTEXT_DASHBOARD_CONFIG, CockpitDashboardComponent, CockpitDashboardModule, ContextDashboardComponent, ContextDashboardModule, ContextDashboardService, ContextDashboardType, DASHBOARD_THEME_CLASSES, DEFAULT_COCKPIT_HOME_WIDGETS, DashboardActionsFactory, DashboardDetailComponent, DeviceDashboardGuard, DeviceInfoDashboardComponent, DeviceInfoDashboardModule, DeviceManagementHomeDashboardComponent, DeviceManagementHomeDashboardModule, GroupDashboardGuard, LegacyWelcomeComponent, ReportDashboardGuard, ReportDashboardListComponent, ReportDashboardModule, ReportDashboardNavigationFactory, ReportDashboardService, STYLING_CLASS_PREFIXES, WIDGET_CONTENT_CLASSES, WIDGET_HEADER_CLASSES, WelcomeToCockpit, WidgetConfigComponent, WidgetPreviewComponent, WidgetService, ɵ2 };
//# sourceMappingURL=c8y-ngx-components-context-dashboard.js.map
