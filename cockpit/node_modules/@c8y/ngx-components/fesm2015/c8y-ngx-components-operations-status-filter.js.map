{"version":3,"file":"c8y-ngx-components-operations-status-filter.js","sources":["../../operations/status-filter/status-filter.component.ts","../../operations/status-filter/status-filter.module.ts","../../operations/status-filter/c8y-ngx-components-operations-status-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { IStatusOption } from './status-option.model';\n\n@Component({\n  selector: 'c8y-status-filter',\n  templateUrl: './status-filter.component.html'\n})\nexport class StatusFilterComponent {\n  statusOptions: Array<{ selected: boolean; option: IStatusOption }> = [];\n\n  /** List of filter options to be displayed */\n  @Input() set options(options: IStatusOption[]) {\n    this.statusOptions = (options || []).map(option => ({ selected: false, option }));\n  }\n\n  /**\n   * Allows multiple options to be active simultaneosly.\n   */\n  @Input('multiple') set _multiple(multiple: boolean) {\n    this.multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Display the filter as a small button group */\n  @Input('small') set _small(small: boolean) {\n    this.small = coerceBooleanProperty(small);\n  }\n\n  @HostBinding('class.btn-group-sm') get displaySmall() {\n    return this.small;\n  }\n\n  @Output() onFilterChanged: EventEmitter<IStatusOption[]> = new EventEmitter();\n\n  isAllButtonSelected: boolean = true;\n\n  private multiple: boolean;\n  private small: boolean;\n\n  changeFilter(option: { selected: boolean; option: IStatusOption }) {\n    this.isAllButtonSelected = false;\n    let emitNeeded: boolean = false;\n\n    if (this.multiple) {\n      option.selected = !option.selected;\n      emitNeeded = true;\n    } else if (!option.selected) {\n      option.selected = true;\n      this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));\n      emitNeeded = true;\n    }\n\n    if (emitNeeded) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  removeFilter() {\n    this.isAllButtonSelected = true;\n    this.statusOptions.forEach(op => (op.selected = false));\n\n    this.emitSelectedOptions();\n  }\n\n  /**\n   * Allows the filter to be initalliy displayed with some preset filters.\n   *\n   * @param filters An `IStatusOption` array defining filter options to be preset.\n   * @param emit  (optional) If `true` component will emit `onFilterChanged` event.\n   */\n  preset(filters: IStatusOption[], emit: boolean = true) {\n    let firstSelected: boolean = false;\n\n    this.statusOptions.forEach(option => (option.selected = false));\n\n    this.statusOptions\n      .filter(option => (filters || []).map(o => o.label).includes(option.option.label))\n      .filter(() => {\n        // only first option passed will be set in single selection mode\n        const include: boolean = this.multiple || !firstSelected;\n        if (include) {\n          firstSelected = true;\n        }\n\n        return include;\n      })\n      .forEach(option => (option.selected = true));\n\n    this.isAllButtonSelected = !(filters && filters.length);\n\n    if (emit) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  reset() {\n    this.removeFilter();\n  }\n\n  activeFilters(): IStatusOption[] {\n    return this.statusOptions.filter(option => option.selected).map(option => option.option);\n  }\n\n  isFilterApplied(): boolean {\n    return this.statusOptions.some(option => option.selected);\n  }\n\n  private emitSelectedOptions() {\n    this.onFilterChanged.emit(\n      this.statusOptions.filter(option => option.selected).map(option => option.option)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { StatusFilterComponent } from './status-filter.component';\n\n/**\n * This module provides a component for selecting status filter.\n */\n@NgModule({\n  imports: [CoreModule, TooltipModule, BsDropdownModule],\n  declarations: [StatusFilterComponent],\n  entryComponents: [StatusFilterComponent],\n  exports: [StatusFilterComponent]\n})\nexport class StatusFilterModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}