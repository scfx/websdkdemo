import { __decorate, __awaiter } from 'tslib';
import { EventEmitter, Component, Output, ViewChildren, Input, ViewChild, NgModule } from '@angular/core';
import { gettext, ListItemRadioComponent, memoize, Status, ModalService, CoreModule, FormsModule } from '@c8y/ngx-components';
import { RepositoryType, RepositoryService, RepositoryModule } from '@c8y/ngx-components/repository';
import { TranslateService } from '@ngx-translate/core';
import { get, uniqWith, isEqual, property, uniq, has } from 'lodash-es';
import { BehaviorSubject, combineLatest, from } from 'rxjs';
import { switchMap, shareReplay, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { ReactiveFormsModule } from '@angular/forms';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationType, baseUrl, HOOK_LIST_BULK_TYPE } from '@c8y/ngx-components/operations/bulk-operations-service';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components/repository';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@c8y/ngx-components';
import * as ɵngcc6 from '@c8y/ngx-components/operations/bulk-operation-stepper';

function SelectSoftwareStepComponent_i_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 22);
} }
function SelectSoftwareStepComponent_i_16_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 23);
    ɵngcc0.ɵɵlistener("click", function SelectSoftwareStepComponent_i_16_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.textFilter$.next(""); });
    ɵngcc0.ɵɵelementEnd();
} }
function SelectSoftwareStepComponent_c8y_li_27_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 24);
    ɵngcc0.ɵɵlistener("click", function SelectSoftwareStepComponent_c8y_li_27_Template_c8y_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const deviceType_r6 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); ctx_r7.selectedDeviceType = deviceType_r6; return ctx_r7.deviceType$.next(deviceType_r6.name); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 25);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceType_r6 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("active", ctx_r2.selectedDeviceType === deviceType_r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", deviceType_r6.name)("pattern", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r2.deviceType$));
} }
function SelectSoftwareStepComponent_c8y_li_36_span_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r9.c8y_Filter == null ? null : software_r9.c8y_Filter.type, " ");
} }
function SelectSoftwareStepComponent_c8y_li_36_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵelementStart(1, "em", 38);
    ɵngcc0.ɵɵtext(2, "Undefined`device type`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectSoftwareStepComponent_c8y_li_36_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 39);
    ɵngcc0.ɵɵelementStart(1, "span", 40);
    ɵngcc0.ɵɵtext(2, "Legacy");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectSoftwareStepComponent_c8y_li_36_span_17_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 41);
    ɵngcc0.ɵɵelement(2, "i", 42);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 47);
    ɵngcc0.ɵɵelementStart(1, "span", 40);
    ɵngcc0.ɵɵtext(2, "No versions");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 41);
    ɵngcc0.ɵɵelementStart(1, "span", 40);
    ɵngcc0.ɵɵtext(2, "1 version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { count: a0 }; };
function SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 41);
    ɵngcc0.ɵɵelementStart(1, "span", 48);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtext(3, "{{ count }} versions");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r9 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(3, _c0, ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r21.getBaseVersionsCount$(software_r9)) || ""));
} }
function SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 43);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_3_Template, 3, 0, "ng-template", 44);
    ɵngcc0.ɵɵtemplate(4, SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_4_Template, 3, 0, "ng-template", 45);
    ɵngcc0.ɵɵtemplate(5, SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_ng_template_5_Template, 4, 5, "ng-template", 46);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r9 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngPlural", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r18.getBaseVersionsCount$(software_r9)));
} }
function SelectSoftwareStepComponent_c8y_li_36_span_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, SelectSoftwareStepComponent_c8y_li_36_span_17_span_1_Template, 3, 0, "span", 36);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, SelectSoftwareStepComponent_c8y_li_36_span_17_span_3_Template, 6, 3, "span", 36);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r14.getBaseVersionsCount$(software_r9)) === null);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r14.getBaseVersionsCount$(software_r9)) !== null);
} }
function SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 54);
    ɵngcc0.ɵɵelementStart(2, "select", 55);
    ɵngcc0.ɵɵlistener("ngModelChange", function SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_div_11_Template_select_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const option_r25 = ɵngcc0.ɵɵnextContext().$implicit; return option_r25.action = $event; })("change", function SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_div_11_Template_select_change_2_listener() { ɵngcc0.ɵɵrestoreView(_r29); const option_r25 = ɵngcc0.ɵɵnextContext().$implicit; const software_r9 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.emitSoftware({ option: option_r25, software: software_r9 }); });
    ɵngcc0.ɵɵelementStart(3, "option", 56);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "option", 56);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r25 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", option_r25.action);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngValue", "install");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "Install/update`software`"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngValue", "delete");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 7, "Remove`software`"));
} }
function SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_Template(rf, ctx) { if (rf & 1) {
    const _r35 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-radio", 49);
    ɵngcc0.ɵɵlistener("onSelect", function SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_Template_c8y_li_radio_onSelect_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r35); const option_r25 = restoredCtx.$implicit; const software_r9 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.selectSoftware({ option: option_r25, software: software_r9 }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "c8y-li-body", 50);
    ɵngcc0.ɵɵelementStart(3, "div", 51);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 28);
    ɵngcc0.ɵɵelementStart(6, "div", 29);
    ɵngcc0.ɵɵelementStart(7, "span", 52);
    ɵngcc0.ɵɵtext(8, " File ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "span");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_div_11_Template, 10, 9, "div", 53);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r25 = ctx.$implicit;
    const software_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", software_r9.id);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r25.c8y_Software.version, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", option_r25.c8y_Software.url);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(option_r25.c8y_Software.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r25.id === software_r9.selectedId);
} }
function SelectSoftwareStepComponent_c8y_li_36_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 27);
    ɵngcc0.ɵɵelementStart(4, "div", 28);
    ɵngcc0.ɵɵelementStart(5, "div", 29);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 30);
    ɵngcc0.ɵɵelementStart(8, "div", 29);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementStart(10, "span", 31);
    ɵngcc0.ɵɵtext(11, " Device type ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, SelectSoftwareStepComponent_c8y_li_36_span_12_Template, 2, 1, "span", 32);
    ɵngcc0.ɵɵtemplate(13, SelectSoftwareStepComponent_c8y_li_36_ng_template_13_Template, 3, 0, "ng-template", null, 33, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 34);
    ɵngcc0.ɵɵtemplate(16, SelectSoftwareStepComponent_c8y_li_36_span_16_Template, 3, 0, "span", 35);
    ɵngcc0.ɵɵtemplate(17, SelectSoftwareStepComponent_c8y_li_36_span_17_Template, 5, 6, "span", 36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "c8y-li-collapse");
    ɵngcc0.ɵɵelementStart(19, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(20, SelectSoftwareStepComponent_c8y_li_36_c8y_li_20_Template, 12, 5, "c8y-li", 37);
    ɵngcc0.ɵɵpipe(21, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const software_r9 = ctx.$implicit;
    const _r11 = ɵngcc0.ɵɵreference(14);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", software_r9.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r9.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate2("title", "", ɵngcc0.ɵɵpipeBind1(9, 9, "Device type"), ": ", ctx_r3.getDeviceTypeTitle(software_r9), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", software_r9.c8y_Filter == null ? null : software_r9.c8y_Filter.type)("ngIfElse", _r11);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isLegacy(software_r9));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.isLegacy(software_r9));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(21, 11, ctx_r3.getVersions(software_r9)));
} }
const _c1 = function (a0) { return { "dd-low": a0 }; };
function ConfirmSoftwareSelectionStepComponent_ng_container_14_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const deviceType_r6 = ctx.$implicit;
    const last_r7 = ctx.last;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2("", deviceType_r6, "", last_r7 ? "" : ", ", "");
} }
function ConfirmSoftwareSelectionStepComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ConfirmSoftwareSelectionStepComponent_ng_container_14_span_1_Template, 2, 2, "span", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.deviceTypes);
} }
function ConfirmSoftwareSelectionStepComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "em", 13);
    ɵngcc0.ɵɵtext(1, "Undefined`device type`");
    ɵngcc0.ɵɵelementEnd();
} }
function ConfirmSoftwareSelectionStepComponent_div_17_c8y_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 15);
    ɵngcc0.ɵɵelementStart(4, "div", 16);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 17);
    ɵngcc0.ɵɵelementStart(7, "span", 18);
    ɵngcc0.ɵɵtext(8, " Version ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "span");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const selectedItem_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", selectedItem_r9.software.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", selectedItem_r9.software.name, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", selectedItem_r9.version.c8y_Software.version, " ");
} }
function ConfirmSoftwareSelectionStepComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Installations/updates`software`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(5, ConfirmSoftwareSelectionStepComponent_div_17_c8y_li_5_Template, 11, 3, "c8y-li", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.selectedToInstall);
} }
function ConfirmSoftwareSelectionStepComponent_div_18_c8y_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 15);
    ɵngcc0.ɵɵelementStart(4, "div", 19);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 17);
    ɵngcc0.ɵɵelementStart(7, "span", 20);
    ɵngcc0.ɵɵtext(8, " Version ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "span");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const selectedItem_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", selectedItem_r11.software.name, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", selectedItem_r11.version.c8y_Software.version, " ");
} }
function ConfirmSoftwareSelectionStepComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵtext(3, "Removals`software`");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(5, ConfirmSoftwareSelectionStepComponent_div_18_c8y_li_5_Template, 11, 2, "c8y-li", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.selectedToDelete);
} }
function StepperBulkTypeSoftwareComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-select-software-step", 2);
    ɵngcc0.ɵɵlistener("software", function StepperBulkTypeSoftwareComponent_ng_container_1_Template_c8y_select_software_step_software_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onSoftwareSelected($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function StepperBulkTypeSoftwareComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-confirm-software-selection-step", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectedItems", ctx_r1.selectedSoftware);
} }
class SelectSoftwareStepComponent {
    constructor(repositoryService, translate) {
        this.repositoryService = repositoryService;
        this.translate = translate;
        this.software = new EventEmitter();
        this.textFilter$ = new BehaviorSubject('');
        this.deviceType$ = new BehaviorSubject('');
        this.deviceTypes = [];
        this.selectedDeviceType = { name: '' };
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software$ = combineLatest(this.textFilter$, this.deviceType$).pipe(switchMap(([name, deviceType]) => this.getSoftware(name, deviceType)), shareReplay(1));
        this.NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');
        this.loadDeviceTypes();
    }
    getBaseVersionsCount$(software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    }
    getVersions(software) {
        return this.repositoryService.listAllVersions(software);
    }
    getDeviceTypeTitle(software) {
        return get(software, 'c8y_Filter.type', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));
    }
    loadDeviceTypes() {
        this.deviceTypeSubscription = this.deviceType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(searchStr => {
            const query = { 'c8y_Filter.type': `*${searchStr}*` };
            return from(this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query }));
        }))
            .subscribe(result => {
            const { data } = result;
            this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })), isEqual);
        });
    }
    ngOnDestroy() {
        this.deviceTypeSubscription.unsubscribe();
    }
    resetSelection() {
        this.radioButtons.map(radio => radio.reset());
    }
    selectSoftware({ option, software }) {
        software.selectedId = option.id;
        option.action = 'install';
        this.emitSoftware({ option, software });
    }
    emitSoftware({ option, software }) {
        const emitData = Object.assign({}, { software }, { version: option }, { action: option.action });
        this.software.emit(emitData);
    }
    getSoftware(name, deviceType) {
        const query = name ? { name: `*${name}*` } : {};
        if (deviceType) {
            query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: `c8y_Filter.type` } }];
        }
        return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query });
    }
}
SelectSoftwareStepComponent.ɵfac = function SelectSoftwareStepComponent_Factory(t) { return new (t || SelectSoftwareStepComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RepositoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
SelectSoftwareStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectSoftwareStepComponent, selectors: [["c8y-select-software-step"]], viewQuery: function SelectSoftwareStepComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(ListItemRadioComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radioButtons = _t);
    } }, outputs: { software: "software" }, decls: 38, vars: 39, consts: [[1, "card-block", "p-t-0", "overflow-visible", "flex-no-shrink", "separator-bottom", "col-xs-12"], [1, "row", "p-b-16"], [1, "col-md-8", "col-md-offset-2", "col-lg-6", "col-lg-offset-3"], [1, "text-center", "m-b-16"], [1, "row"], [1, "col-md-6"], [1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "title", "placeholder", "ngModel", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "filter", 4, "ngIf"], ["c8yIcon", "times", "class", "text-muted", 3, "click", 4, "ngIf"], [1, "col-xs-12", "p-b-8", "visible-xs", "visible-sm"], [1, "m-0"], ["name", "deviceType", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "active", "click", 4, "ngFor", "ngForOf"], ["name", "notExisting", 3, "text"], [1, "col-xs-12", "flex-grow", "no-gutter"], [1, "card-inner-scroll", "fit-h"], [1, "card-block", "p-t-0", "p-b-0"], [3, "ngClass"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["c8yIcon", "filter"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "active", "click"], [3, "text", "pattern"], ["c8yIcon", "c8y-tools"], [1, "content-flex-60"], [1, "col-5"], [1, "text-truncate", 3, "title"], [1, "col-3"], ["translate", "", 1, "text-label-small", "m-r-8"], [4, "ngIf", "ngIfElse"], ["noType", ""], [1, "col-2"], ["class", "label label-warning flex-item-right-sm", 4, "ngIf"], [4, "ngIf"], [4, "c8yFor", "c8yForOf"], ["translate", "", 1, "text-muted"], [1, "label", "label-warning", "flex-item-right-sm"], ["translate", ""], [1, "label", "label-info"], ["c8yIcon", "circle-o-notch", 1, "icon-spin"], [3, "ngPlural"], ["ngPluralCase", "=0"], ["ngPluralCase", "=1"], ["ngPluralCase", "other"], [1, "label", "label-default", "flex-item-right-sm"], ["translate", "", 3, "translateParams"], [3, "name", "onSelect"], [1, "content-flex-40", "p-r-16"], [1, "col-4"], ["translate", "", 1, "text-label-small", "m-r-4"], ["class", "col-3", 4, "ngIf"], [1, "c8y-select-wrapper", "d-inline-block", 2, "margin", "-4px 0"], ["id", "action", 1, "form-control", "input-sm", 3, "ngModel", "ngModelChange", "change"], [3, "ngValue"]], template: function SelectSoftwareStepComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectSoftwareStepComponent_Template_input_ngModelChange_9_listener($event) { return ctx.textFilter$.next($event); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "span", 8);
        ɵngcc0.ɵɵtemplate(14, SelectSoftwareStepComponent_i_14_Template, 1, 0, "i", 9);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵtemplate(16, SelectSoftwareStepComponent_i_16_Template, 1, 0, "i", 10);
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(18, "div", 11);
        ɵngcc0.ɵɵelementStart(19, "div", 5);
        ɵngcc0.ɵɵelementStart(20, "c8y-form-group", 12);
        ɵngcc0.ɵɵelementStart(21, "c8y-typeahead", 13);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectSoftwareStepComponent_Template_c8y_typeahead_ngModelChange_21_listener($event) { return ctx.selectedDeviceType = $event; })("onSearch", function SelectSoftwareStepComponent_Template_c8y_typeahead_onSearch_21_listener($event) { return ctx.deviceType$.next($event); });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementStart(23, "c8y-li", 14);
        ɵngcc0.ɵɵlistener("click", function SelectSoftwareStepComponent_Template_c8y_li_click_23_listener() { ctx.selectedDeviceType = { name: "" }; return ctx.deviceType$.next(""); });
        ɵngcc0.ɵɵelementStart(24, "span");
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(27, SelectSoftwareStepComponent_c8y_li_27_Template, 3, 5, "c8y-li", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "c8y-messages");
        ɵngcc0.ɵɵelement(29, "c8y-message", 16);
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "div", 17);
        ɵngcc0.ɵɵelementStart(32, "div", 18);
        ɵngcc0.ɵɵelementStart(33, "div", 19);
        ɵngcc0.ɵɵelementStart(34, "c8y-list-group", 20);
        ɵngcc0.ɵɵpipe(35, "async");
        ɵngcc0.ɵɵtemplate(36, SelectSoftwareStepComponent_c8y_li_36_Template, 22, 13, "c8y-li", 21);
        ɵngcc0.ɵɵpipe(37, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        let tmp_12_0;
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 15, "Select software"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 17, "Filter software\u2026"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 19, "Filter software\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ɵngcc0.ɵɵpipeBind1(12, 21, ctx.textFilter$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(15, 23, ctx.textFilter$).length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(17, 25, ctx.textFilter$).length > 0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(22, 27, "Type to filter device types\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedDeviceType)("allowFreeEntries", false);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(26, 29, "All device types"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.deviceTypes);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("text", ɵngcc0.ɵɵpipeBind1(30, 31, "Select one of the existing device types."));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(37, _c1, ((tmp_12_0 = ɵngcc0.ɵɵpipeBind1(35, 33, ctx.software$)) == null ? null : tmp_12_0.data.length) < 10));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ɵngcc0.ɵɵpipeBind1(37, 35, ctx.software$))("c8yForLoadMore", "auto");
    } }, directives: [ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc5.FormGroupComponent, ɵngcc5.TypeaheadComponent, ɵngcc5.ListItemComponent, ɵngcc4.NgForOf, ɵngcc5.MessagesComponent, ɵngcc5.MessageDirective, ɵngcc5.ListGroupComponent, ɵngcc4.NgClass, ɵngcc5.ForOfDirective, ɵngcc5.IconDirective, ɵngcc5.HighlightComponent, ɵngcc5.ListItemIconComponent, ɵngcc5.ListItemBodyComponent, ɵngcc5.C8yTranslateDirective, ɵngcc5.ListItemCollapseComponent, ɵngcc4.NgPlural, ɵngcc4.NgPluralCase, ɵngcc5.ListItemRadioComponent, ɵngcc3.SelectControlValueAccessor, ɵngcc3.NgSelectOption, ɵngcc3.ɵNgSelectMultipleOption], pipes: [ɵngcc5.C8yTranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
SelectSoftwareStepComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: TranslateService }
];
SelectSoftwareStepComponent.propDecorators = {
    software: [{ type: Output }],
    radioButtons: [{ type: ViewChildren, args: [ListItemRadioComponent,] }]
};
__decorate([
    memoize(property('id'))
], SelectSoftwareStepComponent.prototype, "getBaseVersionsCount$", null);
__decorate([
    memoize(property('id'))
], SelectSoftwareStepComponent.prototype, "getVersions", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectSoftwareStepComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-select-software-step',
                template: "<div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select software' | translate }}</h4>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              type=\"search\"\n              class=\"form-control\"\n              title=\"{{ 'Filter software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                c8yIcon=\"times\"\n                class=\"text-muted\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-12 p-b-8 visible-xs visible-sm\"></div>\n        <div class=\"col-md-6\">\n          <c8y-form-group class=\"m-0\">\n            <c8y-typeahead\n              name=\"deviceType\"\n              [(ngModel)]=\"selectedDeviceType\"\n              placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n              (onSearch)=\"deviceType$.next($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = {name: ''}; deviceType$.next('')\"\n              >\n                <span>{{'All device types' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n              *ngFor=\"let deviceType of deviceTypes\"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n              [active]=\"selectedDeviceType === deviceType\"\n              >\n              <c8y-highlight\n              [text]=\"deviceType.name\"\n              [pattern]=\"deviceType$ | async\"\n              ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing device types.' | translate\"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': (software$ | async)?.data.length < 10 }\">\n        <c8y-li *c8yFor=\"let software of software$ | async; loadMore: 'auto'\">\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-tools\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-5\">\n              <div class=\"text-truncate\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(software) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"software.c8y_Filter?.type; else noType\">\n                  {{ software.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class=\"text-muted\" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(software)\" class=\"label label-warning flex-item-right-sm\">\n                <span translate>Legacy</span>\n              </span>\n              <span *ngIf=\"!isLegacy(software)\">\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(software) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default flex-item-right-sm\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: (getBaseVersionsCount$(software) | async) || ''\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-collapse>\n            <c8y-list-group>\n              <c8y-li *c8yFor=\"let option of getVersions(software) | async\">\n                <c8y-li-radio\n                  [name]=\"software.id\"\n                  (onSelect)=\"selectSoftware({ option: option, software: software })\"\n                ></c8y-li-radio>\n                <c8y-li-body class=\"content-flex-40 p-r-16\">\n                  <div class=\"col-4\">\n                    {{ option.c8y_Software.version }}\n                  </div>\n                  <div class=\"col-5\">\n                    <div class=\"text-truncate\" title=\"{{ option.c8y_Software.url }}\">\n                      <span class=\"text-label-small m-r-4\" translate> File </span>\n                      <span>{{ option.c8y_Software.url }}</span>\n                    </div>\n                  </div>\n                  <div class=\"col-3\" *ngIf=\"option.id === software.selectedId\">\n                    <div class=\"c8y-select-wrapper d-inline-block\" style=\"margin: -4px 0;\">\n                      <select\n                        id=\"action\"\n                        class=\"form-control input-sm\"\n                        [(ngModel)]=\"option.action\"\n                        (change)=\"emitSoftware({ option: option, software: software })\"\n                      >\n                        <option [ngValue]=\"'install'\">{{ 'Install/update`software`' | translate }}</option>\n                        <option [ngValue]=\"'delete'\">{{ 'Remove`software`' | translate }}</option>\n                      </select>\n                      <span></span>\n                    </div>\n                  </div>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </c8y-li-collapse>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.RepositoryService }, { type: ɵngcc2.TranslateService }]; }, { software: [{
            type: Output
        }], radioButtons: [{
            type: ViewChildren,
            args: [ListItemRadioComponent]
        }] }); })();

class ConfirmSoftwareSelectionStepComponent {
    ngOnChanges(changes) {
        if (changes.selectedItems) {
            const deviceTypes = this.deviceTypes;
            this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');
        }
    }
    get selectedToInstall() {
        return this.selectedItems.filter(software => software.action === 'install');
    }
    get selectedToDelete() {
        return this.selectedItems.filter(software => software.action === 'delete');
    }
    get deviceTypes() {
        return uniq(this.selectedItems
            .filter(val => has(val, ['software', 'c8y_Filter', 'type']))
            .map(val => val.software.c8y_Filter.type));
    }
}
ConfirmSoftwareSelectionStepComponent.ɵfac = function ConfirmSoftwareSelectionStepComponent_Factory(t) { return new (t || ConfirmSoftwareSelectionStepComponent)(); };
ConfirmSoftwareSelectionStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmSoftwareSelectionStepComponent, selectors: [["c8y-confirm-software-selection-step"]], inputs: { selectedItems: "selectedItems" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 19, vars: 8, consts: [[1, "card-block", "p-t-0", "flex-no-shrink", "separator-bottom", "col-xs-12"], [1, "row", "p-b-16"], [1, "col-md-6", "col-md-offset-3", "col-lg-4", "col-lg-offset-4"], [1, "text-center", "text-gray"], [1, "col-xs-12", "flex-grow", "no-gutter"], [1, "card-inner-scroll", "fit-h"], [1, "card-block"], [1, "text-truncate", 3, "title"], ["translate", "", 1, "legend", "form-block"], [4, "ngIf", "ngIfElse"], ["noType", ""], ["class", "row p-b-16", 4, "ngIf"], [4, "ngFor", "ngForOf"], ["translate", "", 1, "text-muted"], ["c8yIcon", "c8y-tools"], [1, "content-flex-10"], [1, "col-6", "text-truncate", 3, "title"], [1, "col-6", "text-right"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "col-6"], ["translate", "", 1, "text-label-small", "m-r-8"]], template: function ConfirmSoftwareSelectionStepComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 1);
        ɵngcc0.ɵɵelementStart(10, "div", 2);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "span", 8);
        ɵngcc0.ɵɵtext(13, "Device type");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, ConfirmSoftwareSelectionStepComponent_ng_container_14_Template, 2, 1, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(15, ConfirmSoftwareSelectionStepComponent_ng_template_15_Template, 2, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, ConfirmSoftwareSelectionStepComponent_div_17_Template, 6, 1, "div", 11);
        ɵngcc0.ɵɵtemplate(18, ConfirmSoftwareSelectionStepComponent_div_18_Template, 6, 1, "div", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(16);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Confirm selection"));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.title);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.deviceTypes.length > 0)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selectedToInstall.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selectedToDelete.length);
    } }, directives: [ɵngcc5.C8yTranslateDirective, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc5.ListGroupComponent, ɵngcc5.ListItemComponent, ɵngcc5.ListItemIconComponent, ɵngcc5.IconDirective, ɵngcc5.ListItemBodyComponent], pipes: [ɵngcc5.C8yTranslatePipe], encapsulation: 2 });
ConfirmSoftwareSelectionStepComponent.propDecorators = {
    selectedItems: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmSoftwareSelectionStepComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-confirm-software-selection-step',
                template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-gray\">{{ 'Confirm selection' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"text-truncate\" title=\"{{ this.title }}\">\n            <span class=\"legend form-block\" translate>Device type</span>\n            <ng-container *ngIf=\"deviceTypes.length > 0; else noType\">\n              <span *ngFor=\"let deviceType of deviceTypes; let last = last\">{{ deviceType }}{{ last ? '' : ', ' }}</span>\n            </ng-container>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToInstall.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Installations/updates`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToInstall\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6 text-truncate\" title=\"{{ selectedItem.software.name }}\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-4\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToDelete.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Removals`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToDelete\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], null, { selectedItems: [{
            type: Input
        }] }); })();

class StepperBulkTypeSoftwareComponent extends BaseStepperComponent {
    constructor(modal, translate) {
        super();
        this.modal = modal;
        this.translate = translate;
        this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        this.selectedSoftware = [];
    }
    onSoftwareSelected(selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(item => item.software.id !== selectedItem.software.id);
        this.selectedSoftware.push(selectedItem);
    }
    confirmSoftwareSelection($event) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceTypes = this.getUniqueDeviceTypes();
            this.deviceTypes = deviceTypes;
            if (deviceTypes.length > 1) {
                try {
                    yield this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') });
                    $event.stepper.next();
                }
                catch (ex) {
                    this.selectedSoftware = [];
                    this.selectSoftware.resetSelection();
                }
            }
            else {
                $event.stepper.next();
            }
        });
    }
    retrieveOperationPrototype() {
        const softwareList = this.selectedSoftware.map(item => ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }));
        const interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        let description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    }
    getUniqueDeviceTypes() {
        return uniq(this.selectedSoftware
            .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)
            .filter(type => !!type));
    }
}
StepperBulkTypeSoftwareComponent.ɵfac = function StepperBulkTypeSoftwareComponent_Factory(t) { return new (t || StepperBulkTypeSoftwareComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
StepperBulkTypeSoftwareComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StepperBulkTypeSoftwareComponent, selectors: [["c8y-stepper-bulk-type-software"]], viewQuery: function StepperBulkTypeSoftwareComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SelectSoftwareStepComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectSoftware = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[4, "customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"], [4, "customStep"], [1, "d-contents", 3, "software"], [1, "d-contents", 3, "selectedItems"]], template: function StepperBulkTypeSoftwareComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-stepper");
        ɵngcc0.ɵɵtemplate(1, StepperBulkTypeSoftwareComponent_ng_container_1_Template, 2, 0, "ng-container", 0);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, StepperBulkTypeSoftwareComponent_ng_container_3_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(2, 5, "Select software"))("customStepCompleted", !!ctx.selectedSoftware.length)("customStepButtonsDisabled", !ctx.selectedSoftware.length)("customStepOnNext", ctx.confirmSoftwareSelection.bind(ctx));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(4, 7, "Confirm selected software"));
    } }, directives: [ɵngcc6.BulkOperationStepper, ɵngcc6.CustomStep, SelectSoftwareStepComponent, ConfirmSoftwareSelectionStepComponent], pipes: [ɵngcc5.C8yTranslatePipe], encapsulation: 2 });
StepperBulkTypeSoftwareComponent.ctorParameters = () => [
    { type: ModalService },
    { type: TranslateService }
];
StepperBulkTypeSoftwareComponent.propDecorators = {
    selectSoftware: [{ type: ViewChild, args: [SelectSoftwareStepComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeSoftwareComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-bulk-type-software',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            }]
    }], function () { return [{ type: ɵngcc5.ModalService }, { type: ɵngcc2.TranslateService }]; }, { selectSoftware: [{
            type: ViewChild,
            args: [SelectSoftwareStepComponent, { static: false }]
        }] }); })();

const ɵ0 = {
    type: BulkOperationType.SOFTWARE,
    c8yIcon: 'c8y-tools',
    name: gettext('Software update'),
    path: `${baseUrl}software`,
    component: StepperBulkTypeSoftwareComponent,
    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
    selected: false
};
/** Module for the 'Software update' operation type stepper */
class StepperBulkTypeSoftwareModule {
}
StepperBulkTypeSoftwareModule.ɵfac = function StepperBulkTypeSoftwareModule_Factory(t) { return new (t || StepperBulkTypeSoftwareModule)(); };
StepperBulkTypeSoftwareModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StepperBulkTypeSoftwareModule });
StepperBulkTypeSoftwareModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_LIST_BULK_TYPE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            RepositoryModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeSoftwareModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    StepperBulkTypeSoftwareComponent,
                    ConfirmSoftwareSelectionStepComponent,
                    SelectSoftwareStepComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    RepositoryModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeSoftwareComponent],
                exports: [StepperBulkTypeSoftwareComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StepperBulkTypeSoftwareModule, { declarations: function () { return [StepperBulkTypeSoftwareComponent, ConfirmSoftwareSelectionStepComponent, SelectSoftwareStepComponent]; }, imports: function () { return [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        RepositoryModule]; }, exports: function () { return [StepperBulkTypeSoftwareComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ConfirmSoftwareSelectionStepComponent, SelectSoftwareStepComponent, StepperBulkTypeSoftwareComponent, StepperBulkTypeSoftwareModule, ɵ0 };

//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-software.js.map