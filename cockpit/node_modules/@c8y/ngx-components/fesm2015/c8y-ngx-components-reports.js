import { Injectable, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';
import { AlertService, gettext, OptionsService, CoreModule, FormsModule } from '@c8y/ngx-components';
import { __awaiter } from 'tslib';
import { orderBy, remove, some, isEqual, cloneDeep } from 'lodash-es';
import { InventoryService, FetchClient, UserService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { formatDate } from '@angular/common';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { downgradeComponent, downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { registerNgModule } from '@c8y/ng1-modules';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@ngx-translate/core';
import * as ɵngcc4 from 'ngx-bootstrap/modal';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from 'ngx-bootstrap/dropdown';

function ScheduleModalComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1, "New export schedule");
    ɵngcc0.ɵɵelementEnd();
} }
function ScheduleModalComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1, "Edit export schedule");
    ɵngcc0.ɵɵelementEnd();
} }
function ScheduleModalComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1, "Duplicate export schedule");
    ɵngcc0.ɵɵelementEnd();
} }
function ScheduleModalComponent_span_82_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 36);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Create"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Create"), " ");
} }
function ScheduleModalComponent_span_83_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 36);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Save"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Save"), " ");
} }
function ScheduleModalComponent_span_84_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 36);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, "Duplicate"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "Duplicate"), " ");
} }
function ExportSchedulesComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelement(1, "c8y-loading");
    ɵngcc0.ɵɵelementStart(2, "span", 6);
    ɵngcc0.ɵɵtext(3, "Retrieving schedules\u2026");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ExportSchedulesComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵtext(2, " Could not load schedules list. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ExportSchedulesComponent_div_3_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "h1", 11);
    ɵngcc0.ɵɵelementStart(2, "h3", 6);
    ɵngcc0.ɵɵtext(3, "No export schedules defined.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { minutes: a0 }; };
function ExportSchedulesComponent_div_3_div_2_div_16_span_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(1, "number");
    ɵngcc0.ɵɵtext(2, " Hourly: {{ minutes }} minute(s) past the hour. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(4, _c0, ɵngcc0.ɵɵpipeBind2(1, 1, schedule_r7.cronConfig.minute, "2.0-0")));
} }
const _c1 = function (a0, a1) { return { hour: a0, minutes: a1 }; };
function ExportSchedulesComponent_div_3_div_2_div_16_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(1, "number");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵtext(3, " Daily: at {{ hour }}:{{ minutes }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction2(7, _c1, ɵngcc0.ɵɵpipeBind2(1, 1, schedule_r7.cronConfig.hour, "2.0-0"), ɵngcc0.ɵɵpipeBind2(2, 4, schedule_r7.cronConfig.minute, "2.0-0")));
} }
const _c2 = function (a0, a1, a2) { return { weekDay: a0, hour: a1, minutes: a2 }; };
function ExportSchedulesComponent_div_3_div_2_div_16_span_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(1, "number");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵtext(3, " Weekly: {{ weekDay }}, at {{ hour }}:{{ minutes }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction3(7, _c2, ctx_r11.cronService.getWeekDayName(schedule_r7.cronConfig), ɵngcc0.ɵɵpipeBind2(1, 1, schedule_r7.cronConfig.hour, "2.0-0"), ɵngcc0.ɵɵpipeBind2(2, 4, schedule_r7.cronConfig.minute, "2.0-0")));
} }
const _c3 = function (a0, a1, a2) { return { monthDay: a0, hour: a1, minutes: a2 }; };
function ExportSchedulesComponent_div_3_div_2_div_16_span_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(1, "number");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵtext(3, " Monthly: {{ monthDay }} day of the month, at {{ hour }}:{{ minutes }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction3(7, _c3, ctx_r12.cronService.getMonthDayName(schedule_r7.cronConfig), ɵngcc0.ɵɵpipeBind2(1, 1, schedule_r7.cronConfig.hour, "2.0-0"), ɵngcc0.ɵɵpipeBind2(2, 4, schedule_r7.cronConfig.minute, "2.0-0")));
} }
const _c4 = function (a0, a1, a2, a3) { return { month: a0, monthDay: a1, hour: a2, minutes: a3 }; };
function ExportSchedulesComponent_div_3_div_2_div_16_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵpipe(1, "number");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵtext(3, " Yearly: {{ month }}, {{ monthDay }} day of the month, at {{ hour }}:{{ minutes }}. ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction4(7, _c4, ctx_r13.cronService.getMonthName(schedule_r7.cronConfig), ctx_r13.cronService.getMonthDayName(schedule_r7.cronConfig), ɵngcc0.ɵɵpipeBind2(1, 1, schedule_r7.cronConfig.hour, "2.0-0"), ɵngcc0.ɵɵpipeBind2(2, 4, schedule_r7.cronConfig.minute, "2.0-0")));
} }
function ExportSchedulesComponent_div_3_div_2_div_16_ul_22_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 35);
    ɵngcc0.ɵɵelementStart(1, "li", 36);
    ɵngcc0.ɵɵelementStart(2, "button", 37);
    ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_div_3_div_2_div_16_ul_22_Template_button_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); const schedule_r7 = ctx_r21.$implicit; const i_r8 = ctx_r21.index; const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.editSchedule(schedule_r7, i_r8, $event); });
    ɵngcc0.ɵɵelement(3, "i", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "li", 36);
    ɵngcc0.ɵɵelementStart(7, "button", 37);
    ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_div_3_div_2_div_16_ul_22_Template_button_click_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const schedule_r7 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r23 = ɵngcc0.ɵɵnextContext(3); return ctx_r23.duplicateSchedule(schedule_r7, $event); });
    ɵngcc0.ɵɵelement(8, "i", 4);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "li", 36);
    ɵngcc0.ɵɵelementStart(12, "button", 37);
    ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_div_3_div_2_div_16_ul_22_Template_button_click_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r26 = ɵngcc0.ɵɵnextContext(); const schedule_r7 = ctx_r26.$implicit; const i_r8 = ctx_r26.index; const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.removeSchedule(schedule_r7, i_r8, $event); });
    ɵngcc0.ɵɵelement(13, "i", 4);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ctx_r14.hasRequiredRole ? ctx_r14.buttonLabels.edit : ctx_r14.buttonLabels.editNoPermission)("disabled", !ctx_r14.hasRequiredRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "pencil");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 12, "Edit"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("title", ctx_r14.hasRequiredRole ? ctx_r14.buttonLabels.duplicate : ctx_r14.buttonLabels.duplicateNoPermission)("disabled", !ctx_r14.hasRequiredRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "copy");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 14, "Duplicate"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("title", ctx_r14.hasRequiredRole ? ctx_r14.buttonLabels.delete : ctx_r14.buttonLabels.deleteNoPermission)("disabled", !ctx_r14.hasRequiredRole);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "trash");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 16, "Delete"), " ");
} }
function ExportSchedulesComponent_div_3_div_2_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_div_3_div_2_div_16_Template_div_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r28); const schedule_r7 = restoredCtx.$implicit; const i_r8 = restoredCtx.index; const ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.editSchedule(schedule_r7, i_r8, $event); });
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵelementStart(2, "div", 15);
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 23);
    ɵngcc0.ɵɵelementStart(5, "div", 24);
    ɵngcc0.ɵɵelementStart(6, "div", 25);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 24);
    ɵngcc0.ɵɵelementStart(9, "div", 26);
    ɵngcc0.ɵɵelement(10, "i", 27);
    ɵngcc0.ɵɵelementStart(11, "span", 28);
    ɵngcc0.ɵɵtemplate(12, ExportSchedulesComponent_div_3_div_2_div_16_span_12_Template, 3, 6, "span", 29);
    ɵngcc0.ɵɵtemplate(13, ExportSchedulesComponent_div_3_div_2_div_16_span_13_Template, 4, 10, "span", 29);
    ɵngcc0.ɵɵtemplate(14, ExportSchedulesComponent_div_3_div_2_div_16_span_14_Template, 4, 11, "span", 29);
    ɵngcc0.ɵɵtemplate(15, ExportSchedulesComponent_div_3_div_2_div_16_span_15_Template, 4, 11, "span", 29);
    ɵngcc0.ɵɵtemplate(16, ExportSchedulesComponent_div_3_div_2_div_16_span_16_Template, 4, 12, "span", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 30);
    ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_div_3_div_2_div_16_Template_div_click_17_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(18, "div", 31);
    ɵngcc0.ɵɵelementStart(19, "button", 32);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelement(21, "i", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(22, ExportSchedulesComponent_div_3_div_2_div_16_ul_22_Template, 16, 18, "ul", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const schedule_r7 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", schedule_r7.emailConfig.subject);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", schedule_r7.emailConfig.subject, " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.cronService.getBase(schedule_r7.cronConfig) === 2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.cronService.getBase(schedule_r7.cronConfig) === 3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.cronService.getBase(schedule_r7.cronConfig) === 4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.cronService.getBase(schedule_r7.cronConfig) === 5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.cronService.getBase(schedule_r7.cronConfig) === 6);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 9, "Actions"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "ellipsis-v");
} }
function ExportSchedulesComponent_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵelementStart(2, "div", 14);
    ɵngcc0.ɵɵelementStart(3, "div", 15);
    ɵngcc0.ɵɵelement(4, "i", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 17);
    ɵngcc0.ɵɵelementStart(6, "div", 5);
    ɵngcc0.ɵɵelementStart(7, "div", 18);
    ɵngcc0.ɵɵelementStart(8, "label", 19);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 20);
    ɵngcc0.ɵɵelementStart(12, "label", 19);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(16, ExportSchedulesComponent_div_3_div_2_div_16_Template, 23, 11, "div", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 3, "Description"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 5, "Frequency"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.scheduleList);
} }
function ExportSchedulesComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ExportSchedulesComponent_div_3_div_1_Template, 4, 0, "div", 8);
    ɵngcc0.ɵɵtemplate(2, ExportSchedulesComponent_div_3_div_2_Template, 17, 7, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.scheduleList.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.scheduleList.length);
} }
function ExportSchedulesComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵtext(1, " You don't have the permission required to schedule exports. ");
    ɵngcc0.ɵɵelementEnd();
} }
function CronComponent_option_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 13);
    ɵngcc0.ɵɵtext(1, " Select\u2026 ");
    ɵngcc0.ɵɵelementEnd();
} }
function CronComponent_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const baseInterval_r6 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", baseInterval_r6.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, baseInterval_r6.label), " ");
} }
function CronComponent_div_11_option_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dayOfWeek_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", dayOfWeek_r8.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, dayOfWeek_r8.label), " ");
} }
function CronComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelementStart(1, "label", 16);
    ɵngcc0.ɵɵtext(2, " Day ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵelementStart(4, "select", 17);
    ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_div_11_Template_select_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.cronConfig.weekday = $event; })("change", function CronComponent_div_11_Template_select_change_4_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onChangeSelect(); });
    ɵngcc0.ɵɵtemplate(5, CronComponent_div_11_option_5_Template, 3, 4, "option", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.cronConfig.weekday);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.daysOfWeekPosix);
} }
function CronComponent_div_12_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r13 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", month_r13.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, month_r13.label), " ");
} }
function CronComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "label", 19);
    ɵngcc0.ɵɵtext(2, " Month ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div");
    ɵngcc0.ɵɵelementStart(4, "div", 4);
    ɵngcc0.ɵɵelementStart(5, "select", 20);
    ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_div_12_Template_select_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.cronConfig.month = $event; })("change", function CronComponent_div_12_Template_select_change_5_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onChangeSelect(); });
    ɵngcc0.ɵɵtemplate(6, CronComponent_div_12_option_6_Template, 3, 4, "option", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.cronConfig.month);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.months);
} }
function CronComponent_div_13_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dayOfMonth_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", dayOfMonth_r18.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, dayOfMonth_r18.label), " ");
} }
function CronComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵelementStart(1, "label", 22);
    ɵngcc0.ɵɵtext(2, " Day ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div");
    ɵngcc0.ɵɵelementStart(4, "div", 4);
    ɵngcc0.ɵɵelementStart(5, "select", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_div_13_Template_select_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.cronConfig.day = $event; })("change", function CronComponent_div_13_Template_select_change_5_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onChangeSelect(); });
    ɵngcc0.ɵɵtemplate(6, CronComponent_div_13_option_6_Template, 3, 4, "option", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.cronConfig.day);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.daysOfMonth);
} }
function CronComponent_div_14_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 31);
    ɵngcc0.ɵɵtext(1, "Time");
    ɵngcc0.ɵɵelementEnd();
} }
function CronComponent_div_14_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 31);
    ɵngcc0.ɵɵtext(1, "Minutes");
    ɵngcc0.ɵɵelementEnd();
} }
function CronComponent_div_14_div_6_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const hour_r28 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", hour_r28.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 2, hour_r28.value, "2.0-0"), " ");
} }
function CronComponent_div_14_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "select", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_div_14_div_6_Template_select_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.cronConfig.hour = $event; })("change", function CronComponent_div_14_div_6_Template_select_change_1_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.onChangeSelect(); });
    ɵngcc0.ɵɵtemplate(2, CronComponent_div_14_div_6_option_2_Template, 3, 5, "option", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r24.cronConfig.hour);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r24.hours);
} }
function CronComponent_div_14_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, " : ");
    ɵngcc0.ɵɵelementEnd();
} }
function CronComponent_div_14_option_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const minute_r32 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", minute_r32.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 2, minute_r32.value, "2.0-0"), " ");
} }
function CronComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵelementStart(1, "label", 25);
    ɵngcc0.ɵɵtemplate(2, CronComponent_div_14_span_2_Template, 2, 0, "span", 26);
    ɵngcc0.ɵɵtemplate(3, CronComponent_div_14_span_3_Template, 2, 0, "span", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵelementStart(5, "div", 27);
    ɵngcc0.ɵɵtemplate(6, CronComponent_div_14_div_6_Template, 4, 2, "div", 28);
    ɵngcc0.ɵɵtemplate(7, CronComponent_div_14_span_7_Template, 2, 0, "span", 29);
    ɵngcc0.ɵɵelementStart(8, "div", 4);
    ɵngcc0.ɵɵelementStart(9, "select", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_div_14_Template_select_ngModelChange_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.cronConfig.minute = $event; })("change", function CronComponent_div_14_Template_select_change_9_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.onChangeSelect(); });
    ɵngcc0.ɵɵtemplate(10, CronComponent_div_14_option_10_Template, 3, 5, "option", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(11, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.base >= 3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.base < 3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.base >= 3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.base >= 3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.cronConfig.minute);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.minutes);
} }
class ReportsService {
    constructor(alertService, inventoryService, client, translateService) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.translateService = translateService;
        this.microserviceUrl = '/service/reporting';
        this.headers = { 'Content-Type': 'application/json' };
        this.isReportAgentSubscribed = true;
        this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE = 'microservice/not found';
    }
    getExport(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            let exp;
            const exportDetail = yield this.inventoryService.detail(exportId);
            const { data, res } = exportDetail;
            if (res.status !== 200) {
                this.alertService.addServerFailure({ data, res });
            }
            else {
                exp = data ? data : {};
            }
            return exp;
        });
    }
    getScheduleList(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const exp = yield this.getExport(exportId);
            return this.extractScheduleListFromExport(exp);
        });
    }
    extractScheduleListFromExport(exp) {
        let scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    }
    addSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [], [schedule]);
        });
    }
    updateSchedule(oldSchedule, schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [oldSchedule], [schedule]);
        });
    }
    updateSchedules(exportId, schedulesToRemove = [], schedulesToAdd = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let success = false;
            const exp = yield this.getExport(exportId);
            const schedules = this.extractScheduleListFromExport(exp);
            remove(schedules, (schedule) => some(schedulesToRemove, (scheduleToRemove) => isEqual(schedule, scheduleToRemove)));
            schedules.push.apply(schedules, schedulesToAdd);
            exp.c8y_ScheduleConfiguration = schedules;
            const { data, res } = yield this.inventoryService.update(exp);
            if (res.status === 200) {
                success = yield this.reschedule(exportId);
            }
            else {
                this.alertService.addServerFailure({ data, res });
            }
            return success;
        });
    }
    reschedule(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.headers
            };
            const rescheduling = yield this.client.fetch(`${this.microserviceUrl}/schedule/${exportId}`, options);
            return rescheduling.status === 200;
        });
    }
    deleteSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [schedule], []);
        });
    }
    /**
     * Removes report configuration.
     *
     * Note: fallback strategy is based on error code returned by backend
     * in case of missing subscription for report-agent microservice.
     * @param config entity of report configuration
     * @returns Response wrapped in [[IFetchResponse]]
     */
    removeConfiguration(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            if (!this.isReportAgentSubscribed) {
                res = yield this.fallbackConfigurationRemoval(config);
            }
            else {
                res = yield this.normalConfigurationRemoval(config);
                if (res.status === 404) {
                    const data = yield res.json();
                    if (data && data.error && data.error.toLowerCase() === this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE) {
                        res = yield this.fallbackConfigurationRemoval(config);
                        this.isReportAgentSubscribed = false;
                    }
                }
            }
            return res;
        });
    }
    normalConfigurationRemoval(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.microserviceUrl}/config/${config.id}`;
            return yield this.client.fetch(url, { method: 'DELETE' });
        });
    }
    fallbackConfigurationRemoval(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                res = (yield this.inventoryService.delete(config)).res;
            }
            catch (e) {
                // this could be an error related to not existing object or anything else which makes request return error status code
                // in case of concurrent removal everything is fine, therefor warning message. But it might not recover from some errors
                this.alertService.addServerFailure(e, 'warning');
            }
            return res;
        });
    }
}
ReportsService.ɵfac = function ReportsService_Factory(t) { return new (t || ReportsService)(ɵngcc0.ɵɵinject(ɵngcc1.AlertService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.FetchClient), ɵngcc0.ɵɵinject(ɵngcc3.TranslateService)); };
ReportsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportsService, factory: ReportsService.ɵfac });
ReportsService.ctorParameters = () => [
    { type: AlertService },
    { type: InventoryService },
    { type: FetchClient },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AlertService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc2.FetchClient }, { type: ɵngcc3.TranslateService }]; }, null); })();

var ActionType;
(function (ActionType) {
    ActionType["CREATE"] = "create";
    ActionType["EDIT"] = "edit";
    ActionType["DUPLICATE"] = "duplicate";
})(ActionType || (ActionType = {}));
var Base;
(function (Base) {
    Base[Base["Initial"] = 1] = "Initial";
    Base[Base["Hour"] = 2] = "Hour";
    Base[Base["Day"] = 3] = "Day";
    Base[Base["Week"] = 4] = "Week";
    Base[Base["Month"] = 5] = "Month";
    Base[Base["Year"] = 6] = "Year";
})(Base || (Base = {}));

class CronService {
    constructor(translateService) {
        this.translateService = translateService;
        this.daysOfWeekPosix = [];
        this.daysOfMonth = [
            { value: '1', label: '1.' },
            { value: '2', label: '2.' },
            { value: '3', label: '3.' },
            { value: '4', label: '4.' },
            { value: '5', label: '5.' },
            { value: '6', label: '6.' },
            { value: '7', label: '7.' },
            { value: '8', label: '8.' },
            { value: '9', label: '9.' },
            { value: '10', label: '10.' },
            { value: '11', label: '11.' },
            { value: '12', label: '12.' },
            { value: '13', label: '13.' },
            { value: '14', label: '14.' },
            { value: '15', label: '15.' },
            { value: '16', label: '16.' },
            { value: '17', label: '17.' },
            { value: '18', label: '18.' },
            { value: '19', label: '19.' },
            { value: '20', label: '20.' },
            { value: '21', label: '21.' },
            { value: '22', label: '22.' },
            { value: '23', label: '23.' },
            { value: '24', label: '24.' },
            { value: '25', label: '25.' },
            { value: '26', label: '26.' },
            { value: '27', label: '27.' },
            { value: '28', label: '28.' },
            { value: '29', label: '29.' },
            { value: '30', label: '30.' },
            { value: '31', label: '31.' }
        ];
        this.months = [];
        this.hours = [];
        this.minutes = [];
        this.intervals = [
            { value: 2, label: gettext('Hour') },
            { value: 3, label: gettext('Day') },
            { value: 4, label: gettext('Week') },
            { value: 5, label: gettext('Month') },
            { value: 6, label: gettext('Year') }
        ];
        for (let x = 0; x < 24; x++) {
            this.hours.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 60; x = x + 5) {
            this.minutes.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 7; x++) {
            this.daysOfWeekPosix.push({
                value: x.toString(),
                label: this.getWeekDayName({ weekday: x })
            });
        }
        for (let x = 1; x < 13; x++) {
            this.months.push({
                value: x.toString(),
                label: this.getMonthName({ month: x })
            });
        }
    }
    generateCron(cronConfig) {
        let cron = '';
        cron = cronConfig.minute ? `${cronConfig.minute}` : '*';
        cron += cronConfig.hour ? ` ${cronConfig.hour}` : ' *';
        cron += cronConfig.day ? ` ${cronConfig.day}` : ' *';
        cron += cronConfig.month ? ` ${cronConfig.month}` : ' *';
        cron += cronConfig.weekday ? ` ${cronConfig.weekday}` : ' *';
        return cron;
    }
    generateCronConfig(cron) {
        const parts = cron.split(/\s+/);
        const cronConfig = {
            minute: parts[0],
            hour: parts[1],
            day: parts[2],
            month: parts[3],
            weekday: parts[4]
        };
        return cronConfig;
    }
    getBase(cronConfig) {
        let base = Base.Initial;
        if (cronConfig.minute !== '*' &&
            cronConfig.hour === '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Hour;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Day;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday !== '*') {
            base = Base.Week;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Month;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month !== '*' &&
            cronConfig.weekday === '*') {
            base = Base.Year;
        }
        else {
            // cronConfig invalid
        }
        return base;
    }
    validateModels(base, cronConfig) {
        let valid;
        switch (base) {
            case Base.Initial: // Please select
                valid = false;
                break;
            case Base.Hour:
                if (cronConfig.minute !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Day:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Week:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Month:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Year:
                if (cronConfig.minute !== '*' &&
                    cronConfig.hour !== '*' &&
                    cronConfig.day !== '*' &&
                    cronConfig.month !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            default:
                valid = false;
        }
        return valid;
    }
    clearNextModels(base, cronConfig) {
        if (base === Base.Initial) {
            // please select, delete all
            // cron expression: every minute at second 0
            cronConfig.minute = '*';
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Hour) {
            // hour, don't delete minutes
            // cron expression: every hour, at whatever minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Day) {
            // day, don't delete minutes and hours
            // cron expression: every day of every month, at whatever hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Week) {
            // week, delete month and day
            // cron expression: every month, at whatever weekday, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = cronConfig.weekday === '*' || cronConfig.weekday === '?' ? this.daysOfWeekPosix[0].value : cronConfig.weekday;
        }
        else if (base === Base.Month) {
            // month, delete month and weekday
            // cron expression: every month, at whatever day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Year) {
            // year, delete weekday
            // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = cronConfig.month === '*' ? this.months[0].value : cronConfig.month;
            cronConfig.weekday = '*';
        }
    }
    getWeekDayName(cronConfig) {
        const date = new Date(0);
        const firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
        date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
        return formatDate(date, 'EEEE', this.translateService.currentLang);
    }
    getMonthDayName(cronConfig) {
        let name = '';
        this.daysOfMonth.forEach(item => {
            if (item.value === cronConfig.day) {
                name = item.label;
            }
        });
        return name;
    }
    getMonthName(cronConfig) {
        const date = new Date(0);
        date.setMonth(parseInt(cronConfig.month, 10) - 1);
        return formatDate(date, 'LLLL', this.translateService.currentLang);
    }
}
CronService.ɵfac = function CronService_Factory(t) { return new (t || CronService)(ɵngcc0.ɵɵinject(ɵngcc3.TranslateService)); };
CronService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CronService, factory: CronService.ɵfac });
CronService.ctorParameters = () => [
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CronService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.TranslateService }]; }, null); })();

class ScheduleModalComponent {
    constructor(reportsService, modalRef, cronService) {
        this.reportsService = reportsService;
        this.modalRef = modalRef;
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.ActionType = ActionType;
        this.cronExpression = '* * * * *';
        this.validCron = false;
        this.emitterPayload = {
            success: false,
            message: '',
            schedule: { timestamp: undefined, emailConfig: undefined, cronConfig: undefined }
        };
        this.placeholdersInfo = gettext('Available placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to downloadable file is: {tenant-domain}/inventory/binaries/{binaryId}.');
    }
    ngOnInit() {
        this.oldSchedule = cloneDeep(this.schedule);
        this.populateEmailFieldsFromSchedule(this.schedule);
        this.cronExpression = this.cronService.generateCron(this.schedule.cronConfig);
        this.validCron = this.cronService.validateModels(this.cronService.getBase(this.schedule.cronConfig), this.schedule.cronConfig);
    }
    populateEmailFieldsFromSchedule(schedule) {
        if (schedule.emailConfig.to && schedule.emailConfig.to.length) {
            this.emailTo = schedule.emailConfig.to.toString();
        }
        if (schedule.emailConfig.cc && schedule.emailConfig.cc.length) {
            this.emailCc = schedule.emailConfig.cc.toString();
        }
        if (schedule.emailConfig.bcc && schedule.emailConfig.bcc.length) {
            this.emailBcc = schedule.emailConfig.bcc.toString();
        }
        if (schedule.emailConfig.replyTo) {
            this.emailReplyTo = schedule.emailConfig.replyTo;
        }
        if (schedule.emailConfig.subject) {
            this.emailSubject = schedule.emailConfig.subject;
        }
        if (schedule.emailConfig.text) {
            this.emailText = schedule.emailConfig.text;
        }
    }
    save() {
        this.populateScheduleFromCronExpression();
        this.populateScheduleFromEmailFields();
        if (this.actionType === ActionType.CREATE || this.actionType === ActionType.DUPLICATE) {
            const date = new Date();
            const timestamp = date.getTime();
            this.schedule.timestamp = timestamp;
        }
        this.emitterPayload.success = true;
        this.emitterPayload.schedule = this.schedule;
        this.modalRef.hide();
        // signal to the parent component to update list
        this.emitter.emit(this.emitterPayload);
    }
    cancel() {
        this.modalRef.hide();
    }
    getCron(cron) {
        this.validCron = cron.valid;
        if (cron.valid) {
            this.cronExpression = cron.cron;
        }
    }
    populateScheduleFromCronExpression() {
        this.schedule.cronConfig = this.cronService.generateCronConfig(this.cronExpression);
    }
    convertStringOfEmailsToArray(stringOfEmails) {
        const arr = [];
        if (stringOfEmails) {
            const parts = stringOfEmails.split(',');
            parts.forEach(item => {
                if (item) {
                    arr.push(item);
                }
            });
        }
        return arr;
    }
    populateScheduleFromEmailFields() {
        this.schedule.emailConfig.to = this.emailTo
            ? this.convertStringOfEmailsToArray(this.emailTo)
            : null;
        this.schedule.emailConfig.cc = this.emailCc
            ? this.convertStringOfEmailsToArray(this.emailCc)
            : null;
        this.schedule.emailConfig.bcc = this.emailBcc
            ? this.convertStringOfEmailsToArray(this.emailBcc)
            : null;
        this.schedule.emailConfig.replyTo = this.emailReplyTo;
        this.schedule.emailConfig.subject = this.emailSubject;
        this.schedule.emailConfig.text = this.emailText;
    }
}
ScheduleModalComponent.ɵfac = function ScheduleModalComponent_Factory(t) { return new (t || ScheduleModalComponent)(ɵngcc0.ɵɵdirectiveInject(ReportsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalRef), ɵngcc0.ɵɵdirectiveInject(CronService)); };
ScheduleModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ScheduleModalComponent, selectors: [["schedule-modal"]], outputs: { emitter: "emitter" }, decls: 85, vars: 41, consts: [[1, "modal-header", "text-center", "bg-primary"], [1, "text-white"], [2, "font-size", "62px"], ["c8yIcon", "c8y-report"], [1, "text-uppercase"], ["translate", "", 4, "ngIf"], [1, "modal-body"], ["translate", "", 1, "lead", "text-center", "p-t-24", "m-b-0"], [1, "modal-inner-scroll", "smart-rule-control"], [1, "edit-smart-rule-details"], ["scheduleForm", "ngForm"], [1, "list-group"], [1, "list-group-item", "bg-gray-white"], [1, "smart-list-icon-label"], [1, "dot", "bg-primary-light", "m-r-8"], ["translate", ""], [1, "p-t-16"], [1, "form-group"], ["name", "cron", 3, "cronIn", "emitter"], [1, "list-group-item"], [1, "d-inline-block"], [1, "help-block", "text-muted", "small", "p-absolute"], ["c8yIcon", "info-circle", 1, "text-info", "m-r-4", "text-14"], [1, "p-t-24"], ["translate", "", 1, "control-label"], ["emails", "", "type", "text", "name", "to", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["emails", "", "type", "text", "name", "cc", 1, "form-control", "span", 3, "placeholder", "ngModel", "ngModelChange"], ["emails", "", "type", "text", "name", "bcc", 1, "form-control", "span", 3, "placeholder", "ngModel", "ngModelChange"], ["email", "", "type", "text", "name", "replyTo", 1, "form-control", "span", 3, "placeholder", "ngModel", "ngModelChange"], ["type", "text", "name", "subject", "required", "", 1, "form-control", "span", 3, "ngModel", "placeholder", "ngModelChange"], ["name", "text", "rows", "4", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], [1, "help-block", "text-muted"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"], [1, "btn", "btn-primary", 3, "disabled", "click"], [3, "title", 4, "ngIf"], [3, "title"]], template: function ScheduleModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "header", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "h4", 4);
        ɵngcc0.ɵɵtemplate(5, ScheduleModalComponent_span_5_Template, 2, 0, "span", 5);
        ɵngcc0.ɵɵtemplate(6, ScheduleModalComponent_span_6_Template, 2, 0, "span", 5);
        ɵngcc0.ɵɵtemplate(7, ScheduleModalComponent_span_7_Template, 2, 0, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "p", 7);
        ɵngcc0.ɵɵtext(10, "On schedule send export via email");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "form", 9, 10);
        ɵngcc0.ɵɵelementStart(14, "div", 11);
        ɵngcc0.ɵɵelementStart(15, "div", 12);
        ɵngcc0.ɵɵelementStart(16, "div", 13);
        ɵngcc0.ɵɵelementStart(17, "span", 14);
        ɵngcc0.ɵɵtext(18, "1");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "strong", 15);
        ɵngcc0.ɵɵtext(20, "Frequency");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 16);
        ɵngcc0.ɵɵelementStart(22, "div", 17);
        ɵngcc0.ɵɵelementStart(23, "cron", 18);
        ɵngcc0.ɵɵlistener("emitter", function ScheduleModalComponent_Template_cron_emitter_23_listener($event) { return ctx.getCron($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "div", 19);
        ɵngcc0.ɵɵelementStart(25, "div", 13);
        ɵngcc0.ɵɵelementStart(26, "span", 14);
        ɵngcc0.ɵɵtext(27, "2");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 20);
        ɵngcc0.ɵɵelementStart(29, "strong", 15);
        ɵngcc0.ɵɵtext(30, "Send email");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "p", 21);
        ɵngcc0.ɵɵelement(32, "i", 22);
        ɵngcc0.ɵɵelementStart(33, "span", 15);
        ɵngcc0.ɵɵtext(34, "Enter one or more valid email addresses, separated with a comma.");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "div", 23);
        ɵngcc0.ɵɵelementStart(36, "div", 17);
        ɵngcc0.ɵɵelementStart(37, "label", 24);
        ɵngcc0.ɵɵtext(38, "Send to");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(39, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(40, "input", 25);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_input_ngModelChange_40_listener($event) { return ctx.emailTo = $event; });
        ɵngcc0.ɵɵpipe(41, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(42, "div", 17);
        ɵngcc0.ɵɵelementStart(43, "label", 24);
        ɵngcc0.ɵɵtext(44, "CC");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(45, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(46, "input", 26);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_input_ngModelChange_46_listener($event) { return ctx.emailCc = $event; });
        ɵngcc0.ɵɵpipe(47, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(48, "div", 17);
        ɵngcc0.ɵɵelementStart(49, "label", 24);
        ɵngcc0.ɵɵtext(50, "BCC");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(51, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(52, "input", 27);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_input_ngModelChange_52_listener($event) { return ctx.emailBcc = $event; });
        ɵngcc0.ɵɵpipe(53, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(54, "div", 17);
        ɵngcc0.ɵɵelementStart(55, "label", 24);
        ɵngcc0.ɵɵtext(56, "Reply to (single email address)");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(57, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(58, "input", 28);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_input_ngModelChange_58_listener($event) { return ctx.emailReplyTo = $event; });
        ɵngcc0.ɵɵpipe(59, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(60, "div", 17);
        ɵngcc0.ɵɵelementStart(61, "label", 24);
        ɵngcc0.ɵɵtext(62, "Subject");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(63, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(64, "input", 29);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_input_ngModelChange_64_listener($event) { return ctx.emailSubject = $event; });
        ɵngcc0.ɵɵpipe(65, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(66, "div", 17);
        ɵngcc0.ɵɵelementStart(67, "label", 24);
        ɵngcc0.ɵɵtext(68, "Message");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(69, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(70, "textarea", 30);
        ɵngcc0.ɵɵlistener("ngModelChange", function ScheduleModalComponent_Template_textarea_ngModelChange_70_listener($event) { return ctx.emailText = $event; });
        ɵngcc0.ɵɵpipe(71, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(72, "p", 31);
        ɵngcc0.ɵɵtext(73);
        ɵngcc0.ɵɵpipe(74, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(75, "div", 32);
        ɵngcc0.ɵɵelementStart(76, "button", 33);
        ɵngcc0.ɵɵlistener("click", function ScheduleModalComponent_Template_button_click_76_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(77, "translate");
        ɵngcc0.ɵɵtext(78);
        ɵngcc0.ɵɵpipe(79, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(80, "button", 34);
        ɵngcc0.ɵɵlistener("click", function ScheduleModalComponent_Template_button_click_80_listener() { return ctx.save(); });
        ɵngcc0.ɵɵelementStart(81, "span");
        ɵngcc0.ɵɵtemplate(82, ScheduleModalComponent_span_82_Template, 4, 6, "span", 35);
        ɵngcc0.ɵɵtemplate(83, ScheduleModalComponent_span_83_Template, 4, 6, "span", 35);
        ɵngcc0.ɵɵtemplate(84, ScheduleModalComponent_span_84_Template, 4, 6, "span", 35);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.CREATE);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.EDIT);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.DUPLICATE);
        ɵngcc0.ɵɵadvance(16);
        ɵngcc0.ɵɵproperty("cronIn", ctx.cronExpression);
        ɵngcc0.ɵɵadvance(17);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(41, 23, "e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailTo);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(47, 25, "e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailCc);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(53, 27, "e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailBcc);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(59, 29, "e.g. joe.doe@example.com`LOCALIZE`"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailReplyTo);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(65, 31, "e.g. Daily report"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailSubject);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(71, 33, "Message"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.emailText);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(74, 35, ctx.placeholdersInfo), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(77, 37, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(79, 39, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.validCron || !_r3.form.valid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.CREATE);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.EDIT);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.actionType === ctx.ActionType.DUPLICATE);
    } }, directives: function () { return [ɵngcc1.IconDirective, ɵngcc5.NgIf, ɵngcc1.C8yTranslateDirective, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, CronComponent, ɵngcc1.FormGroupComponent, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc1.EmailsValidatorDirective, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc6.EmailValidator]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe]; }, encapsulation: 2 });
ScheduleModalComponent.ctorParameters = () => [
    { type: ReportsService },
    { type: BsModalRef },
    { type: CronService }
];
ScheduleModalComponent.propDecorators = {
    emitter: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScheduleModalComponent, [{
        type: Component,
        args: [{
                selector: 'schedule-modal',
                template: "<div class=\"modal-header text-center bg-primary\">\n  <header class=\"text-white\">\n    <div style=\"font-size: 62px;\">\n      <span c8yIcon=\"c8y-report\"></span>\n    </div>\n    <h4 class=\"text-uppercase\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" translate>New export schedule</span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" translate>Edit export schedule</span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" translate>Duplicate export schedule</span>\n    </h4>\n  </header>\n</div>\n\n<div class=\"modal-body\">\n  <p class=\"lead text-center p-t-24 m-b-0\" translate>On schedule send export via email</p>\n</div>\n<div class=\"modal-inner-scroll smart-rule-control\">\n  <form #scheduleForm=\"ngForm\" class=\"edit-smart-rule-details\">\n    <div class=\"list-group\">\n      <div class=\"list-group-item bg-gray-white\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light m-r-8\">1</span>\n          <strong translate>Frequency</strong>\n        </div>\n        <div class=\"p-t-16\">\n          <div class=\"form-group\">\n            <cron [cronIn]=\"cronExpression\" (emitter)=\"getCron($event)\" name=\"cron\"></cron>\n          </div>\n        </div>\n      </div>\n      <div class=\"list-group-item\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light m-r-8\">2</span>\n          <div class=\"d-inline-block\">\n            <strong translate>Send email</strong>\n            <p class=\"help-block text-muted small p-absolute\">\n              <i class=\"text-info m-r-4 text-14\" c8yIcon=\"info-circle\"></i>\n              <span translate\n                >Enter one or more valid email addresses, separated with a comma.</span\n              >\n            </p>\n          </div>\n        </div>\n        <div class=\"p-t-24\">\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Send to</label>\n            <c8y-form-group>\n              <input\n                emails\n                type=\"text\"\n                class=\"form-control\"\n                name=\"to\"\n                [(ngModel)]=\"emailTo\"\n                placeholder=\"{{\n                  'e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`' | translate\n                }}\"\n                required\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>CC</label>\n            <c8y-form-group>\n              <input\n                emails\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"cc\"\n                placeholder=\"{{\n                  'e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`' | translate\n                }}\"\n                [(ngModel)]=\"emailCc\"\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>BCC</label>\n            <c8y-form-group>\n              <input\n                emails\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"bcc\"\n                placeholder=\"{{\n                  'e.g. joe.doe@example.com,john.smith@example.com`LOCALIZE`' | translate\n                }}\"\n                [(ngModel)]=\"emailBcc\"\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Reply to (single email address)</label>\n            <c8y-form-group>\n              <input\n                email\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"replyTo\"\n                placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                [(ngModel)]=\"emailReplyTo\"\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Subject</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"subject\"\n                [(ngModel)]=\"emailSubject\"\n                placeholder=\"{{ 'e.g. Daily report' | translate }}\"\n                required\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Message</label>\n            <c8y-form-group>\n              <textarea\n                class=\"form-control\"\n                name=\"text\"\n                [(ngModel)]=\"emailText\"\n                placeholder=\"{{ 'Message' | translate }}\"\n                rows=\"4\"\n                required\n              ></textarea>\n              <p class=\"help-block text-muted\">\n                {{ placeholdersInfo | translate }}\n              </p>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-default\" (click)=\"cancel()\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"!validCron || !scheduleForm.form.valid\"\n  >\n    <span>\n      <span *ngIf=\"actionType === ActionType.CREATE\" title=\"{{ 'Create' | translate }}\">\n        {{ 'Create' | translate }}\n      </span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" title=\"{{ 'Save' | translate }}\">\n        {{ 'Save' | translate }}\n      </span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" title=\"{{ 'Duplicate' | translate }}\">\n        {{ 'Duplicate' | translate }}\n      </span>\n    </span>\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ReportsService }, { type: ɵngcc4.BsModalRef }, { type: CronService }]; }, { emitter: [{
            type: Output
        }] }); })();

class ExportSchedulesComponent {
    constructor(reportsService, bsModalService, cronService, translateService, userService, optionsService) {
        this.reportsService = reportsService;
        this.bsModalService = bsModalService;
        this.cronService = cronService;
        this.translateService = translateService;
        this.userService = userService;
        this.optionsService = optionsService;
        this.onSchedulesUpdate = new EventEmitter();
        this.scheduleList = [];
        this.initialSchedule = {
            timestamp: null,
            emailConfig: {
                to: [],
                cc: [],
                bcc: [],
                replyTo: '',
                text: '',
                subject: ''
            },
            cronConfig: {
                minute: '0',
                hour: '0',
                day: '1',
                month: '1',
                weekday: '?'
            }
        };
        this.listClass = 'interact-list';
        this.sortReverse = false;
        this.isOpen = {};
        this.isEditMenuOpen = false;
        this.currentUserEmail = '';
        this.hasRequiredRole = false;
        this.defaultExportEmailTemplate = this.translateService.instant(gettext('File with exported data can be downloaded from {tenant-domain}/inventory/binaries/{binaryId}.'));
        this.loadingStatus = {
            inProgress: false,
            done: false,
            error: false
        };
    }
    set exportId(exportId) {
        this._exportId = exportId;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.hasRequiredRole = yield this.checkRole();
            this.getScheduleList(true);
            const currentUserEmail = yield this.getCurrentUserEmail();
            this.initialSchedule.emailConfig.text = yield this.optionsService.getTenantOption('configuration', 'export.data.mail.text', this.defaultExportEmailTemplate);
            this.initialSchedule.emailConfig.to = currentUserEmail;
            this.exp = yield this.reportsService.getExport(this._exportId);
            this.initialSchedule.emailConfig.subject = this.translateService.instant(gettext('Export of "{{expName}}"'), { expName: this.exp.name });
        });
    }
    ngOnChanges() {
        this.translateButtonTitles();
    }
    translateButtonTitles() {
        this.buttonLabels = {
            edit: this.translateService.instant(gettext('Edit schedule')),
            editNoPermission: this.translateService.instant(gettext('Edit schedule - no permissions')),
            duplicate: this.translateService.instant(gettext('Duplicate schedule')),
            duplicateNoPermission: this.translateService.instant(gettext('Duplicate schedule - no permissions')),
            delete: this.translateService.instant(gettext('Delete schedule')),
            deleteNoPermission: this.translateService.instant(gettext('Delete schedule - no permissions'))
        };
    }
    getCurrentUserEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.userService.current();
            return data && data.email ? [data.email] : [];
        });
    }
    checkRole() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.userService.current();
            const role = 'ROLE_SCHEDULE_REPORT_ADMIN';
            const hasRole = this.userService.hasRole(data, role);
            return hasRole;
        });
    }
    getScheduleList(withProgress) {
        return __awaiter(this, void 0, void 0, function* () {
            if (withProgress) {
                this.loadingStatus.inProgress = true;
            }
            this.scheduleList = yield this.reportsService.getScheduleList(this._exportId);
            if (withProgress) {
                this.loadingStatus.inProgress = false;
            }
        });
    }
    addSchedule() {
        this.openAddEditModal(this._exportId, this.initialSchedule, ActionType.CREATE);
    }
    editSchedule(schedule, index, event) {
        if (this.hasRequiredRole) {
            event.preventDefault();
            this.openAddEditModal(this._exportId, schedule, ActionType.EDIT, index);
        }
    }
    duplicateSchedule(schedule, event) {
        event.preventDefault();
        this.openAddEditModal(this._exportId, schedule, ActionType.DUPLICATE);
    }
    openAddEditModal(exportId, schedule, actionType, index) {
        const payload = { actionType, exportId, schedule: cloneDeep(schedule) };
        const modalOptions = { class: 'modal-sm', initialState: payload };
        this.modalRef = this.bsModalService.show(ScheduleModalComponent, modalOptions);
        this.modalRef.content.emitter.subscribe((load) => this.getMessageFromModal(load, index));
    }
    getMessageFromModal(payload, index) {
        if (payload.success) {
            if (index !== undefined) {
                this.scheduleList[index] = payload.schedule;
            }
            else {
                this.scheduleList.push(payload.schedule);
            }
            this.onSchedulesUpdate.emit(this.scheduleList);
        }
    }
    removeSchedule(schedule, index, event) {
        event.preventDefault();
        this.scheduleList.splice(index, 1);
        this.onSchedulesUpdate.emit(this.scheduleList);
    }
}
ExportSchedulesComponent.ɵfac = function ExportSchedulesComponent_Factory(t) { return new (t || ExportSchedulesComponent)(ɵngcc0.ɵɵdirectiveInject(ReportsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.BsModalService), ɵngcc0.ɵɵdirectiveInject(CronService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OptionsService)); };
ExportSchedulesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ExportSchedulesComponent, selectors: [["export-schedules"]], inputs: { exportId: "exportId" }, outputs: { onSchedulesUpdate: "onSchedulesUpdate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 12, consts: [["class", "flex-row", 4, "ngIf"], [4, "ngIf"], ["class", "alert alert-warning max-width-100", "role", "alert", "translate", "", 4, "ngIf"], ["type", "button", 1, "btn-add-block", "m-t-16", 3, "title", "disabled", "click"], [3, "c8yIcon"], [1, "flex-row"], ["translate", ""], ["translate", "", 1, "alert", "alert-warning", "max-width-100"], ["class", "c8y-empty-state text-center max-width-100", 4, "ngIf"], ["class", "c8y-list__group", 4, "ngIf"], [1, "c8y-empty-state", "text-center", "max-width-100"], ["c8yIcon", "c8y-report", 1, "c8y-icon-duocolor"], [1, "c8y-list__group"], [1, "c8y-list__item", "hidden-xs"], [1, "c8y-list__item__block"], [1, "c8y-list__item__icon"], [1, "p-l-24"], [1, "c8y-list__item__body"], [1, "col-sm-6"], [1, "m-0"], [1, "col-sm-6", "m-r-40"], ["class", "c8y-list__item flex-row pointer", 3, "click", 4, "ngFor", "ngForOf"], [1, "c8y-list__item", "flex-row", "pointer", 3, "click"], [1, "c8y-list__item__body", "flex-row"], [1, "col-sm-6", "col-xs-6"], [1, "text-truncate", 3, "title"], [1, "flex-row", "a-i-baseline"], ["c8yIcon", "calendar", 1, "text-muted", "m-r-4"], [1, "smart-rule-information"], ["ngNonBindable", "", "translate", "", 3, "translateParams", 4, "ngIf"], [1, "c8y-list__item__actions", 3, "click"], ["dropdown", "", 1, "settings", "dropdown"], ["dropdownToggle", "", "aria-haspopup", "true", "aria-expanded", "false", 1, "dropdown-toggle", "c8y-dropdown", 3, "title"], ["class", "dropdown-menu dropdown-menu-right", 4, "dropdownMenu"], ["translate", "", 3, "translateParams"], [1, "dropdown-menu", "dropdown-menu-right"], ["role", "menuitem"], [3, "title", "disabled", "click"], ["role", "alert", "translate", "", 1, "alert", "alert-warning", "max-width-100"]], template: function ExportSchedulesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, ExportSchedulesComponent_div_1_Template, 4, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(2, ExportSchedulesComponent_div_2_Template, 3, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(3, ExportSchedulesComponent_div_3_Template, 3, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(4, ExportSchedulesComponent_div_4_Template, 2, 0, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "button", 3);
        ɵngcc0.ɵɵlistener("click", function ExportSchedulesComponent_Template_button_click_5_listener() { return ctx.addSchedule(); });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelement(7, "i", 4);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loadingStatus.inProgress);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loadingStatus.inProgress && ctx.loadingStatus.done && ctx.loadingStatus.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loadingStatus.inProgress && !ctx.loadingStatus.done && !ctx.loadingStatus.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasRequiredRole);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 8, "Add schedule"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.hasRequiredRole);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 10, "Add schedule"), " ");
    } }, directives: [ɵngcc5.NgIf, ɵngcc1.IconDirective, ɵngcc1.LoadingComponent, ɵngcc1.C8yTranslateDirective, ɵngcc5.NgForOf, ɵngcc7.BsDropdownDirective, ɵngcc7.BsDropdownToggleDirective, ɵngcc7.BsDropdownMenuDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc5.DecimalPipe], encapsulation: 2 });
ExportSchedulesComponent.ctorParameters = () => [
    { type: ReportsService },
    { type: BsModalService },
    { type: CronService },
    { type: TranslateService },
    { type: UserService },
    { type: OptionsService }
];
ExportSchedulesComponent.propDecorators = {
    exportId: [{ type: Input }],
    onSchedulesUpdate: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExportSchedulesComponent, [{
        type: Component,
        args: [{
                selector: 'export-schedules',
                template: "<div>\n  <div *ngIf=\"loadingStatus.inProgress\" class=\"flex-row\">\n    <c8y-loading></c8y-loading>\n    <span translate>Retrieving schedules\u2026</span>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && loadingStatus.done && loadingStatus.error\">\n    <div class=\"alert alert-warning max-width-100\" translate>\n      Could not load schedules list.\n    </div>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && !loadingStatus.done && !loadingStatus.error\">\n    <div class=\"c8y-empty-state text-center max-width-100\" *ngIf=\"!scheduleList.length\">\n      <h1 c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></h1>\n      <h3 translate>No export schedules defined.</h3>\n    </div>\n\n    <div class=\"c8y-list__group\" *ngIf=\"scheduleList.length\">\n      <div class=\"c8y-list__item hidden-xs\">\n        <div class=\"c8y-list__item__block\">\n          <div class=\"c8y-list__item__icon\">\n            <i class=\"p-l-24\"></i>\n          </div>\n          <div class=\"c8y-list__item__body\">\n            <div class=\"flex-row\">\n              <div class=\"col-sm-6\">\n                <label class=\"m-0\">\n                  {{ 'Description' | translate }}\n                </label>\n              </div>\n              <div class=\"col-sm-6 m-r-40\">\n                <label class=\"m-0\">\n                  {{ 'Frequency' | translate }}\n                </label>\n              </div>\n            </div>\n          </div>\n          <span></span>\n        </div>\n      </div>\n\n      <div\n        class=\"c8y-list__item flex-row pointer\"\n        *ngFor=\"let schedule of scheduleList; index as i\"\n        (click)=\"editSchedule(schedule, i, $event)\"\n      >\n        <div class=\"c8y-list__item__block\">\n          <div class=\"c8y-list__item__icon\">\n            <i c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"c8y-list__item__body flex-row\">\n            <div class=\"col-sm-6 col-xs-6\">\n              <div class=\"text-truncate\" title=\"{{ schedule.emailConfig.subject }}\">\n                {{ schedule.emailConfig.subject }}\n              </div>\n            </div>\n            <div class=\"col-sm-6 col-xs-6\">\n              <div class=\"flex-row a-i-baseline\">\n                <i c8yIcon=\"calendar\" class=\"text-muted m-r-4\"></i>\n                <span class=\"smart-rule-information\">\n                  <span\n                    *ngIf=\"cronService.getBase(schedule.cronConfig) === 2\"\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ minutes: schedule.cronConfig.minute | number: '2.0-0' }\"\n                  >\n                    Hourly: {{ minutes }} minute(s) past the hour.\n                  </span>\n                  <span\n                    *ngIf=\"cronService.getBase(schedule.cronConfig) === 3\"\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{\n                      hour: schedule.cronConfig.hour | number: '2.0-0',\n                      minutes: schedule.cronConfig.minute | number: '2.0-0'\n                    }\"\n                  >\n                    Daily: at {{ hour }}:{{ minutes }}.\n                  </span>\n                  <span\n                    *ngIf=\"cronService.getBase(schedule.cronConfig) === 4\"\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{\n                      weekDay: cronService.getWeekDayName(schedule.cronConfig),\n                      hour: schedule.cronConfig.hour | number: '2.0-0',\n                      minutes: schedule.cronConfig.minute | number: '2.0-0'\n                    }\"\n                  >\n                    Weekly: {{ weekDay }}, at {{ hour }}:{{ minutes }}.\n                  </span>\n                  <span\n                    *ngIf=\"cronService.getBase(schedule.cronConfig) === 5\"\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{\n                      monthDay: cronService.getMonthDayName(schedule.cronConfig),\n                      hour: schedule.cronConfig.hour | number: '2.0-0',\n                      minutes: schedule.cronConfig.minute | number: '2.0-0'\n                    }\"\n                  >\n                    Monthly: {{ monthDay }} day of the month, at {{ hour }}:{{ minutes }}.\n                  </span>\n                  <span\n                    *ngIf=\"cronService.getBase(schedule.cronConfig) === 6\"\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{\n                      month: cronService.getMonthName(schedule.cronConfig),\n                      monthDay: cronService.getMonthDayName(schedule.cronConfig),\n                      hour: schedule.cronConfig.hour | number: '2.0-0',\n                      minutes: schedule.cronConfig.minute | number: '2.0-0'\n                    }\"\n                  >\n                    Yearly: {{ month }}, {{ monthDay }} day of the month, at {{ hour }}:{{\n                      minutes\n                    }}.\n                  </span>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"c8y-list__item__actions\" (click)=\"$event.stopPropagation()\">\n            <div class=\"settings dropdown\" dropdown>\n              <button\n                class=\"dropdown-toggle c8y-dropdown\"\n                dropdownToggle\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n                title=\"{{ 'Actions' | translate }}\"\n              >\n                <i [c8yIcon]=\"'ellipsis-v'\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"hasRequiredRole ? buttonLabels.edit : buttonLabels.editNoPermission\"\n                    (click)=\"editSchedule(schedule, i, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'pencil'\"></i> {{ 'Edit' | translate }}\n                  </button>\n                </li>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"\n                      hasRequiredRole ? buttonLabels.duplicate : buttonLabels.duplicateNoPermission\n                    \"\n                    (click)=\"duplicateSchedule(schedule, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'copy'\"></i> {{ 'Duplicate' | translate }}\n                  </button>\n                </li>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"\n                      hasRequiredRole ? buttonLabels.delete : buttonLabels.deleteNoPermission\n                    \"\n                    (click)=\"removeSchedule(schedule, i, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'trash'\"></i> {{ 'Delete' | translate }}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"alert alert-warning max-width-100\" *ngIf=\"!hasRequiredRole\" role=\"alert\" translate>\n    You don't have the permission required to schedule exports.\n  </div>\n  <button\n    type=\"button\"\n    class=\"btn-add-block m-t-16\"\n    title=\"{{ 'Add schedule' | translate }}\"\n    (click)=\"addSchedule()\"\n    [disabled]=\"!hasRequiredRole\"\n  >\n    <i [c8yIcon]=\"'plus-circle'\"></i>\n    {{ 'Add schedule' | translate }}\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ReportsService }, { type: ɵngcc4.BsModalService }, { type: CronService }, { type: ɵngcc3.TranslateService }, { type: ɵngcc2.UserService }, { type: ɵngcc1.OptionsService }]; }, { onSchedulesUpdate: [{
            type: Output
        }], exportId: [{
            type: Input
        }] }); })();

class CronComponent {
    constructor(cronService) {
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.emittedCron = {
            valid: false,
            cron: ''
        };
        this.base = Base.Initial;
        //
    }
    ngOnInit() {
        this.daysOfWeekPosix = this.cronService.daysOfWeekPosix;
        this.daysOfMonth = this.cronService.daysOfMonth;
        this.months = this.cronService.months;
        this.hours = this.cronService.hours;
        this.minutes = this.cronService.minutes;
        this.intervals = this.cronService.intervals;
        this.cronConfig = this.cronService.generateCronConfig(this.cronIn);
        this.base = this.cronService.getBase(this.cronConfig);
    }
    onChangeSelect() {
        this.cronService.clearNextModels(this.base, this.cronConfig);
        this.emittedCron.valid = this.cronService.validateModels(this.base, this.cronConfig);
        this.emittedCron.cron = this.cronService.generateCron(this.cronConfig);
        this.emitter.emit(this.emittedCron);
    }
}
CronComponent.ɵfac = function CronComponent_Factory(t) { return new (t || CronComponent)(ɵngcc0.ɵɵdirectiveInject(CronService)); };
CronComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CronComponent, selectors: [["cron"]], inputs: { cronIn: "cronIn" }, outputs: { emitter: "emitter" }, decls: 15, vars: 7, consts: [[1, "cron-wrap"], [1, "form-group", "smart-cron-job-every"], ["for", "smart-cron-job-every", "translate", "", 1, "control-label"], [1, ""], [1, "c8y-select-wrapper"], ["id", "smart-cron-job-every", "required", "true", 1, "cron-select", "form-control", 3, "ngModel", "ngModelChange", "change"], ["value", "1", "translate", "", 4, "ngIf"], [3, "ngValue", 4, "ngFor", "ngForOf"], [1, "row"], ["class", "form-group smart-cron-job-on col-md-6", 4, "ngIf"], ["class", "form-group smart-cron-job-of col-md-6", 4, "ngIf"], ["class", "form-group smart-cron-job-on-the col-md-6", 4, "ngIf"], ["class", "form-group smart-cron-job-at", 4, "ngIf"], ["value", "1", "translate", ""], [3, "ngValue"], [1, "form-group", "smart-cron-job-on", "col-md-6"], ["for", "smart-cron-job-on", "translate", "", 1, "control-label"], ["id", "smart-cron-job-on", 1, "cron-select", "form-control", "day-value", 3, "ngModel", "ngModelChange", "change"], [1, "form-group", "smart-cron-job-of", "col-md-6"], ["for", "smart-cron-job-of", "translate", "", 1, "control-label"], ["id", "smart-cron-job-of", 1, "cron-select", "form-control", "month-value", 3, "ngModel", "ngModelChange", "change"], [1, "form-group", "smart-cron-job-on-the", "col-md-6"], ["for", "smart-cron-job-on-the", "translate", "", 1, "control-label"], ["id", "smart-cron-job-on-the", 1, "cron-select", "form-control", "day-of-month-value", 3, "ngModel", "ngModelChange", "change"], [1, "form-group", "smart-cron-job-at"], ["for", "smart-cron-job-at-hour", 1, "control-label"], ["translate", "", 4, "ngIf"], [1, "form-inline"], ["class", "c8y-select-wrapper", 4, "ngIf"], [4, "ngIf"], ["id", "smart-cron-job-at-minute", 1, "cron-select", "form-control", "minute-value", 3, "ngModel", "ngModelChange", "change"], ["translate", ""], ["id", "smart-cron-job-at-hour", 1, "cron-select", "form-control", "hour-value", 3, "ngModel", "ngModelChange", "change"]], template: function CronComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "label", 2);
        ɵngcc0.ɵɵtext(3, " Interval ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "select", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function CronComponent_Template_select_ngModelChange_6_listener($event) { return ctx.base = $event; })("change", function CronComponent_Template_select_change_6_listener() { return ctx.onChangeSelect(); });
        ɵngcc0.ɵɵtemplate(7, CronComponent_option_7_Template, 2, 0, "option", 6);
        ɵngcc0.ɵɵtemplate(8, CronComponent_option_8_Template, 3, 4, "option", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "span");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 8);
        ɵngcc0.ɵɵtemplate(11, CronComponent_div_11_Template, 7, 2, "div", 9);
        ɵngcc0.ɵɵtemplate(12, CronComponent_div_12_Template, 8, 2, "div", 10);
        ɵngcc0.ɵɵtemplate(13, CronComponent_div_13_Template, 8, 2, "div", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, CronComponent_div_14_Template, 12, 6, "div", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngModel", ctx.base);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.base === 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.intervals);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.base == 4);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.base == 6);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.base >= 5);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.base >= 2);
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc6.SelectControlValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc5.NgIf, ɵngcc5.NgForOf, ɵngcc6.NgSelectOption, ɵngcc6.ɵNgSelectMultipleOption], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc5.DecimalPipe], encapsulation: 2 });
CronComponent.ctorParameters = () => [
    { type: CronService }
];
CronComponent.propDecorators = {
    cronIn: [{ type: Input }],
    emitter: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CronComponent, [{
        type: Component,
        args: [{
                selector: 'cron',
                template: "<div class=\"cron-wrap\">\n  <div class=\"form-group smart-cron-job-every\">\n    <label for=\"smart-cron-job-every\" class=\"control-label\" translate>\n      Interval\n    </label>\n    <div class=\"\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control\"\n          id=\"smart-cron-job-every\"\n          [(ngModel)]=\"base\"\n          required=\"true\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngIf=\"base === 1\" value=\"1\" translate>\n            Select\u2026\n          </option>\n          <option *ngFor=\"let baseInterval of intervals\" [ngValue]=\"baseInterval.value\">\n            {{ baseInterval.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group smart-cron-job-on col-md-6\" *ngIf=\"base == 4\">\n      <label class=\"control-label\" for=\"smart-cron-job-on\" translate>\n        Day\n      </label>\n\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control day-value\"\n          id=\"smart-cron-job-on\"\n          [(ngModel)]=\"cronConfig.weekday\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfWeek of daysOfWeekPosix\" [ngValue]=\"dayOfWeek.value\">\n            {{ dayOfWeek.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-of col-md-6\" *ngIf=\"base == 6\">\n      <label for=\"smart-cron-job-of\" class=\"control-label\" translate>\n        Month\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-of\"\n            class=\"cron-select form-control month-value\"\n            [(ngModel)]=\"cronConfig.month\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let month of months\" [ngValue]=\"month.value\">\n              {{ month.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-on-the col-md-6\" *ngIf=\"base >= 5\">\n      <label for=\"smart-cron-job-on-the\" class=\"control-label\" translate>\n        Day\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-on-the\"\n            class=\"cron-select form-control day-of-month-value\"\n            [(ngModel)]=\"cronConfig.day\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let dayOfMonth of daysOfMonth\" [ngValue]=\"dayOfMonth.value\">\n              {{ dayOfMonth.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-at\" *ngIf=\"base >= 2\">\n    <label for=\"smart-cron-job-at-hour\" class=\"control-label\">\n      <span *ngIf=\"base >= 3\" translate>Time</span>\n      <span *ngIf=\"base < 3\" translate>Minutes</span>\n    </label>\n    <div>\n      <div class=\"form-inline\">\n        <div class=\"c8y-select-wrapper\" *ngIf=\"base >= 3\">\n          <select\n            id=\"smart-cron-job-at-hour\"\n            class=\"cron-select form-control hour-value\"\n            [(ngModel)]=\"cronConfig.hour\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let hour of hours\" [ngValue]=\"hour.value\">\n              {{ hour.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n        <span *ngIf=\"base >= 3\"> : </span>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"cron-select form-control minute-value\"\n            id=\"smart-cron-job-at-minute\"\n            [(ngModel)]=\"cronConfig.minute\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let minute of minutes\" [ngValue]=\"minute.value\">\n              {{ minute.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: CronService }]; }, { emitter: [{
            type: Output
        }], cronIn: [{
            type: Input
        }] }); })();

/**
 * The angular module definition for reports.
 * @exports ExportSchedulesComponent
 * @exports ScheduleModalComponent
 * @exports CronComponent
 */
class ReportsModule {
}
ReportsModule.ɵfac = function ReportsModule_Factory(t) { return new (t || ReportsModule)(); };
ReportsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReportsModule });
ReportsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ReportsService, CronService], imports: [[CoreModule, FormsModule, BsDropdownModule, TooltipModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportsModule, [{
        type: NgModule,
        args: [{
                declarations: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
                imports: [CoreModule, FormsModule, BsDropdownModule, TooltipModule],
                entryComponents: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
                providers: [ReportsService, CronService],
                exports: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReportsModule, { declarations: function () { return [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]; }, imports: function () { return [CoreModule, FormsModule, BsDropdownModule, TooltipModule]; }, exports: function () { return [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]; } }); })();

const exportSchedulesComponent = downgradeComponent({
    component: ExportSchedulesComponent
});

const reportsService = downgradeInjectable(ReportsService);

const NAME = 'c8y.upgrade.reports';
const angularJsModule = angular
    .module(NAME, [])
    .directive('c8yExportSchedules', exportSchedulesComponent)
    .service('c8yReportsService', reportsService);
const ng1Modules = [NAME];
registerNgModule(ng1Modules);

/**
 * Generated bundle index. Do not edit.
 */

export { ActionType, Base, CronComponent, CronService, ExportSchedulesComponent, ReportsModule, ReportsService, ScheduleModalComponent, exportSchedulesComponent, ng1Modules, reportsService };

//# sourceMappingURL=c8y-ngx-components-reports.js.map