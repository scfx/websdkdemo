import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Directive, ElementRef, Injector, Input, Component, ViewChild, forwardRef, HostListener, Injectable, EventEmitter, Output, NgModule } from '@angular/core';
import { QueriesUtil, InventoryService } from '@c8y/client';
import * as i3 from '@c8y/ngx-components';
import { FilteringFormRendererContext, CellRendererContext, gettext, SendStatus, PushStatus, Status, AlertService, ModalService, FilteringActionType, DataGridComponent, CommonModule, FormsModule, DeviceStatusModule, DataGridModule } from '@c8y/ngx-components';
import * as i2 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import { cloneDeep, get, map, sortBy, remove, transform, identity, assign, forEach } from 'lodash-es';
import { UpgradeComponent } from '@angular/upgrade/static';
import * as i1 from '@c8y/client';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';

// TODO: MTM-31785: find replacement for schema-form ng1 library
class SchemaFormComponent extends UpgradeComponent {
    constructor(elementRef, injector) {
        super('c8ySchemaForm', elementRef, injector);
    }
}
SchemaFormComponent.decorators = [
    { type: Directive, args: [{
                selector: 'c8y-schema-form'
            },] }
];
SchemaFormComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
SchemaFormComponent.propDecorators = {
    schema: [{ type: Input }],
    model: [{ type: Input }],
    inputForm: [{ type: Input, args: ['form',] }],
    inputOptions: [{ type: Input, args: ['options',] }]
};

class BaseFilteringFormRendererComponent {
    constructor(context) {
        this.context = context;
    }
    onEnterKeyDown(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        this.schema = cloneDeep(column.filteringConfig.schema);
        this.form = cloneDeep(column.filteringConfig.form);
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    }
    ngAfterViewInit() {
        setTimeout(() => {
            try {
                this.schemaFormComponent.elementRef.nativeElement.querySelector('input').focus();
            }
            catch (e) {
                // intended empty
            }
        }, 10);
    }
    canApply() {
        return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
}
BaseFilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            },] }
];
BaseFilteringFormRendererComponent.ctorParameters = () => [
    { type: FilteringFormRendererContext }
];
BaseFilteringFormRendererComponent.propDecorators = {
    schemaFormComponent: [{ type: ViewChild, args: [forwardRef(() => SchemaFormComponent), { static: false },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }]
};

class BaseDeviceGridColumn {
    constructor(config = {}) {
        this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;
        Object.assign(this, config);
    }
    /**
     * Gets a label template to be used in the schema-form's `type: 'template'` form item.
     * @param label The label to be displayed.
     * @param options Additional options:
     *   - `showWildcardTooltip`: `boolean` - appends a tooltip explaining wildcard usage
     * @returns The string with the template.
     */
    getLabelTemplate(label, options = {}) {
        const wildcardTooltip = `
      <i
        class="text-info"
        c8y-icon="info-circle"
        title="{{ 'Use * as a wildcard character' | translate }}"
      ></i>
    `;
        return `
      <label>
        <span>
          {{ '${label}' | translate }}
        </span>
        ${options.showWildcardTooltip ? wildcardTooltip : ''}
      </label>
    `;
    }
}

/**
 * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
 */
class ColumnUtilService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    getAlarmsHref(device) {
        return `${this.getHref(device)}/alarms`;
    }
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}group/${groupOrDevice.id}`;
        }
        return `${prefix}device/${groupOrDevice.id}`;
    }
    getParentsNames(device, featuredParentId) {
        const assetParentsReferences = device.assetParents.references;
        const assetParents = map(assetParentsReferences, 'managedObject');
        const sortedByName = sortBy(assetParents, ['name']);
        const featuredItems = remove(sortedByName, { id: featuredParentId });
        const items = featuredItems.concat(sortedByName);
        const names = map(items, 'name');
        return names.join(', ');
    }
    getModel(device) {
        const hardware = this.getHardware(device);
        return hardware && hardware.model;
    }
    getProperName(device) {
        const { id, name } = device;
        return name ? name : this.translateService.instant('Device {{id}}', { id });
    }
    getSerialNumber(device) {
        const hardware = this.getHardware(device);
        const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
}
ColumnUtilService.decorators = [
    { type: Injectable }
];
ColumnUtilService.ctorParameters = () => [
    { type: TranslateService }
];

class AlarmsCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
AlarmsCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<a class=\"listLink\" [href]=\"columnUtilService.getAlarmsHref(context.item)\">\n  <small class=\"status critical text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.critical\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.critical }}\n    <i [c8yIcon]=\"'warning'\"></i>\n  </small>\n  <small class=\"status major text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.major\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.major }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small class=\"status minor text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.minor\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.minor }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small class=\"status warning text-nowrap\" *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.warning\">\n    {{ context.item.c8y_ActiveAlarmsStatus?.warning }}\n    <i [c8yIcon]=\"'circle'\"></i>\n  </small>\n</a>\n"
            },] }
];
AlarmsCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: ColumnUtilService }
];

class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'alarms';
        this.header = gettext('Alarms');
        this.cellRendererComponent = AlarmsCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    critical: {
                        type: 'boolean'
                    },
                    major: {
                        type: 'boolean'
                    },
                    minor: {
                        type: 'boolean'
                    },
                    warning: {
                        type: 'boolean'
                    },
                    none: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with active`alarms`'))
                },
                {
                    key: 'critical',
                    title: gettext('Critical alarms')
                },
                {
                    key: 'major',
                    title: gettext('Major alarms')
                },
                {
                    key: 'minor',
                    title: gettext('Minor alarms')
                },
                {
                    key: 'warning',
                    title: gettext('Warnings')
                },
                {
                    key: 'none',
                    title: gettext('No alarms')
                }
            ],
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], sev => {
                            const zero = {};
                            const has = { __not: { __has: undefined } };
                            const key = `c8y_ActiveAlarmsStatus.${sev}`;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
    }
}

class GroupCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
GroupCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<span\n  title=\"{{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n  class=\"text-truncate\"\n>\n  {{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n"
            },] }
];
GroupCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: ColumnUtilService }
];

class GroupFilteringFormRendererComponent {
    constructor(context) {
        this.context = context;
        this.preselected = [];
    }
    onEnterKeyDown(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.preselected = this.model.selectedNodes || [];
    }
    ngAfterViewInit() {
        setTimeout(() => {
            try {
                this.assetSelector.nativeElement.querySelector('input').focus();
            }
            catch (ex) {
                // intended empty
            }
        }, 250);
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
    selectionChanged(nodes) {
        this.model.selectedNodes = nodes;
    }
}
GroupFilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<c8y-asset-selector\n  #assetSelector\n  [selected]=\"preselected\"\n  (onChange)=\"selectionChanged($event)\"\n></c8y-asset-selector>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            },] }
];
GroupFilteringFormRendererComponent.ctorParameters = () => [
    { type: FilteringFormRendererContext }
];
GroupFilteringFormRendererComponent.propDecorators = {
    assetSelector: [{ type: ViewChild, args: ['assetSelector', { static: false, read: ElementRef },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }]
};

class GroupDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'group';
        this.header = gettext('Group');
        this.cellRendererComponent = GroupCellRendererComponent;
        this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            getFilter(model) {
                const filter = {};
                if (model.selectedNodes) {
                    filter.__or = model.selectedNodes.map((mo) => {
                        if (mo.c8y_DeviceQueryString) {
                            return { __useFilterQueryString: mo.c8y_DeviceQueryString };
                        }
                        return { __bygroupid: mo.id };
                    });
                }
                return filter;
            }
        };
        this.sortable = false;
    }
}

class ImeiDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.path = 'c8y_Mobile.imei';
        this.name = 'imei';
        this.header = gettext('IMEI');
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    imeis: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with IMEI'), { showWildcardTooltip: true })
                },
                {
                    key: 'imeis',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'imeis[]',
                            notitle: true,
                            placeholder: gettext('e.g. 46543432321')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.imeis.length) {
                    filter[self.path] = { __in: model.imeis };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

class ModelCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
ModelCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: `
    {{ columnUtilService.getModel(context.item) }}
  `
            },] }
];
ModelCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: ColumnUtilService }
];

class ModelDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const hardwareModelPath = 'c8y_Hardware.model';
        const vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
        this.name = 'model';
        this.header = gettext('Model');
        this.cellRendererComponent = ModelCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    models: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with model'), { showWildcardTooltip: true })
                },
                {
                    key: 'models',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'models[]',
                            notitle: true,
                            placeholder: gettext('e.g. ModelName')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.models.length) {
                    filter.__or = {
                        [hardwareModelPath]: { __in: model.models },
                        [vendingModelPath]: { __in: model.models }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
        };
    }
}

class NameCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
NameCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: `
    <a
      [href]="columnUtilService.getHref(context.item)"
      title="{{ columnUtilService.getProperName(context.item) }}"
      class="interact"
    >
      {{ columnUtilService.getProperName(context.item) }}
    </a>
  `
            },] }
];
NameCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: ColumnUtilService }
];

class NameDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'name';
        this.path = 'name';
        this.header = gettext('Name');
        this.cellCSSClassName = "data-record-header" /* Header */;
        this.cellRendererComponent = NameCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    names: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with name'), { showWildcardTooltip: true })
                },
                {
                    key: 'names',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'names[]',
                            notitle: true,
                            placeholder: gettext('e.g. My device')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.names.length) {
                    filter.name = { __in: model.names };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

class RegistrationDateCellRendererComponent {
    constructor(context) {
        this.context = context;
    }
}
RegistrationDateCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: `
    {{ context.value | c8yDate }}
  `
            },] }
];
RegistrationDateCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext }
];

class RegistrationDateDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.path = 'creationTime';
        this.name = 'registrationDate';
        this.header = gettext('Registration date');
        this.cellRendererComponent = RegistrationDateCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    registrationDate: {
                        type: 'object',
                        properties: {
                            after: {
                                type: 'string',
                                format: 'datetime'
                            },
                            before: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            form: [
                {
                    key: 'registrationDate.after',
                    title: gettext('Show devices registered after'),
                    maxDateKey: 'registrationDate.before'
                },
                {
                    key: 'registrationDate.before',
                    title: gettext('And before`date`'),
                    minDateKey: 'registrationDate.after'
                }
            ],
            getFilter(model) {
                const filter = {};
                const dates = model && model.registrationDate;
                if (dates && (dates.after || dates.before)) {
                    filter.__and = [];
                    if (dates.after) {
                        const after = self.formatDate(dates.after);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __gt: after },
                                [`${self.path}.date`]: { __gt: after }
                            }
                        });
                    }
                    if (dates.before) {
                        const before = self.formatDate(dates.before);
                        filter.__and.push({
                            __or: {
                                [self.path]: { __lt: before },
                                [`${self.path}.date`]: { __lt: before }
                            }
                        });
                    }
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]
        };
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}

class SerialNumberCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
SerialNumberCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: `
    {{ columnUtilService.getSerialNumber(context.item) }}
  `
            },] }
];
SerialNumberCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: ColumnUtilService }
];

class SerialNumberDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        const vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        this.name = 'serialNumber';
        this.header = gettext('Serial number');
        this.cellRendererComponent = SerialNumberCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with serial number'), { showWildcardTooltip: true })
                },
                {
                    key: 'serialNumbers',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = {
                        [hardwareSerialNumberPath]: { __in: model.serialNumbers },
                        [vendingSerialNumberPath]: { __in: model.serialNumbers }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
    }
}

class StatusCellRendererComponent {
    constructor(context) {
        this.context = context;
    }
}
StatusCellRendererComponent.decorators = [
    { type: Component, args: [{
                template: `
    <device-status [mo]="context.item"></device-status>
  `
            },] }
];
StatusCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext }
];

class StatusDeviceGridColumn extends BaseDeviceGridColumn {
    constructor() {
        super();
        const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';
        const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };
        const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };
        const availabilityStatusPath = 'c8y_Availability.status';
        const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };
        const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };
        const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };
        const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };
        const connectionStatusPath = 'c8y_Connection.status';
        const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };
        const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };
        const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };
        const deviceUnderMaintenance = {
            __or: [
                responseIntervalLessThanOrEqualTo0,
                availabilityStatusMaintenance,
                connectionStatusMaintenance
            ]
        };
        const deviceNotUnderMaintenance = {
            // using __and of __nots because backend does not support __not with __ors
            __and: [
                { __not: responseIntervalLessThanOrEqualTo0 },
                { __not: availabilityStatusMaintenance },
                { __not: connectionStatusMaintenance }
            ]
        };
        this.name = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendOnline: {
                        type: 'boolean'
                    },
                    sendOffline: {
                        type: 'boolean'
                    },
                    sendUnknown: {
                        type: 'boolean'
                    },
                    sendNotMonitored: {
                        type: 'boolean'
                    },
                    pushOnline: {
                        type: 'boolean'
                    },
                    pushOffline: {
                        type: 'boolean'
                    },
                    pushNotMonitored: {
                        type: 'boolean'
                    },
                    maintenance: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with send status'))
                },
                {
                    key: 'sendOnline',
                    title: gettext('Online')
                },
                {
                    key: 'sendOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'sendUnknown',
                    title: gettext('Unknown')
                },
                {
                    key: 'sendNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with push status'))
                },
                {
                    key: 'pushOnline',
                    title: gettext('Online')
                },
                {
                    key: 'pushOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'pushNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with maintenance status'))
                },
                {
                    key: 'maintenance',
                    title: gettext('Device is under maintenance')
                }
            ],
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model) {
                    if (model.sendOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]
                        });
                    }
                    if (model.sendOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]
                        });
                    }
                    if (model.sendUnknown) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]
                        });
                    }
                    if (model.sendNotMonitored || model.pushNotMonitored) {
                        ors.push(responseIntervalNotDefined);
                    }
                    if (model.pushOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusConnected]
                        });
                    }
                    if (model.pushOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]
                        });
                    }
                    if (model.maintenance) {
                        ors.push(deviceUnderMaintenance);
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
    }
}

class SystemIdDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.path = 'id';
        this.name = 'systemId';
        this.header = gettext('System ID');
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    ids: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with system ID'), { showWildcardTooltip: true })
                },
                {
                    key: 'ids',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'ids[]',
                            notitle: true,
                            placeholder: gettext('e.g. 10300')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.ids.length) {
                    filter[self.path] = { __in: model.ids };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

class DeviceGridService {
    constructor(inventoryService, translateService, alertService, modal, columnUtilService = new ColumnUtilService(translateService)) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.alertService = alertService;
        this.modal = modal;
        this.columnUtilService = columnUtilService;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';
        this.DEFAULT_PAGE_SIZE = 20;
        this.queriesUtil = new QueriesUtil();
    }
    getDefaultColumns() {
        const defaultColumns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getDefaultPagination() {
        return {
            pageSize: 10,
            currentPage: 1
        };
    }
    getInfiniteScrollPagination() {
        return {
            pageSize: 50,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [
            {
                type: "DELETE" /* Delete */,
                callback: (item) => this.delete(item)
            }
        ];
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getDefaultHeaderActionControls() {
        return [];
    }
    getProperName(device) {
        return this.columnUtilService.getProperName(device);
    }
    getModel(device) {
        return this.columnUtilService.getModel(device);
    }
    getSerialNumber(device) {
        return this.columnUtilService.getSerialNumber(device);
    }
    getParentsNames(device, featuredParentId) {
        return this.columnUtilService.getParentsNames(device, featuredParentId);
    }
    getHref(groupOrDevice, prefix = '#/') {
        return this.columnUtilService.getHref(groupOrDevice, prefix);
    }
    getAlarmsHref(device) {
        return this.columnUtilService.getAlarmsHref(device);
    }
    getUserConfiguredColumns(columns) {
        const config = this.getConfig();
        if (config.columns.length > 0) {
            const reOrderedColumns = [];
            let noConfigColumns = [];
            try {
                noConfigColumns = columns.filter(col => !config.columns.includes(col));
                config.columns.forEach(({ visible, name, sortOrder }) => {
                    const columnToReorder = columns.find(col => col.name === name);
                    if (columnToReorder) {
                        columnToReorder.visible = visible;
                        columnToReorder.sortOrder = sortOrder;
                        reOrderedColumns.push(columnToReorder);
                    }
                });
            }
            catch (ex) {
                this.clearConfig();
            }
            return [...reOrderedColumns, ...noConfigColumns];
        }
        return columns;
    }
    delete(device) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Delete device'), this.translateService.instant(gettext(`You are about to delete device: "{{ name }}". Do you want to proceed?`), { name: device.name }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                yield this.inventoryService.delete(device);
                this.alertService.success(gettext('Device deleted.'));
            }
            catch (ex) {
                // only if not cancel from modal
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    getData(columns, pagination, query = {}, withChildren = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { withParents: true, withChildren });
            return this.inventoryService.list(filters);
        });
    }
    getChildDeviceData(columns, pagination, query = {}, withChildren = false, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const childDeviceFilters = true;
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { withParents: true, withChildren });
            return this.inventoryService.childDevicesList(id, filters);
        });
    }
    getCount(columns, pagination, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query)), { pageSize: 1, currentPage: 1 });
            return (yield this.inventoryService.list(filters)).paging.totalPages;
        });
    }
    getCountChildDevices(columns, pagination, query = {}, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const childDeviceFilters = true;
            const filters = Object.assign(Object.assign({}, this.getDevicesFilters(columns, pagination, query, childDeviceFilters)), { pageSize: 1, currentPage: 1 });
            return (yield this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
        });
    }
    getTotalChildDevices(query = {}, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                q: this.queriesUtil.buildQuery(query),
                pageSize: 1,
                withTotalPages: true
            };
            return (yield this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
        });
    }
    getTotal(query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const filters = {
                q: this.queriesUtil.buildQuery(query),
                pageSize: 1,
                withTotalPages: true
            };
            return (yield this.inventoryService.list(filters)).paging.totalPages;
        });
    }
    getDeviceQueryString(columns, query) {
        let fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    getQueryObj(columns, defaultFilter = {}) {
        return transform(columns, (query, column) => this.extendQueryByColumn(query, column), Object.assign({ __filter: {}, __orderby: [] }, defaultFilter));
    }
    getConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        const config = JSON.parse(localStorage.getItem(key));
        if (config === null) {
            return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };
        }
        return config;
    }
    saveConfig(config, key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        localStorage.setItem(key, JSON.stringify(config));
    }
    clearConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        localStorage.removeItem(key);
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
    getDevicesFilters(columns, pagination, query, childDeviceFilters) {
        return Object.assign(Object.assign({}, (childDeviceFilters
            ? { query: this.getDeviceQueryString(columns, query) }
            : { q: this.getDeviceQueryString(columns, query) })), { pageSize: pagination.pageSize, currentPage: pagination.currentPage, withChildren: false, withTotalPages: true });
    }
    extendQueryByColumn(query, column) {
        if (column.filterable && column.externalFilterQuery) {
            const getFilter = column.filteringConfig.getFilter || identity;
            const queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(obj => query.__filter.__and.push(obj));
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            const cs = {};
            forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {
                cs[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs);
        }
        return query;
    }
}
DeviceGridService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceGridService_Factory() { return new DeviceGridService(i0.ɵɵinject(i1.InventoryService), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i3.ModalService), i0.ɵɵinject(ColumnUtilService)); }, token: DeviceGridService, providedIn: "root" });
DeviceGridService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DeviceGridService.ctorParameters = () => [
    { type: InventoryService },
    { type: TranslateService },
    { type: AlertService },
    { type: ModalService },
    { type: ColumnUtilService }
];

class DeviceGridComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        /** The title for the data grid, it's displayed in the grid's header. */
        this.title = gettext('Devices');
        /** The label for load more button. */
        this.loadMoreItemsLabel = gettext('Load more devices');
        /** The label for loading indicator. */
        this.loadingItemsLabel = gettext('Loading devices…');
        /** Determines whether items can be selected by clicking a checkbox in the first column. */
        this.selectable = false;
        /** Sets the base query which is appended to the request for data. */
        this.baseQuery = {};
        this.childDeviceGrid = false;
        /** Sets the withChildren query which is appended to the request. */
        this.withChildren = false;
        /** Emits an event when columns configuration changes. */
        this.onColumnsChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        /** Emits an event when items selection changes. The array contains ids of selected items. */
        this.itemsSelect = new EventEmitter();
        this.actionControls = [];
        this.columns = this.deviceGridService.getDefaultColumns();
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    /** The list of columns to be displayed in the grid. If not given, it defaults to standard columns. */
    set _columns(value) {
        if (value) {
            this.columns = this.deviceGridService.getUserConfiguredColumns(value);
        }
        else {
            this.columns = this.deviceGridService.getUserConfiguredColumns(this.deviceGridService.getDefaultColumns());
        }
    }
    /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.deviceGridService.getDefaultPagination();
        }
    }
    /** Sets load more mode. */
    set _infiniteScroll(infiniteScroll) {
        this.infiniteScroll = infiniteScroll;
        this.pagination = this.deviceGridService.getInfiniteScrollPagination();
    }
    /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.deviceGridService.getDefaultActionControls();
        }
    }
    /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        }
    }
    /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */
    set _headerActionControls(value) {
        if (value) {
            this.headerActionControls = value;
        }
        else {
            this.headerActionControls = this.deviceGridService.getDefaultHeaderActionControls();
        }
    }
    ngOnInit() {
        this.setActionControls();
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverSideDataResult;
            let filteredSize;
            let size;
            if (this.childDeviceGrid) {
                const { res, data, paging } = yield this.deviceGridService.getChildDeviceData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren, this.parentDeviceId);
                filteredSize = yield this.deviceGridService.getCountChildDevices(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.parentDeviceId);
                size = yield this.deviceGridService.getTotalChildDevices(this.baseQuery, this.parentDeviceId);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            else {
                const { res, data, paging } = yield this.deviceGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery, this.withChildren);
                filteredSize = yield this.deviceGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.baseQuery);
                size = yield this.deviceGridService.getTotal(this.baseQuery);
                serverSideDataResult = {
                    res,
                    data,
                    paging,
                    filteredSize,
                    size
                };
            }
            this.onColumnsChange.emit(dataSourceModifier.columns);
            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery));
            if (this.dataCallback) {
                serverSideDataResult = this.dataCallback(serverSideDataResult);
            }
            return serverSideDataResult;
        });
    }
    setActionControls() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.childDeviceGrid) {
                const deleteAction = {
                    type: "DELETE" /* Delete */,
                    callback: (device) => this.onDeleteDevice(device)
                };
                this.actionControls.push(deleteAction);
            }
            else {
                this.actionControls = this.deviceGridService.getDefaultActionControls();
            }
        });
    }
    onDeleteDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deviceGridService.delete(device);
            this.refresh.emit();
        });
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    }
    configChange(config) {
        this.deviceGridService.saveConfig(config);
    }
}
DeviceGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  (onConfigChange)=\"configChange($event)\"\n  [refresh]=\"refresh\"\n  [headerActionControls]=\"headerActionControls\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
            },] }
];
DeviceGridComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
DeviceGridComponent.propDecorators = {
    dataCallback: [{ type: Input }],
    refresh: [{ type: Input }],
    title: [{ type: Input }],
    loadMoreItemsLabel: [{ type: Input }],
    loadingItemsLabel: [{ type: Input }],
    _columns: [{ type: Input, args: ['columns',] }],
    _pagination: [{ type: Input, args: ['pagination',] }],
    _infiniteScroll: [{ type: Input, args: ['infiniteScroll',] }],
    _actionControls: [{ type: Input, args: ['actionControls',] }],
    selectable: [{ type: Input }],
    baseQuery: [{ type: Input }],
    _bulkActionControls: [{ type: Input, args: ['bulkActionControls',] }],
    _headerActionControls: [{ type: Input, args: ['headerActionControls',] }],
    childDeviceGrid: [{ type: Input }],
    parentDeviceId: [{ type: Input }],
    withChildren: [{ type: Input }],
    onColumnsChange: [{ type: Output }],
    onDeviceQueryStringChange: [{ type: Output }],
    itemsSelect: [{ type: Output }],
    dataGrid: [{ type: ViewChild, args: [DataGridComponent, { static: true },] }]
};

class DeviceGridModule {
}
DeviceGridModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],
                declarations: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                exports: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                providers: [DeviceGridService, ColumnUtilService]
            },] }
];

class CustomDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const self = this;
        this.name = 'custom';
        this.header = gettext('Custom');
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    exists: {
                        type: 'boolean',
                        default: false,
                        title: gettext('Only rows where value is defined')
                    },
                    equals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'exists'
                },
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Only rows where value equals to'), { showWildcardTooltip: true })
                },
                {
                    key: 'equals',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'equals[]',
                            notitle: true,
                            placeholder: gettext('e.g. value')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.exists) {
                    filter.__has = self.path;
                }
                if (model.equals) {
                    filter[self.path] = { __in: model.equals };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}

class TypeDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'type';
        this.path = 'type';
        this.header = gettext('Type');
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    types: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: this.getLabelTemplate(gettext('Show devices with type'), { showWildcardTooltip: true })
                },
                {
                    key: 'types',
                    notitle: true,
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'types[]',
                            notitle: true,
                            placeholder: gettext('e.g. MyType')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.types.length) {
                    filter.type = { __in: model.types };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };
    }
}

/**
 * Generated bundle index. Do not edit.
 */

export { AlarmsCellRendererComponent, AlarmsDeviceGridColumn, BaseDeviceGridColumn, BaseFilteringFormRendererComponent, ColumnUtilService, CustomDeviceGridColumn, DeviceGridComponent, DeviceGridModule, DeviceGridService, GroupCellRendererComponent, GroupDeviceGridColumn, GroupFilteringFormRendererComponent, ImeiDeviceGridColumn, ModelCellRendererComponent, ModelDeviceGridColumn, NameCellRendererComponent, NameDeviceGridColumn, RegistrationDateCellRendererComponent, RegistrationDateDeviceGridColumn, SchemaFormComponent, SerialNumberCellRendererComponent, SerialNumberDeviceGridColumn, StatusCellRendererComponent, StatusDeviceGridColumn, SystemIdDeviceGridColumn, TypeDeviceGridColumn, ColumnUtilService as ɵa, BaseFilteringFormRendererComponent as ɵb, GroupFilteringFormRendererComponent as ɵc, StatusCellRendererComponent as ɵd, NameCellRendererComponent as ɵe, ModelCellRendererComponent as ɵf, SerialNumberCellRendererComponent as ɵg, GroupCellRendererComponent as ɵh, RegistrationDateCellRendererComponent as ɵi, AlarmsCellRendererComponent as ɵj };
//# sourceMappingURL=c8y-ngx-components-device-grid.js.map
