import { __decorate, __awaiter } from 'tslib';
import { EventEmitter, Component, Output, ViewChildren, Input, ViewChild, NgModule } from '@angular/core';
import { gettext, ListItemRadioComponent, memoize, Status, ModalService, CoreModule, FormsModule } from '@c8y/ngx-components';
import { RepositoryType, RepositoryService, RepositoryModule } from '@c8y/ngx-components/repository';
import { TranslateService } from '@ngx-translate/core';
import { get, uniqWith, isEqual, property, uniq, has } from 'lodash-es';
import { BehaviorSubject, combineLatest, from } from 'rxjs';
import { switchMap, shareReplay, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { ReactiveFormsModule } from '@angular/forms';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationType, baseUrl, HOOK_LIST_BULK_TYPE } from '@c8y/ngx-components/operations/bulk-operations-service';

class SelectSoftwareStepComponent {
    constructor(repositoryService, translate) {
        this.repositoryService = repositoryService;
        this.translate = translate;
        this.software = new EventEmitter();
        this.textFilter$ = new BehaviorSubject('');
        this.deviceType$ = new BehaviorSubject('');
        this.deviceTypes = [];
        this.selectedDeviceType = { name: '' };
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software$ = combineLatest(this.textFilter$, this.deviceType$).pipe(switchMap(([name, deviceType]) => this.getSoftware(name, deviceType)), shareReplay(1));
        this.NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');
        this.loadDeviceTypes();
    }
    getBaseVersionsCount$(software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    }
    getVersions(software) {
        return this.repositoryService.listAllVersions(software);
    }
    getDeviceTypeTitle(software) {
        return get(software, 'c8y_Filter.type', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));
    }
    loadDeviceTypes() {
        this.deviceTypeSubscription = this.deviceType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(searchStr => {
            const query = { 'c8y_Filter.type': `*${searchStr}*` };
            return from(this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query }));
        }))
            .subscribe(result => {
            const { data } = result;
            this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })), isEqual);
        });
    }
    ngOnDestroy() {
        this.deviceTypeSubscription.unsubscribe();
    }
    resetSelection() {
        this.radioButtons.map(radio => radio.reset());
    }
    selectSoftware({ option, software }) {
        software.selectedId = option.id;
        option.action = 'install';
        this.emitSoftware({ option, software });
    }
    emitSoftware({ option, software }) {
        const emitData = Object.assign({}, { software }, { version: option }, { action: option.action });
        this.software.emit(emitData);
    }
    getSoftware(name, deviceType) {
        const query = name ? { name: `*${name}*` } : {};
        if (deviceType) {
            query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: `c8y_Filter.type` } }];
        }
        return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query });
    }
}
SelectSoftwareStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-select-software-step',
                template: "<div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select software' | translate }}</h4>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              type=\"search\"\n              class=\"form-control\"\n              title=\"{{ 'Filter software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                c8yIcon=\"times\"\n                class=\"text-muted\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-12 p-b-8 visible-xs visible-sm\"></div>\n        <div class=\"col-md-6\">\n          <c8y-form-group class=\"m-0\">\n            <c8y-typeahead\n              name=\"deviceType\"\n              [(ngModel)]=\"selectedDeviceType\"\n              placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n              (onSearch)=\"deviceType$.next($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = {name: ''}; deviceType$.next('')\"\n              >\n                <span>{{'All device types' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n              *ngFor=\"let deviceType of deviceTypes\"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n              [active]=\"selectedDeviceType === deviceType\"\n              >\n              <c8y-highlight\n              [text]=\"deviceType.name\"\n              [pattern]=\"deviceType$ | async\"\n              ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing device types.' | translate\"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': (software$ | async)?.data.length < 10 }\">\n        <c8y-li *c8yFor=\"let software of software$ | async; loadMore: 'auto'\">\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-tools\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-5\">\n              <div class=\"text-truncate\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(software) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"software.c8y_Filter?.type; else noType\">\n                  {{ software.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class=\"text-muted\" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(software)\" class=\"label label-warning flex-item-right-sm\">\n                <span translate>Legacy</span>\n              </span>\n              <span *ngIf=\"!isLegacy(software)\">\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(software) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default flex-item-right-sm\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: (getBaseVersionsCount$(software) | async) || ''\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-collapse>\n            <c8y-list-group>\n              <c8y-li *c8yFor=\"let option of getVersions(software) | async\">\n                <c8y-li-radio\n                  [name]=\"software.id\"\n                  (onSelect)=\"selectSoftware({ option: option, software: software })\"\n                ></c8y-li-radio>\n                <c8y-li-body class=\"content-flex-40 p-r-16\">\n                  <div class=\"col-4\">\n                    {{ option.c8y_Software.version }}\n                  </div>\n                  <div class=\"col-5\">\n                    <div class=\"text-truncate\" title=\"{{ option.c8y_Software.url }}\">\n                      <span class=\"text-label-small m-r-4\" translate> File </span>\n                      <span>{{ option.c8y_Software.url }}</span>\n                    </div>\n                  </div>\n                  <div class=\"col-3\" *ngIf=\"option.id === software.selectedId\">\n                    <div class=\"c8y-select-wrapper d-inline-block\" style=\"margin: -4px 0;\">\n                      <select\n                        id=\"action\"\n                        class=\"form-control input-sm\"\n                        [(ngModel)]=\"option.action\"\n                        (change)=\"emitSoftware({ option: option, software: software })\"\n                      >\n                        <option [ngValue]=\"'install'\">{{ 'Install/update`software`' | translate }}</option>\n                        <option [ngValue]=\"'delete'\">{{ 'Remove`software`' | translate }}</option>\n                      </select>\n                      <span></span>\n                    </div>\n                  </div>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </c8y-li-collapse>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
            },] }
];
SelectSoftwareStepComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: TranslateService }
];
SelectSoftwareStepComponent.propDecorators = {
    software: [{ type: Output }],
    radioButtons: [{ type: ViewChildren, args: [ListItemRadioComponent,] }]
};
__decorate([
    memoize(property('id'))
], SelectSoftwareStepComponent.prototype, "getBaseVersionsCount$", null);
__decorate([
    memoize(property('id'))
], SelectSoftwareStepComponent.prototype, "getVersions", null);

class ConfirmSoftwareSelectionStepComponent {
    ngOnChanges(changes) {
        if (changes.selectedItems) {
            const deviceTypes = this.deviceTypes;
            this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');
        }
    }
    get selectedToInstall() {
        return this.selectedItems.filter(software => software.action === 'install');
    }
    get selectedToDelete() {
        return this.selectedItems.filter(software => software.action === 'delete');
    }
    get deviceTypes() {
        return uniq(this.selectedItems
            .filter(val => has(val, ['software', 'c8y_Filter', 'type']))
            .map(val => val.software.c8y_Filter.type));
    }
}
ConfirmSoftwareSelectionStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-confirm-software-selection-step',
                template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-gray\">{{ 'Confirm selection' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"text-truncate\" title=\"{{ this.title }}\">\n            <span class=\"legend form-block\" translate>Device type</span>\n            <ng-container *ngIf=\"deviceTypes.length > 0; else noType\">\n              <span *ngFor=\"let deviceType of deviceTypes; let last = last\">{{ deviceType }}{{ last ? '' : ', ' }}</span>\n            </ng-container>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToInstall.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Installations/updates`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToInstall\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6 text-truncate\" title=\"{{ selectedItem.software.name }}\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-4\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToDelete.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Removals`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToDelete\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
ConfirmSoftwareSelectionStepComponent.propDecorators = {
    selectedItems: [{ type: Input }]
};

class StepperBulkTypeSoftwareComponent extends BaseStepperComponent {
    constructor(modal, translate) {
        super();
        this.modal = modal;
        this.translate = translate;
        this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        this.selectedSoftware = [];
    }
    onSoftwareSelected(selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(item => item.software.id !== selectedItem.software.id);
        this.selectedSoftware.push(selectedItem);
    }
    confirmSoftwareSelection($event) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceTypes = this.getUniqueDeviceTypes();
            this.deviceTypes = deviceTypes;
            if (deviceTypes.length > 1) {
                try {
                    yield this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') });
                    $event.stepper.next();
                }
                catch (ex) {
                    this.selectedSoftware = [];
                    this.selectSoftware.resetSelection();
                }
            }
            else {
                $event.stepper.next();
            }
        });
    }
    retrieveOperationPrototype() {
        const softwareList = this.selectedSoftware.map(item => ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }));
        const interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        let description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    }
    getUniqueDeviceTypes() {
        return uniq(this.selectedSoftware
            .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)
            .filter(type => !!type));
    }
}
StepperBulkTypeSoftwareComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-stepper-bulk-type-software',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            },] }
];
StepperBulkTypeSoftwareComponent.ctorParameters = () => [
    { type: ModalService },
    { type: TranslateService }
];
StepperBulkTypeSoftwareComponent.propDecorators = {
    selectSoftware: [{ type: ViewChild, args: [SelectSoftwareStepComponent, { static: false },] }]
};

const ɵ0 = {
    type: BulkOperationType.SOFTWARE,
    c8yIcon: 'c8y-tools',
    name: gettext('Software update'),
    path: `${baseUrl}software`,
    component: StepperBulkTypeSoftwareComponent,
    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
    selected: false
};
/** Module for the 'Software update' operation type stepper */
class StepperBulkTypeSoftwareModule {
}
StepperBulkTypeSoftwareModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    StepperBulkTypeSoftwareComponent,
                    ConfirmSoftwareSelectionStepComponent,
                    SelectSoftwareStepComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    RepositoryModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeSoftwareComponent],
                exports: [StepperBulkTypeSoftwareComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ConfirmSoftwareSelectionStepComponent, SelectSoftwareStepComponent, StepperBulkTypeSoftwareComponent, StepperBulkTypeSoftwareModule, ɵ0 };
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-software.js.map
