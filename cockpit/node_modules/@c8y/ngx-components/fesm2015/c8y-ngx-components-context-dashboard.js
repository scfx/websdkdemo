import { __awaiter, __rest } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ViewChild, Input, EventEmitter, Output, Renderer2, HostBinding, NgModule, Host } from '@angular/core';
import { cloneDeep, sortBy, get, assign, pick, some, keys, keyBy, has, forEach, clone, omit, escapeRegExp, findIndex, values, kebabCase } from 'lodash-es';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { of, from, Subject, iif, timer, BehaviorSubject, combineLatest } from 'rxjs';
import { tap, map, catchError, throwIfEmpty, filter, toArray, mergeAll, mergeMap, switchMap, debounceTime, distinctUntilChanged, shareReplay, take } from 'rxjs/operators';
import * as i1 from '@c8y/ngx-components';
import { gettext, DynamicComponentService, Status, NavigatorNode, getActivatedRoute, ViewContext, TabsService, ModalService, AppStateService, NavigatorService, Permissions, ICON_LIST, DashboardChildChange, AlertService, GainsightService, HOOK_ROUTE, HOOK_ACTION, CoreModule, FilterInputComponent, DocsService, DocsModule, QuickLinkModule, HOOK_NAVIGATOR_NODES, HOOK_COMPONENTS, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import * as i2 from '@ngx-translate/core';
import { TranslateService } from '@ngx-translate/core';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { InventoryService, UserService, QueriesUtil, TenantService, ApplicationService } from '@c8y/client';
import { ControlContainer, NgForm } from '@angular/forms';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@c8y/client';
import * as ɵngcc4 from '@angular/router';
import * as ɵngcc5 from 'ngx-bootstrap/modal';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '@angular/forms';
import * as ɵngcc8 from 'ngx-bootstrap/dropdown';
import * as ɵngcc9 from 'ngx-bootstrap/popover';

const _c0 = ["config"];
function WidgetConfigComponent_h3_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 21);
    ɵngcc0.ɵɵtext(1, "Add widget");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetConfigComponent_h3_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 21);
    ɵngcc0.ɵɵtext(1, "Edit widget");
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = function () { return { standalone: true }; };
function WidgetConfigComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "div", 24);
    ɵngcc0.ɵɵelementStart(3, "div", 25);
    ɵngcc0.ɵɵelementStart(4, "input", 26);
    ɵngcc0.ɵɵlistener("ngModelChange", function WidgetConfigComponent_div_24_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.searchTerm = $event; })("keydown", function WidgetConfigComponent_div_24_Template_input_keydown_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.searchChange$.next($event); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 27);
    ɵngcc0.ɵɵelementStart(7, "button", 28);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_24_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.resetSearch(); });
    ɵngcc0.ɵɵelement(8, "i", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 4, "Search\u2026"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.searchTerm)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(6, _c1));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r3.searchTerm.length === 0 ? "search" : "close");
} }
function WidgetConfigComponent_div_25_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "h1");
    ɵngcc0.ɵɵelement(2, "i", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "small", 21);
    ɵngcc0.ɵɵtext(4, "Preview not available");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function WidgetConfigComponent_div_25_div_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 42);
} if (rf & 2) {
    const cmp_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("src", cmp_r13.previewImage, ɵngcc0.ɵɵsanitizeUrl);
} }
function WidgetConfigComponent_div_25_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 35);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_25_div_2_Template_div_click_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); const cmp_r13 = restoredCtx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.select(cmp_r13); });
    ɵngcc0.ɵɵelementStart(3, "div", 36);
    ɵngcc0.ɵɵtemplate(4, WidgetConfigComponent_div_25_div_2_ng_container_4_Template, 5, 0, "ng-container", 37);
    ɵngcc0.ɵɵtemplate(5, WidgetConfigComponent_div_25_div_2_ng_template_5_Template, 1, 1, "ng-template", null, 38, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 39);
    ɵngcc0.ɵɵelement(8, "c8y-highlight", 40);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const cmp_r13 = ctx.$implicit;
    const _r15 = ɵngcc0.ɵɵreference(6);
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 7, cmp_r13.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r11.selected === cmp_r13);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !cmp_r13.previewImage)("ngIfElse", _r15);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(9, 9, cmp_r13.label));
    ɵngcc0.ɵɵproperty("pattern", ctx_r11.searchTerm);
} }
function WidgetConfigComponent_div_25_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 43);
    ɵngcc0.ɵɵelement(1, "h1", 44);
    ɵngcc0.ɵɵelementStart(2, "h3", 21);
    ɵngcc0.ɵɵtext(3, "No widgets found.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 45);
    ɵngcc0.ɵɵelementStart(5, "p", 46);
    ɵngcc0.ɵɵtext(6, "Rephrase your search term.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 47);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_25_div_3_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.resetSearch(); });
    ɵngcc0.ɵɵtext(8, " Reset search ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetConfigComponent_div_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵtemplate(2, WidgetConfigComponent_div_25_div_2_Template, 10, 11, "div", 32);
    ɵngcc0.ɵɵtemplate(3, WidgetConfigComponent_div_25_div_3_Template, 9, 0, "div", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.searchResult || ctx_r4.components);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.searchResult && ctx_r4.searchResult.length === 0);
} }
function WidgetConfigComponent_div_26_c8y_dynamic_component_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-dynamic-component", 58);
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("config", ctx_r22.widgetConfig)("notFoundError", false);
} }
function WidgetConfigComponent_div_26_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 48);
    ɵngcc0.ɵɵelementStart(1, "h4", 49);
    ɵngcc0.ɵɵelementStart(2, "strong");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p", 50);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 23);
    ɵngcc0.ɵɵelementStart(9, "div", 51);
    ɵngcc0.ɵɵelementStart(10, "div", 52);
    ɵngcc0.ɵɵtext(11, "Configuration");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(13, "label", 53);
    ɵngcc0.ɵɵtext(14, "Title");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "input", 54);
    ɵngcc0.ɵɵlistener("ngModelChange", function WidgetConfigComponent_div_26_Template_input_ngModelChange_15_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.selected.data.title = $event; });
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(18, WidgetConfigComponent_div_26_c8y_dynamic_component_18_Template, 1, 2, "c8y-dynamic-component", 55);
    ɵngcc0.ɵɵelement(19, "c8y-dynamic-component", 56, 57);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("hidden", ctx_r5.mode !== "config");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 10, ctx_r5.selected.label), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 12, ctx_r5.selected.description), " ");
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵpropertyInterpolate2("placeholder", "", ɵngcc0.ɵɵpipeBind1(16, 14, "e.g."), " ", ɵngcc0.ɵɵpipeBind1(17, 16, ctx_r5.componentLabel), "");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.selected.data.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isUpgrade);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("componentId", ctx_r5.selected.id)("config", ctx_r5.widgetConfig)("notFoundError", false);
} }
function WidgetConfigComponent_div_27_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 59);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "div", 60);
    ɵngcc0.ɵɵelementStart(3, "c8y-appearance-settings", 61);
    ɵngcc0.ɵɵlistener("themeClassChange", function WidgetConfigComponent_div_27_Template_c8y_appearance_settings_themeClassChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.styling.contentClass = $event; })("headerClassChange", function WidgetConfigComponent_div_27_Template_c8y_appearance_settings_headerClassChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.styling.headerClass = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 62);
    ɵngcc0.ɵɵelement(5, "c8y-widget-preview", 63);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("themeClass", ctx_r6.styling.contentClass)("headerClass", ctx_r6.styling.headerClass)("possibleStylingTheme", ctx_r6.possibleStyling.WIDGET_CONTENT_CLASSES)("possibleStylingHeader", ctx_r6.possibleStyling.WIDGET_HEADER_CLASSES)("defaultThemeClass", ctx_r6.defaultStyling.contentClass)("defaultHeaderClass", ctx_r6.defaultStyling.headerClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("previewClasses", ctx_r6.getStyle(true));
} }
const _c2 = function (a0) { return { widgetName: a0 }; };
function WidgetPreviewComponent_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtext(1, "Tab and layout");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetPreviewComponent_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtext(1, "Layout");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetPreviewComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "div", 15);
    ɵngcc0.ɵɵelementStart(2, "ul", 16);
    ɵngcc0.ɵɵelementStart(3, "li", 17);
    ɵngcc0.ɵɵelementStart(4, "a", 18);
    ɵngcc0.ɵɵelement(5, "i", 19);
    ɵngcc0.ɵɵelementStart(6, "span", 20);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "div", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.tab.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r2.tab.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.tab.name);
} }
const _c3 = function (a0) { return { "m-t-64": a0 }; };
const _c4 = ["dashboardDetailForm"];
const _c5 = function (a0) { return { active: a0 }; };
function DashboardDetailComponent_div_12_ul_15_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "li", 37);
    ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_div_12_ul_15_ng_container_1_Template_li_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const icon_r9 = restoredCtx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.selectIcon(icon_r9); });
    ɵngcc0.ɵɵelementStart(2, "a", 38);
    ɵngcc0.ɵɵelement(3, "i", 39);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const icon_r9 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", icon_r9);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c5, ctx_r8.dashboard.icon === icon_r9));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", icon_r9);
} }
function DashboardDetailComponent_div_12_ul_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 35);
    ɵngcc0.ɵɵtemplate(1, DashboardDetailComponent_div_12_ul_15_ng_container_1_Template, 4, 5, "ng-container", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.filteredIcons);
} }
function DashboardDetailComponent_div_12_c8y_form_group_27_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2, "Description");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "textarea", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_c8y_form_group_27_Template_textarea_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.dashboard.description = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.dashboard.description);
} }
function DashboardDetailComponent_div_12_div_29_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵelementStart(3, "span", 30);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 31);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "input", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_29_Template_input_ngModelChange_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.dashboard.priority = $event; });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Position in navigation"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(7, 8, "Position in navigation menu (10000 first, -10000 last)"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 10, "Position in navigation"));
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(11, 12, "e.g."), " 500");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.dashboard.priority);
} }
function DashboardDetailComponent_div_12_div_30_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2, "Navigator menu item");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(4, "label", 15);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementStart(6, "input", 42);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_30_Template_input_ngModelChange_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return !!(ctx_r16.dashboard.c8y_IsNavigatorNode = $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "span");
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 3, "Show in navigator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", !!ctx_r5.dashboard.c8y_IsNavigatorNode);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 5, "Show in navigator"));
} }
function DashboardDetailComponent_div_12_div_31_ng_template_6_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelement(1, "i", 26);
    ɵngcc0.ɵɵelementStart(2, "span", 46);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "slice");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 47);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r21 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", node_r21.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r21.label.length > 15 ? ɵngcc0.ɵɵpipeBind3(4, 3, node_r21.label, 0, 15) + "..." : node_r21.label, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r21.priority, " ");
} }
function DashboardDetailComponent_div_12_div_31_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "ul", 45);
    ɵngcc0.ɵɵtemplate(5, DashboardDetailComponent_div_12_div_31_ng_template_6_li_5_Template, 7, 7, "li", 36);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "Position in navigator (10001 first, -10000 last)."), "\u00A0 ", ɵngcc0.ɵɵpipeBind1(3, 5, "Existing nodes:"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 7, ctx_r19.navigatorNodes$));
} }
function DashboardDetailComponent_div_12_div_31_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵelementStart(3, "span", 30);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, DashboardDetailComponent_div_12_div_31_ng_template_6_Template, 7, 9, "ng-template", null, 43, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(8, "button", 31);
    ɵngcc0.ɵɵelement(9, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "input", 44);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_31_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.dashboard.priority = $event; });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r18 = ɵngcc0.ɵɵreference(7);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Position in navigator"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("popover", _r18);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 8, "Position in navigation"));
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(12, 10, "e.g."), " 500");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r6.dashboard.priority);
} }
const _c6 = function (a0) { return { type: a0 }; };
function DashboardDetailComponent_div_12_div_32_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 52);
    ɵngcc0.ɵɵelement(1, "i", 53);
    ɵngcc0.ɵɵelementStart(2, "span", 54);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " This dashboard is shared between all devices of the type ");
    ɵngcc0.ɵɵelementStart(4, "i");
    ɵngcc0.ɵɵtext(5, "{{ type }}");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6, ". ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r24.dashboard.deviceTypeValue));
} }
function DashboardDetailComponent_div_12_div_32_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 48);
    ɵngcc0.ɵɵelementStart(2, "label", 15);
    ɵngcc0.ɵɵelementStart(3, "input", 49);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_32_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.dashboard.deviceType = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span", 50);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(6, " Apply dashboard to all devices of type ");
    ɵngcc0.ɵɵelementStart(7, "i");
    ɵngcc0.ɵɵtext(8, "{{ type }}");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DashboardDetailComponent_div_12_div_32_div_9_Template, 7, 3, "div", 51);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r7.applyToDevicesOfTypeTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r7.dashboard.deviceType)("disabled", !ctx_r7.applyToDevicesOfTypePermitted);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(5, _c6, ctx_r7.dashboard.deviceTypeValue));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.isDeviceType);
} }
function DashboardDetailComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "h6", 21);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 22);
    ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(7, "label", 23);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 24);
    ɵngcc0.ɵɵelementStart(11, "button", 25);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 26);
    ɵngcc0.ɵɵelement(14, "span", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(15, DashboardDetailComponent_div_12_ul_15_Template, 2, 1, "ul", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "c8y-form-group", 29);
    ɵngcc0.ɵɵelementStart(17, "label");
    ɵngcc0.ɵɵelementStart(18, "span", 30);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "button", 31);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelement(23, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "input", 33);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_Template_input_ngModelChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.dashboard.name = $event; });
    ɵngcc0.ɵɵpipe(25, "translate");
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(27, DashboardDetailComponent_div_12_c8y_form_group_27_Template, 4, 1, "c8y-form-group", 8);
    ɵngcc0.ɵɵelementStart(28, "div", 6);
    ɵngcc0.ɵɵtemplate(29, DashboardDetailComponent_div_12_div_29_Template, 12, 14, "div", 34);
    ɵngcc0.ɵɵtemplate(30, DashboardDetailComponent_div_12_div_30_Template, 11, 7, "div", 34);
    ɵngcc0.ɵɵtemplate(31, DashboardDetailComponent_div_12_div_31_Template, 13, 12, "div", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(32, DashboardDetailComponent_div_12_div_32_Template, 10, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 15, "General"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 17, "Icon"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 19, "Icon"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", ctx_r1.dashboard.icon);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 21, "Menu label"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(22, 23, "Menu label to display in submenu when dashboard is attached"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 25, "Menu label"));
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(26, 27, ctx_r1.namePlaceholder));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.dashboard.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.current && ctx_r1.deviceType);
} }
function AppearanceSettingsComponent_li_8_small_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 16);
    ɵngcc0.ɵɵtext(1, "Dashboard default");
    ɵngcc0.ɵɵelementEnd();
} }
function AppearanceSettingsComponent_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 8);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "label", 10);
    ɵngcc0.ɵɵelementStart(3, "input", 11);
    ɵngcc0.ɵɵlistener("click", function AppearanceSettingsComponent_li_8_Template_input_click_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const themeClassItem_r2 = restoredCtx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.themeClassClick(themeClassItem_r2.class); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label", 12);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵtemplate(10, AppearanceSettingsComponent_li_8_small_10_Template, 2, 0, "small", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 14);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const themeClassItem_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "groupradiocontentclass" + i_r3)("value", themeClassItem_r2.class)("ngModel", ctx_r0.themeClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", "groupradiocontentclass" + i_r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, themeClassItem_r2.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", themeClassItem_r2.class === ctx_r0.defaultThemeClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(12, 10, themeClassItem_r2.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function AppearanceSettingsComponent_li_13_small_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 16);
    ɵngcc0.ɵɵtext(1, "Dashboard default");
    ɵngcc0.ɵɵelementEnd();
} }
function AppearanceSettingsComponent_li_13_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 17);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "label", 10);
    ɵngcc0.ɵɵelementStart(3, "input", 18);
    ɵngcc0.ɵɵlistener("click", function AppearanceSettingsComponent_li_13_Template_input_click_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const headerClassItem_r7 = restoredCtx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.headerClassClick(headerClassItem_r7.class); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label", 12);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵtemplate(10, AppearanceSettingsComponent_li_13_small_10_Template, 2, 0, "small", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 14);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const headerClassItem_r7 = ctx.$implicit;
    const i_r8 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "groupradioheaderclass" + i_r8)("value", headerClassItem_r7.class)("ngModel", ctx_r1.headerClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", "groupradioheaderclass" + i_r8);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, headerClassItem_r7.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", headerClassItem_r7.class === ctx_r1.defaultHeaderClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(12, 10, headerClassItem_r7.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function ContextDashboardComponent_c8y_action_bar_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ContextDashboardComponent_c8y_action_bar_item_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.restore(); });
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵtext(3, "\u00A0");
    ɵngcc0.ɵɵelementStart(4, "span", 5);
    ɵngcc0.ɵɵtext(5, "Restore dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "more");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", (ctx_r0.dashboard == null ? null : ctx_r0.dashboard.isFrozen) || ctx_r0.disabled);
} }
const _c7 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return { isLoading: a0, isFrozen: a1, isDisabled: a2, canDelete: a3, translateWidgetTitle: a4, allowFullscreen: a5, title: a6, widgetMargin: a7 }; };
function ReportDashboardListComponent_i_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 15);
} }
function ReportDashboardListComponent_i_13_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 16);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_i_13_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.textFilter$.next(""); });
    ɵngcc0.ɵɵelementEnd();
} }
function ReportDashboardListComponent_c8y_li_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 17);
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 19);
    ɵngcc0.ɵɵelementStart(4, "div", 20);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 21);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 22);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 3, "Report"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, "Description"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 7, "Show in navigator"), " ");
} }
function ReportDashboardListComponent_c8y_li_31_em_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "em", 40);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No description available."), " ");
} }
function ReportDashboardListComponent_c8y_li_31_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const report_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵtextInterpolate1(" ", report_r7.description, " ");
} }
function ReportDashboardListComponent_c8y_li_31_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 23);
    ɵngcc0.ɵɵelementStart(2, "c8y-li-body", 24);
    ɵngcc0.ɵɵelementStart(3, "div", 20);
    ɵngcc0.ɵɵelementStart(4, "button", 25);
    ɵngcc0.ɵɵelementStart(5, "span", 26);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 21);
    ɵngcc0.ɵɵelementStart(8, "small", 27);
    ɵngcc0.ɵɵtemplate(9, ReportDashboardListComponent_c8y_li_31_em_9_Template, 3, 3, "em", 28);
    ɵngcc0.ɵɵtemplate(10, ReportDashboardListComponent_c8y_li_31_ng_template_10_Template, 1, 1, "ng-template", null, 29, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 22);
    ɵngcc0.ɵɵelement(13, "span", 30);
    ɵngcc0.ɵɵelementStart(14, "label", 31);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementStart(16, "input", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function ReportDashboardListComponent_c8y_li_31_Template_input_ngModelChange_16_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const report_r7 = restoredCtx.$implicit; return !!(report_r7.c8y_IsNavigatorNode = $event); })("change", function ReportDashboardListComponent_c8y_li_31_Template_input_change_16_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const report_r7 = restoredCtx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.update(report_r7); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(17, "span");
    ɵngcc0.ɵɵelementStart(18, "span", 33);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 34);
    ɵngcc0.ɵɵelementStart(22, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_c8y_li_31_Template_button_click_22_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const report_r7 = restoredCtx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.delete(report_r7); });
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelement(24, "i", 36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "div", 37);
    ɵngcc0.ɵɵelementStart(26, "button", 38);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_c8y_li_31_Template_button_click_26_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const report_r7 = restoredCtx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.delete(report_r7); });
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelement(28, "i", 39);
    ɵngcc0.ɵɵtext(29, " Delete ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const report_r7 = ctx.$implicit;
    const _r10 = ɵngcc0.ɵɵreference(11);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", report_r7.icon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", report_r7.name);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/reports/", report_r7.id, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", report_r7.name, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !report_r7.description)("ngIfElse", _r10);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 11, "Show in navigator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", !!report_r7.c8y_IsNavigatorNode);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 13, "Show in navigator"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 15, "Remove report"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(27, 17, "Remove report"));
} }
function ReportDashboardListComponent_div_32_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 41);
    ɵngcc0.ɵɵelement(1, "h1", 42);
    ɵngcc0.ɵɵelementStart(2, "h3", 0);
    ɵngcc0.ɵɵtext(3, " There are no reports defined ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 0);
    ɵngcc0.ɵɵtext(5, " Add a report first. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div");
    ɵngcc0.ɵɵelementStart(7, "button", 43);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_div_32_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.add(); });
    ɵngcc0.ɵɵtext(8, " Add report ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "p", 44);
    ɵngcc0.ɵɵelementStart(10, "small", 0);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(11, "Find out more in the ");
    ɵngcc0.ɵɵelementStart(12, "a", 45);
    ɵngcc0.ɵɵtext(13, " User guide`KEEP_ORIGINAL` ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(14, ". ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c8 = function (a0) { return { "icon-spin": a0 }; };
const _c9 = function (a0) { return { link: a0 }; };
function WelcomeToCockpit_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-quick-link", 8);
    ɵngcc0.ɵɵlistener("click", function WelcomeToCockpit_div_10_Template_c8y_quick_link_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const link_r1 = restoredCtx.$implicit; return link_r1.click ? link_r1.click() : false; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const link_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", link_r1.icon)("label", link_r1.label)("actionName", "welcomeWidgetClicked")("actionData", ɵngcc0.ɵɵpureFunction1(4, _c9, link_r1.label));
} }
const _c10 = function () { return {}; };
const _c11 = function () { return { isDisabled: false, canDelete: false, translateWidgetTitle: true, allowFullscreen: false, title: false }; };
const _c12 = function (a0) { return { isLoading: a0, isDisabled: true, canDelete: false, translateWidgetTitle: true, allowFullscreen: false, title: false }; };
const CONTEXT_DASHBOARD_CONFIG = new InjectionToken('ContextDashboardConfig');
var ContextDashboardType;
(function (ContextDashboardType) {
    ContextDashboardType["Device"] = "device";
    ContextDashboardType["DeviceType"] = "type";
    ContextDashboardType["Group"] = "group";
    ContextDashboardType["Named"] = "name";
    ContextDashboardType["Report"] = "report";
})(ContextDashboardType || (ContextDashboardType = {}));
const WIDGET_HEADER_CLASSES = [
    {
        label: gettext('Regular`style`'),
        class: 'panel-title-regular',
        description: gettext('The widget has no border between header and content.')
    },
    {
        label: gettext('Border`style`'),
        class: 'panel-title-border',
        description: gettext('The widget has a small separation border between header and content.')
    },
    {
        label: gettext('Overlay`style`'),
        class: 'panel-title-overlay',
        description: gettext('The widget content overlays the header.')
    },
    {
        label: gettext('Hidden`style`'),
        class: 'panel-title-hidden',
        description: gettext('The widget header is not shown.')
    }
];
const WIDGET_CONTENT_CLASSES = [
    {
        label: gettext('Light`style`'),
        class: 'panel-content-light',
        description: gettext('The widget is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`style`'),
        class: 'panel-content-dark',
        description: gettext('The widget is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`style`'),
        class: 'panel-content-transparent',
        description: gettext('The widget is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`style`'),
        class: 'panel-content-branded',
        description: gettext('The widget is styled with the main brand color.')
    }
];
const DASHBOARD_THEME_CLASSES = [
    {
        label: gettext('Light`theme`'),
        class: 'dashboard-theme-light',
        description: gettext('The dashboard is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`theme`'),
        class: 'dashboard-theme-dark',
        description: gettext('The dashboard is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`theme`'),
        class: 'dashboard-theme-transparent',
        description: gettext('The dashboard is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`theme`'),
        class: 'dashboard-theme-branded',
        description: gettext('The dashboard is styled with the main brand color.')
    }
];
const STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];

class WidgetService {
    constructor(dynamicComponentService, translateService, moduleConfig) {
        this.dynamicComponentService = dynamicComponentService;
        this.translateService = translateService;
        this.moduleConfig = moduleConfig;
        this.dynamicComponentService.items$.subscribe(widgets => {
            this.widgets = widgets;
        });
    }
    getWidgetDefinition(componentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dynamicComponentService.getById(componentId);
        });
    }
    getWidgetDefinitions() {
        const translatedComponents = this.widgets.map(cmp => (Object.assign(Object.assign({}, cmp), { label: this.translateService.instant(cmp.label) })));
        return cloneDeep(sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
    }
    mapLegacy(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.getWidgetDefinition(widget.componentId || widget.name);
            if (get(cmp, 'data.settings.upgrade')) {
                widget.widgetComponent = cmp.data.settings.widgetComponent;
                widget.configComponent = cmp.data.settings.configComponent;
                widget.templateUrl = cmp.data.settings.templateUrl;
                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                widget.transformConfigWithContext =
                    cmp.data.settings.componentTransformConfigWithContext ||
                        cmp.data.settings.transformConfigWithContext ||
                        widget.transformConfigWithContext;
            }
            else {
                delete widget.templateUrl;
                delete widget.configTemplateUrl;
            }
            return widget;
        });
    }
}
WidgetService.ɵfac = function WidgetService_Factory(t) { return new (t || WidgetService)(ɵngcc0.ɵɵinject(ɵngcc1.DynamicComponentService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); };
WidgetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(i0.ɵɵinject(i1.DynamicComponentService), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); }, token: WidgetService, providedIn: "root" });
WidgetService.ctorParameters = () => [
    { type: DynamicComponentService },
    { type: TranslateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.DynamicComponentService }, { type: ɵngcc2.TranslateService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }]; }, null); })();

class ContextDashboardService {
    constructor(inventory, tabs, modal, translateService, router, user, appState, navigator, permissions) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.user = user;
        this.appState = appState;
        this.navigator = navigator;
        this.permissions = permissions;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    get formDisabled() {
        return this._formDisabled;
    }
    set formDisabled(value) {
        this._formDisabled = value;
    }
    create(dashboardCfg, context, name = '') {
        return __awaiter(this, void 0, void 0, function* () {
            let id = '';
            let dashboardType;
            if (context) {
                id = context.contextData.id;
                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
            }
            if (name) {
                dashboardType = ContextDashboardType.Named;
            }
            const dashboard = {};
            assign(dashboard, { c8y_Dashboard: dashboardCfg });
            const value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : (name || id);
            const fragmentKey = this.createFragmentKey(dashboardType, value);
            dashboard[fragmentKey] = {};
            if (this.shouldSetGlobal(dashboard, context)) {
                assign(dashboard, { c8y_Global: {} });
            }
            dashboard.name = dashboard.c8y_Dashboard.name;
            const { data } = dashboardType === ContextDashboardType.Group || dashboardType === ContextDashboardType.Device || (context && dashboardType === ContextDashboardType.Named)
                ? yield this.inventory.childAdditionsCreate(dashboard, id)
                : yield this.inventory.create(dashboard);
            return data;
        });
    }
    detail(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.detail(dashboardMO);
            this.cache.set(dashboardMO.id, data);
            return data;
        });
    }
    update(dashboard) {
        return __awaiter(this, void 0, void 0, function* () {
            dashboard.name = dashboard.c8y_Dashboard.name;
            const keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
            const { data } = yield this.inventory.update(keepFragments);
            this.cache.set(dashboard.id, data);
            return data;
        });
    }
    delete(dashboard, withConfirmation = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (withConfirmation) {
                    let msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}". Do you want to proceed?`);
                    if (this.isDeviceType(dashboard)) {
                        msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}" from all devices of the type "{{ deviceType }}".
           Do you want to proceed?`);
                    }
                    yield this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                        dashboardName: dashboard.c8y_Dashboard.name,
                        deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                    }), Status.DANGER, {
                        ok: gettext('Delete'),
                        cancel: gettext('Cancel')
                    });
                }
                yield this.inventory.delete(dashboard);
                const tabToRemove = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboard.id}`));
                this.tabs.remove(tabToRemove);
                this.tabs.refresh();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    activateDashboards(route, types) {
        const { dashboardId } = route.params;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(dashboard => {
                route.data = { dashboard };
            }), map(() => true), catchError(() => {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    }
    getNamedDashboardOrCreate(name, defaultWidgets, context) {
        const children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(() => from(this.create({
            children,
            widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
        }, context, name))));
    }
    refreshTabs(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isNamed(dashboardMO)) {
                const tabToUpdate = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboardMO.id}`));
                const data = yield this.detail(dashboardMO);
                if (tabToUpdate) {
                    const { icon, priority, name } = data.c8y_Dashboard;
                    tabToUpdate.icon = icon;
                    tabToUpdate.priority = priority;
                    tabToUpdate.label = name;
                }
                this.tabs.refresh();
            }
        });
    }
    updateNavigatorItem(mo) {
        this.navigator.state.forEach(node => {
            if (node.path === `reports/${mo.id}`) {
                this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            const nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: `reports/${mo.id}`,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    }
    navigateToDashboard(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (/dashboard/.test(this.router.url)) {
                this.router.navigate(['..', dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
            else {
                this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
        });
    }
    canEditDashboard(mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    }
    isNamed(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}`).test(prop));
    }
    isReport(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${this.REPORT_PARTIAL_NAME}`).test(prop));
    }
    isDeviceType(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.DeviceType}${this.INDEX_SPLIT}`).test(prop));
    }
    getFilteredDashboardStyles(styleList) {
        return styleList.filter(c => STYLING_CLASS_PREFIXES.some((classPrefix) => c.startsWith(classPrefix)));
    }
    getStyling(styleList, styleName, defaultValue) {
        const styling = styleList.find(style => style && new RegExp(`-${styleName}$`, 'i').test(style.class));
        return styling ? styling.class : defaultValue;
    }
    mapWidgets(widgets) {
        return keyBy(widgets.map(widget => {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    }
    getDashboard$(dashboardIdOrName, dashboardType, mo) {
        const cache = this.cache.get(dashboardIdOrName);
        const dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        const cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(dashboard => this.cacheDashboard(dashboard)), filter(dashboard => dashboard.id === dashboardIdOrName ||
            has(dashboard, `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${dashboardIdOrName}`)));
        return cache ? of(cache) : cacheRefresh;
    }
    getTabs$(mo, dashboardType) {
        const dashboards = this.getContextDashboards(mo, dashboardType);
        this.setBaseContextRoute(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(map(dashboard => this.removeDashboardMoProperty(dashboard)), tap(dashboard => this.cacheDashboard(dashboard)), map(dashboard => this.createDashboardTab(dashboard)), toArray());
    }
    getContextDashboards$(requests) {
        return from(requests).pipe(mergeAll(), mergeMap(response => response.data));
    }
    setBaseContextRoute(mo, dashboardType) {
        const type = dashboardType.includes(ContextDashboardType.Device)
            ? ContextDashboardType.Device
            : ContextDashboardType.Group;
        this.currentContextRoute = `${type}/${mo.id}`;
    }
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    removeDashboardMoProperty(dashboard) {
        const dashboardCopy = cloneDeep(dashboard);
        const children = get(dashboardCopy, 'c8y_Dashboard.children');
        let updateDashboard = false;
        forEach(children, child => {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            this.update(dashboardCopy);
        }
        return dashboardCopy;
    }
    cacheDashboard(dashboard) {
        this.cache.set(dashboard.id, dashboard);
    }
    createDashboardTab(dashboard) {
        const { c8y_Dashboard: _dashboard, id } = dashboard;
        return {
            icon: _dashboard.icon,
            path: `${this.DASHBOARD_ROUTE_PATH}/${id}`,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    }
    clean(dashboard) {
        const jsonString = JSON.stringify(dashboard, (key, value) => {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    }
    getNamedDashboard(name) {
        return this.inventory.list({
            fragmentType: `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${name}`,
            pageSize: 1
        });
    }
    getContextDashboards(mo, dashboardType) {
        return dashboardType.map((type) => this.inventory.list({
            fragmentType: this.createDashboardFragment(mo, type),
            pageSize: this.DEFAULT_PAGESIZE
        }));
    }
    createDashboardFragment(mo, type) {
        let value;
        if (mo.c8y_Report) {
            value = `${this.REPORT_PARTIAL_NAME}${mo.id}`;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${type}${this.INDEX_SPLIT}${value}`;
    }
    getDashboardTypeFromViewContext(dashboardCfg, context) {
        let dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    }
    createFragmentKey(contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    }
    shouldSetGlobal(dashboard, context) {
        if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) || this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    }
}
ContextDashboardService.ɵfac = function ContextDashboardService_Factory(t) { return new (t || ContextDashboardService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.TabsService), ɵngcc0.ɵɵinject(ɵngcc1.ModalService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc3.UserService), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions)); };
ContextDashboardService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ContextDashboardService, factory: ContextDashboardService.ɵfac });
ContextDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: TabsService },
    { type: ModalService },
    { type: TranslateService },
    { type: Router },
    { type: UserService },
    { type: AppStateService },
    { type: NavigatorService },
    { type: Permissions }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ɵngcc1.TabsService }, { type: ɵngcc1.ModalService }, { type: ɵngcc2.TranslateService }, { type: ɵngcc4.Router }, { type: ɵngcc3.UserService }, { type: ɵngcc1.AppStateService }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc1.Permissions }]; }, null); })();

class WidgetConfigComponent {
    constructor(widgetService, modal, contextDashboardService) {
        this.widgetService = widgetService;
        this.modal = modal;
        this.contextDashboardService = contextDashboardService;
        this.mode = 'select';
        this.searchChange$ = new Subject();
        this.searchTerm = '';
        this.styling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.defaultStyling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.possibleStyling = { WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES };
        this.isUpgrade = false;
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    get isEdit() {
        return !!this.current;
    }
    ngAfterContentInit() {
        this.components = this.widgetService.getWidgetDefinitions();
        if (this.selected) {
            this.current = clone(this.selected);
            this.select(this.selected, this.isEdit ? 'config' : 'select');
        }
        this.searchSub = this.searchChange$
            .pipe(switchMap((event) => iif(() => event.which !== 13, timer(200), timer(10))))
            .subscribe(() => {
            this.search();
        });
        if (this.mo.c8y_Dashboard.classes) {
            this.styling = this.setDefaultStyle(Object.assign(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses), (this.isEdit ? this.current.data.classes : {})));
            this.defaultStyling = this.setDefaultStyle(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses));
        }
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const hookSuccess = yield this.dynamicComponent.callLifeCycleHooks().toPromise();
            if (!hookSuccess) {
                return;
            }
            const { _x, _y, _width, _height } = this.selected.data;
            if (this.widgetConfig && this.widgetConfig.device) {
                const { id, name } = this.widgetConfig.device;
                this.widgetConfig.device = { id, name };
            }
            const widget = Object.assign({ _x,
                _y,
                _width,
                _height, config: omit(this.widgetConfig, 'settings'), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
            this._save(widget);
        });
    }
    select(cmp, mode = 'config') {
        cmp.data = cmp.data || {};
        this.selected = cmp;
        this.isUpgrade = !!get(cmp, 'data.settings.upgrade');
        this.contextDashboardService.formDisabled = this.isUpgrade;
        if (this.isEdit) {
            const { _x, _y, _width, _height, classes, title } = this.current.data;
            this.selected.data = Object.assign(Object.assign({}, this.selected.data), { _x, _y, _width, _height, classes, title });
        }
        this.widgetConfig = cloneDeep(this.composeWidgetConfig(this.selected, this.context));
        this.selected.data.title = this.selected.data.title || cmp.label;
        this.componentLabel = cmp.label;
        this.mode = mode;
    }
    search() {
        if (this.searchTerm.length > 0) {
            this.searchResult = this.components.filter(cmp => new RegExp(escapeRegExp(this.searchTerm.trim()), 'i').test(cmp.label));
        }
        else {
            this.resetSearch();
        }
    }
    resetSearch() {
        this.searchTerm = '';
        this.searchResult = undefined;
    }
    changeMode(mode) {
        this.mode = mode;
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getStyle(isPreview = false) {
        const cssClasses = {};
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
            cssClasses[this.styling.headerClass] = true;
        }
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
            cssClasses[this.styling.contentClass] = true;
        }
        if (isPreview) {
            cssClasses[`dashboard-theme-${this.defaultStyling.contentClass.split('-').pop()}`] = true;
        }
        return cssClasses;
    }
    ngOnDestroy() {
        this.contextDashboardService.formDisabled = true;
        if (this.searchSub) {
            this.searchSub.unsubscribe();
        }
    }
    isDashboardDefaultStyle(className) {
        const allClasses = Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(cssClass => ({ class: cssClass }));
        const style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
        return !!style;
    }
    setDefaultStyle(setClasses) {
        let contentClass = this.styling.contentClass;
        let headerClass = this.styling.headerClass;
        const styles = this.contextDashboardService.getFilteredDashboardStyles(Object.keys(setClasses))
            .map(c => c.split('-').pop());
        styles.forEach(styleName => {
            contentClass = this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
            headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
        });
        return { headerClass, contentClass };
    }
    composeWidgetConfig(selectedComponent, context = {}) {
        const setting = Object.assign({ settings: Object.assign(Object.assign(Object.assign(Object.assign({}, selectedComponent.data.settings), get(selectedComponent.data.settings, 'ng1.options')), get(selectedComponent.data, 'ng1.options')), { context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
        return this.applyTargetIfDeviceDashboard(setting);
    }
    applyTargetIfDeviceDashboard(widgetConfig) {
        const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
        if (isDeviceType) {
            widgetConfig.settings.hideTarget = isDeviceType;
            const noDeviceTarget = widgetConfig.settings.ng1
                ? widgetConfig.settings.ng1.options.noDeviceTarget
                : widgetConfig.settings.noDeviceTarget;
            if (!noDeviceTarget) {
                widgetConfig.device = {
                    id: this.context.id,
                    name: this.context.name
                };
            }
        }
        return widgetConfig;
    }
}
WidgetConfigComponent.ɵfac = function WidgetConfigComponent_Factory(t) { return new (t || WidgetConfigComponent)(ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService)); };
WidgetConfigComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetConfigComponent, selectors: [["c8y-widget-config"]], viewQuery: function WidgetConfigComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dynamicComponent = _t.first);
    } }, decls: 35, vars: 25, consts: [[1, "modal-header", "separator"], ["translate", "", 4, "ngIf"], ["name", "form"], ["configForm", "ngForm"], [1, "c8y-modal-tabs"], [1, "tabContainer"], [1, "nav", "nav-tabs", "nav-tabsc8y", "p-l-24"], ["type", "button", 1, "btn", 3, "click"], ["c8yIcon", "th-large"], ["translate", "", 1, "txt"], ["type", "button", 1, "btn", 3, "disabled", "click"], ["c8yIcon", "cog"], ["c8yIcon", "paint-brush"], [1, "modal-inner-scroll"], ["class", "bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0", "style", "z-index: 2;", 4, "ngIf"], ["class", "modal-body bg-gray-lighter", 4, "ngIf"], ["class", "modal-body", "style", "min-height: calc(100vh - 290px);", 3, "hidden", 4, "ngIf"], ["class", "modal-body p-t-0", "style", "min-height: calc(100vh - 290px);", 4, "ngIf"], [1, "modal-footer"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", "c8yProductExperience", "", 1, "btn", "btn-primary", 3, "title", "disabled", "actionName", "actionData", "click"], ["translate", ""], [1, "bg-white", "p-l-24", "p-r-24", "p-t-8", "p-b-8", "sticky-header-top-0", 2, "z-index", "2"], [1, "row"], [1, "col-sm-6"], [1, "input-group", "input-group-search"], ["type", "text", 1, "form-control", 3, "placeholder", "ngModel", "ngModelOptions", "ngModelChange", "keydown"], [1, "input-group-btn"], ["type", "button", 1, "btn", "btn-clean", 3, "click"], [3, "c8yIcon"], [1, "modal-body", "bg-gray-lighter"], [1, "card-group", "card-select", "m-b-0"], ["class", "col-md-3 col-sm-4 col-xs-6", 3, "title", 4, "ngFor", "ngForOf"], ["class", "c8y-empty-state text-center", 4, "ngIf"], [1, "col-md-3", "col-sm-4", "col-xs-6", 3, "title"], [1, "card", "p-8", 3, "click"], [1, "text-center", "p-8", "m-b-8", "flex-col", "flex-center", 2, "min-height", "170px", "background-color", "var(--body-background-color, #f2f3f4)"], [4, "ngIf", "ngIfElse"], ["previewImage", ""], [1, "card-title", "text-truncate"], [3, "text", "pattern"], ["c8yIcon", "file-image-o"], [1, "img-responsive", 3, "src"], [1, "c8y-empty-state", "text-center"], ["c8yIcon", "search"], [1, "d-flex"], ["translate", "", 1, "m-r-8"], ["translate", "", 1, "btn", "btn-primary", 3, "click"], [1, "modal-body", 2, "min-height", "calc(100vh - 290px)", 3, "hidden"], [1, "text-left"], [1, "m-b-24"], [1, "col-sm-12"], ["translate", "", 1, "legend", "form-block"], ["for", "widgetTitle", "translate", ""], ["id", "widgetTitle", "type", "text", "name", "title", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["componentId", "device.selector.legacy", 3, "config", "notFoundError", 4, "ngIf"], ["mode", "config", 3, "componentId", "config", "notFoundError"], ["config", ""], ["componentId", "device.selector.legacy", 3, "config", "notFoundError"], [1, "modal-body", "p-t-0", 2, "min-height", "calc(100vh - 290px)"], [1, "col-xs-6"], [3, "themeClass", "headerClass", "possibleStylingTheme", "possibleStylingHeader", "defaultThemeClass", "defaultHeaderClass", "themeClassChange", "headerClassChange"], [1, "col-xs-6", "sticky-header-top-0"], [3, "previewClasses"]], template: function WidgetConfigComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, WidgetConfigComponent_h3_1_Template, 2, 0, "h3", 1);
        ɵngcc0.ɵɵtemplate(2, WidgetConfigComponent_h3_2_Template, 2, 0, "h3", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "form", 2, 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "ul", 6);
        ɵngcc0.ɵɵelementStart(8, "li");
        ɵngcc0.ɵɵelementStart(9, "button", 7);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_9_listener() { ctx.changeMode("select"); return false; });
        ɵngcc0.ɵɵelement(10, "i", 8);
        ɵngcc0.ɵɵelementStart(11, "span", 9);
        ɵngcc0.ɵɵtext(12, "Select widget");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "li");
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_14_listener() { ctx.changeMode("config"); return false; });
        ɵngcc0.ɵɵelement(15, "i", 11);
        ɵngcc0.ɵɵelementStart(16, "span", 9);
        ɵngcc0.ɵɵtext(17, "Configuration");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "li");
        ɵngcc0.ɵɵelementStart(19, "button", 10);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_19_listener() { ctx.changeMode("style"); return false; });
        ɵngcc0.ɵɵelement(20, "i", 12);
        ɵngcc0.ɵɵelementStart(21, "span", 9);
        ɵngcc0.ɵɵtext(22, "Appearance");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "div", 13);
        ɵngcc0.ɵɵtemplate(24, WidgetConfigComponent_div_24_Template, 9, 7, "div", 14);
        ɵngcc0.ɵɵtemplate(25, WidgetConfigComponent_div_25_Template, 4, 2, "div", 15);
        ɵngcc0.ɵɵtemplate(26, WidgetConfigComponent_div_26_Template, 21, 18, "div", 16);
        ɵngcc0.ɵɵtemplate(27, WidgetConfigComponent_div_27_Template, 6, 7, "div", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 18);
        ɵngcc0.ɵɵelementStart(29, "button", 19);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_29_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵtext(31, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "button", 20);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_32_listener() { return ctx.save(); });
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵtext(34, " Save ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.current);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.current);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "config");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", !ctx.selected);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "style");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", !ctx.selected);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "style");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(30, 19, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(33, 21, "Save"));
        ɵngcc0.ɵɵproperty("disabled", ctx.contextDashboardService.formDisabled || _r2.invalid)("actionName", ctx.current ? "editWidget" : "createWidget")("actionData", ɵngcc0.ɵɵpureFunction1(23, _c2, ctx.selected && ctx.selected.id));
    } }, directives: function () { return [ɵngcc6.NgIf, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective, ɵngcc1.ProductExperienceDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgForOf, ɵngcc1.HighlightComponent, ɵngcc1.FormGroupComponent, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc7.RequiredValidator, ɵngcc1.DynamicComponentComponent, AppearanceSettingsComponent, WidgetPreviewComponent]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe]; }, encapsulation: 2 });
WidgetConfigComponent.ctorParameters = () => [
    { type: WidgetService },
    { type: BsModalRef },
    { type: ContextDashboardService }
];
WidgetConfigComponent.propDecorators = {
    dynamicComponent: [{ type: ViewChild, args: ['config', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetConfigComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-widget-config',
                template: "<div class=\"modal-header separator\">\n  <h3 *ngIf=\"!current\" translate>Add widget</h3>\n  <h3 *ngIf=\"current\" translate>Edit widget</h3>\n</div>\n<form #configForm=\"ngForm\" name=\"form\">\n  <div class=\"c8y-modal-tabs\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button type=\"button\" class=\"btn\" (click)=\"changeMode('select'); (false)\">\n            <i c8yIcon=\"th-large\"></i> <span class=\"txt\" translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i> <span class=\"txt\" translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i> <span class=\"txt\" translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div\n      *ngIf=\"mode === 'select'\"\n      class=\"bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2;\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-clean\" (click)=\"resetSearch()\" type=\"button\">\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-body bg-gray-lighter\" *ngIf=\"mode === 'select'\">\n      <div class=\"card-group card-select m-b-0\" >\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          *ngFor=\"let cmp of searchResult || components\"\n          title=\"{{ cmp.description | translate }}\"\n        >\n          <div class=\"card p-8\" [class.active]=\"selected === cmp\" (click)=\"select(cmp)\">\n            <div\n              class=\"text-center p-8 m-b-8 flex-col flex-center\"\n              style=\"min-height: 170px; background-color: var(--body-background-color, #f2f3f4);\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <h1><i c8yIcon=\"file-image-o\"></i></h1>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img class=\"img-responsive\" [src]=\"cmp.previewImage\" />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"c8y-empty-state text-center\" *ngIf=\"searchResult && searchResult.length === 0\">\n          <h1 c8yIcon=\"search\"></h1>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p translate class=\"m-r-8\">Rephrase your search term.</p>\n            <button class=\"btn btn-primary\" (click)=\"resetSearch()\" translate>\n              Reset search\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div\n      class=\"modal-body\"\n      *ngIf=\"selected\"\n      [hidden]=\"mode !== 'config'\"\n      style=\"min-height: calc(100vh - 290px);\"\n    >\n      <h4 class=\"text-left\">\n        <strong>\n          {{ selected.label | translate }}\n        </strong>\n      </h4>\n      <p class=\"m-b-24\">\n        {{ selected.description | translate }}\n      </p>\n      <div class=\"row\">\n        <!-- change to col-sm-6 when preview is available -->\n        <div class=\"col-sm-12\">\n          <div class=\"legend form-block\" translate>Configuration</div>\n          <c8y-form-group>\n            <label for=\"widgetTitle\" translate>Title</label>\n            <input\n              id=\"widgetTitle\"\n              [(ngModel)]=\"selected.data.title\"\n              type=\"text\"\n              name=\"title\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n              required\n            />\n          </c8y-form-group>\n\n          <!-- This is an upgraded component for the device selector and still needs to be migrated -->\n          <c8y-dynamic-component\n            componentId=\"device.selector.legacy\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            *ngIf=\"!isUpgrade\"\n          ></c8y-dynamic-component>\n\n          <c8y-dynamic-component\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n        <!-- markup for the preview\n\n        <div class=\"col-sm-6 sticky-header-top-0\" >\n          <div class=\"legend form-block\">\n            Preview\n          </div>\n          <div class=\"bg-gray-lighter p-16\">\n            <div class=\"card card-dashboard m-b-0\">\n              <div class=\"card-header-actions\">\n                <div class=\"card-title text-uppercase\">{{ selected.data.title }}</div>\n                <div class=\"header-actions\">\n                  <div class=\"optionsBtn dropdow\" class=\"btnIcon dropdown-toggle c8y-dropdown\">\n                    <i c8yIcon=\"cog\"></i>\n                  </div>\n                </div>\n              </div>\n              <div class=\"card-inner-scroll\">\n                <div class=\"card-block\" style=\"min-height: 240px;\">\n                  include here the widget\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      --></div>\n    </div>\n\n    <div *ngIf=\"mode === 'style'\" class=\"modal-body p-t-0\" style=\"min-height: calc(100vh - 290px);\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          >\n          </c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview [previewClasses]=\"getStyle(true)\"></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      (click)=\"close()\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      translate\n      [disabled]=\"contextDashboardService.formDisabled || configForm.invalid\"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: WidgetService }, { type: ɵngcc5.BsModalRef }, { type: ContextDashboardService }]; }, { dynamicComponent: [{
            type: ViewChild,
            args: ['config', { static: false }]
        }] }); })();

class DeviceDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [
            ContextDashboardType.Device,
            ContextDashboardType.DeviceType
        ]);
    }
}
DeviceDashboardGuard.ɵfac = function DeviceDashboardGuard_Factory(t) { return new (t || DeviceDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
DeviceDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceDashboardGuard, factory: DeviceDashboardGuard.ɵfac });
DeviceDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceDashboardGuard, [{
        type: Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();

class GroupDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Group]);
    }
}
GroupDashboardGuard.ɵfac = function GroupDashboardGuard_Factory(t) { return new (t || GroupDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
GroupDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: GroupDashboardGuard, factory: GroupDashboardGuard.ɵfac });
GroupDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupDashboardGuard, [{
        type: Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();

class WidgetPreviewComponent {
    constructor() {
        this.previewClasses = {
            'dashboard-theme-light': true,
            'panel-title-regular': true
        };
    }
}
WidgetPreviewComponent.ɵfac = function WidgetPreviewComponent_Factory(t) { return new (t || WidgetPreviewComponent)(); };
WidgetPreviewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetPreviewComponent, selectors: [["c8y-widget-preview"]], inputs: { previewClasses: "previewClasses", tab: "tab" }, decls: 19, vars: 7, consts: [["translate", "", 1, "legend", "form-block"], ["translate", "", 4, "ngIf"], [1, "dashboard-preview-slot", 3, "ngClass"], ["class", "page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden", "style", "left: 0; margin: 0 15px;", 4, "ngIf"], [3, "ngClass"], [1, "card", "card-dashboard", 2, "height", "360px"], [1, "card-header-actions", 2, "z-index", "8"], [1, "card-title"], ["translate", ""], [1, "header-actions"], [1, "optionsBtn", "dropdown"], ["href", "", 1, "dropdown-toggle", "c8y-dropdown", 3, "click"], ["c8yIcon", "cog"], [1, "card-inner-scroll", "p-t-16"], [1, "page-tabs", "page-tabs-horizontal", "navigator-open", "p-absolute", "overflow-hidden", 2, "left", "0", "margin", "0 15px"], [1, "tabContainer", "hidden-xs"], [1, "nav", "nav-tabs", "nav-tabsc8y"], [1, "active", 2, "left", "16px"], ["routerlinkactive", "", 3, "title"], [1, "text-primary", 3, "c8yIcon"], [1, "txt"], [1, "visible-xs", "mobile-tabs"]], template: function WidgetPreviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1, "Preview");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, WidgetPreviewComponent_label_2_Template, 2, 0, "label", 1);
        ɵngcc0.ɵɵtemplate(3, WidgetPreviewComponent_label_3_Template, 2, 0, "label", 1);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵtemplate(5, WidgetPreviewComponent_div_5_Template, 9, 3, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "span", 8);
        ɵngcc0.ɵɵtext(11, "Widget title");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵelementStart(14, "a", 11);
        ɵngcc0.ɵɵlistener("click", function WidgetPreviewComponent_Template_a_click_14_listener() { return false; });
        ɵngcc0.ɵɵelement(15, "i", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 13);
        ɵngcc0.ɵɵelementStart(17, "p", 8);
        ɵngcc0.ɵɵtext(18, "Widget example content.");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.previewClasses);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c3, !!ctx.tab));
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc6.NgIf, ɵngcc6.NgClass, ɵngcc1.IconDirective], encapsulation: 2 });
WidgetPreviewComponent.propDecorators = {
    previewClasses: [{ type: Input }],
    tab: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetPreviewComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-widget-preview',
                template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px;\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li class=\"active\" style=\"left: 16px;\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span></a\n          >\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 360px;\">\n      <div class=\"card-header-actions\" style=\"z-index: 8;\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <a href=\"\" (click)=\"(false)\" class=\"dropdown-toggle c8y-dropdown\">\n              <i c8yIcon=\"cog\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { previewClasses: [{
            type: Input
        }], tab: [{
            type: Input
        }] }); })();

class DashboardDetailComponent {
    constructor(modal, iconList, contextDashboardService, navigatorService, permissionsService, translateService) {
        this.modal = modal;
        this.contextDashboardService = contextDashboardService;
        this.navigatorService = navigatorService;
        this.permissionsService = permissionsService;
        this.translateService = translateService;
        this.styling = {
            themeClass: 'dashboard-theme-light',
            headerClass: 'panel-title-regular'
        };
        this.possibleStyling = { DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
        this.DEFAULT_DASHBOARD_MARGIN = 12;
        this.DEFAULT_DASHBOARD_ICON = 'th';
        this.DEFAULT_DASHBOARD_PRIORITY = 10000;
        this.icons = iconList;
        this.filteredIcons = iconList;
    }
    get applyToDevicesOfTypeTitle() {
        const text = this.applyToDevicesOfTypePermitted ?
            gettext('Apply dashboard to all devices of type {{ type }}') :
            gettext('Apply dashboard to all devices of type {{ type }} (permission required)');
        return this.translateService.instant(text, { type: this.dashboard.deviceTypeValue });
    }
    ngAfterContentInit() {
        const defaultDashboardCfg = {
            name: this.isReport ? 'Report' : 'Dashboard',
            priority: this.DEFAULT_DASHBOARD_PRIORITY,
            icon: this.DEFAULT_DASHBOARD_ICON,
            deviceTypeValue: this.deviceType
        };
        if (this.dashboard) {
            this.current = clone(this.dashboard);
            this.setDashboardStyle();
        }
        else {
            this.dashboard = defaultDashboardCfg;
            this.dashboardDetailForm.form.markAsDirty();
        }
        this.setTitle();
        this.setupApplyToDevicesOfTypeCheckbox();
        this.navigatorNodes$ = this.navigatorService.items$;
        this.namePlaceholder = this.isReport ? gettext('e.g. My report') : gettext('e.g. My dashboard');
    }
    setTitle() {
        this.titleName = this.isReport ? gettext('report') : gettext('dashboard');
        this.titleAction = this.current ? gettext('Edit') : gettext('Add');
    }
    setupApplyToDevicesOfTypeCheckbox() {
        const rolesToCheck = ['ROLE_INVENTORY_CREATE', 'ROLE_INVENTORY_ADMIN'];
        this.applyToDevicesOfTypePermitted = this.permissionsService.hasAnyRole(rolesToCheck);
    }
    save() {
        this.dashboard.classes = { [this.styling.themeClass]: true };
        this.dashboard.widgetClasses = { [this.styling.headerClass]: true };
        this.dashboard.c8y_IsNavigatorNode = this.dashboard.c8y_IsNavigatorNode
            ? {}
            : this.current
                ? null
                : undefined;
        this._save(this.dashboard);
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getDashboardPreviewStyle() {
        const cssClasses = {};
        cssClasses[this.styling.headerClass] = true;
        cssClasses[this.styling.themeClass] = true;
        return cssClasses;
    }
    selectIcon(icon) {
        this.dashboard.icon = icon;
        this.dashboardDetailForm.form.markAsDirty();
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredIcons = this.icons.filter(val => search.test(val));
        }
        else {
            this.filteredIcons = this.icons;
        }
    }
    setDashboardStyle() {
        const allClasses = Object.assign(Object.assign({}, this.dashboard.classes), this.dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(c => c.split('-').pop());
        styles.forEach(styleName => {
            this.styling.themeClass = this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, this.styling.themeClass);
            this.styling.headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, this.styling.headerClass);
        });
    }
}
DashboardDetailComponent.ɵfac = function DashboardDetailComponent_Factory(t) { return new (t || DashboardDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ICON_LIST), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Permissions), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
DashboardDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardDetailComponent, selectors: [["c8y-dashboard-detail"]], viewQuery: function DashboardDetailComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dashboardDetailForm = _t.first);
    } }, decls: 47, vars: 39, consts: [[1, "viewport-modal"], [1, "modal-header", "separator-bottom"], [1, "modal-inner-scroll"], [1, "p-l-24", "p-r-24"], [1, "d-contents"], ["dashboardDetailForm", "ngForm"], [1, "row"], [1, "col-sm-6"], [4, "ngIf"], [3, "themeClass", "headerClass", "themeClassChange", "headerClassChange"], [1, "p-b-24", "m-b-0"], [1, "input-group"], ["id", "margin", "name", "margin", "type", "number", "min", "0", "max", "50", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], [1, "input-group-addon"], ["translate", ""], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "name", "translateWidgetTitle", 3, "ngModel", "ngModelChange"], [3, "tab", "previewClasses"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "legend", "form-block"], [1, "d-flex"], [1, "d-block"], ["dropdown", "", 1, "dropdown"], ["dropdownToggle", "", 1, "btn-default", "btn", "btn-gray", 3, "title"], [3, "c8yIcon"], [1, "caret"], ["class", "dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0", "style", "max-height: 250px;", 4, "dropdownMenu"], [1, "flex-grow"], [1, "m-r-4"], ["triggers", "focus", "placement", "right", "container", "body", 1, "btn", "btn-clean", 3, "popover"], [1, "text-primary", 3, "c8yIcon"], ["name", "name", "maxlength", "512", "required", "", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], ["class", "col-sm-6", 4, "ngIf"], [1, "dropdown-menu", "modal-inner-scroll", "dropdown-menu-grid-4", "m-l-0", 2, "max-height", "250px"], [4, "ngFor", "ngForOf"], [3, "click"], [1, "interact", 3, "title", "ngClass"], [1, "icon", 3, "c8yIcon"], ["rows", "2", "name", "description", 1, "form-control", 3, "ngModel", "ngModelChange"], ["type", "number", "name", "priority", "min", "-10000", "max", "10000", "required", "", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], ["type", "checkbox", "name", "isNavigatorNode", 3, "ngModel", "ngModelChange"], ["positionInNavPop", ""], ["type", "number", "name", "priority", "min", "-10000", "max", "20000", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], [1, "list-unstyled", "m-t-16"], [1, "word-break", "m-l-4", "m-r-16"], [1, "pull-right"], [1, "form-group"], ["type", "checkbox", "name", "deviceType", 3, "ngModel", "disabled", "ngModelChange"], ["translate", "", 1, "m-r-4", 3, "translateParams"], ["class", "alert alert-info m-b-24", 4, "ngIf"], [1, "alert", "alert-info", "m-b-24"], ["c8y-icon", "info"], ["translate", "", 3, "translateParams"]], template: function DashboardDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h3");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 2);
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "form", 4, 5);
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵtemplate(12, DashboardDetailComponent_div_12_Template, 33, 29, "div", 8);
        ɵngcc0.ɵɵelementStart(13, "c8y-appearance-settings", 9);
        ɵngcc0.ɵɵlistener("themeClassChange", function DashboardDetailComponent_Template_c8y_appearance_settings_themeClassChange_13_listener($event) { return ctx.styling.themeClass = $event; })("headerClassChange", function DashboardDetailComponent_Template_c8y_appearance_settings_headerClassChange_13_listener($event) { return ctx.styling.headerClass = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 6);
        ɵngcc0.ɵɵelementStart(15, "div", 7);
        ɵngcc0.ɵɵelementStart(16, "c8y-form-group", 10);
        ɵngcc0.ɵɵelementStart(17, "label");
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div", 11);
        ɵngcc0.ɵɵelementStart(21, "input", 12);
        ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_Template_input_ngModelChange_21_listener($event) { return ctx.dashboard.widgetMargin = $event; });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "span", 13);
        ɵngcc0.ɵɵtext(24, "px");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 7);
        ɵngcc0.ɵɵelementStart(26, "c8y-form-group", 10);
        ɵngcc0.ɵɵelementStart(27, "label", 14);
        ɵngcc0.ɵɵtext(28, "Widget titles");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "label", 15);
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵelementStart(31, "input", 16);
        ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_Template_input_ngModelChange_31_listener($event) { return ctx.dashboard.translateWidgetTitle = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(32, "span");
        ɵngcc0.ɵɵelementStart(33, "span");
        ɵngcc0.ɵɵtext(34);
        ɵngcc0.ɵɵpipe(35, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "div", 7);
        ɵngcc0.ɵɵelement(37, "c8y-widget-preview", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 18);
        ɵngcc0.ɵɵelementStart(39, "button", 19);
        ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_Template_button_click_39_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵtext(41);
        ɵngcc0.ɵɵpipe(42, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(43, "button", 20);
        ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_Template_button_click_43_listener() { return ctx.save(); });
        ɵngcc0.ɵɵpipe(44, "translate");
        ɵngcc0.ɵɵtext(45);
        ɵngcc0.ɵɵpipe(46, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate2("", ɵngcc0.ɵɵpipeBind1(4, 19, ctx.titleAction), "\u00A0", ɵngcc0.ɵɵpipeBind1(5, 21, ctx.titleName), "");
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isNamedDashboard || ctx.isReport);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("themeClass", ctx.styling.themeClass)("headerClass", ctx.styling.headerClass);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 23, "Widget margin"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 25, "Widget margin"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx.DEFAULT_DASHBOARD_MARGIN);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dashboard.widgetMargin);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(30, 27, "Translate if possible"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dashboard.translateWidgetTitle);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(35, 29, "Translate if possible"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("tab", !ctx.isNamedDashboard ? ctx.dashboard : undefined)("previewClasses", ctx.getDashboardPreviewStyle());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(40, 31, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 33, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(44, 35, "Save"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.invalid || _r0.form.pristine);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(46, 37, "Save"), " ");
    } }, directives: function () { return [ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc6.NgIf, AppearanceSettingsComponent, ɵngcc1.FormGroupComponent, ɵngcc7.MinValidator, ɵngcc7.MaxValidator, ɵngcc7.NumberValueAccessor, ɵngcc7.DefaultValueAccessor, ɵngcc1.MinValidationDirective, ɵngcc1.MaxValidationDirective, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc1.C8yTranslateDirective, ɵngcc7.CheckboxControlValueAccessor, WidgetPreviewComponent, ɵngcc8.BsDropdownDirective, ɵngcc8.BsDropdownToggleDirective, ɵngcc1.IconDirective, ɵngcc8.BsDropdownMenuDirective, ɵngcc9.PopoverDirective, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc7.MaxLengthValidator, ɵngcc7.RequiredValidator, ɵngcc6.NgForOf, ɵngcc6.NgClass]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe, ɵngcc6.AsyncPipe, ɵngcc6.SlicePipe]; }, encapsulation: 2 });
DashboardDetailComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: Array, decorators: [{ type: Inject, args: [ICON_LIST,] }] },
    { type: ContextDashboardService },
    { type: NavigatorService },
    { type: Permissions },
    { type: TranslateService }
];
DashboardDetailComponent.propDecorators = {
    dashboardDetailForm: [{ type: ViewChild, args: ['dashboardDetailForm', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardDetailComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-dashboard-detail',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3>{{ titleAction | translate }}&nbsp;{{ titleName | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <h6 class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </h6>\n              <div class=\"d-flex\">\n                <c8y-form-group>\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      class=\"btn-default btn btn-gray\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px;\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn btn-clean\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      triggers=\"focus\"\n                      placement=\"right\"\n                      container=\"body\"\n                    >\n                      <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                    </button>\n                  </label>\n                  <input\n                    title=\"{{ 'Menu label' | translate }}\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboard.name\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label translate>Description</label>\n                <textarea\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigation' | translate }}</span>\n                      <button\n                        class=\"btn btn-clean\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      /><span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\"> {{ node.priority }} </span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn btn-clean\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!current && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span class=\"m-r-4\" translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                      Apply dashboard to all devices of type <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                    This dashboard is shared between all devices of the type <i>{{ type }}</i>.\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            >\n            </c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label>{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      title=\"{{ 'Widget margin' | translate }}\"\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    /><span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\">\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.BsModalRef }, { type: Array, decorators: [{
                type: Inject,
                args: [ICON_LIST]
            }] }, { type: ContextDashboardService }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc1.Permissions }, { type: ɵngcc2.TranslateService }]; }, { dashboardDetailForm: [{
            type: ViewChild,
            args: ['dashboardDetailForm', { static: true }]
        }] }); })();

class AppearanceSettingsComponent {
    constructor() {
        this.themeClass = 'dashboard-theme-light';
        this.headerClass = 'panel-title-regular';
        this.themeClassChange = new EventEmitter();
        this.headerClassChange = new EventEmitter();
        this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
        this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
    }
    themeClassClick(value) {
        value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
        this.themeClass = value;
        this.themeClassChange.emit(value);
    }
    headerClassClick(value) {
        value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
        this.headerClass = value;
        this.headerClassChange.emit(value);
    }
    resetToDefault(value, compareTo, defaultValue) {
        if (defaultValue && value === compareTo) {
            value = defaultValue;
        }
        return value;
    }
}
AppearanceSettingsComponent.ɵfac = function AppearanceSettingsComponent_Factory(t) { return new (t || AppearanceSettingsComponent)(); };
AppearanceSettingsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AppearanceSettingsComponent, selectors: [["c8y-appearance-settings"]], inputs: { themeClass: "themeClass", headerClass: "headerClass", possibleStylingTheme: "possibleStylingTheme", possibleStylingHeader: "possibleStylingHeader", defaultThemeClass: "defaultThemeClass", defaultHeaderClass: "defaultHeaderClass" }, outputs: { themeClassChange: "themeClassChange", headerClassChange: "headerClassChange" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: ControlContainer, useExisting: NgForm }])], decls: 14, vars: 2, consts: [[1, "legend", "form-block"], ["translate", ""], [1, "row"], [1, "col-sm-6", "m-b-32"], [1, "list-group", 2, "box-shadow", "0 0 0 1px rgba(0, 0, 0, 0.05)"], ["class", "list-group-item flex-row", "style", "align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);", 4, "ngFor", "ngForOf"], [1, "col-sm-6"], ["class", "list-group-item flex-row a-i-center", "style", "box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);", 4, "ngFor", "ngForOf"], [1, "list-group-item", "flex-row", 2, "align-items", "center", "box-shadow", "0 1px 0 0 rgba(0, 0, 0, 0.05)"], [1, "list-item-checkbox"], [1, "c8y-radio"], ["type", "radio", "name", "content", 3, "id", "value", "ngModel", "click"], [3, "for"], ["class", "text-muted", "translate", "", 4, "ngIf"], ["container", "body", "placement", "top", "triggers", "focus", 1, "btn", "btn-clean", "flex-item-top", 3, "popover"], [1, "text-primary", 3, "c8yIcon"], ["translate", "", 1, "text-muted"], [1, "list-group-item", "flex-row", "a-i-center", 2, "box-shadow", "0 1px 0 0 rgba(0, 0, 0, 0.05)"], ["type", "radio", "name", "header", 3, "id", "value", "ngModel", "click"]], template: function AppearanceSettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h6", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2, "Layout");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "label", 1);
        ɵngcc0.ɵɵtext(6, "Theme");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "ul", 4);
        ɵngcc0.ɵɵtemplate(8, AppearanceSettingsComponent_li_8_Template, 14, 12, "li", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵelementStart(10, "label", 1);
        ɵngcc0.ɵɵtext(11, "Widget header style");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "ul", 4);
        ɵngcc0.ɵɵtemplate(13, AppearanceSettingsComponent_li_13_Template, 14, 12, "li", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.possibleStylingTheme);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.possibleStylingHeader);
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc6.NgForOf, ɵngcc7.RadioControlValueAccessor, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgIf, ɵngcc9.PopoverDirective, ɵngcc1.IconDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AppearanceSettingsComponent.propDecorators = {
    themeClass: [{ type: Input }],
    headerClass: [{ type: Input }],
    defaultThemeClass: [{ type: Input }],
    defaultHeaderClass: [{ type: Input }],
    themeClassChange: [{ type: Output }],
    headerClassChange: [{ type: Output }],
    possibleStylingTheme: [{ type: Input }],
    possibleStylingHeader: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppearanceSettingsComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-appearance-settings',
                template: "<h6 class=\"legend form-block\"><span translate>Layout</span></h6>\n<div class=\"row \">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradiocontentclass' + i\">\n          <span>{{ themeClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"themeClassItem.class === defaultThemeClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row a-i-center\"\n        style=\"box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradioheaderclass' + i\">\n          <span>{{ headerClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"headerClassItem.class === defaultHeaderClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
            }]
    }], function () { return []; }, { themeClass: [{
            type: Input
        }], headerClass: [{
            type: Input
        }], themeClassChange: [{
            type: Output
        }], headerClassChange: [{
            type: Output
        }], possibleStylingTheme: [{
            type: Input
        }], possibleStylingHeader: [{
            type: Input
        }], defaultThemeClass: [{
            type: Input
        }], defaultHeaderClass: [{
            type: Input
        }] }); })();

/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.inventory = inventory;
        this.gainsightService = gainsightService;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canDelete = true;
        this.isLoading = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
            yield this.contextDashboardService.update(this.mo);
            this.onLoad();
        });
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child) {
        return __awaiter(this, void 0, void 0, function* () {
            const { children } = child;
            const dashboardMO = this.mo;
            const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
            dashboardMO.c8y_Dashboard.children = mappedChildren;
            return this.contextDashboardService.update(dashboardMO);
        });
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.contextDashboardService.delete(this.mo);
            if (this.route.parent) {
                const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
                this.router.navigateByUrl(route);
            }
        });
    }
    /**
     * Edits the current dashboard
     */
    editDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            const isReport = this.contextDashboardService.isReport(this.mo);
            if (isReport) {
                const { name, icon, priority, c8y_IsNavigatorNode, description } = this.context;
                Object.assign(this.dashboard, { name, icon, priority, c8y_IsNavigatorNode, description });
            }
            const initialState = {
                dashboard: this.dashboard,
                deviceType: this.context.type,
                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                isReport
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardMO = cloneDeep(this.mo);
                const cfg = yield modal.result;
                if (isReport) {
                    const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                    dashboardMO.c8y_Dashboard = dashboardCfg;
                    this.updateReport({
                        id: this.context.id,
                        name,
                        icon,
                        c8y_IsNavigatorNode,
                        priority,
                        description
                    });
                }
                else {
                    dashboardMO.c8y_Dashboard = cfg;
                }
                yield this.contextDashboardService.update(dashboardMO);
                yield this.contextDashboardService.refreshTabs(dashboardMO);
                this.onLoad();
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const { x, y, width, height } = change.source;
            const component = yield this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
            if (!component) {
                this.addWidget();
                return;
            }
            yield this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }));
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected) {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                mo: this.mo,
                context: this.context.c8y_Report ? {} : this.context,
                selected: cloneDeep(selected)
            };
            const modal = this.bsModal.show(WidgetConfigComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const newWidget = yield modal.result;
                if (!this.mo.c8y_Dashboard.children) {
                    this.mo.c8y_Dashboard.children = {};
                }
                this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                this.contextDashboardService.update(this.mo);
                newWidget.classes = this.mergeWidgetClasses(newWidget);
                yield this.updateWidget(newWidget);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = findIndex(this.widgets, { id: widget.id });
            const isNew = index === -1;
            const mappedWidget = yield this.widgetService.mapLegacy(widget);
            if (isNew) {
                this.widgets.push(mappedWidget);
            }
            else {
                this.widgets.splice(index, 1, mappedWidget);
            }
        });
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change) {
        const { widget, source } = change;
        delete this.mo.c8y_Dashboard.children[widget.id];
        const removed = this.widgets.find(({ id }) => id === widget.id);
        this.widgets.splice(this.widgets.indexOf(removed), 1);
        const { dashboard } = source;
        dashboard.children = dashboard.children.filter(c => c.data.id !== widget.id);
        // using setTimeout to give the component the chance to remove it.
        setTimeout(() => {
            const child = new DashboardChildChange(source);
            child.collapseUpAll();
            this.updateDashboardChildren(child);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleIsFrozenFlag(settings);
            try {
                yield this.contextDashboardService.update(this.mo);
                if (this.dashboard.isFrozen) {
                    this.alert.success(gettext('Your dashboard is locked now.'));
                }
                else {
                    this.alert.success(gettext('Your dashboard is unlocked now.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.toggleIsFrozenFlag(settings);
            }
        });
    }
    updateReport(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventory.update(mo);
            this.context = res.data;
            if (this.route.parent) {
                this.route.parent.snapshot.data.contextData = this.context;
            }
            this.contextDashboardService.updateNavigatorItem(res.data);
        });
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            this.context = this.route.parent.snapshot.data.contextData;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    onLoad(trackExperience) {
        return __awaiter(this, void 0, void 0, function* () {
            const canEditDashboard = yield this.contextDashboardService.canEditDashboard(this.mo);
            this.disabled = !canEditDashboard;
            const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
            const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            const isReport = this.contextDashboardService.isReport(this.mo);
            const dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
            this.widgets = yield Promise.all(values(dashboardChildren).map(widget => {
                widget.classes = this.mergeWidgetClasses(widget);
                if (isDeviceType) {
                    this.applyDeviceTarget(widget);
                }
                if (trackExperience) {
                    this.gainsightService.triggerEvent('loadWidget', {
                        widgetName: widget.componentId || widget.name
                    });
                }
                return this.widgetService.mapLegacy(widget);
            }));
            this.class = Object.keys(dashboardClasses).join(' ');
            if (isReport) {
                this.addReportDashboardSettings();
            }
            this.isLoading = false;
        });
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
        return Object.assign({ card: true, 'card-dashboard': true, [kebabCase(widget.componentId || widget.name)]: true }, widgetClasses);
    }
    componentToWidget(child) {
        return Object.assign(Object.assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    }
    addReportDashboardSettings() {
        this.setTitle = true;
        this.title = this.context.name;
        this.breadcrumbSettings = {
            icon: 'th',
            label: 'Reports',
            path: 'reports'
        };
        this.canDelete = false;
    }
}
ContextDashboardComponent.ɵfac = function ContextDashboardComponent_Factory(t) { return new (t || ContextDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(CONTEXT_DASHBOARD_CONFIG), ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GainsightService)); };
ContextDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ContextDashboardComponent, selectors: [["c8y-context-dashboard"]], hostAttrs: [1, "dashboard", "c8y-grid-dashboard", 2, "display", "block"], hostVars: 2, hostBindings: function ContextDashboardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, inputs: { childrenClasses: "childrenClasses", setTitle: "setTitle", disabled: "disabled", defaultWidgets: "defaultWidgets", canDelete: "canDelete", isLoading: "isLoading", context: "context", breadcrumbSettings: "breadcrumbSettings", name: "name" }, decls: 2, vars: 15, consts: [[3, "placement", 4, "ngIf"], [3, "context", "contextDashboard", "widgets", "settings", "breadcrumb", "onFreeze", "onChangeDashboard", "onAddWidget", "onEditWidget", "onDeleteWidget", "onChangeStart", "onChangeEnd", "onEditDashboard", "onDeleteDashboard"], [3, "placement"], [3, "disabled", "click"], ["c8yIcon", "undo"], ["translate", ""]], template: function ContextDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ContextDashboardComponent_c8y_action_bar_item_0_Template, 6, 2, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-widgets-dashboard", 1);
        ɵngcc0.ɵɵlistener("onFreeze", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onFreeze_1_listener($event) { return ctx.toggleFreeze($event); })("onChangeDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeDashboard_1_listener($event) { return ctx.updateDashboardChildren($event); })("onAddWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onAddWidget_1_listener() { return ctx.addWidget(); })("onEditWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditWidget_1_listener($event) { return ctx.editWidget($event); })("onDeleteWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteWidget_1_listener($event) { return ctx.deleteWidget($event); })("onChangeStart", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeStart_1_listener() { return ctx.addDashboardClassToBody(); })("onChangeEnd", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeEnd_1_listener() { return ctx.removeDashboardClassFromBody(); })("onEditDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditDashboard_1_listener() { return ctx.editDashboard(); })("onDeleteDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteDashboard_1_listener() { return ctx.deleteDashboard(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.defaultWidgets.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context)("contextDashboard", ctx.dashboard)("widgets", ctx.widgets)("settings", ɵngcc0.ɵɵpureFunction8(6, _c7, ctx.isLoading, ctx.dashboard == null ? null : ctx.dashboard.isFrozen, ctx.disabled, ctx.canDelete, ctx.dashboard == null ? null : ctx.dashboard.translateWidgetTitle, ctx.moduleConfig.allowFullscreen, ctx.setTitle ? ctx.dashboard.name || ctx.title : undefined, ctx.dashboard == null ? null : ctx.dashboard.widgetMargin))("breadcrumb", ctx.breadcrumbSettings);
    } }, directives: [ɵngcc6.NgIf, ɵngcc1.WidgetsDashboardComponent, ɵngcc1.ActionBarItemComponent, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective], encapsulation: 2 });
ContextDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ContextDashboardService },
    { type: AlertService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
    { type: WidgetService },
    { type: BsModalService },
    { type: InventoryService },
    { type: GainsightService }
];
ContextDashboardComponent.propDecorators = {
    name: [{ type: Input }],
    childrenClasses: [{ type: Input }],
    context: [{ type: Input }],
    setTitle: [{ type: Input }],
    disabled: [{ type: Input }],
    defaultWidgets: [{ type: Input }],
    canDelete: [{ type: Input }],
    isLoading: [{ type: Input }],
    breadcrumbSettings: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-context-dashboard',
                template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                host: {
                    style: `
      display: block;
    `,
                    class: 'dashboard c8y-grid-dashboard'
                }
            }]
    }], function () { return [{ type: ɵngcc4.ActivatedRoute }, { type: ɵngcc4.Router }, { type: ContextDashboardService }, { type: ɵngcc1.AlertService }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }, { type: WidgetService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc3.InventoryService }, { type: ɵngcc1.GainsightService }]; }, { childrenClasses: [{
            type: Input
        }], setTitle: [{
            type: Input
        }], disabled: [{
            type: Input
        }], defaultWidgets: [{
            type: Input
        }], canDelete: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], class: [{
            type: HostBinding,
            args: ['class']
        }], context: [{
            type: Input
        }], breadcrumbSettings: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();

class DashboardActionsFactory {
    constructor(router, contextDashboardService, bsModal, permissions) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.permissions = permissions;
    }
    get(activatedRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = !activatedRoute.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            const canEditDashboard = yield this.isEnabled(context);
            return [
                {
                    label: gettext('Add dashboard'),
                    priority: 2500,
                    action: () => this.addDashboard(context),
                    disabled: !canEditDashboard
                }
            ];
        });
    }
    addDashboard(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (context.context === ViewContext.Device) {
                initialState = {
                    deviceType: context.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, context);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended emptys
            }
        });
    }
    isEnabled(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.contextData && context.contextData.id) {
                return ((yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context.contextData)) && [ViewContext.Device, ViewContext.Group].includes(context.context));
            }
            return (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']) &&
                [ViewContext.Device, ViewContext.Group].includes(context.context));
        });
    }
}
DashboardActionsFactory.ɵfac = function DashboardActionsFactory_Factory(t) { return new (t || DashboardActionsFactory)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ContextDashboardService), ɵngcc0.ɵɵinject(ɵngcc5.BsModalService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions)); };
DashboardActionsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DashboardActionsFactory, factory: DashboardActionsFactory.ɵfac });
DashboardActionsFactory.ctorParameters = () => [
    { type: Router },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: Permissions }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardActionsFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc4.Router }, { type: ContextDashboardService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc1.Permissions }]; }, null); })();

const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
const ɵ0$4 = defaultConfig;
class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ROUTE,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                    multi: true
                },
                {
                    provide: HOOK_ACTION,
                    useClass: DashboardActionsFactory,
                    multi: true
                }
            ]
        };
    }
}
ContextDashboardModule.ɵfac = function ContextDashboardModule_Factory(t) { return new (t || ContextDashboardModule)(); };
ContextDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ContextDashboardModule });
ContextDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: ɵ0$4
        }
    ], imports: [[CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0$4
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextDashboardModule, { declarations: function () { return [AppearanceSettingsComponent, ContextDashboardComponent, WidgetConfigComponent, WidgetPreviewComponent, DashboardDetailComponent]; }, imports: function () { return [CoreModule, TooltipModule, PopoverModule, ɵngcc8.BsDropdownModule]; }, exports: function () { return [ContextDashboardComponent, WidgetConfigComponent]; } }); })();

class ReportDashboardService {
    constructor(inventoryService, navigatorService) {
        this.inventoryService = inventoryService;
        this.navigatorService = navigatorService;
        this.queriesUtil = new QueriesUtil();
    }
    listReports(options = {}) {
        let query = { __has: 'c8y_Report' };
        if (options.filter) {
            query = this.queriesUtil.addAndFilter(query, options.filter);
        }
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            pageSize: options.pageSize || 50,
            withTotalPages: true
        };
        return this.inventoryService.list(filters);
    }
    createReport(reportCfg) {
        const report = {};
        Object.assign(report, reportCfg);
        Object.assign(report, { c8y_Report: {} });
        return this.inventoryService.create(report);
    }
    addReportNavigatorNode(report) {
        const node = new NavigatorNode({
            label: report.name,
            path: `reports/${report.id}`,
            icon: report.icon,
            priority: report.priority
        });
        this.navigatorService.add(node);
    }
    removeNavigatorNode(report) {
        this.navigatorService.state.forEach(node => {
            if (node.path === `reports/${report.id}`) {
                this.navigatorService.remove(node);
                return;
            }
        });
    }
}
ReportDashboardService.ɵfac = function ReportDashboardService_Factory(t) { return new (t || ReportDashboardService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService)); };
ReportDashboardService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardService, factory: ReportDashboardService.ɵfac });
ReportDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: NavigatorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ɵngcc1.NavigatorService }]; }, null); })();

class ReportDashboardListComponent {
    constructor(inventoryService, contextDashboardService, bsModal, translateService, modal, alertService, reportDashboardService) {
        this.inventoryService = inventoryService;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.translateService = translateService;
        this.modal = modal;
        this.alertService = alertService;
        this.reportDashboardService = reportDashboardService;
        this.textFilter$ = new BehaviorSubject('');
        this.reload$ = new BehaviorSubject(null);
        this.reloading = false;
        this.reports$ = combineLatest(this.textFilter$.pipe(debounceTime(400), distinctUntilChanged()), this.reload$).pipe(tap(() => {
            this.reloading = true;
        }), switchMap(([text]) => this.loadReports(text)), tap(() => {
            this.reloading = false;
        }), shareReplay(1));
        this.DELETED_SUCCESS_MSG = gettext('Report deleted.');
    }
    loadReports(partialName) {
        return __awaiter(this, void 0, void 0, function* () {
            return partialName
                ? this.reportDashboardService.listReports({ filter: { name: `*${partialName}*` } })
                : this.reportDashboardService.listReports();
        });
    }
    add() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                isReport: true,
                isNamedDashboard: true
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                ignoreBackdropClick: true,
                initialState
            }).content;
            try {
                const cfg = yield modal.result;
                const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                const report = (yield this.reportDashboardService.createReport({
                    name,
                    icon,
                    c8y_IsNavigatorNode,
                    priority,
                    description
                })).data;
                yield this.contextDashboardService.create(dashboardCfg, undefined, `${this.contextDashboardService.REPORT_PARTIAL_NAME}${report.id}`);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.addReportNavigatorNode(report);
                }
                this.reload$.next();
                modal.close();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    delete(report) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const msg = gettext(`You are about to delete the report "{{ reportName }}". Do you want to proceed?`);
                yield this.modal.confirm(gettext('Delete report'), this.translateService.instant(msg, {
                    reportName: report.name
                }), Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                this.contextDashboardService
                    .getDashboard$(`report_${report.id}`, [ContextDashboardType.Named])
                    .pipe(take(1))
                    .subscribe(dashboard => this.contextDashboardService.delete(dashboard, false));
                yield this.inventoryService.delete(report.id);
                this.alertService.success(this.DELETED_SUCCESS_MSG);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.removeNavigatorNode(report);
                }
                this.reload$.next();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    update(report) {
        return __awaiter(this, void 0, void 0, function* () {
            report.c8y_IsNavigatorNode = report.c8y_IsNavigatorNode ? {} : null;
            yield this.inventoryService.update(report);
            report.c8y_IsNavigatorNode
                ? this.reportDashboardService.addReportNavigatorNode(report)
                : this.reportDashboardService.removeNavigatorNode(report);
        });
    }
}
ReportDashboardListComponent.ɵfac = function ReportDashboardListComponent_Factory(t) { return new (t || ReportDashboardListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ReportDashboardService)); };
ReportDashboardListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ReportDashboardListComponent, selectors: [["c8y-report-dashboard-list"]], viewQuery: function ReportDashboardListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(FilterInputComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filter = _t.first);
    } }, decls: 34, vars: 41, consts: [["translate", ""], ["itemClass", "navbar-form", 3, "placement"], [1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "title", "placeholder", "ngModel", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "search", 4, "ngIf"], ["class", "text-muted", "c8yIcon", "times", 3, "click", 4, "ngIf"], [3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["c8yIcon", "refresh", 3, "ngClass"], [1, "p-b-32"], ["class", "page-sticky-header hidden-xs hidden-sm", 4, "ngIf"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["class", "c8y-empty-state text-center m-t-40", 4, "ngIf"], ["c8yIcon", "search"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [1, "page-sticky-header", "hidden-xs", "hidden-sm"], [1, "p-l-24"], [1, "content-flex-80"], [1, "col-3"], [1, "col-6"], [1, "col-2"], [3, "icon"], [1, "content-flex-70"], [1, "btn-clean", 3, "title", "routerLink"], [1, "text-truncate"], [1, "text-truncate-wrap"], ["class", "text-muted", 4, "ngIf", "ngIfElse"], ["showDescription", ""], [1, "m-t-8", "visible-xs"], [1, "c8y-switch", "c8y-switch--inline", 3, "title"], ["type", "checkbox", 3, "ngModel", "ngModelChange", "change"], [1, "visible-xs"], [1, "col-1", "text-right", "hidden-xs"], [1, "btn-dot", "showOnHover", "pull-right", 3, "title", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], [1, "visible-xs", "p-t-8", "text-right"], [1, "btn-danger", "btn", "btn-xs", 3, "title", "click"], ["c8yIcon", "trash"], [1, "text-muted"], [1, "c8y-empty-state", "text-center", "m-t-40"], ["c8yIcon", "c8y-reports", 1, "c8y-icon-duocolor"], ["translate", "", 1, "btn", "btn-primary", 3, "click"], ["c8y-guide-docs", ""], ["c8y-guide-href", "users-guide/cockpit/#reports"]], template: function ReportDashboardListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2, " Reports ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(3, "\u00A0\n");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "input", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ReportDashboardListComponent_Template_input_ngModelChange_6_listener($event) { return ctx.textFilter$.next($event); });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "span", 4);
        ɵngcc0.ɵɵtemplate(11, ReportDashboardListComponent_i_11_Template, 1, 0, "i", 5);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵtemplate(13, ReportDashboardListComponent_i_13_Template, 1, 0, "i", 6);
        ɵngcc0.ɵɵpipe(14, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "c8y-action-bar-item", 7);
        ɵngcc0.ɵɵelementStart(16, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_Template_button_click_16_listener() { return ctx.add(); });
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelement(18, "i", 9);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "c8y-action-bar-item", 7);
        ɵngcc0.ɵɵelementStart(22, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_Template_button_click_22_listener() { return ctx.loadReports(); });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelement(24, "i", 10);
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "div", 11);
        ɵngcc0.ɵɵelementStart(28, "c8y-list-group");
        ɵngcc0.ɵɵtemplate(29, ReportDashboardListComponent_c8y_li_29_Template, 13, 9, "c8y-li", 12);
        ɵngcc0.ɵɵpipe(30, "async");
        ɵngcc0.ɵɵtemplate(31, ReportDashboardListComponent_c8y_li_31_Template, 30, 19, "c8y-li", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(32, ReportDashboardListComponent_div_32_Template, 15, 0, "div", 14);
        ɵngcc0.ɵɵpipe(33, "async");
    } if (rf & 2) {
        let tmp_13_0;
        let tmp_16_0;
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 17, "Filter\u2026"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 19, "Filter\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ɵngcc0.ɵɵpipeBind1(9, 21, ctx.textFilter$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(12, 23, ctx.textFilter$).length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(14, 25, ctx.textFilter$).length > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 27, "Add report"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 29, "Add report"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 31, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(39, _c8, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 33, "Reload"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_13_0 = ɵngcc0.ɵɵpipeBind1(30, 35, ctx.reports$)) == null ? null : tmp_13_0.data.length) > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.reports$)("c8yForLoadMore", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_16_0 = ɵngcc0.ɵɵpipeBind1(33, 37, ctx.reports$)) == null ? null : tmp_16_0.data.length) === 0);
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.ActionBarItemComponent, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgIf, ɵngcc1.IconDirective, ɵngcc6.NgClass, ɵngcc1.ListGroupComponent, ɵngcc1.ForOfDirective, ɵngcc1.ListItemComponent, ɵngcc1.ListItemIconComponent, ɵngcc1.ListItemBodyComponent, ɵngcc4.RouterLink, ɵngcc7.CheckboxControlValueAccessor, ɵngcc1.GuideDocsComponent, ɵngcc1.GuideHrefDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc6.AsyncPipe], encapsulation: 2 });
ReportDashboardListComponent.ctorParameters = () => [
    { type: InventoryService },
    { type: ContextDashboardService },
    { type: BsModalService },
    { type: TranslateService },
    { type: ModalService },
    { type: AlertService },
    { type: ReportDashboardService }
];
ReportDashboardListComponent.propDecorators = {
    filter: [{ type: ViewChild, args: [FilterInputComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-report-dashboard-list',
                template: "<c8y-title>\n  <span translate>\n    Reports\n  </span>&nbsp;\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\"\n        *ngIf=\"(textFilter$ | async).length === 0\"\n      ></i>\n      <i class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Add report' | translate }}\"\n    (click)=\"add()\"\n    >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"loadReports()\"\n  >\n    <i [ngClass]=\"{ 'icon-spin': reloading }\"\n      c8yIcon=\"refresh\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n <!-- TODO: uncomment when help is available\n  <c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n-->\n\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li class=\"page-sticky-header hidden-xs hidden-sm\"\n      *ngIf=\"(reports$ | async)?.data.length > 0\"\n    >\n      <c8y-li-icon>\n        <i class=\"p-l-24\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-80\">\n        <div class=\"col-3\">\n          {{ 'Report' | translate }}\n        </div>\n        <div class=\"col-6\">\n          {{ 'Description' | translate }}\n        </div>\n        <div class=\"col-2\">\n          {{ 'Show in navigator' | translate }}\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n\n    <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n      <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n      <c8y-li-body class=\"content-flex-70\">\n        <div class=\"col-3\">\n          <button class=\"btn-clean\"\n            title=\"{{ report.name }}\"\n            routerLink=\"/reports/{{ report.id }}\"\n          >\n            <span class=\"text-truncate\">\n              {{ report.name }}\n            </span>\n          </button>\n        </div>\n        <div class=\"col-6\">\n          <small class=\"text-truncate-wrap\">\n            <em class=\"text-muted\"\n              *ngIf=\"!report.description; else showDescription\"\n            >\n              {{ 'No description available.' | translate }}\n            </em>\n            <ng-template #showDescription>\n              {{ report.description }}\n            </ng-template>\n          </small>\n        </div>\n        <div class=\"col-2\">\n          <span class=\"m-t-8 visible-xs\"></span>\n          <label class=\"c8y-switch c8y-switch--inline\"\n            title=\"{{ 'Show in navigator' | translate }}\"\n          >\n            <input\n              [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n              type=\"checkbox\"\n              (change)=\"update(report)\"\n            />\n            <span></span>\n            <span class=\"visible-xs\">\n              {{ 'Show in navigator' | translate }}\n            </span>\n          </label>\n        </div>\n        <div class=\"col-1 text-right hidden-xs\">\n          <button class=\"btn-dot showOnHover pull-right\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i class=\"text-danger\"\n            c8yIcon=\"minus-circle\"\n            ></i>\n          </button>\n        </div>\n        <div class=\"visible-xs p-t-8 text-right\">\n          <button class=\"btn-danger btn btn-xs\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i c8yIcon=\"trash\"></i>\n            Delete\n          </button>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"c8y-empty-state text-center m-t-40\"\n  *ngIf=\"(reports$ | async)?.data.length === 0\"\n  >\n  <h1 c8yIcon=\"c8y-reports\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>\n    There are no reports defined\n  </h3>\n  <p translate>\n    Add a report first.\n  </p>\n  <div>\n    <button class=\"btn btn-primary\"\n      (click)=\"add()\"\n      translate\n    >\n      Add report\n    </button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\">\n        User guide`KEEP_ORIGINAL`\n      </a>.\n      </small>\n  </p>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ContextDashboardService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc2.TranslateService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.AlertService }, { type: ReportDashboardService }]; }, { filter: [{
            type: ViewChild,
            args: [FilterInputComponent, { static: false }]
        }] }); })();

/**
 * A hook to define the default widgets of the home dashboard in the cockpit app.
 */
const COCKPIT_HOME_DASHBOARD_CONFIG = new InjectionToken('CockpitHomeDashboardConfig');
/**
 * An array of widgets that is per default placed on the home dashboard of the cockpit app.
 */
const DEFAULT_COCKPIT_HOME_WIDGETS = [
    {
        name: 'cockpit.welcome.widget',
        title: gettext(''),
        _x: 0,
        _y: 0,
        _height: 5,
        _width: 12,
        classes: { 'panel-title-hidden': true }
    },
    {
        name: 'Asset Alarms',
        title: gettext('Active, critical alarms'),
        _x: 0,
        _y: 5,
        _height: 4,
        _width: 6
    },
    {
        name: 'Recent Alarms',
        title: gettext('Recent alarms'),
        _x: 0,
        _y: 9,
        _height: 4,
        _width: 6
    },
    {
        name: 'Map',
        title: gettext('Map'),
        _x: 6,
        _y: 5,
        _height: 8,
        _width: 6
    }
];

class CockpitDashboardComponent {
    constructor(appState, homeDashboardConfig) {
        this.appState = appState;
        this.homeDashboardConfig = homeDashboardConfig;
        this.defaultWidgets = DEFAULT_COCKPIT_HOME_WIDGETS;
        this.dashboardName = 'home-cockpit1';
        this.pageTitle = gettext('Home');
        this.applyDashboardConfig(this.homeDashboardConfig);
    }
    applyDashboardConfig(config) {
        if (!config) {
            return;
        }
        if (config.dashboardName) {
            this.dashboardName = config.dashboardName;
        }
        if (config.defaultWidgets) {
            this.defaultWidgets = config.defaultWidgets;
        }
        if (config.userSpecific && this.appState.currentUser.value) {
            this.dashboardName = `${this.appState.currentUser.value.userName.replace(/\./g, '__')}_${this.dashboardName}`;
        }
        if (config.pageTitle) {
            this.pageTitle = config.pageTitle;
        }
    }
}
CockpitDashboardComponent.ɵfac = function CockpitDashboardComponent_Factory(t) { return new (t || CockpitDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppStateService), ɵngcc0.ɵɵdirectiveInject(COCKPIT_HOME_DASHBOARD_CONFIG, 8)); };
CockpitDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CockpitDashboardComponent, selectors: [["c8y-cockpit-dashboard"]], decls: 4, vars: 6, consts: [[3, "name", "defaultWidgets", "canDelete"]], template: function CockpitDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "c8y-context-dashboard", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx.pageTitle), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("name", ctx.dashboardName)("defaultWidgets", ctx.defaultWidgets)("canDelete", false);
    } }, directives: [ɵngcc1.TitleComponent, ContextDashboardComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
CockpitDashboardComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COCKPIT_HOME_DASHBOARD_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-cockpit-dashboard',
                template: "<c8y-title>\n  {{ pageTitle | translate}}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COCKPIT_HOME_DASHBOARD_CONFIG]
            }] }]; }, null); })();

class WelcomeToCockpit {
    constructor(tenantService, docs, router, navigator, applicationService) {
        this.tenantService = tenantService;
        this.docs = docs;
        this.router = router;
        this.navigator = navigator;
        this.applicationService = applicationService;
        this.quickLinks = [];
        this.CONFIGURATION_NODE = 'Configuration';
        this.TRIAL = 'TRIAL';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.tenantType = yield this.tenantService.currentTenantType();
            this.setMessage();
            this.navSubscription = this.navigator.items$.subscribe(nodes => {
                this.navNodes = nodes;
                this.configurationNode = nodes.find((node) => node.label === this.CONFIGURATION_NODE);
            });
            this.docsSubscription = this.docs.items$.subscribe(links => {
                this.links = links;
            });
            // <---TRIAL & REGULAR TENANT --->
            this.createConnectSmartphoneQuickLink();
            yield this.createQuicklinkRegisterDevice();
            // <--- TRIAL TENANT --->
            if (this.tenantType === this.TRIAL) {
                this.createQuicklinkUserGuide();
                return;
            }
            // <--- REGULAR TENANT --->
            this.createQuicklinkAddGroup();
            this.createQuickLinkReports();
            this.createQuickLinkExports();
            this.createQuicklinkSmartRules();
        });
    }
    ngOnDestroy() {
        if (this.docsSubscription && !this.docsSubscription.closed) {
            this.docsSubscription.unsubscribe();
        }
        if (this.navSubscription && !this.navSubscription.closed) {
            this.navSubscription.unsubscribe();
        }
    }
    setMessage() {
        if (this.tenantType === this.TRIAL) {
            this.welcomeMessage = gettext(`
        The Cockpit application allows you to build IoT applications in minutes.
        To get started, connect any device to the platform.
        If you do not have an IoT device to hand, you can start by connecting your smartphone.
        Click below to be guided through the process.
      `);
        }
        else {
            this.welcomeMessage = gettext(`
        The Cockpit application provides you with options to manage
        and monitor Internet of Things assets and data from business perspective.
      `);
        }
    }
    createQuicklinkAddGroup() {
        // comes from angularJS factory c8yQuickLinks
        const addGroup = this.links.find(link => link.label === 'Add group');
        if (addGroup) {
            this.quickLinks.push(addGroup);
        }
    }
    createConnectSmartphoneQuickLink() {
        // Provider in SensorPhoneModule defines the
        // 'Connect smartphone' quicklink.
        const connectSmartphone = this.links.find(link => link.label === 'Connect smartphone');
        if (connectSmartphone) {
            this.quickLinks.push(connectSmartphone);
        }
    }
    createQuickLinkReports() {
        const label = gettext('Reports');
        const reports = {
            icon: 'th',
            label,
            url: '/reports'
        };
        const reportsNode = this.findNavigatorNode(label, this.navNodes);
        if (reportsNode) {
            reports.click = () => {
                reportsNode.open = true;
                this.router.navigateByUrl(reports.url);
            };
            this.quickLinks.push(reports);
        }
    }
    createQuickLinkExports() {
        const label = gettext('Exports');
        const exports = {
            icon: 'c8y-reports',
            label,
            url: '/export'
        };
        if (this.isConfigChildNodeShown(label)) {
            exports.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(exports.url);
            };
            this.quickLinks.push(exports);
        }
    }
    createQuicklinkSmartRules() {
        const label = gettext('Smart rules');
        const smartRules = {
            icon: 'c8y-smart-rules',
            label,
            url: '/rules'
        };
        if (this.isConfigChildNodeShown('Global smart rules')) {
            smartRules.click = () => {
                this.configurationNode.open = true;
                this.router.navigateByUrl(smartRules.url);
            };
            this.quickLinks.push(smartRules);
        }
    }
    createQuicklinkRegisterDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser();
            if (data) {
                const deviceManagement = data.find(app => app.contextPath === 'devicemanagement');
                if (deviceManagement) {
                    const deviceMgmtUrl = this.applicationService.getHref(deviceManagement);
                    const registerDevice = {
                        icon: 'c8y-device-connect',
                        label: gettext('Register device'),
                        click: () => window.open(`${deviceMgmtUrl}/#/deviceregistration`, '_self')
                    };
                    this.quickLinks.push(registerDevice);
                }
            }
        });
    }
    createQuicklinkUserGuide() {
        const userGuide = {
            icon: 'c8y-user',
            label: gettext('User guide'),
            url: '/users-guide/getting-started',
            click: () => {
                const userGuideURL = this.docs.getUserGuideLink(userGuide.url);
                window.open(userGuideURL);
            }
        };
        this.quickLinks.push(userGuide);
    }
    isConfigChildNodeShown(nodeName) {
        if (this.configurationNode && this.configurationNode.show) {
            const navNode = this.findNavigatorNode(nodeName, this.configurationNode.children);
            return !!navNode && navNode.show;
        }
        return false;
    }
    findNavigatorNode(nodeName, navNodes) {
        if (navNodes && navNodes.length > 0) {
            return navNodes.find((node) => node.label === nodeName);
        }
        return undefined;
    }
}
WelcomeToCockpit.ɵfac = function WelcomeToCockpit_Factory(t) { return new (t || WelcomeToCockpit)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DocsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ApplicationService)); };
WelcomeToCockpit.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WelcomeToCockpit, selectors: [["c8y-welcome-to-cockpit"]], inputs: { config: "config" }, decls: 11, vars: 7, consts: [[1, "welcome-widget", "welcome-cockpit"], [1, "flex-row"], [1, "col-xs-12", "col-md-5", "flex-item-v-stretch", "p-24"], [1, "text-light"], [1, "text-16", "text-light", "p-t-16", "p-b-24"], [1, "card-group", "interact-grid", "tight-grid"], ["class", "col-sm-4 col-xs-6", 4, "ngFor", "ngForOf"], [1, "col-sm-4", "col-xs-6"], ["c8yProductExperience", "", 1, "card", 3, "icon", "label", "actionName", "actionData", "click"]], template: function WelcomeToCockpit_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h2", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "p", 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵtemplate(10, WelcomeToCockpit_div_10_Template, 2, 6, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, "Welcome to Cockpit"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 5, ctx.welcomeMessage));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.quickLinks);
    } }, directives: [ɵngcc6.NgForOf, ɵngcc1.QuickLinkComponent, ɵngcc1.ProductExperienceDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
WelcomeToCockpit.ctorParameters = () => [
    { type: TenantService },
    { type: DocsService },
    { type: Router },
    { type: NavigatorService },
    { type: ApplicationService }
];
WelcomeToCockpit.propDecorators = {
    config: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WelcomeToCockpit, [{
        type: Component,
        args: [{
                selector: 'c8y-welcome-to-cockpit',
                template: "<div class=\"welcome-widget welcome-cockpit\">\n  <div class=\"flex-row\">\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\n      <div class=\"card-group interact-grid tight-grid\">\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\n          <c8y-quick-link\n            (click)=\"link.click ? link.click() : false\"\n            [icon]=\"link.icon\"\n            [label]=\"link.label\"\n            class=\"card\"\n            c8yProductExperience\n            [actionName]=\"'welcomeWidgetClicked'\"\n            [actionData]=\"{ link: link.label }\"\n          >\n          </c8y-quick-link>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.TenantService }, { type: ɵngcc1.DocsService }, { type: ɵngcc4.Router }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc3.ApplicationService }]; }, { config: [{
            type: Input
        }] }); })();

class LegacyWelcomeComponent {
    constructor(dashboard) {
        this.dashboard = dashboard;
    }
    restore() {
        this.dashboard.restore();
    }
}
LegacyWelcomeComponent.ɵfac = function LegacyWelcomeComponent_Factory(t) { return new (t || LegacyWelcomeComponent)(ɵngcc0.ɵɵdirectiveInject(ContextDashboardComponent, 1)); };
LegacyWelcomeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LegacyWelcomeComponent, selectors: [["c8y-legacy-welcome-widget"]], decls: 17, vars: 9, consts: [[1, "card-block"], ["c8y-guide-docs", "", 1, "lead"], ["translate", "", 1, "cockpit-welcome-manual", 3, "title"], ["c8y-guide-href", "users-guide/cockpit/"], [1, "m-t-16"], ["translate", "", 1, "btn", "btn-primary", "btn-sm", "m-t-16", 3, "click"]], template: function LegacyWelcomeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "p", 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 2);
        ɵngcc0.ɵɵdisableBindings();
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵtext(7, "Browse the manual ");
        ɵngcc0.ɵɵelementStart(8, "a", 3);
        ɵngcc0.ɵɵtext(9, "here");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(10, ".");
        ɵngcc0.ɵɵenableBindings();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "p", 4);
        ɵngcc0.ɵɵelementStart(12, "em");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "button", 5);
        ɵngcc0.ɵɵlistener("click", function LegacyWelcomeComponent_Template_button_click_15_listener() { ctx.restore(); return false; });
        ɵngcc0.ɵɵtext(16, " Get new dashboard ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(4, 3, "Welcome to Cockpit"), ".");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 5, "Browse the manual"));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(14, 7, "New default dashboard available."), " ");
    } }, directives: [ɵngcc1.GuideDocsComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.GuideHrefDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
LegacyWelcomeComponent.ctorParameters = () => [
    { type: ContextDashboardComponent, decorators: [{ type: Host }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LegacyWelcomeComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-legacy-welcome-widget',
                template: "<div class=\"card-block\">\n  <p class=\"lead\" c8y-guide-docs>\n    <span>{{ 'Welcome to Cockpit' | translate }}.</span>\n    <span title=\"{{ 'Browse the manual' | translate }}\" class=\"cockpit-welcome-manual\" translate ngNonBindable\n      >Browse the manual <a c8y-guide-href=\"users-guide/cockpit/\">here</a>.</span\n    >\n  </p>\n  <p class=\"m-t-16\">\n    <em>{{ 'New default dashboard available.' | translate }} </em>\n  </p>\n  <button class=\"btn btn-primary btn-sm m-t-16\" (click)=\"restore(); (false)\" translate>\n    Get new dashboard\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ContextDashboardComponent, decorators: [{
                type: Host
            }] }]; }, null); })();

// import for the preview img to get into the build.
let previewImage = '';
try {
    // tslint:disable-next-line: no-var-requires
    previewImage = require('@c8y/style/img/welcome-widget-pr.png');
}
catch (ex) {
    // intended empty
}
const ɵ0$3 = [{ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' }], ɵ1$1 = [
    {
        id: 'cockpit.welcome.widget',
        label: gettext('Welcome to Cockpit'),
        description: gettext('Displays a welcome message for Cockpit'),
        component: WelcomeToCockpit,
        previewImage,
        data: {
            settings: {
                noNewWidgets: false,
                widgetDefaults: {
                    _width: 12,
                    _height: 6
                },
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
], ɵ2 = [
    {
        id: 'Cockpit Welcome',
        label: gettext('Welcome to Cockpit'),
        description: gettext('Displays a welcome message for Cockpit'),
        component: LegacyWelcomeComponent,
        data: {
            settings: {
                noNewWidgets: true,
                ng1: {
                    options: {
                        noDeviceTarget: true,
                        groupsSelectable: false
                    }
                }
            }
        }
    }
];
class CockpitDashboardModule {
    static config(config = {}) {
        return {
            ngModule: CockpitDashboardModule,
            providers: [
                {
                    provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
CockpitDashboardModule.ɵfac = function CockpitDashboardModule_Factory(t) { return new (t || CockpitDashboardModule)(); };
CockpitDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CockpitDashboardModule });
CockpitDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_NAVIGATOR_NODES,
            useValue: ɵ0$3,
            multi: true
        },
        {
            provide: HOOK_COMPONENTS,
            multi: true,
            useValue: ɵ1$1
        },
        {
            provide: HOOK_COMPONENTS,
            multi: true,
            useValue: ɵ2
        }
    ], imports: [[
            DocsModule,
            CoreModule,
            ContextDashboardModule.config({
                routes: [
                    {
                        path: 'dashboard/:dashboardId',
                        component: ContextDashboardComponent,
                        canActivate: [DeviceDashboardGuard],
                        context: ViewContext.Device
                    },
                    {
                        path: 'dashboard/:dashboardId',
                        component: ContextDashboardComponent,
                        canActivate: [GroupDashboardGuard],
                        context: ViewContext.Group
                    },
                    {
                        path: '',
                        component: CockpitDashboardComponent
                    }
                ]
            }),
            QuickLinkModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitDashboardModule, [{
        type: NgModule,
        args: [{
                entryComponents: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                imports: [
                    DocsModule,
                    CoreModule,
                    ContextDashboardModule.config({
                        routes: [
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [DeviceDashboardGuard],
                                context: ViewContext.Device
                            },
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [GroupDashboardGuard],
                                context: ViewContext.Group
                            },
                            {
                                path: '',
                                component: CockpitDashboardComponent
                            }
                        ]
                    }),
                    QuickLinkModule
                ],
                declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                providers: [
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useValue: ɵ0$3,
                        multi: true
                    },
                    {
                        provide: HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ1$1
                    },
                    {
                        provide: HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ2
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CockpitDashboardModule, { declarations: function () { return [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent]; }, imports: function () { return [DocsModule,
        CoreModule, ContextDashboardModule, QuickLinkModule]; } }); })();

class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService.create(dashboardCfg, undefined, `report_${reportId}`).then(() => true);
    }
}
ReportDashboardGuard.ɵfac = function ReportDashboardGuard_Factory(t) { return new (t || ReportDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
ReportDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardGuard, factory: ReportDashboardGuard.ɵfac });
ReportDashboardGuard.ctorParameters = () => [
    { type: ContextDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardGuard, [{
        type: Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();

class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    priority: 5
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority,
                        routerLinkExact: false
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
}
ReportDashboardNavigationFactory.ɵfac = function ReportDashboardNavigationFactory_Factory(t) { return new (t || ReportDashboardNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ReportDashboardService)); };
ReportDashboardNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardNavigationFactory, factory: ReportDashboardNavigationFactory.ɵfac });
ReportDashboardNavigationFactory.ctorParameters = () => [
    { type: NavigatorService },
    { type: InventoryService },
    { type: ReportDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc3.InventoryService }, { type: ReportDashboardService }]; }, null); })();

const ɵ0$2 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
class ReportDashboardModule {
}
ReportDashboardModule.ɵfac = function ReportDashboardModule_Factory(t) { return new (t || ReportDashboardModule)(); };
ReportDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReportDashboardModule });
ReportDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ReportDashboardGuard,
        ReportDashboardNavigationFactory,
        ReportDashboardService,
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0$2,
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: ReportDashboardNavigationFactory,
            multi: true
        }
    ], imports: [[
            CoreModule,
            ContextDashboardModule,
            RouterModule.forChild([
                {
                    path: 'reports',
                    component: ReportDashboardListComponent
                }
            ])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    CoreModule,
                    ContextDashboardModule,
                    RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ])
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0$2,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReportDashboardModule, { declarations: function () { return [ReportDashboardListComponent]; }, imports: function () { return [CoreModule, ContextDashboardModule, ɵngcc4.RouterModule]; } }); })();

class DeviceManagementHomeDashboardComponent {
    constructor(widgetService) {
        this.widgetService = widgetService;
        this.widgets = [];
        this.DEFAULT_HOME_WIDGETS = [
            {
                name: 'Asset Alarms',
                title: gettext('Active, critical alarms'),
                _x: 0,
                _y: 0,
                _height: 4,
                _width: 6
            },
            {
                name: 'Map',
                title: gettext('Map'),
                _x: 6,
                _y: 0,
                _height: 8,
                _width: 6
            }
        ];
    }
    ngOnInit() {
        this.DEFAULT_HOME_WIDGETS.map((widget) => __awaiter(this, void 0, void 0, function* () {
            yield this.widgetService
                .mapLegacy(widget)
                .then(transformedWidget => this.widgets.push(transformedWidget));
        }));
    }
}
DeviceManagementHomeDashboardComponent.ɵfac = function DeviceManagementHomeDashboardComponent_Factory(t) { return new (t || DeviceManagementHomeDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(WidgetService)); };
DeviceManagementHomeDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceManagementHomeDashboardComponent, selectors: [["c8y-device-management-home-dashboard"]], decls: 4, vars: 8, consts: [[3, "contextDashboard", "widgets", "settings"]], template: function DeviceManagementHomeDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "c8y-widgets-dashboard", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, "Home"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("contextDashboard", ɵngcc0.ɵɵpureFunction0(6, _c10))("widgets", ctx.widgets)("settings", ɵngcc0.ɵɵpureFunction0(7, _c11));
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.WidgetsDashboardComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
DeviceManagementHomeDashboardComponent.ctorParameters = () => [
    { type: WidgetService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceManagementHomeDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-management-home-dashboard',
                template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [contextDashboard]=\"{}\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isDisabled: false,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            }]
    }], function () { return [{ type: WidgetService }]; }, null); })();

class DeviceInfoDashboardComponent {
    constructor(router, widgetService, translateService) {
        this.router = router;
        this.widgetService = widgetService;
        this.translateService = translateService;
        this.isLoading$ = new BehaviorSubject(true);
        this.DEVICE_INFO_WIDGETS = [
            {
                name: 'Alarm list',
                title: gettext('Active, critical alarms'),
                _x: 4,
                _y: 7,
                _height: 4,
                _width: 4,
                config: {
                    options: {
                        orderMode: 'ACTIVE_FIRST',
                        severity: { CRITICAL: true },
                        status: {
                            ACTIVE: true,
                            ACKNOWLEDGED: false,
                            CLEARED: false
                        },
                        types: []
                    }
                }
            },
            {
                name: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            },
            {
                name: 'Asset Properties',
                title: gettext('Device data'),
                config: {
                    options: {
                        properties: [],
                        allowDisplayAndEditKnownProperties: true,
                        hiddenPropertiesKeyPaths: ['owner']
                    }
                },
                _x: 0,
                _y: 7,
                _height: 8,
                _width: 4
            },
            {
                name: 'Data points graph',
                title: gettext('Device and communication'),
                _x: 4,
                _y: 2,
                _height: 5,
                _width: 8,
                config: {
                    interval: 'hours',
                    aggregation: 'NONE',
                    realtime: true,
                    datapointsInitialDisplayLimit: 3,
                    datapoints: [
                        {
                            fragment: 'c8y_Battery',
                            series: 'level',
                            label: this.translateService.instant('Battery: level'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e07b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'rssi',
                            label: this.translateService.instant('Signal: RSSI'),
                            unit: 'dBm',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#a7d0f1',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Used',
                            label: this.translateService.instant('Memory: used'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f75229',
                            __active: true
                        },
                        {
                            fragment: 'c8y_CPUMeasurement',
                            series: 'Workload',
                            label: this.translateService.instant('CPU: workload'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#b24f3e',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Upload',
                            label: this.translateService.instant('Network: upload'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#88c039',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RCSP',
                            label: this.translateService.instant('Signal: RCSP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSCP',
                            label: this.translateService.instant('Signal: RSCP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRP',
                            label: this.translateService.instant('Signal: RSRP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#43ba3b',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRQ',
                            label: this.translateService.instant('Signal: RSRQ'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#14b0b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ber',
                            label: this.translateService.instant('Signal: BER'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#44ff33',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ECN0',
                            label: this.translateService.instant('Signal: ECN0'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#873efa',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Download',
                            label: this.translateService.instant('Network: download'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f27a45',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Total',
                            label: this.translateService.instant('Memory: total'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#dadd8c',
                            __active: true
                        }
                    ],
                    alarmsEventsConfigs: [
                        {
                            label: 'c8y_LocationUpdate',
                            timelineType: 'EVENT',
                            color: '#6f6cd0',
                            filters: {
                                type: 'c8y_LocationUpdate'
                            },
                            __active: true
                        },
                        {
                            label: 'c8y_UnavailabilityAlarm',
                            timelineType: 'ALARM',
                            color: '#375bf2',
                            filters: {
                                type: 'c8y_UnavailabilityAlarm'
                            },
                            __active: true
                        }
                    ]
                },
                transformConfigWithContext(config, context, c8yDevices) {
                    'ngInject';
                    return c8yDevices
                        .getSupportedSeries(context.id)
                        .then(supportedMeasurementSeries => config.datapoints.filter(configMeasurement => supportedMeasurementSeries.find(supportedSeries => supportedSeries.fragment === configMeasurement.fragment &&
                        supportedSeries.series === configMeasurement.series)))
                        .then(datapoints => (Object.assign(Object.assign({}, config), { datapoints })));
                }
            },
            {
                name: 'deviceStatusWidget',
                title: gettext('Device status'),
                _x: 0,
                _y: 2,
                _height: 5,
                _width: 4
            },
            {
                name: 'deviceGroupAssignmentWidget',
                title: gettext('Group assignment'),
                _x: 8,
                _y: 7,
                _height: 4,
                _width: 4
            },
            {
                componentId: 'assetNotesWidget',
                title: gettext('Message of the day'),
                classes: { 'panel-title-hidden': true },
                _x: 0,
                _y: 0,
                _height: 2,
                _width: 12
            },
            {
                componentId: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 11,
                _height: 4,
                _width: 8
            }
        ];
        this.currentContext$ = this.router.parent.data.pipe(map(({ contextData }) => {
            this.title = contextData.name;
            return contextData;
        }));
        this.widgets$ = from(this.DEVICE_INFO_WIDGETS).pipe(mergeMap(widget => this.widgetService.mapLegacy(widget)), map(widget => (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: this.router.parent.snapshot.data.contextData }) }))), toArray());
        this.widgetsSubscription = combineLatest([this.widgets$, this.currentContext$]).subscribe(() => {
            this.isLoading$.next(false);
        });
    }
    ngOnDestroy() {
        this.widgetsSubscription.unsubscribe();
    }
}
DeviceInfoDashboardComponent.ɵfac = function DeviceInfoDashboardComponent_Factory(t) { return new (t || DeviceInfoDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
DeviceInfoDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceInfoDashboardComponent, selectors: [["c8y-device-info-dashboard-dashboard"]], decls: 6, vars: 12, consts: [[3, "context", "widgets", "settings"]], template: function DeviceInfoDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "c8y-widgets-dashboard", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵpipe(5, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.currentContext$))("widgets", ɵngcc0.ɵɵpipeBind1(4, 6, ctx.widgets$))("settings", ɵngcc0.ɵɵpureFunction1(10, _c12, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.isLoading$)));
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.WidgetsDashboardComponent], pipes: [ɵngcc6.AsyncPipe], encapsulation: 2 });
DeviceInfoDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: WidgetService },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceInfoDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-info-dashboard-dashboard',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [context]=\"currentContext$ | async\"\n  [widgets]=\"widgets$ | async\"\n  [settings]=\"{\n    isLoading: isLoading$ | async,\n    isDisabled: true,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            }]
    }], function () { return [{ type: ɵngcc4.ActivatedRoute }, { type: WidgetService }, { type: ɵngcc2.TranslateService }]; }, null); })();

const ɵ0$1 = {
    path: '',
    component: DeviceManagementHomeDashboardComponent
}, ɵ1 = [{ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' }];
class DeviceManagementHomeDashboardModule {
}
DeviceManagementHomeDashboardModule.ɵfac = function DeviceManagementHomeDashboardModule_Factory(t) { return new (t || DeviceManagementHomeDashboardModule)(); };
DeviceManagementHomeDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceManagementHomeDashboardModule });
DeviceManagementHomeDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ONCE_ROUTE,
            useValue: ɵ0$1,
            multi: true
        },
        {
            provide: HOOK_NAVIGATOR_NODES,
            useValue: ɵ1,
            multi: true
        }
    ], imports: [[CommonModule, CoreModule, ContextDashboardModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceManagementHomeDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [DeviceManagementHomeDashboardComponent],
                imports: [CommonModule, CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceManagementHomeDashboardComponent],
                providers: [
                    {
                        provide: HOOK_ONCE_ROUTE,
                        useValue: ɵ0$1,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceManagementHomeDashboardModule, { declarations: function () { return [DeviceManagementHomeDashboardComponent]; }, imports: function () { return [CommonModule, CoreModule, ContextDashboardModule]; } }); })();

const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'device-info',
        component: DeviceInfoDashboardComponent,
        label: gettext('Info'),
        priority: 10000,
        icon: 'asterisk'
    }
];
class DeviceInfoDashboardModule {
}
DeviceInfoDashboardModule.ɵfac = function DeviceInfoDashboardModule_Factory(t) { return new (t || DeviceInfoDashboardModule)(); };
DeviceInfoDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceInfoDashboardModule });
DeviceInfoDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[CommonModule, CoreModule, ContextDashboardModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceInfoDashboardModule, [{
        type: NgModule,
        args: [{
                declarations: [DeviceInfoDashboardComponent],
                imports: [CommonModule, CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceInfoDashboardComponent],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceInfoDashboardModule, { declarations: function () { return [DeviceInfoDashboardComponent]; }, imports: function () { return [CommonModule, CoreModule, ContextDashboardModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AppearanceSettingsComponent, COCKPIT_HOME_DASHBOARD_CONFIG, CONTEXT_DASHBOARD_CONFIG, CockpitDashboardComponent, CockpitDashboardModule, ContextDashboardComponent, ContextDashboardModule, ContextDashboardService, ContextDashboardType, DASHBOARD_THEME_CLASSES, DEFAULT_COCKPIT_HOME_WIDGETS, DashboardActionsFactory, DashboardDetailComponent, DeviceDashboardGuard, DeviceInfoDashboardComponent, DeviceInfoDashboardModule, DeviceManagementHomeDashboardComponent, DeviceManagementHomeDashboardModule, GroupDashboardGuard, LegacyWelcomeComponent, ReportDashboardGuard, ReportDashboardListComponent, ReportDashboardModule, ReportDashboardNavigationFactory, ReportDashboardService, STYLING_CLASS_PREFIXES, WIDGET_CONTENT_CLASSES, WIDGET_HEADER_CLASSES, WelcomeToCockpit, WidgetConfigComponent, WidgetPreviewComponent, WidgetService, ɵ2 };

//# sourceMappingURL=c8y-ngx-components-context-dashboard.js.map