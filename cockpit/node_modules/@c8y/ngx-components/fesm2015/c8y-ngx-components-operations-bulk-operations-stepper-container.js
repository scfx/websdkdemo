import { Component, ComponentFactoryResolver, ChangeDetectorRef, ViewChild, ViewContainerRef, NgModule } from '@angular/core';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { CoreModule } from '@c8y/ngx-components';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc3 from '@c8y/ngx-components';

const _c0 = ["container"];
class BulkOperationsStepperContainerComponent {
    constructor(activatedRoute, bulkOpsService, resolver, changeDetector) {
        this.activatedRoute = activatedRoute;
        this.bulkOpsService = bulkOpsService;
        this.resolver = resolver;
        this.changeDetector = changeDetector;
    }
    ngOnInit() {
        this.activatedRoute.params.subscribe(params => {
            if (params && params.type) {
                this.bulkOperationType = params.type;
                this.component = this.bulkOpsService
                    .getBulkTypes()
                    .find(element => element.path.includes(this.bulkOperationType)).component;
                this.changeDetector.detectChanges();
                this.createComponent(this.component);
            }
        });
    }
    createComponent(component) {
        if (component) {
            const factory = this.resolver.resolveComponentFactory(component);
            this.container.createComponent(factory);
        }
    }
}
BulkOperationsStepperContainerComponent.ɵfac = function BulkOperationsStepperContainerComponent_Factory(t) { return new (t || BulkOperationsStepperContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BulkOperationsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
BulkOperationsStepperContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BulkOperationsStepperContainerComponent, selectors: [["bulk-operations-stepper-container"]], viewQuery: function BulkOperationsStepperContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, decls: 7, vars: 3, consts: [[1, "card", "card--grid--fullpage"], [1, "d-contents"], ["container", ""]], template: function BulkOperationsStepperContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 0);
        ɵngcc0.ɵɵelementStart(4, "div", 1);
        ɵngcc0.ɵɵelement(5, "template", null, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "New bulk operation"));
    } }, directives: [ɵngcc3.TitleComponent], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
BulkOperationsStepperContainerComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: BulkOperationsService },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
BulkOperationsStepperContainerComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { static: false, read: ViewContainerRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsStepperContainerComponent, [{
        type: Component,
        args: [{
                selector: 'bulk-operations-stepper-container',
                template: "<c8y-title>{{ 'New bulk operation' | translate }}</c8y-title>\n<div class=\"card card--grid--fullpage\">\n  <div class=\"d-contents\">\n    <template #container></template>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ɵngcc2.BulkOperationsService }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }]; }, { container: [{
            type: ViewChild,
            args: ['container', { static: false, read: ViewContainerRef }]
        }] }); })();

const bulkOperatioStepperRoutes = [
    {
        path: 'devicecontrol/bulk/creation/:type',
        component: BulkOperationsStepperContainerComponent
    }
];
/**
 * Container module for the new bulk operation steppers. Use this module in your application
 * to provide a step by step guided process for scheduling of bulk operations.
 * The module reads the bulk operation type from the URL and displays the corresponding stepper.
 * You can provide stepper for your custom bulk operation type by registering it with the
 * HOOK_LIST_BULK_TYPE injection token.
 */
class BulkOperationsStepperContainerModule {
}
BulkOperationsStepperContainerModule.ɵfac = function BulkOperationsStepperContainerModule_Factory(t) { return new (t || BulkOperationsStepperContainerModule)(); };
BulkOperationsStepperContainerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BulkOperationsStepperContainerModule });
BulkOperationsStepperContainerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, RouterModule.forChild(bulkOperatioStepperRoutes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BulkOperationsStepperContainerModule, [{
        type: NgModule,
        args: [{
                declarations: [BulkOperationsStepperContainerComponent],
                imports: [CoreModule, RouterModule.forChild(bulkOperatioStepperRoutes)],
                entryComponents: [BulkOperationsStepperContainerComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BulkOperationsStepperContainerModule, { declarations: function () { return [BulkOperationsStepperContainerComponent]; }, imports: function () { return [CoreModule, ɵngcc1.RouterModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { BulkOperationsStepperContainerComponent, BulkOperationsStepperContainerModule, bulkOperatioStepperRoutes };

//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-stepper-container.js.map