{"version":3,"file":"c8y-ngx-components-auth-configuration.js","sources":["../../auth-configuration/basic-auth-settings.component.ts","../../auth-configuration/factories/tabs.factory.ts","../../auth-configuration/factories/navigation.factory.ts","../../auth-configuration/auth-configuration.guard.ts","../../auth-configuration/auth-configuration.service.ts","../../auth-configuration/auth-configuration.component.ts","../../auth-configuration/tfa-settings.component.ts","../../auth-configuration/session-configuration.component.ts","../../auth-configuration/login-settings.component.ts","../../auth-configuration/auth-configuration.module.ts","../../auth-configuration/c8y-ngx-components-auth-configuration.ts"],"sourcesContent":["import { Component, Input, SimpleChanges } from '@angular/core';\nimport {\n  IAuthenticationRestrictions,\n  TenantLoginOptionsService,\n  TenantLoginOptionType\n} from '@c8y/client';\nimport { defaults, remove, isEmpty, omitBy } from 'lodash-es';\nimport { AuthConfiguration } from './auth-configuration.model';\nimport { TenantUiService } from '@c8y/ngx-components';\nimport { ControlContainer, NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'c8y-basic-auth-settings',\n  templateUrl: './basic-auth-settings.component.html',\n  viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class BasicAuthSettingsComponent {\n  @Input()\n  authConfiguration: AuthConfiguration;\n\n  forbiddenUserAgents;\n\n  trustedUserAgents;\n\n  preferredLoginOptionType: TenantLoginOptionType = TenantLoginOptionType.BASIC;\n\n  tenantLoginOptionTypeEnum = TenantLoginOptionType;\n\n  constructor(private tenantLoginOptionsService: TenantLoginOptionsService,\n              private tenantUiService: TenantUiService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.authConfiguration && changes.authConfiguration.currentValue) {\n      const { loginOptions } = changes.authConfiguration.currentValue;\n      const basic = loginOptions.find(this.tenantUiService.isBasic) || {};\n      basic.authenticationRestrictions = defaults({}, omitBy(basic.authenticationRestrictions, isEmpty), {\n        forbiddenUserAgents: [''],\n        trustedUserAgents: [''],\n        forbiddenClients: []\n      });\n      this.forbiddenUserAgents = basic.authenticationRestrictions.forbiddenUserAgents.map(val => ({ value: val }));\n      this.trustedUserAgents = basic.authenticationRestrictions.trustedUserAgents.map(val => ({ value: val }));\n      this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {\n      this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;\n    }\n  }\n\n  get forbiddenWebBrowsers() {\n    return this.authenticationRestrictions.forbiddenClients.includes('WEB_BROWSERS');\n  }\n\n  set forbiddenWebBrowsers(value: boolean) {\n    this.authenticationRestrictions.forbiddenClients = value ? ['WEB_BROWSERS'] : [];\n  }\n\n  forbiddenUserAgentsChanged({ event, index }) {\n    this.forbiddenUserAgents[index].value = event;\n    this.authenticationRestrictions.forbiddenUserAgents[index] = event;\n  }\n\n  forbiddenUserAgentsRemove(index) {\n    this.authenticationRestrictions.forbiddenUserAgents.splice(index, 1);\n    this.remove(this.forbiddenUserAgents, index);\n  }\n\n  trustedUserAgentsChanged({ event, index }) {\n    this.trustedUserAgents[index].value = event;\n    this.authenticationRestrictions.trustedUserAgents[index] = event;\n  }\n\n  trustedUserAgentsRemove(index) {\n    this.authenticationRestrictions.trustedUserAgents.splice(index, 1);\n    this.remove(this.trustedUserAgents, index);\n  }\n\n  get authenticationRestrictions(): IAuthenticationRestrictions {\n    return this.authConfiguration.loginOptions.find(this.tenantUiService.isBasic)\n      .authenticationRestrictions;\n  }\n\n  add(collection) {\n    collection.push({ value: '' });\n  }\n\n  private remove(collection, index) {\n    collection.splice(index, 1);\n    if (!collection.length) {\n      collection.push({ value: '' });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\n\n@Injectable()\nexport class TabsFactory implements TabFactory {\n  constructor(public router: Router) {}\n  get() {\n    const tabs: Tab[] = [];\n    if (this.router.url.match(/auth-configuration/g)) {\n      tabs.push({\n        path: 'auth-configuration/basic_settings',\n        label: gettext('Basic settings'),\n        icon: 'c8y-icon dlt-c8y-icon-unlock-alt',\n        priority: 1100,\n        orientation: 'horizontal'\n      } as Tab);\n      tabs.push({\n        path: 'auth-configuration/single_sign-on',\n        label: gettext('Single sign-on'),\n        icon: 'c8y-icon dlt-c8y-icon-sign-in',\n        priority: 1050,\n        orientation: 'horizontal'\n      } as Tab);\n    }\n\n    return tabs;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory, Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class NavigationFactory implements NavigatorNodeFactory {\n  navs: NavigatorNode[] = [];\n\n  constructor(private permissions: Permissions) {}\n\n  async get() {\n    const userHasPermission = this.permissions.hasAnyRole( [\n      'ROLE_TENANT_ADMIN',\n      'ROLE_TENANT_MANAGEMENT_ADMIN'\n    ]);\n    if (this.navs.length === 0 && userHasPermission) {\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Authentication'),\n          icon: 'c8y-shield',\n          path: '/auth-configuration',\n          parent: gettext('Settings'),\n          priority: 2000\n        })\n      );\n    }\n    return this.navs;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class AuthConfigurationGuard implements CanActivate {\n  constructor(private permissions: Permissions) {}\n\n  canActivate(): boolean {\n    return this.permissions.hasAnyRole( [\n      'ROLE_TENANT_ADMIN',\n      'ROLE_TENANT_MANAGEMENT_ADMIN'\n    ]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ApplicationService,\n  GrantType, IAuthenticationRestrictions,\n  IResult, ISessionConfiguration,\n  ISystemOption,\n  ITenantLoginOption,\n  ITenantOption,\n  SystemOptionsService,\n  TenantLoginOptionsService,\n  TenantLoginOptionType,\n  TenantOptionsService,\n  UserManagementSource\n} from '@c8y/client';\nimport { catchError, map } from 'rxjs/operators';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { defaults, omit } from 'lodash-es';\nimport { AuthConfiguration, Options } from './auth-configuration.model';\nimport { TenantUiService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class AuthConfigurationService {\n  private systemOptionsWithDefaultValue: ISystemOption[] = [\n    { category: 'password', key: 'limit.validity', value: null },\n    { category: 'password', key: 'enforce.strength', value: 'false' },\n    { category: 'two-factor-authentication', key: 'tenant-scope-settings.enabled', value: 'false' },\n    { category: 'two-factor-authentication', key: 'enabled', value: 'false' },\n    { category: 'two-factor-authentication', key: 'enforced', value: 'false' },\n    { category: 'two-factor-authentication', key: 'enforced.group', value: '' }\n  ];\n\n  private tenantOptionsWithDefaultValue: ITenantOption[] = [\n    { category: 'password', key: 'limit.validity', value: '0' },\n    { category: 'password', key: 'strength.validity', value: 'false' },\n    { category: 'two-factor-authentication', key: 'enabled', value: 'false' },\n    { category: 'two-factor-authentication', key: 'token.validity', value: '43200' }, // 30 days\n    { category: 'two-factor-authentication', key: 'pin.validity', value: '30' },\n    { category: 'two-factor-authentication', key: 'enforced', value: 'false' },\n    { category: 'two-factor-authentication', key: 'strategy', value: 'SMS' },\n    { category: 'oauth.internal', key: 'basic-token.lifespan.seconds', value: null }\n  ];\n\n  constructor(\n    private tenantLoginOptionsService: TenantLoginOptionsService,\n    private tenantOptionsService: TenantOptionsService,\n    private systemOptionsService: SystemOptionsService,\n    private applicationService: ApplicationService,\n    private tenantUiService: TenantUiService\n  ) {}\n\n  getAuthConfiguration$(): Observable<AuthConfiguration> {\n    const loginOptions$ = this.getLoginOptions$();\n    return forkJoin({\n      loginOptions: loginOptions$,\n      tenantOptions: this.getTenantOptions$(),\n      systemOptions: this.getSystemOptions$(),\n      smsGatewayAvailable: this.isSmsApplicationAvailable$(),\n      preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)\n    });\n  }\n\n  save(newAuthConfiguration: AuthConfiguration, previousAuthConfiguration: AuthConfiguration) {\n    const tenantOptions = this.prepareTenantOptions(\n      newAuthConfiguration,\n      previousAuthConfiguration\n    );\n    const updateTenantOptions = tenantOptions.map(\n      tenantOption => this.tenantOptionsService.create(tenantOption)\n    );\n    const basicLoginOption = this.prepareBasicLoginOption(\n      newAuthConfiguration,\n      previousAuthConfiguration\n    );\n    const oauthInternalLoginOption = this.prepareOauthInternalLoginOption(\n      newAuthConfiguration,\n      previousAuthConfiguration\n    );\n\n    return Promise.all([\n      this.saveOrUpdateLoginOption(basicLoginOption),\n      this.saveOrUpdateLoginOption(oauthInternalLoginOption),\n      updateTenantOptions\n    ]);\n  }\n\n  private saveOrUpdateLoginOption(\n    loginOption: ITenantLoginOption\n  ): Promise<IResult<ITenantLoginOption>> {\n    return loginOption.id\n      ? this.tenantLoginOptionsService.update(loginOption)\n      : this.tenantLoginOptionsService.create(loginOption);\n  }\n\n  private prepareBasicLoginOption(\n    newAuthConfiguration: AuthConfiguration,\n    previousAuthConfiguration: AuthConfiguration\n  ): ITenantLoginOption {\n    let basicLoginOption = this.originalLoginOptionWithDefaults(\n      previousAuthConfiguration,\n      TenantLoginOptionType.BASIC\n    );\n    basicLoginOption.authenticationRestrictions =\n      this.authenticationRestriction(newAuthConfiguration);\n    basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(\n      newAuthConfiguration,\n      TenantLoginOptionType.BASIC\n    );\n    basicLoginOption = this.removeReadOnlyFields(basicLoginOption);\n    return basicLoginOption;\n  }\n\n  private prepareOauthInternalLoginOption(\n    newAuthConfiguration: AuthConfiguration,\n    previousAuthConfiguration: AuthConfiguration\n  ): ITenantLoginOption {\n    let oauthInternalLoginOption = this.originalLoginOptionWithDefaults(\n      previousAuthConfiguration,\n      TenantLoginOptionType.OAUTH2_INTERNAL\n    );\n    const sessionConfiguration = this.sessionConfiguration(newAuthConfiguration);\n    sessionConfiguration !== null\n      ? (oauthInternalLoginOption.sessionConfiguration = sessionConfiguration)\n      : delete oauthInternalLoginOption.sessionConfiguration;\n    oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(\n      newAuthConfiguration,\n      TenantLoginOptionType.OAUTH2_INTERNAL\n    );\n    oauthInternalLoginOption = this.removeReadOnlyFields(oauthInternalLoginOption);\n    return oauthInternalLoginOption;\n  }\n\n  private originalLoginOptionWithDefaults(\n    previousAuthConfiguration: AuthConfiguration,\n    loginOptionType: TenantLoginOptionType\n  ): ITenantLoginOption {\n    return defaults(\n      {},\n      previousAuthConfiguration.loginOptions.find(\n        loginOption => loginOption.type === loginOptionType\n      ),\n      this.getDefaultLoginOption(loginOptionType)\n    );\n  }\n\n  private sessionConfiguration(authConfiguration: AuthConfiguration): ISessionConfiguration {\n    return authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)\n      .sessionConfiguration;\n  }\n\n  private authenticationRestriction(authConfiguration: AuthConfiguration): IAuthenticationRestrictions {\n    const authenticationRestrictions = authConfiguration.loginOptions.find(\n      this.tenantUiService.isBasic\n    ).authenticationRestrictions;\n    return {\n      trustedUserAgents: authenticationRestrictions.trustedUserAgents.filter(value => value),\n      forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents.filter(value => value),\n      forbiddenClients: authenticationRestrictions.forbiddenClients.filter(value => value)\n    };\n  }\n\n  private visibleOnLoginPage(\n    authConfiguration: AuthConfiguration,\n    loginOptionType: TenantLoginOptionType\n  ): boolean {\n    return authConfiguration.preferredLoginOptionType === loginOptionType;\n  }\n\n  private removeReadOnlyFields(tenantLoginOption: ITenantLoginOption): ITenantLoginOption {\n    return omit(tenantLoginOption, [\n      'self',\n      'strengthValidity',\n      'tfaStrategy',\n      'greenMinLength',\n      'enforceStrength',\n      'strengthValidity',\n      '_type'\n    ]);\n  }\n\n  private prepareTenantOptions(\n    newAuthConfiguration: AuthConfiguration,\n    previousAuthConfiguration: AuthConfiguration\n  ): ITenantOption[] {\n    const getValue = (authCfg, tenantOption) =>\n      authCfg.tenantOptions[tenantOption.category][tenantOption.key];\n    const hasChanged = tenantOption =>\n      getValue(newAuthConfiguration, tenantOption) !==\n      getValue(previousAuthConfiguration, tenantOption);\n\n    return this.tenantOptionsWithDefaultValue\n      .filter( tenantOption => getValue(newAuthConfiguration, tenantOption) !== null)\n      .filter(tenantOption => hasChanged(tenantOption))\n      .map(tenantOption => ({\n        category: tenantOption.category,\n        key: tenantOption.key,\n        value: getValue(newAuthConfiguration, tenantOption).toString()\n      }));\n  }\n\n  private getLoginOptions$(): Observable<ITenantLoginOption[]> {\n    return from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(\n      map(res => res.data),\n      map(loginOptions => this.addDefaultLoginOptions(loginOptions))\n    );\n  }\n\n  private getPreferredLoginOptionType$(loginOptions$: Observable<ITenantLoginOption[]>): Observable<TenantLoginOptionType> {\n    return loginOptions$.pipe(\n      map(loginOptions => {\n        return this.tenantUiService.getPreferredLoginOption(loginOptions).type;\n      })\n    );\n  }\n\n  private addDefaultLoginOptions(loginOptions: ITenantLoginOption[]) {\n    if (!loginOptions.find(this.tenantUiService.isBasic)) {\n      loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.BASIC));\n    }\n    if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {\n      loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.OAUTH2_INTERNAL));\n    }\n    return loginOptions;\n  }\n\n  private getTenantOptions$(): Observable<Options> {\n    return forkJoin(\n      this.tenantOptionsWithDefaultValue.map((option: ITenantOption) =>\n        from(this.tenantOptionsService.detail(option)).pipe(\n          map(res => res.data),\n          catchError(() => of(option))\n        )\n      )\n    ).pipe(map(options => this.getOptionsObject(options)));\n  }\n\n  private getSystemOptions$(): Observable<Options> {\n    return forkJoin(\n      this.systemOptionsWithDefaultValue.map((option: ISystemOption) =>\n        from(this.systemOptionsService.detail(option)).pipe(\n          map(res => res.data),\n          catchError(() => of(option))\n        )\n      )\n    ).pipe(map(options => this.getOptionsObject(options)));\n  }\n\n  private isSmsApplicationAvailable$(): Observable<boolean> {\n    return from(this.applicationService.isAvailable('sms-gateway')).pipe(map(res => res.data));\n  }\n\n  private getOptionsObject(options: Array<ITenantOption | ISystemOption>) {\n    return options.reduce((optionsObject, option) => {\n      optionsObject[option.category] = optionsObject[option.category] || {};\n      optionsObject[option.category][option.key] = this.getValue(option);\n      return optionsObject;\n    }, {});\n  }\n\n  private getValue(option: ITenantOption | ISystemOption) {\n    try {\n      return JSON.parse(option.value);\n    } catch (e) {\n      return option.value;\n    }\n  }\n\n  private getDefaultLoginOption(tenantLoginOptionType: TenantLoginOptionType): ITenantLoginOption {\n    return {\n      userManagementSource: UserManagementSource.INTERNAL,\n      grantType: GrantType.PASSWORD,\n      providerName: 'Cumulocity',\n      visibleOnLoginPage: false,\n      type: tenantLoginOptionType\n    };\n  }\n}\n","import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { AuthConfigurationService } from './auth-configuration.service';\nimport { AlertService, LoginService, ModalService, Status, gettext } from '@c8y/ngx-components';\nimport { TenantLoginOptionsService } from '@c8y/client';\nimport { concat, cloneDeep } from 'lodash-es';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { AuthConfiguration } from './auth-configuration.model';\n\n@Component({\n  selector: 'c8y-auth-configuration',\n  templateUrl: './auth-configuration.component.html'\n})\nexport class AuthConfigurationComponent implements OnInit {\n  reloading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  reload: EventEmitter<void> = new EventEmitter();\n  authConfiguration: AuthConfiguration;\n\n  private authConfiguration$: Observable<AuthConfiguration> = this.reload.pipe(\n    tap(() => this.reloading$.next(true)),\n    switchMap(() => this.authConfigurationService.getAuthConfiguration$()),\n    tap(() => this.reloading$.next(false)),\n    shareReplay(1)\n  );\n  private previousAuthConfiguration: AuthConfiguration;\n  private authConfigurationSubscription: Subscription;\n\n  constructor(\n    private authConfigurationService: AuthConfigurationService,\n    private tenantLoginOptionsService: TenantLoginOptionsService,\n    private modalService: ModalService,\n    private loginService: LoginService,\n    private alertService: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.authConfigurationSubscription = this.authConfiguration$.subscribe(\n      (authConfiguration: AuthConfiguration) => {\n        this.authConfiguration = authConfiguration;\n        this.previousAuthConfiguration = cloneDeep(this.authConfiguration);\n      }\n    );\n    this.loadAuthConfig();\n  }\n\n  loadAuthConfig() {\n    this.reload.next();\n  }\n\n  ngOnDestroy(): void {\n    this.authConfigurationSubscription.unsubscribe();\n  }\n\n  async save() {\n    try {\n      await this.modalService.confirmLogout();\n      await this.authConfigurationService.save(this.authConfiguration, this.previousAuthConfiguration);\n      await this.loginService.logout(true);\n    } catch (ex ) {\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n}\n","// tslint:disable:no-string-literal\nimport { Component, Input, SimpleChanges } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { isEmpty, mapValues } from 'lodash-es';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { TfaStrategy, TenantLoginOptionType } from '@c8y/client';\nimport { AuthConfiguration } from './auth-configuration.model';\n\nenum TfaStateEnum {\n  TFA_UNDEFINED_BY_SYSTEM,\n  TFA_ENFORCED_FOR_GROUP,\n  TFA_ENABLED_BY_SYSTEM,\n  TFA_ENFORCED_BY_SYSTEM\n}\n\n@Component({\n  selector: 'c8y-auth-tfa',\n  templateUrl: './tfa-settings.component.html',\n  viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class TfaSettingsComponent {\n  @Input()\n  authConfiguration: AuthConfiguration;\n\n  preferredLoginOptionType: TenantLoginOptionType = TenantLoginOptionType.BASIC;\n\n  smsGatewayAvailable: boolean;\n\n  tfaStateEnum = TfaStateEnum;\n  tfaStrategyEnum = TfaStrategy;\n  tenantLoginOptionTypeEnum = TenantLoginOptionType;\n\n  TOTP_REQUIRES_OAUTH_POPOVER = gettext('TOTP requires OAI-Secure login mode.');\n  SMS_APP_NOT_SUBSCRIBED_POPOVER = gettext('SMS strategy requires messaging application to be subscribed.');\n\n  TFA_IS_ENFORCED_BY_SYSTEM_POPOVER = gettext('The setting is enforced on the platform level.');\n  TFA_IS_ENABLED_BY_SYSTEM_POPOVER = gettext('The setting is enabled on the platform level.');\n  TOKEN_VALIDITY_DETERMINED_BY_JWT_POPOVER = gettext(\n    \"In OAI-Secure login mode, the token's validity limit is determined by the JWT token and cannot be edited here.\"\n  );\n  TFA_IS_ENABLED_BY_ENFORCE_FOR_GROUP_POPOVER = gettext(\n    'The setting is enabled on the platform level because it is enforced for particular roles.'\n  );\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.authConfiguration && changes.authConfiguration.currentValue) {\n      this.smsGatewayAvailable = changes.authConfiguration.currentValue.smsGatewayAvailable;\n      this.preferredLoginOptionType = changes.authConfiguration.currentValue.preferredLoginOptionType;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.preferredLoginOptionType !== this.authConfiguration.preferredLoginOptionType) {\n      this.preferredLoginOptionType = this.authConfiguration.preferredLoginOptionType;\n      this.tenantTfaStrategy = this.tfaBySmsCanBeSet ? TfaStrategy.SMS : TfaStrategy.TOTP;\n    }\n  }\n\n  get tenantTfaTokenValidity() {\n    return this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'];\n  }\n\n  set tenantTfaTokenValidity(value) {\n    this.authConfiguration.tenantOptions['two-factor-authentication']['token.validity'] = value;\n  }\n\n  get tenantTfaPinValidity() {\n    return this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'];\n  }\n\n  set tenantTfaPinValidity(value) {\n    this.authConfiguration.tenantOptions['two-factor-authentication']['pin.validity'] = value;\n  }\n\n  get tenantTfaEnabled() {\n    return this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'];\n  }\n\n  set tenantTfaEnabled(value) {\n    this.authConfiguration.tenantOptions['two-factor-authentication']['enabled'] = value;\n  }\n\n  get tenantTfaEnforced() {\n    return this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'];\n  }\n\n  set tenantTfaEnforced(value) {\n    this.authConfiguration.tenantOptions['two-factor-authentication']['enforced'] = value;\n  }\n\n  get tenantTfaStrategy() {\n    return this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'];\n  }\n\n  set tenantTfaStrategy(value) {\n    this.authConfiguration.tenantOptions['two-factor-authentication']['strategy'] = value;\n  }\n\n  get systemTfaEnforcedGroup() {\n    return this.authConfiguration.systemOptions['two-factor-authentication'][\n      'enforced.group'\n    ];\n  }\n\n  get systemTfaTenantScopeSettingEnabled() {\n    return this.authConfiguration.systemOptions['two-factor-authentication']['tenant-scope-settings.enabled'];\n  }\n\n  get systemTfaEnabled() {\n    return this.authConfiguration.systemOptions['two-factor-authentication']['enabled'];\n  }\n\n  get systemTfaEnforced() {\n    return this.authConfiguration.systemOptions['two-factor-authentication']['enforced'];\n  }\n\n  get tfaState() {\n    if (this.systemTfaEnforced) {\n      return this.tfaStateEnum.TFA_ENFORCED_BY_SYSTEM;\n    }\n    if (!isEmpty(this.systemTfaEnforcedGroup)) {\n      return this.tfaStateEnum.TFA_ENFORCED_FOR_GROUP;\n    }\n    if (this.systemTfaEnabled) {\n      return this.tfaStateEnum.TFA_ENABLED_BY_SYSTEM;\n    }\n    return this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM;\n  }\n\n  get tfaBySmsCanBeSet() {\n    return (this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) && this.smsGatewayAvailable;\n  }\n\n  get tfaByTotpCanBeSet() {\n    return (\n      (this.tfaState !== this.tfaStateEnum.TFA_UNDEFINED_BY_SYSTEM || this.tenantTfaEnabled) &&\n      this.preferredLoginOptionType === TenantLoginOptionType.OAUTH2_INTERNAL\n    );\n  }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { ISessionConfiguration } from '@c8y/client';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { defaults, cloneDeep, isFinite } from 'lodash-es';\nimport { gettext, TenantUiService } from '@c8y/ngx-components';\nimport { AuthConfiguration } from './auth-configuration.model';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-session-configuration',\n  templateUrl: './session-configuration.component.html',\n  viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class SessionConfigurationComponent {\n  @Input()\n  authConfiguration: AuthConfiguration;\n\n  ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = gettext('The value must be greater than \"Token lifespan\" and not less than {{ minAbsoluteTimeout }}.');\n  RENEWAL_TIMEOUT_VALIDATION_MESSAGE = gettext('The value must be less than \"Token lifespan\".');\n  MAX_TOKEN_LIFESPAN_VALIDATION_MESSAGE = gettext(\n    'The value must be less than \"Session absolute timeout\".'\n  );\n  MIN_TOKEN_LIFESPAN_VALIDATION_MESSAGE = gettext(\n    'The value must be greater than \"Session renewal timeout\".'\n  );\n\n  USER_AGENT_VALIDATION_REQUIRED_POPOVER = gettext('If selected, then every request needs to use the same \"User-Agent\" header as the first request which initiated the session.');\n\n  private MIN_ABSOLUTE_TIMEOUT: number = 15 * 60;\n  private originalSessionConfiguration;\n  private previousTokenLifespan;\n\n  constructor(private tenantUiService: TenantUiService,\n              private translateService: TranslateService) {\n    this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE = this.translateService.instant(\n      this.ABSOLUTE_TIMEOUT_VALIDATION_MESSAGE, { minAbsoluteTimeout: this.MIN_ABSOLUTE_TIMEOUT } );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.authConfiguration && changes.authConfiguration.currentValue) {\n      const oauthInternal =\n        changes.authConfiguration.currentValue.loginOptions.find(\n          this.tenantUiService.isOauthInternal\n        ) || {};\n      this.originalSessionConfiguration = cloneDeep(oauthInternal.sessionConfiguration);\n      this.sessionConfiguration = oauthInternal.sessionConfiguration;\n      this.previousTokenLifespan = this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];\n    }\n  }\n\n  get renewalTimeoutSeconds(): number {\n    const sessionConfiguration = this.sessionConfiguration;\n    return this.convertToSeconds(sessionConfiguration.renewalTimeoutMillis);\n  }\n\n  set renewalTimeoutSeconds(value: number) {\n    this.sessionConfiguration.renewalTimeoutMillis = this.convertToMillis(value);\n  }\n\n  get absoluteTimeoutSeconds(): number {\n    const sessionConfiguration = this.sessionConfiguration;\n    return this.convertToSeconds(sessionConfiguration.absoluteTimeoutMillis);\n  }\n\n  set absoluteTimeoutSeconds(value: number) {\n    this.sessionConfiguration.absoluteTimeoutMillis = this.convertToMillis(value);\n  }\n\n  get maximumNumberOfParallelSessions(): number {\n    return this.sessionConfiguration.maximumNumberOfParallelSessions;\n  }\n\n  set maximumNumberOfParallelSessions(value: number) {\n    this.sessionConfiguration.maximumNumberOfParallelSessions = value;\n  }\n\n  get userAgentValidationRequired(): boolean {\n    return this.sessionConfiguration.userAgentValidationRequired;\n  }\n\n  set userAgentValidationRequired(value: boolean) {\n    this.sessionConfiguration.userAgentValidationRequired = value;\n  }\n\n  get basicTokenLifespan() {\n    return this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'];\n  }\n\n  set basicTokenLifespan(value) {\n    this.authConfiguration.tenantOptions['oauth.internal']['basic-token.lifespan.seconds'] = value;\n  }\n\n  get useSessionConfiguration() {\n    return !!this.sessionConfiguration;\n  }\n\n  set useSessionConfiguration(value) {\n    this.sessionConfiguration = value ? defaults({}, this.originalSessionConfiguration, {\n      absoluteTimeoutMillis: 1209600000, // 14 days\n      renewalTimeoutMillis: 86400000, // 1 day\n      maximumNumberOfParallelSessions: 5,\n      userAgentValidationRequired: false\n    }) : null;\n    this.basicTokenLifespan = this.previousTokenLifespan || 172800; // 2 days\n  }\n\n  get absoluteTimeoutConstraints() {\n    return {\n      min: Math.max(this.MIN_ABSOLUTE_TIMEOUT, this.basicTokenLifespan + 1)\n    };\n  }\n\n  get renewalTimeoutConstraints() {\n    return {\n      min: this.MIN_ABSOLUTE_TIMEOUT / 2,\n      max: this.basicTokenLifespan ? this.basicTokenLifespan - 1 : null\n    };\n  }\n\n  get basicTokenLifespanConstraints() {\n    return {\n      min: this.renewalTimeoutSeconds ? this.renewalTimeoutSeconds + 1 : null,\n      max: this.absoluteTimeoutSeconds ? this.absoluteTimeoutSeconds - 1 : null\n    };\n  }\n\n  get sessionConfiguration(): ISessionConfiguration {\n    return this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)\n      .sessionConfiguration;\n  }\n\n  set sessionConfiguration(value: ISessionConfiguration) {\n    this.authConfiguration.loginOptions.find(this.tenantUiService.isOauthInternal)\n      .sessionConfiguration = value;\n  }\n\n  private convertToMillis(seconds: number): number {\n    return isFinite(seconds) ? seconds * 1000 : null;\n  }\n\n  private convertToSeconds(milliseconds: number): number {\n    return isFinite(milliseconds) ? Math.ceil(milliseconds / 1000) : null;\n  }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { mapValues } from 'lodash-es';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { AuthConfiguration } from './auth-configuration.model';\nimport { TenantUiService } from '@c8y/ngx-components';\nimport { TenantLoginOptionType } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-login-settings',\n  templateUrl: './login-settings.component.html',\n  viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class LoginSettingsComponent {\n  PREFERRED_LOGIN_MODE_POPOVER = gettext(\n    'Main difference is the storage of the authentication information. With Basic Auth, it is saved in a session storage and with OAI-Secure in a HttpOnly cookie. OAI-Secure grant is recommended as the authentication information is not accessible via JavaScript. Single sign-on redirect allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.'\n  );\n  ENFORCED_BY_PLATFORM_POPOVER = gettext('The setting is enforced on the platform level.');\n\n  @Input()\n  authConfiguration: AuthConfiguration;\n\n  isOauth2: boolean;\n  tenantLoginOptionTypeEnum = TenantLoginOptionType;\n\n  private PASSWORD_CATEGORY = 'password';\n  private LIMIT_VALIDITY_KEY = 'limit.validity';\n  private TENANT_STRENGTH_VALIDITY_KEY = 'strength.validity';\n  private SYSTEM_STRENGTH_VALIDITY_KEY = 'enforce.strength';\n\n  constructor(private tenantUiService: TenantUiService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.authConfiguration && changes.authConfiguration.currentValue) {\n      this.isOauth2 = !!changes.authConfiguration.currentValue.loginOptions.find(this.tenantUiService.isOauth2);\n    }\n  }\n\n  get systemPasswordLimitValidity() {\n    return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];\n  }\n\n  get passwordLimitValidity() {\n    return this.systemPasswordLimitValidity !== null ?\n      this.systemPasswordLimitValidity : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY];\n  }\n\n  set passwordLimitValidity(value) {\n    if ( this.systemPasswordLimitValidity === null ) {\n      this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.LIMIT_VALIDITY_KEY] = value;\n    }\n  }\n\n  get systemPasswordEnforceStrength() {\n    return this.authConfiguration.systemOptions[this.PASSWORD_CATEGORY][this.SYSTEM_STRENGTH_VALIDITY_KEY];\n  }\n\n  get passwordEnforceStrength() {\n    return this.systemPasswordEnforceStrength ?\n      this.systemPasswordEnforceStrength : this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY];\n  }\n\n  set passwordEnforceStrength(value) {\n    if ( !this.systemPasswordEnforceStrength ) {\n      this.authConfiguration.tenantOptions[this.PASSWORD_CATEGORY][this.TENANT_STRENGTH_VALIDITY_KEY] = value;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  HOOK_NAVIGATOR_NODES,\n  HOOK_ROUTE,\n  HOOK_TABS,\n  Route\n} from '@c8y/ngx-components';\nimport { BasicAuthSettingsComponent } from './basic-auth-settings.component';\nimport { TabsFactory } from './factories/tabs.factory';\nimport { NavigationFactory } from './factories/navigation.factory';\nimport { AuthConfigurationGuard } from './auth-configuration.guard';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { AuthConfigurationService } from './auth-configuration.service';\nimport { AuthConfigurationComponent } from './auth-configuration.component';\nimport { TfaSettingsComponent } from './tfa-settings.component';\nimport { SessionConfigurationComponent } from './session-configuration.component';\nimport { LoginSettingsComponent } from './login-settings.component';\n\n@NgModule({\n  declarations: [\n    SessionConfigurationComponent,\n    LoginSettingsComponent,\n    BasicAuthSettingsComponent,\n    AuthConfigurationComponent,\n    TfaSettingsComponent\n  ],\n  exports: [],\n  imports: [CoreModule, PopoverModule],\n  providers: [\n    AuthConfigurationService,\n    AuthConfigurationGuard,\n    { provide: HOOK_TABS, useClass: TabsFactory, multi: true },\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: NavigationFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_ROUTE,\n      useValue: [\n        {\n          path: 'auth-configuration',\n          redirectTo: 'auth-configuration/basic_settings',\n          pathMatch: 'full'\n        },\n        {\n          path: 'auth-configuration/basic_settings',\n          component: AuthConfigurationComponent,\n          canActivate: [AuthConfigurationGuard]\n        }\n      ] as Route[],\n      multi: true\n    }\n  ]\n})\nexport class AuthConfigurationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AuthConfigurationComponent as ɵd} from './auth-configuration.component';\nexport {AuthConfigurationGuard as ɵg} from './auth-configuration.guard';\nexport {AuthConfigurationService as ɵe} from './auth-configuration.service';\nexport {BasicAuthSettingsComponent as ɵc} from './basic-auth-settings.component';\nexport {NavigationFactory as ɵh} from './factories/navigation.factory';\nexport {LoginSettingsComponent as ɵb} from './login-settings.component';\nexport {SessionConfigurationComponent as ɵa} from './session-configuration.component';\nexport {TfaSettingsComponent as ɵf} from './tfa-settings.component';"],"names":[],"mappings":"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"}