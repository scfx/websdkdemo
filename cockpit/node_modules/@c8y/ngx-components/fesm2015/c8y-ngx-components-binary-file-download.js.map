{"version":3,"file":"c8y-ngx-components-binary-file-download.js","sources":["../../binary-file-download/binary-file-download.service.ts","../../binary-file-download/binary-file-download.module.ts","../../binary-file-download/c8y-ngx-components-binary-file-download.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { IManagedObject, InventoryBinaryService, InventoryService } from '@c8y/client';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { saveAs } from 'file-saver';\nimport { isUndefined } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable()\nexport class BinaryFileDownloadService {\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private inventoryService: InventoryService,\n    private alertService: AlertService,\n    private modalService: ModalService,\n    private translate: TranslateService,\n    private inventoryBinary: InventoryBinaryService\n  ) {}\n\n  run() {\n    this.router.events\n      .pipe(\n        filter(event => {\n          return event instanceof NavigationEnd && this.route.snapshot.queryParams.download;\n        }),\n        map(() => this.route.snapshot.queryParams.download)\n      )\n      .subscribe(async downloadId => {\n        try {\n          const { data } = await this.inventoryService.detail(downloadId);\n          if (!isUndefined(data.c8y_IsBinary)) {\n            this.showDownloadModal(data);\n          } else {\n            const alertMessage = this.translate.instant(\n              gettext(\n                'Could not download the file: object with ID \"{{ id }}\" is not a valid binary.'\n              ),\n              { id: data.id }\n            );\n            this.alertService.danger(alertMessage);\n          }\n        } catch (ex) {\n          this.alertService.addServerFailure(ex);\n        }\n      });\n  }\n\n  async showDownloadModal(binaryMo: IManagedObject) {\n    try {\n      const modalBody = this.translate.instant(\n        gettext('You are about to download file \"{{ fileName }}\". Do you want to proceed?'),\n        { fileName: binaryMo.name }\n      );\n      await this.modalService.confirm(gettext('File download'), modalBody, Status.INFO, {\n        ok: gettext('Download')\n      });\n      const arrayBuffer = await this.getArrayBuffer(binaryMo.id);\n      const fileBinary = new File([arrayBuffer], binaryMo.name, { type: binaryMo.contentType });\n      saveAs(fileBinary);\n    } catch (e) {\n      // empty body :(\n      console.log({ e });\n    }\n  }\n\n  private async getArrayBuffer(binaryId): Promise<ArrayBuffer> {\n    let arrayBuffer: ArrayBuffer;\n    try {\n      const res = await this.inventoryBinary.download(binaryId);\n      arrayBuffer = await res.arrayBuffer();\n    } catch (ex) {\n      const msg = gettext('Could not get the binary.');\n      this.alertService.danger(msg);\n    }\n\n    return arrayBuffer;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@c8y/ngx-components';\nimport { BinaryFileDownloadService } from './binary-file-download.service';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [BinaryFileDownloadService]\n})\nexport class BinaryFileDownloadModule {\n  constructor(binaryFileDownloadService: BinaryFileDownloadService) {\n    binaryFileDownloadService.run();\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}