{"version":3,"file":"c8y-ngx-components-operations-bulk-operations-list.js","sources":["../../operations/bulk-operations-list/bulk-operation-wrapper.component.ts","../../operations/bulk-operations-list/bulk-operation-details.service.ts","../../operations/bulk-operations-list/modals/bulk-operations-modal.component.ts","../../operations/bulk-operations-list/modals/bulk-operation-modals.service.ts","../../operations/bulk-operations-list/modals/bulk-operations-reschedule-modal.component.ts","../../operations/bulk-operations-list/bulk-operation-list-item.model.ts","../../operations/bulk-operations-list/bulk-operation-list-item.component.ts","../../operations/bulk-operations-list/bulk-operations-list.component.ts","../../operations/bulk-operations-list/bulk-operation-details-tabs.component.ts","../../operations/bulk-operations-list/bulk-operation-details.component.ts","../../operations/bulk-operations-list/single-operation-item.model.ts","../../operations/bulk-operations-list/single-operations-list.component.ts","../../operations/bulk-operations-list/single-operation-item.component.ts","../../operations/bulk-operations-list/type-list/bulk-operation-type-list.component.ts","../../operations/bulk-operations-list/bulk-operations-list.module.ts","../../operations/bulk-operations-list/c8y-ngx-components-operations-bulk-operations-list.ts"],"names":[],"mappingsa,6BAA6B;AAC1C,IAEE,YACS,qBAA4C,EAC5C,QAAoB,EACnB,YAA4B;AACrC,QAHQ,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,aAAQ,GAAR,QAAQ,CAAY;AAAC,QACpB,iBAAY,GAAZ,YAAY,CAAgB;AACxC,KAAM;AACN;AAEC;AACE;AACE,IAAG,WAAW,CAAC,eAAgC;AACpD;AAA8D,YAA1D,MAAM,aAAa,GAAmB,CAAC,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAC1F,eAAe,CAChB,EAAE,IAAI,CAAC;AACZ,YAAI,MAAM,YAAY,GAAG,EAAE,aAAa,EAAE,CAAC;AAC3C,YAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,6BAA6B,EAAE;AAC1D,gBAAM,YAAY;AAClB,gBAAM,KAAK,EAAE,UAAU;AACvB,aAAK,CAAC,CAAC;AACP,SAAG;AAEH,KAFG;AACH;yDA1BC,SAAS,SAAC,kBACT,QAAQ,EAAE,6BAA6B,kBACvC;seAAsD,cACvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6JACI;AAAC;AACU,YAPP,qBAAqB;AAAI,YADzB,UAAU;AAAI,YAAF,cAAc;AAAG;AAAG;AACjB,4BAOrB,KAAK;AAAI;;;;;;;;;oBAAE;AAAC;AAAC,MCHH,2BAA2B;AACxC,IAAE,YACU,qBAA4C,EAC5C,YAA4B;AACrC,QAFS,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,iBAAY,GAAZ,YAAY,CAAgB;AACxC,KAAM;AACN,IACQ,WAAW,CAAC,eAAgC;AACpD;AAA8D,YAA1D,MAAM,aAAa,GAAmB,CAAC,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAC1F,eAAe,CAChB,EAAE,IAAI,CAAC;AACZ,YAAI,MAAM,YAAY,GAAG,EAAE,aAAa,EAAE,CAAC;AAC3C,YAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,6BAA6B,EAAE;AAC1D,gBAAM,YAAY;AAClB,gBAAM,KAAK,EAAE,UAAU;AACvB,aAAK,CAAC,CAAC;AACP,SAAG;AAEH,KAFG;AACH;uDAjBC,UAAU;+JACT;AAAC;AACU,YANJ,qBAAqB;AAAI,YACzB,cAAc;AAAG;;;uHAAE;AAAC;AAAC,MCKjB,4BAA4B;AACzC,IAEE,YAAoB,UAAsB,EAAU,QAAkC;AAAI,QAAtE,eAAU,GAAV,UAAU,CAAY;AAAC,QAAS,aAAQ,GAAR,QAAQ,CAA0B;AAAC,QADvF,kBAAa,GAAY,KAAK,CAAC;AACjC,KAA4F;AAC5F,IACE,MAAM;AACR,QAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC3B,KAAG;AACH,IACE,eAAe,CAAC,IAAmB;AACrC,QAAI,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AAChC,YAAM,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAChC,YAAM,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC5E,YAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAC9C,SAAK;AACL,KAAG;AACH;wDApBC,SAAS,SAAC,kBACT,QAAQ,EAAE,2BAA2B,kBACrC;;;;;;;;UAAmD,cACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iPACI;AAAC;AACU,YARP,UAAU;AAAI,YAD0B,wBAAwB;AAAG;AAAG;AAClD,wBAQ1B,SAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,gBAAgB,EAAE;AAAM;;;;;;;;;;oBAAE;AAAC;AAAC,MCJhE,0BAA0B;AACvC,IAEE,YAAoB,cAA8B;AAAI,QAAlC,mBAAc,GAAd,cAAc,CAAgB;AAAC,KAAG;AACxD,IACE,yBAAyB;AAC3B,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,4BAA4B,EAAE;AAC7E,YAAM,QAAQ,EAAE,QAAQ;AACxB,YAAM,KAAK,EAAE,UAAU;AACvB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,yBAAyB;AAC3B,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC7B,SAAK;AACL,KAAG;AACH;sDAlBC,UAAU;4JACT;AAAC;AACU,YALQ,cAAc;AAAG;;;+EAAE;AAAC;AAAC,MCW7B,sCAAsC;AAAG,IAOpD,YACS,UAAsB,EACrB,qBAA4C,EAC5C,KAAmB;AAC5B,QAHQ,eAAU,GAAV,UAAU,CAAY;AAAC,QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,UAAK,GAAL,KAAK,CAAc;AAC/B,QAVE,iBAAY,GAA4B,IAAI,OAAO,EAAE,CAAC;AACxD,KASM;AACN,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACtC,KAAG;AACH,IACE,oBAAoB,CAAC,MAAM;AAC7B,QAAI,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;AAC/B,KAAG;AACH,IACE,QAAQ;AACV,QAAI,OAAO,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACzF,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC3B,KAAG;AACH,IACQ,MAAM;AACd;AACoC,YADhC,IAAI,gBAAgB,CAAC;AACzB,YAAI,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;AACjF,YAAI,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;AACvE,YACI,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC/B,gBAAM,IAAI;AACV,oBAAQ,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpG,oBAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC,CAAC;AAC7E,iBAAO;AAAC,gBAAA,OAAO,EAAE,EAAE;AACnB,oBAAQ,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACxC,iBAAO;AACP,aAAK;AAAC,iBAAK;AACX,gBAAM,IAAI;AACV,oBAAQ,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACpG,oBAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC;AACjE,iBAAO;AAAC,gBAAA,OAAO,EAAE,EAAE;AACnB,oBAAQ,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACxC,iBAAO;AACP,aAAK;AACL;AAEO,YAAH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClD,YAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC3B,SAAG;AAEH,KAFG;AACH;kEA1DC,SAAS,SAAC,kBACT,QAAQ,EAAE,sCAAsC,kBAChD;;;;;;;;;IAA8D,cAC/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yNACI;AAAC;AAAgE,YAT7D,UAAU;AAAI,YAGd,qBAAqB;AAAI,YAJzB,YAAY;AAAG;;;;;;;kJAAE;AAAC;ACEpB,MAAM,4BAA4B,GAAG;AAC5C,IAAE,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;AACjC,IAAE,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;AACjC,IAAE,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC;AAC/B,IAAE,MAAM,EAAE,OAAO,CAAC,yBAAyB,CAAC;AAC5C,IAAE,UAAU,EAAE,OAAO,CAAC,wBAAwB,CAAC;AAC/C,IAAE,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;AAC7B,CAAC,CAAC;AAEK,MAAM,6BAA6B,GAAoB;AAC9D,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,SAAS;AACjD,QAAI,aAAa,EAAE,CAAC,0BAA0B,CAAC,SAAS,CAAC;AACzD,QAAI,SAAS,EAAE,iCAAiC;AAChD,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,SAAS;AACjD,QAAI,aAAa,EAAE;AACnB,YAAM,0BAA0B,CAAC,SAAS;AAC1C,YAAM,0BAA0B,CAAC,oBAAoB;AACrD,SAAK;AACL,QAAI,SAAS,EAAE,mCAAmC;AAClD,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,OAAO;AAC/C,QAAI,aAAa,EAAE,CAAC,0BAA0B,CAAC,OAAO,CAAC;AACvD,QAAI,SAAS,EAAE,yCAAyC;AACxD,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,QAAQ;AAChD,QAAI,aAAa,EAAE,CAAC,0BAA0B,CAAC,QAAQ,CAAC;AACxD,QAAI,SAAS,EAAE,6BAA6B;AAC5C,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,MAAM;AAC9C,QAAI,aAAa,EAAE,CAAC,0BAA0B,CAAC,MAAM,CAAC;AACtD,QAAI,SAAS,EAAE,+CAA+C;AAC9D,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,4BAA4B,CAAC,UAAU;AAClD,QAAI,aAAa,EAAE,CAAC,0BAA0B,CAAC,UAAU,CAAC;AAC1D,QAAI,SAAS,EAAE,wCAAwC;AACvD,KAAG;AACH,CAAC,CAAC;AAEK,MAAM,mCAAmC,GAAG,sCAAsC;AACzF;AAAC,MCrBY,8BAA8B;AAAG,IAuB5C,YACU,qBAA4C,EAC5C,KAAmB,EACnB,KAAmB,EACnB,cAA8B;AACvC,QAJS,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,UAAK,GAAL,KAAK,CAAc;AAAC,QACpB,UAAK,GAAL,KAAK,CAAc;AAAC,QACpB,mBAAc,GAAd,cAAc,CAAgB;AAC1C,QAxBE,qBAAgB,GAAY,IAAI,CAAC;AACnC,QACE,aAAQ,GAAY,KAAK,CAAC;AAC5B,QAAY,wBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;AACrD,QAAY,WAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;AAC3D,QAGE,mBAAc,GAAG,KAAK,CAAC;AACzB,QAAE,+BAA0B,GAAG,0BAA0B,CAAC;AAC1D,QAAE,+BAA0B,GAAoB,6BAA6B,CAAC;AAC9E,QACE,0BAAqB,GAAW,OAAO,CACrC,mEAAmE,CACpE,CAAC;AACJ,QAAE,qBAAgB,GAAW,UAAU,CAAC;AACxC,QACE,sBAAiB,GAAW,CAAC,CAAC;AAChC,KAMM;AACN,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACzC,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACnD,QAAI,IAAI,CAAC,cAAc,EAAE,CAAC;AAC1B,KAAG;AACH,IACE,WAAW,CAAC,OAAsB;AAAI,QACpC,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE;AACrE,YAAM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AAC3C,YAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5B,SAAK;AACL,KAAG;AACH,IACE,YAAY;AACd,QAAI,MAAM,aAAa,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,YAAY,IACrE,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CACtE,CAAC;AACN,QAAI,OAAO,aAAa,GAAG,aAAa,CAAC,SAAS,GAAG,mCAAmC,CAAC;AACzF,KAAG;AACH,IACE,qBAAqB;AAAK,QACxB,MAAM,WAAW,GAAW,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AACjF,QAAI,MAAM,cAAc,GAAW,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC;AAC1E,QACI,OAAO,WAAW,GAAG,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC;AAC1E,KAAG;AACH,IACE,qBAAqB;AACvB,QAAI,QACE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM;AACnF,YAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG;AACvC,YAAM,GAAG,EACH;AACN,KAAG;AACH,IACE,cAAc;AAChB,QAAI,MAAM,oBAAoB,GAAG,mDAAmD,CAAC;AACrF,QACI,MAAM,gBAAgB,GAAG;AAC7B,YAAM,SAAS,EAAE;AACjB,gBAAQ,gBAAgB,EAAE,kCAAkC;AAC5D,gBAAQ,gBAAgB,EAAE,GAAG,oBAAoB,UAAU;AAC3D,gBAAQ,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,EAAE;AACvD,aAAO;AACP,YAAM,oBAAoB,EAAE;AAC5B,gBAAQ,gBAAgB,EAAE,kCAAkC;AAC5D,gBAAQ,gBAAgB,EAAE,GAAG,oBAAoB,SAAS;AAC1D,gBAAQ,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,EAAE;AACvD,aAAO;AACP,YAAM,MAAM,EAAE;AACd,gBAAQ,gBAAgB,EAAE,UAAU;AACpC,gBAAQ,gBAAgB,EAAE,GAAG,oBAAoB,SAAS;AAC1D,gBAAQ,iBAAiB,EAAE,GAAG;AAC9B,aAAO;AACP,YAAM,UAAU,EAAE;AAClB,gBAAQ,gBAAgB,EAAE,UAAU;AACpC,gBAAQ,gBAAgB,EAAE,GAAG,oBAAoB,UAAU;AAC3D,gBAAQ,iBAAiB,EAAE,GAAG;AAC9B,aAAO;AACP,SAAK,CAAC;AACN,QACI,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;AACrE,KAAG;AACH,IACE,YAAY;AACd,QAAI,MAAM,oBAAoB,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC/D,QAAI,MAAM,YAAY,GAAG;AACzB,YAAM,aAAa,EAAE,oBAAoB;AACzC,SAAK,CAAC;AACN,QAAI,MAAM,YAAY,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAkB,CAAC;AACjG,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxC,sCAAsC,EACtC,YAAY,CACb,CAAC;AACN,KAAG;AACH,IACQ,mBAAmB;AAC3B;AAEoB,YAFhB,IAAI;AACR,gBAAM,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CACtB,OAAO,CAAC,uBAAuB,CAAC,EAChC,OAAO,CAAC,qEAAqE,CAAC,EAC9E,MAAM,CAAC,MAAM,CACd,CAAC;AACR,gBAAM,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAClF,gBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,gBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACzD,aAAK;AAAC,YAAA,OAAO,EAAE,EAAE;AACjB,gBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACtC,aAAK;AACL,SAAG;AAEF,KAFE;AACH,IACE,oBAAoB;AACtB,QAAI,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACrD;AAEG,QAAC,OAAO,UAAU,CAAC,OAAO,CAAC;AAC9B,QAAI,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;AACtD;AAEG,QAAC,MAAM,YAAY,GAAG;AACzB,YAAM,aAAa,EAAE,UAAU;AAC/B,YAAM,gBAAgB,EAAE,IAAI;AAC5B,SAAK,CAAC;AACN,QAAI,MAAM,YAAY,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAkB,CAAC;AACjG,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxC,sCAAsC,EACtC,YAAY,CACb,CAAC;AACN,QAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC;AACnD,YAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACQ,eAAe;AACvB;AAEoB,YAFhB,IAAI;AACR,gBAAM,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CACtB,OAAO,CAAC,2CAA2C,CAAC,EACpD,OAAO,CACL,0FAA0F,CAC3F,EACD,MAAM,CAAC,MAAM,CACd,CAAC;AACR,gBACM,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC;AAC3D,oBAAQ,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE;AACjC,oBAAQ,aAAa,EAAE,0BAA0B,CAAC,UAAU;AAC5D,iBAAO,CAAC,CAAC;AACT,gBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,gBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC,CAAC;AAC7E,aAAK;AAAC,YAAA,OAAO,EAAE,EAAE;AACjB,gBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACtC,aAAK;AACL,SAAG;AAEF,KAFE;AACH,IACE,mBAAmB,CAAC,cAAc;AACpC,QAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAClD,KAAG;AACH,IACE,iBAAiB;AACnB,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC;AAC1F,KAAG;AACH,IACE,qCAAqC;AACvC,QAAI,QACE,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,SAAS;AACpF,YAAM,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,oBAAoB,EACzF;AACN,KAAG;AACH,IACE,oBAAoB;AACtB,QAAI,QACE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG;AACrC,YAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS;AAC3C,gBAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM;AAC1C,gBAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO;AAC3C,gBAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,EACxC;AACN,KAAG;AACH,IACE,gBAAgB;AAClB,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC;AACzF,KAAG;AACH,IACE,cAAc;AAChB,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC;AACvF,KAAG;AACH;0DAxMC,SAAS,SAAC,kBACT,QAAQ,EAAE,8BAA8B,kBACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAwD,cACzD;;;;;;;;;;;;;;;;;;;;;;;;;;;gaACI;AAAC;AAAwD,YATrD,qBAAqB;AAAI,YALhC,YAAY;AACZ,YAJA,YAAY;AACZ,YAMmB,cAAc;AAAG;AAAG;AAC9B,4BAUR,KAAK;AACN,+BACC,KAAK;AACN,uBACC,KAAK;AACN,kCACC,MAAM;AAAK,qBACX,MAAM;AAAK,uBACX,SAAS,SAAC,UAAU,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAM;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCnBtC,2BAA2B;AAAG,IAwCzC,YACS,QAAsC,EACrC,qBAA4C,EAC5C,0BAAsD;AAC/D,QAHQ,aAAQ,GAAR,QAAQ,CAA8B;AAAC,QACtC,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,+BAA0B,GAA1B,0BAA0B,CAA4B;AAClE,QA3CE,cAAS,GAAoB,EAAE,CAAC;AAClC,QAAE,wBAAmB,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC9C,QAAE,+BAA0B,GAAoB,6BAA6B,CAAC;AAC9E,QAEE,mBAAc,GAAY,KAAK,CAAC;AAClC,QAAE,kBAAa,GAAqC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAC9E,QAAE,gBAAW,GAAqC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAC5E,QAAE,gBAAW,GAAyB,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAChE,QAAE,YAAO,GAA0B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAC7D,QAME,oBAAe,GAA4C,aAAa,CACtE,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,OAAO,CACb,CAAC,IAAI,CACJ,GAAG,CAAC;AACR,YAAM,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AACjC,SAAK,CAAC,EACF,SAAS,CAAC,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,EACpF,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,EAChC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,UAAU,CAAiD;AAC7E,YAAM,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;AACrF,YAAM,uCAAY,MAAM,KAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,IAAG;AAC7E,SAAK,CAAC,EACF,GAAG,CAAC;AACR,YAAM,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;AAClC,SAAK,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;AACJ,QAQI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;AACjF,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;AAC/D,KAAG;AACH,IACE,YAAY,CAAC,cAAgC,EAAE,UAAU;AAC3D,QAAI,MAAM,kBAAkB,GAAa,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;AACjF,QAAI;AACJ;AACE,QAAI,CAAC,kBAAkB,CAAC,MAAM;AAChC;AACM,YAAA,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,IAAI,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAChF;AACN,YAAM,OAAO,cAAc,CAAC;AAC5B,SAAK;AACL,QACI,MAAM,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI;AACnD,YAAM,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;AAChG,SAAK,CAAC,CAAC;AACP,QACI,OAAO,YAAY,CAAC;AACxB,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,QACI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;AAClC,QAAI,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACrD,QAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;AAC9B,KAAG;AACH,IACE,eAAe;AACjB,QAAI,QACE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAC3F;AACN,KAAG;AACH,IACE,MAAM,CAAC,aAAa,EAAE,UAAU;AAClC,QAAI,MAAM,MAAM,GACV,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC;AAC/C,cAAU;AACV,gBAAY,aAAa,EAAE,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,IAAI,YAAY,CAAC,aAAa,CAAC,CAAC;AACjG,aAAW;AACX,cAAU,EAAE,CAAC;AACb,QACI,MAAM,IAAI,GAAG,UAAU;AAC3B,+CACc,UAAU,CAAC,QAAQ,IAAI;AACrC,gBAAY,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE;AACvD,aAAW,KACG,UAAU,CAAC,MAAM,IAAI;AACnC,gBAAY,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE;AACnD,aAAW,KAEH,EAAE,CAAC;AACX,QAAI,OAAO,IAAI,CAAC,iBAAiB,iCAAM,MAAM,GAAK,IAAI,EAAG,CAAC;AAC1D,KAAG;AACH,IACE,iBAAiB,CAAC,MAAO;AAC3B,QAAI,OAAO,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AAChE,KAAG;AACH,IACE,cAAc;AAChB,QAAI,OAAO,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;AACrD,KAAG;AACH,IACE,gBAAgB;AAClB,QAAI,IAAI,CAAC,0BAA0B,CAAC,yBAAyB,EAAE,CAAC;AAChE,KAAG;AACH,IACE,mBAAmB,CAAC,cAAc;AACpC,QAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI;AAC/B,YAAM,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,KAAK,cAAc,EAAE;AACpD,gBAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;AACxC,gBAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;AACpG,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,iBAAiB,CAAC,UAA0B,EAAE,UAA0B;AAAI,QAC1E,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAC/F,KAAG;AACH,IACU,sBAAsB,CAAC,OAAwB;AAAI,QACzD,OAAO,CAAC,OAAO,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,SAAS,EAAE,OAAO,KAAK,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;AACnG,KAAG;AACH;uDA5IC,SAAS,SAAC,kBACT,QAAQ,EAAE,qBAAqB,kBAC/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAAoD;iBACpD,SAAS,EAAE,CAAC;0BAA4B,CAAC;UAC1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0aACI;AAAC;AAAqD,YAjBlD,4BAA4B;AAAI,YAMvC,qBAAqB;AACrB,YAEO,0BAA0B;AAAG;AAAG;AACtC,wBAkBA,YAAY,SAAC,8BAA8B;AAAO,2BAGlD,SAAS,SAAC,cAAc,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAO,yBACjD,SAAS,SAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAM;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MClB/C,iCAAiC;AAAG,IAJjD;AACG,QAOD,aAAQ,GAAY,KAAK,CAAC;AAC5B,QAAY,4BAAuB,GAA0C,IAAI,YAAY,EAAE,CAAC;AAChG,QAAY,wBAAmB,GAAyB,IAAI,YAAY,EAAE,CAAC;AAC3E,QAIE,SAAI,GAAU,EAAE,CAAC;AACnB,KAoBC;AACD,IAnBE,QAAQ;AAAK,QACX,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;AACzC,QACI,IAAI,CAAC,IAAI,GAAG;AAChB,YAAM;AACN,gBAAQ,KAAK,EAAE,OAAO,CAAC,SAAS,CAAC;AACjC,gBAAQ,IAAI,EAAE,IAAI;AAClB,gBAAQ,IAAI,EAAE,UAAU;AACxB,gBAAQ,QAAQ,EAAE,IAAI,CAAC,eAAe;AACtC,aAAO;AACP,YAAM;AACN,gBAAQ,KAAK,EAAE,OAAO,CAAC,oBAAoB,CAAC;AAC5C,gBAAQ,IAAI,EAAE,IAAI;AAClB,gBAAQ,IAAI,EAAE,SAAS;AACvB,gBAAQ,QAAQ,EAAE,IAAI,CAAC,aAAa;AACpC,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;6DApCC,SAAS,SAAC,kBACT,QAAQ,EAAE,iCAAiC;GAC3C;;;;;;;4gBAA2D,cAC5D;;;;;;;;;;;;;;;;;;;sRACI;AAAC;AAAqD,4BACxD,KAAK;AACN,uBACC,KAAK;AACN,sCACC,MAAM;AAAK,kCACX,MAAM;AAAK,8BAEX,SAAS,SAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAO,4BAC5C,SAAS,SAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAM;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MClBnC,6BAA6B;AAC1C,IALA;AACG,QAID,wBAAmB,GAAY,KAAK,CAAC;AACvC,QAME,aAAQ,GAAY,KAAK,CAAC;AAC5B,QAAY,wBAAmB,GAAyB,IAAI,YAAY,EAAE,CAAC;AAC3E,KAIC;AACD,IAJE,4BAA4B,CAAC,iBAAiB;AAChD,QAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AACrD,KAAG;AACH;yDAlBC,SAAS,SAAC,kBACT,QAAQ,EAAE,4BAA4B;MACtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAAsD,cACvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gPACI;AAAC;AACI,4BAIP,KAAK;AACN,uBACC,KAAK;AACN,kCACC,MAAM;AAAI;;;;;;;;;;;;;oBAAE;AAAC;ACdT,MAAM,sBAAsB,GAAG;AACtC,IAAE,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAE,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;AACjC,IAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC;AAC3B,IAAE,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC;AACnC,IAAE,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AACrB,CAAC,CAAC;AAEK,MAAM,2BAA2B,GAAG;AAC3C,IAAE;AACF,QAAI,KAAK,EAAE,sBAAsB,CAAC,OAAO;AACzC,QAAI,SAAS,EAAE,gCAAgC;AAC/C,QAAI,QAAQ,EAAE,KAAK;AACnB,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,sBAAsB,CAAC,SAAS;AAC3C,QAAI,SAAS,EAAE,gCAAgC;AAC/C,QAAI,QAAQ,EAAE,KAAK;AACnB,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,sBAAsB,CAAC,UAAU;AAC5C,QAAI,SAAS,EAAE,wCAAwC;AACvD,QAAI,QAAQ,EAAE,KAAK;AACnB,KAAG;AACH,IAAE;AACF,QAAI,KAAK,EAAE,sBAAsB,CAAC,MAAM;AACxC,QAAI,SAAS,EAAE,6CAA6C;AAC5D,QAAI,QAAQ,EAAE,KAAK;AACnB,KAAG;AACH,CAAC;AACD;AAAC,MCbY,6BAA6B;AAAG,IAc3C,YAAoB,qBAA4C;AAAI,QAAhD,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAVjE,aAAQ,GAAY,KAAK,CAAC;AAC5B,QAAY,4BAAuB,GAA0C,IAAI,YAAY,EAAE,CAAC;AAChG,QAIE,oCAA+B,GAAG,2BAA2B,CAAC;AAChE,QAAE,+BAA0B,GAAG,sBAAsB,CAAC;AACtD,KAEsE;AACtE,IACQ,eAAe;AACvB;AACiC,YAD7B,IAAI,IAAI,CAAC,YAAY,EAAE;AAC3B,gBAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACpC,aAAK;AACL,SAAG;AAEF,KAFE;AACH,IACE,WAAW,CAAC,OAAsB;AACpC,QAAI,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE;AACrE,YAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACpC,SAAK;AACL,KAAG;AACH,IACE,sBAAsB;AACxB,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE;AAC3B,YAAM,MAAM,UAAU,GAAG,IAAI,CAAC,+BAA+B,EAAE,CAAC;AAChE,YACM,IAAI,CAAC,YAAY,CAAC,MAAM,CACtB,UAAU,KAAK,IAAI,CAAC,0BAA0B,CAAC,GAAG;AAC1D,kBAAY,EAAE;AACd,kBAAY,CAAC,EAAE,KAAK,EAAE,UAAU,EAAmB,CAAC,CAC7C,CAAC;AACR,SAAK;AAAC,aAAK;AACX,YAAM,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACzD,SAAK;AACL,KAAG;AACH,IACE,+BAA+B;AACjC,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;AACjD,QACI,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,YAAM,OAAO,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC;AACpD,SAAK;AAAC,aAAK,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,KAAK,CAAC,EAAE;AAC7F,YAAM,OAAO,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC;AACvD,SAAK;AAAC,aAAK,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,KAAK,CAAC,EAAE;AAC/F,YAAM,OAAO,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;AACrD,SAAK;AAAC,aAAK,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,KAAK,CAAC,IAAI,QAAQ,CAAC,SAAS,KAAK,CAAC,EAAE;AAC5F,YAAM,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC;AACxD,SAAK;AACL,QACI,OAAO,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC;AAC/C,KAAG;AACH,IACQ,qBAAqB,CAAC,MAAuB;AACrD;AAA8D,YAA1D,IAAI,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,2BAA2B,CAClF,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAC5B,IAAI,CAAC,aAAa,CAAC,EAAE,CACtB,CAAC;AACN,SAAG;AAEF,KAFE;AACH,IACE,kBAAkB;AACpB,QAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC1D,KAAG;AACH;yDAxEC,SAAS,SAAC,kBACT,QAAQ,EAAE,4BAA4B,kBACtC;;;;;;;;;;+IAAsD,cACvD,uMACI;AAAC;AAAuD,YAPpD,qBAAqB;AAAG;AAAG;AAAiD,4BAQlF,KAAK;AACN,uBACC,KAAK;AACN,sCACC,MAAM;AAAK,2BAEX,SAAS,SAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AACjD;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MChBK,4BAA4B;AACzC,IAWE,YACU,qBAA4C,EAC5C,YAA0B;AACnC,QAFS,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,iBAAY,GAAZ,YAAY,CAAc;AACtC,QAdE,WAAM,GAAG,EAAE,CAAC;AACd,QAAE,wBAAmB,GAAG,KAAK,CAAC;AAC9B,QAAE,+BAA0B,GAAG,sBAAsB,CAAC;AACtD,QAAE,qCAAgC,GAAG,2BAA2B,CAAC;AACjE,QAIE,aAAQ,GAAY,KAAK,CAAC;AAC5B,KAKM;AACN,IACQ,QAAQ;AAChB;AACoB,YADhB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACzC,YAAI,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAClE,SAAG;AAEF,KAFE;AACH,IACE,eAAe;AACjB,QAAI,IAAI,CAAC,eAAe,EAAE,CAAC;AAC3B,KAAG;AACH,IACQ,oBAAoB,CAAC,eAAe;AAC5C;AACQ,YADJ,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,EAAE;AACpD,gBAAM,IAAI;AACV,gBAAM,MAAM;AACZ,gBAAM,QAAQ;AACd,gBAAM,eAAe;AACrB,gBAAM,cAAc;AACpB,gBAAM,UAAU;AAChB,aAAK,CAAC,CAAC;AACP,YACI,IAAI;AACR,gBAAM,MAAM,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;AAChF,gBAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAC/D,aAAK;AAAC,YAAA,OAAO,EAAE,EAAE;AACjB,gBAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AAC7C,aAAK;AACL,SAAG;AAEF,KAFE;AACH,IACE,YAAY;AACd,QAAI,OAAO,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAC/C,mBAAmB,IAAI,mBAAmB,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CACzF,CAAC,SAAS,CAAC;AAChB,KAAG;AACH,IACgB,WAAW,CAAC,QAAQ;AACpC;AAA8D,YAA1D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACpF,YAAI,IAAI,WAAW,EAAE;AACrB,gBAAM,OAAO,WAAW,CAAC,IAAI,CAAC;AAC9B,aAAK;AACL,SAAG;AAEF,KAFE;AACH,IACU,eAAe;AACzB,QAAI,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;AACtC,YAAM,MAAM,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC;AACrD,YAAM,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,GAAG,IAAI,GAAG,KAAK,CAAC;AAChF,SAAK;AACL,KAAG;AACH;wDAnEC,SAAS,SAAC,kBACT,QAAQ,EAAE,2BAA2B,kBACrC;;;;;;;;;;;;;;;4BAAqD;WACtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oVACI;AAAC;AAEL,YAVQ,qBAAqB;AAAI,YADzB,YAAY;AAAG;AAAG;AACb,wBAcX,KAAK;AACN,uBACC,KAAK;AACN,+BACC,SAAS,SAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;AAAM;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCT3C,8BAA8B;AAAG,IAI5C,YACU,MAAc,EACd,qBAA4C,EAC5C,0BAAsD;AAC/D,QAHS,WAAM,GAAN,MAAM,CAAQ;AAAC,QACf,0BAAqB,GAArB,qBAAqB,CAAuB;AAAC,QAC7C,+BAA0B,GAA1B,0BAA0B,CAA4B;AAClE,QAPY,iBAAY,GAAgC,IAAI,YAAY,EAAE,CAAC;AAC3E,QAAE,aAAQ,GAAoB,EAAE,CAAC;AACjC,KAKM;AACN,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;AAC9D,KAAG;AACH,IACE,WAAW,CAAC,IAAmB;AACjC,QAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AACnB,YAAM,IAAI,CAAC,0BAA0B,CAAC,yBAAyB,EAAE,CAAC;AAClE,YAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3C,SAAK;AAAC,aAAK,IAAI,IAAI,CAAC,SAAS,EAAE;AAC/B,YAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,SAAK;AACL,KAAG;AACH;0DA1BC,SAAS,SAAC,kBACT,QAAQ,EAAE,8BAA8B,kBACxC;ydAAwD,cACzD;;;;;;;gIACI;AAAC;AAAwD,YAXrD,MAAM;AAAI,YAEjB,qBAAqB;AACrB,YAEO,0BAA0B;AAAG;AAAG;AAErC,2BAKD,MAAM;AAAI;;;;;;;;;oBAAE;AAAC;AAAC,MCUJ,uBAAuB,GAAY;AAChD,IAAE;AACF,QAAI,IAAI,EAAE,oBAAoB;AAC9B,QAAI,SAAS,EAAE,2BAA2B;AAC1C,KAAG;AACH,EAAE;AAEF;AACA;AACA;AACA,MAgDa,wBAAwB;AAAG;oDAhDvC,QAAQ,SAAC,kBACR,OAAO,EAAE,sBACP;AAAU,sBACV,aAAa,sBACb,aAAa,sBACb;GAAkB,sBAClB,sBAAsB,sBACtB,4BAA4B,sBAC5B,YAAY,CAAC,QAAQ,CAAC;UAAuB,CAAC;KAC/C,kBACD;KAAS,EAAE,CAAC;QAA2B,EAAE;IAA0B,CAAC,kBACpE,YAAY;CAAE,sBACZ;QAA2B,sBAC3B;CAA8B;QAC9B,iCAAiC,sBACjC,6BAA6B,sBAC7B;uBAA6B;;IAC7B;KAA4B,sBAC5B;wBAA6B;WAC7B;MAA8B,sBAC9B;gBAA4B,sBAC5B;gCAAsC;AACvC,kBACD,eAAe,EAAE,sBACf;iBAA2B;oBAC3B,8BAA8B,sBAC9B;mBAAiC;SACjC,6BAA6B;WAC7B,6BAA6B;UAC7B,4BAA4B;KAC5B,6BAA6B;KAC7B,8BAA8B;MAC9B,4BAA4B;MAC5B,sCAAsC;WACvC,kBACD,OAAO,EAAE;QACP,2BAA2B;OAC3B,8BAA8B;AAC9B;cAAiC;CACjC,6BAA6B;GAC7B,6BAA6B;EAC7B,4BAA4B,sBAC5B;0BAA6B,sBAC7B;2BAA8B,sBAC9B;0BAA4B,sBAC5B;oCAAsC;GACvC,cACF;;;;;;;;;;;;;;;;;;;;;;;4aACI;AAAC;ACjFN;AACA;AACA;AACA;AACA;AAC+Z","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationsService: BulkOperationsService,\n    public modalRef: BsModalRef,\n    private modalService: BsModalService\n  ) {}\n\n  // openDetails function needs to be defined in the both places (component and the service) to avoid circular dependency.\n  // BulkOperationsService is a downgraded service, thus we can't just use other approach where we could pass\n  // BulkOperationWrapperComponent as a second argument in the bulkOperationsService.openDetails(bulkOperationId, BulkOperationWrapperComponent).\n  async openDetails(bulkOperationId: string | number) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId: string | number) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-modal',\n  templateUrl: 'bulk-operations-modal.component.html'\n})\nexport class BulkOperationsModalComponent {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  showComponent: boolean = false;\n  constructor(private bsModalRef: BsModalRef, private resolver: ComponentFactoryResolver) {}\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  createComponent(item: OperationType) {\n    if (item && item.component) {\n      this.showComponent = true;\n      const factory = this.resolver.resolveComponentFactory(item.component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsModalComponent } from './bulk-operations-modal.component';\n\n@Injectable()\nexport class BulkOperationModalsService {\n  private bsModalRef: BsModalRef;\n\n  constructor(private bsModalService: BsModalService) {}\n\n  showNewBulkOperationModal() {\n    this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {\n      backdrop: 'static',\n      class: 'modal-sm'\n    });\n  }\n\n  hideNewBulkOperationModal() {\n    if (this.bsModalRef) {\n      this.bsModalRef.hide();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully'),\n  DELETED: gettext('Deleted')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: IStatusOption[] = [\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatus: [OperationBulkGeneralStatus.SCHEDULED],\n    iconClass: 'dlt-c8y-icon-calendar text-info'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatus: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    iconClass: 'dlt-c8y-icon-refresh text-primary'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.DELETED,\n    generalStatus: [OperationBulkGeneralStatus.DELETED],\n    iconClass: 'dlt-c8y-icon-delete-document text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatus: [OperationBulkGeneralStatus.CANCELED],\n    iconClass: 'dlt-c8y-icon-ban text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatus: [OperationBulkGeneralStatus.FAILED],\n    iconClass: 'dlt-c8y-icon-exclamation-triangle text-danger'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],\n    iconClass: 'dlt-c8y-icon-check-circle text-success'\n  }\n];\n\nexport const BULK_OPERATION_FALLBACK_STATUS_ICON = 'dlt-c8y-icon-ask-question text-muted';\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport { BULK_OPERATION_FALLBACK_STATUS_ICON, BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.iconClass = this.getIconClass();\n      this.setProgressBar();\n    }\n  }\n\n  getIconClass() {\n    const statusOptions = this.bulkOperationStatusOptions.find(statusOption =>\n      statusOption.generalStatus.includes(this.bulkOperation.generalStatus)\n    );\n    return statusOptions ? statusOptions.iconClass : BULK_OPERATION_FALLBACK_STATUS_ICON;\n  }\n\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to SUCCESSFUL'),\n        gettext(\n          'You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  allOperationsCreated() {\n    return (\n      this.bulkOperation.progress.all ===\n      this.bulkOperation.progress.executing +\n        this.bulkOperation.progress.failed +\n        this.bulkOperation.progress.pending +\n        this.bulkOperation.progress.successful\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { Component, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { IOperationBulk, IResultList } from '@c8y/client';\nimport { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';\nimport { flatten } from 'lodash-es';\nimport { BehaviorSubject, Observable, combineLatest, pipe } from 'rxjs';\nimport { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n@Component({\n  selector: 'c8y-bulk-operations',\n  templateUrl: './bulk-operations-list.component.html',\n  providers: [OperationBulkRealtimeService]\n})\nexport class BulkOperationsListComponent implements OnInit {\n  bulkTypes: OperationType[] = [];\n  selectedTypeFilters = this.getTypeFilters();\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n\n  filterPipe;\n  refreshLoading: boolean = false;\n  statusFilter$: BehaviorSubject<IStatusOption[]> = new BehaviorSubject(null);\n  typeFilter$: BehaviorSubject<OperationType[]> = new BehaviorSubject(null);\n  timeFilter$: BehaviorSubject<any> = new BehaviorSubject(null);\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  @ViewChildren(BulkOperationListItemComponent) listItems: QueryList<\n    BulkOperationListItemComponent\n  >;\n  @ViewChild('statusFilter', { static: true }) statusFilter: StatusFilterComponent;\n  @ViewChild(DatePickerComponent, { static: true }) datePicker: DatePickerComponent;\n\n  bulkOperations$: Observable<IResultList<IOperationBulk>> = combineLatest(\n    this.statusFilter$,\n    this.timeFilter$,\n    this.typeFilter$,\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.refreshLoading = true;\n    }),\n    switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)),\n    withLatestFrom(this.typeFilter$),\n    map(([result, typeFilter]: [IResultList<IOperationBulk>, OperationType[]]) => {\n      this.filterPipe = pipe(map((data: []) => this.filterByType(data, typeFilter)));\n      return { ...result, data: this.filterByType(result.data, typeFilter) };\n    }),\n    tap(() => {\n      this.refreshLoading = false;\n    }),\n    shareReplay(1)\n  );\n\n  private allFilterFragments: string[];\n\n  constructor(\n    public realtime: OperationBulkRealtimeService,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {\n    this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());\n  }\n\n  ngOnInit() {\n    this.bulkTypes = this.bulkOperationsService.getBulkTypes();\n  }\n\n  filterByType(bulkOperations: IOperationBulk[], typeFilter) {\n    const flattenedFragments: string[] = this.flattenFilterFragments(typeFilter);\n    if (\n      // return data unfiltered if no filters selected...\n      !flattenedFragments.length ||\n      // ...or when all filters are selected\n      this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))\n    ) {\n      return bulkOperations;\n    }\n\n    const filteredData = bulkOperations.filter(item => {\n      return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));\n    });\n\n    return filteredData;\n  }\n\n  resetFilter() {\n    this.statusFilter$.next(null);\n    this.timeFilter$.next(null);\n    this.typeFilter$.next(null);\n\n    this.datePicker.clearFilter();\n    this.selectedTypeFilters = this.getTypeFilters();\n    this.statusFilter.reset();\n  }\n\n  isFilterApplied() {\n    return (\n      this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue()\n    );\n  }\n\n  filter(statusFilters, timeFilter) {\n    const status =\n      statusFilters && statusFilters.length > 0\n        ? {\n            generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))\n          }\n        : {};\n\n    const time = timeFilter\n      ? {\n          ...(timeFilter.dateFrom && {\n            dateFrom: timeFilter.dateFrom.toISOString()\n          }),\n          ...(timeFilter.dateTo && {\n            dateTo: timeFilter.dateTo.toISOString()\n          })\n        }\n      : {};\n    return this.getBulkOperations({ ...status, ...time });\n  }\n\n  getBulkOperations(filter?) {\n    return this.bulkOperationsService.getBulkOperations(filter);\n  }\n\n  getTypeFilters() {\n    return this.bulkOperationsService.getBulkTypes();\n  }\n\n  addBulkOperation() {\n    this.bulkOperationModalsService.showNewBulkOperationModal();\n  }\n\n  openFailedOperation(failedParentId) {\n    this.listItems.forEach(item => {\n      if (item.bulkOperation.id === failedParentId) {\n        item.listItem.collapsed = false;\n        item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    });\n  }\n\n  compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number {\n    return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();\n  }\n\n  private flattenFilterFragments(filters: OperationType[]): string[] {\n    return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { gettext, Tab } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-bulk-operation-details-tabs',\n  templateUrl: './bulk-operation-details-tabs.component.html'\n})\nexport class BulkOperationDetailsTabsComponent implements OnInit {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('details', { static: true }) detailsTemplate: any;\n  @ViewChild('audit', { static: true }) auditTemplate: any;\n\n  tabs: Tab[] = [];\n  template: ViewContainerRef;\n\n  ngOnInit(): void {\n    this.template = this.detailsTemplate;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        path: null,\n        icon: 'asterisk',\n        template: this.detailsTemplate\n      },\n      {\n        label: gettext('History of changes'),\n        path: null,\n        icon: 'archive',\n        template: this.auditTemplate\n      }\n    ];\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, IOperationBulk } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-bulk-operation-details',\n  templateUrl: './bulk-operation-details.component.html'\n})\nexport class BulkOperationDetailsComponent {\n  allFilterIsSelected: boolean = false;\n  collapsed: boolean;\n  device: IManagedObject;\n\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  scrollToRetriedFromOperation(failedOperationId) {\n    this.showFailedOperation.emit(failedOperationId);\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\n\nexport const SINGLE_OP_STATUS_NAMES = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful'),\n  ALL: gettext('All')\n};\n\nexport const SINGLE_OP_STATUS_PROPERTIES = [\n  {\n    label: SINGLE_OP_STATUS_NAMES.PENDING,\n    iconClass: 'dlt-c8y-icon-clock-o text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.EXECUTING,\n    iconClass: 'dlt-c8y-icon-refresh text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,\n    iconClass: 'dlt-c8y-icon-check-circle text-success',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.FAILED,\n    iconClass: 'dlt-c8y-icon-exclamation-circle text-danger',\n    selected: false\n  }\n];\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperation, IOperationBulk, IResultList } from '@c8y/client';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n\n      this.statusFilter.preset(\n        typeFilter === this.singleOperationStatusNames.ALL\n          ? []\n          : [{ label: typeFilter } as IStatusOption]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.singleOperationStatusNames.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.singleOperationStatusNames.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.SUCCESSFUL;\n    }\n\n    return this.singleOperationStatusNames.ALL;\n  }\n\n  async getOperationsByStatus(filter: IStatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { omit } from 'lodash-es';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  showIfTextTruncated = false;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  iconClass: string;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.device = await this.getDeviceMO(this.operation.deviceId);\n  }\n\n  ngAfterViewInit() {\n    this.isTextTruncated();\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.bulkOperationsService.createSingleOperation(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n\n  getIconClass() {\n    return this.singleOperationsStatusProperties.find(\n      operationProperties => operationProperties.label.toUpperCase() === this.operation.status\n    ).iconClass;\n  }\n\n  private async getDeviceMO(deviceId) {\n    const inventoryMO = await this.bulkOperationsService.getManagedObject(deviceId);\n    if (inventoryMO) {\n      return inventoryMO.data;\n    }\n  }\n\n  private isTextTruncated() {\n    if (this.operation.failureReason) {\n      const el = this.failureReasonRef.nativeElement;\n      this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;\n    }\n  }\n}\n","import { Component, EventEmitter, Output, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from '../modals/bulk-operation-modals.service';\n\n@Component({\n  selector: 'c8y-bulk-operation-type-list',\n  templateUrl: './bulk-operation-type-list.component.html'\n})\nexport class BulkOperationTypeListComponent implements OnInit {\n  @Output() onCustomType: EventEmitter<OperationType> = new EventEmitter();\n  bulkList: OperationType[] = [];\n\n  constructor(\n    private router: Router,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {}\n\n  ngOnInit() {\n    this.bulkList = this.bulkOperationsService.getBulkTypes();\n  }\n\n  handleClick(item: OperationType) {\n    if (item.path) {\n      this.bulkOperationModalsService.hideNewBulkOperationModal();\n      this.router.navigateByUrl(item.path);\n    } else if (item.component) {\n      this.onCustomType.emit(item);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, Route } from '@c8y/ngx-components';\nimport { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\nimport { BulkOperationsListComponent } from './bulk-operations-list.component';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BulkOperationDetailsTabsComponent } from './bulk-operation-details-tabs.component';\nimport { BulkOperationDetailsComponent } from './bulk-operation-details.component';\nimport { SingleOperationsListComponent } from './single-operations-list.component';\nimport { SingleOperationItemComponent } from './single-operation-item.component';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\nimport { BulkOperationTypeListComponent } from './type-list/bulk-operation-type-list.component';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationsModalComponent } from './modals/bulk-operations-modal.component';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\n\nexport const bulkOperationListRoutes: Route[] = [\n  {\n    path: 'devicecontrol/bulk',\n    component: BulkOperationsListComponent\n  }\n];\n\n/**\n * This module allows for displaying the list of bulk operations and their details.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    StatusFilterModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule,\n    RouterModule.forChild(bulkOperationListRoutes)\n  ],\n  providers: [BulkOperationDetailsService, BulkOperationModalsService],\n  declarations: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  entryComponents: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  exports: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ]\n})\nexport class BulkOperationsListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}