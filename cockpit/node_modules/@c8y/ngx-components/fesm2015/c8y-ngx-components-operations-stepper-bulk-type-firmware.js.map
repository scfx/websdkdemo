{"version":3,"file":"c8y-ngx-components-operations-stepper-bulk-type-firmware.js","sources":["../../operations/stepper-bulk-type-firmware/stepper-bulk-type-firmware.component.ts","../../operations/stepper-bulk-type-firmware/version-or-patch.component.ts","../../operations/stepper-bulk-type-firmware/select-firmware.component.ts","../../operations/stepper-bulk-type-firmware/stepper-bulk-type-firmware.module.ts","../../operations/stepper-bulk-type-firmware/c8y-ngx-components-operations-stepper-bulk-type-firmware.ts"],"names":[],"mappings":"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","sourcesContent":["import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { Component, OnDestroy } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-firmware',\n  templateUrl: 'stepper-bulk-type-firmware.component.html'\n})\nexport class StepperBulkTypeFirmwareComponent extends BaseStepperComponent implements OnDestroy {\n  readonly descriptionTemplate: string = gettext('{{ name }} (version {{ version }})');\n\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  stepData: { firmware: IManagedObject; versionOrPatch: IManagedObject } = {\n    firmware: undefined,\n    versionOrPatch: undefined\n  };\n\n  selectedFirmware: IManagedObject;\n  selectedVersionOrPatch: IManagedObject;\n\n  private subscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  goToVersionOrPatchStep({ stepper }) {\n    const selectedFirmware = this.stepData.firmware;\n    this.bulkOperationService.setFirmwareId(selectedFirmware.id);\n    this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;\n    stepper.next();\n  }\n\n  onVersionOrPatchSelected(versionOrPatch: IManagedObject) {\n    this.stepData.versionOrPatch = versionOrPatch;\n  }\n\n  onFirmwareSelected(fw: IManagedObject) {\n    this.stepData.firmware = fw;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const selectedFirmware = this.stepData.firmware;\n    const selectedVersionOrPatch = this.stepData.versionOrPatch;\n\n    if (!selectedFirmware || !selectedVersionOrPatch) {\n      return;\n    }\n\n    const firmware: IManagedObject = ({\n      name: selectedFirmware.name,\n      version: selectedVersionOrPatch.c8y_Firmware.version,\n      url: selectedVersionOrPatch.c8y_Firmware.url\n    } as unknown) as IManagedObject;\n\n    if (selectedVersionOrPatch.c8y_Patch) {\n      firmware.isPatch = true;\n      firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;\n    }\n\n    const name = selectedFirmware.name;\n    const version = selectedVersionOrPatch.c8y_Firmware.version;\n    const description: string = `Update firmware to: ${name} (version: ${version}).`;\n\n    return {\n      name: gettext('Firmware update'),\n      description: this.translate.instant(this.descriptionTemplate, {\n        name: get(this.stepData, 'firmware.name'),\n        version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')\n      }),\n      prototype: ({\n        description,\n        c8y_Firmware: firmware\n      } as unknown) as IOperation\n    };\n  }\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    this.textFilter$.next('');\n    super.onSelectionChange(event);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { memoize } from '@c8y/ngx-components';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { FirmwareBinary, RepositoryService } from '@c8y/ngx-components/repository';\nimport { property } from 'lodash-es';\nimport { defer, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  shareReplay,\n  switchMap,\n  tap\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-version-or-patch-step',\n  templateUrl: 'version-or-patch.component.html'\n})\nexport class VersionOrPatchComponent {\n  @Input() selected: IManagedObject;\n  @Output() versionOrPatch: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n\n  firmware$: Observable<IManagedObject> = this.bulkOpsService.firmwareId.pipe(\n    distinctUntilChanged(),\n    switchMap(id =>\n      defer(() => this.inventoryService.detail(id).then(result => result.data)).pipe(\n        catchError(error => of(error))\n      )\n    ),\n    shareReplay(1)\n  );\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = this.firmware$.pipe(\n    distinctUntilKeyChanged('id'),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    tap(resp => {\n      this.elementCount = resp.data ? resp.data.length : 0;\n    }),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  expanded: { [id: string]: boolean } = {};\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryService: InventoryService,\n    private bulkOpsService: BulkOperationsService\n  ) {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getBaseVersionAndPatches$(baseVersion) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(firmware =>\n        this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject) {\n    if (selected) {\n      this.versionOrPatch.emit(versionOrPatch);\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { gettext } from '@c8y/ngx-components';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { property, get } from 'lodash-es';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-select-firmware-step',\n  templateUrl: 'select-firmware.component.html'\n})\nexport class SelectFirmwareComponent {\n  @Input() selected: IManagedObject;\n  @Output() firmware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  firmwares$: Observable<IResultList<IManagedObject>> = this.textFilter$\n    .pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    )\n    .pipe(\n      switchMap(text => this.getFirmwares(text)),\n      tap(resp => {\n        this.elementCount = resp.data ? resp.data.length : 0;\n      }),\n      shareReplay(1)\n    );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available.');\n  readonly DESCRIPTION_NOT_AVAILABLE: string = gettext('No description available.');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bulkOpsService: BulkOperationsService,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  selectFirmware(selected: boolean, fw: IManagedObject) {\n    if (selected) {\n      this.firmware.emit(fw);\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDescriptionTitle(firmware: IManagedObject): string {\n    return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n\n  private getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';\nimport { RepositoryModule } from '@c8y/ngx-components/repository';\nimport { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';\nimport {\n  HOOK_LIST_BULK_TYPE,\n  baseUrl,\n  BulkOperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\nimport { SelectFirmwareComponent } from './select-firmware.component';\nimport { VersionOrPatchComponent } from './version-or-patch.component';\nimport { StepperBulkTypeFirmwareComponent } from './stepper-bulk-type-firmware.component';\n\n/** Module for the 'Firmware update' operation type stepper */\n@NgModule({\n  declarations: [\n    StepperBulkTypeFirmwareComponent,\n    VersionOrPatchComponent,\n    SelectFirmwareComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BulkOperationStepperModule,\n    RepositoryModule\n  ],\n  providers: [\n    {\n      provide: HOOK_LIST_BULK_TYPE,\n      useValue: {\n        type: BulkOperationType.FIRMWARE,\n        c8yIcon: 'c8y-firmware',\n        name: gettext('Firmware update'),\n        path: `${baseUrl}firmware`,\n        component: StepperBulkTypeFirmwareComponent,\n        fragments: ['c8y_Firmware'],\n        selected: false\n      },\n      multi: true\n    }\n  ],\n  entryComponents: [StepperBulkTypeFirmwareComponent],\n  exports: [StepperBulkTypeFirmwareComponent]\n})\nexport class StepperBulkTypeFirmwareModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}