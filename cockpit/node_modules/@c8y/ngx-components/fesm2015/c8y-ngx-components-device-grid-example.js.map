{"version":3,"file":"c8y-ngx-components-device-grid-example.js","sources":["../../device-grid-example/device-grid-example.component.ts","../../device-grid-example/device-grid-example-guard.ts","../../device-grid-example/device-grid-example-navigation.factory.ts","../../device-grid-example/device-grid-example.module.ts","../../device-grid-example/c8y-ngx-components-device-grid-example.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport {\n  DeviceGridService,\n  DeviceGridColumn,\n  CustomDeviceGridColumn\n} from '@c8y/ngx-components/device-grid';\nimport { gettext } from '@c8y/ngx-components';\n\nimport { find } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-device-grid-example',\n  templateUrl: './device-grid-example.component.html'\n})\nexport class DeviceGridExampleComponent {\n  examples: Array<{ label: string; columns: DeviceGridColumn[] }>;\n  selectedExample;\n  columnsInput: DeviceGridColumn[];\n  columnsOutput: DeviceGridColumn[];\n  deviceQueryStringOutput: string;\n\n  constructor(protected deviceGridService: DeviceGridService) {\n    this.examples = [\n      this.getExampleWithStandardColumns(),\n      this.getExampleWithStandardColumnsAndSavedFilteringSorting(),\n      this.getExampleWithCustomColumnAndPredefinedFiltering()\n    ];\n  }\n\n  getExampleWithStandardColumns() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    return {\n      label: 'Standard columns',\n      columns\n    };\n  }\n\n  getExampleWithStandardColumnsAndSavedFilteringSorting() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    const nameColumn = find(columns, { name: 'name' });\n    nameColumn.externalFilterQuery = {\n      names: ['*Temp*']\n    };\n    nameColumn.sortOrder = 'desc';\n    return {\n      label: 'Standard columns with saved filtering/sorting',\n      columns\n    };\n  }\n\n  getExampleWithCustomColumnAndPredefinedFiltering() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    const typeColumn = new CustomDeviceGridColumn();\n    typeColumn.name = 'type';\n    typeColumn.path = 'type';\n    typeColumn.header = gettext('Type');\n    typeColumn.externalFilterQuery = {\n      equals: ['c8y_MQTTDevice']\n    };\n    columns.splice(2, 0, typeColumn);\n    return {\n      label: 'Standard columns with custom one with predefined filtering',\n      columns\n    };\n  }\n\n  onExampleSelect(example) {\n    this.columnsInput = example.columns;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { OptionsService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class DeviceGridExampleGuard implements CanActivate {\n  constructor(private optionsService: OptionsService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // FIXME: not entirely correct but enough for testing (see beta provider isActivatedFor)\n    return Boolean(this.optionsService.get('beta', false));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { DeviceGridExampleGuard } from './device-grid-example-guard';\n\n@Injectable()\nexport class DeviceGridExampleNavigationFactory implements NavigatorNodeFactory {\n  nav: NavigatorNode;\n\n  constructor(private deviceGridExampleGuard: DeviceGridExampleGuard) {}\n\n  async get() {\n    if (!this.nav && this.deviceGridExampleGuard.canActivate(null, null)) {\n      this.nav = new NavigatorNode({\n        label: gettext('Grids'),\n        icon: 'table'\n      });\n      this.nav.add(\n        new NavigatorNode({\n          label: gettext('Device grid'),\n          path: '/grids/device-grid',\n          icon: 'table'\n        })\n      );\n    }\n    return this.nav;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';\nimport { DeviceGridModule } from '@c8y/ngx-components/device-grid';\n\nimport { DeviceGridExampleNavigationFactory } from './device-grid-example-navigation.factory';\nimport { DeviceGridExampleGuard } from './device-grid-example-guard';\nimport { DeviceGridExampleComponent } from './device-grid-example.component';\n\nconst routes: Route[] = [\n  {\n    path: 'grids/device-grid',\n    component: DeviceGridExampleComponent,\n    canActivate: [DeviceGridExampleGuard]\n  }\n];\n\n@NgModule({\n  imports: [\n    CoreModule,\n    CommonModule,\n    DeviceGridModule,\n    RouterModule.forRoot(routes, { useHash: true })\n  ],\n  declarations: [DeviceGridExampleComponent],\n  entryComponents: [DeviceGridExampleComponent],\n  exports: [],\n  providers: [\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: DeviceGridExampleNavigationFactory,\n      multi: true\n    },\n    DeviceGridExampleGuard\n  ]\n})\nexport class DeviceGridExampleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}