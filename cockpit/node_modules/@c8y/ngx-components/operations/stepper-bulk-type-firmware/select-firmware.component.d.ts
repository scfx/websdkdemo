import { EventEmitter } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { RepositoryService } from '@c8y/ngx-components/repository';
import { IResultList, IManagedObject } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import * as ɵngcc0 from '@angular/core';
export declare class SelectFirmwareComponent {
    private repositoryService;
    private bulkOpsService;
    private translate;
    selected: IManagedObject;
    firmware: EventEmitter<IManagedObject>;
    elementCount: number;
    DD_LOW_COUNT: number;
    textFilter$: BehaviorSubject<string>;
    firmwares$: Observable<IResultList<IManagedObject>>;
    isLegacy: any;
    readonly DEVICE_TYPE_NOT_AVAILABLE: string;
    readonly DESCRIPTION_NOT_AVAILABLE: string;
    constructor(repositoryService: RepositoryService, bulkOpsService: BulkOperationsService, translate: TranslateService);
    ngOnInit(): void;
    selectFirmware(selected: boolean, fw: IManagedObject): void;
    getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string>;
    getDescriptionTitle(firmware: IManagedObject): string;
    getDeviceTypeTitle(firmware: IManagedObject): string;
    private getFirmwares;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SelectFirmwareComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SelectFirmwareComponent, "c8y-select-firmware-step", never, { "selected": "selected"; }, { "firmware": "firmware"; }, never, never>;
}

//# sourceMappingURL=select-firmware.component.d.ts.map