import { EventEmitter } from '@angular/core';
import { IManagedObject, InventoryService, IResultList } from '@c8y/client';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { FirmwareBinary, RepositoryService } from '@c8y/ngx-components/repository';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class VersionOrPatchComponent {
    private repositoryService;
    private inventoryService;
    private bulkOpsService;
    selected: IManagedObject;
    versionOrPatch: EventEmitter<IManagedObject>;
    elementCount: number;
    DD_LOW_COUNT: number;
    firmware$: Observable<IManagedObject>;
    baseVersions$: Observable<IResultList<IManagedObject>>;
    isLegacy$: Observable<boolean>;
    expanded: {
        [id: string]: boolean;
    };
    constructor(repositoryService: RepositoryService, inventoryService: InventoryService, bulkOpsService: BulkOperationsService);
    getBinaryName$(binaryUrl: any): Observable<string>;
    getBaseVersionAndPatches$(baseVersion: any): Observable<IResultList<IManagedObject> | {
        data: ({
            c8y_Firmware: {
                version: any;
                url: any;
            };
        } & IManagedObject)[];
    }>;
    getPatchVersionsCount$(baseVersion: FirmwareBinary): Observable<number>;
    selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<VersionOrPatchComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<VersionOrPatchComponent, "c8y-version-or-patch-step", never, { "selected": "selected"; }, { "versionOrPatch": "versionOrPatch"; }, never, never>;
}

//# sourceMappingURL=version-or-patch.component.d.ts.map