import { OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup, ValidationErrors, Validator } from '@angular/forms';
import { OperationSchedule } from './operation-schedule.interface';
export declare class OperationSchedulerComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {
    private formBuilder;
    set _minutesAhead(minutes: number);
    set _delayConfig(config: {
        seconds: number;
        milliseconds: number;
    });
    placeholder: string;
    fgOperationScheduler: FormGroup;
    minDate: Date;
    minDelay: number;
    delayErrors: ValidationErrors;
    pickerErrors: ValidationErrors;
    private readonly DELAY_SECONDS_DEFAULT;
    private readonly DELAY_MILLISECONDS_DEFAULT;
    private readonly MINUTES_AHEAD_DEFAULT;
    private delaySeconds;
    private delayMilliseconds;
    private minutesAhead;
    private currentUnit;
    private delayInSeconds;
    private initialDate;
    private subscription;
    private onChange;
    private onTouched;
    private onValidatorChanged;
    constructor(formBuilder: FormBuilder);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: OperationSchedule): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    validate(): ValidationErrors;
    registerOnValidatorChange(fn: any): void;
    markAsTouched(): void;
    convertDelayHandler(unit: string): void;
    emitData(data: {
        delayInSeconds: number;
        picker: Date;
        time?: Date;
        delay?: number;
    }): void;
    private convertDelay;
    private combineDateAndTime;
    private dateValidation;
    private timeValidation;
}
