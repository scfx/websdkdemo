{"version":3,"file":"bulk-operation-list-item.component.d.ts","sources":["bulk-operation-list-item.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport { AlertService, ListItemComponent, ModalService } from '@c8y/ngx-components';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nexport declare class BulkOperationListItemComponent implements OnInit, OnChanges {\n    private bulkOperationsService;\n    private modal;\n    private alert;\n    private bsModalService;\n    bulkOperation: Partial<IOperationBulk>;\n    detailsCollapsed: boolean;\n    readOnly: boolean;\n    showFailedOperation: EventEmitter<any>;\n    reload: EventEmitter<any>;\n    listItem: ListItemComponent;\n    iconClass: string;\n    finishDate: number;\n    refreshLoading: boolean;\n    bulkOperationGeneralStatus: typeof OperationBulkGeneralStatus;\n    bulkOperationStatusOptions: IStatusOption[];\n    bsModalRef: BsModalRef;\n    finishDatePopoverText: string;\n    progressBarClass: string;\n    progressBarColor: string;\n    progressBarStatus: number;\n    constructor(bulkOperationsService: BulkOperationsService, modal: ModalService, alert: AlertService, bsModalService: BsModalService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    getIconClass(): string;\n    calculateFinishDateMs(): number;\n    progressBarProgressFn(): number;\n    setProgressBar(): void;\n    editSchedule(): void;\n    cancelBulkOperation(): Promise<void>;\n    retryFailedOperation(): void;\n    setToSuccessful(): Promise<void>;\n    openFailedOperation(failedParentId: any): void;\n    isStatusScheduled(): boolean;\n    isStatusExecutingOrExecutingWithError(): boolean;\n    allOperationsCreated(): boolean;\n    isStatusCanceled(): boolean;\n    isStatusFailed(): boolean;\n}\n"]}