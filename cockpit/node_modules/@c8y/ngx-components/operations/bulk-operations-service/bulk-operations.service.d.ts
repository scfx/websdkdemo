import { Location } from '@angular/common';
import { InjectionToken } from '@angular/core';
import { Subject } from 'rxjs';
import { IdReference, IManagedObject, InventoryService, IOperation, IOperationBulk, IResult, OperationBulkService, OperationService } from '@c8y/client';
import { OperationDetails } from './operation-details.model';
import { OperationType } from './operation-type.model';
import { BulkOperationType } from './bulk-operation.model';
import * as ɵngcc0 from '@angular/core';
export declare const baseUrl = "devicecontrol/bulk/creation/";
export declare const HOOK_LIST_BULK_TYPE: InjectionToken<OperationType | OperationType[]>;
export declare class BulkOperationsService {
    private operationBulkService;
    private operationService;
    private inventoryService;
    private location;
    readonly DD_LOW_COUNT: number;
    firmwareId: Subject<IdReference>;
    private bulkTypes;
    constructor(operationBulkService: OperationBulkService, operationService: OperationService, inventoryService: InventoryService, location: Location, bulkTypes: Array<OperationType | OperationType[]>);
    getBulkOperations(customFilter?: {}): Promise<import("@c8y/client").IResultList<IOperationBulk>>;
    getBulkOperationById(bulkOperationId: string | number): Promise<IResult<IOperationBulk>>;
    createBulkOperation(bulkOperation: Partial<IOperationBulk>): Promise<IResult<IOperationBulk>>;
    deleteBulkOperation(bulkOperationId: any): Promise<IResult<null>>;
    updateBulkOperation(bulkOperation: Partial<IOperationBulk>): Promise<IResult<IOperationBulk>>;
    getOperation(id: string): Promise<IResult<IOperation>>;
    returnToBulkOperationOverview(): void;
    setBulkTypes(list: OperationType[]): void;
    getBulkTypes(): OperationType[];
    setFirmwareId(id: IdReference): void;
    createGroup(deviceQueryDataString: string): Promise<IResult<IManagedObject>>;
    scheduleBulkOperation(deviceQueryString: string, details: OperationDetails): Promise<void>;
    getSingleOperationsByStatus(status: any, bulkOperationId: any): Promise<import("@c8y/client").IResultList<IOperation>>;
    createSingleOperation(operation: IOperation): Promise<IResult<IOperation>>;
    updateSingleOperation(partialUpdateObject: Partial<IOperation>): Promise<IResult<IOperation>>;
    getManagedObject(deviceId: IdReference): Promise<IResult<IManagedObject>>;
    retrieveBulkOperationType(operation: IOperation): BulkOperationType;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<BulkOperationsService, [null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<BulkOperationsService>;
}

//# sourceMappingURL=bulk-operations.service.d.ts.map