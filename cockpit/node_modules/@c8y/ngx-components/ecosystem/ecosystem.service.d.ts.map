{"version":3,"file":"ecosystem.service.d.ts","sources":["ecosystem.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ApplicationService, ApplicationType, IApplication, IApplicationBinary, IdReference, IFetchResponse, IResult, IResultList, TenantService } from '@c8y/client';\nimport { AlertService, AppStateService, HumanizeAppNamePipe, ModalService, ZipService } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ApplicationState } from './ecosystem.model';\nexport declare class EcosystemService {\n    private modal;\n    private alertService;\n    private humanizeAppName;\n    private translateService;\n    private applicationService;\n    private appStateService;\n    private zipService;\n    private tenantService;\n    appDeleted: EventEmitter<IApplication>;\n    progress: BehaviorSubject<number>;\n    private appsGroupedByContextPath;\n    private xhr;\n    constructor(modal: ModalService, alertService: AlertService, humanizeAppName: HumanizeAppNamePipe, translateService: TranslateService, applicationService: ApplicationService, appStateService: AppStateService, zipService: ZipService, tenantService: TenantService);\n    getUniqueAppConfig(srcApp: IApplication, existingApps: IApplication[]): IApplication;\n    getApplication(appId: IdReference): IApplication;\n    getApplications(customFilter?: any): Promise<IResultList<IApplication>>;\n    getMicroservices(): Promise<IApplication[]>;\n    getWebApplications(customFilter?: any): Promise<IApplication[]>;\n    getFeatureApplications(customFilter?: any): Promise<IApplication[]>;\n    getPackageApplications(customFilter?: any): Promise<IApplication[]>;\n    isMicroserviceHostingAllowed(): Promise<boolean>;\n    canOpenAppInBrowser(app: IApplication): boolean;\n    canDeleteApp(app: IApplication): boolean;\n    isOwner(app: IApplication): boolean;\n    isFeature(app: IApplication): boolean;\n    isMicroservice(app: IApplication): boolean;\n    isExternal(app: IApplication): boolean;\n    isPackage(app: IApplication): boolean;\n    cancelAppCreation(app: IApplication): void;\n    updateUploadProgress(event: any): void;\n    setAppActiveVersion(app: IApplication, activeVersionId: string): Promise<IApplication>;\n    getHumanizedAppName(app: IApplication): Promise<string>;\n    createConfig(app: IApplication, formGroupValue: FormGroup): Partial<FormGroup>;\n    updateAppManifest(application: IApplication, sourcePackage: IApplication): Promise<{\n        res: IFetchResponse;\n        data: any;\n    }>;\n    listArchives(appId: string | number | IApplication): Promise<IApplicationBinary[]>;\n    deleteArchive(archive: IApplicationBinary, app: IApplication): Promise<void>;\n    downloadArchive(app: IApplication, archive: IApplicationBinary): Promise<void>;\n    updateApp(app: IApplication, deleteOnFailure?: boolean): Promise<IResult<IApplication>>;\n    deleteApp(app: IApplication): Promise<void>;\n    checkIfSubscribed(app: IApplication): Promise<boolean>;\n    subscribeApp(app: IApplication): Promise<void>;\n    unsubscribeApp(app: IApplication): Promise<void>;\n    isValidAppType(archive: File, appType: ApplicationType): Promise<boolean>;\n    uploadArchiveToApp(archive: File, app: IApplication): Promise<IApplication>;\n    createAppForArchive(archive: any, isPackageTypeArchive?: boolean): Promise<IApplication>;\n    reactivateArchive(app: IApplication): Promise<void>;\n    removeOldestArchive(app: IApplication, archives: IApplicationBinary[]): Promise<void>;\n    getAppState(app: IApplication): ApplicationState;\n    isApplicationPackage(app: IApplication): boolean;\n    isPluginsPackage(app: IApplication): boolean;\n    isUnpacked(app: IApplication): boolean;\n    hasExports(app: IApplication): boolean;\n    isApplication(app: IApplication): boolean;\n    isCustomMicroservice(app: IApplication): boolean;\n    isOverwrittenByCustomApp(app: IApplication): Promise<boolean>;\n    private getAppKey;\n    private getContextPath;\n    private removeForbiddenCharacters;\n    private isCurrentApp;\n    private getCumulocityJson;\n    private getAppType;\n    private getBinary;\n    private getBaseNameFromArchiveOrAppModel;\n    private checkIfAppNameKeyPathExists;\n    private removeAppProperties;\n}\n"]}