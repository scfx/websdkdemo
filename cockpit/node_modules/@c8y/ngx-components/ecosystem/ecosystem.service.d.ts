import { EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ApplicationService, ApplicationType, IApplication, IApplicationBinary, IdReference, IFetchResponse, IResult, IResultList, TenantService } from '@c8y/client';
import { AlertService, AppStateService, HumanizeAppNamePipe, ModalService, ZipService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { ApplicationState } from './ecosystem.model';
import * as ɵngcc0 from '@angular/core';
export declare class EcosystemService {
    private modal;
    private alertService;
    private humanizeAppName;
    private translateService;
    private applicationService;
    private appStateService;
    private zipService;
    private tenantService;
    appDeleted: EventEmitter<IApplication>;
    progress: BehaviorSubject<number>;
    private appsGroupedByContextPath;
    private xhr;
    constructor(modal: ModalService, alertService: AlertService, humanizeAppName: HumanizeAppNamePipe, translateService: TranslateService, applicationService: ApplicationService, appStateService: AppStateService, zipService: ZipService, tenantService: TenantService);
    getUniqueAppConfig(srcApp: IApplication, existingApps: IApplication[]): IApplication;
    getApplication(appId: IdReference): IApplication;
    getApplications(customFilter?: any): Promise<IResultList<IApplication>>;
    getMicroservices(): Promise<IApplication[]>;
    getWebApplications(customFilter?: any): Promise<IApplication[]>;
    getFeatureApplications(customFilter?: any): Promise<IApplication[]>;
    getPackageApplications(customFilter?: any): Promise<IApplication[]>;
    isMicroserviceHostingAllowed(): Promise<boolean>;
    canOpenAppInBrowser(app: IApplication): boolean;
    canDeleteApp(app: IApplication): boolean;
    isOwner(app: IApplication): boolean;
    isFeature(app: IApplication): boolean;
    isMicroservice(app: IApplication): boolean;
    isExternal(app: IApplication): boolean;
    isPackage(app: IApplication): boolean;
    cancelAppCreation(app: IApplication): void;
    updateUploadProgress(event: any): void;
    setAppActiveVersion(app: IApplication, activeVersionId: string): Promise<IApplication>;
    getHumanizedAppName(app: IApplication): Promise<string>;
    createConfig(app: IApplication, formGroupValue: FormGroup): Partial<FormGroup>;
    updateAppManifest(application: IApplication, sourcePackage: IApplication): Promise<{
        res: IFetchResponse;
        data: any;
    }>;
    listArchives(appId: string | number | IApplication): Promise<IApplicationBinary[]>;
    deleteArchive(archive: IApplicationBinary, app: IApplication): Promise<void>;
    downloadArchive(app: IApplication, archive: IApplicationBinary): Promise<void>;
    updateApp(app: IApplication, deleteOnFailure?: boolean): Promise<IResult<IApplication>>;
    deleteApp(app: IApplication): Promise<void>;
    checkIfSubscribed(app: IApplication): Promise<boolean>;
    subscribeApp(app: IApplication): Promise<void>;
    unsubscribeApp(app: IApplication): Promise<void>;
    isValidAppType(archive: File, appType: ApplicationType): Promise<boolean>;
    uploadArchiveToApp(archive: File, app: IApplication): Promise<IApplication>;
    createAppForArchive(archive: any, isPackageTypeArchive?: boolean): Promise<IApplication>;
    reactivateArchive(app: IApplication): Promise<void>;
    removeOldestArchive(app: IApplication, archives: IApplicationBinary[]): Promise<void>;
    getAppState(app: IApplication): ApplicationState;
    isApplicationPackage(app: IApplication): boolean;
    isPluginsPackage(app: IApplication): boolean;
    isUnpacked(app: IApplication): boolean;
    hasExports(app: IApplication): boolean;
    isApplication(app: IApplication): boolean;
    isCustomMicroservice(app: IApplication): boolean;
    isOverwrittenByCustomApp(app: IApplication): Promise<boolean>;
    private getAppKey;
    private getContextPath;
    private removeForbiddenCharacters;
    private isCurrentApp;
    private getCumulocityJson;
    private getAppType;
    private getBinary;
    private getBaseNameFromArchiveOrAppModel;
    private checkIfAppNameKeyPathExists;
    private removeAppProperties;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<EcosystemService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<EcosystemService>;
}

//# sourceMappingURL=ecosystem.service.d.ts.map