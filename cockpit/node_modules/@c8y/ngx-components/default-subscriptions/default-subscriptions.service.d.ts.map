{"version":3,"file":"default-subscriptions.service.d.ts","sources":["default-subscriptions.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IApplication, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';\nimport { HumanizeAppNamePipe } from '@c8y/ngx-components';\nimport { DefaultSubscriptions } from './default-subscriptions.model';\nexport declare class DefaultSubscriptionsService {\n    private applicationService;\n    private tenantService;\n    private tenantOptionsService;\n    private humanizeAppNamePipe;\n    constructor(applicationService: ApplicationService, tenantService: TenantService, tenantOptionsService: TenantOptionsService, humanizeAppNamePipe: HumanizeAppNamePipe);\n    /**\n     * Gets the list of applications which can be used in default subscriptions, i.e.:\n     * - current tenant's all own applications,\n     * - inherited applications, which do not have the same names as current tenant's own apps.\n     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.\n     * @returns The list of applications, which can be used in default subscriptions.\n     */\n    getSubscribableTenantApps(): Promise<IApplication[]>;\n    /**\n     * Gets the default subscriptions configuration inherited from parent tenant.\n     * @returns The default subscriptions object with settings from parent tenant.\n     */\n    getDefaultSubscriptionsEvaluatedFromParentTenant(): Promise<DefaultSubscriptions>;\n    /**\n     * Gets the default subscriptions configuration from the current tenant.\n     * @returns The default subscriptions object with settings from the current tenant.\n     */\n    getDefaultSubscriptionsFromCurrentTenant(): Promise<DefaultSubscriptions>;\n    /**\n     * Saves given default subscriptions configuration to the current tenant\n     * (either sets, updates, or deletes corresponding tenant options).\n     * @param defaultSubscriptions The default subscriptions configuration to be saved.\n     */\n    saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions: DefaultSubscriptions): Promise<void>;\n    /**\n     * Gets default subscriptions in the context of current or parent tenant.\n     * @param contextTenant Tells whether to use current or parent tenant as context.\n     */\n    private getDefaultSubscriptions;\n    private getTenantOptions;\n    private saveOnCreationSubscriptions;\n    private saveOnUpgradeSubscriptions;\n    private getTenantOption;\n    private setTenantOption;\n    private unsetTenantOption;\n    private namesToPartialApps;\n    private partialAppsListToAppsNames;\n    private partialAppsToMicroservicesNames;\n}\n"]}