import { IManagedObject } from '@c8y/client';
import { SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { Pagination } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
export declare class AssetSearchService extends SubAssetsService {
    protected GRID_CONFIG_STORAGE_KEY: string;
    protected DEFAULT_PAGE_SIZE: number;
    private readonly FRAGMENTS_FOR_NO_DEVICE;
    private readonly TYPES_FOR_NO_DEVICE;
    private readonly DEVICE_FRAGMENT_TYPE;
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    filterOnlyAssets(data: IManagedObject[]): IManagedObject[];
    buildCombinedRootQueryFilter(columns: any, pagination: any): string;
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     * @param pagination The currently used pagination.
     */
    search(term: string, pagination?: Pagination): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    private isRootDevice;
    private isAnyDevice;
    private hasFragmentOrTypeFromBlacklist;
    private hasTypeFromBlacklist;
    private hasFragmentFromBlacklist;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<AssetSearchService, never>;
}

//# sourceMappingURL=search.service.d.ts.map