(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@c8y/ngx-components/device-grid'),require('@c8y/ngx-components'),exports, require('@angular/core'), require('@c8y/ngx-components/device-grid'), require('@c8y/ngx-components'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/device-selector', ['@angular/core','@c8y/ngx-components/device-grid','@c8y/ngx-components','exports', '@angular/core', '@c8y/ngx-components/device-grid', '@c8y/ngx-components', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.c8y.ngxComponents.deviceGrid,global.c8y.ngxComponents,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = global.c8y["ngx-components"].operations || {}, global.c8y["ngx-components"].operations["device-selector"] = {}), global.ng.core, global.c8y["ngx-components"]["device-grid"], global.c8y["ngx-components"], global.rxjs, global.rxjs.operators));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, core, deviceGrid, ngxComponents, rxjs, operators) { 
var _c0 = function () { return []; };
'use strict';

    var DeviceSelectorComponent = /** @class */ (function () {
        function DeviceSelectorComponent() {
            this.typeColumn = new deviceGrid.TypeDeviceGridColumn();
            this.onDeviceQueryStringChange = new core.EventEmitter();
            this.columns = [
                new deviceGrid.StatusDeviceGridColumn(),
                new deviceGrid.NameDeviceGridColumn(),
                this.typeColumn,
                new deviceGrid.ModelDeviceGridColumn(),
                new deviceGrid.GroupDeviceGridColumn(),
                new deviceGrid.RegistrationDateDeviceGridColumn(),
                new deviceGrid.AlarmsDeviceGridColumn()
            ];
            this.unsubscribe$ = new rxjs.Subject();
        }
        DeviceSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.deviceTypes) {
                this.deviceTypes
                    .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.unsubscribe$))
                    .subscribe(function (types) {
                    _this.deviceGrid.updateFiltering([_this.typeColumn.name], {
                        type: types && types.length
                            ? ngxComponents.FilteringActionType.ApplyFilter
                            : ngxComponents.FilteringActionType.ResetFilter,
                        payload: types
                            ? {
                                filteringModifier: {
                                    externalFilterQuery: {
                                        types: types
                                    }
                                }
                            }
                            : undefined
                    });
                });
            }
        };
        DeviceSelectorComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next(true);
            this.unsubscribe$.complete();
        };
DeviceSelectorComponent.ɵfac = function DeviceSelectorComponent_Factory(t) { return new (t || DeviceSelectorComponent)(); };
DeviceSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceSelectorComponent, selectors: [["c8y-device-selector"]], viewQuery: function DeviceSelectorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(deviceGrid.DeviceGridComponent, 7);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.deviceGrid = _t.first);
    } }, inputs: { deviceTypes: "deviceTypes" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange" }, decls: 12, vars: 13, consts: [[3, "title", "columns", "actionControls", "infiniteScroll", "onDeviceQueryStringChange"], [1, "c8y-empty-state"], ["c8yIcon", "search"]], template: function DeviceSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-device-grid", 0);
        ɵngcc0.ɵɵlistener("onDeviceQueryStringChange", function DeviceSelectorComponent_Template_c8y_device_grid_onDeviceQueryStringChange_0_listener($event) { return ctx.onDeviceQueryStringChange.emit($event); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelement(3, "h1", 2);
        ɵngcc0.ɵɵelementStart(4, "div");
        ɵngcc0.ɵɵelementStart(5, "p");
        ɵngcc0.ɵɵelementStart(6, "strong");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "small");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 6, "Select target devices"))("columns", ctx.columns)("actionControls", ɵngcc0.ɵɵpureFunction0(12, _c0))("infiniteScroll", "auto");
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, "No matching devices."));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 10, "Refine your search terms"));
    } }, directives: [ɵngcc1.DeviceGridComponent, ɵngcc2.IconDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-selector',
                template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n"
            }]
    }], function () { return []; }, { onDeviceQueryStringChange: [{
            type: core.Output
        }], deviceGrid: [{
            type: core.ViewChild,
            args: [deviceGrid.DeviceGridComponent, { static: true }]
        }], deviceTypes: [{
            type: core.Input
        }] }); })();
        return DeviceSelectorComponent;
    }());
    DeviceSelectorComponent.propDecorators = {
        deviceGrid: [{ type: core.ViewChild, args: [deviceGrid.DeviceGridComponent, { static: true },] }],
        deviceTypes: [{ type: core.Input }],
        onDeviceQueryStringChange: [{ type: core.Output }]
    };

    /**
     * This module provides a component for selecting devices based on filters.
     */
    var DeviceSelectorModule = /** @class */ (function () {
        function DeviceSelectorModule() {
        }
DeviceSelectorModule.ɵfac = function DeviceSelectorModule_Factory(t) { return new (t || DeviceSelectorModule)(); };
DeviceSelectorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceSelectorModule });
DeviceSelectorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ngxComponents.CoreModule, deviceGrid.DeviceGridModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorModule, [{
        type: core.NgModule,
        args: [{
                imports: [ngxComponents.CoreModule, deviceGrid.DeviceGridModule],
                declarations: [DeviceSelectorComponent],
                exports: [DeviceSelectorComponent]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceSelectorModule, { declarations: [DeviceSelectorComponent], imports: [ɵngcc2.CoreModule, ɵngcc1.DeviceGridModule], exports: [DeviceSelectorComponent] }); })();
        return DeviceSelectorModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DeviceSelectorComponent = DeviceSelectorComponent;
    exports.DeviceSelectorModule = DeviceSelectorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-operations-device-selector.umd.js.map