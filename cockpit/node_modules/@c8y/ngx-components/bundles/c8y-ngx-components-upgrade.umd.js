(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@c8y/ngx-components'),require('@ngx-translate/core'),require('@angular/router'),require('@c8y/ngx-components/context-dashboard'),require('@angular/common'),exports, require('@c8y/ngx-components'), require('rxjs'), require('rxjs/operators'), require('lodash-es'), require('@angular/router'), require('@angular/core'), require('@c8y/client'), require('angular'), require('@angular/upgrade/static'), require('@c8y/ngx-components/app-logs'), require('@c8y/ngx-components/api'), require('@c8y/ngx-components/operations/bulk-operations-list'), require('@ngx-translate/core'), require('@c8y/ngx-components/context-dashboard'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/upgrade', ['@angular/core','@c8y/ngx-components','@ngx-translate/core','@angular/router','@c8y/ngx-components/context-dashboard','@angular/common','exports', '@c8y/ngx-components', 'rxjs', 'rxjs/operators', 'lodash-es', '@angular/router', '@angular/core', '@c8y/client', 'angular', '@angular/upgrade/static', '@c8y/ngx-components/app-logs', '@c8y/ngx-components/api', '@c8y/ngx-components/operations/bulk-operations-list', '@ngx-translate/core', '@c8y/ngx-components/context-dashboard', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.c8y.ngxComponents,global.ngxTranslate.core,global.ng.router,global.c8y.ngxComponents.contextDashboard,global.ng.common,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].upgrade = {}), global.c8y["ngx-components"], global.rxjs, global.rxjs.operators, global.lodashEs, global.ng.router, global.ng.core, global.client, global.angular, global.ng.upgrade["static"], global.c8y["ngx-components"]["app-logs"], global.c8y["ngx-components"].api, global.c8y["ngx-components"].operations["bulk-operations-list"], global.core$1, global.c8y["ngx-components"]["context-dashboard"], global.ng.common));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,exports, ngxComponents, rxjs, operators, lodashEs, router, core, client, angular, _static, appLogs, api, bulkOperationsList, core$1, contextDashboard, common) { 
var _c0 = ["templateCopy"];
function CopyActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function CopyActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.copyDashboard(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵelementStart(4, "span", 3);
    ɵngcc0.ɵɵtext(5, "Copy dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Copy dashboard"));
} }
var _c1 = ["templatePaste"];
function PasteActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function PasteActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.pasteDashboard(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵelementStart(4, "span", 3);
    ɵngcc0.ɵɵtext(5, "Paste dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6, "\u00A0");
    ɵngcc0.ɵɵelementStart(7, "span");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Paste dashboard"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1("\"", ctx_r1.dashboardName, "\"");
} }
'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var angular__namespace = /*#__PURE__*/_interopNamespace(angular);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ViewContextLegacyParameter;
    (function (ViewContextLegacyParameter) {
        ViewContextLegacyParameter["Device"] = "deviceId";
        ViewContextLegacyParameter["Group"] = "groupId";
        ViewContextLegacyParameter["User"] = "userId";
        ViewContextLegacyParameter["Application"] = "applicationId";
        ViewContextLegacyParameter["Microservice"] = "applicationId";
        ViewContextLegacyParameter["SubscribedApplications"] = "applicationId";
        ViewContextLegacyParameter["Tenant"] = "tenantId";
    })(ViewContextLegacyParameter || (ViewContextLegacyParameter = {}));
    function c8yViewsProvider($routeProvider, c8yTabsProvider, c8yPathUtils) {
        'ngInject';
        var viewMap = {};
        var contextViews = new rxjs.ReplaySubject();
        return {
            when: when,
            $get: function () {
                return {
                    contextViews: contextViews,
                    when: function (path, cfg) {
                        return when(path, cfg, true);
                    },
                    getByPath: getByPath,
                    prefixWithSlash: prefixWithSlash
                };
            }
        };
        /**
         * @ngdoc function
         * @name when
         * @methodOf c8y.ui.provider:c8yViewsProvider
         *
         * @description
         * Defines a view for given route.
         * If multiple views are defined for a single route then there will be a separate tab for each view available when user visits that route.
         *
         * @param path Target route.
         * @param cfg View configuration object with the following properties:
         *
         * - **name** - `string` - View's name (in case of multiple views at single route this will be displayed as tab's title).
         * - **priority** - `integer` - View's priority (in case of multiple views at single route this will determine the position of view's tab in the tabs stack).
         * - **icon** - `string` - Font Awesome icon name for the view (displayed on the tab's header).
         * - **showIf** - `function` - Function returning boolean value indicating whether to show a tab for the view or not.
         * - **templateUrl** - `string` - Path to the template to use for displaying the view.
         *
         * You can also provide other view options - the same as available for standard {@link https://docs.angularjs.org/api/ngRoute/provider/$routeProvider $routeProvider} in AngularJS.
         *
         * @example
         * The following example demonstrates how to add a new view to device details route
         * (which will be displayed as a tab if other views are assigned to the same route):
         * <pre>
         *   c8yViewsProvider.when('/device/:deviceId', {
         *     name: 'Tracking',
         *     templateUrl: ':::PLUGIN_PATH:::/views/index.html',
         *     icon: 'crosshairs',
         *     showIf: ['$routeParams', 'c8yDevices', function ($routeParams, c8yDevices) {
         *       var deviceId = $routeParams.deviceId;
         *       return c8yDevices.detailCached(deviceId).then(function (res) {
         *         var device = res.data;
         *         return device && (device.c8y_MotionTracking || device.c8y_Geofence);
         *       });
         *     }]
         *   });
         * </pre>
         */
        function when(path, cfg, runPhase) {
            var newPath = prefixWithSlash(path);
            cfg.resolve = cfg.resolve || {};
            // eslint-disable-next-line no-underscore-dangle
            cfg.resolve.__c8y_locales = [
                'c8yLocales',
                function (c8yLocales) {
                    return c8yLocales.initDone;
                }
            ];
            var currentCfg = viewMap[newPath];
            var originalPath = newPath;
            if (!cfg.name) {
                // console.warn('View name not defined');
            }
            if (!currentCfg) {
                viewMap[newPath] = [];
                currentCfg = viewMap[newPath];
            }
            var upgradedContext = Object.keys(ngxComponents.ViewContext)
                .map(function (key) { return ({
                key: key,
                isUpgrade: prefixWithSlash(ngxComponents.ViewContext[key].replace('id', ViewContextLegacyParameter[key])) === path
            }); })
                .find(function (_a) {
                var isUpgrade = _a.isUpgrade;
                return isUpgrade;
            });
            if (upgradedContext) {
                currentCfg.push(cfg);
                cfg.path = newPath;
                var p = c8yPathUtils.appendSegment(originalPath.replace(path, ''), cfg.name);
                contextViews.next(Object.assign(Object.assign({}, cfg), { path: cfg.name ? p.substring(1) : '', contextKey: upgradedContext.key, runPhase: runPhase }));
                cfg.showIf = undefined;
                if (cfg.name) {
                    cfg.path = c8yPathUtils.appendSegment(originalPath, cfg.name);
                }
            }
            else {
                if (currentCfg.length === 1) {
                    var _a = __read(currentCfg, 1), existingConfig = _a[0];
                    existingConfig.path = c8yPathUtils.appendSegment(originalPath, existingConfig.name);
                    existingConfig.tab = createTab(originalPath, existingConfig);
                    $routeProvider.when(existingConfig.path, existingConfig);
                }
                currentCfg.push(cfg);
                cfg.path = newPath;
                if (currentCfg.length > 1) {
                    cfg.path = c8yPathUtils.appendSegment(originalPath, cfg.name);
                    createTab(originalPath, cfg);
                    $routeProvider.when(prefixWithSlash(originalPath), {
                        resolveRedirectTo: function ($route, $q, c8yUiUtil, c8yTabs, gettextCatalog) {
                            'ngInject';
                            var sortedCurrentCfg = c8yTabsProvider.sortTabsViews(currentCfg, gettextCatalog);
                            var params = $route.current.pathParams;
                            return $q
                                .all(lodashEs.map(sortedCurrentCfg, lodashEs.unary(c8yUiUtil.configureVisibility)))
                                .then(function (views) {
                                var first = lodashEs.find(views, 'show');
                                var url = first.path;
                                lodashEs.forEach(params, function (val, key) {
                                    url = url.replace(":" + key, val);
                                });
                                c8yTabs.redirectedViewPath = url;
                                return url;
                            });
                        }
                    });
                }
            }
            return $routeProvider.when(prefixWithSlash(cfg.path), cfg);
        }
        function getByPath(path) {
            return viewMap[prefixWithSlash(path)];
        }
        function createTab(path, cfg) {
            c8yTabsProvider.addTab(path, cfg);
        }
        function prefixWithSlash(path) {
            var prefix = lodashEs.startsWith(path, '/') ? '' : '/';
            return prefix + path;
        }
    }

    var BridgeService = /** @class */ (function () {
        function BridgeService(injector, appState, router, ngZone, routerService, actionService) {
            this.injector = injector;
            this.appState = appState;
            this.router = router;
            this.ngZone = ngZone;
            this.routerService = routerService;
            this.actionService = actionService;
            this.$liveTabs = new rxjs.BehaviorSubject([]);
            this.fixE2eIssues();
            this.$ng1RouteChangeSuccess = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeSuccess');
            this.$ng1RouteChangeStart = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeStart');
            this.hookLanguage();
            this.hookTabs();
            this.hookNavigator();
            this.hookUserMenu();
            this.hookViewProvider();
            this.router.initialNavigation();
            this.ng1Routes();
        }
        BridgeService.prototype.hookViewProvider = function () {
            var _this = this;
            var c8yViews = this.injector.get('c8yViews');
            // fix to trigger an angularjs route change success
            // event on context route match to make legacy
            // view-providers resolve.
            c8yViews.when('/device/:id', {
                template: ''
            });
            c8yViews.when('/group/:id', {
                template: ''
            });
            c8yViews.contextViews.subscribe(function (cfg) { return _this.addRoute(cfg); });
        };
        BridgeService.prototype.addRoute = function (cfg) {
            var _this = this;
            this.routerService.addRoute({
                label: cfg.label || cfg.name,
                path: cfg.path,
                icon: cfg.icon,
                context: ngxComponents.ViewContext[cfg.contextKey],
                priority: cfg.priority,
                component: ngxComponents.EmptyComponent,
                data: {
                    showIf: cfg.showIf
                        ? function (ngxRoute) {
                            var _a;
                            var params = Object.assign(Object.assign({}, ngxRoute.params), (_a = {}, _a[ViewContextLegacyParameter[cfg.contextKey]] = ngxRoute.params.id, _a));
                            var showIfResult = _this.injector.invoke(cfg.showIf, undefined, {
                                $routeParams: params
                            });
                            // make sure showIf result is a promise with boolean result:
                            return _this.injector.get('$q').when(showIfResult).then(Boolean);
                        }
                        : undefined
                }
            });
            if (cfg.runPhase) {
                this.routerService.refresh();
            }
        };
        BridgeService.prototype.ng1Routes = function () {
            var template = '';
            var fallbackRoutes = [];
            // tslint:disable-next-line: forin
            for (var context in ngxComponents.ViewContext) {
                var path = ngxComponents.ViewContext[context].match(/(\w+)\//)[1];
                var regexp = new RegExp("^/" + path + "/(?:([^/]+)).*$");
                fallbackRoutes.push({
                    keys: [{ name: ViewContextLegacyParameter[context], optional: false }],
                    regexp: regexp,
                    template: template
                });
            }
            /**
             * When asset detail routes (/device/:id,  /group/:id) are matched in Angular Router, ngRoute in
             * angular.js must also have matching generic routes so that the ids can be extracted from the paths and
             * injected in multiple calls (showIf, c8yActions, etc) as properties of $routeParams.
             *
             * The function in src/ngRoute/route.js (angular.js) where the routes are matched is called parseRoute(). This
             * function calls angular.forEach and in turn this function checks for the presence of a forEach method before
             * trying object key iteration.
             * By attaching a non enumerable forEach method to the routes object we guarantee that the fallback generic routes
             * are only matched after any other registered through $routeProvider.when.
             */
            var $route = this.injector.get('$route');
            Object.defineProperty($route.routes, 'forEach', {
                // make non enumerable
                value: function forEach(iterator, context) {
                    // tslint:disable-next-line: forin
                    for (var key in this) {
                        iterator.call(context, this[key], key, this);
                    }
                    fallbackRoutes.forEach(function (r) { return iterator.call(context, r); });
                }
            });
            /**
             * Some functions use the current context. As some parts are upgraded and some not, the following updates the
             * angularjs getContext function to resolve always the right context.
             */
            var c8yUiUtil = this.injector.get('c8yUiUtil');
            var _getContext = c8yUiUtil.getContext;
            this.router.events
                .pipe(operators.filter(function (event) { return event instanceof router.ActivationEnd; }))
                .subscribe(function (event) {
                if (event.snapshot.routeConfig.path === '**') {
                    c8yUiUtil.getContext = _getContext;
                }
                else if (event.snapshot.data && event.snapshot.data.context) {
                    c8yUiUtil.getContext = function () {
                        return {
                            context: event.snapshot.data.context.replace('/:id', ''),
                            id: event.snapshot.data.contextData.id
                        };
                    };
                }
                else {
                    c8yUiUtil.getContext = function () { return ({ context: null, id: null }); };
                }
            });
        };
        BridgeService.prototype.fixE2eIssues = function () {
            try {
                var ngZone_1 = this.ngZone;
                var Utils_1 = window.org.cometd.Utils;
                var timeoutFn_1 = Utils_1.setTimeout;
                // tslint:disable-next-line:only-arrow-functions
                Utils_1.setTimeout = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return ngZone_1.runOutsideAngular(function () { return timeoutFn_1.apply(Utils_1, args); });
                };
            }
            catch (e) {
                // do nothing
            }
            try {
                var ace_1 = window.ace;
                var editFn_1 = ace_1.edit;
                var ngZone_2 = this.ngZone;
                // tslint:disable-next-line:only-arrow-functions
                ace_1.edit = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return ngZone_2.runOutsideAngular(function () { return editFn_1.apply(ace_1, args); });
                };
            }
            catch (e) {
                // do nothing
            }
        };
        BridgeService.prototype.hookLanguage = function () {
            var _this = this;
            var first = true;
            this.appState
                .map(function (store) { return store.lang; })
                .subscribe(function (lang) {
                _this.injector.get('c8yLocales').switchToLanguage(lang);
                if (!first) {
                    _this.injector.get('$rootScope').$apply();
                }
                first = false;
            });
        };
        BridgeService.prototype.hookTabs = function () {
            var _this = this;
            // Just for instantiation of the c8yAction service
            this.injector.get('c8yActions');
            var $location = this.injector.get('$location');
            var c8yTabs = this.injector.get('c8yTabs');
            var liveTabs = [];
            c8yTabs.addTab = function (tab) {
                liveTabs.push(Object.assign(Object.assign({}, tab), { label: tab.label || tab.name, path: decodeURIComponent(tab.path) }));
                _this.$liveTabs.next(liveTabs);
            };
            this.$ng1RouteChangeStart.subscribe(function (e) {
                liveTabs = [];
                _this.$liveTabs.next(liveTabs);
            });
            this.$ng1RouteChangeSuccess.subscribe(function (e) {
                var path = $location.path();
                if (_this.router.url !== path) {
                    _this.router.navigate(path === '/' ? '' : path.split('/'), {
                        queryParams: $location.search(),
                        skipLocationChange: true
                    });
                }
                if (_this.actionService) {
                    _this.actionService.refresh();
                }
            });
            this.$routeChanges = this.$ng1RouteChangeSuccess.pipe(operators.merge(this.fromNg1Event(c8yTabs, c8yTabs.EVENT_UPDATE), rxjs.of(1)), operators.debounceTime(100));
        };
        BridgeService.prototype.hookNavigator = function () {
            this.navigationNodes$ = this.injector.get('c8yNavigator').rootNodes$;
        };
        BridgeService.prototype.getTabs = function () {
            var _this = this;
            var onlyVisible = function (_a) {
                var show = _a.show;
                return show;
            };
            var upgradeTab = function (tab) { return (Object.assign(Object.assign({}, tab), { label: tab.label || tab.name, path: decodeURIComponent(tab.path) })); };
            var routeTabs = this.$routeChanges.pipe(operators.switchMap(function () {
                var routes = _this.injector.get('c8yTabs').routeTabs;
                var visibilityPromise = Promise.all(routes.map(function (_a) {
                    var checkingVisibility = _a.checkingVisibility;
                    return checkingVisibility;
                }));
                return visibilityPromise.then(function () { return routes.filter(onlyVisible).map(upgradeTab); });
            }), operators.startWith([]));
            return rxjs.combineLatest(routeTabs, this.$liveTabs).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), route = _b[0], live = _b[1];
                return route.concat(live);
            }));
        };
        BridgeService.prototype.getQuickLinks = function () {
            var c8yQuickLinks = this.injector.get('c8yQuickLinks');
            return c8yQuickLinks.list();
        };
        BridgeService.prototype.getActionBarItems = function () {
            var c8yActionBar = this.injector.get('c8yActionBar');
            var $rootScope = this.injector.get('$rootScope');
            var getActionBarElements = function () { return c8yActionBar.elements.map(function (element) { return ({
                priority: element.getAttribute('action-bar-priority') || 0,
                template: element,
                placement: element.getAttribute('action-bar-position') || 'right'
            }); }); };
            return this.fromNg1Event($rootScope, 'c8yActionBarChanged').pipe(operators.startWith(1), operators.map(getActionBarElements));
        };
        BridgeService.prototype.getBreadcrumbs = function () {
            var $location = this.injector.get('$location');
            var path = $location.path();
            var c8yBreadcrumbs = this.injector.get('c8yBreadcrumbs');
            var breadcrumbs = c8yBreadcrumbs.get(path) || {};
            var breadcrumbsData = this.resolveBreadcrumbsData(breadcrumbs.data);
            return rxjs.from(breadcrumbsData).pipe(operators.map(function (value) {
                var liveBreadcrumbs = c8yBreadcrumbs.getLiveBreadcrumbs();
                value = value.concat(liveBreadcrumbs);
                return value.map(function (items) { return ({ items: items }); });
            }));
        };
        BridgeService.prototype.resolveBreadcrumbsData = function (data) {
            try {
                return this.injector.invoke(data);
            }
            catch (ex) {
                // empty
            }
            if (lodashEs.isArray(data)) {
                return rxjs.of([data]);
            }
            return rxjs.of([]);
        };
        BridgeService.prototype.getSearch = function () {
            var c8ySearch = this.injector.get('c8ySearch');
            return c8ySearch.list().map(function (item) {
                return {
                    icon: 'search',
                    name: item.name,
                    term: '',
                    onSearch: function () {
                        if (this.term) {
                            c8ySearch.search(this.term);
                        }
                    }
                };
            });
        };
        BridgeService.prototype.getActions = function () {
            var _this = this;
            var registeredActions = this.injector.get('c8yActions').registeredActions;
            return rxjs.of(registeredActions
                .filter(function (action) { return !action.hidden; })
                .map(function (action) { return ({
                // The priority was reversed: Aligned it to dashboard, high first, low last.
                priority: (action.priority || 0) * -1,
                label: action.text,
                icon: action.icon,
                disabled: action.disabled,
                action: function () {
                    _this.injector.invoke(action.action, action);
                }
            }); }));
        };
        BridgeService.prototype.fromNg1Event = function (obj, evt) {
            var stopListening;
            function add(handler) {
                stopListening = obj.$on(evt, handler);
            }
            return rxjs.fromEventPattern(add, function () { return stopListening(); });
        };
        BridgeService.prototype.hookUserMenu = function () {
            var userMenuService = this.injector.get('c8yUserMenuService');
            var c8yAccessDenied = this.injector.get('c8yAccessDenied');
            userMenuService.add({
                icon: 'access',
                priority: 10,
                label: ngxComponents.gettext('Access denied requests'),
                click: c8yAccessDenied.showAccessDeniedRequestsList
            });
        };
        return BridgeService;
    }());
    function bridgeServiceFactory(injector, appState, router, ngZone, routerService, actionService) {
        return new BridgeService(injector, appState, router, ngZone, routerService, actionService);
    }
    var bridgeServiceProvider = {
        provide: BridgeService,
        useFactory: bridgeServiceFactory,
        deps: ['$injector', ngxComponents.AppStateService, router.Router, core.NgZone, ngxComponents.RouterService, ngxComponents.ActionService]
    };

    var Ng1ActionBarFactoryService = /** @class */ (function () {
        function Ng1ActionBarFactoryService(bridge) {
            this.bridge = bridge;
            this.routeChanges$ = bridge.$routeChanges;
            this.$ng1RouteChangeSuccess = bridge.$ng1RouteChangeSuccess;
        }
        Ng1ActionBarFactoryService.prototype.get = function () {
            var _this = this;
            return this.routeChanges$.pipe(operators.switchMap(function (e) {
                return _this.bridge.getActionBarItems();
            }));
        };
Ng1ActionBarFactoryService.ɵfac = function Ng1ActionBarFactoryService_Factory(t) { return new (t || Ng1ActionBarFactoryService)(ɵngcc0.ɵɵinject(BridgeService)); };
Ng1ActionBarFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ActionBarFactoryService, factory: function (t) { return Ng1ActionBarFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ActionBarFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }]; }, null); })();
        return Ng1ActionBarFactoryService;
    }());
    Ng1ActionBarFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };

    var Ng1ActionFactoryService = /** @class */ (function () {
        function Ng1ActionFactoryService(bridge, tabs) {
            var _this = this;
            this.bridge = bridge;
            this.tabs = tabs;
            this.routeChanges$ = bridge.$routeChanges;
            this.$location = bridge.injector.get('$location');
            this.tabs.items$.subscribe(function (newTabs) { return _this.handleTabsRedirect(newTabs); });
        }
        Ng1ActionFactoryService.prototype.handleTabsRedirect = function (tabs) {
            /**
             * This function is doing the same process as function redirect in the file
             * modules/core/ui/navigation/tabs.provider.js
             * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
             */
            var redirectedTab = tabs.find(function (tab) { return tab.redirectedTo; });
            var _a = __read(tabs, 1), topPriorityTab = _a[0];
            if (redirectedTab && !topPriorityTab.redirectedTo) {
                this.$location.replace();
                this.$location.path(topPriorityTab.path);
                topPriorityTab.redirectedTo = true;
                redirectedTab.redirectedTo = false;
            }
        };
        Ng1ActionFactoryService.prototype.get = function () {
            return this.bridge.getActions();
        };
Ng1ActionFactoryService.ɵfac = function Ng1ActionFactoryService_Factory(t) { return new (t || Ng1ActionFactoryService)(ɵngcc0.ɵɵinject(BridgeService), ɵngcc0.ɵɵinject(ɵngcc1.TabsService)); };
Ng1ActionFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ActionFactoryService, factory: function (t) { return Ng1ActionFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ActionFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }, { type: ɵngcc1.TabsService }]; }, null); })();
        return Ng1ActionFactoryService;
    }());
    Ng1ActionFactoryService.ctorParameters = function () { return [
        { type: BridgeService },
        { type: ngxComponents.TabsService }
    ]; };

    var Ng1BreadcrumbFactoryService = /** @class */ (function () {
        function Ng1BreadcrumbFactoryService(bridge) {
            var _this = this;
            this.bridge = bridge;
            this.trigger = new rxjs.ReplaySubject(1);
            this.breadcrumbs = this.trigger.pipe(operators.debounceTime(100), operators.switchMap(function () {
                return _this.bridge.getBreadcrumbs();
            }));
        }
        Ng1BreadcrumbFactoryService.prototype.get = function () {
            this.trigger.next();
            return this.breadcrumbs;
        };
Ng1BreadcrumbFactoryService.ɵfac = function Ng1BreadcrumbFactoryService_Factory(t) { return new (t || Ng1BreadcrumbFactoryService)(ɵngcc0.ɵɵinject(BridgeService)); };
Ng1BreadcrumbFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1BreadcrumbFactoryService, factory: function (t) { return Ng1BreadcrumbFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1BreadcrumbFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }]; }, null); })();
        return Ng1BreadcrumbFactoryService;
    }());
    Ng1BreadcrumbFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };

    var Ng1NodesFactoryService = /** @class */ (function () {
        function Ng1NodesFactoryService(bridge) {
            this.bridge = bridge;
        }
        Ng1NodesFactoryService.prototype.get = function () {
            return this.bridge.navigationNodes$;
        };
Ng1NodesFactoryService.ɵfac = function Ng1NodesFactoryService_Factory(t) { return new (t || Ng1NodesFactoryService)(ɵngcc0.ɵɵinject(BridgeService)); };
Ng1NodesFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1NodesFactoryService, factory: function (t) { return Ng1NodesFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1NodesFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }]; }, null); })();
        return Ng1NodesFactoryService;
    }());
    Ng1NodesFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };

    var Ng1TabsFactoryService = /** @class */ (function () {
        function Ng1TabsFactoryService(bridge) {
            this.bridge = bridge;
            this.tabsObservable = bridge.getTabs();
        }
        Ng1TabsFactoryService.prototype.get = function () {
            return this.tabsObservable;
        };
Ng1TabsFactoryService.ɵfac = function Ng1TabsFactoryService_Factory(t) { return new (t || Ng1TabsFactoryService)(ɵngcc0.ɵɵinject(BridgeService)); };
Ng1TabsFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1TabsFactoryService, factory: function (t) { return Ng1TabsFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1TabsFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }]; }, null); })();
        return Ng1TabsFactoryService;
    }());
    Ng1TabsFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };

    var Ng1DocsFactoryService = /** @class */ (function () {
        function Ng1DocsFactoryService(bridge) {
            this.bridge = bridge;
            this.links = this.bridge.getQuickLinks();
            this.links.then(function (list) {
                list.map(function (el) {
                    el.type = el.type || 'quicklink';
                    return el;
                });
            });
        }
        Ng1DocsFactoryService.prototype.get = function () {
            return this.links;
        };
Ng1DocsFactoryService.ɵfac = function Ng1DocsFactoryService_Factory(t) { return new (t || Ng1DocsFactoryService)(ɵngcc0.ɵɵinject(BridgeService)); };
Ng1DocsFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1DocsFactoryService, factory: function (t) { return Ng1DocsFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1DocsFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: BridgeService }]; }, null); })();
        return Ng1DocsFactoryService;
    }());
    Ng1DocsFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };

    var AuthBridgeService = /** @class */ (function () {
        function AuthBridgeService(injector, basicAuth, fetchClient, appState, tenantUiService) {
            this.injector = injector;
            this.basicAuth = basicAuth;
            this.fetchClient = fetchClient;
            this.appState = appState;
            this.tenantUiService = tenantUiService;
            this.hookAuth();
        }
        AuthBridgeService.prototype.updateBasicAuth = function (credentials) {
            var headers = this.fetchClient.getFetchOptions({}).headers;
            if (headers.Authorization) {
                var token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                if (token) {
                    this.basicAuth.updateCredentials(credentials);
                    this.fetchClient.setAuth(this.basicAuth);
                }
            }
        };
        AuthBridgeService.prototype.hookAuth = function () {
            var _this = this;
            this.appState.currentUser.subscribe(function (u) {
                if (u) {
                    _this.injector.get('c8yAuth').headers = function () { return _this.fetchClient.getFetchOptions({}).headers; };
                    var headers = _this.fetchClient.getFetchOptions({}).headers;
                    if (headers.Authorization) {
                        var token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                        if (token) {
                            _this.setToken(token, headers.tfatoken);
                        }
                    }
                    else {
                        _this.setToken(undefined, headers.tfatoken, 'Oauth');
                    }
                    _this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
                }
                else {
                    _this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
                }
            });
        };
        AuthBridgeService.prototype.setToken = function (token, tfa, type) {
            if (type === void 0) { type = 'Basic'; }
            var c8yAuth = this.injector.get('c8yAuth');
            if (type === 'Basic') {
                c8yAuth.onSetToken({ token: token, type: type });
                if (tfa) {
                    c8yAuth.setTFAToken(tfa);
                }
            }
            else {
                c8yAuth.authReady();
            }
        };
        AuthBridgeService.prototype.getPreferredLoginOption = function () {
            return this.tenantUiService.getPreferredLoginOption(this.appState.state.loginOptions);
        };
        return AuthBridgeService;
    }());
    function authBridgeServiceFactory(injector, basicAuth, fetchClient, appState, tenantUiService) {
        return new AuthBridgeService(injector, basicAuth, fetchClient, appState, tenantUiService);
    }
    var authBridgeServiceProvider = {
        provide: AuthBridgeService,
        useFactory: authBridgeServiceFactory,
        deps: ['$injector', client.BasicAuth, client.FetchClient, ngxComponents.AppStateService, ngxComponents.TenantUiService]
    };

    var AbsoluteDateService = /** @class */ (function () {
        function AbsoluteDateService(datePipe) {
            this.datePipe = datePipe;
        }
        AbsoluteDateService.prototype.getFilter = function () {
            var _this = this;
            return function (value) { return _this.datePipe.transform(value); };
        };
        return AbsoluteDateService;
    }());
    function absoluteDateServiceFactory(datePipe) {
        return new AbsoluteDateService(datePipe).getFilter();
    }
    var absoluteDateServiceProvider = {
        provide: AbsoluteDateService,
        useFactory: absoluteDateServiceFactory,
        deps: [ngxComponents.DatePipe]
    };

    _static.setAngularJSGlobal(angular__namespace);
    var UpgradeModule = /** @class */ (function () {
        function UpgradeModule() {
        }
UpgradeModule.ɵfac = function UpgradeModule_Factory(t) { return new (t || UpgradeModule)(); };
UpgradeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: UpgradeModule });
UpgradeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        absoluteDateServiceProvider,
        bridgeServiceProvider,
        authBridgeServiceProvider,
        { provide: ngxComponents.HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
        { provide: ngxComponents.HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
        { provide: ngxComponents.HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
        { provide: ngxComponents.HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
        { provide: ngxComponents.HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
        { provide: ngxComponents.HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
    ], imports: [[ngxComponents.RouterModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UpgradeModule, [{
        type: core.NgModule,
        args: [{
                imports: [ngxComponents.RouterModule],
                exports: [],
                providers: [
                    absoluteDateServiceProvider,
                    bridgeServiceProvider,
                    authBridgeServiceProvider,
                    { provide: ngxComponents.HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UpgradeModule, { imports: [ɵngcc1.RouterModule] }); })();
        return UpgradeModule;
    }());

    function c8yAlertDecorator($delegate, $rootScope, $injector) {
        'ngInject';
        var e_1, _a;
        $delegate.add = function (alert) {
            $delegate.addAlert(transformAlert(alert));
        };
        $rootScope.$on('alert', function (evt, alert) {
            $delegate.addAlert(transformAlert(alert));
        });
        $rootScope.$on('message', function (evt, alert) {
            $delegate.addAlert(transformAlert(alert));
        });
        /**
         * Solution based on the: https://stackoverflow.com/questions/40102148/how-to-iterate-over-all-properties-in-objects-prototype-chain.
         * Problem came after switching to ES6, as all prototype properties of classes are non-enumerable.
         */
        var allNames = new Set();
        for (var o = $delegate; o !== Object.prototype; o = Object.getPrototypeOf(o)) {
            try {
                for (var _b = (e_1 = void 0, __values(Object.getOwnPropertyNames(o))), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var name = _c.value;
                    allNames.add(name);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        Array.from(allNames).forEach(function (property) {
            if (typeof $delegate[property] === 'function') {
                $delegate[property] = $delegate[property].bind($delegate);
            }
        });
        function transformAlert(alert) {
            var newAlert = Object.assign({}, alert);
            if (alert.onClose) {
                newAlert.onClose = function () {
                    $injector.invoke(alert.onClose);
                };
            }
            if (alert.onDetail) {
                newAlert.onDetail = function () {
                    $injector.invoke(alert.onDetail);
                };
            }
            return newAlert;
        }
        return $delegate;
    }

    var bootstrapComponent = _static.downgradeComponent({ component: ngxComponents.BootstrapComponent });
    var userTotpComponent = _static.downgradeComponent({ component: ngxComponents.UserTotpRevokeComponent });
    var appLogsAutoRefreshComponent = _static.downgradeComponent({
        component: appLogs.AppLogsAutoRefreshComponent
    });
    var dataGridComponent = _static.downgradeComponent({ component: ngxComponents.DataGridComponent });
    var loadingComponent = _static.downgradeComponent({ component: ngxComponents.LoadingComponent });
    var rangeDisplayComponent = _static.downgradeComponent({ component: ngxComponents.RangeDisplayComponent });
    var helpComponent = _static.downgradeComponent({ component: ngxComponents.HelpComponent });
    var highlightComponent = _static.downgradeComponent({
        component: ngxComponents.HighlightComponent,
        inputs: ['pattern', 'text']
    });

    var ServerMessagesService = /** @class */ (function () {
        function ServerMessagesService(translateService, patterns) {
            this.translateService = translateService;
            this.MESSAGE_PATTERNS = patterns;
        }
        ServerMessagesService.prototype.translate = function (s) {
            return this.translateService.instant(s);
        };
ServerMessagesService.ɵfac = function ServerMessagesService_Factory(t) { return new (t || ServerMessagesService)(ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(ngxComponents.HOOK_PATTERN_MESSAGES)); };
ServerMessagesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ServerMessagesService, factory: function (t) { return ServerMessagesService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ServerMessagesService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc2.TranslateService }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [ngxComponents.HOOK_PATTERN_MESSAGES]
            }] }]; }, null); })();
        return ServerMessagesService;
    }());
    ServerMessagesService.ctorParameters = function () { return [
        { type: core$1.TranslateService },
        { type: undefined, decorators: [{ type: core.Inject, args: [ngxComponents.HOOK_PATTERN_MESSAGES,] }] }
    ]; };

    var absoluteDateService = _static.downgradeInjectable(AbsoluteDateService);
    var bridgeService = _static.downgradeInjectable(BridgeService);
    var authBridgeService = _static.downgradeInjectable(AuthBridgeService);
    var appStateService = _static.downgradeInjectable(ngxComponents.AppStateService);
    var headerService = _static.downgradeInjectable(ngxComponents.HeaderService);
    var alertsService = _static.downgradeInjectable(ngxComponents.AlertService);
    var userMenuService = _static.downgradeInjectable(ngxComponents.UserMenuService);
    var apiService = _static.downgradeInjectable(api.ApiService);
    var docsService = _static.downgradeInjectable(ngxComponents.DocsService);
    var passwordService = _static.downgradeInjectable(ngxComponents.PasswordService);
    var translateService = _static.downgradeInjectable(core$1.TranslateService);
    var cachedLocaleDictionaryService = _static.downgradeInjectable(ngxComponents.CachedLocaleDictionaryService);
    var serverMessagesService = _static.downgradeInjectable(ServerMessagesService);
    var bulkOperationDetailsService = _static.downgradeInjectable(bulkOperationsList.BulkOperationDetailsService);
    var modalService = _static.downgradeInjectable(ngxComponents.ModalService);

    function gettextCatalogDecorator($delegate, $interpolate, c8yTranslate) {
        'ngInject';
        var gettextCatalog = $delegate;
        var originalGetString = angular__namespace.bind(gettextCatalog, gettextCatalog.getString);
        function newGetString(input, scope, context) {
            if (typeof input === 'string') {
                var translatedString = originalGetString(input, scope, context);
                var interpolatedString = scope ? $interpolate(input)(scope) : input;
                var stringToReturn = translatedString;
                if (translatedString && translatedString === interpolatedString) {
                    var translatedServerMessage = c8yTranslate.instant(interpolatedString);
                    stringToReturn = translatedServerMessage;
                }
                return stringToReturn;
            }
            return input;
        }
        gettextCatalog.getString = newGetString;
        return gettextCatalog;
    }

    function groupTypesHierarchyNavigatorDecorator($delegate, $q) {
        'ngInject';
        $delegate.loadAll = function () { return $q.when(); };
        $delegate.addGroupNavigation = function () { return $q.when(); };
        return $delegate;
    }

    function c8yNg1HttpInterceptor($q, c8yLoadingIndicator, c8yApiService) {
        'ngInject';
        function request(config) {
            var url = config.url, method = config.method;
            c8yApiService.onStart({ url: url, method: method, options: config });
            return config;
        }
        function requestError(rejection) {
            finishRequest(rejection);
            return $q.reject(rejection);
        }
        function response(res) {
            finishRequest(res);
            return res;
        }
        function responseError(rejection) {
            finishRequest(rejection);
            c8yLoadingIndicator.responseError(rejection);
            return $q.reject(rejection);
        }
        function finishRequest(res) {
            var _a = res.config, url = _a.url, method = _a.method;
            c8yApiService.onFinish({
                url: url,
                method: method,
                response: res,
                options: res.config
            });
        }
        return {
            request: request,
            requestError: requestError,
            response: response,
            responseError: responseError
        };
    }

    var NavigatorNodeRootLegacy = /** @class */ (function (_super) {
        __extends(NavigatorNodeRootLegacy, _super);
        function NavigatorNodeRootLegacy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NavigatorNodeRootLegacy.prototype.addRoot = function (nodeData) {
            var duplicate;
            if (nodeData.path === '') {
                nodeData.path = '/';
            }
            nodeData.label = nodeData.name;
            if (typeof nodeData.parent === 'object') {
                nodeData.parent.label = nodeData.parent.name;
            }
            if (nodeData.preventDuplicates) {
                duplicate = this.find(function (_a) {
                    var path = _a.path, parents = _a.parents, label = _a.label;
                    return path === nodeData.path &&
                        (label === nodeData.label) &&
                        parents.some(function (p) { return p.label === nodeData.parent; });
                });
                if (duplicate) {
                    duplicate.routerLinkExact = false;
                }
            }
            return duplicate || _super.prototype.addRoot.call(this, nodeData);
        };
        NavigatorNodeRootLegacy.prototype.createNode = function (node) {
            var newNode = _super.prototype.createNode.call(this, node);
            var update = newNode.update.bind(newNode);
            var root = this;
            return Object.defineProperties(lodashEs.assign(newNode, {
                realName: newNode.name || newNode.label,
                _parent: true,
                update: function (data) {
                    if (this._parent === undefined) {
                        // _parent was deleted somene instead to put this in root
                        root.addRoot(this);
                        // put it back so it can be deleted again
                        this._parent = true;
                    }
                    update(data);
                },
                addChild: function (nodeChild) {
                    this.add(root.createNode(nodeChild));
                }
            }), {
                label: {
                    get: function () {
                        return this.realName || '';
                    },
                    set: function (name) {
                        this.realName = name;
                    }
                },
                name: {
                    get: function () {
                        return this.realName || '';
                    },
                    set: function (name) {
                        this.realName = name;
                    }
                },
                show: {
                    get: function () {
                        return !this.hidden;
                    },
                    set: function (show) {
                        this.hidden = !show;
                    }
                }
            });
        };
        return NavigatorNodeRootLegacy;
    }(ngxComponents.NavigatorNodeRoot));

    // Just to hook into the bridge service
    function c8yNavigatorProvider() {
        var root = new NavigatorNodeRootLegacy();
        var rootNodesSubject = new rxjs.Subject();
        var conditionalNodes = [];
        var rootNodes$ = rootNodesSubject.pipe(operators.merge(rxjs.defer(function () { return rxjs.of(root.children); })));
        function addNavigation(nodes) {
            var nodeList = (Array.isArray(nodes) ? nodes : [nodes]);
            nodeList.forEach(function (node) {
                if (isConditional(node)) {
                    node.hidden = undefined;
                    conditionalNodes.push(node);
                }
                node.navNode = root.addRoot(node);
            });
            rootNodesSubject.next(root.children);
        }
        function removeNavigation(node) {
            var found = root.find(function (n) { return n === node; });
            if (found) {
                found.parents.forEach(function (p) { return p.remove(found); });
                rootNodesSubject.next(root.children);
            }
        }
        function findNode(node) {
            return root.find(node);
        }
        function isConditional(node) {
            return node.showIf || node.showIfPermissions || node.showIfContainsVisibleViews;
        }
        function $get($q, $injector) {
            'ngInject';
            // This avoids the circular dependency
            setTimeout(function () { return conditionalNodes.forEach(processShowIf); });
            function processShowIf(node) {
                var c8yUiUtil = $injector.get('c8yUiUtil');
                var visibilityPromises = [];
                var showIf = node.showIf, showIfPermissions = node.showIfPermissions, showIfContainsVisibleViews = node.showIfContainsVisibleViews;
                if (showIf) {
                    visibilityPromises.push($injector.invoke(showIf));
                }
                if (showIfContainsVisibleViews) {
                    visibilityPromises.push(viewsConditionalVisibility(node));
                }
                c8yUiUtil.configureVisibility({
                    showIf: function () { return $q.all(visibilityPromises).then(lodashEs.every); },
                    showIfPermissions: showIfPermissions
                }, 'visible')
                    .then(function (_a) {
                    var visible = _a.visible;
                    if (visible) {
                        node.navNode.update({
                            hidden: false,
                            showIf: null,
                            showIfPermission: null,
                            showIfContainsVisibleViews: null
                        });
                    }
                    else {
                        node.navNode.update({
                            hidden: true
                        });
                    }
                });
            }
            function viewsConditionalVisibility(node) {
                var c8yUiUtil = $injector.get('c8yUiUtil');
                var c8yViews = $injector.get('c8yViews');
                var views = c8yViews.getByPath(node.path);
                return $q.all(lodashEs.map(views, function (view) { return c8yUiUtil
                    .configureVisibility(lodashEs.pick(view, ['showIf', 'showIfPermissions']), 'show', false)
                    .then(lodashEs.property('show')); }))
                    .then(lodashEs.some);
            }
            return {
                rootNodes: function () {
                    return root.children;
                },
                findNode: findNode,
                addNavigation: addNavigation,
                removeNavigation: removeNavigation,
                rootNodes$: rootNodes$
            };
        }
        return {
            $get: $get,
            addNavigation: addNavigation,
            removeNavigation: removeNavigation
        };
    }

    var rootComponent = {
        template: "\n  <c8y-bootstrap>\n    <div id=\"c8y-legacy-view\">\n      <div ng-view ng-if=\"vm.widthSet && vm.authState.hasAuth\"></div>\n    </div>\n  </c8y-bootstrap>",
        controller: c8yUiRootController,
        controllerAs: 'vm'
    };
    function c8yUiRootController($rootScope, $timeout, c8yBase, c8yNavigator, c8yApplication, c8yHeaderService) {
        'ngInject';
        var vm = this;
        Object.assign(vm, {
            $onInit: $onInit,
            navOpen: false
        });
        ////////////
        function $onInit() {
            c8yHeaderService.map(function (states) { return states.nav.open; }).subscribe(function (isOpen) {
                vm.navOpen = isOpen;
            });
            c8yHeaderService.configNavigator({ canToggle: true });
            $rootScope.$on('authStateChange', onAuthStateChange);
            vm.rootNodes = c8yNavigator.rootNodes;
            c8yApplication.currentAppCached().then(onAppInfo);
            vm.navHiddenOnStartup = c8yBase.appOption('hide_navigator');
            checkReady();
        }
        function onAuthStateChange(evt, data) {
            vm.authState = data;
        }
        function onAppInfo() {
            vm.tabsHorizontal = c8yBase.appOption('tabsHorizontal');
        }
        function checkReady() {
            var element = document.querySelector('#c8y-legacy-view');
            var hasWidth = element && element.clientWidth;
            if (hasWidth) {
                vm.widthSet = true;
            }
            else {
                $timeout(checkReady);
            }
        }
    }

    function c8yTitleDecorator($q, $delegate, $injector, $rootScope, $location, $templateCache, $compile, c8yHeaderService) {
        'ngInject';
        var exports = {
            translate: translate,
            changeTitleInAngular: changeTitleInAngular
        };
        $delegate.changeTitle = changeTitle;
        $delegate.setTitleElement = setTitleElement;
        $rootScope.$on('$routeChangeStart', function () {
            changeTitle({});
        });
        $rootScope.$on('$routeChangeSuccess', function (event) {
            var title = $delegate.get($location.path());
            if (title) {
                var titleData = $q.when(title.data ? $injector.invoke(title.data) : {});
                titleData.then(function (data) {
                    var templateUrl = data.templateUrl;
                    if (templateUrl) {
                        var template = $templateCache.get(templateUrl);
                        setTitleElement($compile(template)(event.targetScope));
                    }
                    else {
                        changeTitle(data);
                    }
                });
            }
        });
        function changeTitle(newTitleSubtitleObjOrPromise, options) {
            if (options === void 0) { options = { skipTitleTranslation: false, skipSubtitleTranslation: false }; }
            $q.when(newTitleSubtitleObjOrPromise).then(function (newTitleSubtitleObj) { return changeTitleInAngular(translate(newTitleSubtitleObj, options)); });
        }
        function translate(_a, _b) {
            var _c = _a.title, title = _c === void 0 ? '' : _c, _d = _a.subtitle, subtitle = _d === void 0 ? '' : _d;
            var _e = _b.skipTitleTranslation, skipTitleTranslation = _e === void 0 ? false : _e, _f = _b.skipSubtitleTranslation, skipSubtitleTranslation = _f === void 0 ? false : _f;
            var titleTemplate = skipTitleTranslation ? '{{ title }}' : '{{ title | translate }}';
            var subtitleTemplate = skipSubtitleTranslation ? '{{ subtitle }}' : '{{ subtitle | translate }}';
            var template = "\n      <h1 class=\"text-truncate\">" + titleTemplate + "\n      <small>" + subtitleTemplate + "</small></h1>\n    ";
            var isolatedScope = $rootScope.$new(true);
            isolatedScope.title = title;
            isolatedScope.subtitle = subtitle;
            return $compile(angular__namespace.element(template))(isolatedScope)[0];
        }
        function changeTitleInAngular(domElement) {
            c8yHeaderService.changeTitle(domElement);
        }
        function setTitleElement($element) {
            $element.show();
            changeTitleInAngular($element[0]);
        }
        return $delegate;
    }

    var NAME = 'c8y.upgrade';
    window.preventNg1Bootstrap = true;
    angular__namespace
        .module(NAME, [])
        // tslint:disable-next-line:only-arrow-functions
        .config(function ($httpProvider) {
        'ngInject';
        var ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
        if (ng1InterceptorIndex > -1) {
            $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
        }
        $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
    })
        .component('c8yUiRoot', rootComponent)
        .directive('c8yBootstrap', bootstrapComponent)
        .factory('c8yBridgeService', bridgeService)
        .factory('c8yAuthBridgeService', authBridgeService)
        .factory('c8yAppStateService', appStateService)
        .factory('c8yHeaderService', headerService)
        .factory('c8yUserMenuService', userMenuService)
        // tslint:disable-next-line:only-arrow-functions
        .service('c8yQueriesUtil', function () {
        return new client.QueriesUtil();
    })
        .decorator('c8yTitle', c8yTitleDecorator)
        .factory('c8yAlert', alertsService)
        .decorator('c8yAlert', c8yAlertDecorator)
        .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
        .factory('c8yApiService', apiService)
        .factory('c8yDocs', docsService)
        .service('c8yPasswordConfirm', passwordService)
        .service('c8yModalService', modalService);
    angular__namespace
        .module('c8y.ui')
        .filter('absoluteDate', absoluteDateService)
        .directive('c8yLoading', loadingComponent)
        .provider('c8yNavigator', c8yNavigatorProvider)
        .provider('c8yViews', c8yViewsProvider)
        .directive('c8yUserTotpRevoke', userTotpComponent)
        .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
        .directive('c8yDataGrid', dataGridComponent)
        .directive('c8yRangeDisplay', rangeDisplayComponent)
        .directive('c8yHelp', helpComponent)
        .directive('c8yHighlight', highlightComponent)
        .factory('c8yTranslate', translateService)
        .factory('c8yCachedLocaleDictionaryService', cachedLocaleDictionaryService)
        .factory('c8yBulkOperationDetailsService', bulkOperationDetailsService)
        .decorator('gettextCatalog', gettextCatalogDecorator)
        .factory('c8yServerMessages', serverMessagesService)
        .factory('ngZone', _static.downgradeInjectable(core.NgZone));
    var ng1Modules = ['app', NAME];

    var HybridAppModule = /** @class */ (function () {
        function HybridAppModule() {
            this.ng1Modules = ng1Modules;
        }
        HybridAppModule.prototype.ngDoBootstrap = function () {
            window.bootstrap();
            this.upgrade.bootstrap(document.getElementById('app'), this.ng1Modules, { strictDi: false });
        };
        return HybridAppModule;
    }());

    var UPGRADE_ROUTES = [
        { path: '**', component: ngxComponents.EmptyComponent }
    ];

    var DashboardBridgeService = /** @class */ (function () {
        function DashboardBridgeService(ng1Injector, zone, router, contextDashboardService, actionBarService) {
            this.ng1Injector = ng1Injector;
            this.zone = zone;
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.actionBarService = actionBarService;
            this.dashboardSvc = ng1Injector.get('dashboardSvc');
            this.compile = ng1Injector.get('$compile');
        }
        Object.defineProperty(DashboardBridgeService.prototype, "ng1Components", {
            get: function () {
                return this.ng1Injector.get('c8yComponents');
            },
            enumerable: false,
            configurable: true
        });
        DashboardBridgeService.prototype.instantiateComponent = function (widget, element) {
            return __awaiter(this, void 0, void 0, function () {
                var dashboard, context, child, transformedChild_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dashboard = widget.dashboard, context = widget.context, child = widget.child;
                            if (!dashboard) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.dashboardSvc.transformChildWithContext(this.dashboardSvc.forcedContext || context, dashboard, child)];
                        case 1:
                            transformedChild_1 = _a.sent();
                            if (!(this.dashboardSvc.forcedContext || dashboard.deviceType || dashboard.updateTarget)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.dashboardSvc.updateConfigTargetsWithContext(this.dashboardSvc.forcedContext || context, transformedChild_1.config)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/, this.zone.runOutsideAngular(function () { return _this.loadTemplate(transformedChild_1, child, element, context); })];
                        case 4: return [2 /*return*/, this.loadConfigTemplate(element, widget)];
                    }
                });
            });
        };
        DashboardBridgeService.prototype.editDashboard = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.dashboardSvc.editCurrentDashboard({ dashboardId: dashboard.id })];
                });
            });
        };
        DashboardBridgeService.prototype.copyDashboard = function () {
            var dashboard = this.getDashboard();
            var couldCopy = this.dashboardSvc.copyDashboard(dashboard.c8y_Dashboard);
            if (couldCopy) {
                this.dashboardClipboard = dashboard;
                this.actionBarService.refresh();
                return dashboard;
            }
        };
        DashboardBridgeService.prototype.pasteDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var newDashboard, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.dashboardSvc.pasteDashboard()];
                        case 1:
                            newDashboard = _a.sent();
                            this.navigateToDashboard(newDashboard);
                            this.dashboardClipboard = undefined;
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 3];
                        case 3:
                            this.actionBarService.refresh();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DashboardBridgeService.prototype.instantiateDeviceSelector = function (element, widgetConfig) {
            return this.loadConfigTemplate(element, widgetConfig, true);
        };
        DashboardBridgeService.prototype.loadTemplate = function (transformedChild, child, element, context) {
            var scope = this.ng1Injector.get('$rootScope').$new(true);
            scope.child = transformedChild;
            scope.dashboardContext = context;
            if (child.widgetComponent) {
                element.innerHTML = "<c8y-ui-component component-name=\"'" + child.widgetComponent + "'\" config=\"child.config\" context=\"dashboardContext\"></c8y-ui-component>";
            }
            else if (child.templateUrl) {
                element.innerHTML = "<ng-include src=\"'" + child.templateUrl + "'\"></ng-include>";
            }
            this.compile(element)(scope);
            return scope;
        };
        DashboardBridgeService.prototype.navigateToDashboard = function (dashboard) {
            if (/dashboard/.test(this.router.url)) {
                this.router.navigate(['..', dashboard.id], {
                    relativeTo: ngxComponents.getActivatedRoute(this.router)
                });
            }
            else {
                this.router.navigate(['..', 'dashboard', dashboard.id], {
                    relativeTo: ngxComponents.getActivatedRoute(this.router)
                });
            }
        };
        DashboardBridgeService.prototype.getDashboard = function () {
            return ngxComponents.getActivatedRoute(this.router).snapshot.data.dashboard;
        };
        DashboardBridgeService.prototype.loadConfigTemplate = function (element, widgetConfig, onlyDeviceSelector) {
            var _this = this;
            if (onlyDeviceSelector === void 0) { onlyDeviceSelector = false; }
            var settings = widgetConfig.settings;
            var scope = this.ng1Injector.get('$rootScope').$new(true);
            scope.settings = Object.assign(Object.assign({}, settings), settings.ng1);
            scope.options = widgetConfig.options;
            scope.config = widgetConfig;
            scope.forms = {};
            scope.rootId = settings.context.id;
            scope.dashboard = lodashEs.get(widgetConfig, 'settings.dashboardMo');
            var configCmp = '';
            if (!onlyDeviceSelector) {
                if (widgetConfig.settings.configComponent) {
                    configCmp = "<c8y-ui-component component-name=\"'" + widgetConfig.settings.configComponent + "'\" config=\"config\"></c8y-ui-component>";
                }
                else if (widgetConfig.settings.configTemplateUrl) {
                    configCmp = "<ng-include src=\"'" + widgetConfig.settings.configTemplateUrl + "'\"></ng-include>";
                }
            }
            element.innerHTML = "\n    <ng-form name=\"forms.componentForm\">\n      <div class=\"form-group\"\n        ng-if=\"!settings.noDeviceTarget\"\n        ng-style=\"{height: settings.hideTarget && '0', overflow: 'hidden'}\"\n      >\n        <label translate>" + ngxComponents.gettext('Target assets or devices') + "</label>\n        <c8y-device-selector-combo parent=\"rootId\"\n          selected-child-device=\"config.device\"\n          groups-selectable=\"settings.groupsSelectable\"\n          select-required=\"!settings.deviceTargetNotRequired\"\n        ></c8y-device-selector-combo>\n      </div>\n      " + configCmp + "\n    </ng-form>";
            scope.$watch('forms.componentForm.$invalid', function (formStatus) {
                _this.contextDashboardService.formDisabled = formStatus;
            });
            this.compile(element)(scope);
            this.contextDashboardService.formDisabled = scope.forms.componentForm.$invalid;
            return scope;
        };
DashboardBridgeService.ɵfac = function DashboardBridgeService_Factory(t) { return new (t || DashboardBridgeService)(ɵngcc0.ɵɵinject(undefined), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc3.Router), ɵngcc0.ɵɵinject(ɵngcc4.ContextDashboardService), ɵngcc0.ɵɵinject(ɵngcc1.ActionBarService)); };
DashboardBridgeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DashboardBridgeService, factory: function (t) { return DashboardBridgeService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardBridgeService, [{
        type: core.Injectable
    }], function () { return [{ type: undefined }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Router }, { type: ɵngcc4.ContextDashboardService }, { type: ɵngcc1.ActionBarService }]; }, null); })();
        return DashboardBridgeService;
    }());
    DashboardBridgeService.ctorParameters = function () { return [
        { type: undefined },
        { type: core.NgZone },
        { type: router.Router },
        { type: contextDashboard.ContextDashboardService },
        { type: ngxComponents.ActionBarService }
    ]; };

    var WidgetComponent = /** @class */ (function () {
        function WidgetComponent(dashboard, dashboardBridgeService, el) {
            this.dashboard = dashboard;
            this.dashboardBridgeService = dashboardBridgeService;
            this.el = el;
        }
        WidgetComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.config) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.dashboardBridgeService.instantiateComponent(this.config, this.el.nativeElement)];
                        case 1:
                            _a.ng1Scope = _b.sent();
                            if (this.dashboard) {
                                this.resizeSubscription = this.dashboard.onChangeDashboard.subscribe(function () {
                                    _this.ng1Scope.$broadcast('dashboardResize');
                                });
                            }
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        WidgetComponent.prototype.ngOnDestroy = function () {
            if (this.ng1Scope) {
                this.ng1Scope.$destroy();
            }
            if (this.resizeSubscription) {
                this.resizeSubscription.unsubscribe();
            }
        };
WidgetComponent.ɵfac = function WidgetComponent_Factory(t) { return new (t || WidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WidgetsDashboardComponent, 8), ɵngcc0.ɵɵdirectiveInject(DashboardBridgeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WidgetComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetComponent, selectors: [["c8y-widget-legacy"]], decls: 0, vars: 0, template: function WidgetComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-widget-legacy',
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.WidgetsDashboardComponent, decorators: [{
                type: core.Optional
            }] }, { type: DashboardBridgeService }, { type: ɵngcc0.ElementRef }]; }, null); })();
        return WidgetComponent;
    }());
    WidgetComponent.ctorParameters = function () { return [
        { type: ngxComponents.WidgetsDashboardComponent, decorators: [{ type: core.Optional }] },
        { type: DashboardBridgeService },
        { type: core.ElementRef }
    ]; };

    var DeviceSelectorComponent = /** @class */ (function () {
        function DeviceSelectorComponent(dashboardBridgeService, el) {
            this.dashboardBridgeService = dashboardBridgeService;
            this.el = el;
        }
        DeviceSelectorComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.ng1Scope = this.dashboardBridgeService.instantiateDeviceSelector(this.el.nativeElement, this.config);
                    return [2 /*return*/];
                });
            });
        };
        DeviceSelectorComponent.prototype.ngOnDestroy = function () {
            if (this.ng1Scope) {
                this.ng1Scope.$destroy();
            }
        };
DeviceSelectorComponent.ɵfac = function DeviceSelectorComponent_Factory(t) { return new (t || DeviceSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(DashboardBridgeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DeviceSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceSelectorComponent, selectors: [["c8y-device-selector-legacy"]], decls: 0, vars: 0, template: function DeviceSelectorComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-selector-legacy',
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: DashboardBridgeService }, { type: ɵngcc0.ElementRef }]; }, null); })();
        return DeviceSelectorComponent;
    }());
    DeviceSelectorComponent.ctorParameters = function () { return [
        { type: DashboardBridgeService },
        { type: core.ElementRef }
    ]; };

    var Ng1ComponentFactoryService = /** @class */ (function () {
        function Ng1ComponentFactoryService(bridge) {
            this.bridge = bridge;
        }
        Ng1ComponentFactoryService.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                var components;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.bridge.ng1Components.list()];
                        case 1:
                            components = (_a.sent()).map(function (cmp) {
                                var data = {
                                    settings: Object.assign(Object.assign({}, cmp.options), { configTemplateUrl: cmp.configTemplateUrl, widgetComponent: cmp.widgetComponent, configComponent: cmp.configComponent, transformConfigWithContext: cmp.transformConfigWithContext || cmp.componentTransformConfigWithContext, upgrade: true })
                                };
                                data.settings.templateUrl = cmp.templateUrl; // workaround as in object it creates build error
                                return {
                                    id: cmp.name,
                                    label: cmp.nameDisplay || cmp.name,
                                    description: cmp.description,
                                    component: WidgetComponent,
                                    configComponent: WidgetComponent,
                                    previewImage: cmp.previewImage,
                                    data: data
                                };
                            });
                            // add the device selector legacy component
                            components.push({
                                id: 'device.selector.legacy',
                                label: 'Device selector',
                                description: '',
                                data: { settings: { noNewWidgets: true, upgrade: true } },
                                component: DeviceSelectorComponent
                            });
                            return [2 /*return*/, components];
                    }
                });
            });
        };
Ng1ComponentFactoryService.ɵfac = function Ng1ComponentFactoryService_Factory(t) { return new (t || Ng1ComponentFactoryService)(ɵngcc0.ɵɵinject(DashboardBridgeService)); };
Ng1ComponentFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ComponentFactoryService, factory: function (t) { return Ng1ComponentFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ComponentFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: DashboardBridgeService }]; }, null); })();
        return Ng1ComponentFactoryService;
    }());
    Ng1ComponentFactoryService.ctorParameters = function () { return [
        { type: DashboardBridgeService }
    ]; };

    var CopyActionComponent = /** @class */ (function () {
        function CopyActionComponent(vcRef, dashboardBridgeService) {
            this.vcRef = vcRef;
            this.dashboardBridgeService = dashboardBridgeService;
        }
        CopyActionComponent.prototype.ngOnInit = function () {
            this.vcRef.createEmbeddedView(this.templateCopy);
        };
        CopyActionComponent.prototype.copyDashboard = function () {
            this.dashboardBridgeService.copyDashboard();
        };
CopyActionComponent.ɵfac = function CopyActionComponent_Factory(t) { return new (t || CopyActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DashboardBridgeService)); };
CopyActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CopyActionComponent, selectors: [["c8y-copy-action-legacy"]], viewQuery: function CopyActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, core.TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateCopy = _t.first);
    } }, decls: 2, vars: 0, consts: [["templateCopy", ""], [3, "title", "click"], [1, "dlt-c8y-icon-copy", "m-r-4"], ["translate", ""]], template: function CopyActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CopyActionComponent_ng_template_0_Template, 6, 3, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CopyActionComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-copy-action-legacy',
                template: "\n    <ng-template #templateCopy>\n      <li>\n        <button title=\"{{'Copy dashboard' | translate}}\" (click)=\"copyDashboard()\">\n          <i class=\"dlt-c8y-icon-copy m-r-4\"></i><span translate>Copy dashboard</span>\n        </button>\n      </li>\n    </ng-template>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: DashboardBridgeService }]; }, { templateCopy: [{
            type: core.ViewChild,
            args: ['templateCopy', { read: core.TemplateRef, static: true }]
        }] }); })();
        return CopyActionComponent;
    }());
    CopyActionComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef },
        { type: DashboardBridgeService }
    ]; };
    CopyActionComponent.propDecorators = {
        templateCopy: [{ type: core.ViewChild, args: ['templateCopy', { read: core.TemplateRef, static: true },] }]
    };

    var PasteActionComponent = /** @class */ (function () {
        function PasteActionComponent(vcRef, dashboardBridgeService) {
            this.vcRef = vcRef;
            this.dashboardBridgeService = dashboardBridgeService;
            this.dashboardName = '';
        }
        PasteActionComponent.prototype.ngOnInit = function () {
            this.vcRef.createEmbeddedView(this.templatePaste);
            this.dashboardName = this.dashboardBridgeService.dashboardClipboard.c8y_Dashboard.name;
        };
        PasteActionComponent.prototype.pasteDashboard = function () {
            this.dashboardBridgeService.pasteDashboard();
        };
PasteActionComponent.ɵfac = function PasteActionComponent_Factory(t) { return new (t || PasteActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DashboardBridgeService)); };
PasteActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasteActionComponent, selectors: [["c8y-paste-action-legacy"]], viewQuery: function PasteActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 7, core.TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templatePaste = _t.first);
    } }, decls: 2, vars: 0, consts: [["templatePaste", ""], [3, "title", "click"], ["c8yIcon", "clipboard", 1, "m-r-4"], ["translate", ""]], template: function PasteActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PasteActionComponent_ng_template_0_Template, 9, 4, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc1.C8yTranslateDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasteActionComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-paste-action-legacy',
                template: "\n    <ng-template #templatePaste>\n      <li>\n        <button title=\"{{'Paste dashboard' | translate}}\" (click)=\"pasteDashboard()\">\n          <i class=\"m-r-4\" c8yIcon=\"clipboard\"></i><span translate>Paste dashboard</span>&nbsp;<span\n            >\"{{ dashboardName }}\"</span\n          >\n        </button>\n      </li>\n    </ng-template>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: DashboardBridgeService }]; }, { templatePaste: [{
            type: core.ViewChild,
            args: ['templatePaste', { read: core.TemplateRef, static: true }]
        }] }); })();
        return PasteActionComponent;
    }());
    PasteActionComponent.ctorParameters = function () { return [
        { type: core.ViewContainerRef },
        { type: DashboardBridgeService }
    ]; };
    PasteActionComponent.propDecorators = {
        templatePaste: [{ type: core.ViewChild, args: ['templatePaste', { read: core.TemplateRef, static: true },] }]
    };

    var Ng1DashboardActionFactoryService = /** @class */ (function () {
        function Ng1DashboardActionFactoryService(dashboardBridgeService) {
            this.dashboardBridgeService = dashboardBridgeService;
        }
        Ng1DashboardActionFactoryService.prototype.get = function (activeRoute) {
            var actions = [];
            var data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            var contextData = data.contextData;
            var canCopy = contextData &&
                activeRoute.snapshot.data.dashboard &&
                [ngxComponents.ViewContext.Device, ngxComponents.ViewContext.Group].includes(data.context);
            var canPaste = contextData &&
                [ngxComponents.ViewContext.Device, ngxComponents.ViewContext.Group].includes(data.context) &&
                this.dashboardBridgeService.dashboardClipboard;
            if (canCopy) {
                actions.push({
                    priority: -20,
                    placement: 'more',
                    template: CopyActionComponent
                });
            }
            if (canPaste) {
                actions.push({
                    priority: -10,
                    placement: 'more',
                    template: PasteActionComponent
                });
            }
            return actions;
        };
Ng1DashboardActionFactoryService.ɵfac = function Ng1DashboardActionFactoryService_Factory(t) { return new (t || Ng1DashboardActionFactoryService)(ɵngcc0.ɵɵinject(DashboardBridgeService)); };
Ng1DashboardActionFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1DashboardActionFactoryService, factory: function (t) { return Ng1DashboardActionFactoryService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1DashboardActionFactoryService, [{
        type: core.Injectable
    }], function () { return [{ type: DashboardBridgeService }]; }, null); })();
        return Ng1DashboardActionFactoryService;
    }());
    Ng1DashboardActionFactoryService.ctorParameters = function () { return [
        { type: DashboardBridgeService }
    ]; };

    var DashboardUpgradeModule = /** @class */ (function () {
        function DashboardUpgradeModule() {
        }
DashboardUpgradeModule.ɵfac = function DashboardUpgradeModule_Factory(t) { return new (t || DashboardUpgradeModule)(); };
DashboardUpgradeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DashboardUpgradeModule });
DashboardUpgradeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: DashboardBridgeService,
            useFactory: dashboardBridgeFactory,
            deps: ['$injector', core.NgZone, router.Router, [new core.Optional(), contextDashboard.ContextDashboardService], ngxComponents.ActionBarService]
        },
        { provide: ngxComponents.HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true },
        { provide: ngxComponents.HOOK_ACTION_BAR, useClass: Ng1DashboardActionFactoryService, multi: true }
    ], imports: [[common.CommonModule, ngxComponents.C8yTranslateModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardUpgradeModule, [{
        type: core.NgModule,
        args: [{
                declarations: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
                entryComponents: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
                imports: [common.CommonModule, ngxComponents.C8yTranslateModule],
                providers: [
                    {
                        provide: DashboardBridgeService,
                        useFactory: dashboardBridgeFactory,
                        deps: ['$injector', core.NgZone, router.Router, [new core.Optional(), contextDashboard.ContextDashboardService], ngxComponents.ActionBarService]
                    },
                    { provide: ngxComponents.HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true },
                    { provide: ngxComponents.HOOK_ACTION_BAR, useClass: Ng1DashboardActionFactoryService, multi: true }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DashboardUpgradeModule, { declarations: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent], imports: [ɵngcc5.CommonModule, ɵngcc1.C8yTranslateModule] }); })();
        return DashboardUpgradeModule;
    }());
    function dashboardBridgeFactory(injector, ngZone, router, contextDashboardService, actionBarService) {
        return new DashboardBridgeService(injector, ngZone, router, contextDashboardService, actionBarService);
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AuthBridgeService = AuthBridgeService;
    exports.BridgeService = BridgeService;
    exports.CopyActionComponent = CopyActionComponent;
    exports.DashboardBridgeService = DashboardBridgeService;
    exports.DashboardUpgradeModule = DashboardUpgradeModule;
    exports.DeviceSelectorComponent = DeviceSelectorComponent;
    exports.HybridAppModule = HybridAppModule;
    exports.Ng1ActionBarFactoryService = Ng1ActionBarFactoryService;
    exports.Ng1ActionFactoryService = Ng1ActionFactoryService;
    exports.Ng1BreadcrumbFactoryService = Ng1BreadcrumbFactoryService;
    exports.Ng1ComponentFactoryService = Ng1ComponentFactoryService;
    exports.Ng1DashboardActionFactoryService = Ng1DashboardActionFactoryService;
    exports.Ng1DocsFactoryService = Ng1DocsFactoryService;
    exports.Ng1NodesFactoryService = Ng1NodesFactoryService;
    exports.Ng1TabsFactoryService = Ng1TabsFactoryService;
    exports.PasteActionComponent = PasteActionComponent;
    exports.UPGRADE_ROUTES = UPGRADE_ROUTES;
    exports.UpgradeModule = UpgradeModule;
    exports.WidgetComponent = WidgetComponent;
    exports.authBridgeServiceFactory = authBridgeServiceFactory;
    exports.authBridgeServiceProvider = authBridgeServiceProvider;
    exports.bridgeServiceFactory = bridgeServiceFactory;
    exports.bridgeServiceProvider = bridgeServiceProvider;
    exports.dashboardBridgeFactory = dashboardBridgeFactory;
    exports.ng1Modules = ng1Modules;
    exports["ɵa"] = AbsoluteDateService;
    exports["ɵb"] = absoluteDateServiceFactory;
    exports["ɵc"] = absoluteDateServiceProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-upgrade.umd.js.map