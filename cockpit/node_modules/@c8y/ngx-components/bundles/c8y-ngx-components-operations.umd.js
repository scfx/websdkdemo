(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/router'),require('@c8y/ngx-components'),require('@c8y/ngx-components/operations/bulk-operation-from-single'),require('@c8y/ngx-components/operations/bulk-operations-list'),require('@c8y/ngx-components/operations/bulk-operations-stepper-container'),require('@c8y/ngx-components/operations/stepper-bulk-type-configuration'),require('@c8y/ngx-components/operations/stepper-bulk-type-firmware'),require('@c8y/ngx-components/operations/stepper-bulk-type-software'),require('@c8y/ngx-components/operations/stepper-bulk-type-device-profile'),exports, require('@angular/core'), require('@angular/router'), require('@c8y/ngx-components'), require('@c8y/ngx-components/operations/bulk-operations-stepper-container'), require('@c8y/ngx-components/operations/bulk-operation-from-single'), require('@c8y/ngx-components/operations/bulk-operations-list'), require('@c8y/ngx-components/operations/stepper-bulk-type-configuration'), require('@c8y/ngx-components/operations/stepper-bulk-type-device-profile'), require('@c8y/ngx-components/operations/stepper-bulk-type-firmware'), require('@c8y/ngx-components/operations/stepper-bulk-type-software')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations', ['@angular/core','@angular/router','@c8y/ngx-components','@c8y/ngx-components/operations/bulk-operation-from-single','@c8y/ngx-components/operations/bulk-operations-list','@c8y/ngx-components/operations/bulk-operations-stepper-container','@c8y/ngx-components/operations/stepper-bulk-type-configuration','@c8y/ngx-components/operations/stepper-bulk-type-firmware','@c8y/ngx-components/operations/stepper-bulk-type-software','@c8y/ngx-components/operations/stepper-bulk-type-device-profile','exports', '@angular/core', '@angular/router', '@c8y/ngx-components', '@c8y/ngx-components/operations/bulk-operations-stepper-container', '@c8y/ngx-components/operations/bulk-operation-from-single', '@c8y/ngx-components/operations/bulk-operations-list', '@c8y/ngx-components/operations/stepper-bulk-type-configuration', '@c8y/ngx-components/operations/stepper-bulk-type-device-profile', '@c8y/ngx-components/operations/stepper-bulk-type-firmware', '@c8y/ngx-components/operations/stepper-bulk-type-software'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.router,global.c8y.ngxComponents,global.c8y.ngxComponents.operations.bulkOperationFromSingle,global.c8y.ngxComponents.operations.bulkOperationsList,global.c8y.ngxComponents.operations.bulkOperationsStepperContainer,global.c8y.ngxComponents.operations.stepperBulkTypeConfiguration,global.c8y.ngxComponents.operations.stepperBulkTypeFirmware,global.c8y.ngxComponents.operations.stepperBulkTypeSoftware,global.c8y.ngxComponents.operations.stepperBulkTypeDeviceProfile,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].operations = {}), global.ng.core, global.ng.router, global.c8y["ngx-components"], global.c8y["ngx-components"].operations["bulk-operations-stepper-container"], global.c8y["ngx-components"].operations["bulk-operation-from-single"], global.c8y["ngx-components"].operations["bulk-operations-list"], global.c8y["ngx-components"].operations["stepper-bulk-type-configuration"], global.c8y["ngx-components"].operations["stepper-bulk-type-device-profile"], global.c8y["ngx-components"].operations["stepper-bulk-type-firmware"], global.c8y["ngx-components"].operations["stepper-bulk-type-software"]));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,ɵngcc9,exports, core, router, ngxComponents, bulkOperationsStepperContainer, bulkOperationFromSingle, bulkOperationsList, stepperBulkTypeConfiguration, stepperBulkTypeDeviceProfile, stepperBulkTypeFirmware, stepperBulkTypeSoftware) { 'use strict';

    var TabsFactory = /** @class */ (function () {
        function TabsFactory(router) {
            this.router = router;
        }
        TabsFactory.prototype.get = function () {
            var tabs = [];
            if (this.router.url.match(/devicecontrol/g)) {
                tabs.push({
                    path: 'devicecontrol/single',
                    label: ngxComponents.gettext('Single operations'),
                    icon: 'c8y-icon c8y-icon-device-control',
                    priority: 1100,
                    orientation: 'horizontal'
                });
                tabs.push({
                    path: 'devicecontrol/bulk',
                    label: ngxComponents.gettext('Bulk operations'),
                    icon: 'c8y-icon c8y-icon-energy',
                    priority: 1050,
                    orientation: 'horizontal'
                });
            }
            return tabs;
        };
TabsFactory.ɵfac = function TabsFactory_Factory(t) { return new (t || TabsFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
TabsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TabsFactory, factory: function (t) { return TabsFactory.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsFactory, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.Router }]; }, null); })();
        return TabsFactory;
    }());
    TabsFactory.ctorParameters = function () { return [
        { type: router.Router }
    ]; };

    var routes = [
        {
            path: 'devicecontrol',
            redirectTo: 'devicecontrol/single',
            pathMatch: 'full'
        }
    ];
    /**
     * This module sets up the 'Device control' view. To use the module as it is you need to also
     * import the '@c8y/ng1-modules/devicemanagement-deviceControlList/cumulocity.json' ng1 module
     * in a hybrid application. By importing it in your custom application you will have:
     * - a 'Device control' entry in the 'Overviews' section of navigator
     * - 'Bulk operations' tab on the 'Device control' page
     * - list view of existing bulk operations with expandable details and options to filter
     * - guided stepper dialogs to schedule new bulk operations of supported types
     * (Configuration update, Firmware update, Software update, Apply device profile).
     *
     * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve
     * the results you wish to have in your application, e.g.:
     * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}
     * to have an overview of existing bulk operation with expandable details
     * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing
     * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},
     * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},
     * {@link StepperBulkTypeDeviceProfileModule}) to have the option
     * to create new bulk operation in a guided stepper dialog.
     *
     * ```typescript
     * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
     * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
     *
     * @NgModule({
     *   imports: [
     *     [...]
     *     BulkOperationsServiceModule,
     *     BulkOperationsListModule
     *   ],
     *   [...]
     * })
     * export class CustomOperationsModule {}```
     * respectively
     * ```typescript
     * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
     * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
     * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
     * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
     *
     * @NgModule({
     *   imports: [
     *     [...]
     *     BulkOperationsServiceModule,
     *     BulkOperationsListModule,
     *     BulkOperationsStepperContainerModule,
     *     StepperBulkTypeSoftwareModule
     *   ],
     *   [...]
     * })
     * export class CustomOperationsModule {}```
     * You can provide your own bulk operation stepper by registering a component via the `HOOK_LIST_BULK_TYPE`:
     *
     * ```typescript
     * import {
     *   HOOK_LIST_BULK_TYPE,
     *   baseUrl
     * } from '@c8y/ngx-components/operations/bulk-operations-service';
     *
     * [...]
     *
     * providers: [
     *   {
     *     provide: HOOK_LIST_BULK_TYPE,
     *     useValue: {
     *       type: 'my-bulk-op-type',
     *       c8yIcon: 'c8y-tools',
     *       name: 'My bulk op type',
     *       path: `${baseUrl}my-type`,
     *       component: StepperMyBulkTypeComponent,
     *       fragments: ['c8y_MyType'],
     *       selected: false
     *     },
     *     multi: true
     *   }
     * ]```
     */
    var OperationsModule = /** @class */ (function () {
        function OperationsModule() {
        }
OperationsModule.ɵfac = function OperationsModule_Factory(t) { return new (t || OperationsModule)(); };
OperationsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OperationsModule });
OperationsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: ngxComponents.HOOK_TABS, useClass: TabsFactory, multi: true }], imports: [[
            ngxComponents.CoreModule,
            router.RouterModule.forChild(routes),
            bulkOperationFromSingle.BulkOperationFromSingleModule,
            bulkOperationsList.BulkOperationsListModule,
            bulkOperationsStepperContainer.BulkOperationsStepperContainerModule,
            stepperBulkTypeConfiguration.StepperBulkTypeConfigurationModule,
            stepperBulkTypeFirmware.StepperBulkTypeFirmwareModule,
            stepperBulkTypeSoftware.StepperBulkTypeSoftwareModule,
            stepperBulkTypeDeviceProfile.StepperBulkTypeDeviceProfileModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationsModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    ngxComponents.CoreModule,
                    router.RouterModule.forChild(routes),
                    bulkOperationFromSingle.BulkOperationFromSingleModule,
                    bulkOperationsList.BulkOperationsListModule,
                    bulkOperationsStepperContainer.BulkOperationsStepperContainerModule,
                    stepperBulkTypeConfiguration.StepperBulkTypeConfigurationModule,
                    stepperBulkTypeFirmware.StepperBulkTypeFirmwareModule,
                    stepperBulkTypeSoftware.StepperBulkTypeSoftwareModule,
                    stepperBulkTypeDeviceProfile.StepperBulkTypeDeviceProfileModule
                ],
                providers: [{ provide: ngxComponents.HOOK_TABS, useClass: TabsFactory, multi: true }]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OperationsModule, { imports: [ɵngcc2.CoreModule, ɵngcc1.RouterModule, ɵngcc3.BulkOperationFromSingleModule, ɵngcc4.BulkOperationsListModule, ɵngcc5.BulkOperationsStepperContainerModule, ɵngcc6.StepperBulkTypeConfigurationModule, ɵngcc7.StepperBulkTypeFirmwareModule, ɵngcc8.StepperBulkTypeSoftwareModule, ɵngcc9.StepperBulkTypeDeviceProfileModule] }); })();
        return OperationsModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OperationsModule = OperationsModule;
    exports.TabsFactory = TabsFactory;
    exports.routes = routes;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-operations.umd.js.map