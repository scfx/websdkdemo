(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/client'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@c8y/ngx-components/repository'), require('@angular/router'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('ngx-bootstrap/buttons'), require('@angular/forms'), require('@angular/common'), require('ngx-bootstrap/modal'), require('@ngx-translate/core'), require('@c8y/ngx-components/operations/single-operation-details')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/device-profile', ['exports', '@angular/core', '@c8y/ngx-components', '@c8y/client', 'lodash-es', 'rxjs', 'rxjs/operators', '@c8y/ngx-components/repository', '@angular/router', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', 'ngx-bootstrap/buttons', '@angular/forms', '@angular/common', 'ngx-bootstrap/modal', '@ngx-translate/core', '@c8y/ngx-components/operations/single-operation-details'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["device-profile"] = {}), global.ng.core, global.c8y["ngx-components"], global.client, global.lodashEs, global.rxjs, global.rxjs.operators, global.c8y["ngx-components"].repository, global.ng.router, global.dropdown, global.popover, global.tooltip, global.buttons, global.ng.forms, global.ng.common, global.modal, global.core$1, global.c8y["ngx-components"].operations["single-operation-details"]));
})(this, (function (exports, core, ngxComponents, client, lodashEs, rxjs, operators, repository, router, dropdown, popover, tooltip, buttons, forms, common, modal, core$1, singleOperationDetails) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DeviceProfileNavigationFactory = /** @class */ (function () {
        function DeviceProfileNavigationFactory() {
        }
        DeviceProfileNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.nodeItem) {
                        this.nodeItem = new ngxComponents.NavigatorNode({
                            label: ngxComponents.gettext('Device profiles'),
                            path: '/device-profiles',
                            icon: 'c8y-device-profile',
                            parent: ngxComponents.gettext('Management')
                        });
                    }
                    return [2 /*return*/, this.nodeItem];
                });
            });
        };
        return DeviceProfileNavigationFactory;
    }());
    DeviceProfileNavigationFactory.decorators = [
        { type: core.Injectable }
    ];

    var DeviceProfileService = /** @class */ (function () {
        function DeviceProfileService(inventoryService, operationService, alertService) {
            this.inventoryService = inventoryService;
            this.operationService = operationService;
            this.alertService = alertService;
            this.dateFrom = new Date(0);
            this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
            this.NOT_INSTALLED_WARNING = ngxComponents.gettext('Not installed on the device');
            this.VERSION_MISSMATCH_WARNING = ngxComponents.gettext('Version mismatch');
            this.SAME_URL_WARNING = ngxComponents.gettext('Installed configuration has the same URL but different name or type than the one in the profile');
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceProfileService.prototype.createDeviceProfile = function (deviceProfile) {
            if (lodashEs.get(deviceProfile, 'c8y_Filter.type') === '') {
                delete deviceProfile.c8y_Filter.type;
            }
            return this.inventoryService.create(deviceProfile);
        };
        DeviceProfileService.prototype.getDeviceProfilesByDeviceType = function (deviceType) {
            var deviceTypeFilter = {
                __or: [
                    { 'c8y_Filter.type': deviceType },
                    { 'c8y_Filter.type': '' },
                    { __not: { __has: 'c8y_Filter.type' } }
                ]
            };
            return this.getDeviceProfiles(deviceTypeFilter);
        };
        DeviceProfileService.prototype.getDeviceProfiles = function (andQuery) {
            var query = {
                type: 'c8y_Profile'
            };
            var filter = {
                pageSize: 100,
                withTotalPages: true
            };
            query = this.queriesUtil.addAndFilter(query, andQuery || {});
            return this.inventoryService.listQuery(query, filter);
        };
        DeviceProfileService.prototype.getProfileOperation = function (deviceId) {
            return __awaiter(this, void 0, void 0, function () {
                var filter, operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filter = {
                                deviceId: deviceId,
                                fragmentType: 'c8y_DeviceProfile',
                                dateFrom: this.dateFrom.toISOString(),
                                dateTo: this.dateTo.toISOString(),
                                revert: true,
                                pageSize: 1
                            };
                            return [4 /*yield*/, this.operationService.list(filter)];
                        case 1:
                            operation = (_a.sent()).data[0];
                            return [2 /*return*/, operation && operation.status !== client.OperationStatus.SUCCESSFUL ? operation : undefined];
                    }
                });
            });
        };
        DeviceProfileService.prototype.createProfileOperation = function (device, deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var operation, operationCfg, data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationCfg = {
                                deviceId: device.id,
                                profileId: deviceProfile.id,
                                profileName: deviceProfile.name,
                                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                                description: "Assign device profile " + deviceProfile.name + " to device " + device.name
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.operationService.create(operationCfg)];
                        case 2:
                            data = (_a.sent()).data;
                            operation = data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, operation];
                    }
                });
            });
        };
        DeviceProfileService.prototype.getFirmwareItems = function (device, selectedProfile) {
            var deviceFirmware = device.c8y_Firmware;
            var profileFirmware = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.firmware');
            var deviceItems = [];
            var profileItems = [];
            if (deviceFirmware) {
                deviceItems.push(deviceFirmware);
            }
            if (profileFirmware) {
                profileItems.push(profileFirmware);
            }
            return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
        };
        DeviceProfileService.prototype.getSoftwareItems = function (device, selectedProfile) {
            var deviceSoftware = device.c8y_SoftwareList;
            var profileSoftware = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.software');
            return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
        };
        DeviceProfileService.prototype.getConfigurationItems = function (device, selectedProfile) {
            var deviceConfiguration = [];
            Object.keys(device).forEach(function (key) {
                if (key.slice(0, 18) === 'c8y_Configuration_') {
                    deviceConfiguration.push(device[key]);
                }
            });
            var profileConfiguration = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.configuration');
            return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
        };
        DeviceProfileService.prototype.getAlert = function (itemType) {
            var _this = this;
            var notInstalled = function (comparisionResult) {
                return !comparisionResult.device ? _this.NOT_INSTALLED_WARNING : '';
            };
            switch (itemType) {
                case 'firmware':
                case 'software':
                    return function (comparisionResult) {
                        return comparisionResult.device &&
                            comparisionResult.profile &&
                            comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails
                            ? _this.VERSION_MISSMATCH_WARNING
                            : notInstalled(comparisionResult);
                    };
                case 'configuration':
                    return function (comparisionResult) {
                        return comparisionResult.device &&
                            comparisionResult.profile &&
                            (comparisionResult.device.itemName !== comparisionResult.profile.itemName ||
                                comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)
                            ? _this.SAME_URL_WARNING
                            : notInstalled(comparisionResult);
                    };
                default:
                    return notInstalled;
            }
        };
        DeviceProfileService.prototype.createProfileComparison = function (deviceItems, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
            if (deviceItems === void 0) { deviceItems = []; }
            if (profileItems === void 0) { profileItems = []; }
            var comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
            var extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
            return lodashEs.sortBy(lodashEs.toArray(extendedComparisonObj), 'name');
        };
        DeviceProfileService.prototype.createProfileComparisonFromDeviceItems = function (deviceItems, mergeByProperty, propertyNameWithDetails) {
            return deviceItems.reduce(function (comapritionItem, deviceItem) {
                var _a;
                return Object.assign(comapritionItem, (_a = {},
                    _a[deviceItem[mergeByProperty]] = {
                        device: {
                            itemName: deviceItem.name,
                            itemDetails: deviceItem[propertyNameWithDetails],
                            itemUrl: deviceItem.url
                        },
                        profile: undefined
                    },
                    _a));
            }, {});
        };
        DeviceProfileService.prototype.extendProfileComparisonWithProfileItems = function (comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
            profileItems.forEach(function (profileItem) {
                var comparisionResult = {
                    profile: {
                        itemName: profileItem.name,
                        itemDetails: profileItem[propertyNameWithDetails],
                        itemUrl: profileItem.url
                    },
                    device: comparisonObj[profileItem[mergeByProperty]]
                        ? comparisonObj[profileItem[mergeByProperty]].device
                        : undefined
                };
                comparisionResult.comparisonAlert = getAlert(comparisionResult);
                comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
            });
            return comparisonObj;
        };
        return DeviceProfileService;
    }());
    DeviceProfileService.decorators = [
        { type: core.Injectable }
    ];
    DeviceProfileService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: client.OperationService },
        { type: ngxComponents.AlertService }
    ]; };

    var SelectConfigurationModalComponent = /** @class */ (function () {
        function SelectConfigurationModalComponent(repositoryService) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.title = ngxComponents.gettext('Select configuration');
            this.load = new rxjs.Subject();
            this.configurations = this.load.pipe(operators.switchMap(function () { return _this.getItems(); }), operators.map(function (_a) {
                var data = _a.data;
                return _this.aggregate(data);
            }));
            this.resultEmitter = new core.EventEmitter();
            this.deviceTypeQuery = {};
            this.searchQuery = {};
            this.labels = { ok: ngxComponents.gettext('Save') };
            this.queriesUtil = new client.QueriesUtil();
        }
        SelectConfigurationModalComponent.prototype.search = function (searchTerm) {
            if (!searchTerm) {
                this.searchQuery = {};
            }
            else {
                this.searchQuery = this.queriesUtil.addOrFilter({ name: "*" + searchTerm + "*" }, { configurationType: "*" + searchTerm + "*" });
            }
            this.load.next();
        };
        SelectConfigurationModalComponent.prototype.result = function (selectedItems) {
            this.resultEmitter.emit(selectedItems);
        };
        SelectConfigurationModalComponent.prototype.getItems = function () {
            return this.repositoryService.listRepositoryEntries(repository.RepositoryType.CONFIGURATION, {
                query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
                params: { pageSize: 100 }
            });
        };
        SelectConfigurationModalComponent.prototype.aggregate = function (mos) {
            var selectedItems = this.selected;
            return mos.reduce(function (acc, curr) {
                curr.configurationType = curr.configurationType || curr.name;
                var selected = selectedItems && selectedItems.filter(function (val) { return val.url === curr.url; }).length > 0;
                var selectModalOption = {
                    body: [{ value: curr.name }],
                    obj: curr,
                    selected: selected
                };
                var selectModalObject = acc.find(function (val) { return val.body[0].value === curr.configurationType; });
                if (selectModalObject) {
                    selectModalObject.options.push(selectModalOption);
                }
                else {
                    selectModalObject = {
                        groupId: curr.id,
                        body: [{ value: curr.configurationType }],
                        options: [selectModalOption]
                    };
                    acc.push(selectModalObject);
                }
                return acc;
            }, []);
        };
        return SelectConfigurationModalComponent;
    }());
    SelectConfigurationModalComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-select-configuration-modal',
                    template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
                },] }
    ];
    SelectConfigurationModalComponent.ctorParameters = function () { return [
        { type: repository.RepositoryService }
    ]; };

    exports.DeviceProfileOperation = void 0;
    (function (DeviceProfileOperation) {
        DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
    })(exports.DeviceProfileOperation || (exports.DeviceProfileOperation = {}));

    var DeviceProfileComponent = /** @class */ (function () {
        function DeviceProfileComponent(route, alertService, inventoryService, location, breadcrumbService, bsModal, repositoryService) {
            this.route = route;
            this.alertService = alertService;
            this.inventoryService = inventoryService;
            this.location = location;
            this.breadcrumbService = breadcrumbService;
            this.bsModal = bsModal;
            this.repositoryService = repositoryService;
            this.DEVICE_TYPE_POPOVER = ngxComponents.gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceProfileComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var profileId, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            profileId = this.route.snapshot.paramMap.get('id');
                            _a = this;
                            return [4 /*yield*/, this.getDeviceProfile(profileId)];
                        case 1:
                            _a.deviceProfile = (_b.sent());
                            if (this.deviceProfile) {
                                this.profileName = this.deviceProfile.name;
                                if (!this.deviceProfile.c8y_DeviceProfile.software) {
                                    this.deviceProfile.c8y_DeviceProfile.software = [];
                                }
                                if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                                    this.deviceProfile.c8y_DeviceProfile.configuration = [];
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.addFirmware = function () {
            var _this = this;
            var initialState = {
                deviceTypeQuery: this.getDeviceTypeQuery(repository.RepositoryType.FIRMWARE),
                repositoryType: repository.RepositoryType.FIRMWARE,
                repositoryEntriesWithVersionsFn$: function (modalDialog) { return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, repository.RepositoryType.FIRMWARE); },
                icon: 'c8y-firmware',
                title: ngxComponents.gettext('Select firmware'),
                mode: ngxComponents.ModalSelectionMode.SINGLE
            };
            var modal = this.bsModal.show(repository.RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (firmwareList) {
                var _a = __read(firmwareList, 1), firmware = _a[0];
                if (!firmware) {
                    return;
                }
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, {
                    firmware: {
                        name: firmware.name,
                        version: firmware.version,
                        url: firmware.url,
                        isPatch: firmware.isPatch,
                        patchDependency: firmware.patchDependency
                    }
                });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        DeviceProfileComponent.prototype.getRepositoryEntriesWithVersions$ = function (searchTerm$, repoType) {
            var _this = this;
            return searchTerm$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (searchTerm) { return _this.repositoryService.listRepositoryEntries(repoType, {
                partialName: searchTerm,
                params: { pageSize: 100 },
                skipLegacy: true
            }); }), operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), operators.shareReplay(1));
        };
        DeviceProfileComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
            var _this = this;
            mos.forEach(function (mo) {
                mo.versions = _this.repositoryService.listBaseVersions(mo);
            });
            return mos;
        };
        DeviceProfileComponent.prototype.addConfiguration = function () {
            var _this = this;
            var modal = this.bsModal.show(SelectConfigurationModalComponent, {
                ignoreBackdropClick: true
            });
            modal.content.deviceTypeQuery = this.getDeviceTypeQuery(repository.RepositoryType.CONFIGURATION);
            modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (selectedConfigurations) {
                var selectedMapped = selectedConfigurations.map(function (selectedItem) {
                    return lodashEs.assign({
                        url: selectedItem.url,
                        name: selectedItem.name
                    }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
                });
                var merged = lodashEs.concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.configuration || []);
                var configuration = lodashEs.uniqWith(merged, function (arrVal, othVal) {
                    return arrVal.type && othVal.type && arrVal.type === othVal.type;
                });
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, { configuration: configuration });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        DeviceProfileComponent.prototype.addSoftware = function () {
            var _this = this;
            var initialState = {
                deviceTypeQuery: this.getDeviceTypeQuery(repository.RepositoryType.SOFTWARE),
                repositoryType: repository.RepositoryType.SOFTWARE,
                repositoryEntriesWithVersionsFn$: function (modalDialog) { return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, repository.RepositoryType.SOFTWARE); },
                selected: this.deviceProfile.c8y_DeviceProfile.software,
                icon: 'c8y-tools',
                title: ngxComponents.gettext('Select software'),
                mode: ngxComponents.ModalSelectionMode.MULTI
            };
            var modal = this.bsModal.show(repository.RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (selectedSoftware) {
                var selectedMapped = selectedSoftware.map(function (selectedItem) {
                    return {
                        name: selectedItem.name,
                        version: selectedItem.version,
                        url: selectedItem.url,
                        action: 'install'
                    };
                });
                var merged = lodashEs.concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.software || []);
                var software = lodashEs.uniqWith(merged, function (arrVal, othVal) {
                    return arrVal.name && othVal.name && arrVal.name === othVal.name;
                });
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, { software: software });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        Object.defineProperty(DeviceProfileComponent.prototype, "isDeviceProfileEmpty", {
            get: function () {
                var isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
                    this.deviceProfile.c8y_DeviceProfile.software.length > 0;
                var isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
                var isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
                    this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
                return isSoftware || isFirmware || isConfiguration;
            },
            enumerable: false,
            configurable: true
        });
        DeviceProfileComponent.prototype.removeItem = function (removedItem, category) {
            var deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
            };
            var filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(function (item) { return !lodashEs.isEqual(removedItem, item); });
            deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
            this.updateDeviceProfile(deviceProfilePartial);
        };
        DeviceProfileComponent.prototype.removeFirmware = function () {
            delete this.deviceProfile.c8y_DeviceProfile.firmware;
            this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
        };
        DeviceProfileComponent.prototype.updateDeviceProfile = function (partialDeviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                                delete partialDeviceProfile.c8y_Filter.type;
                            }
                            Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.inventoryService.update(partialDeviceProfile)];
                        case 2:
                            data = (_a.sent()).data;
                            this.deviceProfile = data;
                            this.profileName = this.deviceProfile.name;
                            this.alertService.success(ngxComponents.gettext('Device profile changed.'));
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.getDeviceProfile = function (profileId) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.inventoryService.detail(profileId)];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data];
                        case 2:
                            ex_2 = _a.sent();
                            this.alertService.addServerFailure(ex_2);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.getDeviceTypeQuery = function (repositoryType) {
            if (lodashEs.has(this.deviceProfile, 'c8y_Filter.type') &&
                !lodashEs.isEmpty(this.deviceProfile.c8y_Filter.type)) {
                if (repositoryType === repository.RepositoryType.CONFIGURATION) {
                    return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: "deviceType" } });
                }
                else {
                    return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, { __not: { __has: "c8y_Filter.type" } });
                }
            }
            return {};
        };
        return DeviceProfileComponent;
    }());
    DeviceProfileComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-profile',
                    template: "<c8y-title>{{ profileName }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\">\n  <div class=\"card m-b-4\" *ngIf=\"deviceProfile\">\n    <div class=\"card-header separator\">\n      <h4 translate>Name and device type</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <form #editNameForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.name\"\n                  name=\"name\"\n                  placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n                  size=\"{{ deviceProfile.name?.length || 1 }}\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"updateDeviceProfile({ name: deviceProfile.name }); editNameForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"editNameForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n        <div class=\"col-md-4\">\n          <form #editTypeForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn btn-clean text-primary\"\n                  popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n                  triggers=\"focus\"\n                  container=\"body\"\n                  placement=\"right\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                  name=\"type\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  size=\"{{ deviceProfile.c8y_Filter.type?.length || 1 }}\"\n                  [disabled]=\"isDeviceProfileEmpty\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\" updateDeviceProfile({ c8y_Filter: { type: deviceProfile.c8y_Filter.type } }); editTypeForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"isDeviceProfileEmpty\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Firmware\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-firmware'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n              >\n                {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n              >\n                <span class=\"text-label-small m-r-4\" translate>Version</span>\n                {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`firmware`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n        <button\n          title=\"{{ 'Add firmware' | translate }}\"\n          class=\"btn-add-block\"\n          (click)=\"addFirmware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'No firmware defined. Add firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Software\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group>\n        <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-tools'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.version }}\">\n                <span class=\"text-label-small m-r-8\" translate>Version</span>\n                {{ software.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                ((click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`software`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs \">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                (click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add software' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addSoftware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\">\n            {{ 'No software defined.' | translate }}\n          </span>\n          {{ 'Add software' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Configuration\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group class=\"m-b-8\">\n        <c8y-li *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'gears'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ configuration.name }}\"\n               >\n                {{ configuration.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"label label-info\">{{ configuration.type }}</span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`configuration`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add configuration' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addConfiguration()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\">\n            {{ 'No configuration defined.' | translate }}\n          </span>\n          {{ 'Add configuration' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    DeviceProfileComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: ngxComponents.AlertService },
        { type: client.InventoryService },
        { type: common.Location },
        { type: ngxComponents.BreadcrumbService },
        { type: modal.BsModalService },
        { type: repository.RepositoryService }
    ]; };

    var AddDeviceProfileComponent = /** @class */ (function () {
        function AddDeviceProfileComponent(modal, deviceProfileService) {
            var _this = this;
            this.modal = modal;
            this.deviceProfileService = deviceProfileService;
            this.DEVICE_TYPE_POPOVER = ngxComponents.gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
            this.deviceProfile = {
                name: '',
                type: 'c8y_Profile',
                c8y_Filter: {},
                c8y_DeviceProfile: {}
            };
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        AddDeviceProfileComponent.prototype.create = function () {
            return __awaiter(this, void 0, void 0, function () {
                var mo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(this.deviceProfile)];
                        case 1:
                            mo = (_a.sent()).data;
                            this._save(mo.id);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AddDeviceProfileComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        return AddDeviceProfileComponent;
    }());
    AddDeviceProfileComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-device-profile',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <h4 translate>\n      Add device profile\n    </h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Continue' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      translate\n    >\n      Continue\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    AddDeviceProfileComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: DeviceProfileService }
    ]; };

    var DeviceProfileListComponent = /** @class */ (function () {
        function DeviceProfileListComponent(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
            var _this = this;
            this.inventoryService = inventoryService;
            this.translateService = translateService;
            this.modalService = modalService;
            this.alertService = alertService;
            this.bsModalService = bsModalService;
            this.router = router;
            this.deviceProfileService = deviceProfileService;
            this.reloading = false;
            this.reload = new rxjs.BehaviorSubject(null);
            this.deviceProfiles$ = this.reload.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.deviceProfileService.getDeviceProfiles(); }), operators.tap(function () { return (_this.reloading = false); }));
        }
        DeviceProfileListComponent.prototype.ngOnInit = function () {
            this.loadDeviceProfiles();
        };
        DeviceProfileListComponent.prototype.loadDeviceProfiles = function () {
            this.reload.next();
        };
        DeviceProfileListComponent.prototype.createDeviceProfile = function () {
            return __awaiter(this, void 0, void 0, function () {
                var modal, profileId, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modal = this.bsModalService.show(AddDeviceProfileComponent, {
                                class: 'modal-sm'
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            profileId = _a.sent();
                            modal.close();
                            this.router.navigateByUrl("/device-profiles/" + profileId);
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.duplicateDeviceProfile = function (deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var copy, mo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            copy = lodashEs.cloneDeep(deviceProfile);
                            copy.id = null;
                            copy.name = 'Duplicate of ' + deviceProfile.name;
                            return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(copy)];
                        case 1:
                            mo = (_a.sent()).data;
                            this.router.navigateByUrl("/device-profiles/" + mo.id);
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.deleteDeviceProfile = function (deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceProfileName, title, confirmationText, finalQuestion, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            deviceProfileName = deviceProfile.name;
                            title = ngxComponents.gettext('Delete device profile');
                            confirmationText = this.translateService.instant(ngxComponents.gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName: deviceProfileName });
                            finalQuestion = this.translateService.instant(ngxComponents.gettext('Do you want to proceed?'));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.modalService.confirm(title, confirmationText + " " + finalQuestion, ngxComponents.Status.DANGER, {
                                    ok: ngxComponents.gettext('Delete')
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.delete(deviceProfile.id)];
                        case 3:
                            _a.sent();
                            this.reload.next();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.delete = function (profileId) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.inventoryService.delete(profileId)];
                        case 1:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Device profile deleted.'));
                            return [3 /*break*/, 3];
                        case 2:
                            ex_3 = _a.sent();
                            this.alertService.addServerFailure(ex_3);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return DeviceProfileListComponent;
    }());
    DeviceProfileListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-profile-list',
                    template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'icon-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state m-t-40\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n    >\n      {{ 'Add device profile' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li\n    class=\"page-sticky-header c8y-list__item--empty-actions hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{ 'Device profile' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Device type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button\n          class=\"btn-clean max-width-inherit\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n          Device type\n        </span>\n        <span class=\"text-truncate\" *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\">\n          {{ deviceProfile.c8y_Filter?.type }}\n        </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
                },] }
    ];
    DeviceProfileListComponent.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: core$1.TranslateService },
        { type: ngxComponents.ModalService },
        { type: ngxComponents.AlertService },
        { type: modal.BsModalService },
        { type: router.Router },
        { type: DeviceProfileService }
    ]; };

    var DeviceProfileGuard = /** @class */ (function () {
        function DeviceProfileGuard() {
        }
        DeviceProfileGuard.prototype.canActivate = function (route, state) {
            var contextData = route.data.contextData || route.parent.data.contextData;
            if (!contextData) {
                return false;
            }
            return this.hasSupportedOperation(contextData, exports.DeviceProfileOperation.APPLY_PROFILE);
        };
        DeviceProfileGuard.prototype.hasSupportedOperation = function (mo, operation) {
            var supported = mo.c8y_SupportedOperations || [];
            if (!supported) {
                return false;
            }
            return !!supported.find(function (supportedOperation) { return supportedOperation === operation; });
        };
        return DeviceProfileGuard;
    }());
    DeviceProfileGuard.decorators = [
        { type: core.Injectable }
    ];

    var DeviceTabProfileComponent = /** @class */ (function () {
        function DeviceTabProfileComponent(deviceRealtime, deviceProfileService, route, operationRealtime, alertService) {
            this.deviceRealtime = deviceRealtime;
            this.deviceProfileService = deviceProfileService;
            this.route = route;
            this.operationRealtime = operationRealtime;
            this.alertService = alertService;
            this.firmwareItems = [];
            this.softwareItems = [];
            this.configurationItems = [];
            this.pattern = '';
            this.reloading = false;
        }
        DeviceTabProfileComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.device = this.route.snapshot.parent.data.contextData;
                    this.getDeviceProfilesAndUpdateProfileItems();
                    this.subscribeToManagedObjects();
                    return [2 /*return*/];
                });
            });
        };
        DeviceTabProfileComponent.prototype.getDeviceProfilesAndUpdateProfileItems = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, profileId_1, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.reloading = true;
                            _a = this;
                            return [4 /*yield*/, this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type)];
                        case 1:
                            _a.deviceProfiles = _c.sent();
                            if (this.device.c8y_Profile) {
                                profileId_1 = this.device.c8y_Profile.profileId;
                                this.selectedProfile = this.deviceProfiles.data.find(function (mo) { return mo.id === profileId_1; });
                            }
                            this.updateProfileItems(this.device, this.selectedProfile);
                            _b = this;
                            return [4 /*yield*/, this.deviceProfileService.getProfileOperation(this.device.id)];
                        case 2:
                            _b.operation = _c.sent();
                            this.subscribeToOperations();
                            this.reloading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceTabProfileComponent.prototype.selectProfile = function (mo) {
            this.selectedProfile = mo;
            this.updateProfileItems(this.device, this.selectedProfile);
        };
        DeviceTabProfileComponent.prototype.createOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile)];
                        case 1:
                            _a.operation = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceTabProfileComponent.prototype.setPipe = function (filterStr) {
            this.pattern = filterStr;
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                return data.filter(function (mo) { return mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
            }));
        };
        DeviceTabProfileComponent.prototype.ngOnDestroy = function () {
            this.operationsSubscription.unsubscribe();
            this.moOnUpdateSubscription.unsubscribe();
            this.moOnDeleteSubscription.unsubscribe();
        };
        DeviceTabProfileComponent.prototype.updateProfileItems = function (device, profile) {
            this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
            this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
            this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
        };
        DeviceTabProfileComponent.prototype.subscribeToManagedObjects = function () {
            var _this = this;
            this.moOnUpdateSubscription = this.deviceRealtime
                .onUpdate$(this.device.id)
                .subscribe(function (managedObject) {
                _this.updateProfileItems(managedObject, _this.selectedProfile);
            });
            this.moOnDeleteSubscription = this.deviceRealtime.onDelete$(this.device.id).subscribe(function () {
                _this.alertService.danger(ngxComponents.gettext('This device has just been deleted. You will be redirected to "All devices" page now.'));
                window.location.href = '#/device';
            });
        };
        DeviceTabProfileComponent.prototype.subscribeToOperations = function () {
            var _this = this;
            this.operationsSubscription = this.operationRealtime
                .onAll$(this.device.id)
                .pipe(operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.filter(function (operation) { return operation.c8y_DeviceProfile; }))
                .subscribe(function (operation) {
                _this.operation = operation;
            });
        };
        return DeviceTabProfileComponent;
    }());
    DeviceTabProfileComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-tab-profile',
                    template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"getDeviceProfilesAndUpdateProfileItems()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Device profile</h4>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                [disabled]=\"!selectedProfile?.id\"\n                translate\n              >\n                Assign device profile\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-gray-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Currently installed</h4>\n      </div>\n      <div class=\"card-block\">\n        <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll flex-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-white\"></div>\n      <div class=\"bg-gray-white\"></div>\n    </div>\n  </div>\n</div>\n",
                    providers: [ngxComponents.ManagedObjectRealtimeService]
                },] }
    ];
    DeviceTabProfileComponent.ctorParameters = function () { return [
        { type: ngxComponents.ManagedObjectRealtimeService },
        { type: DeviceProfileService },
        { type: router.ActivatedRoute },
        { type: ngxComponents.OperationRealtimeService },
        { type: ngxComponents.AlertService }
    ]; };

    var DeviceTabProfileDetailComponent = /** @class */ (function () {
        function DeviceTabProfileDetailComponent() {
            this.emptyStateText = '';
            this.emptyStateDetails = '';
            this.showTextLabel = true;
        }
        return DeviceTabProfileDetailComponent;
    }());
    DeviceTabProfileDetailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-tab-profile-detail',
                    template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-white card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-gray-white  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-gray-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-gray-white\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-gray-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n"
                },] }
    ];
    DeviceTabProfileDetailComponent.propDecorators = {
        sectionTitle: [{ type: core.Input }],
        sectionIcon: [{ type: core.Input }],
        emptyStateText: [{ type: core.Input }],
        emptyStateDetails: [{ type: core.Input }],
        isProfileSelected: [{ type: core.Input }],
        isEmpty: [{ type: core.Input }],
        items: [{ type: core.Input }],
        showTextLabel: [{ type: core.Input }]
    };

    var DeviceProfileItemListComponent = /** @class */ (function () {
        function DeviceProfileItemListComponent() {
        }
        return DeviceProfileItemListComponent;
    }());
    DeviceProfileItemListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-device-profile-item-list',
                    template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item fit-h\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-gray-white\">\n    <div\n      class=\"c8y-list__item bg-gray-white\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-white hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n"
                },] }
    ];
    DeviceProfileItemListComponent.propDecorators = {
        icon: [{ type: core.Input }],
        comparisonResults: [{ type: core.Input }],
        showProfileItems: [{ type: core.Input }],
        showTextLabel: [{ type: core.Input }]
    };

    var deviceProfilesRoutes = [
        {
            path: 'device-profiles/:id',
            component: DeviceProfileComponent
        },
        {
            path: 'device-profiles',
            component: DeviceProfileListComponent
        }
    ];
    var deviceTabProfileRoutes = [
        {
            context: ngxComponents.ViewContext.Device,
            path: 'device-profile',
            component: DeviceTabProfileComponent,
            label: ngxComponents.gettext('Device profile'),
            icon: 'c8y-device-profile',
            canActivate: [DeviceProfileGuard]
        }
    ];
    var ɵ0 = deviceTabProfileRoutes;
    var DeviceProfileModule = /** @class */ (function () {
        function DeviceProfileModule() {
        }
        return DeviceProfileModule;
    }());
    DeviceProfileModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        DeviceProfileComponent,
                        DeviceProfileListComponent,
                        AddDeviceProfileComponent,
                        SelectConfigurationModalComponent,
                        DeviceTabProfileComponent,
                        DeviceTabProfileDetailComponent,
                        DeviceProfileItemListComponent
                    ],
                    exports: [],
                    imports: [
                        ngxComponents.CoreModule,
                        ngxComponents.CommonModule,
                        repository.RepositoryModule,
                        router.RouterModule.forChild(deviceProfilesRoutes),
                        dropdown.BsDropdownModule.forRoot(),
                        tooltip.TooltipModule,
                        forms.ReactiveFormsModule,
                        buttons.ButtonsModule,
                        popover.PopoverModule,
                        singleOperationDetails.SingleOperationDetailsModule
                    ],
                    entryComponents: [
                        AddDeviceProfileComponent,
                        SelectConfigurationModalComponent,
                        DeviceTabProfileComponent
                    ],
                    providers: [
                        {
                            provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                            useClass: DeviceProfileNavigationFactory,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        },
                        DeviceProfileService,
                        DeviceProfileGuard
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddDeviceProfileComponent = AddDeviceProfileComponent;
    exports.DeviceProfileComponent = DeviceProfileComponent;
    exports.DeviceProfileGuard = DeviceProfileGuard;
    exports.DeviceProfileItemListComponent = DeviceProfileItemListComponent;
    exports.DeviceProfileListComponent = DeviceProfileListComponent;
    exports.DeviceProfileModule = DeviceProfileModule;
    exports.DeviceProfileNavigationFactory = DeviceProfileNavigationFactory;
    exports.DeviceProfileService = DeviceProfileService;
    exports.DeviceTabProfileComponent = DeviceTabProfileComponent;
    exports.DeviceTabProfileDetailComponent = DeviceTabProfileDetailComponent;
    exports.SelectConfigurationModalComponent = SelectConfigurationModalComponent;
    exports["ɵ0"] = ɵ0;
    exports["ɵa"] = DeviceTabProfileComponent;
    exports["ɵb"] = DeviceTabProfileDetailComponent;
    exports["ɵc"] = DeviceProfileItemListComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-device-profile.umd.js.map
