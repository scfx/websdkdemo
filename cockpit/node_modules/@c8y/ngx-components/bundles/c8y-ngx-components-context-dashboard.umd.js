(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@c8y/ngx-components'),require('@ngx-translate/core'),require('@c8y/client'),require('@angular/router'),require('ngx-bootstrap/modal'),require('@angular/common'),require('@angular/forms'),require('ngx-bootstrap/dropdown'),require('ngx-bootstrap/popover'),require('ngx-bootstrap/tooltip'),exports, require('@angular/core'), require('lodash-es'), require('ngx-bootstrap/modal'), require('rxjs'), require('rxjs/operators'), require('@c8y/ngx-components'), require('@ngx-translate/core'), require('@angular/router'), require('@c8y/client'), require('@angular/forms'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/context-dashboard', ['@angular/core','@c8y/ngx-components','@ngx-translate/core','@c8y/client','@angular/router','ngx-bootstrap/modal','@angular/common','@angular/forms','ngx-bootstrap/dropdown','ngx-bootstrap/popover','ngx-bootstrap/tooltip','exports', '@angular/core', 'lodash-es', 'ngx-bootstrap/modal', 'rxjs', 'rxjs/operators', '@c8y/ngx-components', '@ngx-translate/core', '@angular/router', '@c8y/client', '@angular/forms', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.c8y.ngxComponents,global.ngxTranslate.core,global.c8y.client,global.ng.router,global.ngxBootstrap.modal,global.ng.common,global.ng.forms,global.ngxBootstrap.dropdown,global.ngxBootstrap.popover,global.ngxBootstrap.tooltip,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["context-dashboard"] = {}), global.ng.core, global.lodashEs, global.modal, global.rxjs, global.rxjs.operators, global.c8y["ngx-components"], global.i2, global.ng.router, global.client, global.ng.forms, global.dropdown, global.popover, global.tooltip, global.ng.common));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,ɵngcc9,ɵngcc10,exports, i0, lodashEs, modal, rxjs, operators, i1, i2, router, client, forms, dropdown, popover, tooltip, common) { 
var _c0 = ["config"];
function WidgetConfigComponent_h3_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 21);
    ɵngcc0.ɵɵtext(1, "Add widget");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetConfigComponent_h3_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 21);
    ɵngcc0.ɵɵtext(1, "Edit widget");
    ɵngcc0.ɵɵelementEnd();
} }
var _c1 = function () { return { standalone: true }; };
function WidgetConfigComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "div", 24);
    ɵngcc0.ɵɵelementStart(3, "div", 25);
    ɵngcc0.ɵɵelementStart(4, "input", 26);
    ɵngcc0.ɵɵlistener("ngModelChange", function WidgetConfigComponent_div_24_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.searchTerm = $event; })("keydown", function WidgetConfigComponent_div_24_Template_input_keydown_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.searchChange$.next($event); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 27);
    ɵngcc0.ɵɵelementStart(7, "button", 28);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_24_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.resetSearch(); });
    ɵngcc0.ɵɵelement(8, "i", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 4, "Search\u2026"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.searchTerm)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(6, _c1));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r3.searchTerm.length === 0 ? "search" : "close");
} }
function WidgetConfigComponent_div_25_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "h1");
    ɵngcc0.ɵɵelement(2, "i", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "small", 21);
    ɵngcc0.ɵɵtext(4, "Preview not available");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function WidgetConfigComponent_div_25_div_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 42);
} if (rf & 2) {
    var cmp_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("src", cmp_r13.previewImage, ɵngcc0.ɵɵsanitizeUrl);
} }
function WidgetConfigComponent_div_25_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 35);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_25_div_2_Template_div_click_2_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); var cmp_r13 = restoredCtx.$implicit; var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.select(cmp_r13); });
    ɵngcc0.ɵɵelementStart(3, "div", 36);
    ɵngcc0.ɵɵtemplate(4, WidgetConfigComponent_div_25_div_2_ng_container_4_Template, 5, 0, "ng-container", 37);
    ɵngcc0.ɵɵtemplate(5, WidgetConfigComponent_div_25_div_2_ng_template_5_Template, 1, 1, "ng-template", null, 38, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "p", 39);
    ɵngcc0.ɵɵelement(8, "c8y-highlight", 40);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var cmp_r13 = ctx.$implicit;
    var _r15 = ɵngcc0.ɵɵreference(6);
    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 7, cmp_r13.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r11.selected === cmp_r13);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !cmp_r13.previewImage)("ngIfElse", _r15);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("text", ɵngcc0.ɵɵpipeBind1(9, 9, cmp_r13.label));
    ɵngcc0.ɵɵproperty("pattern", ctx_r11.searchTerm);
} }
function WidgetConfigComponent_div_25_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 43);
    ɵngcc0.ɵɵelement(1, "h1", 44);
    ɵngcc0.ɵɵelementStart(2, "h3", 21);
    ɵngcc0.ɵɵtext(3, "No widgets found.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 45);
    ɵngcc0.ɵɵelementStart(5, "p", 46);
    ɵngcc0.ɵɵtext(6, "Rephrase your search term.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 47);
    ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_div_25_div_3_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.resetSearch(); });
    ɵngcc0.ɵɵtext(8, " Reset search ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetConfigComponent_div_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵtemplate(2, WidgetConfigComponent_div_25_div_2_Template, 10, 11, "div", 32);
    ɵngcc0.ɵɵtemplate(3, WidgetConfigComponent_div_25_div_3_Template, 9, 0, "div", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.searchResult || ctx_r4.components);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.searchResult && ctx_r4.searchResult.length === 0);
} }
function WidgetConfigComponent_div_26_c8y_dynamic_component_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-dynamic-component", 58);
} if (rf & 2) {
    var ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("config", ctx_r22.widgetConfig)("notFoundError", false);
} }
function WidgetConfigComponent_div_26_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 48);
    ɵngcc0.ɵɵelementStart(1, "h4", 49);
    ɵngcc0.ɵɵelementStart(2, "strong");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p", 50);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 23);
    ɵngcc0.ɵɵelementStart(9, "div", 51);
    ɵngcc0.ɵɵelementStart(10, "div", 52);
    ɵngcc0.ɵɵtext(11, "Configuration");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(13, "label", 53);
    ɵngcc0.ɵɵtext(14, "Title");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "input", 54);
    ɵngcc0.ɵɵlistener("ngModelChange", function WidgetConfigComponent_div_26_Template_input_ngModelChange_15_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.selected.data.title = $event; });
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(18, WidgetConfigComponent_div_26_c8y_dynamic_component_18_Template, 1, 2, "c8y-dynamic-component", 55);
    ɵngcc0.ɵɵelement(19, "c8y-dynamic-component", 56, 57);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("hidden", ctx_r5.mode !== "config");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 10, ctx_r5.selected.label), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 12, ctx_r5.selected.description), " ");
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵpropertyInterpolate2("placeholder", "", ɵngcc0.ɵɵpipeBind1(16, 14, "e.g."), " ", ɵngcc0.ɵɵpipeBind1(17, 16, ctx_r5.componentLabel), "");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.selected.data.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isUpgrade);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("componentId", ctx_r5.selected.id)("config", ctx_r5.widgetConfig)("notFoundError", false);
} }
function WidgetConfigComponent_div_27_Template(rf, ctx) { if (rf & 1) {
    var _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 59);
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵelementStart(2, "div", 60);
    ɵngcc0.ɵɵelementStart(3, "c8y-appearance-settings", 61);
    ɵngcc0.ɵɵlistener("themeClassChange", function WidgetConfigComponent_div_27_Template_c8y_appearance_settings_themeClassChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); var ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.styling.contentClass = $event; })("headerClassChange", function WidgetConfigComponent_div_27_Template_c8y_appearance_settings_headerClassChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); var ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.styling.headerClass = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 62);
    ɵngcc0.ɵɵelement(5, "c8y-widget-preview", 63);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("themeClass", ctx_r6.styling.contentClass)("headerClass", ctx_r6.styling.headerClass)("possibleStylingTheme", ctx_r6.possibleStyling.WIDGET_CONTENT_CLASSES)("possibleStylingHeader", ctx_r6.possibleStyling.WIDGET_HEADER_CLASSES)("defaultThemeClass", ctx_r6.defaultStyling.contentClass)("defaultHeaderClass", ctx_r6.defaultStyling.headerClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("previewClasses", ctx_r6.getStyle(true));
} }
var _c2 = function (a0) { return { widgetName: a0 }; };
function WidgetPreviewComponent_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtext(1, "Tab and layout");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetPreviewComponent_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 8);
    ɵngcc0.ɵɵtext(1, "Layout");
    ɵngcc0.ɵɵelementEnd();
} }
function WidgetPreviewComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "div", 15);
    ɵngcc0.ɵɵelementStart(2, "ul", 16);
    ɵngcc0.ɵɵelementStart(3, "li", 17);
    ɵngcc0.ɵɵelementStart(4, "a", 18);
    ɵngcc0.ɵɵelement(5, "i", 19);
    ɵngcc0.ɵɵelementStart(6, "span", 20);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "div", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.tab.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r2.tab.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.tab.name);
} }
var _c3 = function (a0) { return { "m-t-64": a0 }; };
var _c4 = ["dashboardDetailForm"];
var _c5 = function (a0) { return { active: a0 }; };
function DashboardDetailComponent_div_12_ul_15_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "li", 37);
    ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_div_12_ul_15_ng_container_1_Template_li_click_1_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); var icon_r9 = restoredCtx.$implicit; var ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.selectIcon(icon_r9); });
    ɵngcc0.ɵɵelementStart(2, "a", 38);
    ɵngcc0.ɵɵelement(3, "i", 39);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var icon_r9 = ctx.$implicit;
    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", icon_r9);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c5, ctx_r8.dashboard.icon === icon_r9));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", icon_r9);
} }
function DashboardDetailComponent_div_12_ul_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 35);
    ɵngcc0.ɵɵtemplate(1, DashboardDetailComponent_div_12_ul_15_ng_container_1_Template, 4, 5, "ng-container", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.filteredIcons);
} }
function DashboardDetailComponent_div_12_c8y_form_group_27_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2, "Description");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "textarea", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_c8y_form_group_27_Template_textarea_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.dashboard.description = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.dashboard.description);
} }
function DashboardDetailComponent_div_12_div_29_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵelementStart(3, "span", 30);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 31);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "input", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_29_Template_input_ngModelChange_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); var ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.dashboard.priority = $event; });
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Position in navigation"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(7, 8, "Position in navigation menu (10000 first, -10000 last)"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(10, 10, "Position in navigation"));
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(11, 12, "e.g."), " 500");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.dashboard.priority);
} }
function DashboardDetailComponent_div_12_div_30_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2, "Navigator menu item");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(4, "label", 15);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementStart(6, "input", 42);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_30_Template_input_ngModelChange_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(2); return !!(ctx_r16.dashboard.c8y_IsNavigatorNode = $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "span");
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 3, "Show in navigator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", !!ctx_r5.dashboard.c8y_IsNavigatorNode);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 5, "Show in navigator"));
} }
function DashboardDetailComponent_div_12_div_31_ng_template_6_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelement(1, "i", 26);
    ɵngcc0.ɵɵelementStart(2, "span", 46);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "slice");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 47);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var node_r21 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", node_r21.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r21.label.length > 15 ? ɵngcc0.ɵɵpipeBind3(4, 3, node_r21.label, 0, 15) + "..." : node_r21.label, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r21.priority, " ");
} }
function DashboardDetailComponent_div_12_div_31_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "ul", 45);
    ɵngcc0.ɵɵtemplate(5, DashboardDetailComponent_div_12_div_31_ng_template_6_li_5_Template, 7, 7, "li", 36);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r19 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "Position in navigator (10001 first, -10000 last)."), "\u00A0 ", ɵngcc0.ɵɵpipeBind1(3, 5, "Existing nodes:"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 7, ctx_r19.navigatorNodes$));
} }
function DashboardDetailComponent_div_12_div_31_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵelementStart(3, "span", 30);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, DashboardDetailComponent_div_12_div_31_ng_template_6_Template, 7, 9, "ng-template", null, 43, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(8, "button", 31);
    ɵngcc0.ɵɵelement(9, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "input", 44);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_31_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.dashboard.priority = $event; });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r18 = ɵngcc0.ɵɵreference(7);
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 6, "Position in navigator"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("popover", _r18);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 8, "Position in navigation"));
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(12, 10, "e.g."), " 500");
    ɵngcc0.ɵɵproperty("ngModel", ctx_r6.dashboard.priority);
} }
var _c6 = function (a0) { return { type: a0 }; };
function DashboardDetailComponent_div_12_div_32_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 52);
    ɵngcc0.ɵɵelement(1, "i", 53);
    ɵngcc0.ɵɵelementStart(2, "span", 54);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(3, " This dashboard is shared between all devices of the type ");
    ɵngcc0.ɵɵelementStart(4, "i");
    ɵngcc0.ɵɵtext(5, "{{ type }}");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6, ". ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r24 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(1, _c6, ctx_r24.dashboard.deviceTypeValue));
} }
function DashboardDetailComponent_div_12_div_32_Template(rf, ctx) { if (rf & 1) {
    var _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 48);
    ɵngcc0.ɵɵelementStart(2, "label", 15);
    ɵngcc0.ɵɵelementStart(3, "input", 49);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_div_32_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); var ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.dashboard.deviceType = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementStart(5, "span", 50);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(6, " Apply dashboard to all devices of type ");
    ɵngcc0.ɵɵelementStart(7, "i");
    ɵngcc0.ɵɵtext(8, "{{ type }}");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DashboardDetailComponent_div_12_div_32_div_9_Template, 7, 3, "div", 51);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r7.applyToDevicesOfTypeTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r7.dashboard.deviceType)("disabled", !ctx_r7.applyToDevicesOfTypePermitted);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("translateParams", ɵngcc0.ɵɵpureFunction1(5, _c6, ctx_r7.dashboard.deviceTypeValue));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.isDeviceType);
} }
function DashboardDetailComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "h6", 21);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 22);
    ɵngcc0.ɵɵelementStart(6, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(7, "label", 23);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 24);
    ɵngcc0.ɵɵelementStart(11, "button", 25);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 26);
    ɵngcc0.ɵɵelement(14, "span", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(15, DashboardDetailComponent_div_12_ul_15_Template, 2, 1, "ul", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "c8y-form-group", 29);
    ɵngcc0.ɵɵelementStart(17, "label");
    ɵngcc0.ɵɵelementStart(18, "span", 30);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "button", 31);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelement(23, "i", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "input", 33);
    ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_div_12_Template_input_ngModelChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.dashboard.name = $event; });
    ɵngcc0.ɵɵpipe(25, "translate");
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(27, DashboardDetailComponent_div_12_c8y_form_group_27_Template, 4, 1, "c8y-form-group", 8);
    ɵngcc0.ɵɵelementStart(28, "div", 6);
    ɵngcc0.ɵɵtemplate(29, DashboardDetailComponent_div_12_div_29_Template, 12, 14, "div", 34);
    ɵngcc0.ɵɵtemplate(30, DashboardDetailComponent_div_12_div_30_Template, 11, 7, "div", 34);
    ɵngcc0.ɵɵtemplate(31, DashboardDetailComponent_div_12_div_31_Template, 13, 12, "div", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(32, DashboardDetailComponent_div_12_div_32_Template, 10, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 15, "General"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 17, "Icon"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(12, 19, "Icon"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("c8yIcon", ctx_r1.dashboard.icon);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 21, "Menu label"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(22, 23, "Menu label to display in submenu when dashboard is attached"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 25, "Menu label"));
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(26, 27, ctx_r1.namePlaceholder));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.dashboard.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isReport);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.current && ctx_r1.deviceType);
} }
function AppearanceSettingsComponent_li_8_small_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 16);
    ɵngcc0.ɵɵtext(1, "Dashboard default");
    ɵngcc0.ɵɵelementEnd();
} }
function AppearanceSettingsComponent_li_8_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 8);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "label", 10);
    ɵngcc0.ɵɵelementStart(3, "input", 11);
    ɵngcc0.ɵɵlistener("click", function AppearanceSettingsComponent_li_8_Template_input_click_3_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); var themeClassItem_r2 = restoredCtx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.themeClassClick(themeClassItem_r2.class); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label", 12);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵtemplate(10, AppearanceSettingsComponent_li_8_small_10_Template, 2, 0, "small", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 14);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var themeClassItem_r2 = ctx.$implicit;
    var i_r3 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "groupradiocontentclass" + i_r3)("value", themeClassItem_r2.class)("ngModel", ctx_r0.themeClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", "groupradiocontentclass" + i_r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, themeClassItem_r2.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", themeClassItem_r2.class === ctx_r0.defaultThemeClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(12, 10, themeClassItem_r2.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function AppearanceSettingsComponent_li_13_small_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 16);
    ɵngcc0.ɵɵtext(1, "Dashboard default");
    ɵngcc0.ɵɵelementEnd();
} }
function AppearanceSettingsComponent_li_13_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 17);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "label", 10);
    ɵngcc0.ɵɵelementStart(3, "input", 18);
    ɵngcc0.ɵɵlistener("click", function AppearanceSettingsComponent_li_13_Template_input_click_3_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); var headerClassItem_r7 = restoredCtx.$implicit; var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.headerClassClick(headerClassItem_r7.class); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label", 12);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵtemplate(10, AppearanceSettingsComponent_li_13_small_10_Template, 2, 0, "small", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 14);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "i", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var headerClassItem_r7 = ctx.$implicit;
    var i_r8 = ctx.index;
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "groupradioheaderclass" + i_r8)("value", headerClassItem_r7.class)("ngModel", ctx_r1.headerClass);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", "groupradioheaderclass" + i_r8);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 8, headerClassItem_r7.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", headerClassItem_r7.class === ctx_r1.defaultHeaderClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(12, 10, headerClassItem_r7.description));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
} }
function ContextDashboardComponent_c8y_action_bar_item_0_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ContextDashboardComponent_c8y_action_bar_item_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.restore(); });
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵtext(3, "\u00A0");
    ɵngcc0.ɵɵelementStart(4, "span", 5);
    ɵngcc0.ɵɵtext(5, "Restore dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placement", "more");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", (ctx_r0.dashboard == null ? null : ctx_r0.dashboard.isFrozen) || ctx_r0.disabled);
} }
var _c7 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return { isLoading: a0, isFrozen: a1, isDisabled: a2, canDelete: a3, translateWidgetTitle: a4, allowFullscreen: a5, title: a6, widgetMargin: a7 }; };
function ReportDashboardListComponent_i_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 15);
} }
function ReportDashboardListComponent_i_13_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 16);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_i_13_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.textFilter$.next(""); });
    ɵngcc0.ɵɵelementEnd();
} }
function ReportDashboardListComponent_c8y_li_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 17);
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 19);
    ɵngcc0.ɵɵelementStart(4, "div", 20);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 21);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 22);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 3, "Report"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, "Description"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 7, "Show in navigator"), " ");
} }
function ReportDashboardListComponent_c8y_li_31_em_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "em", 40);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No description available."), " ");
} }
function ReportDashboardListComponent_c8y_li_31_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    var report_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵtextInterpolate1(" ", report_r7.description, " ");
} }
function ReportDashboardListComponent_c8y_li_31_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelement(1, "c8y-li-icon", 23);
    ɵngcc0.ɵɵelementStart(2, "c8y-li-body", 24);
    ɵngcc0.ɵɵelementStart(3, "div", 20);
    ɵngcc0.ɵɵelementStart(4, "button", 25);
    ɵngcc0.ɵɵelementStart(5, "span", 26);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 21);
    ɵngcc0.ɵɵelementStart(8, "small", 27);
    ɵngcc0.ɵɵtemplate(9, ReportDashboardListComponent_c8y_li_31_em_9_Template, 3, 3, "em", 28);
    ɵngcc0.ɵɵtemplate(10, ReportDashboardListComponent_c8y_li_31_ng_template_10_Template, 1, 1, "ng-template", null, 29, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 22);
    ɵngcc0.ɵɵelement(13, "span", 30);
    ɵngcc0.ɵɵelementStart(14, "label", 31);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementStart(16, "input", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function ReportDashboardListComponent_c8y_li_31_Template_input_ngModelChange_16_listener($event) { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); var report_r7 = restoredCtx.$implicit; return !!(report_r7.c8y_IsNavigatorNode = $event); })("change", function ReportDashboardListComponent_c8y_li_31_Template_input_change_16_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); var report_r7 = restoredCtx.$implicit; var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.update(report_r7); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(17, "span");
    ɵngcc0.ɵɵelementStart(18, "span", 33);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 34);
    ɵngcc0.ɵɵelementStart(22, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_c8y_li_31_Template_button_click_22_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); var report_r7 = restoredCtx.$implicit; var ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.delete(report_r7); });
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelement(24, "i", 36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "div", 37);
    ɵngcc0.ɵɵelementStart(26, "button", 38);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_c8y_li_31_Template_button_click_26_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); var report_r7 = restoredCtx.$implicit; var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.delete(report_r7); });
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelement(28, "i", 39);
    ɵngcc0.ɵɵtext(29, " Delete ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var report_r7 = ctx.$implicit;
    var _r10 = ɵngcc0.ɵɵreference(11);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", report_r7.icon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", report_r7.name);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/reports/", report_r7.id, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", report_r7.name, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !report_r7.description)("ngIfElse", _r10);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 11, "Show in navigator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", !!report_r7.c8y_IsNavigatorNode);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 13, "Show in navigator"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 15, "Remove report"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(27, 17, "Remove report"));
} }
function ReportDashboardListComponent_div_32_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 41);
    ɵngcc0.ɵɵelement(1, "h1", 42);
    ɵngcc0.ɵɵelementStart(2, "h3", 0);
    ɵngcc0.ɵɵtext(3, " There are no reports defined ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 0);
    ɵngcc0.ɵɵtext(5, " Add a report first. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div");
    ɵngcc0.ɵɵelementStart(7, "button", 43);
    ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_div_32_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.add(); });
    ɵngcc0.ɵɵtext(8, " Add report ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "p", 44);
    ɵngcc0.ɵɵelementStart(10, "small", 0);
    ɵngcc0.ɵɵdisableBindings();
    ɵngcc0.ɵɵtext(11, "Find out more in the ");
    ɵngcc0.ɵɵelementStart(12, "a", 45);
    ɵngcc0.ɵɵtext(13, " User guide`KEEP_ORIGINAL` ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(14, ". ");
    ɵngcc0.ɵɵenableBindings();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
var _c8 = function (a0) { return { "icon-spin": a0 }; };
var _c9 = function (a0) { return { link: a0 }; };
function WelcomeToCockpit_div_10_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "c8y-quick-link", 8);
    ɵngcc0.ɵɵlistener("click", function WelcomeToCockpit_div_10_Template_c8y_quick_link_click_1_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); var link_r1 = restoredCtx.$implicit; return link_r1.click ? link_r1.click() : false; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var link_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", link_r1.icon)("label", link_r1.label)("actionName", "welcomeWidgetClicked")("actionData", ɵngcc0.ɵɵpureFunction1(4, _c9, link_r1.label));
} }
var _c10 = function () { return {}; };
var _c11 = function () { return { isDisabled: false, canDelete: false, translateWidgetTitle: true, allowFullscreen: false, title: false }; };
var _c12 = function (a0) { return { isLoading: a0, isDisabled: true, canDelete: false, translateWidgetTitle: true, allowFullscreen: false, title: false }; };
'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CONTEXT_DASHBOARD_CONFIG = new i0.InjectionToken('ContextDashboardConfig');
    exports.ContextDashboardType = void 0;
    (function (ContextDashboardType) {
        ContextDashboardType["Device"] = "device";
        ContextDashboardType["DeviceType"] = "type";
        ContextDashboardType["Group"] = "group";
        ContextDashboardType["Named"] = "name";
        ContextDashboardType["Report"] = "report";
    })(exports.ContextDashboardType || (exports.ContextDashboardType = {}));
    var WIDGET_HEADER_CLASSES = [
        {
            label: i1.gettext('Regular`style`'),
            class: 'panel-title-regular',
            description: i1.gettext('The widget has no border between header and content.')
        },
        {
            label: i1.gettext('Border`style`'),
            class: 'panel-title-border',
            description: i1.gettext('The widget has a small separation border between header and content.')
        },
        {
            label: i1.gettext('Overlay`style`'),
            class: 'panel-title-overlay',
            description: i1.gettext('The widget content overlays the header.')
        },
        {
            label: i1.gettext('Hidden`style`'),
            class: 'panel-title-hidden',
            description: i1.gettext('The widget header is not shown.')
        }
    ];
    var WIDGET_CONTENT_CLASSES = [
        {
            label: i1.gettext('Light`style`'),
            class: 'panel-content-light',
            description: i1.gettext('The widget is styled with a light background and has low contrast.')
        },
        {
            label: i1.gettext('Dark`style`'),
            class: 'panel-content-dark',
            description: i1.gettext('The widget is styled with a dark background and has high contrast.')
        },
        {
            label: i1.gettext('Transparent`style`'),
            class: 'panel-content-transparent',
            description: i1.gettext('The widget is styled with a transparent background and therefore is border-less.')
        },
        {
            label: i1.gettext('Branded`style`'),
            class: 'panel-content-branded',
            description: i1.gettext('The widget is styled with the main brand color.')
        }
    ];
    var DASHBOARD_THEME_CLASSES = [
        {
            label: i1.gettext('Light`theme`'),
            class: 'dashboard-theme-light',
            description: i1.gettext('The dashboard is styled with a light background and has low contrast.')
        },
        {
            label: i1.gettext('Dark`theme`'),
            class: 'dashboard-theme-dark',
            description: i1.gettext('The dashboard is styled with a dark background and has high contrast.')
        },
        {
            label: i1.gettext('Transparent`theme`'),
            class: 'dashboard-theme-transparent',
            description: i1.gettext('The dashboard is styled with a transparent background and therefore is border-less.')
        },
        {
            label: i1.gettext('Branded`theme`'),
            class: 'dashboard-theme-branded',
            description: i1.gettext('The dashboard is styled with the main brand color.')
        }
    ];
    var STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];

    var WidgetService = /** @class */ (function () {
        function WidgetService(dynamicComponentService, translateService, moduleConfig) {
            var _this = this;
            this.dynamicComponentService = dynamicComponentService;
            this.translateService = translateService;
            this.moduleConfig = moduleConfig;
            this.dynamicComponentService.items$.subscribe(function (widgets) {
                _this.widgets = widgets;
            });
        }
        WidgetService.prototype.getWidgetDefinition = function (componentId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.dynamicComponentService.getById(componentId)];
                });
            });
        };
        WidgetService.prototype.getWidgetDefinitions = function () {
            var _this = this;
            var translatedComponents = this.widgets.map(function (cmp) { return (Object.assign(Object.assign({}, cmp), { label: _this.translateService.instant(cmp.label) })); });
            return lodashEs.cloneDeep(lodashEs.sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
        };
        WidgetService.prototype.mapLegacy = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var cmp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getWidgetDefinition(widget.componentId || widget.name)];
                        case 1:
                            cmp = _a.sent();
                            if (lodashEs.get(cmp, 'data.settings.upgrade')) {
                                widget.widgetComponent = cmp.data.settings.widgetComponent;
                                widget.configComponent = cmp.data.settings.configComponent;
                                widget.templateUrl = cmp.data.settings.templateUrl;
                                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                                widget.transformConfigWithContext =
                                    cmp.data.settings.componentTransformConfigWithContext ||
                                        cmp.data.settings.transformConfigWithContext ||
                                        widget.transformConfigWithContext;
                            }
                            else {
                                delete widget.templateUrl;
                                delete widget.configTemplateUrl;
                            }
                            return [2 /*return*/, widget];
                    }
                });
            });
        };
WidgetService.ɵfac = function WidgetService_Factory(t) { return new (t || WidgetService)(ɵngcc0.ɵɵinject(ɵngcc1.DynamicComponentService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.DynamicComponentService }, { type: ɵngcc2.TranslateService }, { type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }]; }, null); })();
        return WidgetService;
    }());
    WidgetService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(i0__namespace.ɵɵinject(i1__namespace.DynamicComponentService), i0__namespace.ɵɵinject(i2__namespace.TranslateService), i0__namespace.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); }, token: WidgetService, providedIn: "root" });
    WidgetService.ctorParameters = function () { return [
        { type: i1.DynamicComponentService },
        { type: i2.TranslateService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
    ]; };

    var ContextDashboardService = /** @class */ (function () {
        function ContextDashboardService(inventory, tabs, modal, translateService, router, user, appState, navigator, permissions) {
            this.inventory = inventory;
            this.tabs = tabs;
            this.modal = modal;
            this.translateService = translateService;
            this.router = router;
            this.user = user;
            this.appState = appState;
            this.navigator = navigator;
            this.permissions = permissions;
            this.REPORT_PARTIAL_NAME = 'report_';
            this.cache = new Map();
            this.DEFAULT_PAGESIZE = 1000;
            this.FRAGMENT_NAME = 'c8y_Dashboard';
            this.DASHBOARD_ROUTE_PATH = 'dashboard';
            this.INDEX_SPLIT = '!';
            this._formDisabled = true;
        }
        Object.defineProperty(ContextDashboardService.prototype, "formDisabled", {
            get: function () {
                return this._formDisabled;
            },
            set: function (value) {
                this._formDisabled = value;
            },
            enumerable: false,
            configurable: true
        });
        ContextDashboardService.prototype.create = function (dashboardCfg, context, name) {
            if (name === void 0) { name = ''; }
            return __awaiter(this, void 0, void 0, function () {
                var id, dashboardType, dashboard, value, fragmentKey, data, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            id = '';
                            if (context) {
                                id = context.contextData.id;
                                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
                            }
                            if (name) {
                                dashboardType = exports.ContextDashboardType.Named;
                            }
                            dashboard = {};
                            lodashEs.assign(dashboard, { c8y_Dashboard: dashboardCfg });
                            value = dashboardType === exports.ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : (name || id);
                            fragmentKey = this.createFragmentKey(dashboardType, value);
                            dashboard[fragmentKey] = {};
                            if (this.shouldSetGlobal(dashboard, context)) {
                                lodashEs.assign(dashboard, { c8y_Global: {} });
                            }
                            dashboard.name = dashboard.c8y_Dashboard.name;
                            if (!(dashboardType === exports.ContextDashboardType.Group || dashboardType === exports.ContextDashboardType.Device || (context && dashboardType === exports.ContextDashboardType.Named))) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.inventory.childAdditionsCreate(dashboard, id)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.inventory.create(dashboard)];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            data = (_a).data;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.detail = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.detail(dashboardMO)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboardMO.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.update = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                var keepFragments, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dashboard.name = dashboard.c8y_Dashboard.name;
                            keepFragments = this.clean(lodashEs.pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
                            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
                            return [4 /*yield*/, this.inventory.update(keepFragments)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboard.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.delete = function (dashboard, withConfirmation) {
            if (withConfirmation === void 0) { withConfirmation = true; }
            return __awaiter(this, void 0, void 0, function () {
                var msg, tabToRemove, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            if (!withConfirmation) return [3 /*break*/, 2];
                            msg = i1.gettext("You are about to delete the dashboard \"{{ dashboardName }}\". Do you want to proceed?");
                            if (this.isDeviceType(dashboard)) {
                                msg = i1.gettext("You are about to delete the dashboard \"{{ dashboardName }}\" from all devices of the type \"{{ deviceType }}\".\n           Do you want to proceed?");
                            }
                            return [4 /*yield*/, this.modal.confirm(i1.gettext('Delete dashboard'), this.translateService.instant(msg, {
                                    dashboardName: dashboard.c8y_Dashboard.name,
                                    deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                                }), i1.Status.DANGER, {
                                    ok: i1.gettext('Delete'),
                                    cancel: i1.gettext('Cancel')
                                })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.inventory.delete(dashboard)];
                        case 3:
                            _a.sent();
                            tabToRemove = Array.from(this.tabs.state).find(function (tab) { return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboard.id); });
                            this.tabs.remove(tabToRemove);
                            this.tabs.refresh();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.activateDashboards = function (route, types) {
            var dashboardId = route.params.dashboardId;
            if (dashboardId) {
                return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(operators.tap(function (dashboard) {
                    route.data = { dashboard: dashboard };
                }), operators.map(function () { return true; }), operators.catchError(function () {
                    return rxjs.of(false);
                }));
            }
            return this.getTabs$(route.data.contextData, types);
        };
        ContextDashboardService.prototype.getNamedDashboardOrCreate = function (name, defaultWidgets, context) {
            var _this = this;
            var children = this.mapWidgets(defaultWidgets);
            return this.getDashboard$(name, [exports.ContextDashboardType.Named]).pipe(operators.throwIfEmpty(), operators.catchError(function () { return rxjs.from(_this.create({
                children: children,
                widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
            }, context, name)); }));
        };
        ContextDashboardService.prototype.refreshTabs = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var tabToUpdate, data, _a, icon, priority, name;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!this.isNamed(dashboardMO)) return [3 /*break*/, 2];
                            tabToUpdate = Array.from(this.tabs.state).find(function (tab) { return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboardMO.id); });
                            return [4 /*yield*/, this.detail(dashboardMO)];
                        case 1:
                            data = _b.sent();
                            if (tabToUpdate) {
                                _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name = _a.name;
                                tabToUpdate.icon = icon;
                                tabToUpdate.priority = priority;
                                tabToUpdate.label = name;
                            }
                            this.tabs.refresh();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.updateNavigatorItem = function (mo) {
            var _this = this;
            this.navigator.state.forEach(function (node) {
                if (node.path === "reports/" + mo.id) {
                    _this.navigator.remove(node);
                }
            });
            if (mo.c8y_IsNavigatorNode) {
                var nodeToAdd = new i1.NavigatorNode({
                    label: mo.name,
                    path: "reports/" + mo.id,
                    icon: mo.icon,
                    priority: mo.priority
                });
                this.navigator.add(nodeToAdd);
            }
        };
        ContextDashboardService.prototype.navigateToDashboard = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (/dashboard/.test(this.router.url)) {
                        this.router.navigate(['..', dashboardMO.id], {
                            relativeTo: i1.getActivatedRoute(this.router)
                        });
                    }
                    else {
                        this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                            relativeTo: i1.getActivatedRoute(this.router)
                        });
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextDashboardService.prototype.canEditDashboard = function (mo) {
            return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
        };
        ContextDashboardService.prototype.isNamed = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.isReport = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT + _this.REPORT_PARTIAL_NAME).test(prop); });
        };
        ContextDashboardService.prototype.isDeviceType = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) { return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.DeviceType + _this.INDEX_SPLIT).test(prop); });
        };
        ContextDashboardService.prototype.getFilteredDashboardStyles = function (styleList) {
            return styleList.filter(function (c) { return STYLING_CLASS_PREFIXES.some(function (classPrefix) { return c.startsWith(classPrefix); }); });
        };
        ContextDashboardService.prototype.getStyling = function (styleList, styleName, defaultValue) {
            var styling = styleList.find(function (style) { return style && new RegExp("-" + styleName + "$", 'i').test(style.class); });
            return styling ? styling.class : defaultValue;
        };
        ContextDashboardService.prototype.mapWidgets = function (widgets) {
            return lodashEs.keyBy(widgets.map(function (widget) {
                widget.id = String(Math.random()).substr(2);
                return widget;
            }), 'id');
        };
        ContextDashboardService.prototype.getDashboard$ = function (dashboardIdOrName, dashboardType, mo) {
            var _this = this;
            var cache = this.cache.get(dashboardIdOrName);
            var dashboards = mo
                ? this.getContextDashboards(mo, dashboardType)
                : [this.getNamedDashboard(dashboardIdOrName)];
            var cacheRefresh = this.getContextDashboards$(dashboards).pipe(operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.filter(function (dashboard) { return dashboard.id === dashboardIdOrName ||
                lodashEs.has(dashboard, "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT + dashboardIdOrName); }));
            return cache ? rxjs.of(cache) : cacheRefresh;
        };
        ContextDashboardService.prototype.getTabs$ = function (mo, dashboardType) {
            var _this = this;
            var dashboards = this.getContextDashboards(mo, dashboardType);
            this.setBaseContextRoute(mo, dashboardType);
            return this.getContextDashboards$(dashboards).pipe(operators.map(function (dashboard) { return _this.removeDashboardMoProperty(dashboard); }), operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.map(function (dashboard) { return _this.createDashboardTab(dashboard); }), operators.toArray());
        };
        ContextDashboardService.prototype.getContextDashboards$ = function (requests) {
            return rxjs.from(requests).pipe(operators.mergeAll(), operators.mergeMap(function (response) { return response.data; }));
        };
        ContextDashboardService.prototype.setBaseContextRoute = function (mo, dashboardType) {
            var type = dashboardType.includes(exports.ContextDashboardType.Device)
                ? exports.ContextDashboardType.Device
                : exports.ContextDashboardType.Group;
            this.currentContextRoute = type + "/" + mo.id;
        };
        /**
         * Cleans already corrupted dashboards from dashboardMo property.
         * Added to fix dashboards on the cloud instance (eu-latest).
         * @deprecated This is going to be removed after 1007.7.0.
         */
        ContextDashboardService.prototype.removeDashboardMoProperty = function (dashboard) {
            var dashboardCopy = lodashEs.cloneDeep(dashboard);
            var children = lodashEs.get(dashboardCopy, 'c8y_Dashboard.children');
            var updateDashboard = false;
            lodashEs.forEach(children, function (child) {
                if (lodashEs.get(child, 'componentTransformConfigWithContext')) {
                    delete child.componentTransformConfigWithContext;
                    updateDashboard = true;
                }
                if (lodashEs.get(child, 'config.dashboardMo')) {
                    delete child.config.dashboardMo;
                    updateDashboard = true;
                }
            });
            if (updateDashboard) {
                this.update(dashboardCopy);
            }
            return dashboardCopy;
        };
        ContextDashboardService.prototype.cacheDashboard = function (dashboard) {
            this.cache.set(dashboard.id, dashboard);
        };
        ContextDashboardService.prototype.createDashboardTab = function (dashboard) {
            var _dashboard = dashboard.c8y_Dashboard, id = dashboard.id;
            return {
                icon: _dashboard.icon,
                path: this.DASHBOARD_ROUTE_PATH + "/" + id,
                label: _dashboard.name,
                priority: _dashboard.priority,
                hide: this.isReport(dashboard)
            };
        };
        ContextDashboardService.prototype.clean = function (dashboard) {
            var jsonString = JSON.stringify(dashboard, function (key, value) {
                if (key === '$$hashKey' || key === 'klasses') {
                    return undefined;
                }
                return value;
            });
            return JSON.parse(jsonString);
        };
        ContextDashboardService.prototype.getNamedDashboard = function (name) {
            return this.inventory.list({
                fragmentType: "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + exports.ContextDashboardType.Named + this.INDEX_SPLIT + name,
                pageSize: 1
            });
        };
        ContextDashboardService.prototype.getContextDashboards = function (mo, dashboardType) {
            var _this = this;
            return dashboardType.map(function (type) { return _this.inventory.list({
                fragmentType: _this.createDashboardFragment(mo, type),
                pageSize: _this.DEFAULT_PAGESIZE
            }); });
        };
        ContextDashboardService.prototype.createDashboardFragment = function (mo, type) {
            var value;
            if (mo.c8y_Report) {
                value = "" + this.REPORT_PARTIAL_NAME + mo.id;
            }
            else {
                value = type === exports.ContextDashboardType.DeviceType ? mo.type : mo.id;
            }
            return "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + type + this.INDEX_SPLIT + value;
        };
        ContextDashboardService.prototype.getDashboardTypeFromViewContext = function (dashboardCfg, context) {
            var dashboardType;
            if (context.context === i1.ViewContext.Device) {
                dashboardType = dashboardCfg.deviceType
                    ? exports.ContextDashboardType.DeviceType
                    : exports.ContextDashboardType.Device;
            }
            if (context.context === i1.ViewContext.Group) {
                dashboardType = exports.ContextDashboardType.Group;
            }
            return dashboardType;
        };
        ContextDashboardService.prototype.createFragmentKey = function (contextDashboardType, value) {
            return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
        };
        ContextDashboardService.prototype.shouldSetGlobal = function (dashboard, context) {
            if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) || this.isDeviceType(dashboard)) {
                return {};
            }
            return null;
        };
ContextDashboardService.ɵfac = function ContextDashboardService_Factory(t) { return new (t || ContextDashboardService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.TabsService), ɵngcc0.ɵɵinject(ɵngcc1.ModalService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc3.UserService), ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions)); };
ContextDashboardService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ContextDashboardService, factory: function (t) { return ContextDashboardService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardService, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ɵngcc1.TabsService }, { type: ɵngcc1.ModalService }, { type: ɵngcc2.TranslateService }, { type: ɵngcc4.Router }, { type: ɵngcc3.UserService }, { type: ɵngcc1.AppStateService }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc1.Permissions }]; }, null); })();
        return ContextDashboardService;
    }());
    ContextDashboardService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i1.TabsService },
        { type: i1.ModalService },
        { type: i2.TranslateService },
        { type: router.Router },
        { type: client.UserService },
        { type: i1.AppStateService },
        { type: i1.NavigatorService },
        { type: i1.Permissions }
    ]; };

    var WidgetConfigComponent = /** @class */ (function () {
        function WidgetConfigComponent(widgetService, modal, contextDashboardService) {
            var _this = this;
            this.widgetService = widgetService;
            this.modal = modal;
            this.contextDashboardService = contextDashboardService;
            this.mode = 'select';
            this.searchChange$ = new rxjs.Subject();
            this.searchTerm = '';
            this.styling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.defaultStyling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.possibleStyling = { WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES: WIDGET_CONTENT_CLASSES };
            this.isUpgrade = false;
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        Object.defineProperty(WidgetConfigComponent.prototype, "isEdit", {
            get: function () {
                return !!this.current;
            },
            enumerable: false,
            configurable: true
        });
        WidgetConfigComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.components = this.widgetService.getWidgetDefinitions();
            if (this.selected) {
                this.current = lodashEs.clone(this.selected);
                this.select(this.selected, this.isEdit ? 'config' : 'select');
            }
            this.searchSub = this.searchChange$
                .pipe(operators.switchMap(function (event) { return rxjs.iif(function () { return event.which !== 13; }, rxjs.timer(200), rxjs.timer(10)); }))
                .subscribe(function () {
                _this.search();
            });
            if (this.mo.c8y_Dashboard.classes) {
                this.styling = this.setDefaultStyle(Object.assign(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses), (this.isEdit ? this.current.data.classes : {})));
                this.defaultStyling = this.setDefaultStyle(Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses));
            }
        };
        WidgetConfigComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hookSuccess, _a, _x, _y, _width, _height, _b, id, name, widget;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.dynamicComponent.callLifeCycleHooks().toPromise()];
                        case 1:
                            hookSuccess = _c.sent();
                            if (!hookSuccess) {
                                return [2 /*return*/];
                            }
                            _a = this.selected.data, _x = _a._x, _y = _a._y, _width = _a._width, _height = _a._height;
                            if (this.widgetConfig && this.widgetConfig.device) {
                                _b = this.widgetConfig.device, id = _b.id, name = _b.name;
                                this.widgetConfig.device = { id: id, name: name };
                            }
                            widget = Object.assign({ _x: _x,
                                _y: _y,
                                _width: _width,
                                _height: _height, config: lodashEs.omit(this.widgetConfig, 'settings'), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
                            this._save(widget);
                            return [2 /*return*/];
                    }
                });
            });
        };
        WidgetConfigComponent.prototype.select = function (cmp, mode) {
            if (mode === void 0) { mode = 'config'; }
            cmp.data = cmp.data || {};
            this.selected = cmp;
            this.isUpgrade = !!lodashEs.get(cmp, 'data.settings.upgrade');
            this.contextDashboardService.formDisabled = this.isUpgrade;
            if (this.isEdit) {
                var _a = this.current.data, _x = _a._x, _y = _a._y, _width = _a._width, _height = _a._height, classes = _a.classes, title = _a.title;
                this.selected.data = Object.assign(Object.assign({}, this.selected.data), { _x: _x, _y: _y, _width: _width, _height: _height, classes: classes, title: title });
            }
            this.widgetConfig = lodashEs.cloneDeep(this.composeWidgetConfig(this.selected, this.context));
            this.selected.data.title = this.selected.data.title || cmp.label;
            this.componentLabel = cmp.label;
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.search = function () {
            var _this = this;
            if (this.searchTerm.length > 0) {
                this.searchResult = this.components.filter(function (cmp) { return new RegExp(lodashEs.escapeRegExp(_this.searchTerm.trim()), 'i').test(cmp.label); });
            }
            else {
                this.resetSearch();
            }
        };
        WidgetConfigComponent.prototype.resetSearch = function () {
            this.searchTerm = '';
            this.searchResult = undefined;
        };
        WidgetConfigComponent.prototype.changeMode = function (mode) {
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        WidgetConfigComponent.prototype.getStyle = function (isPreview) {
            if (isPreview === void 0) { isPreview = false; }
            var cssClasses = {};
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
                cssClasses[this.styling.headerClass] = true;
            }
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
                cssClasses[this.styling.contentClass] = true;
            }
            if (isPreview) {
                cssClasses["dashboard-theme-" + this.defaultStyling.contentClass.split('-').pop()] = true;
            }
            return cssClasses;
        };
        WidgetConfigComponent.prototype.ngOnDestroy = function () {
            this.contextDashboardService.formDisabled = true;
            if (this.searchSub) {
                this.searchSub.unsubscribe();
            }
        };
        WidgetConfigComponent.prototype.isDashboardDefaultStyle = function (className) {
            var allClasses = Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (cssClass) { return ({ class: cssClass }); });
            var style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
            return !!style;
        };
        WidgetConfigComponent.prototype.setDefaultStyle = function (setClasses) {
            var _this = this;
            var contentClass = this.styling.contentClass;
            var headerClass = this.styling.headerClass;
            var styles = this.contextDashboardService.getFilteredDashboardStyles(Object.keys(setClasses))
                .map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                contentClass = _this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
                headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
            });
            return { headerClass: headerClass, contentClass: contentClass };
        };
        WidgetConfigComponent.prototype.composeWidgetConfig = function (selectedComponent, context) {
            if (context === void 0) { context = {}; }
            var setting = Object.assign({ settings: Object.assign(Object.assign(Object.assign(Object.assign({}, selectedComponent.data.settings), lodashEs.get(selectedComponent.data.settings, 'ng1.options')), lodashEs.get(selectedComponent.data, 'ng1.options')), { context: context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
            return this.applyTargetIfDeviceDashboard(setting);
        };
        WidgetConfigComponent.prototype.applyTargetIfDeviceDashboard = function (widgetConfig) {
            var isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            if (isDeviceType) {
                widgetConfig.settings.hideTarget = isDeviceType;
                var noDeviceTarget = widgetConfig.settings.ng1
                    ? widgetConfig.settings.ng1.options.noDeviceTarget
                    : widgetConfig.settings.noDeviceTarget;
                if (!noDeviceTarget) {
                    widgetConfig.device = {
                        id: this.context.id,
                        name: this.context.name
                    };
                }
            }
            return widgetConfig;
        };
WidgetConfigComponent.ɵfac = function WidgetConfigComponent_Factory(t) { return new (t || WidgetConfigComponent)(ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService)); };
WidgetConfigComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetConfigComponent, selectors: [["c8y-widget-config"]], viewQuery: function WidgetConfigComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dynamicComponent = _t.first);
    } }, decls: 35, vars: 25, consts: [[1, "modal-header", "separator"], ["translate", "", 4, "ngIf"], ["name", "form"], ["configForm", "ngForm"], [1, "c8y-modal-tabs"], [1, "tabContainer"], [1, "nav", "nav-tabs", "nav-tabsc8y", "p-l-24"], ["type", "button", 1, "btn", 3, "click"], ["c8yIcon", "th-large"], ["translate", "", 1, "txt"], ["type", "button", 1, "btn", 3, "disabled", "click"], ["c8yIcon", "cog"], ["c8yIcon", "paint-brush"], [1, "modal-inner-scroll"], ["class", "bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0", "style", "z-index: 2;", 4, "ngIf"], ["class", "modal-body bg-gray-lighter", 4, "ngIf"], ["class", "modal-body", "style", "min-height: calc(100vh - 290px);", 3, "hidden", 4, "ngIf"], ["class", "modal-body p-t-0", "style", "min-height: calc(100vh - 290px);", 4, "ngIf"], [1, "modal-footer"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", "c8yProductExperience", "", 1, "btn", "btn-primary", 3, "title", "disabled", "actionName", "actionData", "click"], ["translate", ""], [1, "bg-white", "p-l-24", "p-r-24", "p-t-8", "p-b-8", "sticky-header-top-0", 2, "z-index", "2"], [1, "row"], [1, "col-sm-6"], [1, "input-group", "input-group-search"], ["type", "text", 1, "form-control", 3, "placeholder", "ngModel", "ngModelOptions", "ngModelChange", "keydown"], [1, "input-group-btn"], ["type", "button", 1, "btn", "btn-clean", 3, "click"], [3, "c8yIcon"], [1, "modal-body", "bg-gray-lighter"], [1, "card-group", "card-select", "m-b-0"], ["class", "col-md-3 col-sm-4 col-xs-6", 3, "title", 4, "ngFor", "ngForOf"], ["class", "c8y-empty-state text-center", 4, "ngIf"], [1, "col-md-3", "col-sm-4", "col-xs-6", 3, "title"], [1, "card", "p-8", 3, "click"], [1, "text-center", "p-8", "m-b-8", "flex-col", "flex-center", 2, "min-height", "170px", "background-color", "var(--body-background-color, #f2f3f4)"], [4, "ngIf", "ngIfElse"], ["previewImage", ""], [1, "card-title", "text-truncate"], [3, "text", "pattern"], ["c8yIcon", "file-image-o"], [1, "img-responsive", 3, "src"], [1, "c8y-empty-state", "text-center"], ["c8yIcon", "search"], [1, "d-flex"], ["translate", "", 1, "m-r-8"], ["translate", "", 1, "btn", "btn-primary", 3, "click"], [1, "modal-body", 2, "min-height", "calc(100vh - 290px)", 3, "hidden"], [1, "text-left"], [1, "m-b-24"], [1, "col-sm-12"], ["translate", "", 1, "legend", "form-block"], ["for", "widgetTitle", "translate", ""], ["id", "widgetTitle", "type", "text", "name", "title", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["componentId", "device.selector.legacy", 3, "config", "notFoundError", 4, "ngIf"], ["mode", "config", 3, "componentId", "config", "notFoundError"], ["config", ""], ["componentId", "device.selector.legacy", 3, "config", "notFoundError"], [1, "modal-body", "p-t-0", 2, "min-height", "calc(100vh - 290px)"], [1, "col-xs-6"], [3, "themeClass", "headerClass", "possibleStylingTheme", "possibleStylingHeader", "defaultThemeClass", "defaultHeaderClass", "themeClassChange", "headerClassChange"], [1, "col-xs-6", "sticky-header-top-0"], [3, "previewClasses"]], template: function WidgetConfigComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, WidgetConfigComponent_h3_1_Template, 2, 0, "h3", 1);
        ɵngcc0.ɵɵtemplate(2, WidgetConfigComponent_h3_2_Template, 2, 0, "h3", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "form", 2, 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "ul", 6);
        ɵngcc0.ɵɵelementStart(8, "li");
        ɵngcc0.ɵɵelementStart(9, "button", 7);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_9_listener() { ctx.changeMode("select"); return false; });
        ɵngcc0.ɵɵelement(10, "i", 8);
        ɵngcc0.ɵɵelementStart(11, "span", 9);
        ɵngcc0.ɵɵtext(12, "Select widget");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "li");
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_14_listener() { ctx.changeMode("config"); return false; });
        ɵngcc0.ɵɵelement(15, "i", 11);
        ɵngcc0.ɵɵelementStart(16, "span", 9);
        ɵngcc0.ɵɵtext(17, "Configuration");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "li");
        ɵngcc0.ɵɵelementStart(19, "button", 10);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_19_listener() { ctx.changeMode("style"); return false; });
        ɵngcc0.ɵɵelement(20, "i", 12);
        ɵngcc0.ɵɵelementStart(21, "span", 9);
        ɵngcc0.ɵɵtext(22, "Appearance");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "div", 13);
        ɵngcc0.ɵɵtemplate(24, WidgetConfigComponent_div_24_Template, 9, 7, "div", 14);
        ɵngcc0.ɵɵtemplate(25, WidgetConfigComponent_div_25_Template, 4, 2, "div", 15);
        ɵngcc0.ɵɵtemplate(26, WidgetConfigComponent_div_26_Template, 21, 18, "div", 16);
        ɵngcc0.ɵɵtemplate(27, WidgetConfigComponent_div_27_Template, 6, 7, "div", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 18);
        ɵngcc0.ɵɵelementStart(29, "button", 19);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_29_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵtext(31, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "button", 20);
        ɵngcc0.ɵɵlistener("click", function WidgetConfigComponent_Template_button_click_32_listener() { return ctx.save(); });
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵtext(34, " Save ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.current);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.current);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "config");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", !ctx.selected);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵclassProp("active", ctx.mode === "style");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", !ctx.selected);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "select");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "style");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(30, 19, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(33, 21, "Save"));
        ɵngcc0.ɵɵproperty("disabled", ctx.contextDashboardService.formDisabled || _r2.invalid)("actionName", ctx.current ? "editWidget" : "createWidget")("actionData", ɵngcc0.ɵɵpureFunction1(23, _c2, ctx.selected && ctx.selected.id));
    } }, directives: function () { return [ɵngcc6.NgIf, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective, ɵngcc1.ProductExperienceDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgForOf, ɵngcc1.HighlightComponent, ɵngcc1.FormGroupComponent, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc7.RequiredValidator, ɵngcc1.DynamicComponentComponent, AppearanceSettingsComponent, WidgetPreviewComponent]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetConfigComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-widget-config',
                template: "<div class=\"modal-header separator\">\n  <h3 *ngIf=\"!current\" translate>Add widget</h3>\n  <h3 *ngIf=\"current\" translate>Edit widget</h3>\n</div>\n<form #configForm=\"ngForm\" name=\"form\">\n  <div class=\"c8y-modal-tabs\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button type=\"button\" class=\"btn\" (click)=\"changeMode('select'); (false)\">\n            <i c8yIcon=\"th-large\"></i> <span class=\"txt\" translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i> <span class=\"txt\" translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i> <span class=\"txt\" translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div\n      *ngIf=\"mode === 'select'\"\n      class=\"bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2;\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-clean\" (click)=\"resetSearch()\" type=\"button\">\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-body bg-gray-lighter\" *ngIf=\"mode === 'select'\">\n      <div class=\"card-group card-select m-b-0\" >\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          *ngFor=\"let cmp of searchResult || components\"\n          title=\"{{ cmp.description | translate }}\"\n        >\n          <div class=\"card p-8\" [class.active]=\"selected === cmp\" (click)=\"select(cmp)\">\n            <div\n              class=\"text-center p-8 m-b-8 flex-col flex-center\"\n              style=\"min-height: 170px; background-color: var(--body-background-color, #f2f3f4);\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <h1><i c8yIcon=\"file-image-o\"></i></h1>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img class=\"img-responsive\" [src]=\"cmp.previewImage\" />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"c8y-empty-state text-center\" *ngIf=\"searchResult && searchResult.length === 0\">\n          <h1 c8yIcon=\"search\"></h1>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p translate class=\"m-r-8\">Rephrase your search term.</p>\n            <button class=\"btn btn-primary\" (click)=\"resetSearch()\" translate>\n              Reset search\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div\n      class=\"modal-body\"\n      *ngIf=\"selected\"\n      [hidden]=\"mode !== 'config'\"\n      style=\"min-height: calc(100vh - 290px);\"\n    >\n      <h4 class=\"text-left\">\n        <strong>\n          {{ selected.label | translate }}\n        </strong>\n      </h4>\n      <p class=\"m-b-24\">\n        {{ selected.description | translate }}\n      </p>\n      <div class=\"row\">\n        <!-- change to col-sm-6 when preview is available -->\n        <div class=\"col-sm-12\">\n          <div class=\"legend form-block\" translate>Configuration</div>\n          <c8y-form-group>\n            <label for=\"widgetTitle\" translate>Title</label>\n            <input\n              id=\"widgetTitle\"\n              [(ngModel)]=\"selected.data.title\"\n              type=\"text\"\n              name=\"title\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n              required\n            />\n          </c8y-form-group>\n\n          <!-- This is an upgraded component for the device selector and still needs to be migrated -->\n          <c8y-dynamic-component\n            componentId=\"device.selector.legacy\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            *ngIf=\"!isUpgrade\"\n          ></c8y-dynamic-component>\n\n          <c8y-dynamic-component\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n        <!-- markup for the preview\n\n        <div class=\"col-sm-6 sticky-header-top-0\" >\n          <div class=\"legend form-block\">\n            Preview\n          </div>\n          <div class=\"bg-gray-lighter p-16\">\n            <div class=\"card card-dashboard m-b-0\">\n              <div class=\"card-header-actions\">\n                <div class=\"card-title text-uppercase\">{{ selected.data.title }}</div>\n                <div class=\"header-actions\">\n                  <div class=\"optionsBtn dropdow\" class=\"btnIcon dropdown-toggle c8y-dropdown\">\n                    <i c8yIcon=\"cog\"></i>\n                  </div>\n                </div>\n              </div>\n              <div class=\"card-inner-scroll\">\n                <div class=\"card-block\" style=\"min-height: 240px;\">\n                  include here the widget\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      --></div>\n    </div>\n\n    <div *ngIf=\"mode === 'style'\" class=\"modal-body p-t-0\" style=\"min-height: calc(100vh - 290px);\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          >\n          </c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview [previewClasses]=\"getStyle(true)\"></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      (click)=\"close()\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      translate\n      [disabled]=\"contextDashboardService.formDisabled || configForm.invalid\"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
            }]
    }], function () { return [{ type: WidgetService }, { type: ɵngcc5.BsModalRef }, { type: ContextDashboardService }]; }, { dynamicComponent: [{
            type: i0.ViewChild,
            args: ['config', { static: false }]
        }] }); })();
        return WidgetConfigComponent;
    }());
    WidgetConfigComponent.ctorParameters = function () { return [
        { type: WidgetService },
        { type: modal.BsModalRef },
        { type: ContextDashboardService }
    ]; };
    WidgetConfigComponent.propDecorators = {
        dynamicComponent: [{ type: i0.ViewChild, args: ['config', { static: false },] }]
    };

    var DeviceDashboardGuard = /** @class */ (function () {
        function DeviceDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        DeviceDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [
                exports.ContextDashboardType.Device,
                exports.ContextDashboardType.DeviceType
            ]);
        };
DeviceDashboardGuard.ɵfac = function DeviceDashboardGuard_Factory(t) { return new (t || DeviceDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
DeviceDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceDashboardGuard, factory: function (t) { return DeviceDashboardGuard.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceDashboardGuard, [{
        type: i0.Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();
        return DeviceDashboardGuard;
    }());
    DeviceDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var GroupDashboardGuard = /** @class */ (function () {
        function GroupDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        GroupDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [exports.ContextDashboardType.Group]);
        };
GroupDashboardGuard.ɵfac = function GroupDashboardGuard_Factory(t) { return new (t || GroupDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
GroupDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: GroupDashboardGuard, factory: function (t) { return GroupDashboardGuard.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GroupDashboardGuard, [{
        type: i0.Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();
        return GroupDashboardGuard;
    }());
    GroupDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var WidgetPreviewComponent = /** @class */ (function () {
        function WidgetPreviewComponent() {
            this.previewClasses = {
                'dashboard-theme-light': true,
                'panel-title-regular': true
            };
        }
WidgetPreviewComponent.ɵfac = function WidgetPreviewComponent_Factory(t) { return new (t || WidgetPreviewComponent)(); };
WidgetPreviewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetPreviewComponent, selectors: [["c8y-widget-preview"]], inputs: { previewClasses: "previewClasses", tab: "tab" }, decls: 19, vars: 7, consts: [["translate", "", 1, "legend", "form-block"], ["translate", "", 4, "ngIf"], [1, "dashboard-preview-slot", 3, "ngClass"], ["class", "page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden", "style", "left: 0; margin: 0 15px;", 4, "ngIf"], [3, "ngClass"], [1, "card", "card-dashboard", 2, "height", "360px"], [1, "card-header-actions", 2, "z-index", "8"], [1, "card-title"], ["translate", ""], [1, "header-actions"], [1, "optionsBtn", "dropdown"], ["href", "", 1, "dropdown-toggle", "c8y-dropdown", 3, "click"], ["c8yIcon", "cog"], [1, "card-inner-scroll", "p-t-16"], [1, "page-tabs", "page-tabs-horizontal", "navigator-open", "p-absolute", "overflow-hidden", 2, "left", "0", "margin", "0 15px"], [1, "tabContainer", "hidden-xs"], [1, "nav", "nav-tabs", "nav-tabsc8y"], [1, "active", 2, "left", "16px"], ["routerlinkactive", "", 3, "title"], [1, "text-primary", 3, "c8yIcon"], [1, "txt"], [1, "visible-xs", "mobile-tabs"]], template: function WidgetPreviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1, "Preview");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, WidgetPreviewComponent_label_2_Template, 2, 0, "label", 1);
        ɵngcc0.ɵɵtemplate(3, WidgetPreviewComponent_label_3_Template, 2, 0, "label", 1);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵtemplate(5, WidgetPreviewComponent_div_5_Template, 9, 3, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "span", 8);
        ɵngcc0.ɵɵtext(11, "Widget title");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "div", 10);
        ɵngcc0.ɵɵelementStart(14, "a", 11);
        ɵngcc0.ɵɵlistener("click", function WidgetPreviewComponent_Template_a_click_14_listener() { return false; });
        ɵngcc0.ɵɵelement(15, "i", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 13);
        ɵngcc0.ɵɵelementStart(17, "p", 8);
        ɵngcc0.ɵɵtext(18, "Widget example content.");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.previewClasses);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c3, !!ctx.tab));
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc6.NgIf, ɵngcc6.NgClass, ɵngcc1.IconDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetPreviewComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-widget-preview',
                template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px;\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li class=\"active\" style=\"left: 16px;\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span></a\n          >\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 360px;\">\n      <div class=\"card-header-actions\" style=\"z-index: 8;\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <a href=\"\" (click)=\"(false)\" class=\"dropdown-toggle c8y-dropdown\">\n              <i c8yIcon=\"cog\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { previewClasses: [{
            type: i0.Input
        }], tab: [{
            type: i0.Input
        }] }); })();
        return WidgetPreviewComponent;
    }());
    WidgetPreviewComponent.propDecorators = {
        previewClasses: [{ type: i0.Input }],
        tab: [{ type: i0.Input }]
    };

    var DashboardDetailComponent = /** @class */ (function () {
        function DashboardDetailComponent(modal, iconList, contextDashboardService, navigatorService, permissionsService, translateService) {
            var _this = this;
            this.modal = modal;
            this.contextDashboardService = contextDashboardService;
            this.navigatorService = navigatorService;
            this.permissionsService = permissionsService;
            this.translateService = translateService;
            this.styling = {
                themeClass: 'dashboard-theme-light',
                headerClass: 'panel-title-regular'
            };
            this.possibleStyling = { DASHBOARD_THEME_CLASSES: DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES };
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
            this.DEFAULT_DASHBOARD_MARGIN = 12;
            this.DEFAULT_DASHBOARD_ICON = 'th';
            this.DEFAULT_DASHBOARD_PRIORITY = 10000;
            this.icons = iconList;
            this.filteredIcons = iconList;
        }
        Object.defineProperty(DashboardDetailComponent.prototype, "applyToDevicesOfTypeTitle", {
            get: function () {
                var text = this.applyToDevicesOfTypePermitted ?
                    i1.gettext('Apply dashboard to all devices of type {{ type }}') :
                    i1.gettext('Apply dashboard to all devices of type {{ type }} (permission required)');
                return this.translateService.instant(text, { type: this.dashboard.deviceTypeValue });
            },
            enumerable: false,
            configurable: true
        });
        DashboardDetailComponent.prototype.ngAfterContentInit = function () {
            var defaultDashboardCfg = {
                name: this.isReport ? 'Report' : 'Dashboard',
                priority: this.DEFAULT_DASHBOARD_PRIORITY,
                icon: this.DEFAULT_DASHBOARD_ICON,
                deviceTypeValue: this.deviceType
            };
            if (this.dashboard) {
                this.current = lodashEs.clone(this.dashboard);
                this.setDashboardStyle();
            }
            else {
                this.dashboard = defaultDashboardCfg;
                this.dashboardDetailForm.form.markAsDirty();
            }
            this.setTitle();
            this.setupApplyToDevicesOfTypeCheckbox();
            this.navigatorNodes$ = this.navigatorService.items$;
            this.namePlaceholder = this.isReport ? i1.gettext('e.g. My report') : i1.gettext('e.g. My dashboard');
        };
        DashboardDetailComponent.prototype.setTitle = function () {
            this.titleName = this.isReport ? i1.gettext('report') : i1.gettext('dashboard');
            this.titleAction = this.current ? i1.gettext('Edit') : i1.gettext('Add');
        };
        DashboardDetailComponent.prototype.setupApplyToDevicesOfTypeCheckbox = function () {
            var rolesToCheck = ['ROLE_INVENTORY_CREATE', 'ROLE_INVENTORY_ADMIN'];
            this.applyToDevicesOfTypePermitted = this.permissionsService.hasAnyRole(rolesToCheck);
        };
        DashboardDetailComponent.prototype.save = function () {
            var _a, _b;
            this.dashboard.classes = (_a = {}, _a[this.styling.themeClass] = true, _a);
            this.dashboard.widgetClasses = (_b = {}, _b[this.styling.headerClass] = true, _b);
            this.dashboard.c8y_IsNavigatorNode = this.dashboard.c8y_IsNavigatorNode
                ? {}
                : this.current
                    ? null
                    : undefined;
            this._save(this.dashboard);
        };
        DashboardDetailComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        DashboardDetailComponent.prototype.getDashboardPreviewStyle = function () {
            var cssClasses = {};
            cssClasses[this.styling.headerClass] = true;
            cssClasses[this.styling.themeClass] = true;
            return cssClasses;
        };
        DashboardDetailComponent.prototype.selectIcon = function (icon) {
            this.dashboard.icon = icon;
            this.dashboardDetailForm.form.markAsDirty();
        };
        DashboardDetailComponent.prototype.updateFiltered = function (term) {
            if (term) {
                var search_1 = new RegExp(term, 'i');
                this.filteredIcons = this.icons.filter(function (val) { return search_1.test(val); });
            }
            else {
                this.filteredIcons = this.icons;
            }
        };
        DashboardDetailComponent.prototype.setDashboardStyle = function () {
            var _this = this;
            var allClasses = Object.assign(Object.assign({}, this.dashboard.classes), this.dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                _this.styling.themeClass = _this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, _this.styling.themeClass);
                _this.styling.headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, _this.styling.headerClass);
            });
        };
DashboardDetailComponent.ɵfac = function DashboardDetailComponent_Factory(t) { return new (t || DashboardDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalRef), ɵngcc0.ɵɵdirectiveInject(i1.ICON_LIST), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Permissions), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
DashboardDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DashboardDetailComponent, selectors: [["c8y-dashboard-detail"]], viewQuery: function DashboardDetailComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 7);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dashboardDetailForm = _t.first);
    } }, decls: 47, vars: 39, consts: [[1, "viewport-modal"], [1, "modal-header", "separator-bottom"], [1, "modal-inner-scroll"], [1, "p-l-24", "p-r-24"], [1, "d-contents"], ["dashboardDetailForm", "ngForm"], [1, "row"], [1, "col-sm-6"], [4, "ngIf"], [3, "themeClass", "headerClass", "themeClassChange", "headerClassChange"], [1, "p-b-24", "m-b-0"], [1, "input-group"], ["id", "margin", "name", "margin", "type", "number", "min", "0", "max", "50", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], [1, "input-group-addon"], ["translate", ""], [1, "c8y-checkbox", 3, "title"], ["type", "checkbox", "name", "translateWidgetTitle", 3, "ngModel", "ngModelChange"], [3, "tab", "previewClasses"], [1, "modal-footer"], [1, "btn", "btn-default", 3, "title", "click"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "legend", "form-block"], [1, "d-flex"], [1, "d-block"], ["dropdown", "", 1, "dropdown"], ["dropdownToggle", "", 1, "btn-default", "btn", "btn-gray", 3, "title"], [3, "c8yIcon"], [1, "caret"], ["class", "dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0", "style", "max-height: 250px;", 4, "dropdownMenu"], [1, "flex-grow"], [1, "m-r-4"], ["triggers", "focus", "placement", "right", "container", "body", 1, "btn", "btn-clean", 3, "popover"], [1, "text-primary", 3, "c8yIcon"], ["name", "name", "maxlength", "512", "required", "", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], ["class", "col-sm-6", 4, "ngIf"], [1, "dropdown-menu", "modal-inner-scroll", "dropdown-menu-grid-4", "m-l-0", 2, "max-height", "250px"], [4, "ngFor", "ngForOf"], [3, "click"], [1, "interact", 3, "title", "ngClass"], [1, "icon", 3, "c8yIcon"], ["rows", "2", "name", "description", 1, "form-control", 3, "ngModel", "ngModelChange"], ["type", "number", "name", "priority", "min", "-10000", "max", "10000", "required", "", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], ["type", "checkbox", "name", "isNavigatorNode", 3, "ngModel", "ngModelChange"], ["positionInNavPop", ""], ["type", "number", "name", "priority", "min", "-10000", "max", "20000", 1, "form-control", 3, "title", "ngModel", "placeholder", "ngModelChange"], [1, "list-unstyled", "m-t-16"], [1, "word-break", "m-l-4", "m-r-16"], [1, "pull-right"], [1, "form-group"], ["type", "checkbox", "name", "deviceType", 3, "ngModel", "disabled", "ngModelChange"], ["translate", "", 1, "m-r-4", 3, "translateParams"], ["class", "alert alert-info m-b-24", 4, "ngIf"], [1, "alert", "alert-info", "m-b-24"], ["c8y-icon", "info"], ["translate", "", 3, "translateParams"]], template: function DashboardDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h3");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 2);
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "form", 4, 5);
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵtemplate(12, DashboardDetailComponent_div_12_Template, 33, 29, "div", 8);
        ɵngcc0.ɵɵelementStart(13, "c8y-appearance-settings", 9);
        ɵngcc0.ɵɵlistener("themeClassChange", function DashboardDetailComponent_Template_c8y_appearance_settings_themeClassChange_13_listener($event) { return ctx.styling.themeClass = $event; })("headerClassChange", function DashboardDetailComponent_Template_c8y_appearance_settings_headerClassChange_13_listener($event) { return ctx.styling.headerClass = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 6);
        ɵngcc0.ɵɵelementStart(15, "div", 7);
        ɵngcc0.ɵɵelementStart(16, "c8y-form-group", 10);
        ɵngcc0.ɵɵelementStart(17, "label");
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div", 11);
        ɵngcc0.ɵɵelementStart(21, "input", 12);
        ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_Template_input_ngModelChange_21_listener($event) { return ctx.dashboard.widgetMargin = $event; });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "span", 13);
        ɵngcc0.ɵɵtext(24, "px");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 7);
        ɵngcc0.ɵɵelementStart(26, "c8y-form-group", 10);
        ɵngcc0.ɵɵelementStart(27, "label", 14);
        ɵngcc0.ɵɵtext(28, "Widget titles");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "label", 15);
        ɵngcc0.ɵɵpipe(30, "translate");
        ɵngcc0.ɵɵelementStart(31, "input", 16);
        ɵngcc0.ɵɵlistener("ngModelChange", function DashboardDetailComponent_Template_input_ngModelChange_31_listener($event) { return ctx.dashboard.translateWidgetTitle = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(32, "span");
        ɵngcc0.ɵɵelementStart(33, "span");
        ɵngcc0.ɵɵtext(34);
        ɵngcc0.ɵɵpipe(35, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "div", 7);
        ɵngcc0.ɵɵelement(37, "c8y-widget-preview", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 18);
        ɵngcc0.ɵɵelementStart(39, "button", 19);
        ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_Template_button_click_39_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵtext(41);
        ɵngcc0.ɵɵpipe(42, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(43, "button", 20);
        ɵngcc0.ɵɵlistener("click", function DashboardDetailComponent_Template_button_click_43_listener() { return ctx.save(); });
        ɵngcc0.ɵɵpipe(44, "translate");
        ɵngcc0.ɵɵtext(45);
        ɵngcc0.ɵɵpipe(46, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate2("", ɵngcc0.ɵɵpipeBind1(4, 19, ctx.titleAction), "\u00A0", ɵngcc0.ɵɵpipeBind1(5, 21, ctx.titleName), "");
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isNamedDashboard || ctx.isReport);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("themeClass", ctx.styling.themeClass)("headerClass", ctx.styling.headerClass);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 23, "Widget margin"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 25, "Widget margin"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx.DEFAULT_DASHBOARD_MARGIN);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dashboard.widgetMargin);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(30, 27, "Translate if possible"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.dashboard.translateWidgetTitle);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(35, 29, "Translate if possible"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("tab", !ctx.isNamedDashboard ? ctx.dashboard : undefined)("previewClasses", ctx.getDashboardPreviewStyle());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(40, 31, "Cancel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 33, "Cancel"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(44, 35, "Save"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.invalid || _r0.form.pristine);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(46, 37, "Save"), " ");
    } }, directives: function () { return [ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc6.NgIf, AppearanceSettingsComponent, ɵngcc1.FormGroupComponent, ɵngcc7.MinValidator, ɵngcc7.MaxValidator, ɵngcc7.NumberValueAccessor, ɵngcc7.DefaultValueAccessor, ɵngcc1.MinValidationDirective, ɵngcc1.MaxValidationDirective, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc1.C8yTranslateDirective, ɵngcc7.CheckboxControlValueAccessor, WidgetPreviewComponent, ɵngcc8.BsDropdownDirective, ɵngcc8.BsDropdownToggleDirective, ɵngcc1.IconDirective, ɵngcc8.BsDropdownMenuDirective, ɵngcc9.PopoverDirective, ɵngcc1.RequiredInputPlaceholderDirective, ɵngcc7.MaxLengthValidator, ɵngcc7.RequiredValidator, ɵngcc6.NgForOf, ɵngcc6.NgClass]; }, pipes: function () { return [ɵngcc1.C8yTranslatePipe, ɵngcc6.AsyncPipe, ɵngcc6.SlicePipe]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardDetailComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-dashboard-detail',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3>{{ titleAction | translate }}&nbsp;{{ titleName | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <h6 class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </h6>\n              <div class=\"d-flex\">\n                <c8y-form-group>\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      class=\"btn-default btn btn-gray\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px;\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn btn-clean\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      triggers=\"focus\"\n                      placement=\"right\"\n                      container=\"body\"\n                    >\n                      <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                    </button>\n                  </label>\n                  <input\n                    title=\"{{ 'Menu label' | translate }}\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboard.name\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label translate>Description</label>\n                <textarea\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigation' | translate }}</span>\n                      <button\n                        class=\"btn btn-clean\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      /><span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label>\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\"> {{ node.priority }} </span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn btn-clean\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      >\n                        <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n                      </button>\n                    </label>\n                    <input\n                      title=\"{{ 'Position in navigation' | translate }}\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!current && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span class=\"m-r-4\" translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                      Apply dashboard to all devices of type <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span translate [translateParams]=\"{ type: dashboard.deviceTypeValue }\" ngNonBindable>\n                    This dashboard is shared between all devices of the type <i>{{ type }}</i>.\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            >\n            </c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label>{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      title=\"{{ 'Widget margin' | translate }}\"\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    /><span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\">\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.BsModalRef }, { type: Array, decorators: [{
                type: i0.Inject,
                args: [i1.ICON_LIST]
            }] }, { type: ContextDashboardService }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc1.Permissions }, { type: ɵngcc2.TranslateService }]; }, { dashboardDetailForm: [{
            type: i0.ViewChild,
            args: ['dashboardDetailForm', { static: true }]
        }] }); })();
        return DashboardDetailComponent;
    }());
    DashboardDetailComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: Array, decorators: [{ type: i0.Inject, args: [i1.ICON_LIST,] }] },
        { type: ContextDashboardService },
        { type: i1.NavigatorService },
        { type: i1.Permissions },
        { type: i2.TranslateService }
    ]; };
    DashboardDetailComponent.propDecorators = {
        dashboardDetailForm: [{ type: i0.ViewChild, args: ['dashboardDetailForm', { static: true },] }]
    };

    var AppearanceSettingsComponent = /** @class */ (function () {
        function AppearanceSettingsComponent() {
            this.themeClass = 'dashboard-theme-light';
            this.headerClass = 'panel-title-regular';
            this.themeClassChange = new i0.EventEmitter();
            this.headerClassChange = new i0.EventEmitter();
            this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
            this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
        }
        AppearanceSettingsComponent.prototype.themeClassClick = function (value) {
            value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
            this.themeClass = value;
            this.themeClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.headerClassClick = function (value) {
            value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
            this.headerClass = value;
            this.headerClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.resetToDefault = function (value, compareTo, defaultValue) {
            if (defaultValue && value === compareTo) {
                value = defaultValue;
            }
            return value;
        };
AppearanceSettingsComponent.ɵfac = function AppearanceSettingsComponent_Factory(t) { return new (t || AppearanceSettingsComponent)(); };
AppearanceSettingsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AppearanceSettingsComponent, selectors: [["c8y-appearance-settings"]], inputs: { themeClass: "themeClass", headerClass: "headerClass", possibleStylingTheme: "possibleStylingTheme", possibleStylingHeader: "possibleStylingHeader", defaultThemeClass: "defaultThemeClass", defaultHeaderClass: "defaultHeaderClass" }, outputs: { themeClassChange: "themeClassChange", headerClassChange: "headerClassChange" }, features: [ɵngcc0.ɵɵProvidersFeature([], [{ provide: forms.ControlContainer, useExisting: forms.NgForm }])], decls: 14, vars: 2, consts: [[1, "legend", "form-block"], ["translate", ""], [1, "row"], [1, "col-sm-6", "m-b-32"], [1, "list-group", 2, "box-shadow", "0 0 0 1px rgba(0, 0, 0, 0.05)"], ["class", "list-group-item flex-row", "style", "align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);", 4, "ngFor", "ngForOf"], [1, "col-sm-6"], ["class", "list-group-item flex-row a-i-center", "style", "box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);", 4, "ngFor", "ngForOf"], [1, "list-group-item", "flex-row", 2, "align-items", "center", "box-shadow", "0 1px 0 0 rgba(0, 0, 0, 0.05)"], [1, "list-item-checkbox"], [1, "c8y-radio"], ["type", "radio", "name", "content", 3, "id", "value", "ngModel", "click"], [3, "for"], ["class", "text-muted", "translate", "", 4, "ngIf"], ["container", "body", "placement", "top", "triggers", "focus", 1, "btn", "btn-clean", "flex-item-top", 3, "popover"], [1, "text-primary", 3, "c8yIcon"], ["translate", "", 1, "text-muted"], [1, "list-group-item", "flex-row", "a-i-center", 2, "box-shadow", "0 1px 0 0 rgba(0, 0, 0, 0.05)"], ["type", "radio", "name", "header", 3, "id", "value", "ngModel", "click"]], template: function AppearanceSettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h6", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2, "Layout");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "label", 1);
        ɵngcc0.ɵɵtext(6, "Theme");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "ul", 4);
        ɵngcc0.ɵɵtemplate(8, AppearanceSettingsComponent_li_8_Template, 14, 12, "li", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 6);
        ɵngcc0.ɵɵelementStart(10, "label", 1);
        ɵngcc0.ɵɵtext(11, "Widget header style");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "ul", 4);
        ɵngcc0.ɵɵtemplate(13, AppearanceSettingsComponent_li_13_Template, 14, 12, "li", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.possibleStylingTheme);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.possibleStylingHeader);
    } }, directives: [ɵngcc1.C8yTranslateDirective, ɵngcc6.NgForOf, ɵngcc7.RadioControlValueAccessor, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgIf, ɵngcc9.PopoverDirective, ɵngcc1.IconDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppearanceSettingsComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-appearance-settings',
                template: "<h6 class=\"legend form-block\"><span translate>Layout</span></h6>\n<div class=\"row \">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradiocontentclass' + i\">\n          <span>{{ themeClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"themeClassItem.class === defaultThemeClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row a-i-center\"\n        style=\"box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradioheaderclass' + i\">\n          <span>{{ headerClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"headerClassItem.class === defaultHeaderClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button\n          class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\" class=\"text-primary\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
            }]
    }], function () { return []; }, { themeClass: [{
            type: i0.Input
        }], headerClass: [{
            type: i0.Input
        }], themeClassChange: [{
            type: i0.Output
        }], headerClassChange: [{
            type: i0.Output
        }], possibleStylingTheme: [{
            type: i0.Input
        }], possibleStylingHeader: [{
            type: i0.Input
        }], defaultThemeClass: [{
            type: i0.Input
        }], defaultHeaderClass: [{
            type: i0.Input
        }] }); })();
        return AppearanceSettingsComponent;
    }());
    AppearanceSettingsComponent.propDecorators = {
        themeClass: [{ type: i0.Input }],
        headerClass: [{ type: i0.Input }],
        defaultThemeClass: [{ type: i0.Input }],
        defaultHeaderClass: [{ type: i0.Input }],
        themeClassChange: [{ type: i0.Output }],
        headerClassChange: [{ type: i0.Output }],
        possibleStylingTheme: [{ type: i0.Input }],
        possibleStylingHeader: [{ type: i0.Input }]
    };

    /**
     * The context dashboard is a dashboard which resolves it data from the current context (device or group)
     * it is displayed on. It usually uses the route.data for it, but you can pass
     * a different managedObject to the [mo] input parameter to change that behavior.
     */
    var ContextDashboardComponent = /** @class */ (function () {
        function ContextDashboardComponent(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService) {
            this.route = route;
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.alert = alert;
            this.renderer = renderer;
            this.moduleConfig = moduleConfig;
            this.widgetService = widgetService;
            this.bsModal = bsModal;
            this.inventory = inventory;
            this.gainsightService = gainsightService;
            this.childrenClasses = '';
            this.setTitle = false;
            this.disabled = false;
            this.defaultWidgets = [];
            this.canDelete = true;
            this.isLoading = true;
            this.class = '';
            this.widgets = [];
        }
        ContextDashboardComponent.prototype.ngOnInit = function () {
            if (!this.name) {
                this.loadContextDashboard();
                return;
            }
            this.loadNamedDashboard();
        };
        /**
         * Applies the current context to the widget
         * @param widget The widget to apply the context to.
         */
        ContextDashboardComponent.prototype.applyDeviceTarget = function (widget) {
            if (widget.config.device) {
                widget.config.device = { id: this.context.id, name: this.context.name };
            }
        };
        /**
         * Removes the route listener.
         */
        ContextDashboardComponent.prototype.ngOnDestroy = function () {
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
        };
        /**
         * Restores the dashboard widgets to the default widgets.
         */
        ContextDashboardComponent.prototype.restore = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 1:
                            _a.sent();
                            this.onLoad();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates all dashboards children's. Useful for position changes on the dashboard.
         * @param child The child to change.
         */
        ContextDashboardComponent.prototype.updateDashboardChildren = function (child) {
            return __awaiter(this, void 0, void 0, function () {
                var children, dashboardMO, mappedChildren;
                var _this = this;
                return __generator(this, function (_a) {
                    children = child.children;
                    dashboardMO = this.mo;
                    mappedChildren = lodashEs.keyBy(children.map(function (c) { return _this.componentToWidget(c); }), 'id');
                    dashboardMO.c8y_Dashboard.children = mappedChildren;
                    return [2 /*return*/, this.contextDashboardService.update(dashboardMO)];
                });
            });
        };
        /**
         * Remove the complete dashboard and navigate away.
         */
        ContextDashboardComponent.prototype.deleteDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var route;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.contextDashboardService.delete(this.mo)];
                        case 1:
                            _a.sent();
                            if (this.route.parent) {
                                route = this.route.parent.snapshot.url.map(function (segment) { return segment.path; }).join('/');
                                this.router.navigateByUrl(route);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Edits the current dashboard
         */
        ContextDashboardComponent.prototype.editDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var isReport, _a, name, icon, priority, c8y_IsNavigatorNode, description, initialState, modal, dashboardMO, cfg, name, icon, c8y_IsNavigatorNode, priority, description, dashboardCfg, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            isReport = this.contextDashboardService.isReport(this.mo);
                            if (isReport) {
                                _a = this.context, name = _a.name, icon = _a.icon, priority = _a.priority, c8y_IsNavigatorNode = _a.c8y_IsNavigatorNode, description = _a.description;
                                Object.assign(this.dashboard, { name: name, icon: icon, priority: priority, c8y_IsNavigatorNode: c8y_IsNavigatorNode, description: description });
                            }
                            initialState = {
                                dashboard: this.dashboard,
                                deviceType: this.context.type,
                                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                                isReport: isReport
                            };
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            dashboardMO = lodashEs.cloneDeep(this.mo);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            cfg = _b.sent();
                            if (isReport) {
                                name = cfg.name, icon = cfg.icon, c8y_IsNavigatorNode = cfg.c8y_IsNavigatorNode, priority = cfg.priority, description = cfg.description, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                                dashboardMO.c8y_Dashboard = dashboardCfg;
                                this.updateReport({
                                    id: this.context.id,
                                    name: name,
                                    icon: icon,
                                    c8y_IsNavigatorNode: c8y_IsNavigatorNode,
                                    priority: priority,
                                    description: description
                                });
                            }
                            else {
                                dashboardMO.c8y_Dashboard = cfg;
                            }
                            return [4 /*yield*/, this.contextDashboardService.update(dashboardMO)];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                        case 4:
                            _b.sent();
                            this.onLoad();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _b.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Edits a widget on the dashboard.
         * @param change The widget change event.
         */
        ContextDashboardComponent.prototype.editWidget = function (change) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, x, y, width, height, component;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = change.source, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                            return [4 /*yield*/, this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId)];
                        case 1:
                            component = _b.sent();
                            if (!component) {
                                this.addWidget();
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }))];
                        case 2:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Adds a widget to the dashboard.
         * @param selected Define a selected component to switch to edit mode directly.
         */
        ContextDashboardComponent.prototype.addWidget = function (selected) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, newWidget, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                mo: this.mo,
                                context: this.context.c8y_Report ? {} : this.context,
                                selected: lodashEs.cloneDeep(selected)
                            };
                            modal = this.bsModal.show(WidgetConfigComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            newWidget = _a.sent();
                            if (!this.mo.c8y_Dashboard.children) {
                                this.mo.c8y_Dashboard.children = {};
                            }
                            this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                            this.contextDashboardService.update(this.mo);
                            newWidget.classes = this.mergeWidgetClasses(newWidget);
                            return [4 /*yield*/, this.updateWidget(newWidget)];
                        case 3:
                            _a.sent();
                            modal.close();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates a widget or adds a new one if it doesn't exist on
         * the dashboard.
         * @param widget The new widget
         */
        ContextDashboardComponent.prototype.updateWidget = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var index, isNew, mappedWidget;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            index = lodashEs.findIndex(this.widgets, { id: widget.id });
                            isNew = index === -1;
                            return [4 /*yield*/, this.widgetService.mapLegacy(widget)];
                        case 1:
                            mappedWidget = _a.sent();
                            if (isNew) {
                                this.widgets.push(mappedWidget);
                            }
                            else {
                                this.widgets.splice(index, 1, mappedWidget);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes a widget and rearranges the remaining ones
         * if necessary.
         * @param change The change event.
         */
        ContextDashboardComponent.prototype.deleteWidget = function (change) {
            var _this = this;
            var widget = change.widget, source = change.source;
            delete this.mo.c8y_Dashboard.children[widget.id];
            var removed = this.widgets.find(function (_a) {
                var id = _a.id;
                return id === widget.id;
            });
            this.widgets.splice(this.widgets.indexOf(removed), 1);
            var dashboard = source.dashboard;
            dashboard.children = dashboard.children.filter(function (c) { return c.data.id !== widget.id; });
            // using setTimeout to give the component the chance to remove it.
            setTimeout(function () {
                var child = new i1.DashboardChildChange(source);
                child.collapseUpAll();
                _this.updateDashboardChildren(child);
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.addDashboardClassToBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.addClass(document.body, cssClass);
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.removeDashboardClassFromBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.removeClass(document.body, cssClass);
            });
        };
        /**
         * Changes the dashboard settings to frozen or vice versa.
         * @param settings The current settings of the dashboard.
         */
        ContextDashboardComponent.prototype.toggleFreeze = function (settings) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.toggleIsFrozenFlag(settings);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 2:
                            _a.sent();
                            if (this.dashboard.isFrozen) {
                                this.alert.success(i1.gettext('Your dashboard is locked now.'));
                            }
                            else {
                                this.alert.success(i1.gettext('Your dashboard is unlocked now.'));
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            ex_3 = _a.sent();
                            this.alert.addServerFailure(ex_3);
                            this.toggleIsFrozenFlag(settings);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.updateReport = function (mo) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.update(mo)];
                        case 1:
                            res = _a.sent();
                            this.context = res.data;
                            if (this.route.parent) {
                                this.route.parent.snapshot.data.contextData = this.context;
                            }
                            this.contextDashboardService.updateNavigatorItem(res.data);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.toggleIsFrozenFlag = function (settings) {
            settings.isFrozen = !settings.isFrozen;
            this.dashboard.isFrozen = settings.isFrozen;
        };
        ContextDashboardComponent.prototype.loadContextDashboard = function () {
            var _this = this;
            this.dataSub = this.route.data.subscribe(function (_a) {
                var dashboard = _a.dashboard;
                _this.context = _this.route.parent.snapshot.data.contextData;
                _this.mo = dashboard;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad(true);
            });
        };
        ContextDashboardComponent.prototype.loadNamedDashboard = function () {
            var _this = this;
            this.dataSub = this.contextDashboardService
                .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
                .subscribe(function (mo) {
                _this.context = _this.context || {};
                _this.mo = mo;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad(true);
            });
        };
        ContextDashboardComponent.prototype.onLoad = function (trackExperience) {
            return __awaiter(this, void 0, void 0, function () {
                var canEditDashboard, dashboardChildren, isDeviceType, isReport, dashboardClasses, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.contextDashboardService.canEditDashboard(this.mo)];
                        case 1:
                            canEditDashboard = _b.sent();
                            this.disabled = !canEditDashboard;
                            dashboardChildren = lodashEs.cloneDeep(this.mo.c8y_Dashboard.children);
                            isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
                            isReport = this.contextDashboardService.isReport(this.mo);
                            dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
                            _a = this;
                            return [4 /*yield*/, Promise.all(lodashEs.values(dashboardChildren).map(function (widget) {
                                    widget.classes = _this.mergeWidgetClasses(widget);
                                    if (isDeviceType) {
                                        _this.applyDeviceTarget(widget);
                                    }
                                    if (trackExperience) {
                                        _this.gainsightService.triggerEvent('loadWidget', {
                                            widgetName: widget.componentId || widget.name
                                        });
                                    }
                                    return _this.widgetService.mapLegacy(widget);
                                }))];
                        case 2:
                            _a.widgets = _b.sent();
                            this.class = Object.keys(dashboardClasses).join(' ');
                            if (isReport) {
                                this.addReportDashboardSettings();
                            }
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.mergeWidgetClasses = function (widget) {
            var _a;
            var hasHeaderClass = WIDGET_HEADER_CLASSES.find(function (el) { return widget.classes && widget.classes[el.class]; });
            var widgetClasses = hasHeaderClass
                ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
            return Object.assign((_a = { card: true, 'card-dashboard': true }, _a[lodashEs.kebabCase(widget.componentId || widget.name)] = true, _a), widgetClasses);
        };
        ContextDashboardComponent.prototype.componentToWidget = function (child) {
            return Object.assign(Object.assign({}, lodashEs.omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
                _x: child.x,
                _y: child.y,
                _width: child.width,
                _height: child.height
            });
        };
        ContextDashboardComponent.prototype.addReportDashboardSettings = function () {
            this.setTitle = true;
            this.title = this.context.name;
            this.breadcrumbSettings = {
                icon: 'th',
                label: 'Reports',
                path: 'reports'
            };
            this.canDelete = false;
        };
ContextDashboardComponent.ɵfac = function ContextDashboardComponent_Factory(t) { return new (t || ContextDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(CONTEXT_DASHBOARD_CONFIG), ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GainsightService)); };
ContextDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ContextDashboardComponent, selectors: [["c8y-context-dashboard"]], hostAttrs: [1, "dashboard", "c8y-grid-dashboard", 2, "display", "block"], hostVars: 2, hostBindings: function ContextDashboardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, inputs: { childrenClasses: "childrenClasses", setTitle: "setTitle", disabled: "disabled", defaultWidgets: "defaultWidgets", canDelete: "canDelete", isLoading: "isLoading", breadcrumbSettings: "breadcrumbSettings", name: "name", context: "context" }, decls: 2, vars: 15, consts: [[3, "placement", 4, "ngIf"], [3, "context", "contextDashboard", "widgets", "settings", "breadcrumb", "onFreeze", "onChangeDashboard", "onAddWidget", "onEditWidget", "onDeleteWidget", "onChangeStart", "onChangeEnd", "onEditDashboard", "onDeleteDashboard"], [3, "placement"], [3, "disabled", "click"], ["c8yIcon", "undo"], ["translate", ""]], template: function ContextDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ContextDashboardComponent_c8y_action_bar_item_0_Template, 6, 2, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(1, "c8y-widgets-dashboard", 1);
        ɵngcc0.ɵɵlistener("onFreeze", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onFreeze_1_listener($event) { return ctx.toggleFreeze($event); })("onChangeDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeDashboard_1_listener($event) { return ctx.updateDashboardChildren($event); })("onAddWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onAddWidget_1_listener() { return ctx.addWidget(); })("onEditWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditWidget_1_listener($event) { return ctx.editWidget($event); })("onDeleteWidget", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteWidget_1_listener($event) { return ctx.deleteWidget($event); })("onChangeStart", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeStart_1_listener() { return ctx.addDashboardClassToBody(); })("onChangeEnd", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onChangeEnd_1_listener() { return ctx.removeDashboardClassFromBody(); })("onEditDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onEditDashboard_1_listener() { return ctx.editDashboard(); })("onDeleteDashboard", function ContextDashboardComponent_Template_c8y_widgets_dashboard_onDeleteDashboard_1_listener() { return ctx.deleteDashboard(); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.defaultWidgets.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context)("contextDashboard", ctx.dashboard)("widgets", ctx.widgets)("settings", ɵngcc0.ɵɵpureFunction8(6, _c7, ctx.isLoading, ctx.dashboard == null ? null : ctx.dashboard.isFrozen, ctx.disabled, ctx.canDelete, ctx.dashboard == null ? null : ctx.dashboard.translateWidgetTitle, ctx.moduleConfig.allowFullscreen, ctx.setTitle ? ctx.dashboard.name || ctx.title : undefined, ctx.dashboard == null ? null : ctx.dashboard.widgetMargin))("breadcrumb", ctx.breadcrumbSettings);
    } }, directives: [ɵngcc6.NgIf, ɵngcc1.WidgetsDashboardComponent, ɵngcc1.ActionBarItemComponent, ɵngcc1.IconDirective, ɵngcc1.C8yTranslateDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-context-dashboard',
                template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                host: {
                    style: "\n      display: block;\n    ",
                    class: 'dashboard c8y-grid-dashboard'
                }
            }]
    }], function () { return [{ type: ɵngcc4.ActivatedRoute }, { type: ɵngcc4.Router }, { type: ContextDashboardService }, { type: ɵngcc1.AlertService }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }, { type: WidgetService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc3.InventoryService }, { type: ɵngcc1.GainsightService }]; }, { childrenClasses: [{
            type: i0.Input
        }], setTitle: [{
            type: i0.Input
        }], disabled: [{
            type: i0.Input
        }], defaultWidgets: [{
            type: i0.Input
        }], canDelete: [{
            type: i0.Input
        }], isLoading: [{
            type: i0.Input
        }], class: [{
            type: i0.HostBinding,
            args: ['class']
        }], breadcrumbSettings: [{
            type: i0.Input
        }], name: [{
            type: i0.Input
        }], context: [{
            type: i0.Input
        }] }); })();
        return ContextDashboardComponent;
    }());
    ContextDashboardComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: router.Router },
        { type: ContextDashboardService },
        { type: i1.AlertService },
        { type: i0.Renderer2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
        { type: WidgetService },
        { type: modal.BsModalService },
        { type: client.InventoryService },
        { type: i1.GainsightService }
    ]; };
    ContextDashboardComponent.propDecorators = {
        name: [{ type: i0.Input }],
        childrenClasses: [{ type: i0.Input }],
        context: [{ type: i0.Input }],
        setTitle: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        defaultWidgets: [{ type: i0.Input }],
        canDelete: [{ type: i0.Input }],
        isLoading: [{ type: i0.Input }],
        breadcrumbSettings: [{ type: i0.Input }],
        class: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var DashboardActionsFactory = /** @class */ (function () {
        function DashboardActionsFactory(router, contextDashboardService, bsModal, permissions) {
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.bsModal = bsModal;
            this.permissions = permissions;
        }
        DashboardActionsFactory.prototype.get = function (activatedRoute) {
            return __awaiter(this, void 0, void 0, function () {
                var context, canEditDashboard;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            context = !activatedRoute.parent || activatedRoute.snapshot.data.context
                                ? activatedRoute.snapshot.data
                                : activatedRoute.parent.snapshot.data;
                            return [4 /*yield*/, this.isEnabled(context)];
                        case 1:
                            canEditDashboard = _a.sent();
                            return [2 /*return*/, [
                                    {
                                        label: i1.gettext('Add dashboard'),
                                        priority: 2500,
                                        action: function () { return _this.addDashboard(context); },
                                        disabled: !canEditDashboard
                                    }
                                ]];
                    }
                });
            });
        };
        DashboardActionsFactory.prototype.addDashboard = function (context) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, dashboardCfg, dashboardMO, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (context.context === i1.ViewContext.Device) {
                                initialState = {
                                    deviceType: context.contextData.type
                                };
                            }
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            dashboardCfg = _a.sent();
                            return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, context)];
                        case 3:
                            dashboardMO = _a.sent();
                            return [4 /*yield*/, this.contextDashboardService.navigateToDashboard(dashboardMO)];
                        case 4:
                            _a.sent();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        DashboardActionsFactory.prototype.isEnabled = function (context) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(context.contextData && context.contextData.id)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context.contextData)];
                        case 1: return [2 /*return*/, ((_a.sent()) && [i1.ViewContext.Device, i1.ViewContext.Group].includes(context.context))];
                        case 2: return [2 /*return*/, (this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']) &&
                                [i1.ViewContext.Device, i1.ViewContext.Group].includes(context.context))];
                    }
                });
            });
        };
DashboardActionsFactory.ɵfac = function DashboardActionsFactory_Factory(t) { return new (t || DashboardActionsFactory)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ContextDashboardService), ɵngcc0.ɵɵinject(ɵngcc5.BsModalService), ɵngcc0.ɵɵinject(ɵngcc1.Permissions)); };
DashboardActionsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DashboardActionsFactory, factory: function (t) { return DashboardActionsFactory.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DashboardActionsFactory, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc4.Router }, { type: ContextDashboardService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc1.Permissions }]; }, null); })();
        return DashboardActionsFactory;
    }());
    DashboardActionsFactory.ctorParameters = function () { return [
        { type: router.Router },
        { type: ContextDashboardService },
        { type: modal.BsModalService },
        { type: i1.Permissions }
    ]; };

    var defaultConfig = {
        allowFullscreen: true,
        widgetFilter: function (_a) {
            var data = _a.data;
            return !(data && data.settings && data.settings.noNewWidgets);
        },
        routes: [
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [DeviceDashboardGuard],
                context: i1.ViewContext.Device
            },
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [GroupDashboardGuard],
                context: i1.ViewContext.Group
            }
        ]
    };
    var ɵ0$4 = defaultConfig;
    var ContextDashboardModule = /** @class */ (function () {
        function ContextDashboardModule() {
        }
        ContextDashboardModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ContextDashboardModule,
                providers: [
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: Object.assign(Object.assign({}, defaultConfig), config)
                    },
                    ContextDashboardService,
                    DeviceDashboardGuard,
                    GroupDashboardGuard,
                    {
                        provide: i1.HOOK_ROUTE,
                        useValue: Object.assign(Object.assign({}, defaultConfig), config).routes,
                        multi: true
                    },
                    {
                        provide: i1.HOOK_ACTION,
                        useClass: DashboardActionsFactory,
                        multi: true
                    }
                ]
            };
        };
ContextDashboardModule.ɵfac = function ContextDashboardModule_Factory(t) { return new (t || ContextDashboardModule)(); };
ContextDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ContextDashboardModule });
ContextDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: ɵ0$4
        }
    ], imports: [[i1.CoreModule, tooltip.TooltipModule, popover.PopoverModule, dropdown.BsDropdownModule.forRoot()]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContextDashboardModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [i1.CoreModule, tooltip.TooltipModule, popover.PopoverModule, dropdown.BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent],
                providers: [
                    WidgetService,
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: ɵ0$4
                    }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextDashboardModule, { declarations: [AppearanceSettingsComponent, ContextDashboardComponent, WidgetConfigComponent, WidgetPreviewComponent, DashboardDetailComponent], imports: [ɵngcc1.CoreModule, ɵngcc10.TooltipModule, ɵngcc9.PopoverModule, ɵngcc8.BsDropdownModule], exports: [ContextDashboardComponent, WidgetConfigComponent] }); })();
        return ContextDashboardModule;
    }());

    var ReportDashboardService = /** @class */ (function () {
        function ReportDashboardService(inventoryService, navigatorService) {
            this.inventoryService = inventoryService;
            this.navigatorService = navigatorService;
            this.queriesUtil = new client.QueriesUtil();
        }
        ReportDashboardService.prototype.listReports = function (options) {
            if (options === void 0) { options = {}; }
            var query = { __has: 'c8y_Report' };
            if (options.filter) {
                query = this.queriesUtil.addAndFilter(query, options.filter);
            }
            var filters = {
                query: this.queriesUtil.buildQuery(query),
                pageSize: options.pageSize || 50,
                withTotalPages: true
            };
            return this.inventoryService.list(filters);
        };
        ReportDashboardService.prototype.createReport = function (reportCfg) {
            var report = {};
            Object.assign(report, reportCfg);
            Object.assign(report, { c8y_Report: {} });
            return this.inventoryService.create(report);
        };
        ReportDashboardService.prototype.addReportNavigatorNode = function (report) {
            var node = new i1.NavigatorNode({
                label: report.name,
                path: "reports/" + report.id,
                icon: report.icon,
                priority: report.priority
            });
            this.navigatorService.add(node);
        };
        ReportDashboardService.prototype.removeNavigatorNode = function (report) {
            var _this = this;
            this.navigatorService.state.forEach(function (node) {
                if (node.path === "reports/" + report.id) {
                    _this.navigatorService.remove(node);
                    return;
                }
            });
        };
ReportDashboardService.ɵfac = function ReportDashboardService_Factory(t) { return new (t || ReportDashboardService)(ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService)); };
ReportDashboardService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardService, factory: function (t) { return ReportDashboardService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardService, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ɵngcc1.NavigatorService }]; }, null); })();
        return ReportDashboardService;
    }());
    ReportDashboardService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: i1.NavigatorService }
    ]; };

    var ReportDashboardListComponent = /** @class */ (function () {
        function ReportDashboardListComponent(inventoryService, contextDashboardService, bsModal, translateService, modal, alertService, reportDashboardService) {
            var _this = this;
            this.inventoryService = inventoryService;
            this.contextDashboardService = contextDashboardService;
            this.bsModal = bsModal;
            this.translateService = translateService;
            this.modal = modal;
            this.alertService = alertService;
            this.reportDashboardService = reportDashboardService;
            this.textFilter$ = new rxjs.BehaviorSubject('');
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.reloading = false;
            this.reports$ = rxjs.combineLatest(this.textFilter$.pipe(operators.debounceTime(400), operators.distinctUntilChanged()), this.reload$).pipe(operators.tap(function () {
                _this.reloading = true;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), text = _b[0];
                return _this.loadReports(text);
            }), operators.tap(function () {
                _this.reloading = false;
            }), operators.shareReplay(1));
            this.DELETED_SUCCESS_MSG = i1.gettext('Report deleted.');
        }
        ReportDashboardListComponent.prototype.loadReports = function (partialName) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, partialName
                            ? this.reportDashboardService.listReports({ filter: { name: "*" + partialName + "*" } })
                            : this.reportDashboardService.listReports()];
                });
            });
        };
        ReportDashboardListComponent.prototype.add = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, cfg, name, icon, c8y_IsNavigatorNode, priority, description, dashboardCfg, report, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                isReport: true,
                                isNamedDashboard: true
                            };
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                ignoreBackdropClick: true,
                                initialState: initialState
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            cfg = _a.sent();
                            name = cfg.name, icon = cfg.icon, c8y_IsNavigatorNode = cfg.c8y_IsNavigatorNode, priority = cfg.priority, description = cfg.description, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                            return [4 /*yield*/, this.reportDashboardService.createReport({
                                    name: name,
                                    icon: icon,
                                    c8y_IsNavigatorNode: c8y_IsNavigatorNode,
                                    priority: priority,
                                    description: description
                                })];
                        case 3:
                            report = (_a.sent()).data;
                            return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, undefined, "" + this.contextDashboardService.REPORT_PARTIAL_NAME + report.id)];
                        case 4:
                            _a.sent();
                            if (report.c8y_IsNavigatorNode) {
                                this.reportDashboardService.addReportNavigatorNode(report);
                            }
                            this.reload$.next();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            if (ex_1) {
                                throw new Error("Something went wrong: " + ex_1);
                            }
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        ReportDashboardListComponent.prototype.delete = function (report) {
            return __awaiter(this, void 0, void 0, function () {
                var msg, ex_2;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            msg = i1.gettext("You are about to delete the report \"{{ reportName }}\". Do you want to proceed?");
                            return [4 /*yield*/, this.modal.confirm(i1.gettext('Delete report'), this.translateService.instant(msg, {
                                    reportName: report.name
                                }), i1.Status.DANGER, {
                                    ok: i1.gettext('Delete'),
                                    cancel: i1.gettext('Cancel')
                                })];
                        case 1:
                            _a.sent();
                            this.contextDashboardService
                                .getDashboard$("report_" + report.id, [exports.ContextDashboardType.Named])
                                .pipe(operators.take(1))
                                .subscribe(function (dashboard) { return _this.contextDashboardService.delete(dashboard, false); });
                            return [4 /*yield*/, this.inventoryService.delete(report.id)];
                        case 2:
                            _a.sent();
                            this.alertService.success(this.DELETED_SUCCESS_MSG);
                            if (report.c8y_IsNavigatorNode) {
                                this.reportDashboardService.removeNavigatorNode(report);
                            }
                            this.reload$.next();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            if (ex_2) {
                                throw new Error("Something went wrong: " + ex_2);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ReportDashboardListComponent.prototype.update = function (report) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            report.c8y_IsNavigatorNode = report.c8y_IsNavigatorNode ? {} : null;
                            return [4 /*yield*/, this.inventoryService.update(report)];
                        case 1:
                            _a.sent();
                            report.c8y_IsNavigatorNode
                                ? this.reportDashboardService.addReportNavigatorNode(report)
                                : this.reportDashboardService.removeNavigatorNode(report);
                            return [2 /*return*/];
                    }
                });
            });
        };
ReportDashboardListComponent.ɵfac = function ReportDashboardListComponent_Factory(t) { return new (t || ReportDashboardListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.InventoryService), ɵngcc0.ɵɵdirectiveInject(ContextDashboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlertService), ɵngcc0.ɵɵdirectiveInject(ReportDashboardService)); };
ReportDashboardListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ReportDashboardListComponent, selectors: [["c8y-report-dashboard-list"]], viewQuery: function ReportDashboardListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(i1.FilterInputComponent, 5);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filter = _t.first);
    } }, decls: 34, vars: 41, consts: [["translate", ""], ["itemClass", "navbar-form", 3, "placement"], [1, "input-group", "input-group-search"], ["type", "search", 1, "form-control", 3, "title", "placeholder", "ngModel", "ngModelChange"], [1, "input-group-addon"], ["c8yIcon", "search", 4, "ngIf"], ["class", "text-muted", "c8yIcon", "times", 3, "click", 4, "ngIf"], [3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["c8yIcon", "refresh", 3, "ngClass"], [1, "p-b-32"], ["class", "page-sticky-header hidden-xs hidden-sm", 4, "ngIf"], [4, "c8yFor", "c8yForOf", "c8yForLoadMore"], ["class", "c8y-empty-state text-center m-t-40", 4, "ngIf"], ["c8yIcon", "search"], ["c8yIcon", "times", 1, "text-muted", 3, "click"], [1, "page-sticky-header", "hidden-xs", "hidden-sm"], [1, "p-l-24"], [1, "content-flex-80"], [1, "col-3"], [1, "col-6"], [1, "col-2"], [3, "icon"], [1, "content-flex-70"], [1, "btn-clean", 3, "title", "routerLink"], [1, "text-truncate"], [1, "text-truncate-wrap"], ["class", "text-muted", 4, "ngIf", "ngIfElse"], ["showDescription", ""], [1, "m-t-8", "visible-xs"], [1, "c8y-switch", "c8y-switch--inline", 3, "title"], ["type", "checkbox", 3, "ngModel", "ngModelChange", "change"], [1, "visible-xs"], [1, "col-1", "text-right", "hidden-xs"], [1, "btn-dot", "showOnHover", "pull-right", 3, "title", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], [1, "visible-xs", "p-t-8", "text-right"], [1, "btn-danger", "btn", "btn-xs", 3, "title", "click"], ["c8yIcon", "trash"], [1, "text-muted"], [1, "c8y-empty-state", "text-center", "m-t-40"], ["c8yIcon", "c8y-reports", 1, "c8y-icon-duocolor"], ["translate", "", 1, "btn", "btn-primary", 3, "click"], ["c8y-guide-docs", ""], ["c8y-guide-href", "users-guide/cockpit/#reports"]], template: function ReportDashboardListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2, " Reports ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(3, "\u00A0\n");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "c8y-action-bar-item", 1);
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "input", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ReportDashboardListComponent_Template_input_ngModelChange_6_listener($event) { return ctx.textFilter$.next($event); });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "span", 4);
        ɵngcc0.ɵɵtemplate(11, ReportDashboardListComponent_i_11_Template, 1, 0, "i", 5);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵtemplate(13, ReportDashboardListComponent_i_13_Template, 1, 0, "i", 6);
        ɵngcc0.ɵɵpipe(14, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "c8y-action-bar-item", 7);
        ɵngcc0.ɵɵelementStart(16, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_Template_button_click_16_listener() { return ctx.add(); });
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelement(18, "i", 9);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "c8y-action-bar-item", 7);
        ɵngcc0.ɵɵelementStart(22, "button", 8);
        ɵngcc0.ɵɵlistener("click", function ReportDashboardListComponent_Template_button_click_22_listener() { return ctx.loadReports(); });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelement(24, "i", 10);
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "div", 11);
        ɵngcc0.ɵɵelementStart(28, "c8y-list-group");
        ɵngcc0.ɵɵtemplate(29, ReportDashboardListComponent_c8y_li_29_Template, 13, 9, "c8y-li", 12);
        ɵngcc0.ɵɵpipe(30, "async");
        ɵngcc0.ɵɵtemplate(31, ReportDashboardListComponent_c8y_li_31_Template, 30, 19, "c8y-li", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(32, ReportDashboardListComponent_div_32_Template, 15, 0, "div", 14);
        ɵngcc0.ɵɵpipe(33, "async");
    } if (rf & 2) {
        var tmp_13_0;
        var tmp_16_0;
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("placement", "left");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(7, 17, "Filter\u2026"));
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 19, "Filter\u2026"));
        ɵngcc0.ɵɵproperty("ngModel", ɵngcc0.ɵɵpipeBind1(9, 21, ctx.textFilter$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(12, 23, ctx.textFilter$).length === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(14, 25, ctx.textFilter$).length > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 27, "Add report"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 29, "Add report"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 31, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(39, _c8, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 33, "Reload"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_13_0 = ɵngcc0.ɵɵpipeBind1(30, 35, ctx.reports$)) == null ? null : tmp_13_0.data.length) > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.reports$)("c8yForLoadMore", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_16_0 = ɵngcc0.ɵɵpipeBind1(33, 37, ctx.reports$)) == null ? null : tmp_16_0.data.length) === 0);
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.ActionBarItemComponent, ɵngcc7.DefaultValueAccessor, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc6.NgIf, ɵngcc1.IconDirective, ɵngcc6.NgClass, ɵngcc1.ListGroupComponent, ɵngcc1.ForOfDirective, ɵngcc1.ListItemComponent, ɵngcc1.ListItemIconComponent, ɵngcc1.ListItemBodyComponent, ɵngcc4.RouterLink, ɵngcc7.CheckboxControlValueAccessor, ɵngcc1.GuideDocsComponent, ɵngcc1.GuideHrefDirective], pipes: [ɵngcc1.C8yTranslatePipe, ɵngcc6.AsyncPipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-report-dashboard-list',
                template: "<c8y-title>\n  <span translate>\n    Reports\n  </span>&nbsp;\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input class=\"form-control\"\n      type=\"search\"\n      title=\"{{ 'Filter\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\"\n        *ngIf=\"(textFilter$ | async).length === 0\"\n      ></i>\n      <i class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Add report' | translate }}\"\n    (click)=\"add()\"\n    >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    title=\"{{ 'Reload' | translate }}\"\n    (click)=\"loadReports()\"\n  >\n    <i [ngClass]=\"{ 'icon-spin': reloading }\"\n      c8yIcon=\"refresh\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n <!-- TODO: uncomment when help is available\n  <c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n-->\n\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li class=\"page-sticky-header hidden-xs hidden-sm\"\n      *ngIf=\"(reports$ | async)?.data.length > 0\"\n    >\n      <c8y-li-icon>\n        <i class=\"p-l-24\"></i>\n      </c8y-li-icon>\n      <c8y-li-body class=\"content-flex-80\">\n        <div class=\"col-3\">\n          {{ 'Report' | translate }}\n        </div>\n        <div class=\"col-6\">\n          {{ 'Description' | translate }}\n        </div>\n        <div class=\"col-2\">\n          {{ 'Show in navigator' | translate }}\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n\n    <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n      <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n      <c8y-li-body class=\"content-flex-70\">\n        <div class=\"col-3\">\n          <button class=\"btn-clean\"\n            title=\"{{ report.name }}\"\n            routerLink=\"/reports/{{ report.id }}\"\n          >\n            <span class=\"text-truncate\">\n              {{ report.name }}\n            </span>\n          </button>\n        </div>\n        <div class=\"col-6\">\n          <small class=\"text-truncate-wrap\">\n            <em class=\"text-muted\"\n              *ngIf=\"!report.description; else showDescription\"\n            >\n              {{ 'No description available.' | translate }}\n            </em>\n            <ng-template #showDescription>\n              {{ report.description }}\n            </ng-template>\n          </small>\n        </div>\n        <div class=\"col-2\">\n          <span class=\"m-t-8 visible-xs\"></span>\n          <label class=\"c8y-switch c8y-switch--inline\"\n            title=\"{{ 'Show in navigator' | translate }}\"\n          >\n            <input\n              [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n              type=\"checkbox\"\n              (change)=\"update(report)\"\n            />\n            <span></span>\n            <span class=\"visible-xs\">\n              {{ 'Show in navigator' | translate }}\n            </span>\n          </label>\n        </div>\n        <div class=\"col-1 text-right hidden-xs\">\n          <button class=\"btn-dot showOnHover pull-right\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i class=\"text-danger\"\n            c8yIcon=\"minus-circle\"\n            ></i>\n          </button>\n        </div>\n        <div class=\"visible-xs p-t-8 text-right\">\n          <button class=\"btn-danger btn btn-xs\"\n            (click)=\"delete(report)\"\n            title=\"{{ 'Remove report' | translate }}\"\n          >\n            <i c8yIcon=\"trash\"></i>\n            Delete\n          </button>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n\n<div class=\"c8y-empty-state text-center m-t-40\"\n  *ngIf=\"(reports$ | async)?.data.length === 0\"\n  >\n  <h1 c8yIcon=\"c8y-reports\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>\n    There are no reports defined\n  </h3>\n  <p translate>\n    Add a report first.\n  </p>\n  <div>\n    <button class=\"btn btn-primary\"\n      (click)=\"add()\"\n      translate\n    >\n      Add report\n    </button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\">\n        User guide`KEEP_ORIGINAL`\n      </a>.\n      </small>\n  </p>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.InventoryService }, { type: ContextDashboardService }, { type: ɵngcc5.BsModalService }, { type: ɵngcc2.TranslateService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.AlertService }, { type: ReportDashboardService }]; }, { filter: [{
            type: i0.ViewChild,
            args: [i1.FilterInputComponent, { static: false }]
        }] }); })();
        return ReportDashboardListComponent;
    }());
    ReportDashboardListComponent.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: ContextDashboardService },
        { type: modal.BsModalService },
        { type: i2.TranslateService },
        { type: i1.ModalService },
        { type: i1.AlertService },
        { type: ReportDashboardService }
    ]; };
    ReportDashboardListComponent.propDecorators = {
        filter: [{ type: i0.ViewChild, args: [i1.FilterInputComponent, { static: false },] }]
    };

    /**
     * A hook to define the default widgets of the home dashboard in the cockpit app.
     */
    var COCKPIT_HOME_DASHBOARD_CONFIG = new i0.InjectionToken('CockpitHomeDashboardConfig');
    /**
     * An array of widgets that is per default placed on the home dashboard of the cockpit app.
     */
    var DEFAULT_COCKPIT_HOME_WIDGETS = [
        {
            name: 'cockpit.welcome.widget',
            title: i1.gettext(''),
            _x: 0,
            _y: 0,
            _height: 5,
            _width: 12,
            classes: { 'panel-title-hidden': true }
        },
        {
            name: 'Asset Alarms',
            title: i1.gettext('Active, critical alarms'),
            _x: 0,
            _y: 5,
            _height: 4,
            _width: 6
        },
        {
            name: 'Recent Alarms',
            title: i1.gettext('Recent alarms'),
            _x: 0,
            _y: 9,
            _height: 4,
            _width: 6
        },
        {
            name: 'Map',
            title: i1.gettext('Map'),
            _x: 6,
            _y: 5,
            _height: 8,
            _width: 6
        }
    ];

    var CockpitDashboardComponent = /** @class */ (function () {
        function CockpitDashboardComponent(appState, homeDashboardConfig) {
            this.appState = appState;
            this.homeDashboardConfig = homeDashboardConfig;
            this.defaultWidgets = DEFAULT_COCKPIT_HOME_WIDGETS;
            this.dashboardName = 'home-cockpit1';
            this.pageTitle = i1.gettext('Home');
            this.applyDashboardConfig(this.homeDashboardConfig);
        }
        CockpitDashboardComponent.prototype.applyDashboardConfig = function (config) {
            if (!config) {
                return;
            }
            if (config.dashboardName) {
                this.dashboardName = config.dashboardName;
            }
            if (config.defaultWidgets) {
                this.defaultWidgets = config.defaultWidgets;
            }
            if (config.userSpecific && this.appState.currentUser.value) {
                this.dashboardName = this.appState.currentUser.value.userName.replace(/\./g, '__') + "_" + this.dashboardName;
            }
            if (config.pageTitle) {
                this.pageTitle = config.pageTitle;
            }
        };
CockpitDashboardComponent.ɵfac = function CockpitDashboardComponent_Factory(t) { return new (t || CockpitDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppStateService), ɵngcc0.ɵɵdirectiveInject(COCKPIT_HOME_DASHBOARD_CONFIG, 8)); };
CockpitDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CockpitDashboardComponent, selectors: [["c8y-cockpit-dashboard"]], decls: 4, vars: 6, consts: [[3, "name", "defaultWidgets", "canDelete"]], template: function CockpitDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "c8y-context-dashboard", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx.pageTitle), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("name", ctx.dashboardName)("defaultWidgets", ctx.defaultWidgets)("canDelete", false);
    } }, directives: [ɵngcc1.TitleComponent, ContextDashboardComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitDashboardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-cockpit-dashboard',
                template: "<c8y-title>\n  {{ pageTitle | translate}}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [COCKPIT_HOME_DASHBOARD_CONFIG]
            }] }]; }, null); })();
        return CockpitDashboardComponent;
    }());
    CockpitDashboardComponent.ctorParameters = function () { return [
        { type: i1.AppStateService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [COCKPIT_HOME_DASHBOARD_CONFIG,] }] }
    ]; };

    var WelcomeToCockpit = /** @class */ (function () {
        function WelcomeToCockpit(tenantService, docs, router, navigator, applicationService) {
            this.tenantService = tenantService;
            this.docs = docs;
            this.router = router;
            this.navigator = navigator;
            this.applicationService = applicationService;
            this.quickLinks = [];
            this.CONFIGURATION_NODE = 'Configuration';
            this.TRIAL = 'TRIAL';
        }
        WelcomeToCockpit.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.tenantService.currentTenantType()];
                        case 1:
                            _a.tenantType = _b.sent();
                            this.setMessage();
                            this.navSubscription = this.navigator.items$.subscribe(function (nodes) {
                                _this.navNodes = nodes;
                                _this.configurationNode = nodes.find(function (node) { return node.label === _this.CONFIGURATION_NODE; });
                            });
                            this.docsSubscription = this.docs.items$.subscribe(function (links) {
                                _this.links = links;
                            });
                            // <---TRIAL & REGULAR TENANT --->
                            this.createConnectSmartphoneQuickLink();
                            return [4 /*yield*/, this.createQuicklinkRegisterDevice()];
                        case 2:
                            _b.sent();
                            // <--- TRIAL TENANT --->
                            if (this.tenantType === this.TRIAL) {
                                this.createQuicklinkUserGuide();
                                return [2 /*return*/];
                            }
                            // <--- REGULAR TENANT --->
                            this.createQuicklinkAddGroup();
                            this.createQuickLinkReports();
                            this.createQuickLinkExports();
                            this.createQuicklinkSmartRules();
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.ngOnDestroy = function () {
            if (this.docsSubscription && !this.docsSubscription.closed) {
                this.docsSubscription.unsubscribe();
            }
            if (this.navSubscription && !this.navSubscription.closed) {
                this.navSubscription.unsubscribe();
            }
        };
        WelcomeToCockpit.prototype.setMessage = function () {
            if (this.tenantType === this.TRIAL) {
                this.welcomeMessage = i1.gettext("\n        The Cockpit application allows you to build IoT applications in minutes.\n        To get started, connect any device to the platform.\n        If you do not have an IoT device to hand, you can start by connecting your smartphone.\n        Click below to be guided through the process.\n      ");
            }
            else {
                this.welcomeMessage = i1.gettext("\n        The Cockpit application provides you with options to manage\n        and monitor Internet of Things assets and data from business perspective.\n      ");
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkAddGroup = function () {
            // comes from angularJS factory c8yQuickLinks
            var addGroup = this.links.find(function (link) { return link.label === 'Add group'; });
            if (addGroup) {
                this.quickLinks.push(addGroup);
            }
        };
        WelcomeToCockpit.prototype.createConnectSmartphoneQuickLink = function () {
            // Provider in SensorPhoneModule defines the
            // 'Connect smartphone' quicklink.
            var connectSmartphone = this.links.find(function (link) { return link.label === 'Connect smartphone'; });
            if (connectSmartphone) {
                this.quickLinks.push(connectSmartphone);
            }
        };
        WelcomeToCockpit.prototype.createQuickLinkReports = function () {
            var _this = this;
            var label = i1.gettext('Reports');
            var reports = {
                icon: 'th',
                label: label,
                url: '/reports'
            };
            var reportsNode = this.findNavigatorNode(label, this.navNodes);
            if (reportsNode) {
                reports.click = function () {
                    reportsNode.open = true;
                    _this.router.navigateByUrl(reports.url);
                };
                this.quickLinks.push(reports);
            }
        };
        WelcomeToCockpit.prototype.createQuickLinkExports = function () {
            var _this = this;
            var label = i1.gettext('Exports');
            var exports = {
                icon: 'c8y-reports',
                label: label,
                url: '/export'
            };
            if (this.isConfigChildNodeShown(label)) {
                exports.click = function () {
                    _this.configurationNode.open = true;
                    _this.router.navigateByUrl(exports.url);
                };
                this.quickLinks.push(exports);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkSmartRules = function () {
            var _this = this;
            var label = i1.gettext('Smart rules');
            var smartRules = {
                icon: 'c8y-smart-rules',
                label: label,
                url: '/rules'
            };
            if (this.isConfigChildNodeShown('Global smart rules')) {
                smartRules.click = function () {
                    _this.configurationNode.open = true;
                    _this.router.navigateByUrl(smartRules.url);
                };
                this.quickLinks.push(smartRules);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkRegisterDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, deviceManagement, deviceMgmtUrl_1, registerDevice;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser()];
                        case 1:
                            data = (_a.sent()).data;
                            if (data) {
                                deviceManagement = data.find(function (app) { return app.contextPath === 'devicemanagement'; });
                                if (deviceManagement) {
                                    deviceMgmtUrl_1 = this.applicationService.getHref(deviceManagement);
                                    registerDevice = {
                                        icon: 'c8y-device-connect',
                                        label: i1.gettext('Register device'),
                                        click: function () { return window.open(deviceMgmtUrl_1 + "/#/deviceregistration", '_self'); }
                                    };
                                    this.quickLinks.push(registerDevice);
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.createQuicklinkUserGuide = function () {
            var _this = this;
            var userGuide = {
                icon: 'c8y-user',
                label: i1.gettext('User guide'),
                url: '/users-guide/getting-started',
                click: function () {
                    var userGuideURL = _this.docs.getUserGuideLink(userGuide.url);
                    window.open(userGuideURL);
                }
            };
            this.quickLinks.push(userGuide);
        };
        WelcomeToCockpit.prototype.isConfigChildNodeShown = function (nodeName) {
            if (this.configurationNode && this.configurationNode.show) {
                var navNode = this.findNavigatorNode(nodeName, this.configurationNode.children);
                return !!navNode && navNode.show;
            }
            return false;
        };
        WelcomeToCockpit.prototype.findNavigatorNode = function (nodeName, navNodes) {
            if (navNodes && navNodes.length > 0) {
                return navNodes.find(function (node) { return node.label === nodeName; });
            }
            return undefined;
        };
WelcomeToCockpit.ɵfac = function WelcomeToCockpit_Factory(t) { return new (t || WelcomeToCockpit)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TenantService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DocsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ApplicationService)); };
WelcomeToCockpit.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WelcomeToCockpit, selectors: [["c8y-welcome-to-cockpit"]], inputs: { config: "config" }, decls: 11, vars: 7, consts: [[1, "welcome-widget", "welcome-cockpit"], [1, "flex-row"], [1, "col-xs-12", "col-md-5", "flex-item-v-stretch", "p-24"], [1, "text-light"], [1, "text-16", "text-light", "p-t-16", "p-b-24"], [1, "card-group", "interact-grid", "tight-grid"], ["class", "col-sm-4 col-xs-6", 4, "ngFor", "ngForOf"], [1, "col-sm-4", "col-xs-6"], ["c8yProductExperience", "", 1, "card", 3, "icon", "label", "actionName", "actionData", "click"]], template: function WelcomeToCockpit_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h2", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "p", 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵtemplate(10, WelcomeToCockpit_div_10_Template, 2, 6, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, "Welcome to Cockpit"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 5, ctx.welcomeMessage));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.quickLinks);
    } }, directives: [ɵngcc6.NgForOf, ɵngcc1.QuickLinkComponent, ɵngcc1.ProductExperienceDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WelcomeToCockpit, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-welcome-to-cockpit',
                template: "<div class=\"welcome-widget welcome-cockpit\">\n  <div class=\"flex-row\">\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\n      <div class=\"card-group interact-grid tight-grid\">\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\n          <c8y-quick-link\n            (click)=\"link.click ? link.click() : false\"\n            [icon]=\"link.icon\"\n            [label]=\"link.label\"\n            class=\"card\"\n            c8yProductExperience\n            [actionName]=\"'welcomeWidgetClicked'\"\n            [actionData]=\"{ link: link.label }\"\n          >\n          </c8y-quick-link>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc3.TenantService }, { type: ɵngcc1.DocsService }, { type: ɵngcc4.Router }, { type: ɵngcc1.NavigatorService }, { type: ɵngcc3.ApplicationService }]; }, { config: [{
            type: i0.Input
        }] }); })();
        return WelcomeToCockpit;
    }());
    WelcomeToCockpit.ctorParameters = function () { return [
        { type: client.TenantService },
        { type: i1.DocsService },
        { type: router.Router },
        { type: i1.NavigatorService },
        { type: client.ApplicationService }
    ]; };
    WelcomeToCockpit.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var LegacyWelcomeComponent = /** @class */ (function () {
        function LegacyWelcomeComponent(dashboard) {
            this.dashboard = dashboard;
        }
        LegacyWelcomeComponent.prototype.restore = function () {
            this.dashboard.restore();
        };
LegacyWelcomeComponent.ɵfac = function LegacyWelcomeComponent_Factory(t) { return new (t || LegacyWelcomeComponent)(ɵngcc0.ɵɵdirectiveInject(ContextDashboardComponent, 1)); };
LegacyWelcomeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LegacyWelcomeComponent, selectors: [["c8y-legacy-welcome-widget"]], decls: 17, vars: 9, consts: [[1, "card-block"], ["c8y-guide-docs", "", 1, "lead"], ["translate", "", 1, "cockpit-welcome-manual", 3, "title"], ["c8y-guide-href", "users-guide/cockpit/"], [1, "m-t-16"], ["translate", "", 1, "btn", "btn-primary", "btn-sm", "m-t-16", 3, "click"]], template: function LegacyWelcomeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "p", 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 2);
        ɵngcc0.ɵɵdisableBindings();
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵtext(7, "Browse the manual ");
        ɵngcc0.ɵɵelementStart(8, "a", 3);
        ɵngcc0.ɵɵtext(9, "here");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(10, ".");
        ɵngcc0.ɵɵenableBindings();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "p", 4);
        ɵngcc0.ɵɵelementStart(12, "em");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "button", 5);
        ɵngcc0.ɵɵlistener("click", function LegacyWelcomeComponent_Template_button_click_15_listener() { ctx.restore(); return false; });
        ɵngcc0.ɵɵtext(16, " Get new dashboard ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(4, 3, "Welcome to Cockpit"), ".");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 5, "Browse the manual"));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(14, 7, "New default dashboard available."), " ");
    } }, directives: [ɵngcc1.GuideDocsComponent, ɵngcc1.C8yTranslateDirective, ɵngcc1.GuideHrefDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LegacyWelcomeComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-legacy-welcome-widget',
                template: "<div class=\"card-block\">\n  <p class=\"lead\" c8y-guide-docs>\n    <span>{{ 'Welcome to Cockpit' | translate }}.</span>\n    <span title=\"{{ 'Browse the manual' | translate }}\" class=\"cockpit-welcome-manual\" translate ngNonBindable\n      >Browse the manual <a c8y-guide-href=\"users-guide/cockpit/\">here</a>.</span\n    >\n  </p>\n  <p class=\"m-t-16\">\n    <em>{{ 'New default dashboard available.' | translate }} </em>\n  </p>\n  <button class=\"btn btn-primary btn-sm m-t-16\" (click)=\"restore(); (false)\" translate>\n    Get new dashboard\n  </button>\n</div>\n"
            }]
    }], function () { return [{ type: ContextDashboardComponent, decorators: [{
                type: i0.Host
            }] }]; }, null); })();
        return LegacyWelcomeComponent;
    }());
    LegacyWelcomeComponent.ctorParameters = function () { return [
        { type: ContextDashboardComponent, decorators: [{ type: i0.Host }] }
    ]; };

    // import for the preview img to get into the build.
    var previewImage = '';
    try {
        // tslint:disable-next-line: no-var-requires
        previewImage = require('@c8y/style/img/welcome-widget-pr.png');
    }
    catch (ex) {
        // intended empty
    }
    var ɵ0$3 = [{ label: i1.gettext('Home'), icon: 'home', priority: 10000, path: '/' }], ɵ1$1 = [
        {
            id: 'cockpit.welcome.widget',
            label: i1.gettext('Welcome to Cockpit'),
            description: i1.gettext('Displays a welcome message for Cockpit'),
            component: WelcomeToCockpit,
            previewImage: previewImage,
            data: {
                settings: {
                    noNewWidgets: false,
                    widgetDefaults: {
                        _width: 12,
                        _height: 6
                    },
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ], ɵ2 = [
        {
            id: 'Cockpit Welcome',
            label: i1.gettext('Welcome to Cockpit'),
            description: i1.gettext('Displays a welcome message for Cockpit'),
            component: LegacyWelcomeComponent,
            data: {
                settings: {
                    noNewWidgets: true,
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ];
    var CockpitDashboardModule = /** @class */ (function () {
        function CockpitDashboardModule() {
        }
        CockpitDashboardModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: CockpitDashboardModule,
                providers: [
                    {
                        provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                        useValue: config
                    }
                ]
            };
        };
CockpitDashboardModule.ɵfac = function CockpitDashboardModule_Factory(t) { return new (t || CockpitDashboardModule)(); };
CockpitDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CockpitDashboardModule });
CockpitDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: i1.HOOK_NAVIGATOR_NODES,
            useValue: ɵ0$3,
            multi: true
        },
        {
            provide: i1.HOOK_COMPONENTS,
            multi: true,
            useValue: ɵ1$1
        },
        {
            provide: i1.HOOK_COMPONENTS,
            multi: true,
            useValue: ɵ2
        }
    ], imports: [[
            i1.DocsModule,
            i1.CoreModule,
            ContextDashboardModule.config({
                routes: [
                    {
                        path: 'dashboard/:dashboardId',
                        component: ContextDashboardComponent,
                        canActivate: [DeviceDashboardGuard],
                        context: i1.ViewContext.Device
                    },
                    {
                        path: 'dashboard/:dashboardId',
                        component: ContextDashboardComponent,
                        canActivate: [GroupDashboardGuard],
                        context: i1.ViewContext.Group
                    },
                    {
                        path: '',
                        component: CockpitDashboardComponent
                    }
                ]
            }),
            i1.QuickLinkModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CockpitDashboardModule, [{
        type: i0.NgModule,
        args: [{
                entryComponents: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                imports: [
                    i1.DocsModule,
                    i1.CoreModule,
                    ContextDashboardModule.config({
                        routes: [
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [DeviceDashboardGuard],
                                context: i1.ViewContext.Device
                            },
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [GroupDashboardGuard],
                                context: i1.ViewContext.Group
                            },
                            {
                                path: '',
                                component: CockpitDashboardComponent
                            }
                        ]
                    }),
                    i1.QuickLinkModule
                ],
                declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                providers: [
                    {
                        provide: i1.HOOK_NAVIGATOR_NODES,
                        useValue: ɵ0$3,
                        multi: true
                    },
                    {
                        provide: i1.HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ1$1
                    },
                    {
                        provide: i1.HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ2
                    }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CockpitDashboardModule, { declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent], imports: [ɵngcc1.DocsModule, ɵngcc1.CoreModule, ContextDashboardModule, ɵngcc1.QuickLinkModule] }); })();
        return CockpitDashboardModule;
    }());

    var ReportDashboardGuard = /** @class */ (function () {
        function ReportDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        ReportDashboardGuard.prototype.canActivate = function (route) {
            var _this = this;
            var reportId = route.data.contextData && route.data.contextData.id;
            return rxjs.from(this.contextDashboardService.activateDashboards(route, [exports.ContextDashboardType.Named])).pipe(operators.tap(function (res) {
                return Array.isArray(res) && res.length === 0
                    ? _this.createDashboardIfNotExist(reportId)
                    : rxjs.of(true);
            }));
        };
        ReportDashboardGuard.prototype.createDashboardIfNotExist = function (reportId) {
            var dashboardCfg = {};
            return this.contextDashboardService.create(dashboardCfg, undefined, "report_" + reportId).then(function () { return true; });
        };
ReportDashboardGuard.ɵfac = function ReportDashboardGuard_Factory(t) { return new (t || ReportDashboardGuard)(ɵngcc0.ɵɵinject(ContextDashboardService)); };
ReportDashboardGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardGuard, factory: function (t) { return ReportDashboardGuard.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardGuard, [{
        type: i0.Injectable
    }], function () { return [{ type: ContextDashboardService }]; }, null); })();
        return ReportDashboardGuard;
    }());
    ReportDashboardGuard.ctorParameters = function () { return [
        { type: ContextDashboardService }
    ]; };

    var ReportDashboardNavigationFactory = /** @class */ (function () {
        function ReportDashboardNavigationFactory(navigatorService, inventoryService, reportDashboardService) {
            this.navigatorService = navigatorService;
            this.inventoryService = inventoryService;
            this.reportDashboardService = reportDashboardService;
            this.loaded = false;
        }
        ReportDashboardNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                var reports;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.loaded) return [3 /*break*/, 2];
                            this.loaded = true;
                            this.navigatorService.add(new i1.NavigatorNode({
                                label: i1.gettext('Reports'),
                                path: 'reports',
                                icon: 'c8y-reports',
                                priority: 5
                            }));
                            return [4 /*yield*/, this.reportDashboardService.listReports({
                                    filter: { __has: 'c8y_IsNavigatorNode' },
                                    pageSize: 2000
                                })];
                        case 1:
                            reports = (_a.sent()).data;
                            reports.forEach(function (report) {
                                var node = new i1.NavigatorNode({
                                    label: report.name,
                                    path: "reports/" + report.id,
                                    icon: report.icon,
                                    priority: report.priority,
                                    routerLinkExact: false
                                });
                                _this.navigatorService.add(node);
                            });
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
ReportDashboardNavigationFactory.ɵfac = function ReportDashboardNavigationFactory_Factory(t) { return new (t || ReportDashboardNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc3.InventoryService), ɵngcc0.ɵɵinject(ReportDashboardService)); };
ReportDashboardNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardNavigationFactory, factory: function (t) { return ReportDashboardNavigationFactory.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardNavigationFactory, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc3.InventoryService }, { type: ReportDashboardService }]; }, null); })();
        return ReportDashboardNavigationFactory;
    }());
    ReportDashboardNavigationFactory.ctorParameters = function () { return [
        { type: i1.NavigatorService },
        { type: client.InventoryService },
        { type: ReportDashboardService }
    ]; };

    var ɵ0$2 = [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [ReportDashboardGuard],
            context: i1.ViewContext.Report
        }
    ];
    var ReportDashboardModule = /** @class */ (function () {
        function ReportDashboardModule() {
        }
ReportDashboardModule.ɵfac = function ReportDashboardModule_Factory(t) { return new (t || ReportDashboardModule)(); };
ReportDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReportDashboardModule });
ReportDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ReportDashboardGuard,
        ReportDashboardNavigationFactory,
        ReportDashboardService,
        {
            provide: i1.HOOK_ROUTE,
            useValue: ɵ0$2,
            multi: true
        },
        {
            provide: i1.HOOK_NAVIGATOR_NODES,
            useClass: ReportDashboardNavigationFactory,
            multi: true
        }
    ], imports: [[
            i1.CoreModule,
            ContextDashboardModule,
            router.RouterModule.forChild([
                {
                    path: 'reports',
                    component: ReportDashboardListComponent
                }
            ])
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    i1.CoreModule,
                    ContextDashboardModule,
                    router.RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ])
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: i1.HOOK_ROUTE,
                        useValue: ɵ0$2,
                        multi: true
                    },
                    {
                        provide: i1.HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReportDashboardModule, { declarations: [ReportDashboardListComponent], imports: [ɵngcc1.CoreModule, ContextDashboardModule, ɵngcc4.RouterModule] }); })();
        return ReportDashboardModule;
    }());

    var DeviceManagementHomeDashboardComponent = /** @class */ (function () {
        function DeviceManagementHomeDashboardComponent(widgetService) {
            this.widgetService = widgetService;
            this.widgets = [];
            this.DEFAULT_HOME_WIDGETS = [
                {
                    name: 'Asset Alarms',
                    title: i1.gettext('Active, critical alarms'),
                    _x: 0,
                    _y: 0,
                    _height: 4,
                    _width: 6
                },
                {
                    name: 'Map',
                    title: i1.gettext('Map'),
                    _x: 6,
                    _y: 0,
                    _height: 8,
                    _width: 6
                }
            ];
        }
        DeviceManagementHomeDashboardComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.DEFAULT_HOME_WIDGETS.map(function (widget) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.widgetService
                                .mapLegacy(widget)
                                .then(function (transformedWidget) { return _this.widgets.push(transformedWidget); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
DeviceManagementHomeDashboardComponent.ɵfac = function DeviceManagementHomeDashboardComponent_Factory(t) { return new (t || DeviceManagementHomeDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(WidgetService)); };
DeviceManagementHomeDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceManagementHomeDashboardComponent, selectors: [["c8y-device-management-home-dashboard"]], decls: 4, vars: 8, consts: [[3, "contextDashboard", "widgets", "settings"]], template: function DeviceManagementHomeDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "c8y-widgets-dashboard", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, "Home"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("contextDashboard", ɵngcc0.ɵɵpureFunction0(6, _c10))("widgets", ctx.widgets)("settings", ɵngcc0.ɵɵpureFunction0(7, _c11));
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.WidgetsDashboardComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceManagementHomeDashboardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-device-management-home-dashboard',
                template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [contextDashboard]=\"{}\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isDisabled: false,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            }]
    }], function () { return [{ type: WidgetService }]; }, null); })();
        return DeviceManagementHomeDashboardComponent;
    }());
    DeviceManagementHomeDashboardComponent.ctorParameters = function () { return [
        { type: WidgetService }
    ]; };

    var DeviceInfoDashboardComponent = /** @class */ (function () {
        function DeviceInfoDashboardComponent(router, widgetService, translateService) {
            var _this = this;
            this.router = router;
            this.widgetService = widgetService;
            this.translateService = translateService;
            this.isLoading$ = new rxjs.BehaviorSubject(true);
            this.DEVICE_INFO_WIDGETS = [
                {
                    name: 'Alarm list',
                    title: i1.gettext('Active, critical alarms'),
                    _x: 4,
                    _y: 7,
                    _height: 4,
                    _width: 4,
                    config: {
                        options: {
                            orderMode: 'ACTIVE_FIRST',
                            severity: { CRITICAL: true },
                            status: {
                                ACTIVE: true,
                                ACKNOWLEDGED: false,
                                CLEARED: false
                            },
                            types: []
                        }
                    }
                },
                {
                    name: 'Map',
                    title: i1.gettext('Location'),
                    _x: 4,
                    _y: 11,
                    _height: 4,
                    _width: 8
                },
                {
                    name: 'Asset Properties',
                    title: i1.gettext('Device data'),
                    config: {
                        options: {
                            properties: [],
                            allowDisplayAndEditKnownProperties: true,
                            hiddenPropertiesKeyPaths: ['owner']
                        }
                    },
                    _x: 0,
                    _y: 7,
                    _height: 8,
                    _width: 4
                },
                {
                    name: 'Data points graph',
                    title: i1.gettext('Device and communication'),
                    _x: 4,
                    _y: 2,
                    _height: 5,
                    _width: 8,
                    config: {
                        interval: 'hours',
                        aggregation: 'NONE',
                        realtime: true,
                        datapointsInitialDisplayLimit: 3,
                        datapoints: [
                            {
                                fragment: 'c8y_Battery',
                                series: 'level',
                                label: this.translateService.instant('Battery: level'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e07b3',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'rssi',
                                label: this.translateService.instant('Signal: RSSI'),
                                unit: 'dBm',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#a7d0f1',
                                __active: true
                            },
                            {
                                fragment: 'c8y_MemoryMeasurement',
                                series: 'Used',
                                label: this.translateService.instant('Memory: used'),
                                unit: 'MB',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#f75229',
                                __active: true
                            },
                            {
                                fragment: 'c8y_CPUMeasurement',
                                series: 'Workload',
                                label: this.translateService.instant('CPU: workload'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#b24f3e',
                                __active: true
                            },
                            {
                                fragment: 'c8y_NetworkStatistics',
                                series: 'Upload',
                                label: this.translateService.instant('Network: upload'),
                                unit: 'KB/s',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#88c039',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RCSP',
                                label: this.translateService.instant('Signal: RCSP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e2f19',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSCP',
                                label: this.translateService.instant('Signal: RSCP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#5e2f19',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSRP',
                                label: this.translateService.instant('Signal: RSRP'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#43ba3b',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'RSRQ',
                                label: this.translateService.instant('Signal: RSRQ'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#14b0b3',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'ber',
                                label: this.translateService.instant('Signal: BER'),
                                unit: '%',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#44ff33',
                                __active: true
                            },
                            {
                                fragment: 'c8y_SignalStrength',
                                series: 'ECN0',
                                label: this.translateService.instant('Signal: ECN0'),
                                renderType: 'min',
                                lineType: 'line',
                                color: '#873efa',
                                __active: true
                            },
                            {
                                fragment: 'c8y_NetworkStatistics',
                                series: 'Download',
                                label: this.translateService.instant('Network: download'),
                                unit: 'KB/s',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#f27a45',
                                __active: true
                            },
                            {
                                fragment: 'c8y_MemoryMeasurement',
                                series: 'Total',
                                label: this.translateService.instant('Memory: total'),
                                unit: 'MB',
                                renderType: 'min',
                                lineType: 'line',
                                color: '#dadd8c',
                                __active: true
                            }
                        ],
                        alarmsEventsConfigs: [
                            {
                                label: 'c8y_LocationUpdate',
                                timelineType: 'EVENT',
                                color: '#6f6cd0',
                                filters: {
                                    type: 'c8y_LocationUpdate'
                                },
                                __active: true
                            },
                            {
                                label: 'c8y_UnavailabilityAlarm',
                                timelineType: 'ALARM',
                                color: '#375bf2',
                                filters: {
                                    type: 'c8y_UnavailabilityAlarm'
                                },
                                __active: true
                            }
                        ]
                    },
                    transformConfigWithContext: function (config, context, c8yDevices) {
                        'ngInject';
                        return c8yDevices
                            .getSupportedSeries(context.id)
                            .then(function (supportedMeasurementSeries) { return config.datapoints.filter(function (configMeasurement) { return supportedMeasurementSeries.find(function (supportedSeries) { return supportedSeries.fragment === configMeasurement.fragment &&
                            supportedSeries.series === configMeasurement.series; }); }); })
                            .then(function (datapoints) { return (Object.assign(Object.assign({}, config), { datapoints: datapoints })); });
                    }
                },
                {
                    name: 'deviceStatusWidget',
                    title: i1.gettext('Device status'),
                    _x: 0,
                    _y: 2,
                    _height: 5,
                    _width: 4
                },
                {
                    name: 'deviceGroupAssignmentWidget',
                    title: i1.gettext('Group assignment'),
                    _x: 8,
                    _y: 7,
                    _height: 4,
                    _width: 4
                },
                {
                    componentId: 'assetNotesWidget',
                    title: i1.gettext('Message of the day'),
                    classes: { 'panel-title-hidden': true },
                    _x: 0,
                    _y: 0,
                    _height: 2,
                    _width: 12
                },
                {
                    componentId: 'Map',
                    title: i1.gettext('Location'),
                    _x: 4,
                    _y: 11,
                    _height: 4,
                    _width: 8
                }
            ];
            this.currentContext$ = this.router.parent.data.pipe(operators.map(function (_a) {
                var contextData = _a.contextData;
                _this.title = contextData.name;
                return contextData;
            }));
            this.widgets$ = rxjs.from(this.DEVICE_INFO_WIDGETS).pipe(operators.mergeMap(function (widget) { return _this.widgetService.mapLegacy(widget); }), operators.map(function (widget) { return (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: _this.router.parent.snapshot.data.contextData }) })); }), operators.toArray());
            this.widgetsSubscription = rxjs.combineLatest([this.widgets$, this.currentContext$]).subscribe(function () {
                _this.isLoading$.next(false);
            });
        }
        DeviceInfoDashboardComponent.prototype.ngOnDestroy = function () {
            this.widgetsSubscription.unsubscribe();
        };
DeviceInfoDashboardComponent.ɵfac = function DeviceInfoDashboardComponent_Factory(t) { return new (t || DeviceInfoDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(WidgetService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
DeviceInfoDashboardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceInfoDashboardComponent, selectors: [["c8y-device-info-dashboard-dashboard"]], decls: 6, vars: 12, consts: [[3, "context", "widgets", "settings"]], template: function DeviceInfoDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "c8y-widgets-dashboard", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵpipe(5, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.currentContext$))("widgets", ɵngcc0.ɵɵpipeBind1(4, 6, ctx.widgets$))("settings", ɵngcc0.ɵɵpureFunction1(10, _c12, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.isLoading$)));
    } }, directives: [ɵngcc1.TitleComponent, ɵngcc1.WidgetsDashboardComponent], pipes: [ɵngcc6.AsyncPipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceInfoDashboardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'c8y-device-info-dashboard-dashboard',
                template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n<c8y-widgets-dashboard\n  [context]=\"currentContext$ | async\"\n  [widgets]=\"widgets$ | async\"\n  [settings]=\"{\n    isLoading: isLoading$ | async,\n    isDisabled: true,\n    canDelete: false,\n    translateWidgetTitle: true,\n    allowFullscreen: false,\n    title: false\n  }\"\n>\n</c8y-widgets-dashboard>\n"
            }]
    }], function () { return [{ type: ɵngcc4.ActivatedRoute }, { type: WidgetService }, { type: ɵngcc2.TranslateService }]; }, null); })();
        return DeviceInfoDashboardComponent;
    }());
    DeviceInfoDashboardComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: WidgetService },
        { type: i2.TranslateService }
    ]; };

    var ɵ0$1 = {
        path: '',
        component: DeviceManagementHomeDashboardComponent
    }, ɵ1 = [{ label: i1.gettext('Home'), icon: 'home', priority: 10000, path: '/' }];
    var DeviceManagementHomeDashboardModule = /** @class */ (function () {
        function DeviceManagementHomeDashboardModule() {
        }
DeviceManagementHomeDashboardModule.ɵfac = function DeviceManagementHomeDashboardModule_Factory(t) { return new (t || DeviceManagementHomeDashboardModule)(); };
DeviceManagementHomeDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceManagementHomeDashboardModule });
DeviceManagementHomeDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: i1.HOOK_ONCE_ROUTE,
            useValue: ɵ0$1,
            multi: true
        },
        {
            provide: i1.HOOK_NAVIGATOR_NODES,
            useValue: ɵ1,
            multi: true
        }
    ], imports: [[common.CommonModule, i1.CoreModule, ContextDashboardModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceManagementHomeDashboardModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [DeviceManagementHomeDashboardComponent],
                imports: [common.CommonModule, i1.CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceManagementHomeDashboardComponent],
                providers: [
                    {
                        provide: i1.HOOK_ONCE_ROUTE,
                        useValue: ɵ0$1,
                        multi: true
                    },
                    {
                        provide: i1.HOOK_NAVIGATOR_NODES,
                        useValue: ɵ1,
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceManagementHomeDashboardModule, { declarations: [DeviceManagementHomeDashboardComponent], imports: [ɵngcc6.CommonModule, ɵngcc1.CoreModule, ContextDashboardModule] }); })();
        return DeviceManagementHomeDashboardModule;
    }());

    var ɵ0 = [
        {
            context: i1.ViewContext.Device,
            path: 'device-info',
            component: DeviceInfoDashboardComponent,
            label: i1.gettext('Info'),
            priority: 10000,
            icon: 'asterisk'
        }
    ];
    var DeviceInfoDashboardModule = /** @class */ (function () {
        function DeviceInfoDashboardModule() {
        }
DeviceInfoDashboardModule.ɵfac = function DeviceInfoDashboardModule_Factory(t) { return new (t || DeviceInfoDashboardModule)(); };
DeviceInfoDashboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceInfoDashboardModule });
DeviceInfoDashboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: i1.HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[common.CommonModule, i1.CoreModule, ContextDashboardModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceInfoDashboardModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [DeviceInfoDashboardComponent],
                imports: [common.CommonModule, i1.CoreModule, ContextDashboardModule],
                exports: [],
                entryComponents: [DeviceInfoDashboardComponent],
                providers: [
                    {
                        provide: i1.HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceInfoDashboardModule, { declarations: [DeviceInfoDashboardComponent], imports: [ɵngcc6.CommonModule, ɵngcc1.CoreModule, ContextDashboardModule] }); })();
        return DeviceInfoDashboardModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AppearanceSettingsComponent = AppearanceSettingsComponent;
    exports.COCKPIT_HOME_DASHBOARD_CONFIG = COCKPIT_HOME_DASHBOARD_CONFIG;
    exports.CONTEXT_DASHBOARD_CONFIG = CONTEXT_DASHBOARD_CONFIG;
    exports.CockpitDashboardComponent = CockpitDashboardComponent;
    exports.CockpitDashboardModule = CockpitDashboardModule;
    exports.ContextDashboardComponent = ContextDashboardComponent;
    exports.ContextDashboardModule = ContextDashboardModule;
    exports.ContextDashboardService = ContextDashboardService;
    exports.DASHBOARD_THEME_CLASSES = DASHBOARD_THEME_CLASSES;
    exports.DEFAULT_COCKPIT_HOME_WIDGETS = DEFAULT_COCKPIT_HOME_WIDGETS;
    exports.DashboardActionsFactory = DashboardActionsFactory;
    exports.DashboardDetailComponent = DashboardDetailComponent;
    exports.DeviceDashboardGuard = DeviceDashboardGuard;
    exports.DeviceInfoDashboardComponent = DeviceInfoDashboardComponent;
    exports.DeviceInfoDashboardModule = DeviceInfoDashboardModule;
    exports.DeviceManagementHomeDashboardComponent = DeviceManagementHomeDashboardComponent;
    exports.DeviceManagementHomeDashboardModule = DeviceManagementHomeDashboardModule;
    exports.GroupDashboardGuard = GroupDashboardGuard;
    exports.LegacyWelcomeComponent = LegacyWelcomeComponent;
    exports.ReportDashboardGuard = ReportDashboardGuard;
    exports.ReportDashboardListComponent = ReportDashboardListComponent;
    exports.ReportDashboardModule = ReportDashboardModule;
    exports.ReportDashboardNavigationFactory = ReportDashboardNavigationFactory;
    exports.ReportDashboardService = ReportDashboardService;
    exports.STYLING_CLASS_PREFIXES = STYLING_CLASS_PREFIXES;
    exports.WIDGET_CONTENT_CLASSES = WIDGET_CONTENT_CLASSES;
    exports.WIDGET_HEADER_CLASSES = WIDGET_HEADER_CLASSES;
    exports.WelcomeToCockpit = WelcomeToCockpit;
    exports.WidgetConfigComponent = WidgetConfigComponent;
    exports.WidgetPreviewComponent = WidgetPreviewComponent;
    exports.WidgetService = WidgetService;
    exports["ɵ2"] = ɵ2;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-context-dashboard.umd.js.map