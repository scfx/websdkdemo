(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@c8y/client'),require('@c8y/ngx-components'),require('@c8y/ngx-components/repository'),require('@angular/common'),require('@angular/router'),require('ngx-bootstrap/modal'),require('@angular/forms'),require('ngx-bootstrap/popover'),require('@ngx-translate/core'),require('@c8y/ngx-components/operations/single-operation-details'),require('ngx-bootstrap/dropdown'),require('ngx-bootstrap/tooltip'),require('ngx-bootstrap/buttons'),exports, require('@angular/core'), require('@c8y/ngx-components'), require('@c8y/client'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@c8y/ngx-components/repository'), require('@angular/router'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('ngx-bootstrap/buttons'), require('@angular/forms'), require('@angular/common'), require('ngx-bootstrap/modal'), require('@ngx-translate/core'), require('@c8y/ngx-components/operations/single-operation-details')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/device-profile', ['@angular/core','@c8y/client','@c8y/ngx-components','@c8y/ngx-components/repository','@angular/common','@angular/router','ngx-bootstrap/modal','@angular/forms','ngx-bootstrap/popover','@ngx-translate/core','@c8y/ngx-components/operations/single-operation-details','ngx-bootstrap/dropdown','ngx-bootstrap/tooltip','ngx-bootstrap/buttons','exports', '@angular/core', '@c8y/ngx-components', '@c8y/client', 'lodash-es', 'rxjs', 'rxjs/operators', '@c8y/ngx-components/repository', '@angular/router', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', 'ngx-bootstrap/buttons', '@angular/forms', '@angular/common', 'ngx-bootstrap/modal', '@ngx-translate/core', '@c8y/ngx-components/operations/single-operation-details'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.c8y.client,global.c8y.ngxComponents,global.c8y.ngxComponents.repository,global.ng.common,global.ng.router,global.ngxBootstrap.modal,global.ng.forms,global.ngxBootstrap.popover,global.ngxTranslate.core,global.c8y.ngxComponents.operations.singleOperationDetails,global.ngxBootstrap.dropdown,global.ngxBootstrap.tooltip,global.ngxBootstrap.buttons,(global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["device-profile"] = {}), global.ng.core, global.c8y["ngx-components"], global.client, global.lodashEs, global.rxjs, global.rxjs.operators, global.c8y["ngx-components"].repository, global.ng.router, global.dropdown, global.popover, global.tooltip, global.buttons, global.ng.forms, global.ng.common, global.modal, global.core$1, global.c8y["ngx-components"].operations["single-operation-details"]));
})(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,ɵngcc9,ɵngcc10,ɵngcc11,ɵngcc12,ɵngcc13,exports, core, ngxComponents, client, lodashEs, rxjs, operators, repository, router, dropdown, popover, tooltip, buttons, forms, common, modal, core$1, singleOperationDetails) { 
function DeviceProfileComponent_div_5_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "h4", 17);
    ɵngcc0.ɵɵtext(3, "Name and device type");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 18);
    ɵngcc0.ɵɵelementStart(5, "div", 19);
    ɵngcc0.ɵɵelementStart(6, "div", 20);
    ɵngcc0.ɵɵelementStart(7, "form", null, 21);
    ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(10, "label", 22);
    ɵngcc0.ɵɵtext(11, " Name ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "div", 23);
    ɵngcc0.ɵɵelementStart(13, "input", 24);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeviceProfileComponent_div_5_div_1_Template_input_ngModelChange_13_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.deviceProfile.name = $event; });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "span");
    ɵngcc0.ɵɵelementStart(16, "div", 25);
    ɵngcc0.ɵɵelementStart(17, "button", 26);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_1_Template_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r11); var _r8 = ɵngcc0.ɵɵreference(8); var ctx_r12 = ɵngcc0.ɵɵnextContext(2); ctx_r12.updateDeviceProfile({ name: ctx_r12.deviceProfile.name }); return _r8.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 20);
    ɵngcc0.ɵɵelementStart(22, "form", null, 27);
    ɵngcc0.ɵɵelementStart(24, "c8y-form-group");
    ɵngcc0.ɵɵelementStart(25, "label", 28);
    ɵngcc0.ɵɵtext(26);
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelementStart(28, "button", 29);
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵelement(30, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "div", 23);
    ɵngcc0.ɵɵelementStart(32, "input", 31);
    ɵngcc0.ɵɵlistener("ngModelChange", function DeviceProfileComponent_div_5_div_1_Template_input_ngModelChange_32_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.deviceProfile.c8y_Filter.type = $event; });
    ɵngcc0.ɵɵpipe(33, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(34, "span");
    ɵngcc0.ɵɵelementStart(35, "div", 25);
    ɵngcc0.ɵɵelementStart(36, "button", 26);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_1_Template_button_click_36_listener() { ɵngcc0.ɵɵrestoreView(_r11); var _r9 = ɵngcc0.ɵɵreference(23); var ctx_r14 = ɵngcc0.ɵɵnextContext(2); ctx_r14.updateDeviceProfile({ c8y_Filter: { type: ctx_r14.deviceProfile.c8y_Filter.type } }); return _r9.form.markAsPristine(); });
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵtext(38);
    ɵngcc0.ɵɵpipe(39, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r8 = ɵngcc0.ɵɵreference(8);
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(13);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 16, "e.g. My device profile"));
    ɵngcc0.ɵɵpropertyInterpolate("size", (ctx_r1.deviceProfile.name == null ? null : ctx_r1.deviceProfile.name.length) || 1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.deviceProfile.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(18, 18, "Save"));
    ɵngcc0.ɵɵproperty("disabled", _r8.form.invalid);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 20, "Save"), " ");
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(27, 22, "Device type"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(29, 24, ctx_r1.DEVICE_TYPE_POPOVER));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(33, 26, "e.g."), " c8y_Linux");
    ɵngcc0.ɵɵpropertyInterpolate("size", (ctx_r1.deviceProfile.c8y_Filter.type == null ? null : ctx_r1.deviceProfile.c8y_Filter.type.length) || 1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.deviceProfile.c8y_Filter.type)("disabled", ctx_r1.isDeviceProfileEmpty);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(37, 28, "Save"));
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isDeviceProfileEmpty);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(39, 30, "Save"), " ");
} }
function DeviceProfileComponent_div_5_c8y_list_group_9_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-list-group");
    ɵngcc0.ɵɵelementStart(1, "c8y-li");
    ɵngcc0.ɵɵelementStart(2, "c8y-li-icon");
    ɵngcc0.ɵɵelement(3, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "c8y-li-body", 32);
    ɵngcc0.ɵɵelementStart(5, "div", 33);
    ɵngcc0.ɵɵelementStart(6, "span", 34);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 35);
    ɵngcc0.ɵɵelementStart(9, "span", 34);
    ɵngcc0.ɵɵelementStart(10, "span", 36);
    ɵngcc0.ɵɵtext(11, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "button", 37);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_list_group_9_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.removeFirmware(); });
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelement(15, "i", 38);
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "div", 39);
    ɵngcc0.ɵɵelementStart(19, "button", 40);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_list_group_9_Template_button_click_19_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.removeFirmware(); });
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelement(21, "i", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-firmware");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.version);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.deviceProfile.c8y_DeviceProfile.firmware.version, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(14, 8, "Remove`firmware`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(17, 10, "Remove`firmware`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(20, 12, "Remove`firmware`"));
} }
function DeviceProfileComponent_div_5_div_10_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 42);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_div_10_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.addFirmware(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Add firmware"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, "No firmware defined. Add firmware"), " ");
} }
function DeviceProfileComponent_div_5_c8y_li_19_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 32);
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵelementStart(5, "span", 43);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 35);
    ɵngcc0.ɵɵelementStart(8, "span", 43);
    ɵngcc0.ɵɵelementStart(9, "span", 44);
    ɵngcc0.ɵɵtext(10, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "button", 45);
    ɵngcc0.ɵɵlistener("(click", function DeviceProfileComponent_div_5_c8y_li_19_Template_button__click_12_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); var software_r20 = restoredCtx.$implicit; var ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.removeItem(software_r20, "software"); });
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelement(14, "i", 38);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 39);
    ɵngcc0.ɵɵelementStart(18, "button", 46);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_19_Template_button_click_18_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); var software_r20 = restoredCtx.$implicit; var ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.removeItem(software_r20, "software"); });
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelement(20, "i", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var software_r20 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-tools");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", software_r20.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r20.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", software_r20.version);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", software_r20.version, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 8, "Remove`software`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "Remove`software`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(19, 12, "Remove`software`"));
} }
function DeviceProfileComponent_div_5_span_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No software defined."), " ");
} }
function DeviceProfileComponent_div_5_c8y_li_35_Template(rf, ctx) { if (rf & 1) {
    var _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 48);
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵelementStart(5, "span", 34);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 35);
    ɵngcc0.ɵɵelementStart(8, "span", 49);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "button", 37);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_35_Template_button_click_10_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); var configuration_r24 = restoredCtx.$implicit; var ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.removeItem(configuration_r24, "configuration"); });
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "i", 38);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 39);
    ɵngcc0.ɵɵelementStart(16, "button", 46);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_c8y_li_35_Template_button_click_16_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); var configuration_r24 = restoredCtx.$implicit; var ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.removeItem(configuration_r24, "configuration"); });
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelement(18, "i", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var configuration_r24 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", "gears");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", configuration_r24.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", configuration_r24.name, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(configuration_r24.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 7, "Remove`configuration`"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 9, "Remove`configuration`"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(17, 11, "Remove`configuration`"));
} }
function DeviceProfileComponent_div_5_span_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "No configuration defined."), " ");
} }
function DeviceProfileComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, DeviceProfileComponent_div_5_div_1_Template, 40, 32, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵelement(5, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "h4", 7);
    ɵngcc0.ɵɵtext(7, " Firmware ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 8);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileComponent_div_5_c8y_list_group_9_Template, 22, 14, "c8y-list-group", 1);
    ɵngcc0.ɵɵtemplate(10, DeviceProfileComponent_div_5_div_10_Template, 6, 6, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 3);
    ɵngcc0.ɵɵelementStart(12, "div", 4);
    ɵngcc0.ɵɵelementStart(13, "div", 5);
    ɵngcc0.ɵɵelement(14, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "h4", 7);
    ɵngcc0.ɵɵtext(16, " Software ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "div", 8);
    ɵngcc0.ɵɵelementStart(18, "c8y-list-group");
    ɵngcc0.ɵɵtemplate(19, DeviceProfileComponent_div_5_c8y_li_19_Template, 21, 14, "c8y-li", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "div", 11);
    ɵngcc0.ɵɵelementStart(21, "button", 12);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_Template_button_click_21_listener() { ɵngcc0.ɵɵrestoreView(_r29); var ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.addSoftware(); });
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelement(23, "i", 13);
    ɵngcc0.ɵɵtemplate(24, DeviceProfileComponent_div_5_span_24_Template, 3, 3, "span", 14);
    ɵngcc0.ɵɵtext(25);
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "div", 15);
    ɵngcc0.ɵɵelementStart(28, "div", 4);
    ɵngcc0.ɵɵelementStart(29, "div", 5);
    ɵngcc0.ɵɵelement(30, "i", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "h4", 7);
    ɵngcc0.ɵɵtext(32, " Configuration ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(33, "div", 8);
    ɵngcc0.ɵɵelementStart(34, "c8y-list-group", 16);
    ɵngcc0.ɵɵtemplate(35, DeviceProfileComponent_div_5_c8y_li_35_Template, 19, 13, "c8y-li", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(36, "div", 11);
    ɵngcc0.ɵɵelementStart(37, "button", 12);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileComponent_div_5_Template_button_click_37_listener() { ɵngcc0.ɵɵrestoreView(_r29); var ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.addConfiguration(); });
    ɵngcc0.ɵɵpipe(38, "translate");
    ɵngcc0.ɵɵelement(39, "i", 13);
    ɵngcc0.ɵɵtemplate(40, DeviceProfileComponent_div_5_span_40_Template, 3, 3, "span", 14);
    ɵngcc0.ɵɵtext(41);
    ɵngcc0.ɵɵpipe(42, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.deviceProfile);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-firmware");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.deviceProfile.c8y_DeviceProfile.firmware);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.deviceProfile.c8y_DeviceProfile.firmware);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-tools");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.deviceProfile.c8y_DeviceProfile.software);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(22, 14, "Add software"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.deviceProfile.c8y_DeviceProfile.software == null ? null : ctx_r0.deviceProfile.c8y_DeviceProfile.software.length) === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 16, "Add software"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("c8yIcon", "gears");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.deviceProfile.c8y_DeviceProfile.configuration);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(38, 18, "Add configuration"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.deviceProfile.c8y_DeviceProfile.configuration == null ? null : ctx_r0.deviceProfile.c8y_DeviceProfile.configuration.length) === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 20, "Add configuration"), " ");
} }
function DeviceProfileListComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "h1", 9);
    ɵngcc0.ɵɵelementStart(2, "h3", 10);
    ɵngcc0.ɵɵtext(3, " No device profiles available. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 10);
    ɵngcc0.ɵɵtext(5, " Add a new device profile by clicking below. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "p");
    ɵngcc0.ɵɵelementStart(7, "button", 11);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_div_15_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.createDeviceProfile(); });
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-profile");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(8, 3, "Add device profile"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 5, "Add device profile"), " ");
} }
function DeviceProfileListComponent_c8y_li_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 12);
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 15);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 2, "Device profile"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 4, "Device type"), " ");
} }
function DeviceProfileListComponent_c8y_li_21_span_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var deviceProfile_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type, " ");
} }
function DeviceProfileListComponent_c8y_li_21_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 26);
    ɵngcc0.ɵɵelementStart(1, "em");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "Undefined"), " ");
} }
function DeviceProfileListComponent_c8y_li_21_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li");
    ɵngcc0.ɵɵelementStart(1, "c8y-li-icon");
    ɵngcc0.ɵɵelement(2, "i", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "c8y-li-body", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 17);
    ɵngcc0.ɵɵelementStart(5, "button", 18);
    ɵngcc0.ɵɵelementStart(6, "span", 19);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 17);
    ɵngcc0.ɵɵelementStart(9, "span", 20);
    ɵngcc0.ɵɵtext(10, " Device type ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, DeviceProfileListComponent_c8y_li_21_span_11_Template, 2, 1, "span", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, DeviceProfileListComponent_c8y_li_21_ng_template_12_Template, 4, 3, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "c8y-li-action", 23);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementStart(16, "c8y-li-action", 24);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_c8y_li_21_Template_c8y_li_action_click_16_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); var deviceProfile_r5 = restoredCtx.$implicit; var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.duplicateDeviceProfile(deviceProfile_r5); });
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "c8y-li-action", 25);
    ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_c8y_li_21_Template_c8y_li_action_click_18_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); var deviceProfile_r5 = restoredCtx.$implicit; var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.deleteDeviceProfile(deviceProfile_r5); });
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var deviceProfile_r5 = ctx.$implicit;
    var _r7 = ɵngcc0.ɵɵreference(13);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("title", deviceProfile_r5.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/device-profiles/", deviceProfile_r5.id, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", deviceProfile_r5.name, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", (deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type) || "-");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", deviceProfile_r5.c8y_Filter == null ? null : deviceProfile_r5.c8y_Filter.type)("ngIfElse", _r7);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate1("routerLink", "/device-profiles/", deviceProfile_r5.id, "");
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(15, 10, "Edit"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(17, 12, "Duplicate"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(19, 14, "Delete"));
} }
var _c0 = function (a0) { return { "icon-spin": a0 }; };
var _c1 = function (a0) { return { "dd-low": a0 }; };
function DeviceTabProfileComponent_c8y_li_20_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "c8y-li", 24);
    ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_c8y_li_20_Template_c8y_li_click_0_listener() { var restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); var profile_r2 = restoredCtx.$implicit; var ctx_r3 = ɵngcc0.ɵɵnextContext(); ctx_r3.selectProfile(profile_r2); return ctx_r3.setPipe(""); });
    ɵngcc0.ɵɵelement(1, "c8y-highlight", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var profile_r2 = ctx.$implicit;
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("text", profile_r2.name || "--")("pattern", ctx_r1.pattern);
} }
function DeviceTabProfileDetailComponent_div_13_small_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.emptyStateDetails), " ");
} }
function DeviceTabProfileDetailComponent_div_13_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 18);
    ɵngcc0.ɵɵtext(1, "No device profile selected");
    ɵngcc0.ɵɵelementEnd();
} }
function DeviceTabProfileDetailComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵelementStart(2, "div", 14);
    ɵngcc0.ɵɵelement(3, "h1", 15);
    ɵngcc0.ɵɵelementStart(4, "p");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "br");
    ɵngcc0.ɵɵtemplate(9, DeviceTabProfileDetailComponent_div_13_small_9_Template, 3, 3, "small", 16);
    ɵngcc0.ɵɵtemplate(10, DeviceTabProfileDetailComponent_div_13_ng_template_10_Template, 2, 0, "ng-template", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r6 = ɵngcc0.ɵɵreference(11);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.sectionIcon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 4, ctx_r0.emptyStateText));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isProfileSelected)("ngIfElse", _r6);
} }
function DeviceTabProfileDetailComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 19);
} }
function DeviceTabProfileDetailComponent_c8y_device_profile_item_list_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "c8y-device-profile-item-list", 20);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("icon", ctx_r2.sectionIcon)("comparisonResults", ctx_r2.items)("showProfileItems", ctx_r2.isProfileSelected && !ctx_r2.isEmpty)("showTextLabel", ctx_r2.showTextLabel);
} }
function DeviceTabProfileDetailComponent_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 21);
} }
function DeviceTabProfileDetailComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 22);
} }
function DeviceProfileItemListComponent_div_0_div_1_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DeviceProfileItemListComponent_div_0_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelement(2, "i", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 9);
    ɵngcc0.ɵɵtemplate(4, DeviceProfileItemListComponent_div_0_div_1_div_2_ng_container_4_Template, 1, 0, "ng-container", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var comparisonResult_r3 = ɵngcc0.ɵɵnextContext(2).$implicit;
    var ctx_r8 = ɵngcc0.ɵɵnextContext();
    var _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r8.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", comparisonResult_r3.profile);
} }
function DeviceProfileItemListComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtemplate(2, DeviceProfileItemListComponent_div_0_div_1_div_2_Template, 5, 3, "div", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var comparisonResult_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", comparisonResult_r3.profile);
} }
function DeviceProfileItemListComponent_div_0_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DeviceProfileItemListComponent_div_0_c8y_messages_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "c8y-messages", 16);
    ɵngcc0.ɵɵelementStart(1, "c8y-message");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var comparisonResult_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, comparisonResult_r3.comparisonAlert), " ");
} }
function DeviceProfileItemListComponent_div_0_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 17);
} }
var _c2 = function (a0) { return { "has-warning": a0 }; };
function DeviceProfileItemListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtemplate(1, DeviceProfileItemListComponent_div_0_div_1_Template, 3, 1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelementStart(4, "div", 6);
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵelement(6, "i", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 9);
    ɵngcc0.ɵɵtemplate(8, DeviceProfileItemListComponent_div_0_ng_container_8_Template, 1, 0, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileItemListComponent_div_0_c8y_messages_9_Template, 4, 3, "c8y-messages", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, DeviceProfileItemListComponent_div_0_div_10_Template, 1, 0, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var comparisonResult_r3 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    var _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showProfileItems);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c2, !!comparisonResult_r3.comparisonAlert));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r0.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", comparisonResult_r3.device ? comparisonResult_r3.device : comparisonResult_r3.profile);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", comparisonResult_r3.comparisonAlert);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.showProfileItems);
} }
function DeviceProfileItemListComponent_ng_template_1_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵelementStart(1, "span", 26);
    ɵngcc0.ɵɵtext(2, "Version");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var details_r14 = ɵngcc0.ɵɵnextContext().itemDetails;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("title", details_r14);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(details_r14);
} }
function DeviceProfileItemListComponent_ng_template_1_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var details_r14 = ɵngcc0.ɵɵnextContext().itemDetails;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(details_r14);
} }
function DeviceProfileItemListComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵelementStart(2, "span", 20);
    ɵngcc0.ɵɵelementStart(3, "span", 21);
    ɵngcc0.ɵɵtext(4, "Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 22);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 23);
    ɵngcc0.ɵɵtemplate(8, DeviceProfileItemListComponent_ng_template_1_span_8_Template, 5, 2, "span", 24);
    ɵngcc0.ɵɵtemplate(9, DeviceProfileItemListComponent_ng_template_1_ng_template_9_Template, 2, 1, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var name_r13 = ctx.itemName;
    var details_r14 = ctx.itemDetails;
    var _r16 = ɵngcc0.ɵɵreference(10);
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵpropertyInterpolate("title", name_r13);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", name_r13, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTextLabel && details_r14)("ngIfElse", _r16);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DeviceProfileNavigationFactory = /** @class */ (function () {
        function DeviceProfileNavigationFactory() {
        }
        DeviceProfileNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.nodeItem) {
                        this.nodeItem = new ngxComponents.NavigatorNode({
                            label: ngxComponents.gettext('Device profiles'),
                            path: '/device-profiles',
                            icon: 'c8y-device-profile',
                            parent: ngxComponents.gettext('Management')
                        });
                    }
                    return [2 /*return*/, this.nodeItem];
                });
            });
        };
DeviceProfileNavigationFactory.ɵfac = function DeviceProfileNavigationFactory_Factory(t) { return new (t || DeviceProfileNavigationFactory)(); };
DeviceProfileNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileNavigationFactory, factory: function (t) { return DeviceProfileNavigationFactory.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileNavigationFactory, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return DeviceProfileNavigationFactory;
    }());

    var DeviceProfileService = /** @class */ (function () {
        function DeviceProfileService(inventoryService, operationService, alertService) {
            this.inventoryService = inventoryService;
            this.operationService = operationService;
            this.alertService = alertService;
            this.dateFrom = new Date(0);
            this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
            this.NOT_INSTALLED_WARNING = ngxComponents.gettext('Not installed on the device');
            this.VERSION_MISSMATCH_WARNING = ngxComponents.gettext('Version mismatch');
            this.SAME_URL_WARNING = ngxComponents.gettext('Installed configuration has the same URL but different name or type than the one in the profile');
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceProfileService.prototype.createDeviceProfile = function (deviceProfile) {
            if (lodashEs.get(deviceProfile, 'c8y_Filter.type') === '') {
                delete deviceProfile.c8y_Filter.type;
            }
            return this.inventoryService.create(deviceProfile);
        };
        DeviceProfileService.prototype.getDeviceProfilesByDeviceType = function (deviceType) {
            var deviceTypeFilter = {
                __or: [
                    { 'c8y_Filter.type': deviceType },
                    { 'c8y_Filter.type': '' },
                    { __not: { __has: 'c8y_Filter.type' } }
                ]
            };
            return this.getDeviceProfiles(deviceTypeFilter);
        };
        DeviceProfileService.prototype.getDeviceProfiles = function (andQuery) {
            var query = {
                type: 'c8y_Profile'
            };
            var filter = {
                pageSize: 100,
                withTotalPages: true
            };
            query = this.queriesUtil.addAndFilter(query, andQuery || {});
            return this.inventoryService.listQuery(query, filter);
        };
        DeviceProfileService.prototype.getProfileOperation = function (deviceId) {
            return __awaiter(this, void 0, void 0, function () {
                var filter, operation;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filter = {
                                deviceId: deviceId,
                                fragmentType: 'c8y_DeviceProfile',
                                dateFrom: this.dateFrom.toISOString(),
                                dateTo: this.dateTo.toISOString(),
                                revert: true,
                                pageSize: 1
                            };
                            return [4 /*yield*/, this.operationService.list(filter)];
                        case 1:
                            operation = (_a.sent()).data[0];
                            return [2 /*return*/, operation && operation.status !== client.OperationStatus.SUCCESSFUL ? operation : undefined];
                    }
                });
            });
        };
        DeviceProfileService.prototype.createProfileOperation = function (device, deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var operation, operationCfg, data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationCfg = {
                                deviceId: device.id,
                                profileId: deviceProfile.id,
                                profileName: deviceProfile.name,
                                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                                description: "Assign device profile " + deviceProfile.name + " to device " + device.name
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.operationService.create(operationCfg)];
                        case 2:
                            data = (_a.sent()).data;
                            operation = data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, operation];
                    }
                });
            });
        };
        DeviceProfileService.prototype.getFirmwareItems = function (device, selectedProfile) {
            var deviceFirmware = device.c8y_Firmware;
            var profileFirmware = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.firmware');
            var deviceItems = [];
            var profileItems = [];
            if (deviceFirmware) {
                deviceItems.push(deviceFirmware);
            }
            if (profileFirmware) {
                profileItems.push(profileFirmware);
            }
            return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
        };
        DeviceProfileService.prototype.getSoftwareItems = function (device, selectedProfile) {
            var deviceSoftware = device.c8y_SoftwareList;
            var profileSoftware = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.software');
            return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
        };
        DeviceProfileService.prototype.getConfigurationItems = function (device, selectedProfile) {
            var deviceConfiguration = [];
            Object.keys(device).forEach(function (key) {
                if (key.slice(0, 18) === 'c8y_Configuration_') {
                    deviceConfiguration.push(device[key]);
                }
            });
            var profileConfiguration = lodashEs.get(selectedProfile, 'c8y_DeviceProfile.configuration');
            return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
        };
        DeviceProfileService.prototype.getAlert = function (itemType) {
            var _this = this;
            var notInstalled = function (comparisionResult) {
                return !comparisionResult.device ? _this.NOT_INSTALLED_WARNING : '';
            };
            switch (itemType) {
                case 'firmware':
                case 'software':
                    return function (comparisionResult) {
                        return comparisionResult.device &&
                            comparisionResult.profile &&
                            comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails
                            ? _this.VERSION_MISSMATCH_WARNING
                            : notInstalled(comparisionResult);
                    };
                case 'configuration':
                    return function (comparisionResult) {
                        return comparisionResult.device &&
                            comparisionResult.profile &&
                            (comparisionResult.device.itemName !== comparisionResult.profile.itemName ||
                                comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)
                            ? _this.SAME_URL_WARNING
                            : notInstalled(comparisionResult);
                    };
                default:
                    return notInstalled;
            }
        };
        DeviceProfileService.prototype.createProfileComparison = function (deviceItems, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
            if (deviceItems === void 0) { deviceItems = []; }
            if (profileItems === void 0) { profileItems = []; }
            var comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
            var extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
            return lodashEs.sortBy(lodashEs.toArray(extendedComparisonObj), 'name');
        };
        DeviceProfileService.prototype.createProfileComparisonFromDeviceItems = function (deviceItems, mergeByProperty, propertyNameWithDetails) {
            return deviceItems.reduce(function (comapritionItem, deviceItem) {
                var _a;
                return Object.assign(comapritionItem, (_a = {},
                    _a[deviceItem[mergeByProperty]] = {
                        device: {
                            itemName: deviceItem.name,
                            itemDetails: deviceItem[propertyNameWithDetails],
                            itemUrl: deviceItem.url
                        },
                        profile: undefined
                    },
                    _a));
            }, {});
        };
        DeviceProfileService.prototype.extendProfileComparisonWithProfileItems = function (comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
            profileItems.forEach(function (profileItem) {
                var comparisionResult = {
                    profile: {
                        itemName: profileItem.name,
                        itemDetails: profileItem[propertyNameWithDetails],
                        itemUrl: profileItem.url
                    },
                    device: comparisonObj[profileItem[mergeByProperty]]
                        ? comparisonObj[profileItem[mergeByProperty]].device
                        : undefined
                };
                comparisionResult.comparisonAlert = getAlert(comparisionResult);
                comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
            });
            return comparisonObj;
        };
DeviceProfileService.ɵfac = function DeviceProfileService_Factory(t) { return new (t || DeviceProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc1.OperationService), ɵngcc0.ɵɵinject(ɵngcc2.AlertService)); };
DeviceProfileService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileService, factory: function (t) { return DeviceProfileService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc1.OperationService }, { type: ɵngcc2.AlertService }]; }, null); })();
        return DeviceProfileService;
    }());
    DeviceProfileService.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: client.OperationService },
        { type: ngxComponents.AlertService }
    ]; };

    var SelectConfigurationModalComponent = /** @class */ (function () {
        function SelectConfigurationModalComponent(repositoryService) {
            var _this = this;
            this.repositoryService = repositoryService;
            this.title = ngxComponents.gettext('Select configuration');
            this.load = new rxjs.Subject();
            this.configurations = this.load.pipe(operators.switchMap(function () { return _this.getItems(); }), operators.map(function (_a) {
                var data = _a.data;
                return _this.aggregate(data);
            }));
            this.resultEmitter = new core.EventEmitter();
            this.deviceTypeQuery = {};
            this.searchQuery = {};
            this.labels = { ok: ngxComponents.gettext('Save') };
            this.queriesUtil = new client.QueriesUtil();
        }
        SelectConfigurationModalComponent.prototype.search = function (searchTerm) {
            if (!searchTerm) {
                this.searchQuery = {};
            }
            else {
                this.searchQuery = this.queriesUtil.addOrFilter({ name: "*" + searchTerm + "*" }, { configurationType: "*" + searchTerm + "*" });
            }
            this.load.next();
        };
        SelectConfigurationModalComponent.prototype.result = function (selectedItems) {
            this.resultEmitter.emit(selectedItems);
        };
        SelectConfigurationModalComponent.prototype.getItems = function () {
            return this.repositoryService.listRepositoryEntries(repository.RepositoryType.CONFIGURATION, {
                query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
                params: { pageSize: 100 }
            });
        };
        SelectConfigurationModalComponent.prototype.aggregate = function (mos) {
            var selectedItems = this.selected;
            return mos.reduce(function (acc, curr) {
                curr.configurationType = curr.configurationType || curr.name;
                var selected = selectedItems && selectedItems.filter(function (val) { return val.url === curr.url; }).length > 0;
                var selectModalOption = {
                    body: [{ value: curr.name }],
                    obj: curr,
                    selected: selected
                };
                var selectModalObject = acc.find(function (val) { return val.body[0].value === curr.configurationType; });
                if (selectModalObject) {
                    selectModalObject.options.push(selectModalOption);
                }
                else {
                    selectModalObject = {
                        groupId: curr.id,
                        body: [{ value: curr.configurationType }],
                        options: [selectModalOption]
                    };
                    acc.push(selectModalObject);
                }
                return acc;
            }, []);
        };
SelectConfigurationModalComponent.ɵfac = function SelectConfigurationModalComponent_Factory(t) { return new (t || SelectConfigurationModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.RepositoryService)); };
SelectConfigurationModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectConfigurationModalComponent, selectors: [["c8y-select-configuration-modal"]], decls: 2, vars: 8, consts: [[3, "icon", "title", "items", "mode", "disableSelected", "labels", "result", "search"]], template: function SelectConfigurationModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-select-modal", 0);
        ɵngcc0.ɵɵlistener("result", function SelectConfigurationModalComponent_Template_c8y_select_modal_result_0_listener($event) { return ctx.result($event); })("search", function SelectConfigurationModalComponent_Template_c8y_select_modal_search_0_listener($event) { return ctx.search($event); });
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("icon", "gears")("title", ctx.title)("items", ɵngcc0.ɵɵpipeBind1(1, 6, ctx.configurations))("mode", "multi")("disableSelected", true)("labels", ctx.labels);
    } }, directives: [ɵngcc2.SelectModalComponent], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectConfigurationModalComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-select-configuration-modal',
                template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc3.RepositoryService }]; }, null); })();
        return SelectConfigurationModalComponent;
    }());
    SelectConfigurationModalComponent.ctorParameters = function () { return [
        { type: repository.RepositoryService }
    ]; };

    exports.DeviceProfileOperation = void 0;
    (function (DeviceProfileOperation) {
        DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
    })(exports.DeviceProfileOperation || (exports.DeviceProfileOperation = {}));

    var DeviceProfileComponent = /** @class */ (function () {
        function DeviceProfileComponent(route, alertService, inventoryService, location, breadcrumbService, bsModal, repositoryService) {
            this.route = route;
            this.alertService = alertService;
            this.inventoryService = inventoryService;
            this.location = location;
            this.breadcrumbService = breadcrumbService;
            this.bsModal = bsModal;
            this.repositoryService = repositoryService;
            this.DEVICE_TYPE_POPOVER = ngxComponents.gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceProfileComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var profileId, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            profileId = this.route.snapshot.paramMap.get('id');
                            _a = this;
                            return [4 /*yield*/, this.getDeviceProfile(profileId)];
                        case 1:
                            _a.deviceProfile = (_b.sent());
                            if (this.deviceProfile) {
                                this.profileName = this.deviceProfile.name;
                                if (!this.deviceProfile.c8y_DeviceProfile.software) {
                                    this.deviceProfile.c8y_DeviceProfile.software = [];
                                }
                                if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                                    this.deviceProfile.c8y_DeviceProfile.configuration = [];
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.addFirmware = function () {
            var _this = this;
            var initialState = {
                deviceTypeQuery: this.getDeviceTypeQuery(repository.RepositoryType.FIRMWARE),
                repositoryType: repository.RepositoryType.FIRMWARE,
                repositoryEntriesWithVersionsFn$: function (modalDialog) { return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, repository.RepositoryType.FIRMWARE); },
                icon: 'c8y-firmware',
                title: ngxComponents.gettext('Select firmware'),
                mode: ngxComponents.ModalSelectionMode.SINGLE
            };
            var modal = this.bsModal.show(repository.RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (firmwareList) {
                var _a = __read(firmwareList, 1), firmware = _a[0];
                if (!firmware) {
                    return;
                }
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, {
                    firmware: {
                        name: firmware.name,
                        version: firmware.version,
                        url: firmware.url,
                        isPatch: firmware.isPatch,
                        patchDependency: firmware.patchDependency
                    }
                });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        DeviceProfileComponent.prototype.getRepositoryEntriesWithVersions$ = function (searchTerm$, repoType) {
            var _this = this;
            return searchTerm$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (searchTerm) { return _this.repositoryService.listRepositoryEntries(repoType, {
                partialName: searchTerm,
                params: { pageSize: 100 },
                skipLegacy: true
            }); }), operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), operators.shareReplay(1));
        };
        DeviceProfileComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
            var _this = this;
            mos.forEach(function (mo) {
                mo.versions = _this.repositoryService.listBaseVersions(mo);
            });
            return mos;
        };
        DeviceProfileComponent.prototype.addConfiguration = function () {
            var _this = this;
            var modal = this.bsModal.show(SelectConfigurationModalComponent, {
                ignoreBackdropClick: true
            });
            modal.content.deviceTypeQuery = this.getDeviceTypeQuery(repository.RepositoryType.CONFIGURATION);
            modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (selectedConfigurations) {
                var selectedMapped = selectedConfigurations.map(function (selectedItem) {
                    return lodashEs.assign({
                        url: selectedItem.url,
                        name: selectedItem.name
                    }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
                });
                var merged = lodashEs.concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.configuration || []);
                var configuration = lodashEs.uniqWith(merged, function (arrVal, othVal) {
                    return arrVal.type && othVal.type && arrVal.type === othVal.type;
                });
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, { configuration: configuration });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        DeviceProfileComponent.prototype.addSoftware = function () {
            var _this = this;
            var initialState = {
                deviceTypeQuery: this.getDeviceTypeQuery(repository.RepositoryType.SOFTWARE),
                repositoryType: repository.RepositoryType.SOFTWARE,
                repositoryEntriesWithVersionsFn$: function (modalDialog) { return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, repository.RepositoryType.SOFTWARE); },
                selected: this.deviceProfile.c8y_DeviceProfile.software,
                icon: 'c8y-tools',
                title: ngxComponents.gettext('Select software'),
                mode: ngxComponents.ModalSelectionMode.MULTI
            };
            var modal = this.bsModal.show(repository.RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            modal.content.resultEmitter.pipe(operators.take(1)).subscribe(function (selectedSoftware) {
                var selectedMapped = selectedSoftware.map(function (selectedItem) {
                    return {
                        name: selectedItem.name,
                        version: selectedItem.version,
                        url: selectedItem.url,
                        action: 'install'
                    };
                });
                var merged = lodashEs.concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.software || []);
                var software = lodashEs.uniqWith(merged, function (arrVal, othVal) {
                    return arrVal.name && othVal.name && arrVal.name === othVal.name;
                });
                var deviceProfilePartial = {
                    c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
                };
                lodashEs.assign(deviceProfilePartial.c8y_DeviceProfile, { software: software });
                _this.updateDeviceProfile(deviceProfilePartial);
            });
        };
        Object.defineProperty(DeviceProfileComponent.prototype, "isDeviceProfileEmpty", {
            get: function () {
                var isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
                    this.deviceProfile.c8y_DeviceProfile.software.length > 0;
                var isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
                var isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
                    this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
                return isSoftware || isFirmware || isConfiguration;
            },
            enumerable: false,
            configurable: true
        });
        DeviceProfileComponent.prototype.removeItem = function (removedItem, category) {
            var deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
            };
            var filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(function (item) { return !lodashEs.isEqual(removedItem, item); });
            deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
            this.updateDeviceProfile(deviceProfilePartial);
        };
        DeviceProfileComponent.prototype.removeFirmware = function () {
            delete this.deviceProfile.c8y_DeviceProfile.firmware;
            this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
        };
        DeviceProfileComponent.prototype.updateDeviceProfile = function (partialDeviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                                delete partialDeviceProfile.c8y_Filter.type;
                            }
                            Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.inventoryService.update(partialDeviceProfile)];
                        case 2:
                            data = (_a.sent()).data;
                            this.deviceProfile = data;
                            this.profileName = this.deviceProfile.name;
                            this.alertService.success(ngxComponents.gettext('Device profile changed.'));
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.getDeviceProfile = function (profileId) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.inventoryService.detail(profileId)];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data];
                        case 2:
                            ex_2 = _a.sent();
                            this.alertService.addServerFailure(ex_2);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileComponent.prototype.getDeviceTypeQuery = function (repositoryType) {
            if (lodashEs.has(this.deviceProfile, 'c8y_Filter.type') &&
                !lodashEs.isEmpty(this.deviceProfile.c8y_Filter.type)) {
                if (repositoryType === repository.RepositoryType.CONFIGURATION) {
                    return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: "deviceType" } });
                }
                else {
                    return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, { __not: { __has: "c8y_Filter.type" } });
                }
            }
            return {};
        };
DeviceProfileComponent.ɵfac = function DeviceProfileComponent_Factory(t) { return new (t || DeviceProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Location), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreadcrumbService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.RepositoryService)); };
DeviceProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileComponent, selectors: [["c8y-device-profile"]], decls: 6, vars: 7, consts: [[3, "icon", "label", "path"], [4, "ngIf"], ["class", "card m-b-4", 4, "ngIf"], [1, "card", "m-b-4"], [1, "card-header", "separator"], [1, "card-icon"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], ["translate", "", 1, "card-title"], [1, "card-block", "p-t-0"], ["class", "p-t-8", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "p-t-8"], [1, "btn-add-block", "m-b-0", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["class", "m-r-8", 4, "ngIf"], [1, "card"], [1, "m-b-8"], ["translate", ""], [1, "card-block"], [1, "row"], [1, "col-md-4"], ["editNameForm", "ngForm"], ["translate", "", 1, "control-label"], [1, "input-group", "input-group-editable"], ["type", "text", "name", "name", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "size", "ngModelChange"], [1, "input-group-btn"], [1, "btn", "btn-primary", 3, "title", "disabled", "click"], ["editTypeForm", "ngForm"], [1, "control-label"], ["triggers", "focus", "container", "body", "placement", "right", 1, "btn", "btn-clean", "text-primary", 3, "popover"], [3, "c8yIcon"], ["type", "text", "name", "type", 1, "form-control", 3, "ngModel", "placeholder", "size", "disabled", "ngModelChange"], [1, "content-flex-50", "m-l-4"], [1, "col-6"], [1, "text-truncate", 3, "title"], [1, "col-5", "flex-row"], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "btn", "btn-danger", "btn-xs", "visible-xs", "flex-item-right", "m-r-8", "m-t-8", 3, "title", "click"], ["c8yIcon", "minus-circle"], [1, "flex-item-right", "p-r-8", "hidden-xs"], [1, "btn", "btn-dot", "showOnHover", 3, "title", "click"], ["c8yIcon", "minus-circle", 1, "text-danger"], [1, "btn-add-block", 3, "title", "click"], [1, "text-truncate-wrap", 3, "title"], ["translate", "", 1, "text-label-small", "m-r-8"], [1, "btn", "btn-danger", "btn-xs", "visible-xs", "flex-item-right", "m-r-8", "m-t-8", 3, "title", "(click"], [1, "btn", "btn-dot", "showOnHover", "text-danger", 3, "title", "click"], [1, "m-r-8"], [1, "content-flex-50"], [1, "label", "label-info"]], template: function DeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "c8y-breadcrumb");
        ɵngcc0.ɵɵelement(3, "c8y-breadcrumb-item", 0);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, DeviceProfileComponent_div_5_Template, 43, 22, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.profileName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "c8y-device-profile")("label", ɵngcc0.ɵɵpipeBind1(4, 5, "Device profiles"))("path", "device-profiles");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.deviceProfile);
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc2.BreadcrumbComponent, ɵngcc2.BreadcrumbItemComponent, ɵngcc4.NgIf, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc2.ListGroupComponent, ɵngcc4.NgForOf, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.RequiredValidator, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc8.PopoverDirective, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.ListItemBodyComponent], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-profile',
                template: "<c8y-title>{{ profileName }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\">\n  <div class=\"card m-b-4\" *ngIf=\"deviceProfile\">\n    <div class=\"card-header separator\">\n      <h4 translate>Name and device type</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <form #editNameForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.name\"\n                  name=\"name\"\n                  placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n                  size=\"{{ deviceProfile.name?.length || 1 }}\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"updateDeviceProfile({ name: deviceProfile.name }); editNameForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"editNameForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n        <div class=\"col-md-4\">\n          <form #editTypeForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn btn-clean text-primary\"\n                  popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n                  triggers=\"focus\"\n                  container=\"body\"\n                  placement=\"right\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                  name=\"type\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  size=\"{{ deviceProfile.c8y_Filter.type?.length || 1 }}\"\n                  [disabled]=\"isDeviceProfileEmpty\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\" updateDeviceProfile({ c8y_Filter: { type: deviceProfile.c8y_Filter.type } }); editTypeForm.form.markAsPristine()\"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"isDeviceProfileEmpty\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Firmware\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-firmware'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n              >\n                {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n              >\n                <span class=\"text-label-small m-r-4\" translate>Version</span>\n                {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`firmware`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n        <button\n          title=\"{{ 'Add firmware' | translate }}\"\n          class=\"btn-add-block\"\n          (click)=\"addFirmware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'No firmware defined. Add firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Software\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group>\n        <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-tools'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 m-l-4\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"text-truncate-wrap\" title=\"{{ software.version }}\">\n                <span class=\"text-label-small m-r-8\" translate>Version</span>\n                {{ software.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                ((click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`software`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs \">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                (click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add software' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addSoftware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\">\n            {{ 'No software defined.' | translate }}\n          </span>\n          {{ 'Add software' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Configuration\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group class=\"m-b-8\">\n        <c8y-li *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'gears'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ configuration.name }}\"\n               >\n                {{ configuration.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"label label-info\">{{ configuration.type }}</span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n                {{ 'Remove`configuration`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add configuration' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addConfiguration()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span class=\"m-r-8\" *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\">\n            {{ 'No configuration defined.' | translate }}\n          </span>\n          {{ 'Add configuration' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc5.ActivatedRoute }, { type: ɵngcc2.AlertService }, { type: ɵngcc1.InventoryService }, { type: ɵngcc4.Location }, { type: ɵngcc2.BreadcrumbService }, { type: ɵngcc6.BsModalService }, { type: ɵngcc3.RepositoryService }]; }, null); })();
        return DeviceProfileComponent;
    }());
    DeviceProfileComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: ngxComponents.AlertService },
        { type: client.InventoryService },
        { type: common.Location },
        { type: ngxComponents.BreadcrumbService },
        { type: modal.BsModalService },
        { type: repository.RepositoryService }
    ]; };

    var AddDeviceProfileComponent = /** @class */ (function () {
        function AddDeviceProfileComponent(modal, deviceProfileService) {
            var _this = this;
            this.modal = modal;
            this.deviceProfileService = deviceProfileService;
            this.DEVICE_TYPE_POPOVER = ngxComponents.gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
            this.deviceProfile = {
                name: '',
                type: 'c8y_Profile',
                c8y_Filter: {},
                c8y_DeviceProfile: {}
            };
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        AddDeviceProfileComponent.prototype.create = function () {
            return __awaiter(this, void 0, void 0, function () {
                var mo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(this.deviceProfile)];
                        case 1:
                            mo = (_a.sent()).data;
                            this._save(mo.id);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AddDeviceProfileComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
AddDeviceProfileComponent.ɵfac = function AddDeviceProfileComponent_Factory(t) { return new (t || AddDeviceProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalRef), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService)); };
AddDeviceProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddDeviceProfileComponent, selectors: [["c8y-add-device-profile"]], decls: 30, vars: 23, consts: [[1, "viewport-modal"], [1, "modal-header", "dialog-header"], [3, "c8yIcon"], ["translate", ""], [1, "modal-inner-scroll"], [1, "modal-body"], ["createDeviceProfile", "ngForm"], ["translate", "", "for", "name"], ["id", "name", "type", "text", "autocomplete", "off", "name", "name", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["triggers", "focus", 1, "btn", "btn-clean", 3, "popover"], ["id", "deviceType", "name", "deviceType", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], [1, "modal-footer"], ["translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"]], template: function AddDeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "i", 2);
        ɵngcc0.ɵɵelementStart(3, "h4", 3);
        ɵngcc0.ɵɵtext(4, " Add device profile ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "form", null, 6);
        ɵngcc0.ɵɵelementStart(9, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(10, "label", 7);
        ɵngcc0.ɵɵtext(11, "Name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "input", 8);
        ɵngcc0.ɵɵlistener("ngModelChange", function AddDeviceProfileComponent_Template_input_ngModelChange_12_listener($event) { return ctx.deviceProfile.name = $event; });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "c8y-form-group");
        ɵngcc0.ɵɵelementStart(15, "label");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementStart(18, "button", 9);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelement(20, "i", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function AddDeviceProfileComponent_Template_input_ngModelChange_21_listener($event) { return ctx.deviceProfile.c8y_Filter.type = $event; });
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "div", 11);
        ɵngcc0.ɵɵelementStart(24, "button", 12);
        ɵngcc0.ɵɵlistener("click", function AddDeviceProfileComponent_Template_button_click_24_listener() { return ctx.close(); });
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵtext(26, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "button", 13);
        ɵngcc0.ɵɵlistener("click", function AddDeviceProfileComponent_Template_button_click_27_listener() { return ctx.create(); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵtext(29, " Continue ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "c8y-device-profile");
        ɵngcc0.ɵɵadvance(10);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(13, 11, "e.g. My device profile"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.deviceProfile.name);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(17, 13, "Device type"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(19, 15, ctx.DEVICE_TYPE_POPOVER));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "question-circle-o");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "", ɵngcc0.ɵɵpipeBind1(22, 17, "e.g."), " c8y_Linux");
        ɵngcc0.ɵɵproperty("ngModel", ctx.deviceProfile.c8y_Filter.type);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(25, 19, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(28, 21, "Continue"));
        ɵngcc0.ɵɵproperty("disabled", _r0.form.invalid);
    } }, directives: [ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.FormGroupComponent, ɵngcc2.RequiredInputPlaceholderDirective, ɵngcc7.DefaultValueAccessor, ɵngcc7.RequiredValidator, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc8.PopoverDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddDeviceProfileComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-add-device-profile',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <h4 translate>\n      Add device profile\n    </h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Continue' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      translate\n    >\n      Continue\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc6.BsModalRef }, { type: DeviceProfileService }]; }, null); })();
        return AddDeviceProfileComponent;
    }());
    AddDeviceProfileComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: DeviceProfileService }
    ]; };

    var DeviceProfileListComponent = /** @class */ (function () {
        function DeviceProfileListComponent(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
            var _this = this;
            this.inventoryService = inventoryService;
            this.translateService = translateService;
            this.modalService = modalService;
            this.alertService = alertService;
            this.bsModalService = bsModalService;
            this.router = router;
            this.deviceProfileService = deviceProfileService;
            this.reloading = false;
            this.reload = new rxjs.BehaviorSubject(null);
            this.deviceProfiles$ = this.reload.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.deviceProfileService.getDeviceProfiles(); }), operators.tap(function () { return (_this.reloading = false); }));
        }
        DeviceProfileListComponent.prototype.ngOnInit = function () {
            this.loadDeviceProfiles();
        };
        DeviceProfileListComponent.prototype.loadDeviceProfiles = function () {
            this.reload.next();
        };
        DeviceProfileListComponent.prototype.createDeviceProfile = function () {
            return __awaiter(this, void 0, void 0, function () {
                var modal, profileId, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modal = this.bsModalService.show(AddDeviceProfileComponent, {
                                class: 'modal-sm'
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            profileId = _a.sent();
                            modal.close();
                            this.router.navigateByUrl("/device-profiles/" + profileId);
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.duplicateDeviceProfile = function (deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var copy, mo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            copy = lodashEs.cloneDeep(deviceProfile);
                            copy.id = null;
                            copy.name = 'Duplicate of ' + deviceProfile.name;
                            return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(copy)];
                        case 1:
                            mo = (_a.sent()).data;
                            this.router.navigateByUrl("/device-profiles/" + mo.id);
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.deleteDeviceProfile = function (deviceProfile) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceProfileName, title, confirmationText, finalQuestion, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            deviceProfileName = deviceProfile.name;
                            title = ngxComponents.gettext('Delete device profile');
                            confirmationText = this.translateService.instant(ngxComponents.gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName: deviceProfileName });
                            finalQuestion = this.translateService.instant(ngxComponents.gettext('Do you want to proceed?'));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.modalService.confirm(title, confirmationText + " " + finalQuestion, ngxComponents.Status.DANGER, {
                                    ok: ngxComponents.gettext('Delete')
                                })];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.delete(deviceProfile.id)];
                        case 3:
                            _a.sent();
                            this.reload.next();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceProfileListComponent.prototype.delete = function (profileId) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.inventoryService.delete(profileId)];
                        case 1:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Device profile deleted.'));
                            return [3 /*break*/, 3];
                        case 2:
                            ex_3 = _a.sent();
                            this.alertService.addServerFailure(ex_3);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
DeviceProfileListComponent.ɵfac = function DeviceProfileListComponent_Factory(t) { return new (t || DeviceProfileListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.InventoryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Router), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService)); };
DeviceProfileListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileListComponent, selectors: [["c8y-device-profile-list"]], decls: 22, vars: 32, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "plus-circle"], ["c8yIcon", "refresh", 3, "ngClass"], ["class", "c8y-empty-state m-t-40", 4, "ngIf"], [1, "m-b-24", 3, "ngClass"], ["class", "page-sticky-header c8y-list__item--empty-actions hidden-xs", 4, "ngIf"], [4, "c8yFor", "c8yForOf"], [1, "c8y-empty-state", "m-t-40"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], ["translate", ""], [1, "btn", "btn-primary", 3, "title", "click"], [1, "page-sticky-header", "c8y-list__item--empty-actions", "hidden-xs"], [1, "p-l-24"], [1, "content-flex-50"], [1, "col-6"], ["c8yIcon", "c8y-device-profile"], [1, "col-6", 3, "title"], [1, "btn-clean", "max-width-inherit", 3, "routerLink"], [1, "text-truncate"], ["translate", "", 1, "text-label-small", "m-r-4", "visible-xs"], ["class", "text-truncate", 4, "ngIf", "ngIfElse"], ["emptyText", ""], ["icon", "pencil", 3, "routerLink", "label"], ["icon", "copy", 3, "label", "click"], ["icon", "trash", 3, "label", "click"], [1, "text-muted"]], template: function DeviceProfileListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-title");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(4, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_Template_button_click_4_listener() { return ctx.createDeviceProfile(); });
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(10, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceProfileListComponent_Template_button_click_10_listener() { return ctx.loadDeviceProfiles(); });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelement(12, "i", 3);
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, DeviceProfileListComponent_div_15_Template, 11, 7, "div", 4);
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵelementStart(17, "c8y-list-group", 5);
        ɵngcc0.ɵɵpipe(18, "async");
        ɵngcc0.ɵɵtemplate(19, DeviceProfileListComponent_c8y_li_19_Template, 10, 6, "c8y-li", 6);
        ɵngcc0.ɵɵpipe(20, "async");
        ɵngcc0.ɵɵtemplate(21, DeviceProfileListComponent_c8y_li_21_Template, 20, 16, "c8y-li", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var tmp_8_0;
        var tmp_9_0;
        var tmp_10_0;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 12, "Device profiles"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(5, 14, "Add device profile"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 16, "Add device profile"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(11, 18, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(28, _c0, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(14, 20, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_8_0 = ɵngcc0.ɵɵpipeBind1(16, 22, ctx.deviceProfiles$)) == null ? null : tmp_8_0.data.length) === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(30, _c1, ((tmp_9_0 = ɵngcc0.ɵɵpipeBind1(18, 24, ctx.deviceProfiles$)) == null ? null : tmp_9_0.data.length) < 10));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ((tmp_10_0 = ɵngcc0.ɵɵpipeBind1(20, 26, ctx.deviceProfiles$)) == null ? null : tmp_10_0.data.length) > 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.deviceProfiles$);
    } }, directives: [ɵngcc2.TitleComponent, ɵngcc2.ActionBarItemComponent, ɵngcc2.IconDirective, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc2.ListGroupComponent, ɵngcc2.ForOfDirective, ɵngcc2.C8yTranslateDirective, ɵngcc2.ListItemComponent, ɵngcc2.ListItemIconComponent, ɵngcc2.ListItemBodyComponent, ɵngcc5.RouterLink, ɵngcc2.ListItemActionComponent], pipes: [ɵngcc2.C8yTranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileListComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-profile-list',
                template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'icon-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state m-t-40\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n    >\n      {{ 'Add device profile' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li\n    class=\"page-sticky-header c8y-list__item--empty-actions hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{ 'Device profile' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Device type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button\n          class=\"btn-clean max-width-inherit\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n          Device type\n        </span>\n        <span class=\"text-truncate\" *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\">\n          {{ deviceProfile.c8y_Filter?.type }}\n        </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
            }]
    }], function () { return [{ type: ɵngcc1.InventoryService }, { type: ɵngcc9.TranslateService }, { type: ɵngcc2.ModalService }, { type: ɵngcc2.AlertService }, { type: ɵngcc6.BsModalService }, { type: ɵngcc5.Router }, { type: DeviceProfileService }]; }, null); })();
        return DeviceProfileListComponent;
    }());
    DeviceProfileListComponent.ctorParameters = function () { return [
        { type: client.InventoryService },
        { type: core$1.TranslateService },
        { type: ngxComponents.ModalService },
        { type: ngxComponents.AlertService },
        { type: modal.BsModalService },
        { type: router.Router },
        { type: DeviceProfileService }
    ]; };

    var DeviceProfileGuard = /** @class */ (function () {
        function DeviceProfileGuard() {
        }
        DeviceProfileGuard.prototype.canActivate = function (route, state) {
            var contextData = route.data.contextData || route.parent.data.contextData;
            if (!contextData) {
                return false;
            }
            return this.hasSupportedOperation(contextData, exports.DeviceProfileOperation.APPLY_PROFILE);
        };
        DeviceProfileGuard.prototype.hasSupportedOperation = function (mo, operation) {
            var supported = mo.c8y_SupportedOperations || [];
            if (!supported) {
                return false;
            }
            return !!supported.find(function (supportedOperation) { return supportedOperation === operation; });
        };
DeviceProfileGuard.ɵfac = function DeviceProfileGuard_Factory(t) { return new (t || DeviceProfileGuard)(); };
DeviceProfileGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DeviceProfileGuard, factory: function (t) { return DeviceProfileGuard.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileGuard, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return DeviceProfileGuard;
    }());

    var DeviceTabProfileComponent = /** @class */ (function () {
        function DeviceTabProfileComponent(deviceRealtime, deviceProfileService, route, operationRealtime, alertService) {
            this.deviceRealtime = deviceRealtime;
            this.deviceProfileService = deviceProfileService;
            this.route = route;
            this.operationRealtime = operationRealtime;
            this.alertService = alertService;
            this.firmwareItems = [];
            this.softwareItems = [];
            this.configurationItems = [];
            this.pattern = '';
            this.reloading = false;
        }
        DeviceTabProfileComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.device = this.route.snapshot.parent.data.contextData;
                    this.getDeviceProfilesAndUpdateProfileItems();
                    this.subscribeToManagedObjects();
                    return [2 /*return*/];
                });
            });
        };
        DeviceTabProfileComponent.prototype.getDeviceProfilesAndUpdateProfileItems = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, profileId_1, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.reloading = true;
                            _a = this;
                            return [4 /*yield*/, this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type)];
                        case 1:
                            _a.deviceProfiles = _c.sent();
                            if (this.device.c8y_Profile) {
                                profileId_1 = this.device.c8y_Profile.profileId;
                                this.selectedProfile = this.deviceProfiles.data.find(function (mo) { return mo.id === profileId_1; });
                            }
                            this.updateProfileItems(this.device, this.selectedProfile);
                            _b = this;
                            return [4 /*yield*/, this.deviceProfileService.getProfileOperation(this.device.id)];
                        case 2:
                            _b.operation = _c.sent();
                            this.subscribeToOperations();
                            this.reloading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceTabProfileComponent.prototype.selectProfile = function (mo) {
            this.selectedProfile = mo;
            this.updateProfileItems(this.device, this.selectedProfile);
        };
        DeviceTabProfileComponent.prototype.createOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile)];
                        case 1:
                            _a.operation = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceTabProfileComponent.prototype.setPipe = function (filterStr) {
            this.pattern = filterStr;
            this.filterPipe = rxjs.pipe(operators.map(function (data) {
                return data.filter(function (mo) { return mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
            }));
        };
        DeviceTabProfileComponent.prototype.ngOnDestroy = function () {
            this.operationsSubscription.unsubscribe();
            this.moOnUpdateSubscription.unsubscribe();
            this.moOnDeleteSubscription.unsubscribe();
        };
        DeviceTabProfileComponent.prototype.updateProfileItems = function (device, profile) {
            this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
            this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
            this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
        };
        DeviceTabProfileComponent.prototype.subscribeToManagedObjects = function () {
            var _this = this;
            this.moOnUpdateSubscription = this.deviceRealtime
                .onUpdate$(this.device.id)
                .subscribe(function (managedObject) {
                _this.updateProfileItems(managedObject, _this.selectedProfile);
            });
            this.moOnDeleteSubscription = this.deviceRealtime.onDelete$(this.device.id).subscribe(function () {
                _this.alertService.danger(ngxComponents.gettext('This device has just been deleted. You will be redirected to "All devices" page now.'));
                window.location.href = '#/device';
            });
        };
        DeviceTabProfileComponent.prototype.subscribeToOperations = function () {
            var _this = this;
            this.operationsSubscription = this.operationRealtime
                .onAll$(this.device.id)
                .pipe(operators.map(function (_a) {
                var data = _a.data;
                return data;
            }), operators.filter(function (operation) { return operation.c8y_DeviceProfile; }))
                .subscribe(function (operation) {
                _this.operation = operation;
            });
        };
DeviceTabProfileComponent.ɵfac = function DeviceTabProfileComponent_Factory(t) { return new (t || DeviceTabProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ManagedObjectRealtimeService), ɵngcc0.ɵɵdirectiveInject(DeviceProfileService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OperationRealtimeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService)); };
DeviceTabProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceTabProfileComponent, selectors: [["c8y-device-tab-profile"]], features: [ɵngcc0.ɵɵProvidersFeature([ngxComponents.ManagedObjectRealtimeService])], decls: 50, vars: 64, consts: [[3, "placement"], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "refresh", 3, "ngClass"], [3, "service"], [1, "card", "card--grid--fullpage", "card--grid--fullpage", "card--grid", "grid__row--2-10--md"], [1, "card--grid", "grid__col--6-6--md"], [1, "bg-white"], [1, "card-header", "separator"], ["translate", "", 1, "card-title"], [1, "p-16"], ["deviceProfileForm", "ngForm"], [1, "input-group"], ["name", "selectProfile", 1, "flex-grow", 3, "ngModel", "placeholder", "allowFreeEntries", "ngModelChange", "onSearch"], ["class", "p-l-8 p-r-8 c8y-list__item--link", 3, "click", 4, "c8yFor", "c8yForOf", "c8yForPipe"], [1, "input-group-btn"], ["translate", "", 1, "btn", "btn-primary", 3, "title", "disabled", "click"], [1, "bg-gray-white"], [1, "card-block"], [3, "operation"], [1, "card--grid__inner-scroll", "flex-col", "no-align-items"], [1, "d-contents"], [1, "d-contents", 3, "sectionTitle", "sectionIcon", "emptyStateText", "emptyStateDetails", "isProfileSelected", "items", "isEmpty"], [1, "d-contents", 3, "sectionTitle", "sectionIcon", "emptyStateText", "emptyStateDetails", "isProfileSelected", "items", "isEmpty", "showTextLabel"], [1, "card--grid", "grid__col--6-6--md", "flex-grow"], [1, "p-l-8", "p-r-8", "c8y-list__item--link", 3, "click"], [3, "text", "pattern"]], template: function DeviceTabProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_Template_button_click_1_listener() { return ctx.getDeviceProfilesAndUpdateProfileItems(); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelement(3, "i", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "c8y-action-bar-item", 0);
        ɵngcc0.ɵɵelement(7, "c8y-realtime-btn", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵelementStart(10, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "h4", 8);
        ɵngcc0.ɵɵtext(13, "Device profile");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 9);
        ɵngcc0.ɵɵelementStart(15, "form", null, 10);
        ɵngcc0.ɵɵelementStart(17, "div", 11);
        ɵngcc0.ɵɵelementStart(18, "c8y-typeahead", 12);
        ɵngcc0.ɵɵlistener("ngModelChange", function DeviceTabProfileComponent_Template_c8y_typeahead_ngModelChange_18_listener($event) { return ctx.selectedProfile = $event; })("onSearch", function DeviceTabProfileComponent_Template_c8y_typeahead_onSearch_18_listener($event) { return ctx.setPipe($event); });
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtemplate(20, DeviceTabProfileComponent_c8y_li_20_Template, 2, 2, "c8y-li", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 14);
        ɵngcc0.ɵɵelementStart(22, "button", 15);
        ɵngcc0.ɵɵlistener("click", function DeviceTabProfileComponent_Template_button_click_22_listener() { return ctx.createOperation(); });
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵtext(24, " Assign device profile ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 16);
        ɵngcc0.ɵɵelementStart(26, "div", 7);
        ɵngcc0.ɵɵelementStart(27, "h4", 8);
        ɵngcc0.ɵɵtext(28, "Currently installed");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "div", 17);
        ɵngcc0.ɵɵelement(30, "c8y-single-operation", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "div", 19);
        ɵngcc0.ɵɵelementStart(32, "div", 20);
        ɵngcc0.ɵɵelement(33, "c8y-device-tab-profile-detail", 21);
        ɵngcc0.ɵɵpipe(34, "translate");
        ɵngcc0.ɵɵpipe(35, "translate");
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 20);
        ɵngcc0.ɵɵelement(38, "c8y-device-tab-profile-detail", 21);
        ɵngcc0.ɵɵpipe(39, "translate");
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵpipe(41, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(42, "div", 20);
        ɵngcc0.ɵɵelement(43, "c8y-device-tab-profile-detail", 22);
        ɵngcc0.ɵɵpipe(44, "translate");
        ɵngcc0.ɵɵpipe(45, "translate");
        ɵngcc0.ɵɵpipe(46, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(47, "div", 23);
        ɵngcc0.ɵɵelement(48, "div", 6);
        ɵngcc0.ɵɵelement(49, "div", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 36, "Reload"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(62, _c0, ctx.reloading));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 38, "Reload"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placement", "right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("service", ctx.deviceRealtime);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(19, 40, "Select device profile"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.selectedProfile)("allowFreeEntries", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yForOf", ctx.deviceProfiles)("c8yForPipe", ctx.filterPipe);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(23, 42, "Assign device profile"));
        ɵngcc0.ɵɵproperty("disabled", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.id));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("operation", ctx.operation);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(34, 44, "Firmware"))("sectionIcon", "c8y-firmware")("emptyStateText", ɵngcc0.ɵɵpipeBind1(35, 46, "No firmware to display."))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(36, 48, "No firmware assigned."))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.firmwareItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.firmware == null ? null : ctx.selectedProfile.c8y_DeviceProfile.firmware.name));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(39, 50, "Software"))("sectionIcon", "c8y-tools")("emptyStateText", ɵngcc0.ɵɵpipeBind1(40, 52, "No software to display."))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(41, 54, "No software assigned."))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.softwareItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software) || (ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software == null ? null : ctx.selectedProfile.c8y_DeviceProfile.software.length) === 0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("sectionTitle", ɵngcc0.ɵɵpipeBind1(44, 56, "Configuration"))("sectionIcon", "gears")("emptyStateText", ɵngcc0.ɵɵpipeBind1(45, 58, "No configuration to display"))("emptyStateDetails", ɵngcc0.ɵɵpipeBind1(46, 60, "No configuration assigned"))("isProfileSelected", !!ctx.selectedProfile)("items", ctx.configurationItems)("isEmpty", !(ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration) || (ctx.selectedProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration == null ? null : ctx.selectedProfile.c8y_DeviceProfile.configuration.length) === 0)("showTextLabel", false);
    } }, directives: function () { return [ɵngcc2.ActionBarItemComponent, ɵngcc2.IconDirective, ɵngcc4.NgClass, ɵngcc2.RealtimeButtonComponent, ɵngcc2.C8yTranslateDirective, ɵngcc7.ɵNgNoValidate, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc2.TypeaheadComponent, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc2.ForOfDirective, ɵngcc10.SingleOperationComponent, DeviceTabProfileDetailComponent, ɵngcc2.ListItemComponent, ɵngcc2.HighlightComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceTabProfileComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-tab-profile',
                template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"getDeviceProfilesAndUpdateProfileItems()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Device profile</h4>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                [disabled]=\"!selectedProfile?.id\"\n                translate\n              >\n                Assign device profile\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-gray-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Currently installed</h4>\n      </div>\n      <div class=\"card-block\">\n        <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll flex-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-white\"></div>\n      <div class=\"bg-gray-white\"></div>\n    </div>\n  </div>\n</div>\n",
                providers: [ngxComponents.ManagedObjectRealtimeService]
            }]
    }], function () { return [{ type: ɵngcc2.ManagedObjectRealtimeService }, { type: DeviceProfileService }, { type: ɵngcc5.ActivatedRoute }, { type: ɵngcc2.OperationRealtimeService }, { type: ɵngcc2.AlertService }]; }, null); })();
        return DeviceTabProfileComponent;
    }());
    DeviceTabProfileComponent.ctorParameters = function () { return [
        { type: ngxComponents.ManagedObjectRealtimeService },
        { type: DeviceProfileService },
        { type: router.ActivatedRoute },
        { type: ngxComponents.OperationRealtimeService },
        { type: ngxComponents.AlertService }
    ]; };

    var DeviceTabProfileDetailComponent = /** @class */ (function () {
        function DeviceTabProfileDetailComponent() {
            this.emptyStateText = '';
            this.emptyStateDetails = '';
            this.showTextLabel = true;
        }
DeviceTabProfileDetailComponent.ɵfac = function DeviceTabProfileDetailComponent_Factory(t) { return new (t || DeviceTabProfileDetailComponent)(); };
DeviceTabProfileDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceTabProfileDetailComponent, selectors: [["c8y-device-tab-profile-detail"]], inputs: { emptyStateText: "emptyStateText", emptyStateDetails: "emptyStateDetails", showTextLabel: "showTextLabel", sectionTitle: "sectionTitle", sectionIcon: "sectionIcon", isProfileSelected: "isProfileSelected", isEmpty: "isEmpty", items: "items" }, decls: 18, vars: 11, consts: [[1, "card--grid", "grid__col--6-6--md"], [1, "bg-white", "card-block", "sticky-top"], [1, "legend", "form-block"], [1, "bg-gray-white", "card-block", "sticky-top", "hidden-xs", "hidden-sm"], [1, "bg-white", "p-l-16", "p-r-16"], [1, "m-0"], [1, "bg-gray-white", "p-l-16", "p-r-16"], ["class", "d-contents", 4, "ngIf"], ["class", "bg-gray-white", 4, "ngIf"], ["class", "d-contents", 3, "icon", "comparisonResults", "showProfileItems", "showTextLabel", 4, "ngIf"], ["class", "bg-white p-t-24", 4, "ngIf"], ["class", "bg-gray-white p-t-24", 4, "ngIf"], [1, "d-contents"], [1, "p-l-16", "p-r-16"], [1, "c8y-empty-state", "text-left"], [1, "c8y-icon-duocolor", 3, "c8yIcon"], [4, "ngIf", "ngIfElse"], ["noItems", ""], ["translate", ""], [1, "bg-gray-white"], [1, "d-contents", 3, "icon", "comparisonResults", "showProfileItems", "showTextLabel"], [1, "bg-white", "p-t-24"], [1, "bg-gray-white", "p-t-24"]], template: function DeviceTabProfileDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h5", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "h5", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelement(10, "hr", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 6);
        ɵngcc0.ɵɵelement(12, "hr", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, DeviceTabProfileDetailComponent_div_13_Template, 12, 6, "div", 7);
        ɵngcc0.ɵɵtemplate(14, DeviceTabProfileDetailComponent_div_14_Template, 1, 0, "div", 8);
        ɵngcc0.ɵɵtemplate(15, DeviceTabProfileDetailComponent_c8y_device_profile_item_list_15_Template, 1, 4, "c8y-device-profile-item-list", 9);
        ɵngcc0.ɵɵtemplate(16, DeviceTabProfileDetailComponent_div_16_Template, 1, 0, "div", 10);
        ɵngcc0.ɵɵtemplate(17, DeviceTabProfileDetailComponent_div_17_Template, 1, 0, "div", 11);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 7, ctx.sectionTitle));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 9, ctx.sectionTitle));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isProfileSelected || ctx.isEmpty);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.items.length === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.items.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isProfileSelected && !ctx.isEmpty);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isProfileSelected && !ctx.isEmpty);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc2.IconDirective, ɵngcc2.C8yTranslateDirective, DeviceProfileItemListComponent]; }, pipes: function () { return [ɵngcc2.C8yTranslatePipe]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceTabProfileDetailComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-tab-profile-detail',
                template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-white card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-gray-white  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-gray-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-gray-white\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-gray-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n"
            }]
    }], function () { return []; }, { emptyStateText: [{
            type: core.Input
        }], emptyStateDetails: [{
            type: core.Input
        }], showTextLabel: [{
            type: core.Input
        }], sectionTitle: [{
            type: core.Input
        }], sectionIcon: [{
            type: core.Input
        }], isProfileSelected: [{
            type: core.Input
        }], isEmpty: [{
            type: core.Input
        }], items: [{
            type: core.Input
        }] }); })();
        return DeviceTabProfileDetailComponent;
    }());
    DeviceTabProfileDetailComponent.propDecorators = {
        sectionTitle: [{ type: core.Input }],
        sectionIcon: [{ type: core.Input }],
        emptyStateText: [{ type: core.Input }],
        emptyStateDetails: [{ type: core.Input }],
        isProfileSelected: [{ type: core.Input }],
        isEmpty: [{ type: core.Input }],
        items: [{ type: core.Input }],
        showTextLabel: [{ type: core.Input }]
    };

    var DeviceProfileItemListComponent = /** @class */ (function () {
        function DeviceProfileItemListComponent() {
        }
DeviceProfileItemListComponent.ɵfac = function DeviceProfileItemListComponent_Factory(t) { return new (t || DeviceProfileItemListComponent)(); };
DeviceProfileItemListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceProfileItemListComponent, selectors: [["c8y-device-profile-item-list"]], inputs: { icon: "icon", comparisonResults: "comparisonResults", showProfileItems: "showProfileItems", showTextLabel: "showTextLabel" }, decls: 3, vars: 1, consts: [["class", "d-contents", 4, "ngFor", "ngForOf"], ["comparisonResultInfo", ""], [1, "d-contents"], ["class", "p-l-16 p-r-16", 4, "ngIf"], [1, "p-l-16", "p-r-16", "bg-gray-white"], [1, "c8y-list__item", "bg-gray-white", 3, "ngClass"], [1, "c8y-list__item__block"], [1, "c8y-list__item__icon"], [3, "c8yIcon"], [1, "c8y-list__item__body"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "m-0", "style", "margin-bottom: calc(var(--margin-base, 8px) * -1);", 4, "ngIf"], ["class", "p-l-16 p-r-16 bg-white hidden-xs hidden-sm", 4, "ngIf"], [1, "p-l-16", "p-r-16"], [1, "c8y-list__item", "fit-h"], ["class", "c8y-list__item__block", 4, "ngIf"], [1, "m-0", 2, "margin-bottom", "calc(var(--margin-base, 8px) * -1)"], [1, "p-l-16", "p-r-16", "bg-white", "hidden-xs", "hidden-sm"], [1, "content-flex-40"], [1, "col-7"], [1, "text-truncate"], [1, "text-label-small", "m-r-4"], [3, "title"], [1, "col-5"], ["class", "text-truncate", 4, "ngIf", "ngIfElse"], ["showInfoLabel", ""], ["translate", "", 1, "text-label-small", "m-r-4"], [1, "label", "label-info"]], template: function DeviceProfileItemListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DeviceProfileItemListComponent_div_0_Template, 11, 9, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DeviceProfileItemListComponent_ng_template_1_Template, 11, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.comparisonResults);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc4.NgClass, ɵngcc2.IconDirective, ɵngcc4.NgTemplateOutlet, ɵngcc2.MessagesComponent, ɵngcc2.MessageDirective, ɵngcc2.C8yTranslateDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileItemListComponent, [{
        type: core.Component,
        args: [{
                selector: 'c8y-device-profile-item-list',
                template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item fit-h\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-gray-white\">\n    <div\n      class=\"c8y-list__item bg-gray-white\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-white hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n"
            }]
    }], function () { return []; }, { icon: [{
            type: core.Input
        }], comparisonResults: [{
            type: core.Input
        }], showProfileItems: [{
            type: core.Input
        }], showTextLabel: [{
            type: core.Input
        }] }); })();
        return DeviceProfileItemListComponent;
    }());
    DeviceProfileItemListComponent.propDecorators = {
        icon: [{ type: core.Input }],
        comparisonResults: [{ type: core.Input }],
        showProfileItems: [{ type: core.Input }],
        showTextLabel: [{ type: core.Input }]
    };

    var deviceProfilesRoutes = [
        {
            path: 'device-profiles/:id',
            component: DeviceProfileComponent
        },
        {
            path: 'device-profiles',
            component: DeviceProfileListComponent
        }
    ];
    var deviceTabProfileRoutes = [
        {
            context: ngxComponents.ViewContext.Device,
            path: 'device-profile',
            component: DeviceTabProfileComponent,
            label: ngxComponents.gettext('Device profile'),
            icon: 'c8y-device-profile',
            canActivate: [DeviceProfileGuard]
        }
    ];
    var ɵ0 = deviceTabProfileRoutes;
    var DeviceProfileModule = /** @class */ (function () {
        function DeviceProfileModule() {
        }
DeviceProfileModule.ɵfac = function DeviceProfileModule_Factory(t) { return new (t || DeviceProfileModule)(); };
DeviceProfileModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceProfileModule });
DeviceProfileModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: ngxComponents.HOOK_NAVIGATOR_NODES,
            useClass: DeviceProfileNavigationFactory,
            multi: true
        },
        {
            provide: ngxComponents.HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        },
        DeviceProfileService,
        DeviceProfileGuard
    ], imports: [[
            ngxComponents.CoreModule,
            ngxComponents.CommonModule,
            repository.RepositoryModule,
            router.RouterModule.forChild(deviceProfilesRoutes),
            dropdown.BsDropdownModule.forRoot(),
            tooltip.TooltipModule,
            forms.ReactiveFormsModule,
            buttons.ButtonsModule,
            popover.PopoverModule,
            singleOperationDetails.SingleOperationDetailsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceProfileModule, [{
        type: core.NgModule,
        args: [{
                declarations: [
                    DeviceProfileComponent,
                    DeviceProfileListComponent,
                    AddDeviceProfileComponent,
                    SelectConfigurationModalComponent,
                    DeviceTabProfileComponent,
                    DeviceTabProfileDetailComponent,
                    DeviceProfileItemListComponent
                ],
                exports: [],
                imports: [
                    ngxComponents.CoreModule,
                    ngxComponents.CommonModule,
                    repository.RepositoryModule,
                    router.RouterModule.forChild(deviceProfilesRoutes),
                    dropdown.BsDropdownModule.forRoot(),
                    tooltip.TooltipModule,
                    forms.ReactiveFormsModule,
                    buttons.ButtonsModule,
                    popover.PopoverModule,
                    singleOperationDetails.SingleOperationDetailsModule
                ],
                entryComponents: [
                    AddDeviceProfileComponent,
                    SelectConfigurationModalComponent,
                    DeviceTabProfileComponent
                ],
                providers: [
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useClass: DeviceProfileNavigationFactory,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    DeviceProfileService,
                    DeviceProfileGuard
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceProfileModule, { declarations: [DeviceProfileComponent, DeviceProfileListComponent, AddDeviceProfileComponent, SelectConfigurationModalComponent, DeviceTabProfileComponent, DeviceTabProfileDetailComponent, DeviceProfileItemListComponent], imports: [ɵngcc2.CoreModule, ɵngcc2.CommonModule, ɵngcc3.RepositoryModule, ɵngcc5.RouterModule, ɵngcc11.BsDropdownModule, ɵngcc12.TooltipModule, ɵngcc7.ReactiveFormsModule, ɵngcc13.ButtonsModule, ɵngcc8.PopoverModule, ɵngcc10.SingleOperationDetailsModule] }); })();
        return DeviceProfileModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddDeviceProfileComponent = AddDeviceProfileComponent;
    exports.DeviceProfileComponent = DeviceProfileComponent;
    exports.DeviceProfileGuard = DeviceProfileGuard;
    exports.DeviceProfileItemListComponent = DeviceProfileItemListComponent;
    exports.DeviceProfileListComponent = DeviceProfileListComponent;
    exports.DeviceProfileModule = DeviceProfileModule;
    exports.DeviceProfileNavigationFactory = DeviceProfileNavigationFactory;
    exports.DeviceProfileService = DeviceProfileService;
    exports.DeviceTabProfileComponent = DeviceTabProfileComponent;
    exports.DeviceTabProfileDetailComponent = DeviceTabProfileDetailComponent;
    exports.SelectConfigurationModalComponent = SelectConfigurationModalComponent;
    exports["ɵ0"] = ɵ0;
    exports["ɵa"] = DeviceTabProfileComponent;
    exports["ɵb"] = DeviceTabProfileDetailComponent;
    exports["ɵc"] = DeviceProfileItemListComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=c8y-ngx-components-device-profile.umd.js.map