(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@c8y/ngx-components'), require('@angular/core'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/sms-gateway', ['exports', '@c8y/ngx-components', '@angular/core', '@c8y/client'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"]["sms-gateway"] = {}), global.c8y["ngx-components"], global.ng.core, global.client));
})(this, (function (exports, ngxComponents, core, client) { 'use strict';

    var MESSAGES = {
        '^Sender name$': {
            gettext: ngxComponents.gettext('Sender name')
        },
        '^Sender name used for sent SMS$': {
            gettext: ngxComponents.gettext('Sender name used for sent SMS')
        },
        '^Sender address$': {
            gettext: ngxComponents.gettext('Sender address')
        },
        '^Sender address used for sent SMS$': {
            gettext: ngxComponents.gettext('Sender address used for sent SMS')
        },
        '^Username$': {
            gettext: ngxComponents.gettext('Username')
        },
        '^Password$': {
            gettext: ngxComponents.gettext('Password')
        },
        '^Licence key$': {
            gettext: ngxComponents.gettext('License key')
        },
        '^Key$': {
            gettext: ngxComponents.gettext('Key')
        },
        '^API base URL$': {
            gettext: ngxComponents.gettext('API base URL')
        },
        '^API URL$': {
            gettext: ngxComponents.gettext('API URL')
        },
        '^oauth$': {
            gettext: ngxComponents.gettext('OAuth')
        },
        '^basic$': {
            gettext: ngxComponents.gettext('Basic')
        },
        '^Authentication method$': {
            gettext: ngxComponents.gettext('Authentication method')
        },
        '^Defines which authentication method is used with the provider$': {
            gettext: ngxComponents.gettext('Defines which authentication method is used with the provider')
        },
        '^Static headers$': {
            gettext: ngxComponents.gettext('Static headers')
        },
        '^Static headers that should be added to requests towards the provider$': {
            gettext: ngxComponents.gettext('Static headers that should be added to requests towards the provider')
        },
        '^OAuth token URL$': {
            gettext: ngxComponents.gettext('OAuth token URL')
        },
        '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {
            gettext: ngxComponents.gettext('URL where the OAuth token is requested from (required if OAuth method is chosen)')
        },
        '^OAuth toke mime type$': {
            gettext: ngxComponents.gettext('OAuth token mime type')
        },
        '^Overrides the OAuth token response mime type$': {
            gettext: ngxComponents.gettext('Overrides the OAuth token response mime type')
        },
        '^OAuth access toke type$': {
            gettext: ngxComponents.gettext('OAuth access token type')
        },
        '^Overrides the OAuth access token type$': {
            gettext: ngxComponents.gettext('Overrides the OAuth access token type')
        },
        '^Global configuration$': {
            gettext: ngxComponents.gettext('Global configuration')
        },
        '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {
            gettext: ngxComponents.gettext('Enables or disables the settings globally for all tenants (only possible in management tenant)')
        },
        '^API key$': {
            gettext: ngxComponents.gettext('API key')
        },
        '^Inherit to subtenants$': {
            gettext: ngxComponents.gettext('Inherit to subtenants')
        },
        "^Enables or disables if this tenant's configuration may be inherited to subtenants$": {
            gettext: ngxComponents.gettext('Enables or disables the option to inherit the tenant configuration to subtenants')
        },
        '^Login$': {
            gettext: ngxComponents.gettext('Login')
        },
        '^Source business unit ID$': {
            gettext: ngxComponents.gettext('Source business unit ID')
        },
        '^Client ID$': {
            gettext: ngxComponents.gettext('Client ID')
        },
        '^Client secret$': {
            gettext: ngxComponents.gettext('Client secret')
        }
    };

    var SmsGatewayGuard = /** @class */ (function () {
        function SmsGatewayGuard(permissions, applicationService) {
            this.permissions = permissions;
            this.applicationService = applicationService;
        }
        SmsGatewayGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            if (this.showSMSProvider === undefined) {
                var hasRole = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));
                this.showSMSProvider = hasRole.then(function (hasPermissions) { return hasPermissions &&
                    _this.applicationService
                        .isAvailable(SmsGatewayGuard.applicationName)
                        .then(function (result) { return result && result.data; }); });
            }
            return this.showSMSProvider;
        };
        return SmsGatewayGuard;
    }());
    SmsGatewayGuard.applicationName = 'sms-gateway';
    SmsGatewayGuard.decorators = [
        { type: core.Injectable }
    ];
    SmsGatewayGuard.ctorParameters = function () { return [
        { type: ngxComponents.Permissions },
        { type: client.ApplicationService }
    ]; };

    var ɵ0 = MESSAGES;
    var SmsGatewayModule = /** @class */ (function () {
        function SmsGatewayModule() {
        }
        return SmsGatewayModule;
    }());
    SmsGatewayModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        ngxComponents.ProviderConfigurationModule.config([
                            {
                                navigation: {
                                    label: ngxComponents.gettext('SMS provider'),
                                    path: 'smsgateway',
                                    icon: 'envelope-o',
                                    parent: ngxComponents.gettext('Settings'),
                                    priority: 1000,
                                    canActivate: [SmsGatewayGuard]
                                },
                                layout: {
                                    pageTitle: ngxComponents.gettext('SMS provider'),
                                    cardTitle: ngxComponents.gettext('Credentials'),
                                    description: ngxComponents.gettext('Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'),
                                    providerName: ngxComponents.gettext('SMS provider'),
                                    providerNamePlaceholder: ngxComponents.gettext('Select or type to filter providers'),
                                    providerNameNoMatchesHint: ngxComponents.gettext('Select one of the existing providers.'),
                                    deleteRoles: ['ROLE_SMS_ADMIN'],
                                    deleteBtnLabel: ngxComponents.gettext('Delete'),
                                    saveRoles: ['ROLE_SMS_ADMIN'],
                                    saveBtnLabel: ngxComponents.gettext('Save'),
                                    configurationUpdatedSuccessMsg: ngxComponents.gettext('Credentials updated.'),
                                    deleteConfigurationModalTitle: ngxComponents.gettext('Delete credentials'),
                                    deleteConfigurationModalBody: ngxComponents.gettext("You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?"),
                                    deleteConfigurationModalOkBtnLabel: ngxComponents.gettext('Delete'),
                                    configurationDeletedSuccessMsg: ngxComponents.gettext('Credentials deleted.')
                                },
                                endpoint: {
                                    definitionsEndpoint: {
                                        baseUrl: 'service/messaging/providers',
                                        listUrl: 'definitions'
                                    },
                                    configurationEndpoint: {
                                        baseUrl: 'service/messaging/providers',
                                        listUrl: 'configuration'
                                    }
                                }
                            }
                        ])
                    ],
                    providers: [SmsGatewayGuard, { provide: ngxComponents.HOOK_PATTERN_MESSAGES, useValue: ɵ0, multi: true }]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MESSAGES = MESSAGES;
    exports.SmsGatewayGuard = SmsGatewayGuard;
    exports.SmsGatewayModule = SmsGatewayModule;
    exports["ɵ0"] = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-sms-gateway.umd.js.map
