{"version":3,"file":"c8y-ngx-components-operations.umd.js","sources":["../../operations/factories/tabs.factory.ts","../../operations/operations.module.ts","../../operations/c8y-ngx-components-operations.ts"],"names":["gettext","Injectable","Router","NgModule","CoreModule","RouterModule","BulkOperationFromSingleModule","BulkOperationsListModule","BulkOperationsStepperContainerModule","StepperBulkTypeConfigurationModule","StepperBulkTypeFirmwareModule","StepperBulkTypeSoftwareModule","StepperBulkTypeDeviceProfileModule","HOOK_TABS"],"mappings":";;;;;;;QAME,qBAAmB,MAAc;AAAI,YAAlB,WAAM,GAAN,MAAM,CAAQ;AAAC,SAAG;AAAC,QACtC,yBAAG,GAAH;AACG,YAAD,IAAM,IAAI,GAAU,EAAE,CAAC;AAAC,YACxB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;AAAE,gBAC7C,IAAI,CAAC,IAAI,CAAC;AAAE,oBACV,IAAI,EAAE,sBAAsB;AAAE,oBAC9B,KAAK,EAAEA,qBAAO,CAAC,mBAAmB,CAAC;AAAE,oBACrC,IAAI,EAAE,kCAAkC;AAAE,oBAC1C,QAAQ,EAAE,IAAI;AAAE,oBAChB,WAAW,EAAE,YAAY;AAAC,iBACpB,CAAC,CAAC;AAAC,gBACX,IAAI,CAAC,IAAI,CAAC;AAAE,oBACV,IAAI,EAAE,oBAAoB;AAAE,oBAC5B,KAAK,EAAEA,qBAAO,CAAC,iBAAiB,CAAC;AAAE,oBACnC,IAAI,EAAE,0BAA0B;AAAE,oBAClC,QAAQ,EAAE,IAAI;AAAE,oBAChB,WAAW,EAAE,YAAY;AAAC,iBACpB,CAAC,CAAC;AAAC,aACZ;AAAC,YAEF,OAAO,IAAI,CAAC;AAAC,SACd;;;;;uEAAC;AACJ;AACyB,SAxBpB;+CADJC,/CACK;MADK,NAEC,gBALHC,aAAM;AAAG;AAAU;AAAC,QCahB,MAAM,GAAY;AAC/B,QAAE;AACF,YAAI,IAAI,EAAE,eAAe;AACzB,YAAI,UAAU,EAAE,sBAAsB;AACtC,YAAI,SAAS,EAAE,MAAM;AACrB,SAAG;AACH,MAAE;AACF,IACA;AACA;AACI;AACI;AACI;AACI;AACI;AACI;AACI;AAEC;AAAO;AACI;AACI;AACI;AACI;AACI;AACI;AACI;AAG3D;AAC+C;AAAO;AAAqB;AACI;AAM/E;AAAO;AAAmB;AAG/B;AACW;AACL;AAEG;AAAY;AAAe;AAAU;AAAiD;AAAoB;AACvG;AACuB;AACU;AAIzC;AAGgC;AAAO;AAC1B;AACjB;AACS;AAEuB;AACR;AAAiD;AAEvE;AAAY;AAEd;AAAU;AAEU;AAMO;AAAO;AAChB;AACH;AACJ;AAAiB;AAEO;AAC7B;AAAa;AAAO;AAAoB;AACrC;AACK;AAEZ;AAIA;AAEU;AACsB;AAE9B;AACsB;AACF;AACX;AAAc;AACZ;AAAW;AACvB;AAAQ;AAEY,QAEvB;AAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;icACxB;AAAC;AAAiC,SAD/B;AAAC;AAAC,ICjHX;2CDmGCC,3CClGD;AAEA;AACO;GD+FE,SAAC,sBACR,OAAO,EAAE,3CChGH;oBDiGJC,pBChG4B;KDgGlB,LChGyD;AAA6B;CDiGhGC,mBAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,0BAC7BC,/DClGiG;AAAmE;AAAC;2CDkGxI,0BAC7BC,2CAAwB,0BACxBC,mEAAoC,0BACpCC,+DAAkC,0BAClCC,qDAA6B,0BAC7BC,qDAA6B,0BAC7BC,+DAAkC,sBACnC,sBACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAEC,uBAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,kBACxE,hrBC3G6K","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\r\n\r\n@Injectable()\r\nexport class TabsFactory implements TabFactory {\r\n  constructor(public router: Router) {}\r\n  get() {\r\n    const tabs: Tab[] = [];\r\n    if (this.router.url.match(/devicecontrol/g)) {\r\n      tabs.push({\r\n        path: 'devicecontrol/single',\r\n        label: gettext('Single operations'),\r\n        icon: 'c8y-icon c8y-icon-device-control',\r\n        priority: 1100,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n      tabs.push({\r\n        path: 'devicecontrol/bulk',\r\n        label: gettext('Bulk operations'),\r\n        icon: 'c8y-icon c8y-icon-energy',\r\n        priority: 1050,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n    }\r\n\r\n    return tabs;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { CoreModule, HOOK_TABS, Route } from '@c8y/ngx-components';\nimport { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';\nimport { BulkOperationFromSingleModule } from '@c8y/ngx-components/operations/bulk-operation-from-single';\nimport { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\nimport { StepperBulkTypeConfigurationModule } from '@c8y/ngx-components/operations/stepper-bulk-type-configuration';\nimport { StepperBulkTypeDeviceProfileModule } from '@c8y/ngx-components/operations/stepper-bulk-type-device-profile';\nimport { StepperBulkTypeFirmwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-firmware';\nimport { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';\n\nimport { TabsFactory } from './factories/tabs.factory';\n\nexport const routes: Route[] = [\n  {\n    path: 'devicecontrol',\n    redirectTo: 'devicecontrol/single',\n    pathMatch: 'full'\n  }\n];\n\n/**\n * This module sets up the 'Device control' view. To use the module as it is you need to also\n * import the '@c8y/ng1-modules/devicemanagement-deviceControlList/cumulocity.json' ng1 module\n * in a hybrid application. By importing it in your custom application you will have:\n * - a 'Device control' entry in the 'Overviews' section of navigator\n * - 'Bulk operations' tab on the 'Device control' page\n * - list view of existing bulk operations with expandable details and options to filter\n * - guided stepper dialogs to schedule new bulk operations of supported types\n * (Configuration update, Firmware update, Software update, Apply device profile).\n *\n * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve\n * the results you wish to have in your application, e.g.:\n * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}\n * to have an overview of existing bulk operation with expandable details\n * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing\n * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},\n * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},\n * {@link StepperBulkTypeDeviceProfileModule}) to have the option\n * to create new bulk operation in a guided stepper dialog.\n *\n * ```typescript\n * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';\n * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\n *\n * @NgModule({\n *   imports: [\n *     [...]\n *     BulkOperationsServiceModule,\n *     BulkOperationsListModule\n *   ],\n *   [...]\n * })\n * export class CustomOperationsModule {}```\n * respectively\n * ```typescript\n * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';\n * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';\n * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\n * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';\n *\n * @NgModule({\n *   imports: [\n *     [...]\n *     BulkOperationsServiceModule,\n *     BulkOperationsListModule,\n *     BulkOperationsStepperContainerModule,\n *     StepperBulkTypeSoftwareModule\n *   ],\n *   [...]\n * })\n * export class CustomOperationsModule {}```\n * You can provide your own bulk operation stepper by registering a component via the `HOOK_LIST_BULK_TYPE`:\n *\n * ```typescript\n * import {\n *   HOOK_LIST_BULK_TYPE,\n *   baseUrl\n * } from '@c8y/ngx-components/operations/bulk-operations-service';\n *\n * [...]\n *\n * providers: [\n *   {\n *     provide: HOOK_LIST_BULK_TYPE,\n *     useValue: {\n *       type: 'my-bulk-op-type',\n *       c8yIcon: 'c8y-tools',\n *       name: 'My bulk op type',\n *       path: `${baseUrl}my-type`,\n *       component: StepperMyBulkTypeComponent,\n *       fragments: ['c8y_MyType'],\n *       selected: false\n *     },\n *     multi: true\n *   }\n * ]```\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    RouterModule.forChild(routes),\n    BulkOperationFromSingleModule,\n    BulkOperationsListModule,\n    BulkOperationsStepperContainerModule,\n    StepperBulkTypeConfigurationModule,\n    StepperBulkTypeFirmwareModule,\n    StepperBulkTypeSoftwareModule,\n    StepperBulkTypeDeviceProfileModule\n  ],\n  providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }]\n})\nexport class OperationsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}