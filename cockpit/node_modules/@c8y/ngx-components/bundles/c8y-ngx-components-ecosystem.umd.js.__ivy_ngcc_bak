(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/router'), require('@c8y/ngx-components'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@c8y/client'), require('@ngx-translate/core'), require('file-saver/FileSaver'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('ngx-bootstrap/modal'), require('marked')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/ecosystem', ['exports', '@angular/core', '@angular/forms', '@angular/router', '@c8y/ngx-components', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@c8y/client', '@ngx-translate/core', 'file-saver/FileSaver', 'lodash-es', 'rxjs', 'rxjs/operators', 'ngx-bootstrap/modal', 'marked'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.c8y = global.c8y || {}, global.c8y["ngx-components"] = global.c8y["ngx-components"] || {}, global.c8y["ngx-components"].ecosystem = {}), global.ng.core, global.ng.forms, global.ng.router, global.c8y["ngx-components"], global.dropdown, global.popover, global.tooltip, global.client, global.core$1, global.FileSaver, global.lodashEs, global.rxjs, global.rxjs.operators, global.modal, global.marked));
})(this, (function (exports, core, forms, router, ngxComponents, dropdown, popover, tooltip, client, core$1, FileSaver, lodashEs, rxjs, operators, modal, marked) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /** Wizard types  */
    var Wizards;
    (function (Wizards) {
        Wizards["APPLICATION_UPLOAD"] = "applicationUpload";
        Wizards["MICROSERVICE_UPLOAD"] = "microserviceUpload";
    })(Wizards || (Wizards = {}));
    var ERROR_TYPE;
    (function (ERROR_TYPE) {
        ERROR_TYPE["TYPE_VALIDATION"] = "TYPE_VALIDATION";
        ERROR_TYPE["ALREADY_SUBSCRIBED"] = "ALREADY_SUBSCRIBED";
        ERROR_TYPE["INTERNAL_ERROR"] = "INTERNAL_ERROR";
        ERROR_TYPE["NO_MANIFEST_FILE"] = "NO_MANIFEST_FILE";
        ERROR_TYPE["INVALID_PACKAGE"] = "INVALID_PACKAGE";
        ERROR_TYPE["INVALID_APPLICATION"] = "INVALID_APPLICATION";
    })(ERROR_TYPE || (ERROR_TYPE = {}));

    var _a;
    var ERROR_MESSAGES = (_a = {},
        _a[ERROR_TYPE.TYPE_VALIDATION] = ngxComponents.gettext('Wrong file format. Expected a *.zip file with a valid manifest.'),
        _a[ERROR_TYPE.ALREADY_SUBSCRIBED] = ngxComponents.gettext('Could not subscribe to the microservice because another application with the same context path is already subscribed.'),
        _a[ERROR_TYPE.NO_MANIFEST_FILE] = ngxComponents.gettext('Could not find a manifest.'),
        _a[ERROR_TYPE.INVALID_PACKAGE] = ngxComponents.gettext('You have not uploaded a valid package.'),
        _a[ERROR_TYPE.INVALID_APPLICATION] = ngxComponents.gettext('You have not uploaded a valid application.'),
        _a[ERROR_TYPE.INTERNAL_ERROR] = ngxComponents.gettext('An internal error occurred, try to upload again.'),
        _a);
    var APP_STATE = {
        SUBSCRIBED: {
            label: ngxComponents.gettext('Subscribed`application`'),
            class: 'label-primary'
        },
        CUSTOM: {
            label: ngxComponents.gettext('Custom`application`'),
            class: 'label-info'
        },
        EXTERNAL: {
            label: ngxComponents.gettext('External`application`'),
            class: 'label-warning'
        },
        UNPACKED: {
            label: ngxComponents.gettext('Unpacked`application`'),
            class: 'label-success'
        },
        PACKAGE_APP: {
            label: ngxComponents.gettext('Application'),
            class: 'label-success'
        },
        PACKAGE_PLUGIN: {
            label: ngxComponents.gettext('Plugins'),
            class: 'label-info'
        }
    };
    var ɵ0$1 = function (repository) { return ((repository === null || repository === void 0 ? void 0 : repository.url) ? repository.url : repository); }, ɵ1$1 = function (e, link) { return window.open(link.value, '_blank', 'noopener,noreferrer'); }, ɵ2$1 = function (e, link) { return window.open(link.value, '_blank', 'noopener,noreferrer'); };
    var packageProperties = [
        {
            label: ngxComponents.gettext('Version'),
            key: 'version'
        },
        {
            label: ngxComponents.gettext('Author'),
            key: 'author'
        },
        {
            label: ngxComponents.gettext('Keywords'),
            key: 'keywords'
        },
        {
            label: ngxComponents.gettext('Source'),
            key: 'repository',
            transform: ɵ0$1,
            type: 'link',
            action: ɵ1$1
        },
        {
            label: ngxComponents.gettext('Homepage'),
            key: 'homepage',
            type: 'link',
            action: ɵ2$1
        },
        {
            label: ngxComponents.gettext('Required platform version'),
            key: 'requiredPlatformVersion'
        },
        {
            label: ngxComponents.gettext('License'),
            key: 'license'
        }
    ];

    var CUMULOCITY_JSON = 'cumulocity.json';
    var EcosystemService = /** @class */ (function () {
        function EcosystemService(modal, alertService, humanizeAppName, translateService, applicationService, appStateService, zipService, tenantService) {
            this.modal = modal;
            this.alertService = alertService;
            this.humanizeAppName = humanizeAppName;
            this.translateService = translateService;
            this.applicationService = applicationService;
            this.appStateService = appStateService;
            this.zipService = zipService;
            this.tenantService = tenantService;
            this.appDeleted = new core.EventEmitter();
            this.progress = new rxjs.BehaviorSubject(null);
        }
        EcosystemService.prototype.getUniqueAppConfig = function (srcApp, existingApps) {
            var app = {
                name: srcApp.name,
                key: srcApp.key,
                contextPath: srcApp.contextPath
            };
            for (var retryNo = 0; retryNo < 9;) {
                if (this.checkIfAppNameKeyPathExists(existingApps, app, retryNo)) {
                    retryNo++;
                    app = {
                        name: [srcApp.name, retryNo].join('-'),
                        key: [srcApp.key, retryNo].join('-'),
                        contextPath: [srcApp.contextPath, retryNo].join('-')
                    };
                }
                else {
                    return app;
                }
            }
            return app;
        };
        EcosystemService.prototype.getApplication = function (appId) {
            return this.applicationService.detail(appId).then(function (res) { return res.data; });
        };
        EcosystemService.prototype.getApplications = function (customFilter) {
            if (customFilter === void 0) { customFilter = {}; }
            var filter = {
                pageSize: 2000,
                withTotalPages: true
            };
            Object.assign(filter, customFilter);
            var currentTenant = this.appStateService.currentTenant.value;
            return this.applicationService.listByTenant(currentTenant.name, filter);
        };
        EcosystemService.prototype.getMicroservices = function () {
            return __awaiter(this, void 0, void 0, function () {
                var apps, microservices;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getApplications()];
                        case 1:
                            apps = (_c.sent()).data;
                            microservices = apps.filter(function (app) { return _this.isMicroservice(app); });
                            return [2 /*return*/, microservices.sort(function (a, b) { return a.name.localeCompare(b.name); })];
                    }
                });
            });
        };
        EcosystemService.prototype.getWebApplications = function (customFilter) {
            if (customFilter === void 0) { customFilter = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var apps, webApps;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getApplications(customFilter)];
                        case 1:
                            apps = (_c.sent()).data;
                            webApps = apps.filter(function (app) { return _this.isApplication(app); });
                            this.appsGroupedByContextPath = lodashEs.groupBy(webApps, 'contextPath');
                            return [2 /*return*/, webApps.sort(function (a, b) { return a.name.localeCompare(b.name); })];
                    }
                });
            });
        };
        EcosystemService.prototype.getFeatureApplications = function (customFilter) {
            if (customFilter === void 0) { customFilter = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var apps, webApps;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getApplications(customFilter)];
                        case 1:
                            apps = (_c.sent()).data;
                            webApps = apps.filter(function (app) { return _this.isFeature(app); });
                            return [2 /*return*/, webApps.sort(function (a, b) { return a.name.localeCompare(b.name); })];
                    }
                });
            });
        };
        EcosystemService.prototype.getPackageApplications = function (customFilter) {
            if (customFilter === void 0) { customFilter = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var apps, webApps;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getApplications(customFilter)];
                        case 1:
                            apps = (_c.sent()).data;
                            webApps = apps.filter(function (app) { return _this.isPackage(app); });
                            return [2 /*return*/, webApps.sort(function (a, b) { return a.name.localeCompare(b.name); })];
                    }
                });
            });
        };
        EcosystemService.prototype.isMicroserviceHostingAllowed = function () {
            return __awaiter(this, void 0, void 0, function () {
                var apps;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByName('feature-microservice-hosting')];
                        case 1:
                            apps = (_c.sent()).data;
                            return [2 /*return*/, !!apps.filter(function (app) { var _a, _b; return ((_b = (_a = app.owner) === null || _a === void 0 ? void 0 : _a.tenant) === null || _b === void 0 ? void 0 : _b.id) === 'management'; }).length];
                    }
                });
            });
        };
        EcosystemService.prototype.canOpenAppInBrowser = function (app) {
            var isNotAFeature = !this.isFeature(app);
            var hasProperType = [
                client.ApplicationType.HOSTED,
                client.ApplicationType.EXTERNAL,
                client.ApplicationType.REPOSITORY
            ].includes(app.type);
            var isNotAPackage = !this.isPackage(app);
            return isNotAFeature && hasProperType && isNotAPackage;
        };
        EcosystemService.prototype.canDeleteApp = function (app) {
            return !this.isCurrentApp(app) && this.isOwner(app);
        };
        EcosystemService.prototype.isOwner = function (app) {
            var currentTenant = this.appStateService.currentTenant.value;
            var appOwner = lodashEs.get(app, 'owner.tenant.id');
            return currentTenant.name === appOwner;
        };
        EcosystemService.prototype.isFeature = function (app) {
            return !!app.name.match(/feature-/);
        };
        EcosystemService.prototype.isMicroservice = function (app) {
            return app.type === 'MICROSERVICE';
        };
        EcosystemService.prototype.isExternal = function (app) {
            return app.type === 'EXTERNAL';
        };
        EcosystemService.prototype.isPackage = function (app) {
            var _a;
            return ((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.isPackage) === true;
        };
        EcosystemService.prototype.cancelAppCreation = function (app) {
            if (this.xhr) {
                this.xhr.abort();
            }
            if (app) {
                this.applicationService.delete(app);
            }
        };
        EcosystemService.prototype.updateUploadProgress = function (event) {
            if (event.lengthComputable) {
                var currentProgress = this.progress.value;
                this.progress.next(currentProgress + (event.loaded / event.total) * (95 - currentProgress));
            }
        };
        EcosystemService.prototype.setAppActiveVersion = function (app, activeVersionId) {
            return this.applicationService.update({ id: app.id, activeVersionId: activeVersionId });
        };
        EcosystemService.prototype.getHumanizedAppName = function (app) {
            return this.humanizeAppName.transform(app.name).pipe(operators.debounceTime(250), operators.take(1)).toPromise();
        };
        EcosystemService.prototype.createConfig = function (app, formGroupValue) {
            var id = app.id, manifest = app.manifest;
            var config = lodashEs.pick(formGroupValue, ['name', 'key', 'contextPath']);
            config = Object.assign(Object.assign({}, config), { setup: true, id: id, description: manifest.description });
            return config;
        };
        EcosystemService.prototype.updateAppManifest = function (application, sourcePackage) {
            return __awaiter(this, void 0, void 0, function () {
                var id, cleanedApp;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            id = application.id;
                            cleanedApp = this.removeAppProperties(application);
                            cleanedApp.setup = true;
                            cleanedApp.manifest.isPackage = false;
                            cleanedApp.manifest.source = sourcePackage.id;
                            return [4 /*yield*/, this.applicationService
                                    .binary(id)
                                    .updateFiles([{ path: CUMULOCITY_JSON, contents: JSON.stringify(cleanedApp) }])];
                        case 1: return [2 /*return*/, _c.sent()];
                    }
                });
            });
        };
        EcosystemService.prototype.listArchives = function (appId) {
            return __awaiter(this, void 0, void 0, function () {
                var filter;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            filter = {
                                pageSize: 100
                            };
                            return [4 /*yield*/, this.applicationService.binary(appId).list(filter)];
                        case 1: return [2 /*return*/, (_c.sent()).data];
                    }
                });
            });
        };
        EcosystemService.prototype.deleteArchive = function (archive, app) {
            return __awaiter(this, void 0, void 0, function () {
                var humanizedArchiveName, ex_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getHumanizedAppName(archive)];
                        case 1:
                            humanizedArchiveName = _c.sent();
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Delete archive'), this.translateService.instant(ngxComponents.gettext("You are about to delete archive \"{{ humanizedArchiveName }}\". Do you want to proceed?"), { humanizedArchiveName: humanizedArchiveName }), ngxComponents.Status.DANGER, { ok: ngxComponents.gettext('Delete'), cancel: ngxComponents.gettext('Cancel') })];
                        case 3:
                            _c.sent();
                            return [4 /*yield*/, this.applicationService.binary(app).delete(archive.id)];
                        case 4:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Archive deleted.'));
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _c.sent();
                            if (ex_1) {
                                this.alertService.danger(lodashEs.get(ex_1, 'data.message'), ex_1.data);
                            }
                            throw new Error('Cancelled');
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.downloadArchive = function (app, archive) {
            return __awaiter(this, void 0, void 0, function () {
                var binary, fileBinary, e_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.getBinary(app, archive)];
                        case 1:
                            binary = _c.sent();
                            fileBinary = new Blob([binary], { type: 'application/x-zip-compressed' });
                            FileSaver.saveAs(fileBinary, archive.name);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _c.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.updateApp = function (app, deleteOnFailure) {
            if (deleteOnFailure === void 0) { deleteOnFailure = false; }
            return __awaiter(this, void 0, void 0, function () {
                var ex_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 2, , 5]);
                            return [4 /*yield*/, this.applicationService.update(app)];
                        case 1: return [2 /*return*/, _c.sent()];
                        case 2:
                            ex_2 = _c.sent();
                            this.alertService.addServerFailure(ex_2);
                            if (!deleteOnFailure) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.applicationService.delete(app.id)];
                        case 3:
                            _c.sent();
                            throw new Error('Application creation failed.');
                        case 4: return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.deleteApp = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var humanizedAppName;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getHumanizedAppName(app)];
                        case 1:
                            humanizedAppName = _c.sent();
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Delete application'), this.translateService.instant(ngxComponents.gettext("You are about to delete application \"{{ humanizedAppName }}\". Do you want to proceed?"), { humanizedAppName: humanizedAppName }), ngxComponents.Status.DANGER, { ok: ngxComponents.gettext('Delete'), cancel: ngxComponents.gettext('Cancel') })];
                        case 2:
                            _c.sent();
                            return [4 /*yield*/, this.applicationService.delete(app.id)];
                        case 3:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Application deleted.'));
                            this.appDeleted.emit(app);
                            return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.checkIfSubscribed = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, subscribedApps;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.tenantService.current()];
                        case 1:
                            currentTenant = _c.sent();
                            subscribedApps = currentTenant.data.applications.references;
                            return [2 /*return*/, subscribedApps.some(function (application) { return application.application.id === app.id; })];
                    }
                });
            });
        };
        EcosystemService.prototype.subscribeApp = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, ex_3;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            currentTenant = this.appStateService.currentTenant.value;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.tenantService.subscribeApplication(currentTenant, app)];
                        case 2:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Successfully subscribed to application.'));
                            return [3 /*break*/, 4];
                        case 3:
                            ex_3 = _c.sent();
                            this.alertService.addServerFailure(ex_3);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.unsubscribeApp = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var currentTenant, ex_4;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            currentTenant = this.appStateService.currentTenant.value;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.tenantService.unsubscribeApplication(currentTenant, app)];
                        case 2:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Successfully unsubscribed from application.'));
                            return [3 /*break*/, 4];
                        case 3:
                            ex_4 = _c.sent();
                            this.alertService.addServerFailure(ex_4);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.isValidAppType = function (archive, appType) {
            return __awaiter(this, void 0, void 0, function () {
                var currentType, ex_5;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.getAppType(archive)];
                        case 1:
                            currentType = _c.sent();
                            if (currentType !== appType) {
                                throw new Error(ERROR_TYPE.TYPE_VALIDATION);
                            }
                            else {
                                this.progress.next(this.progress.value + 10);
                                return [2 /*return*/, true];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            ex_5 = _c.sent();
                            throw new Error(ERROR_TYPE.TYPE_VALIDATION);
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.uploadArchiveToApp = function (archive, app) {
            return __awaiter(this, void 0, void 0, function () {
                var binaryService, binaryMo;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            binaryService = this.applicationService.binary(app);
                            this.xhr = binaryService.uploadWithProgressXhr(archive, this.updateUploadProgress.bind(this));
                            return [4 /*yield*/, binaryService.getXMLHttpResponse(this.xhr)];
                        case 1:
                            binaryMo = _c.sent();
                            return [4 /*yield*/, this.setAppActiveVersion(app, binaryMo.id)];
                        case 2: return [2 /*return*/, (_c.sent()).data];
                    }
                });
            });
        };
        EcosystemService.prototype.createAppForArchive = function (archive, isPackageTypeArchive) {
            if (isPackageTypeArchive === void 0) { isPackageTypeArchive = false; }
            return __awaiter(this, void 0, void 0, function () {
                var isPackage, appType, appModel, e_2, name, clearedName, key, contextPath, appToSave;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            isPackage = false;
                            return [4 /*yield*/, this.getAppType(archive)];
                        case 1:
                            appType = _c.sent();
                            appModel = {};
                            if (!(appType === client.ApplicationType.HOSTED)) return [3 /*break*/, 5];
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.getCumulocityJson(archive).toPromise()];
                        case 3:
                            appModel = _c.sent();
                            isPackage = appModel.isPackage;
                            return [3 /*break*/, 5];
                        case 4:
                            e_2 = _c.sent();
                            return [3 /*break*/, 5];
                        case 5:
                            name = this.getBaseNameFromArchiveOrAppModel(archive, appType, appModel);
                            clearedName = this.removeForbiddenCharacters(name);
                            key = this.getAppKey(appModel, clearedName);
                            contextPath = this.getContextPath(appModel, name);
                            appToSave = {
                                resourcesUrl: '/',
                                type: appType,
                                name: name,
                                key: key,
                                contextPath: contextPath
                            };
                            if (isPackageTypeArchive && !isPackage) {
                                throw new Error(ERROR_TYPE.INVALID_PACKAGE);
                            }
                            else if (!isPackageTypeArchive && isPackage) {
                                throw new Error(ERROR_TYPE.INVALID_APPLICATION);
                            }
                            return [4 /*yield*/, this.applicationService.create(Object.assign(Object.assign({}, appToSave), { manifest: { isPackage: isPackage } }))];
                        case 6: return [2 /*return*/, (_c.sent()).data];
                    }
                });
            });
        };
        EcosystemService.prototype.reactivateArchive = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_6;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.applicationService.reactivateArchive(app.id)];
                        case 1:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Application reactivated.'));
                            return [3 /*break*/, 3];
                        case 2:
                            ex_6 = _c.sent();
                            this.alertService.addServerFailure(ex_6);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.removeOldestArchive = function (app, archives) {
            return __awaiter(this, void 0, void 0, function () {
                var archiveToDelete, ex_7;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Delete oldest archive and continue'), ngxComponents.gettext('Up to 6 archives can be saved in the platform. If you upload a new archive, the oldest archive that is not active will be deleted. Do you want to proceed?'), ngxComponents.Status.INFO, { ok: ngxComponents.gettext('Delete and continue') })];
                        case 1:
                            _c.sent();
                            archiveToDelete = archives[archives.length - 2];
                            return [4 /*yield*/, this.applicationService.binary(app).delete(archiveToDelete.id)];
                        case 2:
                            _c.sent();
                            this.alertService.success(ngxComponents.gettext('Archive deleted.'));
                            return [3 /*break*/, 4];
                        case 3:
                            ex_7 = _c.sent();
                            this.alertService.addServerFailure(ex_7);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EcosystemService.prototype.getAppState = function (app) {
            if (!this.isOwner(app)) {
                return APP_STATE.SUBSCRIBED;
            }
            else if (this.isUnpacked(app)) {
                return APP_STATE.UNPACKED;
            }
            else if (app.type === client.ApplicationType.EXTERNAL) {
                return APP_STATE.EXTERNAL;
            }
            else if (this.isApplicationPackage(app)) {
                return APP_STATE.PACKAGE_APP;
            }
            else if (this.isPluginsPackage(app)) {
                return APP_STATE.PACKAGE_PLUGIN;
            }
            return APP_STATE.CUSTOM;
        };
        EcosystemService.prototype.isApplicationPackage = function (app) {
            return this.isPackage(app) && app.manifest.package === 'application';
        };
        EcosystemService.prototype.isPluginsPackage = function (app) {
            return this.isPackage(app) && app.manifest.package === 'plugin';
        };
        EcosystemService.prototype.isUnpacked = function (app) {
            var _a;
            return !!((_a = app.manifest) === null || _a === void 0 ? void 0 : _a.source);
        };
        EcosystemService.prototype.hasExports = function (app) {
            var _a, _b;
            return !!((_b = (_a = app.manifest) === null || _a === void 0 ? void 0 : _a.exports) === null || _b === void 0 ? void 0 : _b.length);
        };
        EcosystemService.prototype.isApplication = function (app) {
            return (app.type !== client.ApplicationType.MICROSERVICE && !this.isFeature(app) && !this.isPackage(app));
        };
        EcosystemService.prototype.isCustomMicroservice = function (app) {
            return this.isOwner(app) && app.type === client.ApplicationType.MICROSERVICE;
        };
        EcosystemService.prototype.isOverwrittenByCustomApp = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.appsGroupedByContextPath) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getWebApplications()];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2: return [2 /*return*/, (app.contextPath &&
                                this.appsGroupedByContextPath[app.contextPath].length === 2 &&
                                !this.isOwner(app))];
                    }
                });
            });
        };
        EcosystemService.prototype.getAppKey = function (appModel, name) {
            var key = appModel === null || appModel === void 0 ? void 0 : appModel.key;
            if (!key) {
                key = lodashEs.kebabCase(name) + "-key";
            }
            return key;
        };
        EcosystemService.prototype.getContextPath = function (appModel, name) {
            return (appModel === null || appModel === void 0 ? void 0 : appModel.contextPath) || name.toLowerCase();
        };
        EcosystemService.prototype.removeForbiddenCharacters = function (str) {
            return str.replace(/[^a-zA-Z0-9-_]/g, '');
        };
        EcosystemService.prototype.isCurrentApp = function (app) {
            var currentApp = this.appStateService.state.app;
            return currentApp.contextPath === app.contextPath;
        };
        EcosystemService.prototype.getCumulocityJson = function (archive) {
            return this.zipService.getJsonData(archive, {
                filename: CUMULOCITY_JSON
            });
        };
        EcosystemService.prototype.getAppType = function (archive) {
            return this.getCumulocityJson(archive)
                .toPromise()
                .then(function (data) { return lodashEs.get(data, 'type') ||
                (lodashEs.get(data, 'apiVersion') ? client.ApplicationType.MICROSERVICE : client.ApplicationType.HOSTED); })
                .catch(function () { return client.ApplicationType.HOSTED; });
        };
        EcosystemService.prototype.getBinary = function (app, archive) {
            return __awaiter(this, void 0, void 0, function () {
                var binary, res, ex_8, msg;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.applicationService.binary(app).downloadArchive(archive.id)];
                        case 1:
                            res = _c.sent();
                            return [4 /*yield*/, res.arrayBuffer()];
                        case 2:
                            binary = _c.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_8 = _c.sent();
                            msg = ngxComponents.gettext('Could not get the binary.');
                            this.alertService.danger(msg);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, binary];
                    }
                });
            });
        };
        EcosystemService.prototype.getBaseNameFromArchiveOrAppModel = function (archive, appType, appModel) {
            var baseName = (appModel === null || appModel === void 0 ? void 0 : appModel.name) || archive.name.replace(/\.zip$/i, '');
            if (appType === 'MICROSERVICE') {
                baseName = baseName.replace(/-\d+\.\d+\.\d+(-SNAPSHOT)?$/, '');
            }
            return baseName;
        };
        EcosystemService.prototype.checkIfAppNameKeyPathExists = function (existingApps, app, retryNo) {
            return existingApps.find(function (existingApp) { return existingApp.name === app.name ||
                existingApp.key === app.key ||
                existingApp.contextPath === app.contextPath ||
                existingApp.name === [app.name, retryNo].join('-') ||
                existingApp.key === [app.key, retryNo].join('-') ||
                existingApp.contextPath === [app.contextPath, retryNo].join('-'); });
        };
        EcosystemService.prototype.removeAppProperties = function (app) {
            var tempApp = lodashEs.cloneDeep(app);
            var propertiesToRemove = ['id', 'owner', 'activeVersionId'];
            propertiesToRemove.forEach(function (prop) { return delete tempApp[prop]; });
            return tempApp;
        };
        return EcosystemService;
    }());
    EcosystemService.decorators = [
        { type: core.Injectable }
    ];
    EcosystemService.ctorParameters = function () { return [
        { type: ngxComponents.ModalService },
        { type: ngxComponents.AlertService },
        { type: ngxComponents.HumanizeAppNamePipe },
        { type: core$1.TranslateService },
        { type: client.ApplicationService },
        { type: ngxComponents.AppStateService },
        { type: ngxComponents.ZipService },
        { type: client.TenantService }
    ]; };

    var AddWebApplicationComponent = /** @class */ (function () {
        function AddWebApplicationComponent(ecosystemService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.headerText = ngxComponents.gettext('Upload web application');
            this.successText = ngxComponents.gettext('Application created');
            this.createApplicationHandler = function (f) { return _this.createApplication(f); };
            this.uploadApplicationHandler = function (f, app) { return _this.uploadApplication(f, app); };
        }
        AddWebApplicationComponent.prototype.createApplication = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.isValidAppType(file, client.ApplicationType.HOSTED)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.ecosystemService.createAppForArchive(file)];
                    }
                });
            });
        };
        AddWebApplicationComponent.prototype.uploadApplication = function (file, app) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.ecosystemService.uploadArchiveToApp(file, app)];
                });
            });
        };
        return AddWebApplicationComponent;
    }());
    AddWebApplicationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-web-application',
                    template: "<c8y-add-application\n    [headerText]=\"headerText\"\n    [headerIcon]=\"'upload'\"\n    [successText]=\"successText\"\n    [createApplicationHandler]=\"createApplicationHandler\"\n    [uploadApplicationHandler]=\"uploadApplicationHandler\"\n    [canGoBack]=\"true\"\n  ></c8y-add-application>"
                },] }
    ];
    AddWebApplicationComponent.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var ApplicationPropertiesFormComponent = /** @class */ (function () {
        function ApplicationPropertiesFormComponent(formBuilder) {
            this.formBuilder = formBuilder;
        }
        ApplicationPropertiesFormComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.initForm();
                    this.setForm(this.application);
                    return [2 /*return*/];
                });
            });
        };
        ApplicationPropertiesFormComponent.prototype.initForm = function () {
            this.formGroup = this.formBuilder.group({
                name: [forms.Validators.required, forms.Validators.maxLength(120)],
                key: [forms.Validators.required, forms.Validators.maxLength(120)],
                contextPath: [forms.Validators.required, forms.Validators.maxLength(120)]
            });
        };
        ApplicationPropertiesFormComponent.prototype.setForm = function (applicationConfig) {
            this.formGroup.patchValue(Object.assign({}, applicationConfig));
        };
        return ApplicationPropertiesFormComponent;
    }());
    ApplicationPropertiesFormComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-application-properties-form',
                    template: "<form\n  (ngSubmit)=\"(formGroup.valid)\"\n  [formGroup]=\"formGroup\"\n  class=\"c8y-wizard-form text-left\"\n  name=\"appDeployForm\"\n  novalidate\n>\n  <c8y-form-group>\n    <label for=\"name\" translate>Name</label>\n    <input\n      class=\"form-control\"\n      formControlName=\"name\"\n      name=\"name\"\n      placeholder=\"{{ 'e.g. My application' | translate }}\"\n      required\n      type=\"text\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"key\" translate>Application key</label>\n    <input\n      class=\"form-control\"\n      formControlName=\"key\"\n      name=\"key\"\n      placeholder=\"{{ 'e.g. my-application-key' | translate }}\"\n      required\n      type=\"text\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"contextPath\" translate>Path</label>\n    <div class=\"input-group\">\n      <span class=\"input-group-addon\">/apps/</span>\n      <input\n        class=\"form-control\"\n        formControlName=\"contextPath\"\n        name=\"contextPath\"\n        placeholder=\"{{ 'e.g. my-application' | translate }}\"\n        required\n        type=\"text\"\n      />\n    </div>\n    <c8y-messages>\n      <c8y-message *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group *ngIf=\"isPackage\">\n    <label for=\"version\" translate>Use package version</label>\n    <div class=\"input-group\">\n      <input\n        class=\"form-control\"\n        disabled\n        formControlName=\"version\"\n        name=\"version\"\n        placeholder=\"{{ 'e.g. \\{\\{ example \\}\\}' | translate:{ example: '1.0.0' } }}\"\n        type=\"text\"\n      />\n    </div>\n  </c8y-form-group>\n</form>\n"
                },] }
    ];
    ApplicationPropertiesFormComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    ApplicationPropertiesFormComponent.propDecorators = {
        application: [{ type: core.Input }],
        isPackage: [{ type: core.Input }]
    };

    var InstallFromPackageComponent = /** @class */ (function () {
        function InstallFromPackageComponent(ecosystemService, applicationService, wizardComponent) {
            this.ecosystemService = ecosystemService;
            this.applicationService = applicationService;
            this.wizardComponent = wizardComponent;
            this.deployedWithSuccess = false;
            this.isDeployed = false;
        }
        InstallFromPackageComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.loadPackages();
                    return [2 /*return*/];
                });
            });
        };
        InstallFromPackageComponent.prototype.back = function () {
            this.wizardComponent.reset();
        };
        InstallFromPackageComponent.prototype.cancel = function () {
            this.wizardComponent.close();
        };
        InstallFromPackageComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var formGroupValue, clonedPkg, config, updatedApp, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
                            this.inProgress = true;
                            return [4 /*yield*/, this.applicationService.clone(this.selectedPackage)];
                        case 1:
                            clonedPkg = (_a.sent()).data;
                            config = this.ecosystemService.createConfig(clonedPkg, formGroupValue);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 6, , 8]);
                            return [4 /*yield*/, this.ecosystemService.updateApp(config, true)];
                        case 3:
                            updatedApp = (_a.sent()).data;
                            if (!updatedApp) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.ecosystemService.updateAppManifest(updatedApp, this.selectedPackage)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.deployedWithSuccess = true;
                            return [3 /*break*/, 8];
                        case 6:
                            error_1 = _a.sent();
                            this.inProgress = false;
                            return [4 /*yield*/, this.applicationService.delete(clonedPkg.id)];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 8:
                            this.markAsDeployed();
                            return [2 /*return*/];
                    }
                });
            });
        };
        InstallFromPackageComponent.prototype.selectPackage = function (selectedPackage) {
            return __awaiter(this, void 0, void 0, function () {
                var apps;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.getWebApplications()];
                        case 1:
                            apps = _a.sent();
                            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(selectedPackage, apps);
                            this.selectedPackage = selectedPackage;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /* The 'select package version' option will be added later when BE support for multiple app versions has been implemented. MTM-40278
        // onSelectedArchive(archive) {
        //   this.formGroup.controls['packageVersion'].setValue(archive.name);
        // } */
        InstallFromPackageComponent.prototype.markAsDeployed = function () {
            this.isDeployed = true;
            this.inProgress = false;
        };
        InstallFromPackageComponent.prototype.loadPackages = function () {
            return __awaiter(this, void 0, void 0, function () {
                var applications;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.getApplications()];
                        case 1:
                            applications = _a.sent();
                            this.packages = applications.data.filter(function (app) { return _this.ecosystemService.isApplicationPackage(app); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return InstallFromPackageComponent;
    }());
    InstallFromPackageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-install-from-package',
                    template: "<c8y-wizard-header>\n  <i [c8yIcon]=\"'big-parcel'\"></i>\n  <h4 translate>Install from package</h4>\n</c8y-wizard-header>\n<c8y-wizard-body>\n  <ng-container *ngIf=\"!selectedPackage\">\n    <div class=\"modal-inner-scroll\">\n      <p class=\"p-16 text-medium text-center separator-bottom sticky-top bg-white\">\n        {{ 'Select from available packages' | translate }}\n      </p>\n      <div *ngIf=\"!packages?.length\" class=\"c8y-empty-state text-center\">\n        <p class=\"text-center\">{{ 'No packages to display.' | translate }}</p>\n      </div>\n      <div *ngIf=\"packages?.length\" class=\"c8y-wizard-list-nav\" style=\"min-height: 257px\">\n        <button\n          class=\"list-group-item text-truncate\"\n          *ngFor=\"let package of packages\"\n          (click)=\"selectPackage(package)\"\n          title=\"{{ package.name }}\"\n          type=\"button\"\n        >\n          <i c8yIcon=\"big-parcel\" class=\"list-group-icon\"></i>\n          <span [innerText]=\"package.name\"></span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"!isDeployed && selectedPackage\">\n    <p class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white\">\n      {{ 'Provide application details' | translate }}\n    </p>\n    <div class=\"d-flex d-col a-i-center j-c-center\" style=\"min-height: 257px\">\n      <c8y-application-properties-form\n        *ngIf=\"!inProgress\"\n        [application]=\"newAppConfig\"\n        class=\"d-block fit-w\"\n      ></c8y-application-properties-form>\n      <c8y-progress-bar\n        [message]=\"'Installing\u2026' | translate\"\n        class=\"text-center d-block\"\n        *ngIf=\"inProgress\"\n      ></c8y-progress-bar>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDeployed\">\n    <div\n      *ngIf=\"deployedWithSuccess; else failedDeploy\"\n      class=\"d-flex a-i-center j-c-center\"\n      style=\"min-height: 257px\"\n    >\n      <c8y-operation-result\n        text=\"{{ 'Application created' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"success\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </div>\n    <ng-template #failedDeploy>\n      <div class=\"d-flex a-i-center j-c-center\" style=\"min-height: 257px\">\n        <c8y-operation-result\n          text=\"{{ 'Application creation failed' | translate }}\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          type=\"error\"\n          class=\"lead\"\n        ></c8y-operation-result>\n      </div>\n    </ng-template>\n  </ng-container>\n</c8y-wizard-body>\n\n<c8y-wizard-footer>\n  <button\n    *ngIf=\"!isDeployed\"\n    (click)=\"selectedPackage ? (selectedPackage = null) : back()\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    [disabled]=\"inProgress\"\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button\n    title=\"{{ isDeployed && deployedWithSuccess ? ('Close' | translate) : ('Cancel' | translate) }}\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    (click)=\"cancel()\"\n  >\n    {{ isDeployed && deployedWithSuccess ? ('Close' | translate) : ('Cancel' | translate) }}\n  </button>\n\n  <button\n    title=\"{{ 'Install' | translate }}\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    (click)=\"save()\"\n    [disabled]=\"inProgress\"\n    *ngIf=\"!isDeployed\"\n  >\n    {{ 'Install' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
                },] }
    ];
    InstallFromPackageComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: client.ApplicationService },
        { type: ngxComponents.WizardComponent }
    ]; };
    InstallFromPackageComponent.propDecorators = {
        applicationPropertiesForm: [{ type: core.ViewChild, args: [ApplicationPropertiesFormComponent,] }]
    };

    var DuplicateApplicationListComponent = /** @class */ (function () {
        function DuplicateApplicationListComponent(ecosystemService, wizardComponent) {
            this.ecosystemService = ecosystemService;
            this.wizardComponent = wizardComponent;
            this.onSelectedApp = new core.EventEmitter();
        }
        DuplicateApplicationListComponent.prototype.select = function (selectedApp) {
            this.onSelectedApp.emit(selectedApp);
            this.stepper.next();
        };
        DuplicateApplicationListComponent.prototype.cancel = function () {
            this.wizardComponent.close();
        };
        DuplicateApplicationListComponent.prototype.back = function () {
            this.wizardComponent.reset();
        };
        return DuplicateApplicationListComponent;
    }());
    DuplicateApplicationListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-duplicate-application-list',
                    template: "<div class=\"c8y-wizard-list-nav\">\n  <button\n    (click)=\"select(app)\"\n    *ngFor=\"let app of existingApps\"\n    class=\"list-group-item text-truncate p-t-8 p-b-8\"\n    type=\"button\"\n  >\n    <c8y-app-icon\n      [app]=\"app\"\n      [contextPath]=\"app.contextPath\"\n      [name]=\"app.name\"\n      class=\"list-group-icon\"\n    ></c8y-app-icon>\n    <span [innerText]=\"app | humanizeAppName | async\" class=\"pointer\"></span>\n    <span [ngClass]=\"ecosystemService.getAppState(app).class\" class=\"label m-l-16\">{{\n      ecosystemService.getAppState(app).label | translate\n    }}</span>\n  </button>\n</div>\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\" translate>\n    Cancel\n  </button>\n</c8y-wizard-footer>\n"
                },] }
    ];
    DuplicateApplicationListComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.WizardComponent }
    ]; };
    DuplicateApplicationListComponent.propDecorators = {
        stepper: [{ type: core.Input }],
        existingApps: [{ type: core.Input }],
        onSelectedApp: [{ type: core.Output }]
    };

    var DuplicateApplicationPropertiesComponent = /** @class */ (function () {
        function DuplicateApplicationPropertiesComponent(bsModalRef, ecosystemService, applicationService) {
            this.bsModalRef = bsModalRef;
            this.ecosystemService = ecosystemService;
            this.applicationService = applicationService;
            this.duplicatedApp = new core.EventEmitter();
            this.inProgress = false;
        }
        DuplicateApplicationPropertiesComponent.prototype.ngOnInit = function () {
            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.selectedApp.value, this.existingApps);
        };
        DuplicateApplicationPropertiesComponent.prototype.duplicateApp = function () {
            return __awaiter(this, void 0, void 0, function () {
                var formGroupValue, clonedApp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
                            this.inProgress = true;
                            return [4 /*yield*/, this.applicationService.clone(this.selectedApp.value)];
                        case 1:
                            clonedApp = (_a.sent()).data;
                            Object.assign(clonedApp, formGroupValue);
                            delete clonedApp.type;
                            return [4 /*yield*/, this.updateApp(clonedApp)];
                        case 2:
                            _a.sent();
                            this.inProgress = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DuplicateApplicationPropertiesComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
        };
        DuplicateApplicationPropertiesComponent.prototype.back = function () {
            this.stepper.previous();
        };
        DuplicateApplicationPropertiesComponent.prototype.updateApp = function (clonedAppConfig) {
            return __awaiter(this, void 0, void 0, function () {
                var app, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.ecosystemService.updateApp(clonedAppConfig, true)];
                        case 1:
                            app = (_a.sent()).data;
                            this.duplicatedApp.emit(app);
                            this.stepper.next();
                            return [3 /*break*/, 3];
                        case 2:
                            err_1 = _a.sent();
                            this.inProgress = false;
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return DuplicateApplicationPropertiesComponent;
    }());
    DuplicateApplicationPropertiesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-duplicate-application-properties',
                    template: "<p\n  class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white fit-w\"\n  *ngIf=\"!inProgress\"\n>\n  {{ 'Provide application details' | translate }}\n</p>\n<c8y-application-properties-form\n  *ngIf=\"!inProgress\"\n  [application]=\"newAppConfig\"\n  class=\"d-block fit-w\"\n></c8y-application-properties-form>\n<c8y-progress-bar\n  *ngIf=\"inProgress\"\n  [message]=\"'Duplicating\u2026' | translate\"\n  class=\"text-center d-block\"\n></c8y-progress-bar>\n\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Back' | translate }}\"\n  >\n    {{ 'Back' | translate }}\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    (click)=\"duplicateApp()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Duplicate' | translate }}\"\n  >\n    {{ 'Duplicate' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
                },] }
    ];
    DuplicateApplicationPropertiesComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: EcosystemService },
        { type: client.ApplicationService }
    ]; };
    DuplicateApplicationPropertiesComponent.propDecorators = {
        stepper: [{ type: core.Input }],
        existingApps: [{ type: core.Input }],
        selectedApp: [{ type: core.Input }],
        duplicatedApp: [{ type: core.Output }],
        applicationPropertiesForm: [{ type: core.ViewChild, args: [ApplicationPropertiesFormComponent,] }]
    };

    var DuplicateApplicationComponent = /** @class */ (function () {
        function DuplicateApplicationComponent(ecosystemService, applicationService, wizardComponent) {
            this.ecosystemService = ecosystemService;
            this.applicationService = applicationService;
            this.wizardComponent = wizardComponent;
            this.selectedApp = new rxjs.BehaviorSubject(null);
            this.existingApps = [];
        }
        DuplicateApplicationComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.getWebApplications()];
                        case 1:
                            _a.existingApps = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DuplicateApplicationComponent.prototype.onSelectedApp = function (app) {
            this.selectedApp.next(app);
        };
        DuplicateApplicationComponent.prototype.getHref = function (app) {
            return this.applicationService.getHref(app);
        };
        DuplicateApplicationComponent.prototype.done = function () {
            this.wizardComponent.close();
        };
        return DuplicateApplicationComponent;
    }());
    DuplicateApplicationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-duplicate-application',
                    template: "<c8y-wizard-header>\n  <h1 [c8yIcon]=\"'copy'\"></h1>\n  <h4 translate>Duplicate application</h4>\n</c8y-wizard-header>\n\n<c8y-wizard-body>\n  <c8y-stepper\n    [customClasses]=\"['hidden']\"\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    linear\n  >\n    <!-- 1st step -->\n    <cdk-step>\n      <p class=\"p-16 text-center text-medium separator-bottom sticky-top bg-white\">\n        {{ 'Select application' | translate }}\n      </p>\n      <c8y-duplicate-application-list\n        (onSelectedApp)=\"onSelectedApp($event)\"\n        *ngIf=\"stepper.selectedIndex === 0\"\n        [existingApps]=\"existingApps\"\n        [stepper]=\"stepper\"\n        class=\"d-block\"\n        style=\"min-height: 257px\"\n      ></c8y-duplicate-application-list>\n    </cdk-step>\n    <!-- 2nd step -->\n    <cdk-step>\n      <c8y-duplicate-application-properties\n        class=\"d-flex d-col j-c-center a-i-center\"\n        style=\"min-height: 257px\"\n        (duplicatedApp)=\"duplicatedApp = $event\"\n        *ngIf=\"stepper.selectedIndex === 1\"\n        [existingApps]=\"existingApps\"\n        [selectedApp]=\"selectedApp\"\n        [stepper]=\"stepper\"\n      ></c8y-duplicate-application-properties>\n    </cdk-step>\n    <!-- Final step -->\n    <cdk-step>\n      <ng-container *ngIf=\"stepper.selectedIndex === 2\">\n        <div\n          *ngIf=\"duplicatedApp; else duplicateAppFailed\"\n          style=\"min-height: 257px\"\n          class=\"d-flex a-i-center j-c-center\"\n        >\n          <c8y-operation-result\n            text=\"{{ 'Application created' | translate }}\"\n            [size]=\"84\"\n            [vertical]=\"true\"\n            type=\"success\"\n          ></c8y-operation-result>\n        </div>\n        <ng-template #duplicateAppFailed>\n          <div style=\"min-height: 257px\" class=\"d-flex a-i-center j-c-center\">\n            <c8y-operation-result\n              text=\"{{ 'Application creation failed' | translate }}\"\n              [size]=\"84\"\n              [vertical]=\"true\"\n              type=\"error\"\n            ></c8y-operation-result>\n          </div>\n        </ng-template>\n      </ng-container>\n    </cdk-step>\n  </c8y-stepper>\n</c8y-wizard-body>\n\n<c8y-wizard-footer *ngIf=\"stepper.selectedIndex === 2\">\n  <button type=\"button\" (click)=\"done()\" class=\"btn btn-default\" title=\"{{ 'Done' | translate }}\">\n    {{ 'Done' | translate }}\n  </button>\n  <a\n    (click)=\"$event.stopPropagation()\"\n    [href]=\"getHref(duplicatedApp)\"\n    target=\"_blank\"\n    class=\"btn btn-primary\"\n    title=\"{{ 'Open' | translate }}\"\n  >\n    <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n    {{ 'Open' | translate }}\n  </a>\n</c8y-wizard-footer>\n"
                },] }
    ];
    DuplicateApplicationComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: client.ApplicationService },
        { type: ngxComponents.WizardComponent }
    ]; };
    DuplicateApplicationComponent.propDecorators = {
        stepper: [{ type: core.ViewChild, args: [ngxComponents.C8yStepper, { static: true },] }]
    };

    var AddExternalApplicationComponent = /** @class */ (function () {
        function AddExternalApplicationComponent(applicationService, formBuilder, alertService, wizardComponent) {
            this.applicationService = applicationService;
            this.formBuilder = formBuilder;
            this.alertService = alertService;
            this.wizardComponent = wizardComponent;
        }
        AddExternalApplicationComponent.prototype.ngOnInit = function () {
            this.initForm();
        };
        AddExternalApplicationComponent.prototype.back = function () {
            this.wizardComponent.reset();
        };
        AddExternalApplicationComponent.prototype.cancel = function () {
            this.wizardComponent.close();
        };
        AddExternalApplicationComponent.prototype.done = function () {
            this.wizardComponent.close();
        };
        AddExternalApplicationComponent.prototype.save = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var appToSave, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            appToSave = {
                                manifest: {},
                                externalUrl: app.externalUrl,
                                type: client.ApplicationType.EXTERNAL,
                                name: app.name,
                                key: app.key
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.applicationService.create(appToSave)];
                        case 2:
                            _a.createdApp = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _b.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AddExternalApplicationComponent.prototype.initForm = function () {
            this.formGroup = this.formBuilder.group({
                name: ['', [forms.Validators.required, forms.Validators.maxLength(120)]],
                key: ['', [forms.Validators.required, forms.Validators.maxLength(120)]],
                externalUrl: ['', forms.Validators.required]
            });
        };
        return AddExternalApplicationComponent;
    }());
    AddExternalApplicationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-external-application',
                    template: "<form *ngIf=\"!createdApp; else appCreated\" [formGroup]=\"formGroup\" novalidate>\n  <c8y-wizard-header>\n    <h1 [c8yIcon]=\"'cloud-link'\"></h1>\n    <h4 translate>Add external application</h4>\n  </c8y-wizard-header>\n\n  <c8y-wizard-body>\n    <p class=\"p-16 text-medium text-center bg-white separator-bottom sticky-top\">\n      {{ 'Provide external application details' | translate }}\n    </p>\n    <div class=\"modal-body p-t-8\">\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'Name' | translate }}</label>\n        <input\n          class=\"form-control\"\n          formControlName=\"name\"\n          name=\"name\"\n          placeholder=\"{{ 'e.g. My application' | translate }}\"\n          required\n          type=\"text\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"formGroup?.controls?.name?.errors?.required && !formGroup.controls.name.pristine\"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.maxlength\" translate>\n            Maximum 120 characters allowed.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'Application key' | translate }}</label>\n        <input\n          class=\"form-control\"\n          formControlName=\"key\"\n          name=\"key\"\n          placeholder=\"{{ 'e.g. my-external-application-key' | translate }}\"\n          required\n          type=\"text\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"formGroup?.controls?.key?.errors?.required && !formGroup.controls.key.pristine\"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.maxlength\" translate>\n            Maximum 120 characters allowed.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label style=\"text-align: left\">{{ 'External URL' | translate }}</label>\n        <input\n          [pattern]=\"'^(?!javascript:).+'\"\n          class=\"form-control\"\n          formControlName=\"externalUrl\"\n          name=\"externalUrl\"\n          placeholder=\"{{ 'e.g.' | translate }} https://www.example.com\"\n          required\n          type=\"url\"\n        />\n        <c8y-messages>\n          <c8y-message\n            *ngIf=\"\n              formGroup?.controls?.externalUrl?.errors?.required &&\n              !formGroup.controls.externalUrl.pristine\n            \"\n            translate\n          >\n            This field is required.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n  </c8y-wizard-body>\n\n  <c8y-wizard-footer>\n    <button\n      (click)=\"back()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Back' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Back\n    </button>\n    <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\" translate>\n      Cancel\n    </button>\n    <button\n      (click)=\"save(formGroup.value)\"\n      [disabled]=\"formGroup.invalid || formGroup.pristine\"\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Add application' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Add application' | translate }}\n    </button>\n  </c8y-wizard-footer>\n</form>\n<ng-template #appCreated>\n  <c8y-wizard-body>\n    <div class=\"d-flex d-col j-c-center a-i-center\" style=\"min-height: 324px\">\n      <c8y-operation-result\n        text=\"{{ 'Application created' | translate }}\"\n        [size]=\"84\"\n        [vertical]=\"true\"\n        type=\"success\"\n        class=\"lead\"\n      ></c8y-operation-result>\n    </div>\n  </c8y-wizard-body>\n  <c8y-wizard-footer>\n    <button (click)=\"done()\" class=\"btn btn-default\" title=\"{{ 'Done' | translate }}\" translate>\n      Done\n    </button>\n    <a\n      (click)=\"$event.stopPropagation()\"\n      [href]=\"formGroup.value.externalUrl\"\n      target=\"_blank\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Open' | translate }}\"\n    >\n      <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n      {{ 'Open' | translate }}\n    </a>\n  </c8y-wizard-footer>\n</ng-template>\n"
                },] }
    ];
    AddExternalApplicationComponent.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: forms.FormBuilder },
        { type: ngxComponents.AlertService },
        { type: ngxComponents.WizardComponent }
    ]; };

    var AddMicroserviceComponent = /** @class */ (function () {
        function AddMicroserviceComponent(ecosystemService, modal, tenantService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.modal = modal;
            this.tenantService = tenantService;
            this.headerText = ngxComponents.gettext('Add microservice');
            this.successText = ngxComponents.gettext('Microservice created');
            this.createMicroserviceApplicationHandler = function (f) { return _this.createMicroserviceApplication(f); };
            this.uploadMicroserviceHandler = function (f, app) { return _this.uploadMicroservice(f, app); };
        }
        AddMicroserviceComponent.prototype.createMicroserviceApplication = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.isValidAppType(file, client.ApplicationType.MICROSERVICE)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.ecosystemService.createAppForArchive(file)];
                    }
                });
            });
        };
        AddMicroserviceComponent.prototype.uploadMicroservice = function (file, microservice) {
            return __awaiter(this, void 0, void 0, function () {
                var subscribeToCurrentTenant;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.askIfActivationAfterUploadNeeded()];
                        case 1:
                            subscribeToCurrentTenant = _a.sent();
                            return [4 /*yield*/, this.ecosystemService.uploadArchiveToApp(file, microservice)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.subscribeMicroservice(microservice, subscribeToCurrentTenant)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AddMicroserviceComponent.prototype.askIfActivationAfterUploadNeeded = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Subscribe to microservice'), ngxComponents.gettext('You are about to subscribe to the microservice after upload. Do you want to subscribe to it?'), ngxComponents.Status.INFO, { ok: ngxComponents.gettext('Subscribe'), cancel: ngxComponents.gettext("Don't subscribe") })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 2:
                            ex_1 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AddMicroserviceComponent.prototype.subscribeMicroservice = function (app, subscribeToCurrentTenant) {
            return __awaiter(this, void 0, void 0, function () {
                var tenant, applications, isSubscribed, res_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantService.current()];
                        case 1:
                            tenant = (_a.sent()).data;
                            applications = tenant.applications.references;
                            isSubscribed = applications.some(function (_a) {
                                var application = _a.application;
                                return application.id === app.id;
                            });
                            if (!(!isSubscribed && subscribeToCurrentTenant)) return [3 /*break*/, 6];
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.tenantService.subscribeApplication(tenant, app)];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4:
                            res_1 = _a.sent();
                            if (res_1.status === 409) {
                                throw Error(ERROR_TYPE.ALREADY_SUBSCRIBED);
                            }
                            return [3 /*break*/, 5];
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            if (isSubscribed && !subscribeToCurrentTenant) {
                                return [2 /*return*/, this.tenantService.unsubscribeApplication(tenant, app)];
                            }
                            _a.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return AddMicroserviceComponent;
    }());
    AddMicroserviceComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-microservice',
                    template: "<c8y-add-application\n    [headerText]=\"headerText\"\n    [headerIcon]=\"'microchip'\"\n    [successText]=\"successText\"\n    [createApplicationHandler]=\"createMicroserviceApplicationHandler\"\n    [uploadApplicationHandler]=\"uploadMicroserviceHandler\"\n  ></c8y-add-application>"
                },] }
    ];
    AddMicroserviceComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.ModalService },
        { type: client.TenantService }
    ]; };

    var ApplicationListComponent = /** @class */ (function () {
        function ApplicationListComponent(ecosystemService, wizardService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.wizardService = wizardService;
            this.reloading = false;
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.apps$ = this.reload$.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.ecosystemService.getWebApplications(); }), operators.tap(function () { return (_this.reloading = false); }), operators.shareReplay());
        }
        ApplicationListComponent.prototype.ngOnInit = function () {
            this.loadApplications();
        };
        ApplicationListComponent.prototype.loadApplications = function () {
            this.reload$.next();
        };
        ApplicationListComponent.prototype.addApplication = function () {
            var _this = this;
            var wizardConfig = {
                headerText: 'Add Application',
                headerIcon: 'c8y-atom'
            };
            var initialState = {
                wizardConfig: wizardConfig,
                id: 'uploadApplication'
            };
            var modalOptions = { initialState: initialState };
            var modalRef = this.wizardService.show(modalOptions);
            modalRef.content.onClose.subscribe(function () {
                _this.loadApplications();
            });
        };
        return ApplicationListComponent;
    }());
    ApplicationListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-application-list',
                    template: "<c8y-title>{{ 'All applications' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'All applications' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"addApplication()\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add application' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add application' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"loadApplications()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(apps$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(apps$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No applications to display.</h3>\n  <p translate>Add your first application by clicking below.</p>\n  <p>\n    <button\n      (click)=\"addApplication()\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add application' | translate }}\"\n    >\n      {{ 'Add application' | translate }}\n    </button>\n  </p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(apps$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Application' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let app of apps$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      (onAppDeleted)=\"loadApplications()\"\n      [app]=\"app\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
                },] }
    ];
    ApplicationListComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.WizardService }
    ]; };

    var InstallPluginComponent = /** @class */ (function () {
        function InstallPluginComponent(bsModalRef, modal) {
            var _this = this;
            this.bsModalRef = bsModalRef;
            this.modal = modal;
            this.filterTerm$ = new rxjs.BehaviorSubject('');
            this.filteredPlugins$ = new rxjs.BehaviorSubject([]);
            this.selectedPlugins = [];
            this.result = new Promise(function (resolve, reject) {
                _this._install = resolve;
                _this._cancel = reject;
            });
        }
        InstallPluginComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.filteredPlugins$ = rxjs.combineLatest(this.plugins$, this.filterTerm$).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), plugins = _b[0], filterTerm = _b[1];
                return filterTerm.trim().length === 0
                    ? plugins
                    : plugins.filter(function (plugin) { return _this.filterContainString(plugin.name, filterTerm); });
            }));
        };
        InstallPluginComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
            this._cancel();
        };
        InstallPluginComponent.prototype.install = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Install plugins'), ngxComponents.gettext('The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?'), ngxComponents.Status.INFO, { ok: ngxComponents.gettext('Continue') })];
                        case 1:
                            _a.sent();
                            this._install(this.selectedPlugins);
                            this.bsModalRef.hide();
                            return [2 /*return*/];
                    }
                });
            });
        };
        InstallPluginComponent.prototype.filterContainString = function (name, filterTerm) {
            var term = filterTerm.toLowerCase().trim();
            return name && name.toLowerCase().indexOf(term) > -1;
        };
        return InstallPluginComponent;
    }());
    InstallPluginComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-install-plugin',
                    template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'plugin'\"></i>\n    <h4 translate>Available plugins</h4>\n  </div>\n  <div class=\"p-t-8 p-16 text-center separator-bottom\">\n    <p class=\"text-medium m-b-8\" translate>Select the compatible plugins to install</p>\n    <c8y-filter (onSearch)=\"this.filterTerm$.next($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body p-t-0 p-b-0\">\n      <c8y-plugin-list\n        (selectedItems)=\"selectedPlugins = $event\"\n        [emptyListText]=\"'No plugins available' | translate\"\n        [plugins$]=\"filteredPlugins$\"\n        [selectable]=\"true\"\n        class=\"m-t-16\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Cancel\n    </button>\n    <button\n      (click)=\"install()\"\n      [disabled]=\"selectedPlugins.length === 0\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Install' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Install' | translate }} ({{ selectedPlugins.length }})\n    </button>\n  </div>\n</div>\n"
                },] }
    ];
    InstallPluginComponent.ctorParameters = function () { return [
        { type: modal.BsModalRef },
        { type: ngxComponents.ModalService }
    ]; };
    InstallPluginComponent.propDecorators = {
        plugins$: [{ type: core.Input }]
    };

    var ApplicationPluginsComponent = /** @class */ (function () {
        function ApplicationPluginsComponent(activatedRoute, ecosystemService, bsModalService, modal, translateService, pluginsService, alertService) {
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.ecosystemService = ecosystemService;
            this.bsModalService = bsModalService;
            this.modal = modal;
            this.translateService = translateService;
            this.pluginsService = pluginsService;
            this.alertService = alertService;
            this.exportedPlugins$ = new rxjs.BehaviorSubject([]);
            this.remotePlugins$ = new rxjs.BehaviorSubject({});
            this.allAvailablePlugins$ = new rxjs.BehaviorSubject([]);
            this.installedPlugins$ = rxjs.combineLatest([
                this.remotePlugins$.pipe(operators.map(function (remotes) { return _this.getRemotePluginsList(remotes); })),
                this.allAvailablePlugins$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), remotePlugins = _b[0], allPlugins = _b[1];
                return allPlugins.filter(function (p) { return remotePlugins.includes(p.id); });
            }), operators.shareReplay(1));
            this.pluginsToDelete = [];
            this.archives = [];
        }
        ApplicationPluginsComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, _a, _b, manifest, exports, remotes, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            id = this.activatedRoute.snapshot.parent.data.contextData.id;
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.getApplication(id)];
                        case 1:
                            _a.app = _e.sent();
                            _b = this;
                            return [4 /*yield*/, this.ecosystemService.listArchives(this.app.id)];
                        case 2:
                            _b.archives = _e.sent();
                            this.archives.sort(function (a, b) {
                                return new Date(b.created) - new Date(a.created);
                            });
                            manifest = this.app.manifest;
                            if (manifest) {
                                exports = manifest.exports || [];
                                this.exportedPlugins$.next(this.extendPluginList(exports, this.app.contextPath));
                                remotes = manifest.remotes || {};
                                this.remotePlugins$.next(remotes);
                            }
                            _d = (_c = this.allAvailablePlugins$).next;
                            return [4 /*yield*/, this.getAllPlugins()];
                        case 3:
                            _d.apply(_c, [_e.sent()]);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPluginsComponent.prototype.installPlugins = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, pluginsToAdd, currentRemotes_1, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                plugins$: rxjs.combineLatest([
                                    this.allAvailablePlugins$,
                                    this.installedPlugins$.pipe(operators.map(function (plugins) { return plugins.map(function (p) { return p.id; }); })),
                                    this.exportedPlugins$.pipe(operators.map(function (plugins) { return plugins.map(function (p) { return p.id; }); }))
                                ]).pipe(operators.map(function (_a) {
                                    var _b = __read(_a, 3), allPlugins = _b[0], installedPlugins = _b[1], exportedPluginNames = _b[2];
                                    var plugins = [];
                                    allPlugins
                                        .filter(function (p) { return !exportedPluginNames.includes(p.id); })
                                        .forEach(function (p) { return plugins.push(Object.assign(Object.assign({}, p), { installed: !!installedPlugins.includes(p.id) })); });
                                    return plugins;
                                }), operators.shareReplay(1))
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, this.bsModalService.show(InstallPluginComponent, {
                                    class: 'modal-md',
                                    initialState: initialState,
                                    ignoreBackdropClick: true
                                }).content.result];
                        case 2:
                            pluginsToAdd = (_a.sent());
                            currentRemotes_1 = Object.assign({}, this.remotePlugins$.value);
                            pluginsToAdd.forEach(function (pluginId) {
                                var _a = _this.parsePluginId(pluginId), contextPath = _a.contextPath, name = _a.name;
                                (currentRemotes_1[contextPath] = currentRemotes_1[contextPath] || []).push(name);
                            });
                            if (!(this.archives.length === 6)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.ecosystemService.removeOldestArchive(this.app, this.archives)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            this.updateApplicationRemotes(currentRemotes_1);
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPluginsComponent.prototype.removePlugins = function () {
            return __awaiter(this, void 0, void 0, function () {
                var humanizedAppName, remotes_1, ex_2;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.getHumanizedAppName(this.app)];
                        case 1:
                            humanizedAppName = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Remove plugins'), this.translateService.instant(ngxComponents.gettext("You are about to remove plugins from application \"{{ humanizedAppName }}\". The operation may take several minutes. During this time the application may be unavailable. Do you want to proceed?"), { humanizedAppName: humanizedAppName }), ngxComponents.Status.DANGER, {
                                    ok: ngxComponents.gettext('Remove'),
                                    cancel: ngxComponents.gettext('Cancel')
                                })];
                        case 3:
                            _a.sent();
                            remotes_1 = Object.assign({}, this.remotePlugins$.value);
                            this.pluginsToDelete.forEach(function (pluginId) {
                                var _a = _this.parsePluginId(pluginId), contextPath = _a.contextPath, name = _a.name;
                                remotes_1[contextPath] = remotes_1[contextPath].filter(function (p) { return p !== name; });
                            });
                            this.updateApplicationRemotes(remotes_1);
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPluginsComponent.prototype.getAllPlugins = function () {
            return __awaiter(this, void 0, void 0, function () {
                var plugins, packages, apps;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            plugins = [];
                            return [4 /*yield*/, this.ecosystemService.getPackageApplications()];
                        case 1:
                            packages = _a.sent();
                            apps = __spreadArray(__spreadArray([], __read(packages)), [this.app]);
                            apps.forEach(function (app) {
                                var exports = (app.manifest && app.manifest.exports) || [];
                                plugins.push.apply(plugins, __spreadArray([], __read(_this.extendPluginList(exports, app.contextPath))));
                            });
                            return [2 /*return*/, plugins];
                    }
                });
            });
        };
        ApplicationPluginsComponent.prototype.updateApplicationRemotes = function (remotes) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, this.pluginsService.updateRemotesInCumulocityJson(this.app, remotes)];
                        case 2:
                            _a.sent();
                            this.remotePlugins$.next(remotes);
                            return [3 /*break*/, 5];
                        case 3:
                            ex_3 = _a.sent();
                            this.alertService.danger(ex_3);
                            return [3 /*break*/, 5];
                        case 4:
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPluginsComponent.prototype.getRemotePluginsList = function (remotes) {
            var _this = this;
            var importContextPaths = Object.keys(remotes);
            var plugins = [];
            importContextPaths.forEach(function (contextPath) {
                var moduleNames = remotes[contextPath];
                plugins.push.apply(plugins, __spreadArray([], __read(moduleNames.map(function (module) { return _this.createPluginId(contextPath, module); }))));
            });
            return plugins;
        };
        ApplicationPluginsComponent.prototype.extendPluginList = function (plugins, contextPath) {
            var _this = this;
            var extendedPlugins = [];
            plugins.map(function (p) {
                extendedPlugins.push(Object.assign(Object.assign({}, p), { id: _this.createPluginId(contextPath, p.name, p.module), contextPath: contextPath }));
            });
            return extendedPlugins;
        };
        ApplicationPluginsComponent.prototype.createPluginId = function (contextPath, pluginName, pluginModuleName) {
            return contextPath + "/" + (pluginModuleName || pluginName);
        };
        ApplicationPluginsComponent.prototype.parsePluginId = function (id) {
            var _a = __read(id.split('/'), 2), contextPath = _a[0], name = _a[1];
            return { contextPath: contextPath, name: name };
        };
        return ApplicationPluginsComponent;
    }());
    ApplicationPluginsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-app-plugins',
                    template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'All applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll bg-gray-white\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <h4 class=\"card-title\" translate>Included plugins</h4>\n    </div>\n    <div class=\"card-block large-padding\">\n      <p class=\"d-flex a-i-start p-b-16\">\n        <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n        <span translate>\n          Plugins included with the application. These plugins are required for running the\n          application and cannot be removed.\n        </span>\n      </p>\n      <c8y-plugin-list\n        [emptyListText]=\"'This application doesn\\'t contain plugins.' | translate\"\n        [plugins$]=\"exportedPlugins$\"\n        class=\"separator-top d-block\"\n      ></c8y-plugin-list>\n    </div>\n  </div>\n\n  <div class=\"content-fullpage d-flex d-col\">\n    <div class=\"card-header large-padding separator\">\n      <h4 class=\"card-title\" translate>Installed plugins</h4>\n    </div>\n    <div class=\"inner-scroll flex-grow\">\n      <div class=\"card-block large-padding\">\n        <p class=\"d-flex a-i-start p-b-16\">\n          <i c8yIcon=\"info-circle\" class=\"text-info m-r-8 icon-20\"></i>\n          <span translate>\n            Plugins currently installed for this application. Upgrading the application won't change\n            any of these plugins.\n          </span>\n        </p>\n        <c8y-plugin-list\n          (selectedItems)=\"pluginsToDelete = $event\"\n          [emptyListText]=\"'No plugins installed' | translate\"\n          [plugins$]=\"installedPlugins$\"\n          [selectable]=\"true\"\n          class=\"separator-top d-block\"\n        ></c8y-plugin-list>\n      </div>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <button\n        (click)=\"removePlugins()\"\n        [disabled]=\"pluginsToDelete.length === 0 || isLoading\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Remove plugins' | translate }}\"\n        translate\n      >\n        Remove plugins\n      </button>\n      <button\n        (click)=\"installPlugins()\"\n        [ngClass]=\"{ 'btn-pending': isLoading }\"\n        class=\"btn btn-default\"\n        title=\"{{ 'Install plugins' | translate }}\"\n        translate\n      >\n        Install plugins\n      </button>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    ApplicationPluginsComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: EcosystemService },
        { type: modal.BsModalService },
        { type: ngxComponents.ModalService },
        { type: core$1.TranslateService },
        { type: ngxComponents.PluginsService },
        { type: ngxComponents.AlertService }
    ]; };

    var ApplicationPluginsGuard = /** @class */ (function () {
        function ApplicationPluginsGuard(ecosystemService) {
            this.ecosystemService = ecosystemService;
        }
        ApplicationPluginsGuard.prototype.canActivate = function (route) {
            var app = route.data.contextData || route.parent.data.contextData;
            if (!app) {
                return false;
            }
            return (app.type === client.ApplicationType.HOSTED &&
                this.ecosystemService.isOwner(app) &&
                !this.ecosystemService.isPackage(app));
        };
        return ApplicationPluginsGuard;
    }());
    ApplicationPluginsGuard.decorators = [
        { type: core.Injectable }
    ];
    ApplicationPluginsGuard.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var PluginListItemComponent = /** @class */ (function () {
        function PluginListItemComponent() {
            this.isItemSelected = new core.EventEmitter();
        }
        PluginListItemComponent.prototype.onChange = function (event) {
            this.isItemSelected.next(event);
        };
        return PluginListItemComponent;
    }());
    PluginListItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-plugin-list-item',
                    template: "<c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n  <c8y-li-checkbox\n    (change)=\"onChange($event.target.checked)\"\n    *ngIf=\"selectable\"\n    [disabled]=\"plugin.installed\"\n    class=\"p-r-0 p-l-0\"\n  ></c8y-li-checkbox>\n  <c8y-li-icon>\n    <i class=\"c8y-plugin-icon\">\n      <span>{{ plugin.name?.substr(0, 2) }}</span>\n    </i>\n  </c8y-li-icon>\n  <c8y-li-body class=\"d-flex\">\n    <div class=\"p-r-8\">\n      <p>\n        <span class=\"text-medium\">{{ plugin.name }}</span>\n        <em class=\"text-muted small m-l-8\">{{ plugin.version }}</em>\n        <span *ngIf=\"plugin.installed\">\n          <i [c8yIcon]=\"'check-circle'\" class=\"text-success\"></i>\n          <em class=\"text-muted small\" translate>Installed</em>\n        </span>\n      </p>\n      <p class=\"small l-h-tight\">{{ plugin.description }}</p>\n    </div>\n    <span *ngIf=\"selectable\" class=\"label label-info m-l-auto a-s-start\">{{\n      plugin.contextPath\n    }}</span>\n  </c8y-li-body>\n</c8y-li>\n"
                },] }
    ];
    PluginListItemComponent.propDecorators = {
        plugin: [{ type: core.Input }],
        selectable: [{ type: core.Input }],
        isItemSelected: [{ type: core.Output }]
    };

    var PluginListComponent = /** @class */ (function () {
        function PluginListComponent() {
            this.emptyListText = '';
            this.selectedItems = new core.EventEmitter();
            this.selectedPlugins = {};
        }
        PluginListComponent.prototype.updateSelectedItems = function (value, name) {
            var _this = this;
            this.selectedPlugins[name] = value;
            this.selectedItems.emit(Object.keys(this.selectedPlugins).filter(function (k) { return _this.selectedPlugins[k]; }));
        };
        return PluginListComponent;
    }());
    PluginListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-plugin-list',
                    template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-plugin-list-item\n        (isItemSelected)=\"updateSelectedItems($event, plugin.id)\"\n        [plugin]=\"plugin\"\n        [selectable]=\"selectable\"\n      ></c8y-plugin-list-item>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n"
                },] }
    ];
    PluginListComponent.propDecorators = {
        plugins$: [{ type: core.Input }],
        emptyListText: [{ type: core.Input }],
        selectable: [{ type: core.Input }],
        selectedItems: [{ type: core.Output }]
    };

    var ActivityLogComponent = /** @class */ (function () {
        function ActivityLogComponent(ecosystemService, alertService) {
            this.ecosystemService = ecosystemService;
            this.alertService = alertService;
            this.archives = [];
            this.canReactivate = false;
        }
        Object.defineProperty(ActivityLogComponent.prototype, "uploadProgress", {
            get: function () {
                return this.ecosystemService.progress;
            },
            enumerable: false,
            configurable: true
        });
        ActivityLogComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.canReactivate = this.showReactivate();
                    this.refresh();
                    return [2 /*return*/];
                });
            });
        };
        ActivityLogComponent.prototype.isActive = function (archive) {
            return this.application.activeVersionId === archive.id;
        };
        ActivityLogComponent.prototype.toActivate = function (archive) {
            return this.toActivateVersionId === archive.id;
        };
        ActivityLogComponent.prototype.checkIfLast = function (archive) {
            return archive.id === this.last.id;
        };
        ActivityLogComponent.prototype.showReactivate = function () {
            return this.ecosystemService.isApplication(this.application);
        };
        ActivityLogComponent.prototype.setActive = function (archive) {
            return __awaiter(this, void 0, void 0, function () {
                var id, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            id = archive.id || archive;
                            this.toActivateVersionId = id;
                            this.isLoading = true;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.setAppActiveVersion(this.application, id)];
                        case 2:
                            _a.application = (_b.sent()).data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _b.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 4];
                        case 4:
                            this.isLoading = false;
                            this.refresh();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActivityLogComponent.prototype.deleteArchive = function (archive) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.deleteArchive(archive, this.application)];
                        case 1:
                            _a.sent();
                            this.refresh();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActivityLogComponent.prototype.downloadArchive = function (archive) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.downloadArchive(this.application, archive)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActivityLogComponent.prototype.reactivateArchive = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.reactivateArchive(this.application)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActivityLogComponent.prototype.onRefresh = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.refresh()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ActivityLogComponent.prototype.refresh = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.isLoading = true;
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.listArchives(this.application.id)];
                        case 1:
                            _a.archives = _b.sent();
                            this.archives.sort(function (a, b) {
                                return new Date(b.created) - new Date(a.created);
                            });
                            this.last = this.archives[this.archives.length - 1];
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ActivityLogComponent;
    }());
    ActivityLogComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-activity-log',
                    template: "<div class=\"inner-scroll bg-gray-white flex-grow\">\n  <div class=\"card-block overflow-visible\">\n    <c8y-list-group>\n      <c8y-li-timeline *ngFor=\"let archive of archives\" [ngClass]=\"{ active: isActive(archive) }\">\n        {{ archive.created | date: 'd MMM YYYY' }}\n        {{ archive.created | date: 'shortTime' }}\n        <c8y-li>\n          <c8y-li-icon\n            [icon]=\"checkIfLast(archive) ? 'flag-checkered' : 'file-zip-o'\"\n          ></c8y-li-icon>\n          <c8y-li-body>\n            <div class=\"d-flex a-i-start\">\n              <div style=\"min-width: 0; flex: 1\">\n                <span class=\"text-truncate-wrap\" title=\" {{ archive.description || archive.name }}\">\n                  {{ archive.description || archive.name }}\n                </span>\n                <small *ngIf=\"archive.description\" class=\"text-muted\">{{\n                  archive.description\n                }}</small>\n              </div>\n              <i\n                *ngIf=\"isLoading && toActivate(archive)\"\n                [c8yIcon]=\"'circle-o-notch'\"\n                class=\"icon-spin\"\n                title=\"{{ 'Activating' | translate }}\"\n              ></i>\n\n              <span *ngIf=\"isActive(archive)\" class=\"label label-primary m-l-auto m-t-4\">{{\n                'Active' | translate\n              }}</span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-action\n            (click)=\"setActive(archive)\"\n            *ngIf=\"!isLoading && !isActive(archive)\"\n            icon=\"check-square-o\"\n          >\n            {{ 'Set as active`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action (click)=\"downloadArchive(archive)\" icon=\"download\">\n            {{ 'Download`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"deleteArchive(archive)\"\n            *ngIf=\"archives.length > 1 && !checkIfLast(archive) && !isActive(archive)\"\n            icon=\"trash\"\n          >\n            {{ 'Delete`archive`' | translate }}\n          </c8y-li-action>\n          <c8y-li-action\n            (click)=\"reactivateArchive()\"\n            *ngIf=\"canReactivate && isActive(archive)\"\n            icon=\"undo\"\n          >\n            {{ 'Reactivate archive' | translate }}\n          </c8y-li-action>\n        </c8y-li>\n      </c8y-li-timeline>\n    </c8y-list-group>\n  </div>\n</div>\n<div class=\"card-footer\">\n  <c8y-form-group *ngIf=\"!isLoading\" class=\"m-auto\">\n    <c8y-upload-archive [(application)]=\"application\" (refresh)=\"onRefresh()\"></c8y-upload-archive>\n  </c8y-form-group>\n</div>\n"
                },] }
    ];
    ActivityLogComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.AlertService }
    ]; };
    ActivityLogComponent.propDecorators = {
        application: [{ type: core.Input }]
    };

    var MICROSERVICES_BASE_PATH = '/microservices';
    var APPLICATIONS_BASE_PATH = '/ecosystem';
    var ApplicationPropertiesComponent = /** @class */ (function () {
        function ApplicationPropertiesComponent(activatedRoute, ecosystemService, router, formBuilder, applicationService, alertService, inventoryService) {
            this.activatedRoute = activatedRoute;
            this.ecosystemService = ecosystemService;
            this.router = router;
            this.formBuilder = formBuilder;
            this.applicationService = applicationService;
            this.alertService = alertService;
            this.inventoryService = inventoryService;
            this.singleTenant = false;
            this.subscription = false;
            this.iconMap = {
                HOSTED: 'cloud',
                EXTERNAL: 'external-link-square',
                MICROSERVICE: 'microchip'
            };
            this.isLoading = true;
            this.packageProperties = __spreadArray([], __read(packageProperties));
        }
        ApplicationPropertiesComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.load()];
                        case 1:
                            _a.sent();
                            this.isUnpacked = this.ecosystemService.isUnpacked(this.application);
                            this.isPackage = this.ecosystemService.isPackage(this.application);
                            this.isFeature = this.ecosystemService.isFeature(this.application);
                            this.isExternal = this.ecosystemService.isExternal(this.application);
                            this.isMicroservice = this.ecosystemService.isMicroservice(this.application);
                            this.appState = this.ecosystemService.getAppState(this.application);
                            if (!this.isUnpacked) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.resolveSourcePackage()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            this.setBreadcrumbConifg();
                            if (this.isCustomMicroservice) {
                                this.loadBinaryMo();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            this.initForm();
                            return [4 /*yield*/, this.loadApplication()];
                        case 1:
                            _a.sent();
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.onApplication = function (app) {
            if (app.manifest) {
                this.singleTenant = app.manifest.isolation === client.Isolation.PER_TENANT;
                this.subscription = app.manifest.billingMode === client.BillingMode.SUBSCRIPTION;
            }
        };
        ApplicationPropertiesComponent.prototype.cancel = function () {
            if (this.application.type === client.ApplicationType.MICROSERVICE) {
                this.router.navigateByUrl(MICROSERVICES_BASE_PATH);
            }
            else {
                this.router.navigateByUrl(APPLICATIONS_BASE_PATH);
            }
        };
        ApplicationPropertiesComponent.prototype.openApp = function (app) {
            window.open(this.applicationService.getHref(app));
        };
        ApplicationPropertiesComponent.prototype.getPackage = function (entityOrId) {
            return this.applicationService.detail(entityOrId);
        };
        ApplicationPropertiesComponent.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.ecosystemService.deleteApp(this.application)];
                        case 1:
                            _a.sent();
                            if (this.application.type === client.ApplicationType.MICROSERVICE) {
                                this.router.navigateByUrl(MICROSERVICES_BASE_PATH);
                            }
                            else {
                                this.router.navigateByUrl(APPLICATIONS_BASE_PATH);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.subscribe = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.subscribeApp(this.application)];
                        case 1:
                            _a.sent();
                            this.loadApplication();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.unsubscribe = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.unsubscribeApp(this.application)];
                        case 1:
                            _a.sent();
                            this.loadApplication();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.loadApplication = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            id = this.activatedRoute.snapshot.parent.data.contextData.id;
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.getApplication(id)];
                        case 1:
                            _a.application = _e.sent();
                            if (this.application.type === client.ApplicationType.MICROSERVICE) {
                                this.formGroup.get('name').disable();
                            }
                            this.formGroup.patchValue(Object.assign({}, this.application));
                            this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.application);
                            _b = this;
                            _c = this.canOpenInBrowser;
                            if (!_c) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.ecosystemService.isOverwrittenByCustomApp(this.application)];
                        case 2:
                            _c = (_e.sent());
                            _e.label = 3;
                        case 3:
                            _b.disableOpenInBrowser = _c;
                            this.canDelete = this.ecosystemService.canDeleteApp(this.application);
                            this.isOwner = this.ecosystemService.isOwner(this.application);
                            this.isActivityLogSupported = this.isActivityLogSupportedByApp(this.application);
                            this.isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
                            _d = this;
                            return [4 /*yield*/, this.ecosystemService.checkIfSubscribed(this.application)];
                        case 4:
                            _d.isSubscribed = _e.sent();
                            this.onApplication(this.application);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.save = function (app) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            app.id = this.application.id;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.ecosystemService.updateApp(app)];
                        case 2:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Application saved.'));
                            this.formGroup.reset();
                            this.loadApplication();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.onNewArchive = function () {
            this.loadBinaryMo();
        };
        ApplicationPropertiesComponent.prototype.resolveSourcePackage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.getPackage(this.application.manifest.source)];
                        case 1:
                            _a.package = (_b.sent()).data;
                            if (this.package) {
                                this.packageProperties.push({
                                    label: ngxComponents.gettext('Source package'),
                                    value: this.package.name,
                                    type: 'link',
                                    action: function () { return _this.router.navigateByUrl(ngxComponents.ViewContext.Application.replace(':id', _this.package.id.toString())); }
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationPropertiesComponent.prototype.initForm = function () {
            this.formGroup = this.formBuilder.group({
                id: [{ value: '' }],
                name: [forms.Validators.required, forms.Validators.maxLength(120)],
                key: [forms.Validators.required, forms.Validators.maxLength(120)],
                contextPath: [forms.Validators.required, forms.Validators.maxLength(120)],
                description: ['', forms.Validators.maxLength(200)],
                resourcesUrl: [forms.Validators.required],
                username: [forms.Validators.required],
                password: [forms.Validators.required],
                externalUrl: [forms.Validators.required]
            });
        };
        ApplicationPropertiesComponent.prototype.isActivityLogSupportedByApp = function (app) {
            return (this.ecosystemService.isOwner(app) &&
                app.type !== client.ApplicationType.MICROSERVICE &&
                app.type !== client.ApplicationType.EXTERNAL);
        };
        ApplicationPropertiesComponent.prototype.setBreadcrumbConifg = function () {
            this.breadcrumbConfig = {
                icon: this.isMicroservice ? 'microchip' : this.isFeature ? 'tab' : 'c8y-modules',
                label: this.isMicroservice
                    ? ngxComponents.gettext('Microservices')
                    : this.isFeature
                        ? ngxComponents.gettext('Features')
                        : ngxComponents.gettext('All applications'),
                path: this.isMicroservice
                    ? 'microservices'
                    : this.isFeature
                        ? 'ecosystem/features'
                        : 'ecosystem/applications'
            };
        };
        ApplicationPropertiesComponent.prototype.loadBinaryMo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.inventoryService.detail(this.application.activeVersionId)];
                        case 1:
                            _a.binaryMo = (_b.sent()).data;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ApplicationPropertiesComponent;
    }());
    ApplicationPropertiesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-application-properties',
                    template: "<c8y-title>{{ application | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb *ngIf=\"!isMicroservice\">\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumbConfig?.icon\"\n    [label]=\"breadcrumbConfig?.label\"\n    [path]=\"breadcrumbConfig?.path\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Properties' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-breadcrumb *ngIf=\"isMicroservice\">\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumbConfig?.icon\"\n    [label]=\"breadcrumbConfig?.label\"\n    [path]=\"breadcrumbConfig?.path\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Properties' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"row\">\n  <div [ngClass]=\"{ 'col-md-8': !isActivityLogSupported, 'col-md-12': isActivityLogSupported }\">\n    <div\n      *ngIf=\"application\"\n      [ngClass]=\"{ 'd-grid grid__col--7-5--md': isActivityLogSupported }\"\n      class=\"card content-fullpage\"\n    >\n      <form\n        (ngSubmit)=\"formGroup.valid && save(formGroup.value)\"\n        [formGroup]=\"formGroup\"\n        class=\"d-flex d-col content-fullpage\"\n        novalidate\n      >\n        <div *ngIf=\"!isLoading\" class=\"d-contents\">\n          <div class=\"card-block separator-bottom large-padding flex-no-shrink\">\n            <div class=\"d-flex-md a-i-start text-center text-left-md\">\n              <c8y-app-icon\n                *ngIf=\"!isPackage && !isFeature && !isMicroservice && !isExternal\"\n                [app]=\"application\"\n                [contextPath]=\"application.contextPath\"\n                [name]=\"application.name\"\n                class=\"icon-48\"\n              ></c8y-app-icon>\n              <i *ngIf=\"isPackage\" c8yIcon=\"big-parcel\" class=\"icon-48\"></i>\n              <i *ngIf=\"isFeature\" c8yIcon=\"tab\" class=\"icon-48\"></i>\n              <i *ngIf=\"isMicroservice\" c8yIcon=\"microchip\" class=\"icon-48\"></i>\n              <i *ngIf=\"isExternal\" c8yIcon=\"globe1\" class=\"icon-48\"></i>\n\n              <div class=\"p-t-md-16 p-l-md-16 p-r-md-32 flex-grow\">\n                <h4 class=\"text-medium m-b-8\">{{ application | humanizeAppName | async }}</h4>\n                <p *ngIf=\"!isOwner\">\n                  <em class=\"text-muted\">\n                    {{ application.description || ('No description available.' | translate) }}\n                  </em>\n                </p>\n                <div *ngIf=\"isOwner\" class=\"form-group m-b-0\">\n                  <label\n                    [ngClass]=\"{ updated: formGroup?.controls?.description?.dirty }\"\n                    class=\"editable\"\n                  >\n                    <textarea\n                      c8y-textarea-autoresize\n                      class=\"form-control no-resize\"\n                      formControlName=\"description\"\n                      name=\"description\"\n                      placeholder=\"{{ 'No description available.' | translate }}\"\n                    ></textarea>\n                  </label>\n                </div>\n              </div>\n              <div class=\"text-right-md m-t-4\">\n                <span [ngClass]=\"appState?.class\" class=\"label\">{{\n                  appState?.label | translate\n                }}</span>\n                <div\n                  *ngIf=\"application.manifest?.version && (isPackage || isMicroservice)\"\n                  class=\"fit-w m-t-2\"\n                >\n                  <label class=\"text-label-small\" translate>Version:</label>\n                  <small class=\"p-l-4 text-bold\">{{ application.manifest?.version }}</small>\n                </div>\n                <div *ngIf=\"binaryMo?.creationTime\" class=\"fit-w m-t-2\">\n                  <label class=\"text-label-small\" translate>Creation time:</label>\n                  <small class=\"p-l-4 text-bold\">{{ binaryMo?.creationTime | c8yDate }}</small>\n                </div>\n                <div class=\"m-t-8\">\n                  <button\n                    (click)=\"openApp(application); $event.stopPropagation()\"\n                    [disabled]=\"disableOpenInBrowser\"\n                    *ngIf=\"canOpenInBrowser\"\n                    class=\"btn btn-default btn-xs\"\n                    title=\"{{ 'Open' | translate }}\"\n                  >\n                    <i [c8yIcon]=\"'external-link'\"></i>\n                    {{ 'Open' | translate }}\n                  </button>\n                  <div *ngIf=\"canOpenInBrowser && disableOpenInBrowser\">\n                    <small class=\"text-muted\" translate\n                      >The application is overwritten by a custom application sharing the same\n                      path</small\n                    >\n                  </div>\n                  <span *ngIf=\"isCustomMicroservice\">\n                    <button\n                      (click)=\"subscribe()\"\n                      *ngIf=\"!isSubscribed\"\n                      class=\"btn btn-default btn-xs\"\n                      title=\"{{ 'Subscribe' | translate }}\"\n                    >\n                      <i [c8yIcon]=\"'check-circle-o'\"></i>\n                      {{ 'Subscribe' | translate }}\n                    </button>\n                    <button\n                      (click)=\"unsubscribe()\"\n                      *ngIf=\"isSubscribed\"\n                      class=\"btn btn-default btn-xs\"\n                      title=\"{{ 'Unsubscribe' | translate }}\"\n                    >\n                      <i [c8yIcon]=\"'minus-circle'\"></i>\n                      {{ 'Unsubscribe' | translate }}\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"inner-scroll bg-white flex-grow\">\n            <div class=\"card-block large-padding\">\n              <div *ngIf=\"isPackage\" class=\"row p-16\">\n                <c8y-properties-list\n                  [data]=\"application.manifest\"\n                  [properties]=\"packageProperties\"\n                  [title]=\"'Package details' | translate\"\n                  icon=\"info\"\n                ></c8y-properties-list>\n              </div>\n              <div *ngIf=\"package\" class=\"row p-16\">\n                <c8y-properties-list\n                  [data]=\"package.manifest\"\n                  [properties]=\"packageProperties\"\n                  [title]=\"'Source package information' | translate\"\n                  icon=\"info\"\n                ></c8y-properties-list>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-sm-5\">\n                  <c8y-form-group>\n                    <label>ID</label>\n                    <input\n                      [readonly]=\"true\"\n                      autocomplete=\"off\"\n                      class=\"form-control\"\n                      formControlName=\"id\"\n                      name=\"id\"\n                      type=\"text\"\n                    />\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-7\">\n                  <c8y-form-group>\n                    <label>{{ 'Name' | translate }}</label>\n                    <input\n                      [readonly]=\"!isOwner\"\n                      class=\"form-control\"\n                      formControlName=\"name\"\n                      name=\"name\"\n                      placeholder=\"{{ 'e.g. My application' | translate }}\"\n                      required\n                      type=\"text\"\n                    />\n                    <c8y-messages>\n                      <c8y-message *ngIf=\"formGroup?.controls?.name?.errors?.required\" translate>\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-sm-5\">\n                  <c8y-form-group>\n                    <label>{{ 'Application key' | translate }}</label>\n                    <input\n                      [readonly]=\"application.id || !isOwner\"\n                      class=\"form-control\"\n                      name=\"key\"\n                      formControlName=\"key\"\n                      placeholder=\"{{ 'e.g. my-application-key' | translate }}\"\n                      required\n                      type=\"text\"\n                    />\n                    <c8y-messages>\n                      <c8y-message *ngIf=\"formGroup?.controls?.key?.errors?.required\" translate>\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-7\">\n                  <c8y-form-group>\n                    <label>{{ 'Type' | translate }}</label>\n                    <div>\n                      <div *ngIf=\"application.id\">\n                        <p class=\"form-control-static\">\n                          <i [c8yIcon]=\"iconMap[application.type]\"></i>\n                          <span>\n                            {{ application.type | translate }}\n                          </span>\n                        </p>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div [ngSwitch]=\"application.type\">\n                <div *ngSwitchCase=\"'HOSTED'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\">/apps/</span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                        formControlName=\"contextPath\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n\n                <div *ngSwitchCase=\"'MICROSERVICE'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\">/service/</span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-microservice`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                        formControlName=\"contextPath\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                  <div class=\"row\">\n                    <div *ngIf=\"application.manifest.version\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Version' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        {{ application.manifest.version }}\n                      </p>\n                    </div>\n                    <div *ngIf=\"application.manifest.isolation\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Isolation' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        <span *ngIf=\"singleTenant\">\n                          <i [c8yIcon]=\"'c8y-enterprise'\" class=\"c8y-icon-duocolor h4\"></i>\n                          {{ 'Single tenant' | translate }}\n                        </span>\n                        <span *ngIf=\"!singleTenant\">\n                          <i [c8yIcon]=\"'c8y-sub-tenants'\" class=\"c8y-icon-duocolor h4\"></i>\n                          {{ 'Multi tenant' | translate }}\n                        </span>\n                      </p>\n                    </div>\n                    <div *ngIf=\"application.manifest.isolation\" class=\"col-sm-4 m-b-16 flex-auto\">\n                      <label>{{ 'Billing mode' | translate }}</label>\n                      <p class=\"form-control-static\">\n                        <span\n                          *ngIf=\"subscription\"\n                          [tooltip]=\"'Resources usage assigned to: Owner' | translate\"\n                        >\n                          {{ 'Subscription' | translate }}\n                        </span>\n                        <span\n                          *ngIf=\"!subscription && singleTenant\"\n                          [tooltip]=\"'Resources usage assigned to: Subscriber | translate'\"\n                        >\n                          {{ 'Resources' | translate }}\n                        </span>\n                        <span\n                          *ngIf=\"!subscription && !singleTenant\"\n                          [tooltip]=\"'Resources usage assigned to: Owner' | translate\"\n                        >\n                          {{ 'Resources' | translate }}\n                        </span>\n                      </p>\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"application.manifest.provider\" class=\"legend form-block m-t-40\">\n                    {{ 'Provider' | translate }}\n                  </div>\n                  <div class=\"list-inline\" *ngIf=\"application.manifest.provider\">\n                    <div *ngIf=\"application.manifest.provider.name\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Name' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.name }}\n                        </p>\n                      </div>\n                    </div>\n                    <div *ngIf=\"application.manifest.provider.domain\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Domain' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.domain }}\n                        </p>\n                      </div>\n                    </div>\n                    <div *ngIf=\"application.manifest.provider.support\">\n                      <div class=\"col-sm-4 m-b-16\">\n                        <label>{{ 'Support' | translate }}</label>\n                        <p class=\"form-control-static\">\n                          {{ application.manifest.provider.support }}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div *ngSwitchCase=\"'REPOSITORY'\">\n                  <c8y-form-group>\n                    <label>{{ 'Path' | translate }}</label>\n                    <div class=\"input-group\">\n                      <span class=\"input-group-addon\"> /apps/ </span>\n                      <input\n                        [readOnly]=\"application.id || !isOwner\"\n                        class=\"form-control\"\n                        formControlName=\"contextPath\"\n                        name=\"contextPath\"\n                        placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                        required\n                        type=\"text\"\n                      />\n                    </div>\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.contextPath?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n\n                  <c8y-form-group>\n                    <label>{{ 'Server URL' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      name=\"resourcesUrl\"\n                      formControlName=\"resourcesUrl\"\n                      placeholder=\"{{ 'e.g. my-application`used in URL`' | translate }}\"\n                      required\n                      type=\"url\"\n                    />\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.resourcesUrl?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n\n                  <div class=\"form-group\">\n                    <label> {{ 'Username' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      formControlName=\"username\"\n                      name=\"username\"\n                      type=\"text\"\n                    />\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label>{{ 'Password' | translate }}</label>\n                    <input\n                      class=\"form-control\"\n                      formControlName=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                    />\n                  </div>\n                </div>\n\n                <div *ngSwitchCase=\"'EXTERNAL'\">\n                  <c8y-form-group>\n                    <label>{{ 'External URL' | translate }}</label>\n                    <input\n                      [pattern]=\"'^(?!javascript:).+'\"\n                      [readOnly]=\"!isOwner\"\n                      class=\"form-control\"\n                      formControlName=\"externalUrl\"\n                      name=\"externalUrl\"\n                      placeholder=\"{{ 'e.g.' | translate }} http://www.example.com/\"\n                      required\n                      type=\"url\"\n                    />\n                    <c8y-messages>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.externalUrl?.errors?.required\"\n                        translate\n                      >\n                        This field is required.\n                      </c8y-message>\n                      <c8y-message\n                        *ngIf=\"formGroup?.controls?.externalUrl?.errors?.pattern\"\n                        translate\n                      >\n                        Valid URL required.\n                      </c8y-message>\n                    </c8y-messages>\n                  </c8y-form-group>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ng-container *ngIf=\"isCustomMicroservice\">\n            <div *ngIf=\"!isLoading\" class=\"d-contents\">\n              <c8y-upload-archive\n                [(application)]=\"application\"\n                (refresh)=\"onNewArchive()\"\n              ></c8y-upload-archive>\n            </div>\n          </ng-container>\n          <div *ngIf=\"application && !!isOwner\" class=\"card-footer separator\">\n            <button\n              (click)=\"cancel()\"\n              class=\"btn btn-default\"\n              title=\"{{ 'Cancel' | translate }}\"\n              type=\"button\"\n            >\n              {{ 'Cancel' | translate }}\n            </button>\n            <button\n              (click)=\"delete()\"\n              *ngIf=\"canDelete\"\n              class=\"btn btn-danger\"\n              title=\"{{ 'Delete' | translate }}\"\n              type=\"button\"\n            >\n              {{ 'Delete' | translate }}\n            </button>\n            <button\n              [disabled]=\"!application.type || formGroup.invalid || formGroup.pristine\"\n              class=\"btn btn-primary btn-form\"\n              title=\"{{ 'Save' | translate }}\"\n              type=\"submit\"\n            >\n              {{ 'Save' | translate }}\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div *ngIf=\"isActivityLogSupported\" class=\"content-fullpage d-flex d-col bg-gray-white\">\n        <div class=\"card-header separator\">\n          <h4 class=\"card-title\" translate>Activity log</h4>\n          <div class=\"m-l-auto\">\n            <button\n              (click)=\"load()\"\n              class=\"btn btn-link\"\n              title=\"{{ 'Reload' | translate }}\"\n              type=\"button\"\n            >\n              <i [ngClass]=\"{ 'icon-spin': isLoading }\" c8yIcon=\"refresh\"></i>\n              {{ 'Reload' | translate }}\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"isLoading\" class=\"p-16 text-center\">\n          <c8y-loading></c8y-loading>\n        </div>\n        <c8y-activity-log\n          *ngIf=\"!isLoading\"\n          [application]=\"application\"\n          class=\"d-contents\"\n        ></c8y-activity-log>\n      </div>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    ApplicationPropertiesComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: EcosystemService },
        { type: router.Router },
        { type: forms.FormBuilder },
        { type: client.ApplicationService },
        { type: ngxComponents.AlertService },
        { type: client.InventoryService }
    ]; };

    var EcosystemNavigationFactory = /** @class */ (function () {
        function EcosystemNavigationFactory(permissions) {
            this.permissions = permissions;
            this.navs = [];
            this.showNavigatorNodes = this.permissions.hasAnyRole([
                'ROLE_APPLICATION_MANAGEMENT_READ',
                'ROLE_APPLICATION_MANAGEMENT_ADMIN'
            ]);
        }
        EcosystemNavigationFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    /*
                    The NavigatorNodes are added in AngularJS code to keep the Quick links widget working.
                    After the Quick links widget is migrated to Angular, the logic of adding the NavigatorNodes can be migrated as well.
                        if (this.navs.length === 0 && this.showNavigatorNodes) {
                          const applicationsNode: NavigatorNode = new NavigatorNode({
                            label: gettext('Applications'),
                            icon: 'c8y-modules',
                            path: '/ecosystem',
                            priority: 300,
                            routerLinkExact: false
                          });
                    
                          const microservicesNode = new NavigatorNode({
                            label: gettext('Microservices'),
                            icon: 'microchip',
                            path: '/microservices',
                            priority: 200,
                            routerLinkExact: false
                          });
                    
                          this.navs.push(
                            new NavigatorNode({
                              label: gettext('Ecosystem'),
                              icon: 'c8y-atom',
                              priority: 3200,
                              children: [applicationsNode, microservicesNode]
                            })
                          );
                        }
                    */
                    return [2 /*return*/, this.navs];
                });
            });
        };
        return EcosystemNavigationFactory;
    }());
    EcosystemNavigationFactory.decorators = [
        { type: core.Injectable }
    ];
    EcosystemNavigationFactory.ctorParameters = function () { return [
        { type: ngxComponents.Permissions }
    ]; };

    var EcosystemGuard = /** @class */ (function () {
        function EcosystemGuard(optionsService) {
            this.optionsService = optionsService;
        }
        EcosystemGuard.prototype.canActivate = function (route, state) {
            return this.isFeatureEnabled();
        };
        EcosystemGuard.prototype.isFeatureEnabled = function () {
            return Boolean(this.optionsService.get('beta', false));
        };
        return EcosystemGuard;
    }());
    EcosystemGuard.decorators = [
        { type: core.Injectable }
    ];
    EcosystemGuard.ctorParameters = function () { return [
        { type: ngxComponents.OptionsService }
    ]; };

    var EcosystemTabs = /** @class */ (function () {
        function EcosystemTabs(router, ecosystemGuard) {
            this.router = router;
            this.ecosystemGuard = ecosystemGuard;
        }
        EcosystemTabs.prototype.get = function () {
            var tabs = [];
            if (this.router.url === '/ecosystem/applications' ||
                this.router.url === '/ecosystem/package-list' ||
                this.router.url === '/ecosystem/features') {
                tabs.push({
                    icon: 'c8y-modules',
                    priority: 1000,
                    label: ngxComponents.gettext('All applications'),
                    path: 'ecosystem/applications'
                });
                if (this.ecosystemGuard.isFeatureEnabled()) {
                    tabs.push({
                        icon: 'big-parcel',
                        priority: 999,
                        label: ngxComponents.gettext('Packages'),
                        path: 'ecosystem/package-list'
                    });
                }
                tabs.push({
                    icon: 'tab',
                    priority: 998,
                    label: ngxComponents.gettext('Features'),
                    path: '/ecosystem/features'
                });
            }
            return tabs;
        };
        return EcosystemTabs;
    }());
    EcosystemTabs.decorators = [
        { type: core.Injectable }
    ];
    EcosystemTabs.ctorParameters = function () { return [
        { type: router.Router },
        { type: EcosystemGuard }
    ]; };

    var MicroserviceListComponent = /** @class */ (function () {
        function MicroserviceListComponent(ecosystemService, wizardService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.wizardService = wizardService;
            this.reloading = false;
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.microservices$ = this.reload$.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.ecosystemService.getMicroservices(); }), operators.tap(function () { return (_this.reloading = false); }), operators.shareReplay());
            this.isMicroserviceHostingAllowed$ = this.reload$.pipe(operators.switchMap(function () { return _this.ecosystemService.isMicroserviceHostingAllowed(); }), operators.shareReplay());
        }
        MicroserviceListComponent.prototype.ngOnInit = function () {
            this.loadMicroservices();
        };
        MicroserviceListComponent.prototype.loadMicroservices = function () {
            this.reload$.next();
        };
        MicroserviceListComponent.prototype.addMicroservice = function () {
            var _this = this;
            var initialState = {
                id: 'uploadMicroservice'
            };
            var modalOptions = { initialState: initialState };
            var modalRef = this.wizardService.show(modalOptions);
            modalRef.content.onClose.subscribe(function () {
                _this.loadMicroservices();
            });
        };
        return MicroserviceListComponent;
    }());
    MicroserviceListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-microservice-list',
                    template: "<c8y-title>{{ 'Microservices' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'microchip'\"\n    [label]=\"'Microservices' | translate\"\n    [path]=\"'microservices'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"100\"\n  *ngIf=\"isMicroserviceHostingAllowed$ | async\"\n>\n  <button\n    (click)=\"addMicroservice()\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add microservice' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add microservice' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"reload$.next()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(microservices$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(microservices$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No microservices to display.</h3>\n  <p translate>Add your first microservice by clicking below.</p>\n  <p>\n    <button\n      (click)=\"addMicroservice()\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add microservice' | translate }}\"\n    >\n      {{ 'Add microservice' | translate }}\n    </button>\n  </p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div\n    class=\"page-sticky-header hidden-xs flex-row\"\n    *ngIf=\"(microservices$ | async)?.length > 0\"\n  >\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Microservice' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div\n    *ngFor=\"let microservice of microservices$ | async\"\n    class=\"col-xs-12 col-sm-4 col-md-3\"\n  >\n    <c8y-application-card\n      (onAppDeleted)=\"loadMicroservices()\"\n      [app]=\"microservice\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
                },] }
    ];
    MicroserviceListComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.WizardService }
    ]; };

    var PackagesListComponent = /** @class */ (function () {
        function PackagesListComponent(ecosystemService, wizardService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.wizardService = wizardService;
            this.reloading = false;
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.packages$ = this.reload$.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.ecosystemService.getPackageApplications(); }), operators.tap(function () { return (_this.reloading = false); }), operators.shareReplay());
        }
        PackagesListComponent.prototype.ngOnInit = function () {
            this.loadPackages();
        };
        PackagesListComponent.prototype.loadPackages = function () {
            this.reload$.next();
        };
        PackagesListComponent.prototype.addPackage = function () {
            var _this = this;
            var initialState = {
                id: 'uploadPackage'
            };
            var modalOptions = { initialState: initialState };
            var modalRef = this.wizardService.show(modalOptions);
            modalRef.content.onClose.subscribe(function () {
                _this.loadPackages();
            });
        };
        return PackagesListComponent;
    }());
    PackagesListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-packages-list',
                    template: "<c8y-title>{{ 'Packages' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'big-parcel'\" [label]=\"'Packages' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"addPackage()\" class=\"btn btn-link\" title=\"{{ 'Add package' | translate }}\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add package' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"loadPackages()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(packages$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(packages$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Package' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let app of packages$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      (onAppDeleted)=\"loadPackages()\"\n      [app]=\"app\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n  <div *ngIf=\"(packages$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n    <h1 c8yIcon=\"big-parcel\" class=\"c8y-icon-duocolor\"></h1>\n    <h3 translate>No packages to display.</h3>\n    <p translate>Add your first package by clicking below.</p>\n    <p>\n      <button\n        (click)=\"addPackage()\"\n        class=\"btn btn-primary\"\n        title=\"{{ 'Add package' | translate }}\"\n      >\n        {{ 'Add package' | translate }}\n      </button>\n    </p>\n  </div>\n</div>\n"
                },] }
    ];
    PackagesListComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.WizardService }
    ]; };

    var AddPackageComponent = /** @class */ (function () {
        function AddPackageComponent(ecosystemService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.headerText = ngxComponents.gettext('Add package');
            this.successText = ngxComponents.gettext('Package created');
            this.createPackageAppHandler = function (f) { return _this.createPackageApp(f); };
            this.uploadPackageHandler = function (f, app) { return _this.uploadPackage(f, app); };
        }
        AddPackageComponent.prototype.createPackageApp = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.ecosystemService.isValidAppType(file, client.ApplicationType.HOSTED)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.ecosystemService.createAppForArchive(file, true)];
                    }
                });
            });
        };
        AddPackageComponent.prototype.uploadPackage = function (file, pckg) {
            return this.ecosystemService.uploadArchiveToApp(file, pckg);
        };
        return AddPackageComponent;
    }());
    AddPackageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-package',
                    template: "<c8y-add-application\n    [headerText]=\"headerText\"\n    [headerIcon]=\"'big-parcel'\"\n    [successText]=\"successText\"\n    [createApplicationHandler]=\"createPackageAppHandler\"\n    [uploadApplicationHandler]=\"uploadPackageHandler\"\n  ></c8y-add-application>"
                },] }
    ];
    AddPackageComponent.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var PackageDetailsComponent = /** @class */ (function () {
        function PackageDetailsComponent(activatedRoute, client, wizard, ecosystemService) {
            this.activatedRoute = activatedRoute;
            this.client = client;
            this.wizard = wizard;
            this.ecosystemService = ecosystemService;
            this.package = {};
            this.packageProperties = packageProperties;
            this.headers = { 'Content-Type': 'text/markdown', responseType: 'blob' };
            this.NOT_FOUND_ERROR_CODE = 404;
        }
        PackageDetailsComponent.prototype.ngOnInit = function () {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            this.package = this.getPackage();
                            this.name = (_a = this.package) === null || _a === void 0 ? void 0 : _a.name;
                            this.description = (_c = (_b = this.package) === null || _b === void 0 ? void 0 : _b.manifest) === null || _c === void 0 ? void 0 : _c.description;
                            _e = this;
                            return [4 /*yield*/, this.getReadmeFileContentAsHtml()];
                        case 1:
                            _e.readme = _f.sent();
                            this.appState = this.ecosystemService.getAppState(this.package);
                            this.isApplicationPackage = this.ecosystemService.isApplicationPackage(this.package);
                            return [2 /*return*/];
                    }
                });
            });
        };
        PackageDetailsComponent.prototype.deploy = function () {
            var initialState = {
                wizardConfig: {},
                id: 'deployPackage',
                package: this.package
            };
            var modalOptions = { initialState: initialState };
            this.wizard.show(modalOptions);
        };
        PackageDetailsComponent.prototype.getPackage = function () {
            var _a, _b, _c, _d;
            return (_d = (_c = (_b = (_a = this.activatedRoute) === null || _a === void 0 ? void 0 : _a.snapshot) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.contextData;
        };
        PackageDetailsComponent.prototype.getReadmeFileContentAsHtml = function () {
            return __awaiter(this, void 0, void 0, function () {
                var readmeFile, readmeContent, tokens, html;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0: return [4 /*yield*/, this.getReadmeFile()];
                        case 1:
                            readmeFile = _e.sent();
                            return [4 /*yield*/, readmeFile.text()];
                        case 2:
                            readmeContent = _e.sent();
                            if (readmeFile.status === 200) {
                                tokens = marked.lexer(readmeContent);
                                html = marked.parser(tokens);
                                return [2 /*return*/, html];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        PackageDetailsComponent.prototype.getReadmeFile = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, options;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            options = {
                                method: 'GET',
                                headers: this.headers
                            };
                            return [4 /*yield*/, this.client.fetch("/apps/" + this.package.contextPath + "/readme.md", options)];
                        case 1:
                            result = _e.sent();
                            if (!(result && result.status === this.NOT_FOUND_ERROR_CODE)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.client.fetch("/apps/" + this.package.contextPath + "/README.md", options)];
                        case 2:
                            result = _e.sent();
                            _e.label = 3;
                        case 3: return [2 /*return*/, result];
                    }
                });
            });
        };
        return PackageDetailsComponent;
    }());
    PackageDetailsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-package-details',
                    template: "<c8y-title>{{ name | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'big-parcel'\"\n    [label]=\"'Packages' | translate\"\n    [path]=\"'ecosystem/package-list'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"name | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Info' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"card content-fullpage d-grid grid__col--8-4--md grid__row--fit-auto\">\n  <div class=\"bg-gray-white grid__col--fullspan separator-bottom\">\n    <div class=\"card-block p-t-24 p-b-24 large-padding\">\n      <div class=\"content-flex-70\">\n        <div class=\"text-center\">\n          <i c8yIcon=\"big-parcel\" class=\"c8y-icon-duocolor icon-48\"></i>\n          <p>\n            <span [ngClass]=\"appState?.class\" class=\"label\">{{ appState?.label | translate }}</span>\n          </p>\n        </div>\n\n        <div class=\"flex-grow col-10\">\n          <div class=\"content-flex-80\">\n            <div class=\"col-5\">\n              <h4 class=\"card-title text-bold m-b-8\">{{ name | humanizeAppName | async }}</h4>\n              <p *ngIf=\"description\">{{ description }}</p>\n              <p *ngIf=\"!description\" class=\"text-muted\">\n                <em>{{ 'No description available.' | translate }}</em>\n              </p>\n            </div>\n            <div *ngIf=\"isApplicationPackage\" class=\"col-3 text-right-md\">\n              <button (click)=\"deploy()\" class=\"btn btn-primary btn-xs\">\n                <i c8yIcon=\"output\" class=\"m-r-4\"></i>\n                {{ 'Deploy application' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-grow\">\n              <c8y-properties-list\n                [data]=\"package.manifest\"\n                [emptyLabel]=\"'--'\"\n                [icon]=\"'info-circle'\"\n                [properties]=\"packageProperties\"\n                [title]=\"'Package info' | translate\"\n              ></c8y-properties-list>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <div class=\"card-header separator sticky-top\">\n      <h4 class=\"card-title\">{{ 'Package overview' | translate }}</h4>\n    </div>\n    <div class=\"card-block p-l-16 p-r-16\">\n      <div *ngIf=\"!readme\" class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"user-manual\" class=\"c8y-icon-duocolor\"></h1>\n        <div>\n          <h3 translate>No README.md found.</h3>\n          <p class=\"m-r-8\" translate>\n            To view the contents of \"README\", add the file \"README.md\" to the package.\n          </p>\n        </div>\n      </div>\n\n      <div [innerHTML]=\"readme\" class=\"markdown-content\"></div>\n    </div>\n    <div class=\"separator-bottom visible-sm visible-xs\"></div>\n  </div>\n\n  <div class=\"inner-scroll\">\n    <div class=\"card-header separator sticky-top\">\n      <h4 class=\"card-title\">{{ 'Package plugins' | translate }}</h4>\n    </div>\n    <div class=\"card-block\">\n      <!-- empty state -->\n      <div *ngIf=\"true\" class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"plugin\"></h1>\n        <div>\n          <h3 translate>No plugins to display.</h3>\n          <p class=\"m-r-8\" translate>\n           This package doesn't contain plugins.\n          </p>\n        </div>\n      </div>\n\n      <!-- TODO: display the included plugins list -->\n    </div>\n  </div>\n</div>\n\n"
                },] }
    ];
    PackageDetailsComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: client.FetchClient },
        { type: ngxComponents.WizardService },
        { type: EcosystemService }
    ]; };

    var DeployApplicationComponent = /** @class */ (function () {
        function DeployApplicationComponent(ecosystemService, applicationService, wizardComponent, translate) {
            this.ecosystemService = ecosystemService;
            this.applicationService = applicationService;
            this.wizardComponent = wizardComponent;
            this.translate = translate;
            this.inProgress = true;
            this.isDeployed = false;
            this.deployedWithSuccess = false;
            this.descriptionTemplate = ngxComponents.gettext('Deploy application using "{{ packageName }}" package');
        }
        DeployApplicationComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var apps;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.package = this.wizardComponent.package;
                            return [4 /*yield*/, this.ecosystemService.getApplications()];
                        case 1:
                            apps = (_a.sent()).data;
                            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.package, apps);
                            this.headerText = this.getHeaderText();
                            this.inProgress = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeployApplicationComponent.prototype.deployApp = function () {
            return __awaiter(this, void 0, void 0, function () {
                var formGroupValue, clonedPkg, config, updatedApp, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
                            this.inProgress = true;
                            return [4 /*yield*/, this.applicationService.clone(this.package)];
                        case 1:
                            clonedPkg = (_a.sent()).data;
                            config = this.ecosystemService.createConfig(clonedPkg, formGroupValue);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 6, , 8]);
                            return [4 /*yield*/, this.ecosystemService.updateApp(config, true)];
                        case 3:
                            updatedApp = (_a.sent()).data;
                            if (!updatedApp) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.ecosystemService.updateAppManifest(updatedApp, this.package)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.deployedWithSuccess = true;
                            return [3 /*break*/, 8];
                        case 6:
                            error_1 = _a.sent();
                            this.markAsDeployed();
                            return [4 /*yield*/, this.applicationService.delete(clonedPkg.id)];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 8:
                            this.markAsDeployed();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeployApplicationComponent.prototype.cancel = function () {
            this.wizardComponent.close();
        };
        DeployApplicationComponent.prototype.markAsDeployed = function () {
            this.isDeployed = true;
            this.inProgress = false;
        };
        DeployApplicationComponent.prototype.getHeaderText = function () {
            return this.translate.instant(this.descriptionTemplate, {
                packageName: this.package.name
            });
        };
        return DeployApplicationComponent;
    }());
    DeployApplicationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-deploy-application',
                    template: "<c8y-wizard-header>\n  <div class=\"modal-header dialog-header\">\n    <h1 c8yIcon=\"output\"></h1>\n    <h4>{{ 'Deploy application' | translate }}</h4>\n  </div>\n</c8y-wizard-header>\n\n<c8y-wizard-body>\n  <ng-container *ngIf=\"!isDeployed\">\n    <div class=\"fadeIn animated d-flex a-i-center j-c-center d-col\" style=\"min-height: 309px\">\n      <p\n        class=\"bg-white fit-w p-16 text-center text-medium sticky-top bg-white separator-bottom\"\n        *ngIf=\"!inProgress\"\n      >\n        {{ headerText | translate }}\n      </p>\n      <c8y-application-properties-form\n        *ngIf=\"!inProgress\"\n        [application]=\"newAppConfig\"\n        class=\"d-block fit-w bg-gray-white\"\n      ></c8y-application-properties-form>\n\n      <c8y-progress-bar\n        *ngIf=\"inProgress\"\n        [message]=\"'Deploying\u2026' | translate\"\n        class=\"text-center\"\n      ></c8y-progress-bar>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDeployed\">\n    <div\n      *ngIf=\"deployedWithSuccess; else failedDeploy\"\n      class=\"modal-body fadeIn animated\"\n      style=\"min-height: 309px\"\n    >\n      <div class=\"d-flex a-i-center j-c-center d-col\">\n        <c8y-operation-result\n          type=\"success\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          text=\"{{ 'Application' | translate }} {{ package.name }} {{ 'created' | translate }}\"\n          class=\"lead d-block m-b-16\"\n        ></c8y-operation-result>\n      </div>\n    </div>\n    <ng-template #failedDeploy>\n      <div class=\"modal-body fadeIn animated text-center\" style=\"min-height: 257px\">\n        <c8y-operation-result\n          type=\"error\"\n          [size]=\"84\"\n          [vertical]=\"true\"\n          text=\"{{ 'Application creation failed' | translate }}\"\n          class=\"lead\"\n        ></c8y-operation-result>\n      </div>\n    </ng-template>\n  </ng-container>\n</c8y-wizard-body>\n\n<c8y-wizard-footer>\n  <button\n    (click)=\"cancel()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ isDeployed && deployedWithSuccess ? 'Done' : ('Cancel' | translate) }}\"\n  >\n    {{ isDeployed && deployedWithSuccess ? 'Done' : ('Cancel' | translate) }}\n  </button>\n\n  <button\n    (click)=\"deployApp()\"\n    *ngIf=\"!isDeployed\"\n    [disabled]=\"inProgress\"\n    [ngClass]=\"{ 'btn-pending': inProgress }\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Deploy' | translate }}\"\n  >\n    {{ 'Deploy' | translate }}\n  </button>\n</c8y-wizard-footer>\n"
                },] }
    ];
    DeployApplicationComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: client.ApplicationService },
        { type: ngxComponents.WizardComponent },
        { type: core$1.TranslateService }
    ]; };
    DeployApplicationComponent.propDecorators = {
        applicationPropertiesForm: [{ type: core.ViewChild, args: [ApplicationPropertiesFormComponent,] }]
    };

    var AddApplicationComponent = /** @class */ (function () {
        function AddApplicationComponent(ecosystemService, alertService, applicationService, wizardComponent) {
            this.ecosystemService = ecosystemService;
            this.alertService = alertService;
            this.applicationService = applicationService;
            this.wizardComponent = wizardComponent;
            this.canGoBack = false;
            this.canOpenInBrowser = false;
            this.uploadCanceled = false;
        }
        Object.defineProperty(AddApplicationComponent.prototype, "progress", {
            get: function () {
                return this.ecosystemService.progress;
            },
            enumerable: false,
            configurable: true
        });
        AddApplicationComponent.prototype.onFileDroppedEvent = function (event) {
            if (event && event.length > 0) {
                var file = event[0].file;
                this.onFile(file);
            }
        };
        AddApplicationComponent.prototype.onFile = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.isLoading = true;
                            this.errorMessage = null;
                            this.progress.next(0);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            _a = this;
                            return [4 /*yield*/, this.createApplicationHandler(file)];
                        case 2:
                            _a.createdApp = _b.sent();
                            return [4 /*yield*/, this.uploadApplicationHandler(file, this.createdApp)];
                        case 3:
                            _b.sent();
                            this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.createdApp);
                            this.isAppCreated = true;
                            return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _b.sent();
                            this.ecosystemService.cancelAppCreation(this.createdApp);
                            this.createdApp = null;
                            this.dropAreaComponent.onDelete();
                            this.errorMessage = ERROR_MESSAGES[ex_1.message];
                            if (!this.errorMessage && !this.uploadCanceled) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 5];
                        case 5:
                            this.progress.next(100);
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        AddApplicationComponent.prototype.getHref = function (app) {
            return this.applicationService.getHref(app);
        };
        AddApplicationComponent.prototype.cancel = function () {
            this.cancelFileUpload();
            this.wizardComponent.close();
        };
        AddApplicationComponent.prototype.done = function () {
            this.wizardComponent.close();
        };
        AddApplicationComponent.prototype.back = function () {
            this.wizardComponent.reset();
        };
        AddApplicationComponent.prototype.cancelFileUpload = function () {
            this.uploadCanceled = true;
            this.ecosystemService.cancelAppCreation(this.createdApp);
            this.createdApp = null;
        };
        return AddApplicationComponent;
    }());
    AddApplicationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-add-application',
                    template: "<c8y-wizard-header>\n  <h1 [c8yIcon]=\"headerIcon\"></h1>\n  <h4>{{ headerText | translate }}</h4>\n</c8y-wizard-header>\n\n<div class=\"modal-inner-scroll animated fadeIn\">\n  <div class=\"modal-body\">\n    <c8y-form-group\n      *ngIf=\"!isAppCreated; else appCreated\"\n      [hasError]=\"errorMessage\"\n      class=\"m-auto\"\n      style=\"max-width: 285px\"\n    >\n      <c8y-drop-area\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [accept]=\"'.zip'\"\n        [loading]=\"isLoading\"\n        [maxAllowedFiles]=\"1\"\n        [message]=\"'Upload a *.zip file' | translate\"\n        [progress]=\"progress | async\"\n        class=\"drop-area\"\n      >\n      </c8y-drop-area>\n      <c8y-messages>\n        <c8y-message *ngIf=\"errorMessage\">\n          {{ errorMessage | translate }}\n        </c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n    <ng-template #appCreated>\n      <div class=\"d-flex a-i-center j-c-center\" style=\"min-height: 285px\">\n        <c8y-operation-result\n          text=\"{{ successText | translate }}\"\n          [vertical]=\"true\"\n          [size]=\"84\"\n          class=\"lead\"\n          type=\"success\"\n        >\n        </c8y-operation-result>\n      </div>\n    </ng-template>\n  </div>\n</div>\n<c8y-wizard-footer>\n  <button\n    (click)=\"back()\"\n    *ngIf=\"!isAppCreated && canGoBack\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Back' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Back\n  </button>\n  <button\n    (click)=\"cancel()\"\n    *ngIf=\"!isAppCreated\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Cancel\n  </button>\n  <button\n    (click)=\"done()\"\n    *ngIf=\"isAppCreated\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Done' | translate }}\"\n    translate\n    type=\"button\"\n  >\n    Done\n  </button>\n  <a\n    (click)=\"$event.stopPropagation()\"\n    *ngIf=\"isAppCreated && canOpenInBrowser\"\n    [href]=\"getHref(createdApp)\"\n    target=\"_blank\"\n    class=\"btn btn-primary\"\n    title=\"{{ 'Open' | translate }}\"\n  >\n    <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n    {{ 'Open' | translate }}\n  </a>\n</c8y-wizard-footer>\n"
                },] }
    ];
    AddApplicationComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.AlertService },
        { type: client.ApplicationService },
        { type: ngxComponents.WizardComponent }
    ]; };
    AddApplicationComponent.propDecorators = {
        headerText: [{ type: core.Input }],
        headerIcon: [{ type: core.Input }],
        successText: [{ type: core.Input }],
        createApplicationHandler: [{ type: core.Input }],
        uploadApplicationHandler: [{ type: core.Input }],
        canGoBack: [{ type: core.Input }],
        dropAreaComponent: [{ type: core.ViewChild, args: [ngxComponents.DropAreaComponent,] }]
    };

    var PackageGuard = /** @class */ (function () {
        function PackageGuard(ecosystemService) {
            this.ecosystemService = ecosystemService;
        }
        PackageGuard.prototype.canActivate = function (route) {
            var app = route.data.contextData || route.parent.data.contextData;
            if (!app) {
                return false;
            }
            return this.ecosystemService.isPackage(app);
        };
        return PackageGuard;
    }());
    PackageGuard.decorators = [
        { type: core.Injectable }
    ];
    PackageGuard.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var ApplicationCardComponent = /** @class */ (function () {
        function ApplicationCardComponent(applicationService, ecosystemService, alertService, router) {
            this.applicationService = applicationService;
            this.ecosystemService = ecosystemService;
            this.alertService = alertService;
            this.router = router;
            this.canEdit = true;
            this.onAppDeleted = new core.EventEmitter();
        }
        Object.defineProperty(ApplicationCardComponent.prototype, "openButtonTitle", {
            get: function () {
                return !this.disableOpenInBrowser ?
                    ngxComponents.gettext('Open') :
                    ngxComponents.gettext('This application is overridden.');
            },
            enumerable: false,
            configurable: true
        });
        ApplicationCardComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var contextPath, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.appState = this.ecosystemService.getAppState(this.app);
                            contextPath = this.app.contextPath;
                            this.canOpenInBrowser = this.ecosystemService.canOpenAppInBrowser(this.app);
                            _a = this;
                            _b = this.canOpenInBrowser;
                            if (!_b) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.ecosystemService.isOverwrittenByCustomApp(this.app)];
                        case 1:
                            _b = (_c.sent());
                            _c.label = 2;
                        case 2:
                            _a.disableOpenInBrowser = _b;
                            this.canDelete = this.ecosystemService.canDeleteApp(this.app);
                            this.isPackage = this.ecosystemService.isPackage(this.app);
                            this.isFeature = this.ecosystemService.isFeature(this.app);
                            this.isMicroservice = this.ecosystemService.isMicroservice(this.app);
                            this.isExternal = this.ecosystemService.isExternal(this.app);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ApplicationCardComponent.prototype.detail = function () {
            this.isMicroservice
                ? this.router.navigateByUrl("/microservices/" + this.app.id)
                : this.router.navigateByUrl("/ecosystem/application/" + this.app.id);
        };
        ApplicationCardComponent.prototype.openApp = function () {
            window.open(this.applicationService.getHref(this.app));
        };
        ApplicationCardComponent.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.ecosystemService.deleteApp(this.app)];
                        case 1:
                            _a.sent();
                            this.onAppDeleted.emit();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            if (ex_1) {
                                this.alertService.addServerFailure(ex_1);
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return ApplicationCardComponent;
    }());
    ApplicationCardComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-application-card',
                    template: "<div class=\"card pointer card--d-col\">\n  <div (click)=\"detail()\" class=\"card-block text-center card-column-40\">\n    <div class=\"card-appicon\">\n      <c8y-app-icon\n        *ngIf=\"!isPackage && !isFeature && !isMicroservice && !isExternal\"\n        [app]=\"app\"\n        [contextPath]=\"app.contextPath\"\n        [name]=\"app.name\"\n      ></c8y-app-icon>\n      <i *ngIf=\"isPackage\" c8yIcon=\"big-parcel\"></i>\n      <i *ngIf=\"isFeature\" c8yIcon=\"tab\"></i>\n      <i *ngIf=\"isMicroservice\" c8yIcon=\"microchip\"></i>\n      <i *ngIf=\"isExternal\" c8yIcon=\"globe1\"></i>\n    </div>\n    <p class=\"e2e-appCardName text-medium\" title=\"{{ app | humanizeAppName | async }}\">\n      {{ app | humanizeAppName | async }}\n    </p>\n    <small *ngIf=\"app.manifest?.version && (isPackage || isMicroservice)\" class=\"text-muted\">\n      <em>{{ app.manifest.version }}</em>\n    </small>\n  </div>\n  <div (click)=\"detail()\" class=\"card-block p-0 no-min-height card--d-col card-column-80 flex-grow\">\n    <div class=\"card-block no-min-height p-t-0 p-b-0 card-column-80\">\n      <div *ngIf=\"app.description\" class=\"text-center-grid\">\n        <div class=\"p-b-8 card-hidden-grid\"></div>\n        <p class=\"small l-h-tight p-b-8 p-l-0 p-r-0\">{{ app.description | translate }}</p>\n      </div>\n    </div>\n    <div class=\"card-block no-min-height p-t-0 p-b-0 card-column-20 text-center-grid\">\n      <span [ngClass]=\"appState.class\" class=\"label\">{{ appState.label | translate }}</span>\n    </div>\n    <div class=\"card-footer no-min-height p-t-0 p-b-0 card-column-20 text-center-grid\">\n      <div class=\"p-b-16 card-hidden-list\"></div>\n      <button\n        (click)=\"openApp(); $event.stopPropagation()\"\n        *ngIf=\"canOpenInBrowser\"\n        [disabled]=\"disableOpenInBrowser\"\n        class=\"btn btn-xs btn-default\"\n        [title]=\"openButtonTitle | translate\"\n      >\n        <i c8yIcon=\"external-link\" class=\"m-r-4\"></i>\n        {{ 'Open' | translate }}\n      </button>\n      <div class=\"p-b-32 card-hidden-list\"></div>\n    </div>\n  </div>\n\n  <div *ngIf=\"canEdit || canOpenInBrowser || canDelete\" class=\"card-actions m-t-0\">\n    <div class=\"dropdown\" dropdown>\n      <button\n        class=\"dropdown-toggle c8y-dropdown\"\n        dropdownToggle\n        title=\"{{ 'Settings' | translate }}\"\n      >\n        <i c8yIcon=\"ellipsis-v\"></i>\n      </button>\n      <ul *dropdownMenu class=\"dropdown-menu dropdown-menu-right\">\n        <li *ngIf=\"canEdit\">\n          <button (click)=\"detail()\" title=\"{{ 'Edit' | translate }}\">\n            <i c8yIcon=\"pencil\" class=\"m-r-4\"></i>\n            {{ 'Edit' | translate }}\n          </button>\n        </li>\n        <li *ngIf=\"canDelete\">\n          <button\n            (click)=\"delete()\"\n            href=\"\"\n            title=\"{{ 'Delete' | translate }}\"\n          >\n            <i c8yIcon=\"trash\" class=\"m-r-4\"></i>\n            {{ 'Delete' | translate }}\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    ApplicationCardComponent.ctorParameters = function () { return [
        { type: client.ApplicationService },
        { type: EcosystemService },
        { type: ngxComponents.AlertService },
        { type: router.Router }
    ]; };
    ApplicationCardComponent.propDecorators = {
        app: [{ type: core.Input }],
        canEdit: [{ type: core.Input }],
        onAppDeleted: [{ type: core.Output }]
    };

    var ApplicationPropertiesGuard = /** @class */ (function () {
        function ApplicationPropertiesGuard(ecosystemService) {
            this.ecosystemService = ecosystemService;
        }
        ApplicationPropertiesGuard.prototype.canActivate = function (route) {
            var app = route.data.contextData || route.parent.data.contextData;
            if (!app) {
                return false;
            }
            return !this.ecosystemService.isPackage(app);
        };
        return ApplicationPropertiesGuard;
    }());
    ApplicationPropertiesGuard.decorators = [
        { type: core.Injectable }
    ];
    ApplicationPropertiesGuard.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var FeatureListComponent = /** @class */ (function () {
        function FeatureListComponent(ecosystemService) {
            var _this = this;
            this.ecosystemService = ecosystemService;
            this.reloading = false;
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.features$ = this.reload$.pipe(operators.tap(function () { return (_this.reloading = true); }), operators.switchMap(function () { return _this.ecosystemService.getFeatureApplications(); }), operators.tap(function () { return (_this.reloading = false); }), operators.shareReplay());
        }
        FeatureListComponent.prototype.ngOnInit = function () {
            this.loadFeatures();
        };
        FeatureListComponent.prototype.loadFeatures = function () {
            this.reload$.next();
        };
        return FeatureListComponent;
    }());
    FeatureListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-feature-list',
                    template: "<c8y-title>{{ 'Features' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'tab'\" [label]=\"'Features' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button (click)=\"reload$.next()\" class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\">\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form hidden-xs\">\n  <c8y-list-display-switch\n    (onListClassChange)=\"listClass = $event\"\n    [listLength]=\"(features$ | async)?.length\"\n  ></c8y-list-display-switch>\n</c8y-action-bar-item>\n\n<div *ngIf=\"(features$ | async)?.length === 0\" class=\"c8y-empty-state text-center\">\n  <h1 class=\"c8y-icon c8y-icon-modules c8y-icon-duocolor\"></h1>\n  <h3 translate>No features to display.</h3>\n  <p translate>No additional features are subscribed to the tenant.</p>\n</div>\n\n<div [ngClass]=\"listClass\" class=\"card-group\">\n  <div class=\"page-sticky-header hidden-xs flex-row\" *ngIf=\"(features$ | async)?.length > 0\">\n    <div class=\"card-block card-column-40\">\n      <div class=\"card-appicon p-l-32 p-r-16 m-r-0 m-l-4\"></div>\n      {{ 'Feature' | translate }}\n    </div>\n    <div class=\"card-block p-0 card-column-80\">\n      <div class=\"card-block card-column-80\">{{ 'Description' | translate }}</div>\n      <div class=\"card-block card-column-20\">{{ 'Type' | translate }}</div>\n      <div class=\"card-block card-column-20\"></div>\n    </div>\n  </div>\n  <div *ngFor=\"let feature of features$ | async\" class=\"col-xs-12 col-sm-4 col-md-3\">\n    <c8y-application-card\n      [app]=\"feature\"\n      [canEdit]=\"false\"\n      class=\"d-contents\"\n    ></c8y-application-card>\n  </div>\n</div>\n"
                },] }
    ];
    FeatureListComponent.ctorParameters = function () { return [
        { type: EcosystemService }
    ]; };

    var PackageArchivesComponent = /** @class */ (function () {
        function PackageArchivesComponent(activatedRoute, ecosystemService) {
            this.activatedRoute = activatedRoute;
            this.ecosystemService = ecosystemService;
            this.isLoading = false;
        }
        PackageArchivesComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadApplication()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PackageArchivesComponent.prototype.loadApplication = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            id = this.activatedRoute.snapshot.parent.data.contextData.id;
                            this.isLoading = true;
                            _a = this;
                            return [4 /*yield*/, this.ecosystemService.getApplication(id)];
                        case 1:
                            _a.application = _b.sent();
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return PackageArchivesComponent;
    }());
    PackageArchivesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-package-archives',
                    template: "<c8y-title>{{ application | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'big-parcel'\"\n    [label]=\"'Packages' | translate\"\n    [path]=\"'ecosystem/package-list'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"application | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Archives' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div class=\"row\">\n  <div class=\"col-lg-8\">\n    <div class=\"card content-fullpage d-flex d-col\">\n      <div class=\"card-header large-padding separator\">\n        <h4 class>{{ 'Archives' | translate }}</h4>\n      </div>\n      <c8y-activity-log class=\"d-contents\" *ngIf=\"!isLoading\" [application]=\"application\">\n      </c8y-activity-log>\n    </div>\n  </div>\n</div>\n"
                },] }
    ];
    PackageArchivesComponent.ctorParameters = function () { return [
        { type: router.ActivatedRoute },
        { type: EcosystemService }
    ]; };

    var EcosystemWizardFactory = /** @class */ (function () {
        function EcosystemWizardFactory(ecosystemGuard) {
            this.ecosystemGuard = ecosystemGuard;
        }
        EcosystemWizardFactory.prototype.get = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.ecosystemGuard.isFeatureEnabled()) {
                        return [2 /*return*/];
                    }
                    else {
                        return [2 /*return*/, {
                                wizardId: 'uploadApplication',
                                component: InstallFromPackageComponent,
                                name: 'Install from available packages',
                                c8yIcon: 'big-parcel'
                            }];
                    }
                    return [2 /*return*/];
                });
            });
        };
        return EcosystemWizardFactory;
    }());
    EcosystemWizardFactory.decorators = [
        { type: core.Injectable }
    ];
    EcosystemWizardFactory.ctorParameters = function () { return [
        { type: EcosystemGuard }
    ]; };

    var UploadArchiveComponent = /** @class */ (function () {
        function UploadArchiveComponent(ecosystemService, alertService) {
            this.ecosystemService = ecosystemService;
            this.alertService = alertService;
            this.applicationChange = new core.EventEmitter();
            this.refresh = new core.EventEmitter();
            this.archives = [];
            this.uploadInProgress = false;
            this.canReactivate = false;
        }
        Object.defineProperty(UploadArchiveComponent.prototype, "uploadProgress", {
            get: function () {
                return this.ecosystemService.progress;
            },
            enumerable: false,
            configurable: true
        });
        UploadArchiveComponent.prototype.onFileDroppedEvent = function (event) {
            if (event && event.length > 0) {
                var file = event[0].file;
                this.onFile(file);
            }
        };
        UploadArchiveComponent.prototype.onFile = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                var isCustomMicroservice, _a, _b, app, ex_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 8, , 9]);
                            return [4 /*yield*/, this.ecosystemService.isValidAppType(file, this.application.type)];
                        case 1:
                            _c.sent();
                            isCustomMicroservice = this.ecosystemService.isCustomMicroservice(this.application);
                            _a = this;
                            if (!isCustomMicroservice) return [3 /*break*/, 2];
                            _b = [];
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.ecosystemService.listArchives(this.application.id)];
                        case 3:
                            _b = _c.sent();
                            _c.label = 4;
                        case 4:
                            _a.archives = _b;
                            this.archives.sort(function (a, b) {
                                return new Date(b.created) - new Date(a.created);
                            });
                            this.uploadInProgress = true;
                            this.uploadProgress.next(0);
                            if (!(this.archives.length === 6 && !isCustomMicroservice)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.ecosystemService.removeOldestArchive(this.application, this.archives)];
                        case 5:
                            _c.sent();
                            _c.label = 6;
                        case 6: return [4 /*yield*/, this.ecosystemService.uploadArchiveToApp(file, this.application)];
                        case 7:
                            app = _c.sent();
                            this.applicationChange.emit(app);
                            this.uploadProgress.next(100);
                            this.uploadInProgress = false;
                            this.refresh.emit();
                            this.alertService.success(ngxComponents.gettext('Archive uploaded and activated.'));
                            return [3 /*break*/, 9];
                        case 8:
                            ex_1 = _c.sent();
                            this.uploadInProgress = false;
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        return UploadArchiveComponent;
    }());
    UploadArchiveComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'c8y-upload-archive',
                    template: "<c8y-drop-area\n  (dropped)=\"onFileDroppedEvent($event)\"\n  [accept]=\"'.zip'\"\n  [files]=\"fileList\"\n  [loading]=\"uploadInProgress\"\n  [maxAllowedFiles]=\"1\"\n  [message]=\"'Upload a *.zip file' | translate\"\n  [progress]=\"uploadProgress | async\"\n  [forceHideList]=\"true\"\n  class=\"drop-area-sm\"\n>\n</c8y-drop-area>\n"
                },] }
    ];
    UploadArchiveComponent.ctorParameters = function () { return [
        { type: EcosystemService },
        { type: ngxComponents.AlertService }
    ]; };
    UploadArchiveComponent.propDecorators = {
        application: [{ type: core.Input }],
        applicationChange: [{ type: core.Output }],
        refresh: [{ type: core.Output }]
    };

    var ecosystemMainRoutes = [
        {
            path: 'ecosystem/applications',
            component: ApplicationListComponent
        },
        {
            path: 'ecosystem/package-list',
            component: PackagesListComponent,
            canActivate: [EcosystemGuard]
        },
        {
            path: 'ecosystem/features',
            component: FeatureListComponent
        },
        {
            path: 'ecosystem',
            redirectTo: 'ecosystem/applications'
        },
        {
            path: 'microservices',
            component: MicroserviceListComponent
        }
    ];
    var applicationDetailsRoutes = [
        {
            path: 'properties',
            component: ApplicationPropertiesComponent,
            icon: 'list',
            label: ngxComponents.gettext('Properties'),
            context: ngxComponents.ViewContext.Application,
            priority: 5,
            canActivate: [ApplicationPropertiesGuard]
        },
        {
            path: 'plugins',
            component: ApplicationPluginsComponent,
            icon: 'plugin',
            label: ngxComponents.gettext('Plugins'),
            context: ngxComponents.ViewContext.Application,
            priority: 3,
            canActivate: [ApplicationPluginsGuard, EcosystemGuard]
        },
        {
            path: 'package-details',
            component: PackageDetailsComponent,
            icon: 'big-parcel',
            label: ngxComponents.gettext('Info'),
            context: ngxComponents.ViewContext.Application,
            priority: 10,
            canActivate: [PackageGuard, EcosystemGuard]
        },
        {
            path: 'package-archives',
            component: PackageArchivesComponent,
            icon: 'c8y-archive',
            label: ngxComponents.gettext('Archives'),
            context: ngxComponents.ViewContext.Application,
            priority: 5,
            canActivate: [PackageGuard, EcosystemGuard]
        },
        {
            path: 'properties',
            component: ApplicationPropertiesComponent,
            icon: 'list',
            label: ngxComponents.gettext('Properties'),
            context: ngxComponents.ViewContext.Microservice,
            priority: 5,
            canActivate: [ApplicationPropertiesGuard]
        }
    ];
    var ɵ0 = applicationDetailsRoutes, ɵ1 = {
        wizardId: 'uploadApplication',
        component: AddWebApplicationComponent,
        name: 'Upload web application',
        c8yIcon: 'upload'
    }, ɵ2 = {
        wizardId: 'uploadPackage',
        component: AddPackageComponent
    }, ɵ3 = {
        wizardId: 'uploadApplication',
        component: AddExternalApplicationComponent,
        name: 'External application',
        c8yIcon: 'cloud-link'
    }, ɵ4 = {
        wizardId: 'deployPackage',
        component: DeployApplicationComponent,
        name: 'Deploy package',
        c8yIcon: 'big-parcel'
    }, ɵ5 = {
        wizardId: 'uploadApplication',
        component: DuplicateApplicationComponent,
        name: 'Duplicate existing application',
        c8yIcon: 'copy'
    }, ɵ6 = {
        wizardId: 'uploadMicroservice',
        component: AddMicroserviceComponent
    };
    var EcosystemModule = /** @class */ (function () {
        function EcosystemModule() {
        }
        return EcosystemModule;
    }());
    EcosystemModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ApplicationListComponent,
                        MicroserviceListComponent,
                        ApplicationCardComponent,
                        ApplicationPropertiesComponent,
                        AddMicroserviceComponent,
                        ActivityLogComponent,
                        ApplicationPluginsComponent,
                        PluginListItemComponent,
                        InstallPluginComponent,
                        PluginListComponent,
                        AddWebApplicationComponent,
                        AddExternalApplicationComponent,
                        DuplicateApplicationComponent,
                        DuplicateApplicationListComponent,
                        DuplicateApplicationPropertiesComponent,
                        ApplicationPropertiesComponent,
                        InstallFromPackageComponent,
                        AddMicroserviceComponent,
                        ApplicationPropertiesComponent,
                        PackagesListComponent,
                        PackageDetailsComponent,
                        DeployApplicationComponent,
                        AddPackageComponent,
                        AddApplicationComponent,
                        ApplicationPropertiesFormComponent,
                        FeatureListComponent,
                        PackageArchivesComponent,
                        UploadArchiveComponent
                    ],
                    entryComponents: [
                        AddMicroserviceComponent,
                        AddWebApplicationComponent,
                        AddExternalApplicationComponent,
                        DuplicateApplicationComponent,
                        DuplicateApplicationListComponent,
                        DuplicateApplicationPropertiesComponent,
                        ApplicationPropertiesComponent,
                        ActivityLogComponent,
                        ApplicationPluginsComponent,
                        InstallPluginComponent,
                        PackagesListComponent,
                        InstallFromPackageComponent,
                        PackageDetailsComponent,
                        DeployApplicationComponent,
                        AddPackageComponent,
                        FeatureListComponent,
                        PackageArchivesComponent
                    ],
                    imports: [
                        ngxComponents.CoreModule,
                        dropdown.BsDropdownModule,
                        tooltip.TooltipModule,
                        ngxComponents.FormsModule,
                        forms.ReactiveFormsModule,
                        router.RouterModule.forChild(ecosystemMainRoutes),
                        popover.PopoverModule
                    ],
                    exports: [ApplicationPropertiesComponent],
                    providers: [
                        {
                            provide: ngxComponents.HOOK_TABS,
                            useClass: EcosystemTabs,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                            useClass: EcosystemNavigationFactory,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_ROUTE,
                            useValue: ɵ0,
                            multi: true
                        },
                        EcosystemGuard,
                        EcosystemService,
                        ApplicationPluginsGuard,
                        PackageGuard,
                        ApplicationPropertiesGuard,
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ1,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ2,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ3,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ4,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useClass: EcosystemWizardFactory,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ5,
                            multi: true
                        },
                        {
                            provide: ngxComponents.HOOK_WIZARD,
                            useValue: ɵ6,
                            multi: true
                        }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.EcosystemModule = EcosystemModule;
    exports["ɵ0"] = ɵ0;
    exports["ɵ1"] = ɵ1;
    exports["ɵ2"] = ɵ2;
    exports["ɵ3"] = ɵ3;
    exports["ɵ4"] = ɵ4;
    exports["ɵ5"] = ɵ5;
    exports["ɵ6"] = ɵ6;
    exports["ɵa"] = ApplicationListComponent;
    exports["ɵb"] = EcosystemService;
    exports["ɵba"] = EcosystemGuard;
    exports["ɵbb"] = EcosystemTabs;
    exports["ɵbc"] = EcosystemNavigationFactory;
    exports["ɵbd"] = ApplicationPropertiesGuard;
    exports["ɵbe"] = ApplicationPluginsGuard;
    exports["ɵbf"] = PackageGuard;
    exports["ɵbg"] = EcosystemWizardFactory;
    exports["ɵc"] = MicroserviceListComponent;
    exports["ɵd"] = ApplicationCardComponent;
    exports["ɵe"] = ApplicationPropertiesComponent;
    exports["ɵf"] = AddMicroserviceComponent;
    exports["ɵg"] = ActivityLogComponent;
    exports["ɵh"] = ApplicationPluginsComponent;
    exports["ɵi"] = PluginListItemComponent;
    exports["ɵj"] = InstallPluginComponent;
    exports["ɵk"] = PluginListComponent;
    exports["ɵl"] = AddWebApplicationComponent;
    exports["ɵm"] = AddExternalApplicationComponent;
    exports["ɵn"] = DuplicateApplicationComponent;
    exports["ɵo"] = DuplicateApplicationListComponent;
    exports["ɵp"] = DuplicateApplicationPropertiesComponent;
    exports["ɵq"] = ApplicationPropertiesFormComponent;
    exports["ɵr"] = InstallFromPackageComponent;
    exports["ɵs"] = PackagesListComponent;
    exports["ɵt"] = PackageDetailsComponent;
    exports["ɵu"] = DeployApplicationComponent;
    exports["ɵv"] = AddPackageComponent;
    exports["ɵw"] = AddApplicationComponent;
    exports["ɵx"] = FeatureListComponent;
    exports["ɵy"] = PackageArchivesComponent;
    exports["ɵz"] = UploadArchiveComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=c8y-ngx-components-ecosystem.umd.js.map
