import { FetchClient, InventoryService } from '@c8y/client';
import { OpcuaServer } from './opcua-server.interface';
import { Router } from '@angular/router';
import { AlertService } from '@c8y/ngx-components';
export declare class OpcuaService {
    private client;
    private inventoryService;
    private router;
    private alertService;
    private binaryService;
    private microserviceUrl;
    private deviceTypeProtocolUrl;
    private header;
    constructor(client: FetchClient, inventoryService: InventoryService, router: Router, alertService: AlertService);
    getServers(id: string): Promise<import("@c8y/client").IFetchResponse>;
    createServer(data: OpcuaServer): Promise<import("@c8y/client").IFetchResponse>;
    updateServer(server: OpcuaServer): Promise<any>;
    removeServer(data: OpcuaServer): Promise<import("@c8y/client").IFetchResponse>;
    getKeystore(binaryId: string): Promise<import("@c8y/client").IResult<import("@c8y/client").IManagedObject>>;
    uploadKeystore(file: File): Promise<import("@c8y/client").IResult<import("@c8y/client").IManagedObjectBinary>>;
    updateKeystore(id: string, file: File): Promise<import("@c8y/client").IResult<import("@c8y/client").IManagedObjectBinary>>;
    removeKeystore(id: string): Promise<import("@c8y/client").IResult<null>>;
    getMoId(): string;
    getId(): string;
    getDeviceProtocol(id: string): Promise<import("@c8y/client").IFetchResponse>;
    updateDeviceProtocol(data: any): Promise<import("@c8y/client").IFetchResponse>;
    createDeviceProtocol(data: any): Promise<import("@c8y/client").IFetchResponse>;
    private doesGatewayIdExist;
    private doesIdExist;
    private cleanUpPayload;
}
