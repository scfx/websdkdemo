{"version":3,"file":"opcua-server-config.component.d.ts","sources":["opcua-server-config.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter, OnChanges } from '@angular/core';\nimport { DroppedFile, DropAreaComponent } from '@c8y/ngx-components';\nimport { OpcuaServer } from './opcua-server.interface';\nimport { OpcuaService } from './opcuaService';\nexport declare class OpcuaServerConfigComponent implements OnInit, OnChanges {\n    currentSecMode: string;\n    fileName: string;\n    targetConnectionState: string;\n    minIntervalNumber: number;\n    connectionStatusLabel: string;\n    opcuaConfigForm: any;\n    dropArea: DropAreaComponent;\n    canceled: EventEmitter<OpcuaServer>;\n    removed: EventEmitter<OpcuaServer>;\n    saved: EventEmitter<OpcuaServer>;\n    set server(server: OpcuaServer);\n    get server(): OpcuaServer;\n    model: OpcuaServer;\n    changePassword: boolean;\n    initialPasswordRequired: boolean;\n    securityModes: string[];\n    authenticationMode: any;\n    authenticationModes: any[];\n    NONE: string;\n    SIGN: string;\n    SIGN_ENC: string;\n    securityPolicies: any;\n    private ANONYM;\n    private USER_PASSWORD;\n    private KEY_BASED;\n    private _server;\n    private opcuaService;\n    private initialKeystore;\n    private keystore;\n    private authSwitch;\n    constructor(opcuaService: OpcuaService);\n    ngOnInit(): Promise<void>;\n    ngOnChanges(): void;\n    cancel(): void;\n    remove(): Promise<void>;\n    save(): Promise<void>;\n    uploadFile(droppedFiles: DroppedFile[]): void;\n    setPolicy(data: any): void;\n    setServerConnection(data: string): void;\n    updateAuthentication(data: any): void;\n    updateConnectionStatusLabel(server: any): void;\n    setNewPassword(): void;\n    toggleChangePassword(): void;\n    private uploadKeystore;\n    private removeKeystore;\n    private resetUserAuthentication;\n    private resetKeyBasedAuthentication;\n    private restoreUserData;\n    private restoreKeyBasedData;\n    private getServerConfig;\n    private setCurrentSecurityMode;\n    private setCurrentAuthenticationMode;\n    private getModelConfig;\n}\n"]}