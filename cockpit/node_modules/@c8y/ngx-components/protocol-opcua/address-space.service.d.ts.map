{"version":3,"file":"address-space.service.d.ts","sources":["address-space.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { FetchClient } from '@c8y/client';\nimport { Observable } from 'rxjs';\nexport declare class AddressSpaceService {\n    private nodeNavigationData$;\n    private client;\n    private microserviceUrl;\n    private header;\n    constructor(fetchClient: FetchClient);\n    resetTreeToRootNode(): void;\n    triggerNodeToOpen(nodeNavigationData: NodeNavigationData): void;\n    getNodeNavData$(): Observable<NodeNavigationData>;\n    getNode(serverId: string, nodeId?: string): Promise<import(\"@c8y/client\").IFetchResponse>;\n    getRootNode(serverId: string): Promise<import(\"@c8y/client\").IFetchResponse>;\n    getNodeById(serverId: string, nodeId: string): Promise<import(\"@c8y/client\").IFetchResponse>;\n    getChildrenOf(node: AddressSpaceNode, serverId: string): Promise<import(\"@c8y/client\").IFetchResponse>;\n    childrenAvailable(nodeReferences: AdressSpaceNodeReference[]): boolean;\n    getSearchedNodes(searchKey: string, serverId: string): Promise<any>;\n    getIcon(nodeClassName: string): any;\n}\nexport interface AddressSpaceNode {\n    nodeId: string;\n    currentlyLoadingChildren?: boolean;\n    nodeClass?: number;\n    nodeClassName?: string;\n    browseName?: string;\n    displayName?: string;\n    description?: any;\n    references?: AdressSpaceNodeReference[];\n    ancestorNodeIds?: [string[]];\n    children: AddressSpaceNode[];\n    expanded: boolean;\n    absolutePaths: [string[]];\n    relativePath?: string[];\n    parentNode?: AddressSpaceNode;\n}\nexport interface AdressSpaceNodeReference {\n    referenceId: string;\n    targetId: string;\n    inverse: boolean;\n    hierarchical: boolean;\n}\nexport interface SearchedNode {\n    absolutePath: string[];\n    ancestorNodeIds: [string[]];\n    displayName: string;\n    nodeClassName: string;\n    nodeId: string;\n}\nexport interface NodeNavigationData {\n    node: AddressSpaceNode;\n    selectedAncestorIds: string[];\n}\n"]}