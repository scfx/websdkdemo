{"__symbolic":"module","version":4,"metadata":{"OpcuaDeviceProtocolMappingCustomAction":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"opcua-device-protocol-mapping-customaction","viewProviders":[{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"ControlContainer","line":7,"character":29},"useExisting":{"__symbolic":"reference","module":"@angular/forms","name":"NgModelGroup","line":7,"character":60}}],"template":"<div class=\"list-group\">\n  <div class=\"list-group-item\">\n    <div class=\"flex-row\">\n      <div class=\"list-item-switch\">\n        <label class=\"c8y-switch\">\n          <input\n            type=\"checkbox\"\n            name=\"hasCustomAction\"\n            [(ngModel)]=\"hasCustomAction\"\n            (click)=\"updateCustomAction()\"\n          />\n          <span></span>\n        </label>\n      </div>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"wrench\"></i>\n      </div>\n      <div class=\"list-item-title\" translate>\n        Custom action\n      </div>\n    </div>\n    <div [collapse]=\"!hasCustomAction\" [isAnimated]=\"true\">\n      <div class=\"p-t-8\" *ngIf=\"hasCustomAction\">\n        <fieldset ngModelGroup=\"headers\">\n          <div class=\"legend form-block\" translate>Headers</div>\n          <div class=\"tight-grid flex-row hidden-xs\">\n            <div class=\"col-sm-4\">\n              <label translate>Key</label>\n            </div>\n            <div class=\"col-sm-4\">\n              <label translate>Value</label>\n            </div>\n          </div>\n          <div\n            *ngFor=\"let header of headers; trackBy: trackByIndex; let i = index; last as isLast\"\n            class=\"flex-row tight-grid row\"\n            [ngModelGroup]=\"i\"\n          >\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Key</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"key\"\n                    placeholder=\"{{ 'e.g.' | translate }} Content-Type\"\n                    required\n                    [(ngModel)]=\"header.key\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Value</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"value\"\n                    placeholder=\"{{ 'e.g.' | translate }} application/json\"\n                    required\n                    [(ngModel)]=\"header.value\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-2\">\n              <div class=\"form-group\">\n                <label class=\"visible-xs\">&nbsp;</label>\n                <button class=\"btn btn-clean\" *ngIf=\"customAction.headers.length !== 1\">\n                  <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"removeCustomAction(i)\"></i>\n                </button>\n                <button class=\"btn btn-clean\" *ngIf=\"isLast\">\n                  <i c8yIcon=\"plus-circle\" class=\"text-primary\" (click)=\"addHeader()\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n        <div class=\"legend form-block\" translate>Action</div>\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label>\n                <span translate>Endpoint</span>\n              </label>\n              <div class=\"input-group\">\n                <input\n                  class=\"form-control\"\n                  type=\"text\"\n                  name=\"endpoint\"\n                  placeholder=\"{{ 'e.g.' | translate }} http://localhost:1080/cucumber\"\n                  required\n                  [(ngModel)]=\"customAction.endpoint\"\n                />\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label translate>Body template</label>\n              <textarea\n                #model='ngModel'\n                [heightPerRow]=\"40\"\n                class=\"form-control\"\n                rows=\"3\"\n                name=\"bodyTemplate\"\n                placeholder=\"({{'required' | translate}})\"\n                [(ngModel)]=\"customAction.bodyTemplate\"\n                required\n              ></textarea>\n              <div class=\"help-block\" *ngIf=\"model.untouched || !model.errors\">\n                {{ 'The following placeholders are available:' | translate }} {{ placeholders }}\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"customAction":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"getHeaderPair":[{"__symbolic":"method"}],"addHeader":[{"__symbolic":"method"}],"updateCustomAction":[{"__symbolic":"method"}],"removeCustomAction":[{"__symbolic":"method"}],"trackByIndex":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}]}},"OpcuaAddressSpaceDetailComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"opcua-address-space-detail","template":"<div\n  class=\"card flex-scroll m-b-4 split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator \">\n    <h4>{{ 'Attributes' | translate }}</h4>\n    <button\n      class=\"close flex-item-right visible-sm visible-xs\"\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"toggleDetail(nodeDataAttr)\"\n    >\n      &times;\n    </button>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataAttr | keyvalue\">\n            <td>{{ item.key }}</td>\n            <td *ngIf=\"item.key === 'absolutePaths'\" class=\"text-break-word\">\n              {{ item.value | json }}\n            </td>\n            <td *ngIf=\"item.key === 'ancestorNodeIds'\" class=\"text-break-word\">\n              <a *ngFor=\"let value of item.value\" (click)=\"navigateTo(value)\">\n                {{ value | json }}</a\n              >\n            </td>\n            <td *ngIf=\"item.key !== 'absolutePaths' && item.key !== 'ancestorNodeIds'\">\n              {{ item.value }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n<div\n  class=\"card flex-scroll split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator\">\n    <h4>{{ 'References' | translate }}</h4>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataRef\">\n            <td>{{ item.referenceLabel }}</td>\n            <td class=\"text-break-word\">{{ item.targetLabel }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"node":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":9,"character":3}}]}],"toggleAttrDetail":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":23,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"AddressSpaceService"}]}],"setNodeData":[{"__symbolic":"method"}],"toggleDetail":[{"__symbolic":"method"}],"navigateTo":[{"__symbolic":"method"}]}},"OpcuaService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":6,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/client","name":"FetchClient","line":14,"character":20},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":15,"character":30},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":16,"character":20},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":17,"character":26}]}],"getServers":[{"__symbolic":"method"}],"createServer":[{"__symbolic":"method"}],"updateServer":[{"__symbolic":"method"}],"removeServer":[{"__symbolic":"method"}],"getKeystore":[{"__symbolic":"method"}],"uploadKeystore":[{"__symbolic":"method"}],"updateKeystore":[{"__symbolic":"method"}],"removeKeystore":[{"__symbolic":"method"}],"getMoId":[{"__symbolic":"method"}],"getId":[{"__symbolic":"method"}],"getDeviceProtocol":[{"__symbolic":"method"}],"updateDeviceProtocol":[{"__symbolic":"method"}],"createDeviceProtocol":[{"__symbolic":"method"}],"doesGatewayIdExist":[{"__symbolic":"method"}],"doesIdExist":[{"__symbolic":"method"}],"cleanUpPayload":[{"__symbolic":"method"}]}},"OpcuaDeviceTypeMappingObject":{"__symbolic":"interface"},"OpcuaDeviceType":{"__symbolic":"interface"},"AutoApplyConstraints":{"__symbolic":"interface"},"OpcuaAgentGuard":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":3,"character":1}}],"members":{"canActivate":[{"__symbolic":"method"}]}},"OpcuaDeviceProtocolBrowsePathValidation":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Directive","line":4,"character":1},"arguments":[{"selector":"[c8yBrowsePathValidator][ngModel]","providers":[{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"NG_VALIDATORS","line":8,"character":15},"useExisting":{"__symbolic":"reference","name":"OpcuaDeviceProtocolBrowsePathValidation"},"multi":true}]}]}],"members":{"getMappings":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":15,"character":3}}]}],"model":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":16,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":18,"character":26}]}],"validate":[{"__symbolic":"method"}],"isValidJson":[{"__symbolic":"method"}],"toArray":[{"__symbolic":"method"}],"isBrowsePathUnique":[{"__symbolic":"method"}]}},"OpcuaDeviceProtocolObjectMapping":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"@angular/upgrade/static","name":"UpgradeComponent","line":7,"character":54},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Directive","line":4,"character":1},"arguments":[{"selector":"c8y-object-mapping"}]}],"members":{"mapping":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":8,"character":3}}]}],"customActions":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":9,"character":3}}]}],"autoObserveParams":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":10,"character":3}}]}],"hideAutoObserve":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":12,"character":26},{"__symbolic":"reference","module":"@angular/core","name":"Injector","line":12,"character":48}]}]}},"OpcuaProtocolModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":68,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"OpcuaServersComponent"},{"__symbolic":"reference","name":"OpcuaServerListComponent"},{"__symbolic":"reference","name":"OpcuaServerConfigComponent"},{"__symbolic":"reference","name":"OpcuaAddressSpaceComponent"},{"__symbolic":"reference","name":"OpcuaAddressSpaceTreeComponent"},{"__symbolic":"reference","name":"OpcuaAddressSpaceDetailComponent"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolDescription"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolDetailComponent"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolDataReportingComponent"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolMapping"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolObjectMapping"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolMappingCustomAction"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolObjectMappingStatus"},{"__symbolic":"reference","name":"OpcuaAutoApplySettingsComponent"},{"__symbolic":"reference","name":"OpcuaDeviceProtocolBrowsePathValidation"}],"imports":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"CoreModule","line":87,"character":4},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"FormsModule","line":88,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":89,"character":4},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"DropAreaModule","line":90,"character":4},{"__symbolic":"reference","module":"ngx-bootstrap/buttons","name":"ButtonsModule","line":91,"character":4},{"__symbolic":"reference","module":"@angular/cdk/tree","name":"CdkTreeModule","line":92,"character":4},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/router","name":"RouterModule","line":93,"character":4},"member":"forRoot"},"arguments":[[{"path":"deviceprotocols/opcuaV2/:id","component":{"__symbolic":"reference","name":"OpcuaDeviceProtocolDetailComponent"}}],{"useHash":true}]},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap/tooltip","name":"TooltipModule","line":94,"character":4},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap/popover","name":"PopoverModule","line":95,"character":4},"member":"forRoot"}},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"DeviceStatusModule","line":96,"character":4},{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule","line":97,"character":4},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap/collapse","name":"CollapseModule","line":98,"character":4},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap/dropdown","name":"BsDropdownModule","line":99,"character":4},"member":"forRoot"}}],"entryComponents":[{"__symbolic":"reference","name":"OpcuaAddressSpaceTreeComponent"},{"__symbolic":"reference","name":"OpcuaAddressSpaceComponent"},{"__symbolic":"reference","name":"OpcuaServersComponent"}],"providers":[{"__symbolic":"reference","name":"OpcuaAgentGuard"},{"__symbolic":"reference","name":"OpcuaServerGuard"},{"__symbolic":"reference","name":"OpcuaMicroserviceGuard"},{"__symbolic":"reference","name":"OpcuaService"},{"__symbolic":"reference","name":"AddressSpaceService"},{"provide":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"HOOK_ROUTE","line":113,"character":15},"useValue":[{"context":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ViewContext","line":44,"character":13},"member":"Device"},"path":"opcua-servers","component":{"__symbolic":"reference","name":"OpcuaServersComponent"},"label":{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"gettext","line":47,"character":11},"arguments":["OPC UA server"]},"icon":"server","canActivate":[{"__symbolic":"reference","name":"OpcuaAgentGuard"},{"__symbolic":"reference","name":"OpcuaMicroserviceGuard"}]},{"context":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ViewContext","line":52,"character":13},"member":"Device"},"path":"address-space","component":{"__symbolic":"reference","name":"OpcuaAddressSpaceComponent"},"label":{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"gettext","line":55,"character":11},"arguments":["Address space"]},"icon":"cloud-network","canActivate":[{"__symbolic":"reference","name":"OpcuaServerGuard"},{"__symbolic":"reference","name":"OpcuaMicroserviceGuard"}]}],"multi":true}]}]}],"members":{}},"OpcuaDeviceProtocolObjectMappingStatus":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"@angular/upgrade/static","name":"UpgradeComponent","line":6,"character":60},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Directive","line":3,"character":1},"arguments":[{"selector":"c8y-object-mapping-status-icons"}]}],"members":{"mapping":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":7,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":8,"character":26},{"__symbolic":"reference","module":"@angular/core","name":"Injector","line":8,"character":48}]}]}},"OpcuaDeviceProtocolDescription":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"opcua-device-protocol-description","viewProviders":[{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"ControlContainer","line":6,"character":28},"useExisting":{"__symbolic":"reference","module":"@angular/forms","name":"NgForm","line":6,"character":59}}],"template":"<div class=\"card m-b-4\">\n  <div class=\"card-block\">\n    <div class=\"row\">\n      <div class=\"col-md-7\">\n        <div class=\"form-group\">\n          <label translate>Name</label>\n          <label class=\"editable\" [ngClass]=\"{ updated: ctrlName.dirty }\">\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              name=\"name\"\n              #ctrlName=\"ngModel\"\n              [(ngModel)]=\"_model.name\"\n            />\n          </label>\n        </div>\n        <div class=\"form-group\">\n          <label translate>Description</label>\n          <label class=\"editable\" [ngClass]=\"{ updated: ctrlDescription.dirty }\">\n            <textarea\n              class=\"form-control\"\n              rows=\"1\"\n              name=\"description\"\n              #ctrlDescription=\"ngModel\"\n              [(ngModel)]=\"_model.description\"\n            ></textarea>\n            <span *ngIf=\"_model.description\">\n              {{ _model.description }}\n            </span>\n          </label>\n        </div>\n        <div class=\"flex-row\">\n          <div style=\"min-width: 120px;\">\n            <button\n              type=\"button\"\n              class=\"btn m-t-4\"\n              name=\"autoScanAddressSpace\"\n              [(ngModel)]=\"autoScan\"\n              (ngModelChange)=\"setAutoScanOption($event)\"\n              btnCheckbox\n              btnCheckboxTrue=\"1\"\n              btnCheckboxFalse=\"0\"\n              ngDefaultControl\n            >\n              <span *ngIf=\"autoScan === '1'\">\n                <i c8yIcon=\"check\" class=\"text-success\"></i>\n                {{ 'Active`auto scanning`' | translate }}\n              </span>\n              <span *ngIf=\"autoScan === '0'\">\n                <i c8yIcon=\"ban\" class=\"text-danger\"></i>\n                {{ 'Inactive`auto scanning`' | translate }}\n              </span>\n            </button>\n          </div>\n          <small class=\"m-l-16 text-muted\">\n            {{ 'When active, the gateway scans the address space of all servers and automatically applies this device protocol to all nodes matching the criteria.' | translate }}\n          </small>\n        </div>\n      </div>\n      <div class=\"col-md-5\">\n        <dl class=\"dl-horizontal m-b-0\">\n          <dt><label translate>Device protocol type</label></dt>\n          <dd>\n            <span class=\"label label-info m-r-8 text-capitalize\">\n              {{ _model.fieldbusType }}\n            </span>\n          </dd>\n          <dt><label class=\"small\" translate>ID</label></dt>\n          <dd style=\"font-size:1.5em\">{{ _model.id }}</dd>\n          <dt><label class=\"small\" translate>Date created</label></dt>\n          <dd>{{ _model.creationTime | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Last update</label></dt>\n          <dd>{{ _model.lastUpdated | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Fieldbus version</label></dt>\n          <dd>{{ _model.fieldbusVersion }}</dd>\n        </dl>\n      </div>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"model":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":12,"character":3}}]}],"setAutoScanOption":[{"__symbolic":"method"}]}},"AddressSpaceService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/client","name":"FetchClient","line":11,"character":27}]}],"resetTreeToRootNode":[{"__symbolic":"method"}],"triggerNodeToOpen":[{"__symbolic":"method"}],"getNodeNavData$":[{"__symbolic":"method"}],"getNode":[{"__symbolic":"method"}],"getRootNode":[{"__symbolic":"method"}],"getNodeById":[{"__symbolic":"method"}],"getChildrenOf":[{"__symbolic":"method"}],"childrenAvailable":[{"__symbolic":"method"}],"getSearchedNodes":[{"__symbolic":"method"}],"getIcon":[{"__symbolic":"method"}]}},"AddressSpaceNode":{"__symbolic":"interface"},"AdressSpaceNodeReference":{"__symbolic":"interface"},"SearchedNode":{"__symbolic":"interface"},"NodeNavigationData":{"__symbolic":"interface"},"DynamicDataSource":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"NestedTreeControl","module":"@angular/cdk/tree","arguments":[{"__symbolic":"reference","name":"AddressSpaceNode"}]},{"__symbolic":"reference","name":"AddressSpaceService"},{"__symbolic":"reference","name":"string"}]}],"connect":[{"__symbolic":"method"}],"handleTreeControl":[{"__symbolic":"method"}],"toggleNode":[{"__symbolic":"method"}],"catch":[{"__symbolic":"method"}],"refreshNestedTree":[{"__symbolic":"method"}],"triggerResize":[{"__symbolic":"method"}]}},"OpcuaAutoApplySettingsComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"opcua-auto-apply","template":"<div class=\"row\">\n  <div class=\"col-md-4\">\n    <p translate>\n      Specifying auto-apply constraints allows you to limit the scope where the device protocols are\n      applied, for example by specifying a set of possible servers or node IDs.\n    </p>\n    <p translate>\n      If no constraints are set, device protocols are applied at any fitting location on the OPC UA\n      server.\n    </p>\n  </div>\n\n  <div class=\"col-md-6\">\n    <ul class=\"list-group\" style=\"box-shadow: none;\">\n      <!-- Limit device type to a set of servers -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to a set of servers' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.matchesServerIds !== null && constraints.matchesServerIds.length > 0\n            \"\n            (change)=\"onChangeShowServerIds($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to a set of servers' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [collapse]=\"\n            (!showServerIds &&\n              (constraints.matchesServerIds !== null && constraints.matchesServerIds.length < 1)) ||\n            (!showServerIds && constraints.matchesServerIds === null)\n          \"\n        >\n          <c8y-form-group>\n            <c8y-select\n              [items]=\"opcuaServers\"\n              [selected]=\"selectedItems\"\n              [placeholder]=\"placeholderSelectServerIds\"\n              (onChange)=\"serverIdsSelected($event)\"\n              [updateItems]=\"updateSelectedItem\"\n            >\n            \n              <c8y-li *ngIf=\"opcuaServers.length > sizeToShowFilter\" class=\"sticky-top\">\n                <c8y-filter [icon]=\"'search'\"  (onSearch)=\"filterItems($event)\"></c8y-filter>\n              </c8y-li>\n              <c8y-li *ngIf=\"filteredList && filteredList.length === 0\">\n                <c8y-li-body> \n                  <div class=\"c8y-empty-state text-left\">\n                  <p>{{ 'No items to display.' | translate }}</p>\n                </div>\n                </c8y-li-body>\n              </c8y-li>\n              <c8y-li *ngFor=\"let item of filteredList\">\n                <c8y-li-checkbox\n                  [selected]=\"isChecked(item)\"\n                  (onSelect)=\"onSelect($event, item)\"\n                ></c8y-li-checkbox>\n                <c8y-li-body>{{ item.name | translate }}<br>\n                  <span class=\"text-label-small m-r-4\" translate>ID</span> <small>{{ item.id }}</small>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-select>\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type scope in the address space -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol scope in the address space' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length > 0\n            \"\n            (change)=\"onChangeShowBrowsePath($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol scope in the address space' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"\n            (!showBrowsePath &&\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length < 1) ||\n            (!showBrowsePath && constraints.browsePathMatchesRegex === null)\n          \"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"browsePath\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} /objects/devices/.*\"\n              [(ngModel)]=\"constraints.browsePathMatchesRegex\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to servers with a certain fragment-->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to servers with a certain fragment' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length > 0\"\n            (change)=\"onChangeShowServerFragment($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to servers with a certain fragment' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showServerFragment && constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length < 1) || (!showServerFragment && constraints.serverObjectHasFragment === null)\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"serverFragment\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_SomeServerMarker\"\n              [(ngModel)]=\"constraints.serverObjectHasFragment\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to a specific root node ID -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to specific root nodes ID' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length > 0\"\n            (change)=\"onChangeNodeId($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to specific root nodes ID' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showRootNodes && constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length < 1) || ( !showRootNodes && constraints.matchesNodeIds === null)\"\n        >\n            <ul c8yInputGroupListContainer class=\"list-unstyled p-t-16\">\n              <li\n                class=\"m-b-8\"\n                *ngFor=\"let item of constraints.matchesNodeIds; let i = index; trackBy: trackByFn\"\n              >\n                <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n                  <c8y-form-group class=\"form-group--tooltip-validation\">\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{ 'e.g.' | translate }} nodeId\"\n                      [(ngModel)]=\"constraints.matchesNodeIds[i]\"\n                      [required]=\"true\"\n                    />\n                  </c8y-form-group>\n                </c8y-input-group-list>\n              </li>\n            </ul> \n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":29,"character":40}]}],"ngOnInit":[{"__symbolic":"method"}],"model":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":57,"character":3}}]}],"serverIdsSelected":[{"__symbolic":"method"}],"onChangeNodeId":[{"__symbolic":"method"}],"onChangeShowServerIds":[{"__symbolic":"method"}],"onChangeShowBrowsePath":[{"__symbolic":"method"}],"onChangeShowServerFragment":[{"__symbolic":"method"}],"add":[{"__symbolic":"method"}],"remove":[{"__symbolic":"method"}],"trackByFn":[{"__symbolic":"method"}],"updateConstraints":[{"__symbolic":"method"}],"filterItems":[{"__symbolic":"method"}],"isChecked":[{"__symbolic":"method"}],"onSelect":[{"__symbolic":"method"}]}},"OpcuaServersComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"opcua-servers","template":"<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header grid__col--fullspan separator\">\n    <h4 class=\"card-title\">OPC UA servers</h4>\n    <button class=\"btn-clean m-l-4\"\n      popover=\"{{ 'Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected.' | translate }}\"\n      placement=\"right\"\n      triggers=\"focus\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info \"></i>\n    </button>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-gray-white flex-grow\">\n      <div class=\"c8y-nav-stacked\">\n        <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n        </opcua-server-list>\n      </div>\n    </div>\n    <div class=\"card-footer separator sticky-bottom\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-default\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"inner-scroll split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":45,"character":5}}]],"parameters":[{"__symbolic":"reference","name":"OpcuaService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":43,"character":26},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":44,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ContextRouteComponent","line":45,"character":33}]}],"ngOnInit":[{"__symbolic":"method"}],"localServerObjectExist":[{"__symbolic":"method"}],"addServer":[{"__symbolic":"method"}],"onSaved":[{"__symbolic":"method"}],"reloadTabs":[{"__symbolic":"method"}],"onCanceled":[{"__symbolic":"method"}],"onRemoved":[{"__symbolic":"method"}],"getKeystore":[{"__symbolic":"method"}],"onPresent":[{"__symbolic":"method"}],"createServer":[{"__symbolic":"method"}],"updateServer":[{"__symbolic":"method"}],"removeServer":[{"__symbolic":"method"}],"removeServerObjectListById":[{"__symbolic":"method"}],"updateServerObjectListById":[{"__symbolic":"method"}],"setQuickInfo":[{"__symbolic":"method"}]}},"OpcuaDeviceProtocolMapping":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":16,"character":1},"arguments":[{"selector":"opcua-device-protocol-mapping","viewProviders":[{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"ControlContainer","line":19,"character":29},"useExisting":{"__symbolic":"reference","module":"@angular/forms","name":"NgModelGroup","line":19,"character":60}}],"template":"<div class=\"list-group-item collapsible\" [ngClass]=\"{ expanded: isDetailOpen }\">\n  <div class=\"flex-row\" (click)=\"toggleDetail()\">\n    <div class=\"list-item-actions\">\n      <button class=\"btn btn-clean showOnHover flex-item-right\" title=\"{{ 'Delete' | translate }}\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Expand' | translate }}\"\n        class=\"collapse-btn\"\n        [ngClass]=\"{ active: isDetailOpen }\"\n      >\n        <i c8yIcon=\"chevron-down\"></i>\n      </button>\n    </div>\n\n    <div class=\"list-item-icon\">\n      <i c8yIcon=\"sliders\"></i>\n    </div>\n\n    <div class=\"list-item-body\">\n      <div class=\"row flex-row\">\n        <div class=\"col-sm-7 col-xs-12\">\n          <p>\n            {{ nodeDisplayName }}<br />\n            <small\n              *ngIf=\"mapping.browsePath.length > 0\"\n              class=\"text-muted text-truncate\"\n              title=\"{{ mapping.browsePath | json }}\"\n              >{{ mapping.browsePath | json }}</small\n            >\n          </p>\n          <p></p>\n        </div>\n        <div class=\"col-sm-4 col-xs-10\">\n          <div class=\"list-functionalities\">\n            <label class=\"small m-r-8 hidden-xs\" translate>Functionalities</label>&nbsp;\n            <c8y-object-mapping-status-icons [mapping]=\"mapping\"></c8y-object-mapping-status-icons>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"detail\" [collapse]=\"!isDetailOpen\" [isAnimated]=\"true\">\n    <div class=\"form\" [ngModelGroup]=\"index\" #variableForm=\"ngModelGroup\" *ngIf=\"isDetailOpen\">\n      <div class=\"row p-t-8\">\n        <c8y-form-group class=\"col-md-4\" [status]=\"!isBrowsePathUniq ? 'error' : ''\">\n          <label translate>Path</label>\n          <div\n            class=\"dropdown\"\n            dropdown\n            #dropdown=\"bs-dropdown\"\n            [insideClick]=\"true\"\n            style=\"width:100%;\"\n          >\n            <input\n              class=\"form-control\"\n              c8yBrowsePathValidator\n              [getMappings]=\"getMappings\"\n              [model]=\"mapping\"\n              type=\"text\"\n              name=\"browsePath\"\n              dropdownToggle\n              placeholder=\"{{ 'e.g.' | translate }} {{ ['2:Node1', '2:SubNode1'] | json }}\"\n              [(ngModel)]=\"browsePath\"\n              (change)=\"updateBrowsePathInput()\"\n              (focus)=\"setTreeFromRefNode()\"\n              required\n              #browsePathModel=\"ngModel\"\n              autocomplete=\"off\"\n            />\n            <div\n              *dropdownMenu\n              class=\"dropdown-menu panel-inner-scroll\"\n              style=\"max-height:200px; width: 100%;\"\n            >\n              <opcua-address-space-tree\n                *ngIf=\"showAddressSpaceTree()\"\n                [node]=\"referencedNode\"\n                [moId]=\"referencedServerId\"\n                (selectedNode)=\"updateBrowsePath($event); dropdown.hide()\"\n              ></opcua-address-space-tree>\n            </div>\n          </div>\n          <c8y-messages>\n            <c8y-message\n              name=\"invalidBrowsePathNotation\"\n              text=\"{{ 'Must be a valid array of strings.' | translate }}\"\n            ></c8y-message>\n            <c8y-message\n              name=\"browsePathNotUnique\"\n              text=\"{{ 'Variable with this path is already added.' | translate }}\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group class=\"col-md-4\">\n          <label translate>Name</label>\n          <div class=\"input-group\">\n            <input\n              class=\"form-control\"\n              type=\"test\"\n              name=\"displayName\"\n              placeholder=\"{{ 'e.g. childDevice2' | translate }} \"\n              required\n              [(ngModel)]=\"nodeDisplayName\"\n              (change)=\"updateDisplayname()\"\n              autocomplete=\"off\"\n            />\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"row\" ngModelGroup=\"dataReportingSection\">\n        <c8y-form-group class=\"col-sm-4 col-md-3 col-lg-2\">\n          <label>\n            <span translate>Data reporting</span>\n          </label>\n          <div class=\"input-group\">\n            <label title=\"{{ 'Default' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"default\"\n              />\n              <span></span>\n              <span>{{ 'Default' | translate }}</span>\n            </label>\n            <label title=\"{{ 'Custom' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"custom\"\n              />\n              <span></span>\n              <span>{{ 'Custom' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n        <div\n          class=\"col-sm-8 col-md-9 col-lg-10\"\n          *ngIf=\"dataReporting === 'custom'\"\n          ngModelGroup=\"overriddenSubscription\"\n        >\n          <opcua-device-protocol-data-reporting\n            [model]=\"mapping\"\n          ></opcua-device-protocol-data-reporting>\n        </div>\n      </div>\n\n      <c8y-object-mapping [mapping]=\"mapping\" [hideAutoObserve]=\"true\"></c8y-object-mapping>\n      <div ngModelGroup=\"customAction\">\n        <opcua-device-protocol-mapping-customaction\n          [customAction]=\"customAction\"\n        ></opcua-device-protocol-mapping-customaction>\n      </div>\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        id=\"cancelBtn\"\n        class=\"btn btn-default m-t-16 m-b-16\"\n        (click)=\"cancel()\"\n      >\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        id=\"saveBtn\"\n        class=\"btn btn-primary m-t-16 m-b-16\"\n        (click)=\"save()\"\n        [disabled]=\"!canSave(variableForm)\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"objectMappingForm":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":22,"character":3},"arguments":[{"__symbolic":"reference","name":"OpcuaDeviceProtocolObjectMapping"},{"static":false}]}]}],"subFormRef":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":23,"character":3},"arguments":["variableForm",{"static":false}]}]}],"browsePathModel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":24,"character":3},"arguments":["browsePathModel",{"static":false}]}]}],"_model":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":26,"character":3},"arguments":["resource"]}]}],"index":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":27,"character":3}}]}],"getParentAttr":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":28,"character":3}}]}],"referencedServerId":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":29,"character":3}}]}],"referencedRootNodeId":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":30,"character":3}}]}],"onAction":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":31,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":50,"character":26},{"__symbolic":"reference","name":"AddressSpaceService"}]}],"toggleDetail":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"initialFormSetup":[{"__symbolic":"method"}],"showAddressSpaceTree":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"mapHeadersObjectToList":[{"__symbolic":"method"}],"stringfyBrowsePath":[{"__symbolic":"method"}],"updateBrowsePath":[{"__symbolic":"method"}],"updateDisplayname":[{"__symbolic":"method"}],"updateBrowsePathInput":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"onDelete":[{"__symbolic":"method"}],"canSave":[{"__symbolic":"method"}],"isActive":[{"__symbolic":"method"}],"setTreeFromRefNode":[{"__symbolic":"method"}]}},"OpcuaDeviceProtocolDetailComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":20,"character":1},"arguments":[{"selector":"opcua-device-protocol-detail","template":"<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<div>\n  <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\">\n    <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Variables</h4>\n      </div>\n      <div class=\"list-group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n        <opcua-device-protocol-mapping\n          *ngFor=\"let resource of getMapping(); trackBy: trackByIndex; let i = index\"\n          [index]=\"i\"\n          [referencedServerId]=\"model.referencedServerId\"\n          [referencedRootNodeId]=\"model.referencedRootNodeId\"\n          [resource]=\"getStructuredResource(resource)\"\n          [getParentAttr]=\"getParentAttr\"\n          (onAction)=\"actionHandler($event)\"\n        >\n        </opcua-device-protocol-mapping>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-empty-state text-left\" *ngIf=\"model.mappings.length === 0\">\n          <h1 c8yIcon=\"sliders\"></h1>\n          <p translate>No variables to display. Click below to add.</p>\n        </div>\n        <button\n          title=\"{{ 'Add variable' | translate }}\"\n          class=\"btn-add-block addVariableBtn\"\n          (click)=\"addVariable()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'Add variable' | translate }}\n        </button>\n      </div>\n    </div>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Data reporting</h4>\n      </div>\n      <div class=\"card-block\" ngModelGroup=\"subscription\">\n        <opcua-device-protocol-data-reporting\n          [groupName]=\"'subscription'\"\n          [model]=\"model\"\n        ></opcua-device-protocol-data-reporting>\n      </div>\n    </div>\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 translate>Auto apply constraints</h4>\n      </div>\n      <div class=\"card-block overflow-visible\" ngModelGroup=\"autoApply\">\n        <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n      </div>\n    </div>\n\n    <span>\n      <div class=\"text-center page-footer m-t-16\">\n        <div class=\"btn-save-wrapper animated\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            translate\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </span>\n  </form>\n</div>\n"}]}],"members":{"instanceList":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":25,"character":3},"arguments":[{"__symbolic":"reference","name":"OpcuaDeviceProtocolMapping"}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":56,"character":31},{"__symbolic":"reference","name":"OpcuaService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":58,"character":26},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":59,"character":20}]}],"ngAfterContentChecked":[{"__symbolic":"method"}],"getMapping":[{"__symbolic":"method"}],"getEmptyMappingObject":[{"__symbolic":"method"}],"getOverriddenSubscriptionsByPath":[{"__symbolic":"method"}],"getStructuredResource":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"updateViableMapping":[{"__symbolic":"method"}],"trackByIndex":[{"__symbolic":"method"}],"addVariable":[{"__symbolic":"method"}],"updateVariable":[{"__symbolic":"method"}],"removeVariable":[{"__symbolic":"method"}],"actionHandler":[{"__symbolic":"method"}],"extractOverridSubscriptionType":[{"__symbolic":"method"}],"prepareRequestJson":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"canSave":[{"__symbolic":"method"}]}},"OpcuaMicroserviceGuard":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AppStateService","line":10,"character":17}]}],"canActivate":[{"__symbolic":"method"}]}},"OpcuaDeviceProtocolDataReportingComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"opcua-device-protocol-data-reporting","viewProviders":[{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"ControlContainer","line":8,"character":29},"useExisting":{"__symbolic":"reference","module":"@angular/forms","name":"NgModelGroup","line":8,"character":60}}],"template":"<c8y-form-group>\n  <label translate>Mechanism</label>\n  <label\n    title=\"{{ mechanism.label | translate }}\"\n    class=\"c8y-radio radio-inline\"\n    *ngFor=\"let mechanism of types\"\n  >\n    <input\n      type=\"radio\"\n      name=\"{{subscriptionTypeName}}\"\n      [value]=\"mechanism.value\"\n      [(ngModel)]=\"subscription.type\"\n      (change)=\"updateModel()\"\n      required\n    />\n    <span></span>\n    <span>{{ mechanism.label | translate }}</span>\n  </label>\n</c8y-form-group>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'CyclicRead'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-md-4 col-lg-3\">\n    <c8y-form-group>\n      <label translate>Reading interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"rate\"\n          [(ngModel)]=\"cyclicReadParameters.rate\"\n          placeholder=\"{{ 'e.g.' | translate }} 50\"\n          [required]=\"requireCyclic\"\n          min=\"50\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\">\n          {{ 'msec' | translate }}\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n</div>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'Subscription'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Sampling interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"samplingRate\"\n          [(ngModel)]=\"subscriptionParameters.samplingRate\"\n          placeholder=\"{{ 'e.g.' | translate }} 500\"\n          [required]=\"requireSubscription\"\n          min=\"0\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\" translate>\n          msec\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Queue size</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"queueSize\"\n          [(ngModel)]=\"subscriptionParameters.queueSize\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          min=\"1\"\n        />\n        <span class=\"input-group-addon\">\n          <strong translate>Discard</strong>&nbsp;\n          <label\n            *ngFor=\"let discardOption of discard\"\n            title=\"{{ discardOption.label | translate }}\"\n            class=\"c8y-radio radio-inline\"\n          >\n            <input\n              type=\"radio\"\n              name=\"discard\"\n              [value]=\"discardOption.value\"\n              [(ngModel)]=\"subscriptionParameters.discardOldest\"\n              [required]=\"requireSubscription\"\n            />\n            <span></span>\n            <span>{{ discardOption.label | translate }}</span>\n          </label>\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"clearfix\"></div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Data change trigger</label>\n      <label\n        *ngFor=\"let trigger of triggers\"\n        title=\"{{ trigger.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"dataChangeTrigger\"\n          [value]=\"trigger.value\"\n          [(ngModel)]=\"subscriptionParameters.dataChangeTrigger\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ trigger.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Deadband filter</label>\n      <label\n        *ngFor=\"let deadbandFilter of filters\"\n        title=\"{{ deadbandFilter.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"deadbandType\"\n          [value]=\"deadbandFilter.value\"\n          [(ngModel)]=\"subscriptionParameters.deadbandType\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ deadbandFilter.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n    <div [collapse]=\"subscriptionParameters.deadbandType == 'None'\" [isAnimated]=\"true\">\n      <c8y-form-group>\n        <label translate>Deadband value</label>\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"deadbandValue\"\n          [(ngModel)]=\"subscriptionParameters.deadbandValue\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          [required]=\"subscriptionParameters.deadbandType != 'None'\"\n          min=\"0\"\n        />\n      </c8y-form-group>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"model":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"groupName":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"onSubscriptionChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":37,"character":3}}]}],"updateModel":[{"__symbolic":"method"}]}},"OpcuaAddressSpaceTreeComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":19,"character":1},"arguments":[{"selector":"opcua-address-space-tree","template":"<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node\n      *cdkTreeNodeDef=\"let node\"\n      (click)=\"toggleFocusedNode(node)\"\n      [ngClass]=\"{ strong: isFocusedNode(node) }\"\n      class=\"interact\"\n    >\n      <span>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n        ></i>\n        {{ node.displayName }}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button\n          cdkTreeNodeToggle\n          class=\"btn-clean text-primary m-r-4\"\n          [disabled]=\"node.currentlyLoadingChildren\"\n        >\n          <i\n            [ngClass]=\"{ 'dlt-c8y-icon-plus-square': !node.expanded, 'dlt-c8y-icon-minus-square': node.expanded }\"\n          ></i>\n        </button>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n        ></i>\n        <span\n          (click)=\"toggleFocusedNode(node)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n          class=\"interact\"\n        >\n          {{ node.displayName }}\n        </span>\n        <span\n          class=\"m-l-4\"\n          [style.visibility]=\"node.currentlyLoadingChildren ? 'visible' : 'hidden'\"\n        >\n          <i class=\"dlt-c8y-icon-circle-o-notch icon-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div class=\"p-8\" *ngIf=\"loading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>\n"}]}],"members":{"moId":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":24,"character":3}}]}],"node":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":29,"character":3}}]}],"focusEmitter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":30,"character":3}}]}],"selectedNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":31,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"AddressSpaceService"},{"__symbolic":"reference","name":"OpcuaService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":44,"character":26}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"initializeDataSet":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"openNode":[{"__symbolic":"method"}],"setChildNodes":[{"__symbolic":"method"}],"setupTree":[{"__symbolic":"method"}],"getMoId":[{"__symbolic":"method"}],"getIcon":[{"__symbolic":"method"}],"toggleFocusedNode":[{"__symbolic":"method"}],"isFocusedNode":[{"__symbolic":"method"}],"getRelativePath":[{"__symbolic":"method"}]}},"OpcuaServerListComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"opcua-server-list","template":"<!-- add active class to c8y-stacked-item when clicked -->\n<div\n  class=\"c8y-stacked-item\"\n  [class.active]=\"server.active\"\n  *ngFor=\"let server of serverList\"\n  (click)=\"presentConfig(server)\"\n>\n  <i [c8yIcon]=\"'server'\" class=\"icon-20 \"></i>\n  <div class=\"p-l-16 text-truncate\">\n    <p id=\"serverName\" class=\"text-truncate\">{{ server.name }}</p>\n    <small id=\"serverUrl\" class=\"text-truncate text-muted\">{{ server.config.serverUrl }}</small>\n  </div>\n  <div class=\"flex-item-right p-l-8 d-flex p-r-16\">\n    <device-status class=\"p-r-8\" [mo]=\"server\"></device-status>\n    <a\n      title=\"{{ server.quickInfo.padlockMsg | translate }}\"\n      placement=\"left\"\n      class=\"text-gray-darker\"\n    >\n      <i [c8yIcon]=\"server.quickInfo.padlock\"></i>\n    </a>\n  </div>\n</div>\n"}]}],"members":{"serverList":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":8,"character":3}}]}],"present":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":9,"character":3}}]}],"presentConfig":[{"__symbolic":"method"}]}},"OpcuaServerConfigComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"opcua-server-config","template":"\n  <div class=\"c8y-empty-state m-t-24\"  ng-if=\"!vm.editInstruction.type\" *ngIf=\"!server\">\n    <h1 class=\"c8y-icon c8y-icon-duocolor\" c8yIcon=\"server\"></h1>\n    <div>\n      <h3>{{ 'No server to display.' | translate }}</h3>\n      <p>{{ 'Add or select a server.' | translate}}</p>\n    </div>\n  </div>\n\n\n<form #opcuaConfigForm=\"ngForm\" class=\"d-contents\" *ngIf=\"server\">\n  <div class=\"card-header large-padding separator sticky-top visible-sm visible-xs\" >\n    <button\n    class=\"btn btn-clean text-primary visible-sm visible-xs\"\n    title=\"{{ 'Back' | translate }}\"\n    (click)=\"cancel()\"\n    >\n      <i c8yIcon=\"chevron-left\"></i>\n      <span translate>Back</span>\n    </button>\n  </div>\n  <div class=\"flex-grow\">\n  <div class=\"card-block large-padding\">\n    <!-- SERVER NAME -->\n    <c8y-form-group class=\"m-b-8\">\n      <label>\n        {{ 'Server name' | translate }}\n      </label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g. My server' | translate }}\"\n        id=\"name\"\n        name=\"name\"\n        [(ngModel)]=\"model.name\"\n        required\n      />\n      <c8y-messages>\n        <c8y-message name=\"required\" text=\"{{ 'Server name is required' | translate }}\"></c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n  </div>\n\n    <div class=\"card-block large-padding bg-gray-lighter\">\n      <div class=\"tight-grid\">\n        <div class=\"col-sm-6\">\n          <label style=\"width: 100%;\" translate>Server connection</label>\n          <button\n            type=\"button\"\n            class=\"btn m-t-4\"\n            name=\"serverConnection\"\n            [(ngModel)]=\"targetConnectionState\"\n            (ngModelChange)=\"setServerConnection($event)\"\n            btnCheckbox\n            btnCheckboxTrue=\"1\"\n            btnCheckboxFalse=\"0\"\n          >\n            <span\n              title=\"{{ 'Enabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '1'\"\n              translate\n              >Enabled</span\n            >\n            <span\n              title=\"{{ 'Disabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '0'\"\n              translate\n              >Disabled</span\n            >\n          </button>\n        </div>\n        <div class=\"col-sm-6\">\n          <label translate>Connection status</label>\n          <div class=\"form-control-static\">\n            <device-status class=\"p-r-8\" [mo]=\"server\"></device-status>\n            <span>{{ connectionStatusLabel | translate }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-block large-padding\">\n      <!-- SERVER URL-->\n      <c8y-form-group>\n        <label for=\"configServerUrl\" translate>Server URL</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"configServerUrl\"\n          name=\"serverUrl\"\n          [(ngModel)]=\"model.config.serverUrl\"\n          c8yDefaultValidation=\"opcuaBrowsePath\"\n          required\n        />\n      </c8y-form-group>\n\n      <!-- TIMEOUT & STATUS-CHECK-INTERVAL-->\n      <div class=\"content-flex-32\">\n        <div class=\"col-6\">\n          <c8y-form-group>\n            <label for=\"config.timeout\" translate>Timeout</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.timeout\"\n                name=\"timeout\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 30\"\n                [(ngModel)]=\"model.config.timeout\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-6\">\n          <c8y-form-group>\n            <label for=\"config.statusCheckInterval\" translate>Status check interval</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.statusCheckInterval\"\n                name=\"statusCheckInterval\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 40\"\n                [(ngModel)]=\"model.config.statusCheckInterval\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <!-- SECURITY MODE -->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <!-- NONE, SIGN, SIGN & ENCRYPT-->\n            <label for=\"config.securityMode\" translate>Security mode</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                class=\"form-control\"\n                id=\"config.securityMode\"\n                [(ngModel)]=\"currentSecMode\"\n                (ngModelChange)=\"setPolicy($event)\"\n                name=\"securityMode\"\n                required\n              >\n                <option *ngFor=\"let mode of securityModes\" [ngValue]=\"mode\">{{ mode }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode === NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.securityPolicy\"\n              name=\"securityPolicy\"\n              [readonly]=\"true\"\n              [(ngModel)]=\"model.config.securityMode\"\n              required\n            />\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode !== NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                *ngIf=\"currentSecMode === SIGN\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <select\n                *ngIf=\"currentSecMode === SIGN_ENC\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign_enc\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- AUTHENTICATION -->\n      <div class=\"form-group\">\n        <label for=\"config.authenticationMode\" translate>Authentication</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"config.authenticationMode\"\n            [(ngModel)]=\"authenticationMode\"\n            name=\"authenticationMode\"\n            (ngModelChange)=\"updateAuthentication($event)\"\n            required\n          >\n            <option *ngFor=\"let auth of authenticationModes\" [ngValue]=\"auth\">{{\n              auth.value | translate\n            }}</option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n\n      <!-- User/Pw-->\n      <div *ngIf=\"authenticationMode.id === 2\" class=\"tight-grid\">\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"config.userName\" translate>Username</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.userName\"\n              name=\"userName\"\n              placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n              [(ngModel)]=\"model.config.userName\"\n              autocomplete=\"new-password\"\n              required\n            />\n          </div>\n        </div>\n        <!-- change password section BEGINS-->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\" *ngIf=\"!initialPasswordRequired\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n              <ng-container *ngIf=\"!changePassword\">\n                {{ 'Change password' | translate }}\n              </ng-container>\n              <ng-container *ngIf=\"changePassword\">\n                {{ 'Cancel password change' | translate }}\n              </ng-container>\n            </button>\n          </div>\n\n          <div class=\"form-group\">\n            <div *ngIf=\"changePassword\">\n              <label for=\"config.password\" translate>Password</label>\n              <input\n                type=\"password\"\n                class=\"form-control\"\n                id=\"config.userPassword\"\n                name=\"password\"\n                [(ngModel)]=\"model.config.userPassword\"\n                autocomplete=\"new-password\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n        <!-- change password section ENDS-->\n      </div>\n      <!-- Key-based -->\n      <div *ngIf=\"authenticationMode.id === 3\" class=\"tight-grid\">\n        <!-- KEYSTORE PASSWORD -->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.keystorePass\" translate>Keystore password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.keystorePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.keystorePass\"\n              required\n            />\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.certificatePass\" translate>Certificate password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.certificatePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.certificatePass\"\n              required\n            />\n          </div>\n        </div>\n        <!-- UPLOAD KEYSTORE -->\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"certificateUpload\" translate>Upload keystore</label>\n            <input\n              type=\"text\"\n              [readonly]=\"true\"\n              name=\"certificateUpload\"\n              class=\"form-control m-b-8\"\n              [ngModel]=\"fileName\"\n              placeholder=\"{{ 'e.g.' | translate }} yourKeystore.jks\"\n              required\n            />\n            <c8y-drop-area\n              (dropped)=\"uploadFile($event)\"\n              [loadingMessage]=\"'Importing, please wait.' | translate\"\n              [title]=\"'Import keystore with jks file extension' | translate\"\n            >\n            </c8y-drop-area>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer large-padding separator sticky-bottom\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"cancel()\" translate>\n      Cancel\n    </button>\n    <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-danger\" (click)=\"remove()\" translate>\n      Remove\n    </button>\n    <!-- Add [disabled]=\"method()\" when form is invalid-->\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!opcuaConfigForm.valid\"\n      translate\n    >\n      Save\n    </button>\n  </div> \n</form>\n"}]}],"members":{"opcuaConfigForm":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":16,"character":3},"arguments":["opcuaConfigForm",{"static":false}]}]}],"dropArea":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":17,"character":3},"arguments":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"DropAreaComponent","line":17,"character":13},{"static":false}]}]}],"canceled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":18,"character":3}}]}],"removed":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":19,"character":3}}]}],"saved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":20,"character":3}}]}],"server":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":21,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"OpcuaService"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"remove":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"uploadFile":[{"__symbolic":"method"}],"setPolicy":[{"__symbolic":"method"}],"setServerConnection":[{"__symbolic":"method"}],"updateAuthentication":[{"__symbolic":"method"}],"updateConnectionStatusLabel":[{"__symbolic":"method"}],"setNewPassword":[{"__symbolic":"method"}],"toggleChangePassword":[{"__symbolic":"method"}],"uploadKeystore":[{"__symbolic":"method"}],"removeKeystore":[{"__symbolic":"method"}],"resetUserAuthentication":[{"__symbolic":"method"}],"resetKeyBasedAuthentication":[{"__symbolic":"method"}],"restoreUserData":[{"__symbolic":"method"}],"restoreKeyBasedData":[{"__symbolic":"method"}],"getServerConfig":[{"__symbolic":"method"}],"setCurrentSecurityMode":[{"__symbolic":"method"}],"setCurrentAuthenticationMode":[{"__symbolic":"method"}],"getModelConfig":[{"__symbolic":"method"}]}},"OpcuaAddressSpaceComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"opcua-address-space","template":"<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-gray-lighter split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -4px 0;\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button *ngIf=\"!isSearch\" type=\"submit\" class=\"btn btn-clean\" (click)=\"searchNodes()\">\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button *ngIf=\"isSearch\" class=\"btn btn-clean\" (click)=\"clearSearch()\">\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em\n            >&nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div class=\"p-8\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <div class=\"spinner p-relative\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div\n          class=\"list-group list-group-links\"\n          *ngIf=\"isSearch && !loading\"\n          >\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item flex-row': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"m-r-4\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span>\n              {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none;\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n"}]}],"members":{"focusStatus":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":22,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"AddressSpaceService"},{"__symbolic":"reference","name":"OpcuaService"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"searchNodes":[{"__symbolic":"method"}],"clearNodeListAndCheckSearchString":[{"__symbolic":"method"}],"clearSearch":[{"__symbolic":"method"}],"getIcon":[{"__symbolic":"method"}],"selectNode":[{"__symbolic":"method"}],"toggleCurrentNode":[{"__symbolic":"method"}],"backHandler":[{"__symbolic":"method"}],"isNodeSet":[{"__symbolic":"method"}]}},"OpcuaServerGuard":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":3,"character":1}}],"members":{"canActivate":[{"__symbolic":"method"}]}},"OpcuaServer":{"__symbolic":"interface"},"OpcuaServerConfig":{"__symbolic":"interface"},"ng1Modules":["c8y.upgrade.opcua"]},"origins":{"OpcuaDeviceProtocolMappingCustomAction":"./opcua-device-protocol-mapping-customaction.component","OpcuaAddressSpaceDetailComponent":"./opcua-address-space-detail.component","OpcuaService":"./opcuaService","OpcuaDeviceTypeMappingObject":"./opcua-protocol-device-type.interface","OpcuaDeviceType":"./opcua-protocol-device-type.interface","AutoApplyConstraints":"./opcua-protocol-device-type.interface","OpcuaAgentGuard":"./opcua-agent.guard","OpcuaDeviceProtocolBrowsePathValidation":"./opcua-device-protocol-browse-path-validation.directive","OpcuaDeviceProtocolObjectMapping":"./opcua-device-protocol-object-mapping.component","OpcuaProtocolModule":"./opcua-protocol.module","OpcuaDeviceProtocolObjectMappingStatus":"./opcua-device-protocol-object-mapping-status-icon.component","OpcuaDeviceProtocolDescription":"./opcua-device-protocol-description.component","AddressSpaceService":"./address-space.service","AddressSpaceNode":"./address-space.service","AdressSpaceNodeReference":"./address-space.service","SearchedNode":"./address-space.service","NodeNavigationData":"./address-space.service","DynamicDataSource":"./dynamic-data-source","OpcuaAutoApplySettingsComponent":"./opcua-auto-apply-settings.component","OpcuaServersComponent":"./opcua-servers.component","OpcuaDeviceProtocolMapping":"./opcua-device-protocol-mapping.component","OpcuaDeviceProtocolDetailComponent":"./opcua-device-protocol-detail.component","OpcuaMicroserviceGuard":"./opcua-microservice.guard","OpcuaDeviceProtocolDataReportingComponent":"./opcua-device-protocol-data-reporting.component","OpcuaAddressSpaceTreeComponent":"./opcua-address-space-tree.component","OpcuaServerListComponent":"./opcua-server-list.component","OpcuaServerConfigComponent":"./opcua-server-config.component","OpcuaAddressSpaceComponent":"./opcua-address-space.component","OpcuaServerGuard":"./opcua-server.guard","OpcuaServer":"./opcua-server.interface","OpcuaServerConfig":"./opcua-server.interface","ng1Modules":"./ng1"},"importAs":"@c8y/ngx-components/protocol-opcua"}