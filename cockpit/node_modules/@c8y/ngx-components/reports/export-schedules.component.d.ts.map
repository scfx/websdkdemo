{"version":3,"file":"export-schedules.component.d.ts","sources":["export-schedules.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit } from '@angular/core';\nimport { Export, Schedule, EmitterPayload, ActionType } from './export-schedules.interface';\nimport { ReportsService } from './reports.service';\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport { OptionsService } from '@c8y/ngx-components';\nimport { CronService } from './cron.service';\nimport { IdReference } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UserService } from '@c8y/client';\nexport declare class ExportSchedulesComponent implements OnInit, OnChanges {\n    private reportsService;\n    private bsModalService;\n    cronService: CronService;\n    private translateService;\n    private userService;\n    private optionsService;\n    set exportId(exportId: IdReference);\n    onSchedulesUpdate: EventEmitter<Schedule[]>;\n    exp: Export;\n    scheduleList: Schedule[];\n    initialSchedule: Schedule;\n    buttonLabels: any;\n    listClass: string;\n    loadingStatus: any;\n    sortType: string;\n    sortReverse: boolean;\n    isOpen: any;\n    isFlipped: boolean;\n    isEditMenuOpen: boolean;\n    modalRef: BsModalRef;\n    currentUserEmail: string;\n    hasRequiredRole: boolean;\n    private _exportId;\n    private defaultExportEmailTemplate;\n    constructor(reportsService: ReportsService, bsModalService: BsModalService, cronService: CronService, translateService: TranslateService, userService: UserService, optionsService: OptionsService);\n    ngOnInit(): Promise<void>;\n    ngOnChanges(): void;\n    translateButtonTitles(): void;\n    getCurrentUserEmail(): Promise<string[]>;\n    checkRole(): Promise<boolean>;\n    getScheduleList(withProgress: boolean): Promise<void>;\n    addSchedule(): void;\n    editSchedule(schedule: Schedule, index: number, event: any): void;\n    duplicateSchedule(schedule: Schedule, event: any): void;\n    openAddEditModal(exportId: IdReference, schedule: Schedule, actionType: ActionType, index?: number): void;\n    getMessageFromModal(payload: EmitterPayload, index?: number): void;\n    removeSchedule(schedule: Schedule, index: number, event: any): void;\n}\n"]}