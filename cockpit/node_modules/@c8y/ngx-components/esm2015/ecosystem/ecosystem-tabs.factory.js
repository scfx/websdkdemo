import { Injectable } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { Router } from '@angular/router';
import { EcosystemGuard } from './ecosystem.guard';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './ecosystem.guard';
export class EcosystemTabs {
    constructor(router, ecosystemGuard) {
        this.router = router;
        this.ecosystemGuard = ecosystemGuard;
    }
    get() {
        const tabs = [];
        if (this.router.url === '/ecosystem/applications' ||
            this.router.url === '/ecosystem/package-list' ||
            this.router.url === '/ecosystem/features') {
            tabs.push({
                icon: 'c8y-modules',
                priority: 1000,
                label: gettext('All applications'),
                path: 'ecosystem/applications'
            });
            if (this.ecosystemGuard.isFeatureEnabled()) {
                tabs.push({
                    icon: 'big-parcel',
                    priority: 999,
                    label: gettext('Packages'),
                    path: 'ecosystem/package-list'
                });
            }
            tabs.push({
                icon: 'tab',
                priority: 998,
                label: gettext('Features'),
                path: '/ecosystem/features'
            });
        }
        return tabs;
    }
}
EcosystemTabs.ɵfac = function EcosystemTabs_Factory(t) { return new (t || EcosystemTabs)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.EcosystemGuard)); };
EcosystemTabs.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: EcosystemTabs, factory: EcosystemTabs.ɵfac });
EcosystemTabs.ctorParameters = () => [
    { type: Router },
    { type: EcosystemGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EcosystemTabs, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.EcosystemGuard }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNvc3lzdGVtLXRhYnMuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZWNvc3lzdGVtL2Vjb3N5c3RlbS10YWJzLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFHbkQsTUFBTSxPQUFPLGFBQWE7QUFBRyxJQUMzQixZQUFtQixNQUFjLEVBQVUsY0FBOEI7QUFBSSxRQUExRCxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFBUyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxJQUFFLENBQUM7QUFDL0UsSUFDRSxHQUFHO0FBQUssUUFDTixNQUFNLElBQUksR0FBVSxFQUFFLENBQUM7QUFDM0IsUUFBSSxJQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLHlCQUF5QjtBQUNuRCxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLHlCQUF5QjtBQUNuRCxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLHFCQUFxQixFQUN6QztBQUNOLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNoQixnQkFBUSxJQUFJLEVBQUUsYUFBYTtBQUMzQixnQkFBUSxRQUFRLEVBQUUsSUFBSTtBQUN0QixnQkFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzFDLGdCQUFRLElBQUksRUFBRSx3QkFBd0I7QUFDdEMsYUFBYyxDQUFDLENBQUM7QUFDaEIsWUFDTSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtBQUNsRCxnQkFBUSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2xCLG9CQUFVLElBQUksRUFBRSxZQUFZO0FBQzVCLG9CQUFVLFFBQVEsRUFBRSxHQUFHO0FBQ3ZCLG9CQUFVLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLG9CQUFVLElBQUksRUFBRSx3QkFBd0I7QUFDeEMsaUJBQWdCLENBQUMsQ0FBQztBQUNsQixhQUFPO0FBQ1AsWUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2hCLGdCQUFRLElBQUksRUFBRSxLQUFLO0FBQ25CLGdCQUFRLFFBQVEsRUFBRSxHQUFHO0FBQ3JCLGdCQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2xDLGdCQUFRLElBQUksRUFBRSxxQkFBcUI7QUFDbkMsYUFBYyxDQUFDLENBQUM7QUFDaEIsU0FBSztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0g7eUNBcENDLFVBQVU7cUhBQ1Q7QUFBQztBQUF1QyxZQUpqQyxNQUFNO0FBQUksWUFDVixjQUFjO0FBQUc7Ozt3R0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgVGFiLCBUYWJGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRWNvc3lzdGVtR3VhcmQgfSBmcm9tICcuL2Vjb3N5c3RlbS5ndWFyZCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFY29zeXN0ZW1UYWJzIGltcGxlbWVudHMgVGFiRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSBlY29zeXN0ZW1HdWFyZDogRWNvc3lzdGVtR3VhcmQpIHt9XG5cbiAgZ2V0KCk6IFRhYltdIHtcbiAgICBjb25zdCB0YWJzOiBUYWJbXSA9IFtdO1xuICAgIGlmIChcbiAgICAgIHRoaXMucm91dGVyLnVybCA9PT0gJy9lY29zeXN0ZW0vYXBwbGljYXRpb25zJyB8fFxuICAgICAgdGhpcy5yb3V0ZXIudXJsID09PSAnL2Vjb3N5c3RlbS9wYWNrYWdlLWxpc3QnIHx8XG4gICAgICB0aGlzLnJvdXRlci51cmwgPT09ICcvZWNvc3lzdGVtL2ZlYXR1cmVzJ1xuICAgICkge1xuICAgICAgdGFicy5wdXNoKHtcbiAgICAgICAgaWNvbjogJ2M4eS1tb2R1bGVzJyxcbiAgICAgICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdBbGwgYXBwbGljYXRpb25zJyksXG4gICAgICAgIHBhdGg6ICdlY29zeXN0ZW0vYXBwbGljYXRpb25zJ1xuICAgICAgfSBhcyBUYWIpO1xuXG4gICAgICBpZiAodGhpcy5lY29zeXN0ZW1HdWFyZC5pc0ZlYXR1cmVFbmFibGVkKCkpIHtcbiAgICAgICAgdGFicy5wdXNoKHtcbiAgICAgICAgICBpY29uOiAnYmlnLXBhcmNlbCcsXG4gICAgICAgICAgcHJpb3JpdHk6IDk5OSxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnUGFja2FnZXMnKSxcbiAgICAgICAgICBwYXRoOiAnZWNvc3lzdGVtL3BhY2thZ2UtbGlzdCdcbiAgICAgICAgfSBhcyBUYWIpO1xuICAgICAgfVxuXG4gICAgICB0YWJzLnB1c2goe1xuICAgICAgICBpY29uOiAndGFiJyxcbiAgICAgICAgcHJpb3JpdHk6IDk5OCxcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ0ZlYXR1cmVzJyksXG4gICAgICAgIHBhdGg6ICcvZWNvc3lzdGVtL2ZlYXR1cmVzJ1xuICAgICAgfSBhcyBUYWIpO1xuICAgIH1cbiAgICByZXR1cm4gdGFicztcbiAgfVxufVxuIl19