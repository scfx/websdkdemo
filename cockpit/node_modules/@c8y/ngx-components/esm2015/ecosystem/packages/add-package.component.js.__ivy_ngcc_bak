import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { ApplicationType } from '@c8y/client';
import { EcosystemService } from '../ecosystem.service';
import { gettext } from '@c8y/ngx-components';
export class AddPackageComponent {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
        this.headerText = gettext('Add package');
        this.successText = gettext('Package created');
        this.createPackageAppHandler = (f) => this.createPackageApp(f);
        this.uploadPackageHandler = (f, app) => this.uploadPackage(f, app);
    }
    createPackageApp(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ecosystemService.isValidAppType(file, ApplicationType.HOSTED);
            return this.ecosystemService.createAppForArchive(file, true);
        });
    }
    uploadPackage(file, pckg) {
        return this.ecosystemService.uploadArchiveToApp(file, pckg);
    }
}
AddPackageComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-add-package',
                template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'big-parcel'"
    [successText]="successText"
    [createApplicationHandler]="createPackageAppHandler"
    [uploadApplicationHandler]="uploadPackageHandler"
  ></c8y-add-application>`
            },] }
];
AddPackageComponent.ctorParameters = () => [
    { type: EcosystemService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXBhY2thZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZWNvc3lzdGVtL3BhY2thZ2VzL2FkZC1wYWNrYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFZOUMsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUh0RCxlQUFVLEdBQVcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVDLGdCQUFXLEdBQVcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFJakQsNEJBQXVCLEdBQUcsQ0FBQyxDQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSx5QkFBb0IsR0FBRyxDQUFDLENBQU8sRUFBRSxHQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUh6QixDQUFDO0lBS3BELGdCQUFnQixDQUFDLElBQVU7O1lBQy9CLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRCxDQUFDO0tBQUE7SUFFRCxhQUFhLENBQUMsSUFBVSxFQUFFLElBQWtCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7OzBCQU1jO2FBQ3pCOzs7WUFaUSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uVHlwZSwgSUFwcGxpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgRWNvc3lzdGVtU2VydmljZSB9IGZyb20gJy4uL2Vjb3N5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFkZC1wYWNrYWdlJyxcbiAgdGVtcGxhdGU6IGA8Yzh5LWFkZC1hcHBsaWNhdGlvblxuICAgIFtoZWFkZXJUZXh0XT1cImhlYWRlclRleHRcIlxuICAgIFtoZWFkZXJJY29uXT1cIidiaWctcGFyY2VsJ1wiXG4gICAgW3N1Y2Nlc3NUZXh0XT1cInN1Y2Nlc3NUZXh0XCJcbiAgICBbY3JlYXRlQXBwbGljYXRpb25IYW5kbGVyXT1cImNyZWF0ZVBhY2thZ2VBcHBIYW5kbGVyXCJcbiAgICBbdXBsb2FkQXBwbGljYXRpb25IYW5kbGVyXT1cInVwbG9hZFBhY2thZ2VIYW5kbGVyXCJcbiAgPjwvYzh5LWFkZC1hcHBsaWNhdGlvbj5gXG59KVxuZXhwb3J0IGNsYXNzIEFkZFBhY2thZ2VDb21wb25lbnQge1xuICBoZWFkZXJUZXh0OiBzdHJpbmcgPSBnZXR0ZXh0KCdBZGQgcGFja2FnZScpO1xuICBzdWNjZXNzVGV4dDogc3RyaW5nID0gZ2V0dGV4dCgnUGFja2FnZSBjcmVhdGVkJyk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlY29zeXN0ZW1TZXJ2aWNlOiBFY29zeXN0ZW1TZXJ2aWNlKSB7fVxuXG4gIGNyZWF0ZVBhY2thZ2VBcHBIYW5kbGVyID0gKGY6IEZpbGUpID0+IHRoaXMuY3JlYXRlUGFja2FnZUFwcChmKTtcbiAgdXBsb2FkUGFja2FnZUhhbmRsZXIgPSAoZjogRmlsZSwgYXBwOiBJQXBwbGljYXRpb24pID0+IHRoaXMudXBsb2FkUGFja2FnZShmLCBhcHApO1xuXG4gIGFzeW5jIGNyZWF0ZVBhY2thZ2VBcHAoZmlsZTogRmlsZSk6IFByb21pc2U8SUFwcGxpY2F0aW9uPiB7XG4gICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmlzVmFsaWRBcHBUeXBlKGZpbGUsIEFwcGxpY2F0aW9uVHlwZS5IT1NURUQpO1xuICAgIHJldHVybiB0aGlzLmVjb3N5c3RlbVNlcnZpY2UuY3JlYXRlQXBwRm9yQXJjaGl2ZShmaWxlLCB0cnVlKTtcbiAgfVxuXG4gIHVwbG9hZFBhY2thZ2UoZmlsZTogRmlsZSwgcGNrZzogSUFwcGxpY2F0aW9uKTogUHJvbWlzZTxJQXBwbGljYXRpb24+IHtcbiAgICByZXR1cm4gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnVwbG9hZEFyY2hpdmVUb0FwcChmaWxlLCBwY2tnKTtcbiAgfVxufVxuIl19