import { Injectable } from '@angular/core';
import { SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { find, get, isUndefined, some } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@c8y/client/lib/src/inventory/InventoryService";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@c8y/client/lib/src/user/UserService";
import * as i5 from "@c8y/ngx-components/assets-navigator";
import * as i6 from "@c8y/client/lib/src/smart-groups/SmartGroupsService";
import * as i7 from "@c8y/client/lib/src/smart-rules/SmartRulesService";
import * as ɵngcc0 from '@angular/core';
export class AssetSearchService extends SubAssetsService {
    constructor() {
        super(...arguments);
        this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        this.DEFAULT_PAGE_SIZE = 50;
        this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping'
        ];
        this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_',
            'c8y_CepAgent'
        ];
        this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    filterOnlyAssets(data) {
        return data.filter(mo => mo.c8y_IsDeviceGroup || this.isAnyDevice(mo));
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const rootQuery = {
            __filter: {
                __and: { __not: { __has: `c8y_IsBinary` } }
            }
        };
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     * @param pagination The currently used pagination.
     */
    search(term, pagination = { currentPage: 1, pageSize: this.DEFAULT_PAGE_SIZE }) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: pagination.pageSize,
            withChildren: false,
            currentPage: pagination.currentPage || 1
        });
    }
    isRootDevice(mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    }
    isAnyDevice(mo) {
        const isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    }
    hasFragmentOrTypeFromBlacklist(mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    }
    hasTypeFromBlacklist(mo) {
        const moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, type => moType.includes(type));
    }
    hasFragmentFromBlacklist(mo) {
        return find(this.FRAGMENTS_FOR_NO_DEVICE, f => !isUndefined(mo[f]));
    }
}
AssetSearchService.ɵfac = /*@__PURE__*/ function () { let ɵAssetSearchService_BaseFactory; return function AssetSearchService_Factory(t) { return (ɵAssetSearchService_BaseFactory || (ɵAssetSearchService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AssetSearchService)))(t || AssetSearchService); }; }();
AssetSearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AssetSearchService_Factory() { return new AssetSearchService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.InventoryService), i0.ɵɵinject(i3.AppStateService), i0.ɵɵinject(i4.UserService), i0.ɵɵinject(i5.AssetNodeService), i0.ɵɵinject(i5.DeviceGroupService), i0.ɵɵinject(i6.SmartGroupsService), i0.ɵɵinject(i7.SmartRulesService), i0.ɵɵinject(i3.AlertService), i0.ɵɵinject(i3.Permissions), i0.ɵɵinject(i3.ModalService)); }, token: AssetSearchService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetSearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,