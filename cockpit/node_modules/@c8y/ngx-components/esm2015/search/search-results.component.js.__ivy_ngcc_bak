import { Component, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SearchGridComponent } from './search-grid.component';
import { FilteringActionType, AlertService, Status, gettext } from '@c8y/ngx-components';
export class SearchResultsComponent {
    constructor(route, alert) {
        this.route = route;
        this.alert = alert;
        this.filter = '';
        this.searchTerm = '';
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        this.route.queryParams.subscribe(params => {
            if (params.filter) {
                this.filteringName = params.filter;
            }
        });
    }
    ngAfterViewInit() {
        this.route.queryParams
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(({ filter, search }) => this.onQueryParamsChange(filter, search));
        this.searchGrid.dataGrid.searchText$.pipe(takeUntil(this.unsubscribe$)).subscribe(text => {
            if (text) {
                this.resetFilter();
            }
            this.searchTerm = text;
        });
        this.searchGrid.dataGrid.onFilter
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => this.resetSearch());
        // to prevent race condition (search empty):
        this.searchTerm = this.route.snapshot.queryParams.search || '';
    }
    resetSearch() {
        this.searchTerm = '';
        if (this.searchTerm) {
            this.alert.add({
                text: gettext('Search reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
        }
    }
    resetFilter() {
        this.filter = '';
        if (this.searchGrid.dataGrid.filteringApplied) {
            this.alert.add({
                text: gettext('Filter reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
            this.searchGrid.dataGrid.clearFilters();
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    onQueryParamsChange(filter, searchTerm) {
        if (!this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
        else if (this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
    }
    shouldFilter(filter) {
        if (!filter) {
            return false;
        }
        this.resetSearch();
        this.filter = filter || '';
        this.searchGrid.updateFiltering(['name'], {
            type: FilteringActionType.ApplyFilter,
            payload: {
                filteringModifier: {
                    externalFilterQuery: {
                        names: [this.filter]
                    }
                }
            }
        });
        return true;
    }
    search(searchTerm) {
        this.searchTerm = searchTerm || '';
        this.searchGrid.dataGrid.searchText$.next(this.searchTerm);
    }
}
SearchResultsComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-search-results',
                template: "<c8y-title>\n  <span translate class=\"p-r-4\">Search</span>\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"searchTerm\"\n    [translateParams]=\"{\n      searchHint: searchTerm\n    }\"\n    >searching \"{{ searchHint }}\"</small\n  >\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"filter\"\n    [translateParams]=\"{\n      filterHint: filter\n    }\"\n    >filtered by \"{{ filterHint }}\"</small\n  >\n</c8y-title>\n\n<c8y-search-grid [searchText]=\"searchTerm\" [filteringName]=\"filteringName\"></c8y-search-grid>\n"
            },] }
];
SearchResultsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService }
];
SearchResultsComponent.propDecorators = {
    searchGrid: [{ type: ViewChild, args: [SearchGridComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,