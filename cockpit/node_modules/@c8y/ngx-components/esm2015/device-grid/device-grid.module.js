import { NgModule } from '@angular/core';
import { CommonModule, DataGridModule, DeviceStatusModule, FormsModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { DeviceGridComponent } from './device-grid.component';
import { DeviceGridService } from './device-grid.service';
import { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';
import { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';
import { StatusCellRendererComponent } from './columns/status.cell-renderer.component';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { ModelCellRendererComponent } from './columns/model.cell-renderer.component';
import { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';
import { GroupCellRendererComponent } from './columns/group.cell-renderer.component';
import { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';
import { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';
import { SchemaFormComponent } from './schema-form.component';
import { ColumnUtilService } from './columns/column-util.service';
import * as ɵngcc0 from '@angular/core';
export class DeviceGridModule {
}
DeviceGridModule.ɵfac = function DeviceGridModule_Factory(t) { return new (t || DeviceGridModule)(); };
DeviceGridModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DeviceGridModule });
DeviceGridModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [DeviceGridService, ColumnUtilService], imports: [[CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceGridModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],
                declarations: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                exports: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                providers: [DeviceGridService, ColumnUtilService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DeviceGridModule, { declarations: function () { return [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent,
        SchemaFormComponent]; }, imports: function () { return [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule]; }, exports: function () { return [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent,
        SchemaFormComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC9kZXZpY2UtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUV4RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM1RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUE0Q2xFLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRzs0Q0ExQy9CLFFBQVEsU0FBQyxrQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUU7VUFBVyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQyxrQkFDN0Y7T0FBWSxFQUFFLHNCQUNaLG1CQUFtQixzQkFDbkIsa0NBQWtDLHNCQUNsQyxtQ0FBbUMsc0JBQ25DLDJCQUEyQjttQkFDM0IseUJBQXlCLHNCQUN6QiwwQkFBMEI7RUFDMUI7V0FBaUM7Z0JBQ2pDLDBCQUEwQixzQkFDMUIscUNBQXFDO1lBQ3JDO09BQTJCLHNCQUMzQjtPQUFtQixrQkFDcEIsa0JBQ0QsT0FBTyxFQUFFO2tCQUNQLG1CQUFtQjtFQUNuQixrQ0FBa0M7U0FDbEMsbUNBQW1DO21CQUNuQywyQkFBMkI7b0JBQzNCLHlCQUF5QjtZQUN6QiwwQkFBMEI7WUFDMUIsaUNBQWlDO1FBQ2pDLDBCQUEwQjtPQUMxQjtJQUFxQztPQUNyQztPQUEyQixzQkFDM0I7T0FBbUIsa0JBQ3BCLGtCQUNEO0VBQWUsRUFBRSxzQkFDZixtQkFBbUI7VUFDbkIsa0NBQWtDO2lCQUNsQztLQUFtQyxzQkFDbkM7TUFBMkIsc0JBQzNCLHlCQUF5QjtvQkFDekIsMEJBQTBCO29CQUMxQixpQ0FBaUM7Z0JBQ2pDLDBCQUEwQjtlQUMxQjtZQUFxQztlQUNyQztPQUEyQixrQkFDNUI7RUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQztTQUNsRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUNBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIERhdGFHcmlkTW9kdWxlLCBEZXZpY2VTdGF0dXNNb2R1bGUsIEZvcm1zTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcbmltcG9ydCB7IERldmljZUdyaWRDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkU2VydmljZSB9IGZyb20gJy4vZGV2aWNlLWdyaWQuc2VydmljZSc7XG5cbmltcG9ydCB7IEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvZ3JvdXAuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50JztcblxuaW1wb3J0IHsgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL3N0YXR1cy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL25hbWUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvbW9kZWwuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL3NlcmlhbC1udW1iZXIuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvZ3JvdXAuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9yZWdpc3RyYXRpb24tZGF0ZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFNjaGVtYUZvcm1Db21wb25lbnQgfSBmcm9tICcuL3NjaGVtYS1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2x1bW5VdGlsU2VydmljZSB9IGZyb20gJy4vY29sdW1ucy9jb2x1bW4tdXRpbC5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIERldmljZVN0YXR1c01vZHVsZSwgRGF0YUdyaWRNb2R1bGUsIEFzc2V0U2VsZWN0b3JNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNjaGVtYUZvcm1Db21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIERldmljZUdyaWRDb21wb25lbnQsXG4gICAgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2NoZW1hRm9ybUNvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50XG4gIF0sXG4gIHByb3ZpZGVyczogW0RldmljZUdyaWRTZXJ2aWNlLCBDb2x1bW5VdGlsU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JpZE1vZHVsZSB7fVxuIl19