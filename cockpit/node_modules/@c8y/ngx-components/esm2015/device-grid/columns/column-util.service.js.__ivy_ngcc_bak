import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { map, remove, sortBy } from 'lodash-es';
/**
 * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
 */
export class ColumnUtilService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    getAlarmsHref(device) {
        return `${this.getHref(device)}/alarms`;
    }
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}group/${groupOrDevice.id}`;
        }
        return `${prefix}device/${groupOrDevice.id}`;
    }
    getParentsNames(device, featuredParentId) {
        const assetParentsReferences = device.assetParents.references;
        const assetParents = map(assetParentsReferences, 'managedObject');
        const sortedByName = sortBy(assetParents, ['name']);
        const featuredItems = remove(sortedByName, { id: featuredParentId });
        const items = featuredItems.concat(sortedByName);
        const names = map(items, 'name');
        return names.join(', ');
    }
    getModel(device) {
        const hardware = this.getHardware(device);
        return hardware && hardware.model;
    }
    getProperName(device) {
        const { id, name } = device;
        return name ? name : this.translateService.instant('Device {{id}}', { id });
    }
    getSerialNumber(device) {
        const hardware = this.getHardware(device);
        const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
}
ColumnUtilService.decorators = [
    { type: Injectable }
];
ColumnUtilService.ctorParameters = () => [
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1ncmlkL2NvbHVtbnMvY29sdW1uLXV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVoRDs7R0FFRztBQUdILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFBc0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRTVELGFBQWEsQ0FBQyxNQUFzQjtRQUNsQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQzFDLENBQUM7SUFFRCxPQUFPLENBQUMsYUFBNkIsRUFBRSxNQUFNLEdBQUcsSUFBSTtRQUNsRCxJQUFJLGFBQWEsQ0FBQyxpQkFBaUIsSUFBSSxhQUFhLENBQUMsa0JBQWtCLEVBQUU7WUFDdkUsT0FBTyxHQUFHLE1BQU0sU0FBUyxhQUFhLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDN0M7UUFDRCxPQUFPLEdBQUcsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQXNCLEVBQUUsZ0JBQWtDO1FBQ3hFLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDOUQsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLHNCQUFzQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUFzQjtRQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE9BQU8sUUFBUSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVELGFBQWEsQ0FBQyxNQUFzQjtRQUNsQyxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFzQjtRQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDN0UsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLFdBQVcsQ0FBQyxNQUFzQjtRQUN4QyxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ2hELENBQUMsQ0FBQywwREFBMEQ7WUFDNUQsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUNuQixPQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU8sUUFBUSxDQUFDLE1BQXNCO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyx3Q0FBd0MsQ0FBQztJQUNsRSxDQUFDOzs7WUFsREYsVUFBVTs7O1lBUEYsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBtYXAsIHJlbW92ZSwgc29ydEJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuLyoqXG4gKiBTZXJ2aWNlIGNvbnRhaW5zIGxvZ2ljIGV4dHJhY3RlZCBmcm9tIHRoZSBkZXZpY2UtZ3JpZCBzZXJ2aWNlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgTVRNLTQwMjM5LlxuICovXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5VdGlsU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIGdldEFsYXJtc0hyZWYoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0SHJlZihkZXZpY2UpfS9hbGFybXNgO1xuICB9XG5cbiAgZ2V0SHJlZihncm91cE9yRGV2aWNlOiBJTWFuYWdlZE9iamVjdCwgcHJlZml4ID0gJyMvJyk6IHN0cmluZyB7XG4gICAgaWYgKGdyb3VwT3JEZXZpY2UuYzh5X0lzRGV2aWNlR3JvdXAgfHwgZ3JvdXBPckRldmljZS5jOHlfSXNEeW5hbWljR3JvdXApIHtcbiAgICAgIHJldHVybiBgJHtwcmVmaXh9Z3JvdXAvJHtncm91cE9yRGV2aWNlLmlkfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtwcmVmaXh9ZGV2aWNlLyR7Z3JvdXBPckRldmljZS5pZH1gO1xuICB9XG5cbiAgZ2V0UGFyZW50c05hbWVzKGRldmljZTogSU1hbmFnZWRPYmplY3QsIGZlYXR1cmVkUGFyZW50SWQ/OiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFzc2V0UGFyZW50c1JlZmVyZW5jZXMgPSBkZXZpY2UuYXNzZXRQYXJlbnRzLnJlZmVyZW5jZXM7XG4gICAgY29uc3QgYXNzZXRQYXJlbnRzID0gbWFwKGFzc2V0UGFyZW50c1JlZmVyZW5jZXMsICdtYW5hZ2VkT2JqZWN0Jyk7XG4gICAgY29uc3Qgc29ydGVkQnlOYW1lID0gc29ydEJ5KGFzc2V0UGFyZW50cywgWyduYW1lJ10pO1xuICAgIGNvbnN0IGZlYXR1cmVkSXRlbXMgPSByZW1vdmUoc29ydGVkQnlOYW1lLCB7IGlkOiBmZWF0dXJlZFBhcmVudElkIH0pO1xuICAgIGNvbnN0IGl0ZW1zID0gZmVhdHVyZWRJdGVtcy5jb25jYXQoc29ydGVkQnlOYW1lKTtcbiAgICBjb25zdCBuYW1lcyA9IG1hcChpdGVtcywgJ25hbWUnKTtcbiAgICByZXR1cm4gbmFtZXMuam9pbignLCAnKTtcbiAgfVxuXG4gIGdldE1vZGVsKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhhcmR3YXJlID0gdGhpcy5nZXRIYXJkd2FyZShkZXZpY2UpO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZS5tb2RlbDtcbiAgfVxuXG4gIGdldFByb3Blck5hbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBpZCwgbmFtZSB9ID0gZGV2aWNlO1xuICAgIHJldHVybiBuYW1lID8gbmFtZSA6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdEZXZpY2Uge3tpZH19JywgeyBpZCB9KTtcbiAgfVxuXG4gIGdldFNlcmlhbE51bWJlcihkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBoYXJkd2FyZSA9IHRoaXMuZ2V0SGFyZHdhcmUoZGV2aWNlKTtcbiAgICBjb25zdCBzZXJpYWxQcm9wZXJ0eU5hbWUgPSB0aGlzLmlzVmVuZG1lKGRldmljZSkgPyAnc2VyaWFsJyA6ICdzZXJpYWxOdW1iZXInO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZVtzZXJpYWxQcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIYXJkd2FyZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogYW55IHtcbiAgICBjb25zdCBoYXJkd2FyZVByb3BlcnR5TmFtZSA9IHRoaXMuaXNWZW5kbWUoZGV2aWNlKVxuICAgICAgPyAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8nXG4gICAgICA6ICdjOHlfSGFyZHdhcmUnO1xuICAgIHJldHVybiBkZXZpY2UgJiYgZGV2aWNlW2hhcmR3YXJlUHJvcGVydHlOYW1lXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWZW5kbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBkZXZpY2UudHlwZSA9PT0gJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX1ZlbmRpbmdNYWNoaW5lJztcbiAgfVxufVxuIl19