import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { map, remove, sortBy } from 'lodash-es';
/**
 * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
export class ColumnUtilService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    getAlarmsHref(device) {
        return `${this.getHref(device)}/alarms`;
    }
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}group/${groupOrDevice.id}`;
        }
        return `${prefix}device/${groupOrDevice.id}`;
    }
    getParentsNames(device, featuredParentId) {
        const assetParentsReferences = device.assetParents.references;
        const assetParents = map(assetParentsReferences, 'managedObject');
        const sortedByName = sortBy(assetParents, ['name']);
        const featuredItems = remove(sortedByName, { id: featuredParentId });
        const items = featuredItems.concat(sortedByName);
        const names = map(items, 'name');
        return names.join(', ');
    }
    getModel(device) {
        const hardware = this.getHardware(device);
        return hardware && hardware.model;
    }
    getProperName(device) {
        const { id, name } = device;
        return name ? name : this.translateService.instant('Device {{id}}', { id });
    }
    getSerialNumber(device) {
        const hardware = this.getHardware(device);
        const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
}
ColumnUtilService.ɵfac = function ColumnUtilService_Factory(t) { return new (t || ColumnUtilService)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService)); };
ColumnUtilService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ColumnUtilService, factory: ColumnUtilService.ɵfac });
ColumnUtilService.ctorParameters = () => [
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnUtilService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2aWNlLWdyaWQvY29sdW1ucy9jb2x1bW4tdXRpbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWhEO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSCxNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBQUUsWUFBc0IsZ0JBQWtDO0FBQUksUUFBdEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLElBQUUsQ0FBQztBQUM5RCxJQUNFLGFBQWEsQ0FBQyxNQUFzQjtBQUFJLFFBQ3RDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDNUMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxPQUFPLENBQUMsYUFBNkIsRUFBRSxNQUFNLEdBQUcsSUFBSTtBQUFJLFFBQ3RELElBQUksYUFBYSxDQUFDLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRTtBQUM3RSxZQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2xELFNBQUs7QUFDTCxRQUFJLE9BQU8sR0FBRyxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2pELElBQUUsQ0FBQztBQUNILElBQ0UsZUFBZSxDQUFDLE1BQXNCLEVBQUUsZ0JBQWtDO0FBQUksUUFDNUUsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztBQUNsRSxRQUFJLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUN0RSxRQUFJLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQUksTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUFDekUsUUFBSSxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JELFFBQUksTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyQyxRQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLFFBQVEsQ0FBQyxNQUFzQjtBQUFJLFFBQ2pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsUUFBSSxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUNILElBQ0UsYUFBYSxDQUFDLE1BQXNCO0FBQUksUUFDdEMsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUM7QUFDaEMsUUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEYsSUFBRSxDQUFDO0FBQ0gsSUFDRSxlQUFlLENBQUMsTUFBc0I7QUFBSSxRQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLFFBQUksTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztBQUNqRixRQUFJLE9BQU8sUUFBUSxJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3BELElBQUUsQ0FBQztBQUNILElBQ1UsV0FBVyxDQUFDLE1BQXNCO0FBQUksUUFDNUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUN0RCxZQUFNLENBQUMsQ0FBQywwREFBMEQ7QUFDbEUsWUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQ3ZCLFFBQUksT0FBTyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDbEQsSUFBRSxDQUFDO0FBQ0gsSUFDVSxRQUFRLENBQUMsTUFBc0I7QUFDekMsUUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssd0NBQXdDLENBQUM7QUFDcEUsSUFBRSxDQUFDO0FBQ0g7NkNBbkRDLFVBQVU7aUlBQ1Q7QUFBQztBQUNVLFlBVEosZ0JBQWdCO0FBQUc7OztpRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBtYXAsIHJlbW92ZSwgc29ydEJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuLyoqXG4gKiBTZXJ2aWNlIGNvbnRhaW5zIGxvZ2ljIGV4dHJhY3RlZCBmcm9tIHRoZSBkZXZpY2UtZ3JpZCBzZXJ2aWNlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgTVRNLTQwMjM5LlxuICovXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5VdGlsU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIGdldEFsYXJtc0hyZWYoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0SHJlZihkZXZpY2UpfS9hbGFybXNgO1xuICB9XG5cbiAgZ2V0SHJlZihncm91cE9yRGV2aWNlOiBJTWFuYWdlZE9iamVjdCwgcHJlZml4ID0gJyMvJyk6IHN0cmluZyB7XG4gICAgaWYgKGdyb3VwT3JEZXZpY2UuYzh5X0lzRGV2aWNlR3JvdXAgfHwgZ3JvdXBPckRldmljZS5jOHlfSXNEeW5hbWljR3JvdXApIHtcbiAgICAgIHJldHVybiBgJHtwcmVmaXh9Z3JvdXAvJHtncm91cE9yRGV2aWNlLmlkfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtwcmVmaXh9ZGV2aWNlLyR7Z3JvdXBPckRldmljZS5pZH1gO1xuICB9XG5cbiAgZ2V0UGFyZW50c05hbWVzKGRldmljZTogSU1hbmFnZWRPYmplY3QsIGZlYXR1cmVkUGFyZW50SWQ/OiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFzc2V0UGFyZW50c1JlZmVyZW5jZXMgPSBkZXZpY2UuYXNzZXRQYXJlbnRzLnJlZmVyZW5jZXM7XG4gICAgY29uc3QgYXNzZXRQYXJlbnRzID0gbWFwKGFzc2V0UGFyZW50c1JlZmVyZW5jZXMsICdtYW5hZ2VkT2JqZWN0Jyk7XG4gICAgY29uc3Qgc29ydGVkQnlOYW1lID0gc29ydEJ5KGFzc2V0UGFyZW50cywgWyduYW1lJ10pO1xuICAgIGNvbnN0IGZlYXR1cmVkSXRlbXMgPSByZW1vdmUoc29ydGVkQnlOYW1lLCB7IGlkOiBmZWF0dXJlZFBhcmVudElkIH0pO1xuICAgIGNvbnN0IGl0ZW1zID0gZmVhdHVyZWRJdGVtcy5jb25jYXQoc29ydGVkQnlOYW1lKTtcbiAgICBjb25zdCBuYW1lcyA9IG1hcChpdGVtcywgJ25hbWUnKTtcbiAgICByZXR1cm4gbmFtZXMuam9pbignLCAnKTtcbiAgfVxuXG4gIGdldE1vZGVsKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhhcmR3YXJlID0gdGhpcy5nZXRIYXJkd2FyZShkZXZpY2UpO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZS5tb2RlbDtcbiAgfVxuXG4gIGdldFByb3Blck5hbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBpZCwgbmFtZSB9ID0gZGV2aWNlO1xuICAgIHJldHVybiBuYW1lID8gbmFtZSA6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdEZXZpY2Uge3tpZH19JywgeyBpZCB9KTtcbiAgfVxuXG4gIGdldFNlcmlhbE51bWJlcihkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBoYXJkd2FyZSA9IHRoaXMuZ2V0SGFyZHdhcmUoZGV2aWNlKTtcbiAgICBjb25zdCBzZXJpYWxQcm9wZXJ0eU5hbWUgPSB0aGlzLmlzVmVuZG1lKGRldmljZSkgPyAnc2VyaWFsJyA6ICdzZXJpYWxOdW1iZXInO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZVtzZXJpYWxQcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIYXJkd2FyZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogYW55IHtcbiAgICBjb25zdCBoYXJkd2FyZVByb3BlcnR5TmFtZSA9IHRoaXMuaXNWZW5kbWUoZGV2aWNlKVxuICAgICAgPyAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8nXG4gICAgICA6ICdjOHlfSGFyZHdhcmUnO1xuICAgIHJldHVybiBkZXZpY2UgJiYgZGV2aWNlW2hhcmR3YXJlUHJvcGVydHlOYW1lXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWZW5kbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBkZXZpY2UudHlwZSA9PT0gJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX1ZlbmRpbmdNYWNoaW5lJztcbiAgfVxufVxuIl19