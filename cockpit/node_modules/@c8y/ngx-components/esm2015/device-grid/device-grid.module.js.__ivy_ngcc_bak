import { NgModule } from '@angular/core';
import { CommonModule, DataGridModule, DeviceStatusModule, FormsModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { DeviceGridComponent } from './device-grid.component';
import { DeviceGridService } from './device-grid.service';
import { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';
import { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';
import { StatusCellRendererComponent } from './columns/status.cell-renderer.component';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { ModelCellRendererComponent } from './columns/model.cell-renderer.component';
import { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';
import { GroupCellRendererComponent } from './columns/group.cell-renderer.component';
import { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';
import { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';
import { SchemaFormComponent } from './schema-form.component';
import { ColumnUtilService } from './columns/column-util.service';
export class DeviceGridModule {
}
DeviceGridModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],
                declarations: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                exports: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent,
                    SchemaFormComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    BaseFilteringFormRendererComponent,
                    GroupFilteringFormRendererComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                providers: [DeviceGridService, ColumnUtilService]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWdyaWQvZGV2aWNlLWdyaWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDdEcsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFFeEcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDbkYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDckYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDcEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDckYsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDNUcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUE0Q2xFLE1BQU0sT0FBTyxnQkFBZ0I7OztZQTFDNUIsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixDQUFDO2dCQUM3RixZQUFZLEVBQUU7b0JBQ1osbUJBQW1CO29CQUNuQixrQ0FBa0M7b0JBQ2xDLG1DQUFtQztvQkFDbkMsMkJBQTJCO29CQUMzQix5QkFBeUI7b0JBQ3pCLDBCQUEwQjtvQkFDMUIsaUNBQWlDO29CQUNqQywwQkFBMEI7b0JBQzFCLHFDQUFxQztvQkFDckMsMkJBQTJCO29CQUMzQixtQkFBbUI7aUJBQ3BCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxtQkFBbUI7b0JBQ25CLGtDQUFrQztvQkFDbEMsbUNBQW1DO29CQUNuQywyQkFBMkI7b0JBQzNCLHlCQUF5QjtvQkFDekIsMEJBQTBCO29CQUMxQixpQ0FBaUM7b0JBQ2pDLDBCQUEwQjtvQkFDMUIscUNBQXFDO29CQUNyQywyQkFBMkI7b0JBQzNCLG1CQUFtQjtpQkFDcEI7Z0JBQ0QsZUFBZSxFQUFFO29CQUNmLG1CQUFtQjtvQkFDbkIsa0NBQWtDO29CQUNsQyxtQ0FBbUM7b0JBQ25DLDJCQUEyQjtvQkFDM0IseUJBQXlCO29CQUN6QiwwQkFBMEI7b0JBQzFCLGlDQUFpQztvQkFDakMsMEJBQTBCO29CQUMxQixxQ0FBcUM7b0JBQ3JDLDJCQUEyQjtpQkFDNUI7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUM7YUFDbEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCBEYXRhR3JpZE1vZHVsZSwgRGV2aWNlU3RhdHVzTW9kdWxlLCBGb3Jtc01vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQXNzZXRTZWxlY3Rvck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2UtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICcuL2RldmljZS1ncmlkLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2Jhc2UuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2dyb3VwLmZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9uYW1lLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL21vZGVsLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zZXJpYWwtbnVtYmVyLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2dyb3VwLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvcmVnaXN0cmF0aW9uLWRhdGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2FsYXJtcy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTY2hlbWFGb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9zY2hlbWEtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sdW1uVXRpbFNlcnZpY2UgfSBmcm9tICcuL2NvbHVtbnMvY29sdW1uLXV0aWwuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBEZXZpY2VTdGF0dXNNb2R1bGUsIERhdGFHcmlkTW9kdWxlLCBBc3NldFNlbGVjdG9yTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgICBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTY2hlbWFGb3JtQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNjaGVtYUZvcm1Db21wb25lbnRcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgICBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtEZXZpY2VHcmlkU2VydmljZSwgQ29sdW1uVXRpbFNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUdyaWRNb2R1bGUge31cbiJdfQ==