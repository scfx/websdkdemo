import { Directive, ElementRef, Injector, Input } from '@angular/core';
import { UpgradeComponent } from '@angular/upgrade/static';
// TODO: MTM-31785: find replacement for schema-form ng1 library
import * as ɵngcc0 from '@angular/core';
export class SchemaFormComponent extends UpgradeComponent {
    constructor(elementRef, injector) {
        super('c8ySchemaForm', elementRef, injector);
    }
}
SchemaFormComponent.ɵfac = function SchemaFormComponent_Factory(t) { return new (t || SchemaFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
SchemaFormComponent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SchemaFormComponent, selectors: [["c8y-schema-form"]], inputs: { schema: "schema", model: "model", inputForm: ["form", "inputForm"], inputOptions: ["options", "inputOptions"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
SchemaFormComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
SchemaFormComponent.propDecorators = {
    schema: [{ type: Input }],
    model: [{ type: Input }],
    inputForm: [{ type: Input, args: ['form',] }],
    inputOptions: [{ type: Input, args: ['options',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SchemaFormComponent, [{
        type: Directive,
        args: [{
                selector: 'c8y-schema-form'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Injector }]; }, { schema: [{
            type: Input
        }], model: [{
            type: Input
        }], inputForm: [{
            type: Input,
            args: ['form']
        }], inputOptions: [{
            type: Input,
            args: ['options']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC9zY2hlbWEtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUUzRCxnRUFBZ0U7O0FBSWhFLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxnQkFBZ0I7QUFDekQsSUFLRSxZQUFZLFVBQXNCLEVBQUUsUUFBa0I7QUFDeEQsUUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSDsrQ0FaQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGlCQUFpQixjQUM1Qjs2U0FDSTtBQUFDO0FBQTZDLFlBUC9CLFVBQVU7QUFBSSxZQUFGLFFBQVE7QUFBRztBQUFHO0FBQ2pDLHFCQU9WLEtBQUs7QUFBSyxvQkFDVixLQUFLO0FBQUssd0JBQ1YsS0FBSyxTQUFDLE1BQU07QUFBTywyQkFDbkIsS0FBSyxTQUFDLFNBQVM7QUFBTTs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVwZ3JhZGVDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci91cGdyYWRlL3N0YXRpYyc7XG5cbi8vIFRPRE86IE1UTS0zMTc4NTogZmluZCByZXBsYWNlbWVudCBmb3Igc2NoZW1hLWZvcm0gbmcxIGxpYnJhcnlcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2M4eS1zY2hlbWEtZm9ybSdcbn0pXG5leHBvcnQgY2xhc3MgU2NoZW1hRm9ybUNvbXBvbmVudCBleHRlbmRzIFVwZ3JhZGVDb21wb25lbnQge1xuICBASW5wdXQoKSBzY2hlbWE6IGFueTtcbiAgQElucHV0KCkgbW9kZWw6IGFueTtcbiAgQElucHV0KCdmb3JtJykgaW5wdXRGb3JtPzogYW55O1xuICBASW5wdXQoJ29wdGlvbnMnKSBpbnB1dE9wdGlvbnM/OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgc3VwZXIoJ2M4eVNjaGVtYUZvcm0nLCBlbGVtZW50UmVmLCBpbmplY3Rvcik7XG4gIH1cbn1cbiJdfQ==