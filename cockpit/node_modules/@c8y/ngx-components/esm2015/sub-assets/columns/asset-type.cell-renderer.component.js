import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/ngx-components/assets-navigator';
import * as ɵngcc3 from '@angular/common';

function AssetTypeCellRendererComponent_device_status_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "device-status", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mo", ctx_r0.context.item);
} }
function AssetTypeCellRendererComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 3);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.iconTitle));
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r1.groupIcon);
} }
export class AssetTypeCellRendererComponent {
    constructor(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    ngOnInit() {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    }
}
AssetTypeCellRendererComponent.ɵfac = function AssetTypeCellRendererComponent_Factory(t) { return new (t || AssetTypeCellRendererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CellRendererContext), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DeviceGroupService)); };
AssetTypeCellRendererComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AssetTypeCellRendererComponent, selectors: [["ng-component"]], decls: 2, vars: 2, consts: [["class", "m-l-8", 3, "mo", 4, "ngIf"], ["class", "m-l-8 c8y-icon-duocolor", 3, "c8yIcon", "title", 4, "ngIf"], [1, "m-l-8", 3, "mo"], [1, "m-l-8", "c8y-icon-duocolor", 3, "c8yIcon", "title"]], template: function AssetTypeCellRendererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AssetTypeCellRendererComponent_device_status_0_Template, 1, 1, "device-status", 0);
        ɵngcc0.ɵɵtemplate(1, AssetTypeCellRendererComponent_i_1_Template, 2, 4, "i", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDevice);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isAnyGroup || !ctx.isDevice);
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.DeviceStatusComponent, ɵngcc1.IconDirective], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
AssetTypeCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGroupService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AssetTypeCellRendererComponent, [{
        type: Component,
        args: [{
                template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
            }]
    }], function () { return [{ type: ɵngcc1.CellRendererContext }, { type: ɵngcc2.DeviceGroupService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy9jb2x1bW5zL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSzFFLE1BQU0sT0FBTyw4QkFBOEI7QUFBRyxJQUs1QyxZQUNTLE9BQTRCLEVBQzNCLGtCQUFzQztBQUMvQyxRQUZRLFlBQU8sR0FBUCxPQUFPLENBQXFCO0FBQUMsUUFDNUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUNsRCxJQUFLLENBQUM7QUFDTixJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVFLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEUsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyRSxRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBQ0gsSUFDVSxZQUFZLENBQUMsSUFBWTtBQUNuQyxRQUFJLFFBQVEsSUFBSSxFQUFFO0FBQ2xCLFlBQU0sS0FBSyxXQUFXO0FBQ3RCLGdCQUFRLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLFlBQU0sS0FBSyxpQkFBaUI7QUFDNUIsZ0JBQVEsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEMsWUFBTSxLQUFLLDJCQUEyQjtBQUN0QyxnQkFBUSxPQUFPLHVCQUF1QixDQUFDO0FBQ3ZDLFlBQU0sS0FBSyxrQkFBa0I7QUFDN0IsZ0JBQVEsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDdkMsWUFBTTtBQUNOLGdCQUFRLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDswREFsQ0MsU0FBUyxTQUFDLGtCQUNUO2tHQUF3RCxjQUN6RDs7Ozs7Ozs4SUFDSTtBQUFDO0FBQXdELFlBTnJELG1CQUFtQjtBQUFJLFlBQ3ZCLGtCQUFrQjtBQUFHOzs7Ozs7eUhBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcm91cFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2Fzc2V0cy1uYXZpZ2F0b3InO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzZXRUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZ3JvdXBJY29uOiBzdHJpbmc7XG4gIGlzQW55R3JvdXA6IGJvb2xlYW47XG4gIGlzRGV2aWNlOiBib29sZWFuO1xuICBpY29uVGl0bGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbnRleHQ6IENlbGxSZW5kZXJlckNvbnRleHQsXG4gICAgcHJpdmF0ZSBkZXZpY2VHcm91cFNlcnZpY2U6IERldmljZUdyb3VwU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pc0FueUdyb3VwID0gdGhpcy5kZXZpY2VHcm91cFNlcnZpY2UuaXNBbnlHcm91cCh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pc0RldmljZSA9IHRoaXMuZGV2aWNlR3JvdXBTZXJ2aWNlLmlzRGV2aWNlKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmdyb3VwSWNvbiA9IHRoaXMuZGV2aWNlR3JvdXBTZXJ2aWNlLmljb24odGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaWNvblRpdGxlID0gdGhpcy5nZXRJY29uVGl0bGUodGhpcy5ncm91cEljb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJY29uVGl0bGUoaWNvbjogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChpY29uKSB7XG4gICAgICBjYXNlICdjOHktZ3JvdXAnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnR3JvdXAnKTtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1zbWFydCc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdTbWFydCBncm91cCcpO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXJlbW90ZS1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiAnSW5hY3RpdmUgcmVtb3RlIGdyb3VwJztcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1yZW1vdGUnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnUmVtb3RlIGdyb3VwJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnQ2hpbGQgZGV2aWNlJyk7XG4gICAgfVxuICB9XG59XG4iXX0=