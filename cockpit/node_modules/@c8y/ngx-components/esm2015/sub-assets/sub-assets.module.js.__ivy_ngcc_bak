import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AddGroupModule } from './add-group/add-group.module';
import { AssetTypeCellRendererComponent } from './columns/asset-type.cell-renderer.component';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { GroupInfoComponent } from './group-info.component';
import { GroupsComponent } from './groups.component';
import { SubAssetsGridComponent } from './sub-assets-grid.component';
import { SubAssetsComponent } from './sub-assets.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import { AssignDevicesComponent } from './assign-devices/assign-devices.component';
import { AssignChildDevicesComponent } from './assign-devices/assign-child-devices.component';
const ɵ0 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
export class SubAssetsModule {
}
SubAssetsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SubAssetsComponent,
                    SubAssetsGridComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    GroupInfoComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent,
                    AssignDevicesComponent,
                    AssignChildDevicesComponent
                ],
                imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
                entryComponents: [
                    SubAssetsComponent,
                    AssetTypeCellRendererComponent,
                    GroupsComponent,
                    DeleteAssetsModalComponent,
                    UnassignModalComponent
                ],
                exports: [],
                providers: [
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    SubAssetsService
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWFzc2V0cy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zdWItYXNzZXRzL3N1Yi1hc3NldHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDOUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO1dBMEI5RTtJQUNSO1FBQ0UsT0FBTyxFQUFFLFdBQVcsQ0FBQyxLQUFLO1FBQzFCLElBQUksRUFBRSxXQUFXO1FBQ2pCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUMzQixTQUFTLEVBQUUsa0JBQWtCO0tBQzlCO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsT0FBTztRQUNiLFNBQVMsRUFBRSxlQUFlO0tBQzNCO0NBQ0Y7QUFNUCxNQUFNLE9BQU8sZUFBZTs7O1lBM0MzQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLGtCQUFrQjtvQkFDbEIsc0JBQXNCO29CQUN0Qiw4QkFBOEI7b0JBQzlCLGVBQWU7b0JBQ2Ysa0JBQWtCO29CQUNsQiwwQkFBMEI7b0JBQzFCLHNCQUFzQjtvQkFDdEIsc0JBQXNCO29CQUN0QiwyQkFBMkI7aUJBQzVCO2dCQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsYUFBYSxDQUFDO2dCQUN0RSxlQUFlLEVBQUU7b0JBQ2Ysa0JBQWtCO29CQUNsQiw4QkFBOEI7b0JBQzlCLGVBQWU7b0JBQ2YsMEJBQTBCO29CQUMxQixzQkFBc0I7aUJBQ3ZCO2dCQUNELE9BQU8sRUFBRSxFQUFFO2dCQUNYLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQWFQO3dCQUNELEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNELGdCQUFnQjtpQkFDakI7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBnZXR0ZXh0LCBIT09LX1JPVVRFLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBBZGRHcm91cE1vZHVsZSB9IGZyb20gJy4vYWRkLWdyb3VwL2FkZC1ncm91cC5tb2R1bGUnO1xuaW1wb3J0IHsgQXNzZXRUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL2RlbGV0ZS1hc3NldHMtbW9kYWwvZGVsZXRlLWFzc2V0cy1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBJbmZvQ29tcG9uZW50IH0gZnJvbSAnLi9ncm91cC1pbmZvLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcm91cHNDb21wb25lbnQgfSBmcm9tICcuL2dyb3Vwcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzR3JpZENvbXBvbmVudCB9IGZyb20gJy4vc3ViLWFzc2V0cy1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNDb21wb25lbnQgfSBmcm9tICcuL3N1Yi1hc3NldHMuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c1NlcnZpY2UgfSBmcm9tICcuL3N1Yi1hc3NldHMuc2VydmljZSc7XG5pbXBvcnQgeyBVbmFzc2lnbk1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi91bmFzc2lnbi1hc3NldHMtbW9kYWwvdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2lnbkRldmljZXNDb21wb25lbnQgfSBmcm9tICcuL2Fzc2lnbi1kZXZpY2VzL2Fzc2lnbi1kZXZpY2VzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBc3NpZ25DaGlsZERldmljZXNDb21wb25lbnQgfSBmcm9tICcuL2Fzc2lnbi1kZXZpY2VzL2Fzc2lnbi1jaGlsZC1kZXZpY2VzLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICBTdWJBc3NldHNHcmlkQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgR3JvdXBJbmZvQ29tcG9uZW50LFxuICAgIERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50LFxuICAgIFVuYXNzaWduTW9kYWxDb21wb25lbnQsXG4gICAgQXNzaWduRGV2aWNlc0NvbXBvbmVudCxcbiAgICBBc3NpZ25DaGlsZERldmljZXNDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIERldmljZUdyaWRNb2R1bGUsIEFkZEdyb3VwTW9kdWxlLCBQb3BvdmVyTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgU3ViQXNzZXRzQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQsXG4gICAgVW5hc3NpZ25Nb2RhbENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5Hcm91cCxcbiAgICAgICAgICBwYXRoOiAnc3ViYXNzZXRzJyxcbiAgICAgICAgICBwcmlvcml0eTogMTAwMCxcbiAgICAgICAgICBpY29uOiAnYzh5LWdyb3VwLW9wZW4nLFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdTdWJhc3NldHMnKSxcbiAgICAgICAgICBjb21wb25lbnQ6IFN1YkFzc2V0c0NvbXBvbmVudFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogJ2dyb3VwJyxcbiAgICAgICAgICBjb21wb25lbnQ6IEdyb3Vwc0NvbXBvbmVudFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIFN1YkFzc2V0c1NlcnZpY2VcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTdWJBc3NldHNNb2R1bGUge31cbiJdfQ==