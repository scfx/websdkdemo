import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { GroupFragment } from '@c8y/ngx-components/assets-navigator';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class AddGroupService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
    }
    createGroupAndAssignDevices(groupForm, groupContextId, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            let group;
            const { name, description } = groupForm;
            const newGroupMO = this.getGroupMO(name, description, groupContextId);
            if (groupContextId) {
                group = (yield this.inventoryService.childAssetsCreate(newGroupMO, groupContextId)).data;
            }
            else {
                group = (yield this.inventoryService.create(newGroupMO)).data;
            }
            if (selectedDevices.length > 0) {
                yield this.assignDevices(group.id, selectedDevices);
            }
            return group;
        });
    }
    getGroupMO(name, description = '', groupContextId) {
        const group = {
            type: this.getGroupType(groupContextId),
            [this.GROUP_FRAGMENT_TYPE]: {},
            name,
            c8y_Notes: description
        };
        return group;
    }
    getGroupType(groupContextId) {
        return groupContextId ? GroupFragment.subGroupType : GroupFragment.groupType;
    }
    assignDevices(id, selectedDevices) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            selectedDevices.forEach(moId => {
                promises.push(this.inventoryService.childAssetsAdd(moId, id));
            });
            return yield Promise.all(promises);
        });
    }
}
AddGroupService.ɵfac = function AddGroupService_Factory(t) { return new (t || AddGroupService)(ɵngcc0.ɵɵinject(ɵngcc1.InventoryService)); };
AddGroupService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AddGroupService, factory: AddGroupService.ɵfac });
AddGroupService.ctorParameters = () => [
    { type: InventoryService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddGroupService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.InventoryService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N1Yi1hc3NldHMvYWRkLWdyb3VwL2FkZC1ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBK0IsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7QUFHckUsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFFRSxZQUFvQixnQkFBa0M7QUFBSSxRQUF0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFGL0Msd0JBQW1CLEdBQUcsbUJBQW1CLENBQUM7QUFDcEQsSUFDMkQsQ0FBQztBQUM1RCxJQUNRLDJCQUEyQixDQUMvQixTQUFvQixFQUNwQixjQUErQixFQUMvQixlQUF5QjtBQUMxQjtBQUNpQixZQUFoQixJQUFJLEtBQW1DLENBQUM7QUFDNUMsWUFBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxHQUFHLFNBQVMsQ0FBQztBQUM1QyxZQUFJLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUMxRSxZQUNJLElBQUksY0FBYyxFQUFFO0FBQ3hCLGdCQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMvRixhQUFLO0FBQUMsaUJBQUs7QUFDWCxnQkFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDcEUsYUFBSztBQUNMLFlBQ0ksSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNwQyxnQkFBTSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMxRCxhQUFLO0FBQ0wsWUFDSSxPQUFPLEtBQUssQ0FBQztBQUNqQixRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDVSxVQUFVLENBQ2hCLElBQVksRUFDWixjQUFzQixFQUFFLEVBQ3hCLGNBQStCO0FBQ2hDLFFBQ0MsTUFBTSxLQUFLLEdBQUc7QUFDbEIsWUFBTSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7QUFDN0MsWUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsWUFBTSxJQUFJO0FBQ1YsWUFBTSxTQUFTLEVBQUUsV0FBVztBQUM1QixTQUFLLENBQUM7QUFDTixRQUNJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNILElBQ1UsWUFBWSxDQUNsQixjQUErQjtBQUNoQyxRQUNDLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0FBQ2pGLElBQUUsQ0FBQztBQUNILElBQ2dCLGFBQWEsQ0FBQyxFQUFtQixFQUFFLGVBQXlCO0FBQzVFO0FBRW9DLFlBRmhDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUN4QixZQUNJLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbkMsZ0JBQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLFlBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxZQUNJLE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDsyQ0ExREMsVUFBVTsySEFDVDtBQUFDO0FBQ1UsWUFOeUIsZ0JBQWdCO0FBQUc7OztpRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUlkZW50aWZpZWQsIElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgR3JvdXBGb3JtIH0gZnJvbSAnLi9hZGQtZ3JvdXAubW9kZWwnO1xuaW1wb3J0IHsgR3JvdXBGcmFnbWVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBZGRHcm91cFNlcnZpY2Uge1xuICBwcml2YXRlIEdST1VQX0ZSQUdNRU5UX1RZUEUgPSAnYzh5X0lzRGV2aWNlR3JvdXAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSkge31cblxuICBhc3luYyBjcmVhdGVHcm91cEFuZEFzc2lnbkRldmljZXMoXG4gICAgZ3JvdXBGb3JtOiBHcm91cEZvcm0sXG4gICAgZ3JvdXBDb250ZXh0SWQ6IHN0cmluZyB8IG51bWJlcixcbiAgICBzZWxlY3RlZERldmljZXM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8SU1hbmFnZWRPYmplY3QgfCBJSWRlbnRpZmllZD4ge1xuICAgIGxldCBncm91cDogSU1hbmFnZWRPYmplY3QgfCBJSWRlbnRpZmllZDtcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uIH0gPSBncm91cEZvcm07XG4gICAgY29uc3QgbmV3R3JvdXBNTyA9IHRoaXMuZ2V0R3JvdXBNTyhuYW1lLCBkZXNjcmlwdGlvbiwgZ3JvdXBDb250ZXh0SWQpO1xuXG4gICAgaWYgKGdyb3VwQ29udGV4dElkKSB7XG4gICAgICBncm91cCA9IChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuY2hpbGRBc3NldHNDcmVhdGUobmV3R3JvdXBNTywgZ3JvdXBDb250ZXh0SWQpKS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuY3JlYXRlKG5ld0dyb3VwTU8pKS5kYXRhO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZERldmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy5hc3NpZ25EZXZpY2VzKGdyb3VwLmlkLCBzZWxlY3RlZERldmljZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JvdXBNTyhcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyA9ICcnLFxuICAgIGdyb3VwQ29udGV4dElkOiBzdHJpbmcgfCBudW1iZXJcbiAgKTogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4ge1xuICAgIGNvbnN0IGdyb3VwID0ge1xuICAgICAgdHlwZTogdGhpcy5nZXRHcm91cFR5cGUoZ3JvdXBDb250ZXh0SWQpLFxuICAgICAgW3RoaXMuR1JPVVBfRlJBR01FTlRfVFlQRV06IHt9LFxuICAgICAgbmFtZSxcbiAgICAgIGM4eV9Ob3RlczogZGVzY3JpcHRpb25cbiAgICB9O1xuXG4gICAgcmV0dXJuIGdyb3VwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHcm91cFR5cGUoXG4gICAgZ3JvdXBDb250ZXh0SWQ6IHN0cmluZyB8IG51bWJlclxuICApOiBHcm91cEZyYWdtZW50LnN1Ykdyb3VwVHlwZSB8IEdyb3VwRnJhZ21lbnQuZ3JvdXBUeXBlIHtcbiAgICByZXR1cm4gZ3JvdXBDb250ZXh0SWQgPyBHcm91cEZyYWdtZW50LnN1Ykdyb3VwVHlwZSA6IEdyb3VwRnJhZ21lbnQuZ3JvdXBUeXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhc3NpZ25EZXZpY2VzKGlkOiBzdHJpbmcgfCBudW1iZXIsIHNlbGVjdGVkRGV2aWNlczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuXG4gICAgc2VsZWN0ZWREZXZpY2VzLmZvckVhY2gobW9JZCA9PiB7XG4gICAgICBwcm9taXNlcy5wdXNoKHRoaXMuaW52ZW50b3J5U2VydmljZS5jaGlsZEFzc2V0c0FkZChtb0lkLCBpZCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxufVxuIl19