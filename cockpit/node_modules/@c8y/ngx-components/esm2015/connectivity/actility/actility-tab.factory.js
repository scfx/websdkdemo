import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { AbstractConnectivityTabFactory } from '../abstract-connectivity-tab.factory';
import { ActilityGuard } from './actility.guard';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './actility.guard';
export class ActilityTabFactory extends AbstractConnectivityTabFactory {
    constructor(router, guard) {
        super(router, guard);
        this.router = router;
        this.guard = guard;
        this.tabConfig = {
            label: gettext('Actility LoRa provider settings'),
            path: '/connectivitySettings/actility_lora_provider_settings',
            icon: 'c8y-device'
        };
    }
    config() {
        return this.tabConfig;
    }
}
ActilityTabFactory.ɵfac = function ActilityTabFactory_Factory(t) { return new (t || ActilityTabFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.ActilityGuard)); };
ActilityTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ActilityTabFactory, factory: ActilityTabFactory.ɵfac });
ActilityTabFactory.ctorParameters = () => [
    { type: Router },
    { type: ActilityGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActilityTabFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.ActilityGuard }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aWxpdHktdGFiLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Nvbm5lY3Rpdml0eS9hY3RpbGl0eS9hY3RpbGl0eS10YWIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFPLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBR2pELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSw4QkFBOEI7QUFDdEUsSUFNRSxZQUFzQixNQUFjLEVBQVksS0FBb0I7QUFDdEUsUUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFFBRndCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUFXLFVBQUssR0FBTCxLQUFLLENBQWU7QUFBQyxRQU43RCxjQUFTLEdBQVE7QUFDM0IsWUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0FBQ3JELFlBQUksSUFBSSxFQUFFLHVEQUF1RDtBQUNqRSxZQUFJLElBQUksRUFBRSxZQUFZO0FBQ3RCLFNBQUcsQ0FBQztBQUNKLElBR0UsQ0FBQztBQUNILElBQ1ksTUFBTTtBQUFLLFFBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMxQixJQUFFLENBQUM7QUFDSDs4Q0FmQyxVQUFVO29JQUNUO0FBQUM7QUFBNEMsWUFOdEMsTUFBTTtBQUFJLFlBR1YsYUFBYTtBQUFHOzs7dUdBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBnZXR0ZXh0LCBUYWIgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEFic3RyYWN0Q29ubmVjdGl2aXR5VGFiRmFjdG9yeSB9IGZyb20gJy4uL2Fic3RyYWN0LWNvbm5lY3Rpdml0eS10YWIuZmFjdG9yeSc7XG5pbXBvcnQgeyBBY3RpbGl0eUd1YXJkIH0gZnJvbSAnLi9hY3RpbGl0eS5ndWFyZCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY3RpbGl0eVRhYkZhY3RvcnkgZXh0ZW5kcyBBYnN0cmFjdENvbm5lY3Rpdml0eVRhYkZhY3Rvcnkge1xuICBwcml2YXRlIHRhYkNvbmZpZzogVGFiID0ge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdBY3RpbGl0eSBMb1JhIHByb3ZpZGVyIHNldHRpbmdzJyksXG4gICAgcGF0aDogJy9jb25uZWN0aXZpdHlTZXR0aW5ncy9hY3RpbGl0eV9sb3JhX3Byb3ZpZGVyX3NldHRpbmdzJyxcbiAgICBpY29uOiAnYzh5LWRldmljZSdcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIsIHByb3RlY3RlZCBndWFyZDogQWN0aWxpdHlHdWFyZCkge1xuICAgIHN1cGVyKHJvdXRlciwgZ3VhcmQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbmZpZygpOiBUYWIge1xuICAgIHJldHVybiB0aGlzLnRhYkNvbmZpZztcbiAgfVxufVxuIl19