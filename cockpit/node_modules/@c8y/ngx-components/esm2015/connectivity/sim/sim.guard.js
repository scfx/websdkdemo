import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { Permissions } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
export class SimGuard {
    constructor(permissions, applicationService) {
        this.permissions = permissions;
        this.applicationService = applicationService;
    }
    canActivate(route, state) {
        if (this.showSimProvider === undefined) {
            const hasRole = Promise.resolve(this.permissions.hasRole('ROLE_CONNECTIVITY_READ'));
            this.showSimProvider = hasRole.then((hasPermissions) => hasPermissions &&
                this.applicationService
                    .isAvailable(SimGuard.applicationName)
                    .then(result => result && result.data));
        }
        return this.showSimProvider;
    }
}
SimGuard.ɵfac = function SimGuard_Factory(t) { return new (t || SimGuard)(ɵngcc0.ɵɵinject(ɵngcc1.Permissions), ɵngcc0.ɵɵinject(ɵngcc2.ApplicationService)); };
SimGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SimGuard, factory: SimGuard.ɵfac });
SimGuard.applicationName = 'connectivity';
SimGuard.ctorParameters = () => [
    { type: Permissions },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Permissions }, { type: ɵngcc2.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltLmd1YXJkLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb25uZWN0aXZpdHkvc2ltL3NpbS5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFHbEQsTUFBTSxPQUFPLFFBQVE7QUFBRyxJQUl0QixZQUFvQixXQUF3QixFQUFVLGtCQUFzQztBQUFJLFFBQTVFLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0FBQUMsUUFBUyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsSUFBRSxDQUFDO0FBQ2xHLElBQ0UsV0FBVyxDQUFDLEtBQTZCLEVBQUUsS0FBMEI7QUFBSSxRQUN2RSxJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssU0FBUyxFQUFFO0FBQzVDLFlBQU0sTUFBTSxPQUFPLEdBQXFCLE9BQU8sQ0FBQyxPQUFPLENBQy9DLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQ25ELENBQUM7QUFDUixZQUNNLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FDakMsQ0FBQyxjQUF1QixFQUFFLEVBQUUsQ0FDMUIsY0FBYztBQUN4QixnQkFBVSxJQUFJLENBQUMsa0JBQWtCO0FBQ2pDLHFCQUFhLFdBQVcsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0FBQ2xELHFCQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQzNDLENBQUM7QUFDUixTQUFLO0FBQ0wsUUFDSSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0g7O3NHQUFDO0FBdEJ5Qix3QkFBZSxHQUFHLGNBQWMsQ0FBQyxBQUR6RDtBQUFDO0VBREYsVUFBVSxaQUMwQixZQUg1QixXQUFXO0FBQUksWUFEZixrQkFBa0I7QUFBRzs7O2lIQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2ltR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFwcGxpY2F0aW9uTmFtZSA9ICdjb25uZWN0aXZpdHknO1xuICBwcml2YXRlIHNob3dTaW1Qcm92aWRlcjogUHJvbWlzZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9ucywgcHJpdmF0ZSBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSkge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAodGhpcy5zaG93U2ltUHJvdmlkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgaGFzUm9sZTogUHJvbWlzZTxib29sZWFuPiA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucy5oYXNSb2xlKCdST0xFX0NPTk5FQ1RJVklUWV9SRUFEJylcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuc2hvd1NpbVByb3ZpZGVyID0gaGFzUm9sZS50aGVuKFxuICAgICAgICAoaGFzUGVybWlzc2lvbnM6IGJvb2xlYW4pID0+XG4gICAgICAgICAgaGFzUGVybWlzc2lvbnMgJiZcbiAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uU2VydmljZVxuICAgICAgICAgICAgLmlzQXZhaWxhYmxlKFNpbUd1YXJkLmFwcGxpY2F0aW9uTmFtZSlcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQgJiYgcmVzdWx0LmRhdGEpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNob3dTaW1Qcm92aWRlcjtcbiAgfVxufVxuIl19