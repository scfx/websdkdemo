import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class ImpactConnectivityService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact/connectivity';
        this.header = { 'Content-Type': 'application/json' };
    }
    getOptions() {
        const options = {
            method: 'GET',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    updateOptions(impactOptions) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(impactOptions)
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    deleteOptions() {
        const options = {
            method: 'DELETE',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
}
ImpactConnectivityService.ɵfac = function ImpactConnectivityService_Factory(t) { return new (t || ImpactConnectivityService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient)); };
ImpactConnectivityService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactConnectivityService, factory: ImpactConnectivityService.ɵfac });
ImpactConnectivityService.ctorParameters = () => [
    { type: FetchClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactConnectivityService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWNvbm5lY3Rpdml0eS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb25uZWN0aXZpdHkvaW1wYWN0L2ltcGFjdC1jb25uZWN0aXZpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQWlDLE1BQU0sYUFBYSxDQUFDOzs7QUFJekUsTUFBTSxPQUFPLHlCQUF5QjtBQUN0QyxJQUdFLFlBQW9CLE1BQW1CO0FBQUksUUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtBQUFDLFFBSHZCLG9CQUFlLEdBQVcsOEJBQThCLENBQUM7QUFDNUUsUUFBbUIsV0FBTSxHQUFRLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLENBQUM7QUFDeEUsSUFDNEMsQ0FBQztBQUM3QyxJQUNFLFVBQVU7QUFBSyxRQUNiLE1BQU0sT0FBTyxHQUFrQjtBQUNuQyxZQUFNLE1BQU0sRUFBRSxLQUFLO0FBQ25CLFlBQU0sT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQzFCLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRSxJQUFFLENBQUM7QUFDSCxJQUNFLGFBQWEsQ0FBQyxhQUE0QjtBQUFJLFFBQzVDLE1BQU0sT0FBTyxHQUFrQjtBQUNuQyxZQUFNLE1BQU0sRUFBRSxNQUFNO0FBQ3BCLFlBQU0sT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQzFCLFlBQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0FBQ3pDLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRSxJQUFFLENBQUM7QUFDSCxJQUNFLGFBQWE7QUFBSyxRQUNoQixNQUFNLE9BQU8sR0FBa0I7QUFDbkMsWUFBTSxNQUFNLEVBQUUsUUFBUTtBQUN0QixZQUFNLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTTtBQUMxQixTQUFLLENBQUM7QUFDTixRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakUsSUFBRSxDQUFDO0FBQ0g7cURBL0JDLFVBQVU7eUpBQ1Q7QUFBQztBQUNVLFlBTEosV0FBVztBQUFHOzs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJRmV0Y2hPcHRpb25zLCBJRmV0Y2hSZXNwb25zZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEltcGFjdE9wdGlvbnMgfSBmcm9tICcuL2ltcGFjdC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbXBhY3RDb25uZWN0aXZpdHlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtaWNyb3NlcnZpY2VVcmw6IHN0cmluZyA9ICcvc2VydmljZS9pbXBhY3QvY29ubmVjdGl2aXR5JztcbiAgcHJpdmF0ZSByZWFkb25seSBoZWFkZXI6IGFueSA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudCkge31cblxuICBnZXRPcHRpb25zKCk6IFByb21pc2U8SUZldGNoUmVzcG9uc2U+IHtcbiAgICBjb25zdCBvcHRpb25zOiBJRmV0Y2hPcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5taWNyb3NlcnZpY2VVcmx9YCwgb3B0aW9ucyk7XG4gIH1cblxuICB1cGRhdGVPcHRpb25zKGltcGFjdE9wdGlvbnM6IEltcGFjdE9wdGlvbnMpOiBQcm9taXNlPElGZXRjaFJlc3BvbnNlPiB7XG4gICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXIsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShpbXBhY3RPcHRpb25zKVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmZldGNoKGAke3RoaXMubWljcm9zZXJ2aWNlVXJsfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgZGVsZXRlT3B0aW9ucygpOiBQcm9taXNlPElGZXRjaFJlc3BvbnNlPiB7XG4gICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlclxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmZldGNoKGAke3RoaXMubWljcm9zZXJ2aWNlVXJsfWAsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=