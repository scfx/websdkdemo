import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext, toObservable } from '@c8y/ngx-components';
import { map } from 'rxjs/operators';
import { ImpactGuard } from './impact.guard';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './impact.guard';
export class ImpactTabFactory {
    constructor(router, guard) {
        this.router = router;
        this.guard = guard;
        this.config = {
            label: gettext('IMPACT provider settings'),
            path: '/connectivitySettings/impact_provider_settings',
            icon: 'plug'
        };
    }
    get() {
        return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];
    }
    tab() {
        return toObservable(this.guard.canActivate(this.router.routerState.snapshot.root, this.router.routerState.snapshot)).pipe(map(canActivate => (canActivate ? this.config : null)));
    }
}
ImpactTabFactory.ɵfac = function ImpactTabFactory_Factory(t) { return new (t || ImpactTabFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.ImpactGuard)); };
ImpactTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactTabFactory, factory: ImpactTabFactory.ɵfac });
ImpactTabFactory.ctorParameters = () => [
    { type: Router },
    { type: ImpactGuard }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactTabFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.ImpactGuard }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LXRhYi5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb25uZWN0aXZpdHkvaW1wYWN0L2ltcGFjdC10YWIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFtQixZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU3RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRzdDLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRyxJQU85QixZQUFvQixNQUFjLEVBQVUsS0FBa0I7QUFBSSxRQUE5QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFhO0FBQUMsUUFOdkQsV0FBTSxHQUFRO0FBQ3hCLFlBQUksS0FBSyxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUM5QyxZQUFJLElBQUksRUFBRSxnREFBZ0Q7QUFDMUQsWUFBSSxJQUFJLEVBQUUsTUFBTTtBQUNoQixTQUFHLENBQUM7QUFDSixJQUNtRSxDQUFDO0FBQ3BFLElBQ0UsR0FBRztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDNUUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxHQUFHO0FBQUssUUFDTixPQUFPLFlBQVksQ0FDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDakMsQ0FDRixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25FLElBQUUsQ0FBQztBQUNIOzRDQXRCQyxVQUFVOzhIQUNUO0FBQUM7QUFBMEMsWUFQcEMsTUFBTTtBQUFJLFlBSVYsV0FBVztBQUFHOzs7cUdBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBnZXR0ZXh0LCBUYWIsIFRhYkZhY3RvcnksIHRvT2JzZXJ2YWJsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSW1wYWN0R3VhcmQgfSBmcm9tICcuL2ltcGFjdC5ndWFyZCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbXBhY3RUYWJGYWN0b3J5IGltcGxlbWVudHMgVGFiRmFjdG9yeSB7XG4gIHByaXZhdGUgY29uZmlnOiBUYWIgPSB7XG4gICAgbGFiZWw6IGdldHRleHQoJ0lNUEFDVCBwcm92aWRlciBzZXR0aW5ncycpLFxuICAgIHBhdGg6ICcvY29ubmVjdGl2aXR5U2V0dGluZ3MvaW1wYWN0X3Byb3ZpZGVyX3NldHRpbmdzJyxcbiAgICBpY29uOiAncGx1ZydcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwcml2YXRlIGd1YXJkOiBJbXBhY3RHdWFyZCkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVyLnVybC5tYXRjaCgvY29ubmVjdGl2aXR5U2V0dGluZ3MvZykgPyB0aGlzLnRhYigpIDogW107XG4gIH1cblxuICB0YWIoKTogVGFiIHwgT2JzZXJ2YWJsZTxUYWI+IHtcbiAgICByZXR1cm4gdG9PYnNlcnZhYmxlKFxuICAgICAgdGhpcy5ndWFyZC5jYW5BY3RpdmF0ZShcbiAgICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3Qucm9vdCxcbiAgICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3RcbiAgICAgIClcbiAgICApLnBpcGUobWFwKGNhbkFjdGl2YXRlID0+IChjYW5BY3RpdmF0ZSA/IHRoaXMuY29uZmlnIDogbnVsbCkpKTtcbiAgfVxufVxuIl19