import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryBinaryService, OperationService, OperationStatus } from '@c8y/client';
import { AlertService, gettext, ModalService } from '@c8y/ngx-components';
import { assign } from 'lodash-es';
import { switchMap } from 'rxjs/operators';
export class DiagnosticsService {
    constructor(operationService, inventoryBinary, modalService, alertService) {
        this.operationService = operationService;
        this.inventoryBinary = inventoryBinary;
        this.modalService = modalService;
        this.alertService = alertService;
        this.fragment = 'c8y_DiagnosticReport';
    }
    isSupportedDevice(device) {
        const supportedOperations = (device && device.c8y_SupportedOperations) || [];
        return supportedOperations.includes(this.fragment);
    }
    getOperations$(device$) {
        return device$.pipe(switchMap(device => this.operationService.list({
            deviceId: device.id,
            fragmentType: this.fragment,
            dateFrom: new Date(0).toISOString(),
            dateTo: new Date(Date.now()).toISOString(),
            revert: true,
            pageSize: 10,
            withTotalPages: true
        })));
    }
    createOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = {
                deviceId,
                description: gettext('Diagnostic file request'),
                [this.fragment]: {}
            };
            try {
                yield this.operationService.create(operation);
                this.alertService.success(gettext('Diagnostic file request sent.'));
            }
            catch (error) {
                this.alertService.addServerFailure(error);
            }
        });
    }
    deleteOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.modalService.confirm(gettext('Delete diagnostic file'), gettext('You are about to delete this diagnostic file. Do you want to proceed?'), 'danger', {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                if (result) {
                    this.deleteDiagnosticsBinary(operation);
                }
            }
            catch (error) {
                // Do nothing
            }
        });
    }
    cancelOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const operationAfterUpdate = (yield this.operationService.update({
                    id: operation.id,
                    status: OperationStatus.FAILED,
                    failureReason: gettext('Operation cancelled by user.')
                })).data;
                assign(operation, operationAfterUpdate);
                this.alertService.success(gettext('Diagnostic file request cancelled.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getOperation(op) {
        if (!op) {
            return null;
        }
        return op && op[this.fragment];
    }
    deleteDiagnosticsBinary(op) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = this.getOperation(op);
            if (operation && operation.file) {
                const { file } = operation;
                try {
                    const binaryId = this.inventoryBinary.getIdFromUrl(file);
                    const result = yield this.inventoryBinary.delete(binaryId);
                    if (result) {
                        this.deleteDiagnosticsFragment(op);
                    }
                }
                catch (err) {
                    if (err.res.status === 404) {
                        // In case the file is already deleted via other means we want to delete the fragment
                        this.deleteDiagnosticsFragment(op);
                    }
                    else {
                        const msg = gettext('Could not delete the diagnostic file.');
                        this.alertService.danger(msg);
                    }
                }
            }
        });
    }
    deleteDiagnosticsFragment(op) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteOp = {
                id: op.id,
                status: op.status,
                [this.fragment]: null
            };
            try {
                const operationAfterUpdate = (yield this.operationService.update(deleteOp)).data;
                assign(op, operationAfterUpdate);
                this.alertService.success(gettext('Diagnostic file deleted.'));
            }
            catch (error) {
                this.alertService.addServerFailure(error);
            }
        });
    }
}
DiagnosticsService.decorators = [
    { type: Injectable }
];
DiagnosticsService.ctorParameters = () => [
    { type: OperationService },
    { type: InventoryBinaryService },
    { type: ModalService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,