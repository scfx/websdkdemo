import { DiagnosticsTabGuard } from './diagnostics-tab.guard';
import { ListGroupModule } from '@c8y/ngx-components';
import { RouterModule } from '@angular/router';
import { DiagnosticsService } from './diagnostics.service';
import { CoreModule, gettext, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DiagnosticsComponent } from './diagnostics.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import { RepositoryModule } from '@c8y/ngx-components/repository';
const ɵ0 = [
    {
        context: ViewContext.Device,
        path: 'diagnostics',
        component: DiagnosticsComponent,
        label: gettext('Diagnostics'),
        icon: 'stethoscope',
        canActivate: [DiagnosticsTabGuard],
        priority: 200
    }
];
export class DiagnosticsModule {
}
DiagnosticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    RouterModule,
                    CommonModule,
                    ListGroupModule,
                    RepositoryModule,
                    BsDropdownModule,
                    TooltipModule
                ],
                declarations: [DiagnosticsComponent],
                exports: [DiagnosticsComponent],
                providers: [
                    DiagnosticsService,
                    BsDropdownConfig,
                    DiagnosticsTabGuard,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGlhZ25vc3RpY3MvZGlhZ25vc3RpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFTLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztXQW9CbEQ7SUFDUjtRQUNFLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTTtRQUMzQixJQUFJLEVBQUUsYUFBYTtRQUNuQixTQUFTLEVBQUUsb0JBQW9CO1FBQy9CLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzdCLElBQUksRUFBRSxhQUFhO1FBQ25CLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1FBQ2xDLFFBQVEsRUFBRSxHQUFHO0tBQ2Q7Q0FDUztBQUtsQixNQUFNLE9BQU8saUJBQWlCOzs7WUFqQzdCLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsVUFBVTtvQkFDVixZQUFZO29CQUNaLFlBQVk7b0JBQ1osZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLGdCQUFnQjtvQkFDaEIsYUFBYTtpQkFDZDtnQkFDRCxZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7Z0JBQy9CLFNBQVMsRUFBRTtvQkFDVCxrQkFBa0I7b0JBQ2xCLGdCQUFnQjtvQkFDaEIsbUJBQW1CO29CQUNuQjt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQVVJO3dCQUNaLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWFnbm9zdGljc1RhYkd1YXJkIH0gZnJvbSAnLi9kaWFnbm9zdGljcy10YWIuZ3VhcmQnO1xuaW1wb3J0IHsgTGlzdEdyb3VwTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NTZXJ2aWNlIH0gZnJvbSAnLi9kaWFnbm9zdGljcy5zZXJ2aWNlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIEhPT0tfUk9VVEUsIFJvdXRlLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3NDb21wb25lbnQgfSBmcm9tICcuL2RpYWdub3N0aWNzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSwgQnNEcm9wZG93bkNvbmZpZyB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgTGlzdEdyb3VwTW9kdWxlLFxuICAgIFJlcG9zaXRvcnlNb2R1bGUsXG4gICAgQnNEcm9wZG93bk1vZHVsZSxcbiAgICBUb29sdGlwTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW0RpYWdub3N0aWNzQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0RpYWdub3N0aWNzQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgRGlhZ25vc3RpY3NTZXJ2aWNlLFxuICAgIEJzRHJvcGRvd25Db25maWcsXG4gICAgRGlhZ25vc3RpY3NUYWJHdWFyZCxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZSxcbiAgICAgICAgICBwYXRoOiAnZGlhZ25vc3RpY3MnLFxuICAgICAgICAgIGNvbXBvbmVudDogRGlhZ25vc3RpY3NDb21wb25lbnQsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ0RpYWdub3N0aWNzJyksXG4gICAgICAgICAgaWNvbjogJ3N0ZXRob3Njb3BlJyxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW0RpYWdub3N0aWNzVGFiR3VhcmRdLFxuICAgICAgICAgIHByaW9yaXR5OiAyMDBcbiAgICAgICAgfVxuICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGlhZ25vc3RpY3NNb2R1bGUge31cbiJdfQ==