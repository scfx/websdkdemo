import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { from } from 'rxjs';
import { flatMap } from 'rxjs/operators';
export class AppLogsService {
    constructor(client) {
        this.client = client;
        this.BASE_PATH_APPLICATION = 'application/applications';
        this.header = {
            Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
        };
    }
    getLogs$(appId, instanceName, params = {}) {
        const url = `${this.BASE_PATH_APPLICATION}/${appId}/logs/${instanceName}`;
        const defaultConfig = {
            headers: this.header,
            method: 'GET'
        };
        const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        const modifiedParams = Object.assign(Object.assign(Object.assign({}, params), (formattedDateFrom && { dateFrom: formattedDateFrom })), (formattedDateTo && { dateTo: formattedDateTo }));
        const config = params ? Object.assign(Object.assign({}, defaultConfig), { params: modifiedParams }) : Object.assign({}, defaultConfig);
        return from(this.client.fetch(url, config)).pipe(flatMap(res => res.json()));
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}
AppLogsService.decorators = [
    { type: Injectable }
];
AppLogsService.ctorParameters = () => [
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC1sb2dzL2FwcC1sb2dzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLGFBQWEsQ0FBQztBQUN6RCxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVN6QyxNQUFNLE9BQU8sY0FBYztJQUl6QixZQUFvQixNQUFtQjtRQUFuQixXQUFNLEdBQU4sTUFBTSxDQUFhO1FBSC9CLDBCQUFxQixHQUFXLDBCQUEwQixDQUFDO1FBSWpFLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixNQUFNLEVBQUUsK0VBQStFO1NBQ3hGLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWEsRUFBRSxZQUFvQixFQUFFLFNBQXdCLEVBQUU7UUFDdEUsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMscUJBQXFCLElBQUksS0FBSyxTQUFTLFlBQVksRUFBRSxDQUFDO1FBQzFFLE1BQU0sYUFBYSxHQUFrQjtZQUNuQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDcEIsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BGLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUUsTUFBTSxjQUFjLGlEQUNmLE1BQU0sR0FDTixDQUFDLGlCQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLENBQUMsR0FDdEQsQ0FBQyxlQUFlLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FDcEQsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLGlDQUFNLGFBQWEsS0FBRSxNQUFNLEVBQUUsY0FBYyxJQUFHLENBQUMsbUJBQU0sYUFBYSxDQUFFLENBQUM7UUFDNUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFVBQVUsQ0FBQyxZQUFvQjtRQUM3QixPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlDLENBQUM7OztZQS9CRixVQUFVOzs7WUFWRixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nc0pTT04gfSBmcm9tICcuL2xvZ3MubW9kZWwnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElGZXRjaE9wdGlvbnMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmbGF0TWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbnRlcmZhY2UgUmVxdWVzdFBhcmFtcyB7XG4gIGRhdGVGcm9tPztcbiAgZGF0ZVRvPztcbiAgbGltaXQ/O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwTG9nc1NlcnZpY2Uge1xuICBwcml2YXRlIEJBU0VfUEFUSF9BUFBMSUNBVElPTjogc3RyaW5nID0gJ2FwcGxpY2F0aW9uL2FwcGxpY2F0aW9ucyc7XG4gIHByaXZhdGUgaGVhZGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50KSB7XG4gICAgdGhpcy5oZWFkZXIgPSB7XG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi92bmQuY29tLm5zbi5jdW11bG9jaXR5LmFwcGxpY2F0aW9uTG9ncytqc29uO2NoYXJzZXQ9VVRGLTg7dmVyPTAuOSdcbiAgICB9O1xuICB9XG5cbiAgZ2V0TG9ncyQoYXBwSWQ6IHN0cmluZywgaW5zdGFuY2VOYW1lOiBzdHJpbmcsIHBhcmFtczogUmVxdWVzdFBhcmFtcyA9IHt9KTogT2JzZXJ2YWJsZTxMb2dzSlNPTj4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuQkFTRV9QQVRIX0FQUExJQ0FUSU9OfS8ke2FwcElkfS9sb2dzLyR7aW5zdGFuY2VOYW1lfWA7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZzogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgIH07XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZUZyb20gPSBwYXJhbXMuZGF0ZUZyb20gPyB0aGlzLmZvcm1hdERhdGUocGFyYW1zLmRhdGVGcm9tKSA6IG51bGw7XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZVRvID0gcGFyYW1zLmRhdGVUbyA/IHRoaXMuZm9ybWF0RGF0ZShwYXJhbXMuZGF0ZVRvKSA6IG51bGw7XG4gICAgY29uc3QgbW9kaWZpZWRQYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZUZyb20gJiYgeyBkYXRlRnJvbTogZm9ybWF0dGVkRGF0ZUZyb20gfSksXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZVRvICYmIHsgZGF0ZVRvOiBmb3JtYXR0ZWREYXRlVG8gfSlcbiAgICB9O1xuXG4gICAgY29uc3QgY29uZmlnID0gcGFyYW1zID8geyAuLi5kZWZhdWx0Q29uZmlnLCBwYXJhbXM6IG1vZGlmaWVkUGFyYW1zIH0gOiB7IC4uLmRlZmF1bHRDb25maWcgfTtcbiAgICByZXR1cm4gZnJvbSh0aGlzLmNsaWVudC5mZXRjaCh1cmwsIGNvbmZpZykpLnBpcGUoZmxhdE1hcChyZXMgPT4gcmVzLmpzb24oKSkpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZShkYXRlVG9Gb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVUb0Zvcm1hdCkudG9JU09TdHJpbmcoKTtcbiAgfVxufVxuIl19