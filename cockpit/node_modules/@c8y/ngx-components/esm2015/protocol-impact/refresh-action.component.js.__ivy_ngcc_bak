import { __awaiter } from "tslib";
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService, gettext } from '@c8y/ngx-components';
import { ImpactSubscriptionService } from './impact-subscription.service';
export class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
}
RefreshActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-impact-refresh-action',
                template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
            },] }
];
RefreshActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ImpactSubscriptionService },
    { type: AlertService }
];
RefreshActionComponent.propDecorators = {
    templateCopy: [{ type: ViewChild, args: ['templateCopy', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtaW1wYWN0L3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTTFFLE1BQU0sT0FBTyxzQkFBc0I7SUFJakMsWUFDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsYUFBd0MsRUFDeEMsS0FBbUI7UUFIbkIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQzFCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVLLE9BQU87O1lBQ1gsZ0VBQWdFO1lBQ2hFLDJFQUEyRTtZQUMzRSxNQUFNLEdBQUcsR0FDUCxJQUFJLENBQUMsTUFBTTtnQkFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0JBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDdkMsTUFBTSxRQUFRLEdBQVcsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRS9FLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7Z0JBQzlCLElBQUk7b0JBQ0YsTUFBTSxHQUFHLEdBQW1CLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEYsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7d0JBQzdCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztxQkFDNUM7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztxQkFDbkU7aUJBQ0Y7Z0JBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDakM7Z0JBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQzthQUNoQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1FBQ0gsQ0FBQztLQUFBOzs7WUE5Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLDBZQUE4QzthQUMvQzs7O1lBVG1ELGdCQUFnQjtZQUMzRCxNQUFNO1lBR04seUJBQXlCO1lBRHpCLFlBQVk7OzsyQkFRbEIsU0FBUyxTQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSUZldGNoUmVzcG9uc2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEltcGFjdFN1YnNjcmlwdGlvblNlcnZpY2UgfSBmcm9tICcuL2ltcGFjdC1zdWJzY3JpcHRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1pbXBhY3QtcmVmcmVzaC1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcmVmcmVzaC1hY3Rpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFJlZnJlc2hBY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZUNvcHknLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVDb3B5O1xuICByZXF1ZXN0SW5Qcm9ncmVzczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBpbXBhY3RTZXJ2aWNlOiBJbXBhY3RTdWJzY3JpcHRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy52Y1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZUNvcHkpO1xuICB9XG5cbiAgYXN5bmMgcmVmcmVzaCgpIHtcbiAgICAvLyBUT0RPIFRoaXMgaXMgb25seSBhIGRpcnR5IGhhY2sgdG8gcmV0cmlldmUgZGV2aWNlSWQgZnJvbSBVUkw7XG4gICAgLy8gSW4gZmFjdCBjb250ZXh0RGF0YSBzaG91bGQgYmUgcHJvdmlkZWQgZm9yIHRoaXMgY29tcG9uZW50IGJ5IGEgcmVzb2x2ZXI/XG4gICAgY29uc3QgdXJsOiBzdHJpbmcgPVxuICAgICAgdGhpcy5yb3V0ZXIgJiZcbiAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlICYmXG4gICAgICB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdCAmJlxuICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QudXJsO1xuICAgIGNvbnN0IGRldmljZUlkOiBzdHJpbmcgPSB1cmwgJiYgKC9eXFwvZGV2aWNlXFwvKFxcZCspXFwvLiokL2dpLmV4ZWModXJsKSB8fCBbXSlbMV07XG5cbiAgICBpZiAoZGV2aWNlSWQpIHtcbiAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzOiBJRmV0Y2hSZXNwb25zZSA9IGF3YWl0IHRoaXMuaW1wYWN0U2VydmljZS5yZWZyZXNoRGV2aWNlUmVzb3VyY2VzKGRldmljZUlkKTtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gcmVzLmpzb24gPyBhd2FpdCByZXMuanNvbigpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlcyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFsZXJ0LnN1Y2Nlc3MoZ2V0dGV4dCgnRGV2aWNlIHJlc291cmNlIHJlZnJlc2ggc2NoZWR1bGVkLicpKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbGVydC5kYW5nZXIoZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgZGV2aWNlIElEIGluIFVSTC4nKSk7XG4gICAgfVxuICB9XG59XG4iXX0=