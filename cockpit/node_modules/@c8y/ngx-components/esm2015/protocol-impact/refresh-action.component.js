import { __awaiter } from "tslib";
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService, gettext } from '@c8y/ngx-components';
import { ImpactSubscriptionService } from './impact-subscription.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from './impact-subscription.service';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@angular/common';

const _c0 = ["templateCopy"];
const _c1 = function (a0) { return { "icon-spin": a0 }; };
function RefreshActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function RefreshActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.refresh(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵtext(4, "\u00A0");
    ɵngcc0.ɵɵelementStart(5, "span", 3);
    ɵngcc0.ɵɵtext(6, "Refresh device resources");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, "Refresh device resources"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r1.requestInProgress));
} }
export class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
}
RefreshActionComponent.ɵfac = function RefreshActionComponent_Factory(t) { return new (t || RefreshActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ImpactSubscriptionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
RefreshActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RefreshActionComponent, selectors: [["c8y-impact-refresh-action"]], viewQuery: function RefreshActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateCopy = _t.first);
    } }, decls: 2, vars: 0, consts: [["templateCopy", ""], [1, "btn", "btn-link", 3, "title", "click"], ["c8yIcon", "refresh", 3, "ngClass"], ["translate", ""]], template: function RefreshActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, RefreshActionComponent_ng_template_0_Template, 7, 6, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc3.IconDirective, ɵngcc4.NgClass, ɵngcc3.C8yTranslateDirective], pipes: [ɵngcc3.C8yTranslatePipe], encapsulation: 2 });
RefreshActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ImpactSubscriptionService },
    { type: AlertService }
];
RefreshActionComponent.propDecorators = {
    templateCopy: [{ type: ViewChild, args: ['templateCopy', { read: TemplateRef, static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RefreshActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-impact-refresh-action',
                template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.Router }, { type: ɵngcc2.ImpactSubscriptionService }, { type: ɵngcc3.AlertService }]; }, { templateCopy: [{
            type: ViewChild,
            args: ['templateCopy', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1pbXBhY3QvcmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTTFFLE1BQU0sT0FBTyxzQkFBc0I7QUFBRyxJQUlwQyxZQUNVLEtBQXVCLEVBQ3ZCLE1BQWMsRUFDZCxhQUF3QyxFQUN4QyxLQUFtQjtBQUM1QixRQUpTLFVBQUssR0FBTCxLQUFLLENBQWtCO0FBQUMsUUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQTJCO0FBQUMsUUFDekMsVUFBSyxHQUFMLEtBQUssQ0FBYztBQUMvQixJQUFLLENBQUM7QUFDTixJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNILElBQ1EsT0FBTztBQUNmO0FBQThELFlBQTFELGdFQUFnRTtBQUNwRSxZQUFJLDJFQUEyRTtBQUMvRSxZQUFJLE1BQU0sR0FBRyxHQUNQLElBQUksQ0FBQyxNQUFNO0FBQ2pCLGdCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVztBQUM3QixnQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRO0FBQ3RDLGdCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7QUFDM0MsWUFBSSxNQUFNLFFBQVEsR0FBVyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkYsWUFDSSxJQUFJLFFBQVEsRUFBRTtBQUNsQixnQkFBTSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQ3BDLGdCQUFNLElBQUk7QUFDVixvQkFBUSxNQUFNLEdBQUcsR0FBbUIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlGLG9CQUFRLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO0FBQ3ZDLHdCQUFVLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDL0Qsd0JBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELHFCQUFTO0FBQUMseUJBQUs7QUFDZix3QkFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO0FBQzVFLHFCQUFTO0FBQ1QsaUJBQU87QUFBQyxnQkFBQSxPQUFPLEVBQUUsRUFBRTtBQUNuQixvQkFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLGlCQUFPO0FBQ1AsZ0JBQU0sSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztBQUNyQyxhQUFLO0FBQUMsaUJBQUs7QUFDWCxnQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7a0RBL0NDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsMkJBQTJCLGtCQUNyQzt3TkFBOEM7V0FDL0M7Ozs7OztpSkFDSTtBQUFDO0FBQWdELFlBVkYsZ0JBQWdCO0FBQUksWUFDL0QsTUFBTTtBQUFJLFlBR1YseUJBQXlCO0FBQUksWUFEN0IsWUFBWTtBQUFHO0FBQUc7QUFDbkIsMkJBT0wsU0FBUyxTQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUFNOzs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElGZXRjaFJlc3BvbnNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJbXBhY3RTdWJzY3JpcHRpb25TZXJ2aWNlIH0gZnJvbSAnLi9pbXBhY3Qtc3Vic2NyaXB0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktaW1wYWN0LXJlZnJlc2gtYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVDb3B5JywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlQ29weTtcbiAgcmVxdWVzdEluUHJvZ3Jlc3M6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgaW1wYWN0U2VydmljZTogSW1wYWN0U3Vic2NyaXB0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVDb3B5KTtcbiAgfVxuXG4gIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgLy8gVE9ETyBUaGlzIGlzIG9ubHkgYSBkaXJ0eSBoYWNrIHRvIHJldHJpZXZlIGRldmljZUlkIGZyb20gVVJMO1xuICAgIC8vIEluIGZhY3QgY29udGV4dERhdGEgc2hvdWxkIGJlIHByb3ZpZGVkIGZvciB0aGlzIGNvbXBvbmVudCBieSBhIHJlc29sdmVyP1xuICAgIGNvbnN0IHVybDogc3RyaW5nID1cbiAgICAgIHRoaXMucm91dGVyICYmXG4gICAgICB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZSAmJlxuICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QgJiZcbiAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnVybDtcbiAgICBjb25zdCBkZXZpY2VJZDogc3RyaW5nID0gdXJsICYmICgvXlxcL2RldmljZVxcLyhcXGQrKVxcLy4qJC9naS5leGVjKHVybCkgfHwgW10pWzFdO1xuXG4gICAgaWYgKGRldmljZUlkKSB7XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlczogSUZldGNoUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmltcGFjdFNlcnZpY2UucmVmcmVzaERldmljZVJlc291cmNlcyhkZXZpY2VJZCk7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uID8gYXdhaXQgcmVzLmpzb24oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoeyBkYXRhLCByZXMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ0RldmljZSByZXNvdXJjZSByZWZyZXNoIHNjaGVkdWxlZC4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoJ0NvdWxkIG5vdCBmaW5kIGRldmljZSBJRCBpbiBVUkwuJykpO1xuICAgIH1cbiAgfVxufVxuIl19