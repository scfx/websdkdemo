import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';
import { RefreshActionComponent } from './refresh-action.component';
export class ImpactActionFactory {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    get(activeRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.applicationService.isAvailable(ImpactActionFactory.applicationName)).data;
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    template: RefreshActionComponent
                });
            }
            return actions;
        });
    }
}
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.decorators = [
    { type: Injectable }
];
ImpactActionFactory.ctorParameters = () => [
    { type: ApplicationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWFjdGlvbi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtaW1wYWN0L2ltcGFjdC1hY3Rpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdwRSxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQUcsQ0FBQztJQUV4RCxHQUFHLENBQUMsV0FBNEI7O1lBQ3BDLE1BQU0sT0FBTyxHQUFvQixFQUFFLENBQUM7WUFFcEMsTUFBTSxJQUFJLEdBQ1IsQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87Z0JBQ3RELENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUk7Z0JBQzNCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDdkMsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztZQUU3QixNQUFNLGVBQWUsR0FBWSxHQUFHLENBQUMsV0FBVyxFQUFFLHNCQUFzQixDQUFDLEtBQUssYUFBYSxDQUFDO1lBRTVGLE1BQU0sdUJBQXVCLEdBQzNCLGVBQWU7Z0JBQ2YsV0FBVztnQkFDWCxXQUFXLENBQUMsc0JBQXNCO2dCQUNsQywyRkFBMkY7Z0JBQzNGLENBQUMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBRXhGLElBQUksdUJBQXVCLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ1gsUUFBUSxFQUFFLEdBQUc7b0JBQ2IsU0FBUyxFQUFFLE9BQU87b0JBQ2xCLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ2hCLENBQUMsQ0FBQzthQUNyQjtZQUVELE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7S0FBQTs7QUEvQnVCLG1DQUFlLEdBQUcsUUFBUSxDQUFDOztZQUZwRCxVQUFVOzs7WUFMRixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBY3Rpb25CYXJGYWN0b3J5LCBBY3Rpb25CYXJJdGVtIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUmVmcmVzaEFjdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcmVmcmVzaC1hY3Rpb24uY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEltcGFjdEFjdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBBY3Rpb25CYXJGYWN0b3J5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYXBwbGljYXRpb25OYW1lID0gJ2ltcGFjdCc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSkge31cblxuICBhc3luYyBnZXQoYWN0aXZlUm91dGU/OiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIGNvbnN0IGFjdGlvbnM6IEFjdGlvbkJhckl0ZW1bXSA9IFtdO1xuXG4gICAgY29uc3QgZGF0YSA9XG4gICAgICAhYWN0aXZlUm91dGUucGFyZW50IHx8IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmVSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcbiAgICBjb25zdCB7IGNvbnRleHREYXRhIH0gPSBkYXRhO1xuXG4gICAgY29uc3QgaXNEZXZpY2VJbmZvVGFiOiBib29sZWFuID0gZ2V0KGFjdGl2ZVJvdXRlLCAnc25hcHNob3QudXJsWzBdLnBhdGgnKSA9PT0gJ2RldmljZS1pbmZvJztcblxuICAgIGNvbnN0IHNob3dSZWZyZXNoQWN0aW9uQnV0dG9uOiBib29sZWFuID1cbiAgICAgIGlzRGV2aWNlSW5mb1RhYiAmJlxuICAgICAgY29udGV4dERhdGEgJiZcbiAgICAgIGNvbnRleHREYXRhLmM4eV9JbXBhY3RSZXNvdXJjZUluZm8gJiZcbiAgICAgIC8qIGNhbGwgYXBwbGljYXRpb24gc2VydmljZSBvbmx5IGZvciByZWxldmFudCBkZXZpY2VzIHRvIHJlZHVjZSBudW1iZXIgb2Ygc2VydmljZSBjYWxscyEgKi9cbiAgICAgIChhd2FpdCB0aGlzLmFwcGxpY2F0aW9uU2VydmljZS5pc0F2YWlsYWJsZShJbXBhY3RBY3Rpb25GYWN0b3J5LmFwcGxpY2F0aW9uTmFtZSkpLmRhdGE7XG5cbiAgICBpZiAoc2hvd1JlZnJlc2hBY3Rpb25CdXR0b24pIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiA1MDAsXG4gICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICAgICAgdGVtcGxhdGU6IFJlZnJlc2hBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH1cbn1cbiJdfQ==