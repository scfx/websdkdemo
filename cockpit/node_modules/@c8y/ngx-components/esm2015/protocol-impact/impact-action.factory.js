import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';
import { RefreshActionComponent } from './refresh-action.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class ImpactActionFactory {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    get(activeRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.applicationService.isAvailable(ImpactActionFactory.applicationName)).data;
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    template: RefreshActionComponent
                });
            }
            return actions;
        });
    }
}
ImpactActionFactory.ɵfac = function ImpactActionFactory_Factory(t) { return new (t || ImpactActionFactory)(ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
ImpactActionFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImpactActionFactory, factory: ImpactActionFactory.ɵfac });
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.ctorParameters = () => [
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImpactActionFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWFjdGlvbi5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1pbXBhY3QvaW1wYWN0LWFjdGlvbi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFHcEUsTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBR2pDLFlBQW9CLGtCQUFzQztBQUFJLFFBQTFDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxJQUFFLENBQUM7QUFDaEUsSUFDUSxHQUFHLENBQUMsV0FBNEI7QUFDeEM7QUFHRyxZQUhDLE1BQU0sT0FBTyxHQUFvQixFQUFFLENBQUM7QUFDeEMsWUFDSSxNQUFNLElBQUksR0FDUixDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUM5RCxnQkFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJO0FBQ25DLGdCQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0MsWUFBSSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLFlBQ0ksTUFBTSxlQUFlLEdBQVksR0FBRyxDQUFDLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxLQUFLLGFBQWEsQ0FBQztBQUNoRyxZQUNJLE1BQU0sdUJBQXVCLEdBQzNCLGVBQWU7QUFDckIsZ0JBQU0sV0FBVztBQUNqQixnQkFBTSxXQUFXLENBQUMsc0JBQXNCO0FBQ3hDLGdCQUFNLDJGQUEyRjtBQUNqRyxnQkFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM1RixZQUNJLElBQUksdUJBQXVCLEVBQUU7QUFDakMsZ0JBQU0sT0FBTyxDQUFDLElBQUksQ0FBQztBQUNuQixvQkFBUSxRQUFRLEVBQUUsR0FBRztBQUNyQixvQkFBUSxTQUFTLEVBQUUsT0FBTztBQUMxQixvQkFBUSxRQUFRLEVBQUUsc0JBQXNCO0FBQ3hDLGlCQUF3QixDQUFDLENBQUM7QUFDMUIsYUFBSztBQUNMLFlBQ0ksT0FBTyxPQUFPLENBQUM7QUFDbkIsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIOzt1SUFBQztBQWhDeUIsbUNBQWUsR0FBRyxRQUFRLENBQUMsQUFEbkQ7QUFBQztFQURGLFVBQVUsWkFDcUMsWUFOdkMsa0JBQWtCO0FBQUc7OzttRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWN0aW9uQmFyRmFjdG9yeSwgQWN0aW9uQmFySXRlbSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFJlZnJlc2hBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbXBhY3RBY3Rpb25GYWN0b3J5IGltcGxlbWVudHMgQWN0aW9uQmFyRmFjdG9yeSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFwcGxpY2F0aW9uTmFtZSA9ICdpbXBhY3QnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2UpIHt9XG5cbiAgYXN5bmMgZ2V0KGFjdGl2ZVJvdXRlPzogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCBhY3Rpb25zOiBBY3Rpb25CYXJJdGVtW10gPSBbXTtcblxuICAgIGNvbnN0IGRhdGEgPVxuICAgICAgIWFjdGl2ZVJvdXRlLnBhcmVudCB8fCBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZlUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG4gICAgY29uc3QgeyBjb250ZXh0RGF0YSB9ID0gZGF0YTtcblxuICAgIGNvbnN0IGlzRGV2aWNlSW5mb1RhYjogYm9vbGVhbiA9IGdldChhY3RpdmVSb3V0ZSwgJ3NuYXBzaG90LnVybFswXS5wYXRoJykgPT09ICdkZXZpY2UtaW5mbyc7XG5cbiAgICBjb25zdCBzaG93UmVmcmVzaEFjdGlvbkJ1dHRvbjogYm9vbGVhbiA9XG4gICAgICBpc0RldmljZUluZm9UYWIgJiZcbiAgICAgIGNvbnRleHREYXRhICYmXG4gICAgICBjb250ZXh0RGF0YS5jOHlfSW1wYWN0UmVzb3VyY2VJbmZvICYmXG4gICAgICAvKiBjYWxsIGFwcGxpY2F0aW9uIHNlcnZpY2Ugb25seSBmb3IgcmVsZXZhbnQgZGV2aWNlcyB0byByZWR1Y2UgbnVtYmVyIG9mIHNlcnZpY2UgY2FsbHMhICovXG4gICAgICAoYXdhaXQgdGhpcy5hcHBsaWNhdGlvblNlcnZpY2UuaXNBdmFpbGFibGUoSW1wYWN0QWN0aW9uRmFjdG9yeS5hcHBsaWNhdGlvbk5hbWUpKS5kYXRhO1xuXG4gICAgaWYgKHNob3dSZWZyZXNoQWN0aW9uQnV0dG9uKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogNTAwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgICAgIHRlbXBsYXRlOiBSZWZyZXNoQWN0aW9uQ29tcG9uZW50XG4gICAgICB9IGFzIEFjdGlvbkJhckl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25zO1xuICB9XG59XG4iXX0=