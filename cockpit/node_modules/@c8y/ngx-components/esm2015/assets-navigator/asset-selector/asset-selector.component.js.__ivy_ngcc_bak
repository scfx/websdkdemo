import { Component, Output, Input, EventEmitter } from '@angular/core';
import { GroupNodeService } from './group-node.service';
/**
 * Displays a hierarchical tree selector for assets.
 */
export class AssetSelectorComponent {
    /**
     * @ignore only DI
     */
    constructor(groupNodeService) {
        this.groupNodeService = groupNodeService;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onChange = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.rootNode = this.groupNodeService.createGroupNode({ root: true });
    }
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    select(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(selectedMo);
        }
        this.onChange.emit(this.selected);
    }
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    deselect(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.onChange.emit(this.selected);
    }
    getIndexOfSelected(selected, selectedMo) {
        return selected.findIndex(mo => mo.id === selectedMo.id);
    }
}
AssetSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-asset-selector',
                template: "<c8y-asset-selector-node [node]=\"rootNode\" [preselected]=\"selected\"></c8y-asset-selector-node>\n"
            },] }
];
AssetSelectorComponent.ctorParameters = () => [
    { type: GroupNodeService }
];
AssetSelectorComponent.propDecorators = {
    selected: [{ type: Input }],
    onChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYXNzZXRzLW5hdmlnYXRvci9hc3NldC1zZWxlY3Rvci9hc3NldC1zZWxlY3Rvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RDs7R0FFRztBQUtILE1BQU0sT0FBTyxzQkFBc0I7SUFjakM7O09BRUc7SUFDSCxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWhCdEQ7O1dBRUc7UUFDTSxhQUFRLEdBQXFCLEVBQUUsQ0FBQztRQUN6Qzs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztJQVNELENBQUM7SUFFMUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxVQUEwQjtRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNoQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLFVBQTBCO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxRQUF3QyxFQUFFLFVBQTBCO1FBQ3JGLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsZ0hBQThDO2FBQy9DOzs7WUFWUSxnQkFBZ0I7Ozt1QkFldEIsS0FBSzt1QkFJTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JvdXBOb2RlU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEdyb3VwTm9kZSB9IGZyb20gJy4vZ3JvdXAtbm9kZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcblxuLyoqXG4gKiBEaXNwbGF5cyBhIGhpZXJhcmNoaWNhbCB0cmVlIHNlbGVjdG9yIGZvciBhc3NldHMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hc3NldC1zZWxlY3RvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hc3NldC1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzZXRTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBwcmVkZWZpbmVkIG5vZGVzLlxuICAgKi9cbiAgQElucHV0KCkgc2VsZWN0ZWQ6IElNYW5hZ2VkT2JqZWN0W10gPSBbXTtcbiAgLyoqXG4gICAqIEVtaXRzIGlmIG9uZSBpdGVtIHdhcyBzZWxlY3RlZCAoYWxsIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlcykuXG4gICAqL1xuICBAT3V0cHV0KCkgb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElNYW5hZ2VkT2JqZWN0W10+KCk7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb290Tm9kZTogR3JvdXBOb2RlO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlIG9ubHkgRElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZ3JvdXBOb2RlU2VydmljZTogR3JvdXBOb2RlU2VydmljZSkge31cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yb290Tm9kZSA9IHRoaXMuZ3JvdXBOb2RlU2VydmljZS5jcmVhdGVHcm91cE5vZGUoeyByb290OiB0cnVlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gbWFuYWdlZCBvYmplY3QgdG8gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCBlbWl0cyB0aGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRNbyBUaGUgc2VsZWN0ZWQgYXNzZXQuXG4gICAqL1xuICBzZWxlY3Qoc2VsZWN0ZWRNbzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5kZXhPZlNlbGVjdGVkKHRoaXMuc2VsZWN0ZWQsIHNlbGVjdGVkTW8pO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaChzZWxlY3RlZE1vKTtcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBtYW5hZ2VkIG9iamVjdCBmcm9tIHRoZSBzZWxlY3RlZCBhcnJheSBhbmQgZW1pdHMgdGhlIGNoYW5nZS5cbiAgICogQHBhcmFtIHNlbGVjdGVkTW8gVGhlIHNlbGVjdGVkIGFzc2V0LlxuICAgKi9cbiAgZGVzZWxlY3Qoc2VsZWN0ZWRNbzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5kZXhPZlNlbGVjdGVkKHRoaXMuc2VsZWN0ZWQsIHNlbGVjdGVkTW8pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHRoaXMub25DaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkKTtcbiAgfVxuXG4gIGdldEluZGV4T2ZTZWxlY3RlZChzZWxlY3RlZDogQXJyYXk8UGFydGlhbDxJTWFuYWdlZE9iamVjdD4+LCBzZWxlY3RlZE1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBzZWxlY3RlZC5maW5kSW5kZXgobW8gPT4gbW8uaWQgPT09IHNlbGVjdGVkTW8uaWQpO1xuICB9XG59XG4iXX0=