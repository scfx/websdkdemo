import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class TabsFactory {
    constructor(router) {
        this.router = router;
    }
    get() {
        const tabs = [];
        if (this.router.url.match(/devicecontrol/g)) {
            tabs.push({
                path: 'devicecontrol/single',
                label: gettext('Single operations'),
                icon: 'c8y-icon c8y-icon-device-control',
                priority: 1100,
                orientation: 'horizontal'
            });
            tabs.push({
                path: 'devicecontrol/bulk',
                label: gettext('Bulk operations'),
                icon: 'c8y-icon c8y-icon-energy',
                priority: 1050,
                orientation: 'horizontal'
            });
        }
        return tabs;
    }
}
TabsFactory.ɵfac = function TabsFactory_Factory(t) { return new (t || TabsFactory)(ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
TabsFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TabsFactory, factory: TabsFactory.ɵfac });
TabsFactory.ctorParameters = () => [
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL2ZhY3Rvcmllcy90YWJzLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRy9ELE1BQU0sT0FBTyxXQUFXO0FBQUcsSUFDekIsWUFBbUIsTUFBYztBQUFJLFFBQWxCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxJQUFFLENBQUM7QUFBQyxJQUN0QyxHQUFHO0FBQUssUUFDTixNQUFNLElBQUksR0FBVSxFQUFFLENBQUM7QUFBQyxRQUN4QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO0FBQUUsWUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQztBQUFFLGdCQUNWLElBQUksRUFBRSxzQkFBc0I7QUFBRSxnQkFDOUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUFFLGdCQUNyQyxJQUFJLEVBQUUsa0NBQWtDO0FBQUUsZ0JBQzFDLFFBQVEsRUFBRSxJQUFJO0FBQUUsZ0JBQ2hCLFdBQVcsRUFBRSxZQUFZO0FBQUMsYUFDcEIsQ0FBQyxDQUFDO0FBQUMsWUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQUUsZ0JBQ1YsSUFBSSxFQUFFLG9CQUFvQjtBQUFFLGdCQUM1QixLQUFLLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQUUsZ0JBQ25DLElBQUksRUFBRSwwQkFBMEI7QUFBRSxnQkFDbEMsUUFBUSxFQUFFLElBQUk7QUFBRSxnQkFDaEIsV0FBVyxFQUFFLFlBQVk7QUFBQyxhQUNwQixDQUFDLENBQUM7QUFBQyxTQUNaO0FBQUMsUUFFRixPQUFPLElBQUksQ0FBQztBQUFDLElBQ2YsQ0FBQztBQUFDO3VDQXZCSCxVQUFVOytHQUNWO0FBQUM7QUFBcUMsWUFKOUIsTUFBTTtBQUFHOzs7dUVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgZ2V0dGV4dCwgVGFiLCBUYWJGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUYWJzRmFjdG9yeSBpbXBsZW1lbnRzIFRhYkZhY3Rvcnkge1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByb3V0ZXI6IFJvdXRlcikge31cclxuICBnZXQoKSB7XHJcbiAgICBjb25zdCB0YWJzOiBUYWJbXSA9IFtdO1xyXG4gICAgaWYgKHRoaXMucm91dGVyLnVybC5tYXRjaCgvZGV2aWNlY29udHJvbC9nKSkge1xyXG4gICAgICB0YWJzLnB1c2goe1xyXG4gICAgICAgIHBhdGg6ICdkZXZpY2Vjb250cm9sL3NpbmdsZScsXHJcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NpbmdsZSBvcGVyYXRpb25zJyksXHJcbiAgICAgICAgaWNvbjogJ2M4eS1pY29uIGM4eS1pY29uLWRldmljZS1jb250cm9sJyxcclxuICAgICAgICBwcmlvcml0eTogMTEwMCxcclxuICAgICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnXHJcbiAgICAgIH0gYXMgVGFiKTtcclxuICAgICAgdGFicy5wdXNoKHtcclxuICAgICAgICBwYXRoOiAnZGV2aWNlY29udHJvbC9idWxrJyxcclxuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQnVsayBvcGVyYXRpb25zJyksXHJcbiAgICAgICAgaWNvbjogJ2M4eS1pY29uIGM4eS1pY29uLWVuZXJneScsXHJcbiAgICAgICAgcHJpb3JpdHk6IDEwNTAsXHJcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xyXG4gICAgICB9IGFzIFRhYik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRhYnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==