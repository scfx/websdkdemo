import { ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './bulk-operation-stepper.component';
export class BaseStepperComponent {
    constructor() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    set deviceTypes(deviceTypes) {
        if (this.operationStepper) {
            this.operationStepper.changeDeviceTypes(deviceTypes);
        }
    }
    ngOnInit() {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    onSelectionChange(event) {
        const { selectedIndex, previouslySelectedIndex } = event;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    }
    getStepDataKeyByIndex(index) {
        return Object.keys(this.stepData)[index];
    }
}
BaseStepperComponent.propDecorators = {
    operationStepper: [{ type: ViewChild, args: [BulkOperationStepper, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tc3RlcHBlci9iYXNlLXN0ZXBwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBcUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRzFFLE1BQU0sT0FBZ0Isb0JBQW9CO0lBQTFDO1FBU0U7Ozs7V0FJRztRQUNILGFBQVEsR0FBc0MsRUFBRSxDQUFDO1FBRXpDLHFCQUFnQixHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBK0IxRCxDQUFDO0lBNUNDLElBQUksV0FBVyxDQUFDLFdBQThCO1FBQzVDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFXRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWU7YUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUN0QyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBSVMsaUJBQWlCLENBQUMsS0FBNEI7UUFDdEQsTUFBTSxFQUFFLGFBQWEsRUFBRSx1QkFBdUIsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN6RCxJQUNFLGFBQWEsR0FBRyx1QkFBdUI7WUFDdkMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFDakQ7WUFDQSx3REFBd0Q7WUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsS0FBYTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7OzsrQkE3Q0EsU0FBUyxTQUFDLG9CQUFvQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXBwZXJTZWxlY3Rpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcbmltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvblN0ZXBwZXIgfSBmcm9tICcuL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVN0ZXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoQnVsa09wZXJhdGlvblN0ZXBwZXIsIHsgc3RhdGljOiB0cnVlIH0pIG9wZXJhdGlvblN0ZXBwZXI6IEJ1bGtPcGVyYXRpb25TdGVwcGVyO1xuXG4gIHNldCBkZXZpY2VUeXBlcyhkZXZpY2VUeXBlczogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBpZiAodGhpcy5vcGVyYXRpb25TdGVwcGVyKSB7XG4gICAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIuY2hhbmdlRGV2aWNlVHlwZXMoZGV2aWNlVHlwZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIG1hcCBob2xkaW5nIHN0ZXAgZGF0YS4gVGhlIG9yZGVyIG9mIHByb3BlcnRpZXMgbmVlZCB0byBtYXRjaCB0aGUgb3JkZXIgb2ZcbiAgICogdGhlIHN0ZXBzIHRoZXkgaG9sZCBkYXRhIGZvciBhcyB0aGUgaW5kZXggb2YgdGhlIHByb3BlcnR5IGlzIHVzZWQgdG8gY2xlYXJcbiAgICogc3RlcCBkYXRhIHdoZW4gbmF2aWdhdGluZyBmb3J0aCBhZnRlciBjaGFuZ2luZyBkYXRhIGF0IGFuIGVhcmxpZXIgc3RlcC5cbiAgICovXG4gIHN0ZXBEYXRhOiB7IFtrZXk6IHN0cmluZ106IElNYW5hZ2VkT2JqZWN0IH0gPSB7fTtcblxuICBwcml2YXRlIGVuZFN1YnNjcmlwdGlvbnM6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMub3BlcmF0aW9uU3RlcHBlci5yZXRyaWV2ZU9wZXJhdGlvbkRldGFpbHMgPSB0aGlzLnJldHJpZXZlT3BlcmF0aW9uUHJvdG90eXBlLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIuc2VsZWN0aW9uQ2hhbmdlXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5lbmRTdWJzY3JpcHRpb25zKSlcbiAgICAgIC5zdWJzY3JpYmUodGhpcy5vblNlbGVjdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9ucy5uZXh0KCk7XG4gICAgdGhpcy5lbmRTdWJzY3JpcHRpb25zLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmV0cmlldmVPcGVyYXRpb25Qcm90b3R5cGUoKTogT3BlcmF0aW9uRGV0YWlscyB8IFByb21pc2U8T3BlcmF0aW9uRGV0YWlscz47XG5cbiAgcHJvdGVjdGVkIG9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50OiBTdGVwcGVyU2VsZWN0aW9uRXZlbnQpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkSW5kZXgsIHByZXZpb3VzbHlTZWxlY3RlZEluZGV4IH0gPSBldmVudDtcbiAgICBpZiAoXG4gICAgICBzZWxlY3RlZEluZGV4ID4gcHJldmlvdXNseVNlbGVjdGVkSW5kZXggJiZcbiAgICAgIHNlbGVjdGVkSW5kZXggPCBPYmplY3Qua2V5cyh0aGlzLnN0ZXBEYXRhKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIC8vIFRPRE8gY2xlYXIgc3RlcCBkYXRhIG9ubHkgaWYgcHJldmlvdXMgc3RlcCBpcyBcImRpcnR5XCJcbiAgICAgIHRoaXMuc3RlcERhdGFbdGhpcy5nZXRTdGVwRGF0YUtleUJ5SW5kZXgoc2VsZWN0ZWRJbmRleCldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RlcERhdGFLZXlCeUluZGV4KGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnN0ZXBEYXRhKVtpbmRleF07XG4gIH1cbn1cbiJdfQ==