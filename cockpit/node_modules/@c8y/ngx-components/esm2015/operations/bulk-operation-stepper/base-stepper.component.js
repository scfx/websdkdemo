import { ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './bulk-operation-stepper.component';
import * as ɵngcc0 from '@angular/core';
export class BaseStepperComponent {
    constructor() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    set deviceTypes(deviceTypes) {
        if (this.operationStepper) {
            this.operationStepper.changeDeviceTypes(deviceTypes);
        }
    }
    ngOnInit() {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    onSelectionChange(event) {
        const { selectedIndex, previouslySelectedIndex } = event;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    }
    getStepDataKeyByIndex(index) {
        return Object.keys(this.stepData)[index];
    }
}
BaseStepperComponent.ɵfac = function BaseStepperComponent_Factory(t) { return new (t || BaseStepperComponent)(); };
BaseStepperComponent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseStepperComponent, viewQuery: function BaseStepperComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(BulkOperationStepper, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.operationStepper = _t.first);
    } } });
BaseStepperComponent.propDecorators = {
    operationStepper: [{ type: ViewChild, args: [BulkOperationStepper, { static: true },] }]
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyL2Jhc2Utc3RlcHBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0FBRzFFLE1BQU0sT0FBZ0Isb0JBQW9CO0FBQUcsSUFBN0M7QUFBZ0IsUUFTZDtBQUNGO0FBQ007QUFDTTtBQUVBLFdBRFA7QUFDTCxRQUFFLGFBQVEsR0FBc0MsRUFBRSxDQUFDO0FBQ25ELFFBQ1UscUJBQWdCLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7QUFDMUQsSUE4QkEsQ0FBQztBQUNELElBN0NFLElBQUksV0FBVyxDQUFDLFdBQThCO0FBQ2hELFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBVUUsUUFBUTtBQUFLLFFBQ1gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEcsUUFDSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZTtBQUN6QyxhQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDN0MsYUFBTyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3BELElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUFLLFFBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3JDLElBQUUsQ0FBQztBQUNILElBR1ksaUJBQWlCLENBQUMsS0FBNEI7QUFDMUQsUUFBSSxNQUFNLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQzdELFFBQUksSUFDRSxhQUFhLEdBQUcsdUJBQXVCO0FBQzdDLFlBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFDakQ7QUFDTixZQUFNLHdEQUF3RDtBQUM5RCxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQzNFLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLHFCQUFxQixDQUFDLEtBQWE7QUFBSSxRQUM3QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNIOzs7Ozs7O1dBQUM7QUFDRDtBQUF3QywrQkEvQ3JDLFNBQVMsU0FBQyxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFBTTtBQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGVwcGVyU2VsZWN0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25TdGVwcGVyIH0gZnJvbSAnLi9idWxrLW9wZXJhdGlvbi1zdGVwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPcGVyYXRpb25EZXRhaWxzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTdGVwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKEJ1bGtPcGVyYXRpb25TdGVwcGVyLCB7IHN0YXRpYzogdHJ1ZSB9KSBvcGVyYXRpb25TdGVwcGVyOiBCdWxrT3BlcmF0aW9uU3RlcHBlcjtcblxuICBzZXQgZGV2aWNlVHlwZXMoZGV2aWNlVHlwZXM6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uU3RlcHBlcikge1xuICAgICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLmNoYW5nZURldmljZVR5cGVzKGRldmljZVR5cGVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBtYXAgaG9sZGluZyBzdGVwIGRhdGEuIFRoZSBvcmRlciBvZiBwcm9wZXJ0aWVzIG5lZWQgdG8gbWF0Y2ggdGhlIG9yZGVyIG9mXG4gICAqIHRoZSBzdGVwcyB0aGV5IGhvbGQgZGF0YSBmb3IgYXMgdGhlIGluZGV4IG9mIHRoZSBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNsZWFyXG4gICAqIHN0ZXAgZGF0YSB3aGVuIG5hdmlnYXRpbmcgZm9ydGggYWZ0ZXIgY2hhbmdpbmcgZGF0YSBhdCBhbiBlYXJsaWVyIHN0ZXAuXG4gICAqL1xuICBzdGVwRGF0YTogeyBba2V5OiBzdHJpbmddOiBJTWFuYWdlZE9iamVjdCB9ID0ge307XG5cbiAgcHJpdmF0ZSBlbmRTdWJzY3JpcHRpb25zOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIucmV0cmlldmVPcGVyYXRpb25EZXRhaWxzID0gdGhpcy5yZXRyaWV2ZU9wZXJhdGlvblByb3RvdHlwZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLnNlbGVjdGlvbkNoYW5nZVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZW5kU3Vic2NyaXB0aW9ucykpXG4gICAgICAuc3Vic2NyaWJlKHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMubmV4dCgpO1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9ucy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJldHJpZXZlT3BlcmF0aW9uUHJvdG90eXBlKCk6IE9wZXJhdGlvbkRldGFpbHMgfCBQcm9taXNlPE9wZXJhdGlvbkRldGFpbHM+O1xuXG4gIHByb3RlY3RlZCBvblNlbGVjdGlvbkNoYW5nZShldmVudDogU3RlcHBlclNlbGVjdGlvbkV2ZW50KSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZEluZGV4LCBwcmV2aW91c2x5U2VsZWN0ZWRJbmRleCB9ID0gZXZlbnQ7XG4gICAgaWYgKFxuICAgICAgc2VsZWN0ZWRJbmRleCA+IHByZXZpb3VzbHlTZWxlY3RlZEluZGV4ICYmXG4gICAgICBzZWxlY3RlZEluZGV4IDwgT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSkubGVuZ3RoXG4gICAgKSB7XG4gICAgICAvLyBUT0RPIGNsZWFyIHN0ZXAgZGF0YSBvbmx5IGlmIHByZXZpb3VzIHN0ZXAgaXMgXCJkaXJ0eVwiXG4gICAgICB0aGlzLnN0ZXBEYXRhW3RoaXMuZ2V0U3RlcERhdGFLZXlCeUluZGV4KHNlbGVjdGVkSW5kZXgpXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFN0ZXBEYXRhS2V5QnlJbmRleChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSlbaW5kZXhdO1xuICB9XG59XG4iXX0=