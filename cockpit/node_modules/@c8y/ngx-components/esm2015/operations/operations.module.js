import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_TABS } from '@c8y/ngx-components';
import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
import { BulkOperationFromSingleModule } from '@c8y/ngx-components/operations/bulk-operation-from-single';
import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
import { StepperBulkTypeConfigurationModule } from '@c8y/ngx-components/operations/stepper-bulk-type-configuration';
import { StepperBulkTypeDeviceProfileModule } from '@c8y/ngx-components/operations/stepper-bulk-type-device-profile';
import { StepperBulkTypeFirmwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-firmware';
import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
import { TabsFactory } from './factories/tabs.factory';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export const routes = [
    {
        path: 'devicecontrol',
        redirectTo: 'devicecontrol/single',
        pathMatch: 'full'
    }
];
/**
 * This module sets up the 'Device control' view. To use the module as it is you need to also
 * import the '@c8y/ng1-modules/devicemanagement-deviceControlList/cumulocity.json' ng1 module
 * in a hybrid application. By importing it in your custom application you will have:
 * - a 'Device control' entry in the 'Overviews' section of navigator
 * - 'Bulk operations' tab on the 'Device control' page
 * - list view of existing bulk operations with expandable details and options to filter
 * - guided stepper dialogs to schedule new bulk operations of supported types
 * (Configuration update, Firmware update, Software update, Apply device profile).
 *
 * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve
 * the results you wish to have in your application, e.g.:
 * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}
 * to have an overview of existing bulk operation with expandable details
 * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing
 * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},
 * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},
 * {@link StepperBulkTypeDeviceProfileModule}) to have the option
 * to create new bulk operation in a guided stepper dialog.
 *
 * ```typescript
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * respectively
 * ```typescript
 * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule,
 *     BulkOperationsStepperContainerModule,
 *     StepperBulkTypeSoftwareModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * You can provide your own bulk operation stepper by registering a component via the `HOOK_LIST_BULK_TYPE`:
 *
 * ```typescript
 * import {
 *   HOOK_LIST_BULK_TYPE,
 *   baseUrl
 * } from '@c8y/ngx-components/operations/bulk-operations-service';
 *
 * [...]
 *
 * providers: [
 *   {
 *     provide: HOOK_LIST_BULK_TYPE,
 *     useValue: {
 *       type: 'my-bulk-op-type',
 *       c8yIcon: 'c8y-tools',
 *       name: 'My bulk op type',
 *       path: `${baseUrl}my-type`,
 *       component: StepperMyBulkTypeComponent,
 *       fragments: ['c8y_MyType'],
 *       selected: false
 *     },
 *     multi: true
 *   }
 * ]```
 */
export class OperationsModule {
}
OperationsModule.ɵfac = function OperationsModule_Factory(t) { return new (t || OperationsModule)(); };
OperationsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OperationsModule });
OperationsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }], imports: [[
            CoreModule,
            RouterModule.forChild(routes),
            BulkOperationFromSingleModule,
            BulkOperationsListModule,
            BulkOperationsStepperContainerModule,
            StepperBulkTypeConfigurationModule,
            StepperBulkTypeFirmwareModule,
            StepperBulkTypeSoftwareModule,
            StepperBulkTypeDeviceProfileModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OperationsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    RouterModule.forChild(routes),
                    BulkOperationFromSingleModule,
                    BulkOperationsListModule,
                    BulkOperationsStepperContainerModule,
                    StepperBulkTypeConfigurationModule,
                    StepperBulkTypeFirmwareModule,
                    StepperBulkTypeSoftwareModule,
                    StepperBulkTypeDeviceProfileModule
                ],
                providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OperationsModule, { imports: function () { return [CoreModule, ɵngcc1.RouterModule, BulkOperationFromSingleModule,
        BulkOperationsListModule,
        BulkOperationsStepperContainerModule,
        StepperBulkTypeConfigurationModule,
        StepperBulkTypeFirmwareModule,
        StepperBulkTypeSoftwareModule,
        StepperBulkTypeDeviceProfileModule]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,