import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { gettext, ModalService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { uniq } from 'lodash-es';
import { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { SelectSoftwareStepComponent } from './select-software-step.component';
export class StepperBulkTypeSoftwareComponent extends BaseStepperComponent {
    constructor(modal, translate) {
        super();
        this.modal = modal;
        this.translate = translate;
        this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        this.selectedSoftware = [];
    }
    onSoftwareSelected(selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(item => item.software.id !== selectedItem.software.id);
        this.selectedSoftware.push(selectedItem);
    }
    confirmSoftwareSelection($event) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceTypes = this.getUniqueDeviceTypes();
            this.deviceTypes = deviceTypes;
            if (deviceTypes.length > 1) {
                try {
                    yield this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') });
                    $event.stepper.next();
                }
                catch (ex) {
                    this.selectedSoftware = [];
                    this.selectSoftware.resetSelection();
                }
            }
            else {
                $event.stepper.next();
            }
        });
    }
    retrieveOperationPrototype() {
        const softwareList = this.selectedSoftware.map(item => ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }));
        const interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        let description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    }
    getUniqueDeviceTypes() {
        return uniq(this.selectedSoftware
            .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)
            .filter(type => !!type));
    }
}
StepperBulkTypeSoftwareComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-stepper-bulk-type-software',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            },] }
];
StepperBulkTypeSoftwareComponent.ctorParameters = () => [
    { type: ModalService },
    { type: TranslateService }
];
StepperBulkTypeSoftwareComponent.propDecorators = {
    selectSoftware: [{ type: ViewChild, args: [SelectSoftwareStepComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,