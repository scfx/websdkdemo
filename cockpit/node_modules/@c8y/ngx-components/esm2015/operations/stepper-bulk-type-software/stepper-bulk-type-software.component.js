import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { gettext, ModalService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { uniq } from 'lodash-es';
import { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { SelectSoftwareStepComponent } from './select-software-step.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@c8y/ngx-components/operations/bulk-operation-stepper';
import * as ɵngcc4 from './select-software-step.component';
import * as ɵngcc5 from './confirm-software-selection-step.component';

function StepperBulkTypeSoftwareComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "c8y-select-software-step", 2);
    ɵngcc0.ɵɵlistener("software", function StepperBulkTypeSoftwareComponent_ng_container_1_Template_c8y_select_software_step_software_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onSoftwareSelected($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function StepperBulkTypeSoftwareComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "c8y-confirm-software-selection-step", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectedItems", ctx_r1.selectedSoftware);
} }
export class StepperBulkTypeSoftwareComponent extends BaseStepperComponent {
    constructor(modal, translate) {
        super();
        this.modal = modal;
        this.translate = translate;
        this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        this.selectedSoftware = [];
    }
    onSoftwareSelected(selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(item => item.software.id !== selectedItem.software.id);
        this.selectedSoftware.push(selectedItem);
    }
    confirmSoftwareSelection($event) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceTypes = this.getUniqueDeviceTypes();
            this.deviceTypes = deviceTypes;
            if (deviceTypes.length > 1) {
                try {
                    yield this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') });
                    $event.stepper.next();
                }
                catch (ex) {
                    this.selectedSoftware = [];
                    this.selectSoftware.resetSelection();
                }
            }
            else {
                $event.stepper.next();
            }
        });
    }
    retrieveOperationPrototype() {
        const softwareList = this.selectedSoftware.map(item => ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }));
        const interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        let description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    }
    getUniqueDeviceTypes() {
        return uniq(this.selectedSoftware
            .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)
            .filter(type => !!type));
    }
}
StepperBulkTypeSoftwareComponent.ɵfac = function StepperBulkTypeSoftwareComponent_Factory(t) { return new (t || StepperBulkTypeSoftwareComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslateService)); };
StepperBulkTypeSoftwareComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StepperBulkTypeSoftwareComponent, selectors: [["c8y-stepper-bulk-type-software"]], viewQuery: function StepperBulkTypeSoftwareComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SelectSoftwareStepComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectSoftware = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[4, "customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"], [4, "customStep"], [1, "d-contents", 3, "software"], [1, "d-contents", 3, "selectedItems"]], template: function StepperBulkTypeSoftwareComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-bulk-operation-stepper");
        ɵngcc0.ɵɵtemplate(1, StepperBulkTypeSoftwareComponent_ng_container_1_Template, 2, 0, "ng-container", 0);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, StepperBulkTypeSoftwareComponent_ng_container_3_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(2, 5, "Select software"))("customStepCompleted", !!ctx.selectedSoftware.length)("customStepButtonsDisabled", !ctx.selectedSoftware.length)("customStepOnNext", ctx.confirmSoftwareSelection.bind(ctx));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customStep", ɵngcc0.ɵɵpipeBind1(4, 7, "Confirm selected software"));
    } }, directives: [ɵngcc3.BulkOperationStepper, ɵngcc3.CustomStep, ɵngcc4.SelectSoftwareStepComponent, ɵngcc5.ConfirmSoftwareSelectionStepComponent], pipes: [ɵngcc1.C8yTranslatePipe], encapsulation: 2 });
StepperBulkTypeSoftwareComponent.ctorParameters = () => [
    { type: ModalService },
    { type: TranslateService }
];
StepperBulkTypeSoftwareComponent.propDecorators = {
    selectSoftware: [{ type: ViewChild, args: [SelectSoftwareStepComponent, { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StepperBulkTypeSoftwareComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-stepper-bulk-type-software',
                template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
            }]
    }], function () { return [{ type: ɵngcc1.ModalService }, { type: ɵngcc2.TranslateService }]; }, { selectSoftware: [{
            type: ViewChild,
            args: [SelectSoftwareStepComponent, { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,