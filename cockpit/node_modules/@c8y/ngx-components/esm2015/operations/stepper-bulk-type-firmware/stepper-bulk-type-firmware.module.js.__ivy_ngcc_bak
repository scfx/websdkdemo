import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { SelectFirmwareComponent } from './select-firmware.component';
import { VersionOrPatchComponent } from './version-or-patch.component';
import { StepperBulkTypeFirmwareComponent } from './stepper-bulk-type-firmware.component';
const ɵ0 = {
    type: BulkOperationType.FIRMWARE,
    c8yIcon: 'c8y-firmware',
    name: gettext('Firmware update'),
    path: `${baseUrl}firmware`,
    component: StepperBulkTypeFirmwareComponent,
    fragments: ['c8y_Firmware'],
    selected: false
};
/** Module for the 'Firmware update' operation type stepper */
export class StepperBulkTypeFirmwareModule {
}
StepperBulkTypeFirmwareModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    StepperBulkTypeFirmwareComponent,
                    VersionOrPatchComponent,
                    SelectFirmwareComponent
                ],
                imports: [
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BulkOperationStepperModule,
                    RepositoryModule
                ],
                providers: [
                    {
                        provide: HOOK_LIST_BULK_TYPE,
                        useValue: ɵ0,
                        multi: true
                    }
                ],
                entryComponents: [StepperBulkTypeFirmwareComponent],
                exports: [StepperBulkTypeFirmwareComponent]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNuRyxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLE9BQU8sRUFDUCxpQkFBaUIsRUFDbEIsTUFBTSx3REFBd0QsQ0FBQztBQUVoRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztXQW1CMUU7SUFDUixJQUFJLEVBQUUsaUJBQWlCLENBQUMsUUFBUTtJQUNoQyxPQUFPLEVBQUUsY0FBYztJQUN2QixJQUFJLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLElBQUksRUFBRSxHQUFHLE9BQU8sVUFBVTtJQUMxQixTQUFTLEVBQUUsZ0NBQWdDO0lBQzNDLFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUMzQixRQUFRLEVBQUUsS0FBSztDQUNoQjtBQXpCUCw4REFBOEQ7QUFnQzlELE1BQU0sT0FBTyw2QkFBNkI7OztZQS9CekMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixnQ0FBZ0M7b0JBQ2hDLHVCQUF1QjtvQkFDdkIsdUJBQXVCO2lCQUN4QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsVUFBVTtvQkFDVixXQUFXO29CQUNYLG1CQUFtQjtvQkFDbkIsMEJBQTBCO29CQUMxQixnQkFBZ0I7aUJBQ2pCO2dCQUNELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsbUJBQW1CO3dCQUM1QixRQUFRLElBUVA7d0JBQ0QsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsZUFBZSxFQUFFLENBQUMsZ0NBQWdDLENBQUM7Z0JBQ25ELE9BQU8sRUFBRSxDQUFDLGdDQUFnQyxDQUFDO2FBQzVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IENvcmVNb2R1bGUsIEZvcm1zTW9kdWxlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5TW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5JztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXInO1xuaW1wb3J0IHtcbiAgSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgYmFzZVVybCxcbiAgQnVsa09wZXJhdGlvblR5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2VsZWN0RmlybXdhcmVDb21wb25lbnQgfSBmcm9tICcuL3NlbGVjdC1maXJtd2FyZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmVyc2lvbk9yUGF0Y2hDb21wb25lbnQgfSBmcm9tICcuL3ZlcnNpb24tb3ItcGF0Y2guY29tcG9uZW50JztcbmltcG9ydCB7IFN0ZXBwZXJCdWxrVHlwZUZpcm13YXJlQ29tcG9uZW50IH0gZnJvbSAnLi9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5jb21wb25lbnQnO1xuXG4vKiogTW9kdWxlIGZvciB0aGUgJ0Zpcm13YXJlIHVwZGF0ZScgb3BlcmF0aW9uIHR5cGUgc3RlcHBlciAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnQsXG4gICAgVmVyc2lvbk9yUGF0Y2hDb21wb25lbnQsXG4gICAgU2VsZWN0RmlybXdhcmVDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSxcbiAgICBSZXBvc2l0b3J5TW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gICAgICB1c2VWYWx1ZToge1xuICAgICAgICB0eXBlOiBCdWxrT3BlcmF0aW9uVHlwZS5GSVJNV0FSRSxcbiAgICAgICAgYzh5SWNvbjogJ2M4eS1maXJtd2FyZScsXG4gICAgICAgIG5hbWU6IGdldHRleHQoJ0Zpcm13YXJlIHVwZGF0ZScpLFxuICAgICAgICBwYXRoOiBgJHtiYXNlVXJsfWZpcm13YXJlYCxcbiAgICAgICAgY29tcG9uZW50OiBTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZUNvbXBvbmVudCxcbiAgICAgICAgZnJhZ21lbnRzOiBbJ2M4eV9GaXJtd2FyZSddLFxuICAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnRdLFxuICBleHBvcnRzOiBbU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFN0ZXBwZXJCdWxrVHlwZUZpcm13YXJlTW9kdWxlIHt9XG4iXX0=