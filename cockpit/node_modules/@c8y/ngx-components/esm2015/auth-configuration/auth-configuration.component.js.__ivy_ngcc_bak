import { __awaiter } from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { AuthConfigurationService } from './auth-configuration.service';
import { AlertService, LoginService, ModalService } from '@c8y/ngx-components';
import { TenantLoginOptionsService } from '@c8y/client';
import { cloneDeep } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { tap, switchMap, shareReplay } from 'rxjs/operators';
export class AuthConfigurationComponent {
    constructor(authConfigurationService, tenantLoginOptionsService, modalService, loginService, alertService) {
        this.authConfigurationService = authConfigurationService;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.modalService = modalService;
        this.loginService = loginService;
        this.alertService = alertService;
        this.reloading$ = new BehaviorSubject(false);
        this.reload = new EventEmitter();
        this.authConfiguration$ = this.reload.pipe(tap(() => this.reloading$.next(true)), switchMap(() => this.authConfigurationService.getAuthConfiguration$()), tap(() => this.reloading$.next(false)), shareReplay(1));
    }
    ngOnInit() {
        this.authConfigurationSubscription = this.authConfiguration$.subscribe((authConfiguration) => {
            this.authConfiguration = authConfiguration;
            this.previousAuthConfiguration = cloneDeep(this.authConfiguration);
        });
        this.loadAuthConfig();
    }
    loadAuthConfig() {
        this.reload.next();
    }
    ngOnDestroy() {
        this.authConfigurationSubscription.unsubscribe();
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalService.confirmLogout();
                yield this.authConfigurationService.save(this.authConfiguration, this.previousAuthConfiguration);
                yield this.loginService.logout(true);
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
}
AuthConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-auth-configuration',
                template: "<c8y-title>{{ 'Authentication' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"loadAuthConfig()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<form role=\"form\" class=\"card card--fullpage\" #authConfigurationForm=\"ngForm\" novalidate>\n  <div class=\"card-header separator\">\n    <div class=\"card-title\">\n      {{ 'Authentication' | translate }}\n    </div>\n  </div>\n  <div class=\"inner-scroll\" *ngIf=\"authConfiguration\">\n    <c8y-login-settings [authConfiguration]=\"authConfiguration\"></c8y-login-settings>\n    <c8y-basic-auth-settings [authConfiguration]=\"authConfiguration\"></c8y-basic-auth-settings>\n    <c8y-session-configuration [authConfiguration]=\"authConfiguration\"></c8y-session-configuration>\n    <c8y-auth-tfa [authConfiguration]=\"authConfiguration\"></c8y-auth-tfa>\n  </div>\n  <div class=\"card-footer separator\">\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!authConfigurationForm.form.valid || authConfigurationForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
            },] }
];
AuthConfigurationComponent.ctorParameters = () => [
    { type: AuthConfigurationService },
    { type: TenantLoginOptionsService },
    { type: ModalService },
    { type: LoginService },
    { type: AlertService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1jb25maWd1cmF0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2F1dGgtY29uZmlndXJhdGlvbi9hdXRoLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDaEcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hELE9BQU8sRUFBVSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBNEIsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPN0QsTUFBTSxPQUFPLDBCQUEwQjtJQWNyQyxZQUNVLHdCQUFrRCxFQUNsRCx5QkFBb0QsRUFDcEQsWUFBMEIsRUFDMUIsWUFBMEIsRUFDMUIsWUFBMEI7UUFKMUIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBQ3BELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBbEJwQyxlQUFVLEdBQTZCLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLFdBQU0sR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd4Qyx1QkFBa0IsR0FBa0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNyQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHFCQUFxQixFQUFFLENBQUMsRUFDdEUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ3RDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO0lBVUMsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FDcEUsQ0FBQyxpQkFBb0MsRUFBRSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztZQUMzQyxJQUFJLENBQUMseUJBQXlCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUssSUFBSTs7WUFDUixJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDakcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QztZQUFDLE9BQU8sRUFBRSxFQUFHO2dCQUNaLElBQUksRUFBRSxFQUFFO29CQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7OztZQXRERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsNjJDQUFrRDthQUNuRDs7O1lBWFEsd0JBQXdCO1lBRXhCLHlCQUF5QjtZQURHLFlBQVk7WUFBMUIsWUFBWTtZQUExQixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aENvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIExvZ2luU2VydmljZSwgTW9kYWxTZXJ2aWNlLCBTdGF0dXMsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRlbmFudExvZ2luT3B0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBjb25jYXQsIGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAsIHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXV0aENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2F1dGgtY29uZmlndXJhdGlvbi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hdXRoLWNvbmZpZ3VyYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYXV0aC1jb25maWd1cmF0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBdXRoQ29uZmlndXJhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHJlbG9hZGluZyQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuICByZWxvYWQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgYXV0aENvbmZpZ3VyYXRpb246IEF1dGhDb25maWd1cmF0aW9uO1xuXG4gIHByaXZhdGUgYXV0aENvbmZpZ3VyYXRpb24kOiBPYnNlcnZhYmxlPEF1dGhDb25maWd1cmF0aW9uPiA9IHRoaXMucmVsb2FkLnBpcGUoXG4gICAgdGFwKCgpID0+IHRoaXMucmVsb2FkaW5nJC5uZXh0KHRydWUpKSxcbiAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5hdXRoQ29uZmlndXJhdGlvblNlcnZpY2UuZ2V0QXV0aENvbmZpZ3VyYXRpb24kKCkpLFxuICAgIHRhcCgoKSA9PiB0aGlzLnJlbG9hZGluZyQubmV4dChmYWxzZSkpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG4gIHByaXZhdGUgcHJldmlvdXNBdXRoQ29uZmlndXJhdGlvbjogQXV0aENvbmZpZ3VyYXRpb247XG4gIHByaXZhdGUgYXV0aENvbmZpZ3VyYXRpb25TdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGF1dGhDb25maWd1cmF0aW9uU2VydmljZTogQXV0aENvbmZpZ3VyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgdGVuYW50TG9naW5PcHRpb25zU2VydmljZTogVGVuYW50TG9naW5PcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5hdXRoQ29uZmlndXJhdGlvblN1YnNjcmlwdGlvbiA9IHRoaXMuYXV0aENvbmZpZ3VyYXRpb24kLnN1YnNjcmliZShcbiAgICAgIChhdXRoQ29uZmlndXJhdGlvbjogQXV0aENvbmZpZ3VyYXRpb24pID0+IHtcbiAgICAgICAgdGhpcy5hdXRoQ29uZmlndXJhdGlvbiA9IGF1dGhDb25maWd1cmF0aW9uO1xuICAgICAgICB0aGlzLnByZXZpb3VzQXV0aENvbmZpZ3VyYXRpb24gPSBjbG9uZURlZXAodGhpcy5hdXRoQ29uZmlndXJhdGlvbik7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmxvYWRBdXRoQ29uZmlnKCk7XG4gIH1cblxuICBsb2FkQXV0aENvbmZpZygpIHtcbiAgICB0aGlzLnJlbG9hZC5uZXh0KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmF1dGhDb25maWd1cmF0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBhc3luYyBzYXZlKCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsU2VydmljZS5jb25maXJtTG9nb3V0KCk7XG4gICAgICBhd2FpdCB0aGlzLmF1dGhDb25maWd1cmF0aW9uU2VydmljZS5zYXZlKHRoaXMuYXV0aENvbmZpZ3VyYXRpb24sIHRoaXMucHJldmlvdXNBdXRoQ29uZmlndXJhdGlvbik7XG4gICAgICBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS5sb2dvdXQodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZXggKSB7XG4gICAgICBpZiAoZXgpIHtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=