import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { AlertService } from '@c8y/ngx-components';
import { orderBy, isEqual, remove, some } from 'lodash-es';
import { InventoryService, FetchClient } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '@ngx-translate/core';
export class ReportsService {
    constructor(alertService, inventoryService, client, translateService) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.translateService = translateService;
        this.microserviceUrl = '/service/reporting';
        this.headers = { 'Content-Type': 'application/json' };
        this.isReportAgentSubscribed = true;
        this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE = 'microservice/not found';
    }
    getExport(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            let exp;
            const exportDetail = yield this.inventoryService.detail(exportId);
            const { data, res } = exportDetail;
            if (res.status !== 200) {
                this.alertService.addServerFailure({ data, res });
            }
            else {
                exp = data ? data : {};
            }
            return exp;
        });
    }
    getScheduleList(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const exp = yield this.getExport(exportId);
            return this.extractScheduleListFromExport(exp);
        });
    }
    extractScheduleListFromExport(exp) {
        let scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    }
    addSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [], [schedule]);
        });
    }
    updateSchedule(oldSchedule, schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [oldSchedule], [schedule]);
        });
    }
    updateSchedules(exportId, schedulesToRemove = [], schedulesToAdd = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let success = false;
            const exp = yield this.getExport(exportId);
            const schedules = this.extractScheduleListFromExport(exp);
            remove(schedules, (schedule) => some(schedulesToRemove, (scheduleToRemove) => isEqual(schedule, scheduleToRemove)));
            schedules.push.apply(schedules, schedulesToAdd);
            exp.c8y_ScheduleConfiguration = schedules;
            const { data, res } = yield this.inventoryService.update(exp);
            if (res.status === 200) {
                success = yield this.reschedule(exportId);
            }
            else {
                this.alertService.addServerFailure({ data, res });
            }
            return success;
        });
    }
    reschedule(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.headers
            };
            const rescheduling = yield this.client.fetch(`${this.microserviceUrl}/schedule/${exportId}`, options);
            return rescheduling.status === 200;
        });
    }
    deleteSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [schedule], []);
        });
    }
    /**
     * Removes report configuration.
     *
     * Note: fallback strategy is based on error code returned by backend
     * in case of missing subscription for report-agent microservice.
     * @param config entity of report configuration
     * @returns Response wrapped in [[IFetchResponse]]
     */
    removeConfiguration(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            if (!this.isReportAgentSubscribed) {
                res = yield this.fallbackConfigurationRemoval(config);
            }
            else {
                res = yield this.normalConfigurationRemoval(config);
                if (res.status === 404) {
                    const data = yield res.json();
                    if (data && data.error && data.error.toLowerCase() === this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE) {
                        res = yield this.fallbackConfigurationRemoval(config);
                        this.isReportAgentSubscribed = false;
                    }
                }
            }
            return res;
        });
    }
    normalConfigurationRemoval(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.microserviceUrl}/config/${config.id}`;
            return yield this.client.fetch(url, { method: 'DELETE' });
        });
    }
    fallbackConfigurationRemoval(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            try {
                res = (yield this.inventoryService.delete(config)).res;
            }
            catch (e) {
                // this could be an error related to not existing object or anything else which makes request return error status code
                // in case of concurrent removal everything is fine, therefor warning message. But it might not recover from some errors
                this.alertService.addServerFailure(e, 'warning');
            }
            return res;
        });
    }
}
ReportsService.ɵfac = function ReportsService_Factory(t) { return new (t || ReportsService)(ɵngcc0.ɵɵinject(ɵngcc1.AlertService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.FetchClient), ɵngcc0.ɵɵinject(ɵngcc3.TranslateService)); };
ReportsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportsService, factory: ReportsService.ɵfac });
ReportsService.ctorParameters = () => [
    { type: AlertService },
    { type: InventoryService },
    { type: FetchClient },
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AlertService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc2.FetchClient }, { type: ɵngcc3.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,