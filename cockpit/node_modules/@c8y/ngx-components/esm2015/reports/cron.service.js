import { Injectable } from '@angular/core';
import { Base } from './export-schedules.interface';
import { TranslateService } from '@ngx-translate/core';
import { formatDate } from '@angular/common';
import { gettext } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
export class CronService {
    constructor(translateService) {
        this.translateService = translateService;
        this.daysOfWeekPosix = [];
        this.daysOfMonth = [
            { value: '1', label: '1.' },
            { value: '2', label: '2.' },
            { value: '3', label: '3.' },
            { value: '4', label: '4.' },
            { value: '5', label: '5.' },
            { value: '6', label: '6.' },
            { value: '7', label: '7.' },
            { value: '8', label: '8.' },
            { value: '9', label: '9.' },
            { value: '10', label: '10.' },
            { value: '11', label: '11.' },
            { value: '12', label: '12.' },
            { value: '13', label: '13.' },
            { value: '14', label: '14.' },
            { value: '15', label: '15.' },
            { value: '16', label: '16.' },
            { value: '17', label: '17.' },
            { value: '18', label: '18.' },
            { value: '19', label: '19.' },
            { value: '20', label: '20.' },
            { value: '21', label: '21.' },
            { value: '22', label: '22.' },
            { value: '23', label: '23.' },
            { value: '24', label: '24.' },
            { value: '25', label: '25.' },
            { value: '26', label: '26.' },
            { value: '27', label: '27.' },
            { value: '28', label: '28.' },
            { value: '29', label: '29.' },
            { value: '30', label: '30.' },
            { value: '31', label: '31.' }
        ];
        this.months = [];
        this.hours = [];
        this.minutes = [];
        this.intervals = [
            { value: 2, label: gettext('Hour') },
            { value: 3, label: gettext('Day') },
            { value: 4, label: gettext('Week') },
            { value: 5, label: gettext('Month') },
            { value: 6, label: gettext('Year') }
        ];
        for (let x = 0; x < 24; x++) {
            this.hours.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 60; x = x + 5) {
            this.minutes.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 7; x++) {
            this.daysOfWeekPosix.push({
                value: x.toString(),
                label: this.getWeekDayName({ weekday: x })
            });
        }
        for (let x = 1; x < 13; x++) {
            this.months.push({
                value: x.toString(),
                label: this.getMonthName({ month: x })
            });
        }
    }
    generateCron(cronConfig) {
        let cron = '';
        cron = cronConfig.minute ? `${cronConfig.minute}` : '*';
        cron += cronConfig.hour ? ` ${cronConfig.hour}` : ' *';
        cron += cronConfig.day ? ` ${cronConfig.day}` : ' *';
        cron += cronConfig.month ? ` ${cronConfig.month}` : ' *';
        cron += cronConfig.weekday ? ` ${cronConfig.weekday}` : ' *';
        return cron;
    }
    generateCronConfig(cron) {
        const parts = cron.split(/\s+/);
        const cronConfig = {
            minute: parts[0],
            hour: parts[1],
            day: parts[2],
            month: parts[3],
            weekday: parts[4]
        };
        return cronConfig;
    }
    getBase(cronConfig) {
        let base = Base.Initial;
        if (cronConfig.minute !== '*' &&
            cronConfig.hour === '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Hour;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Day;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday !== '*') {
            base = Base.Week;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Month;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month !== '*' &&
            cronConfig.weekday === '*') {
            base = Base.Year;
        }
        else {
            // cronConfig invalid
        }
        return base;
    }
    validateModels(base, cronConfig) {
        let valid;
        switch (base) {
            case Base.Initial: // Please select
                valid = false;
                break;
            case Base.Hour:
                if (cronConfig.minute !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Day:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Week:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Month:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Year:
                if (cronConfig.minute !== '*' &&
                    cronConfig.hour !== '*' &&
                    cronConfig.day !== '*' &&
                    cronConfig.month !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            default:
                valid = false;
        }
        return valid;
    }
    clearNextModels(base, cronConfig) {
        if (base === Base.Initial) {
            // please select, delete all
            // cron expression: every minute at second 0
            cronConfig.minute = '*';
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Hour) {
            // hour, don't delete minutes
            // cron expression: every hour, at whatever minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Day) {
            // day, don't delete minutes and hours
            // cron expression: every day of every month, at whatever hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Week) {
            // week, delete month and day
            // cron expression: every month, at whatever weekday, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = cronConfig.weekday === '*' || cronConfig.weekday === '?' ? this.daysOfWeekPosix[0].value : cronConfig.weekday;
        }
        else if (base === Base.Month) {
            // month, delete month and weekday
            // cron expression: every month, at whatever day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Year) {
            // year, delete weekday
            // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = cronConfig.month === '*' ? this.months[0].value : cronConfig.month;
            cronConfig.weekday = '*';
        }
    }
    getWeekDayName(cronConfig) {
        const date = new Date(0);
        const firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
        date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
        return formatDate(date, 'EEEE', this.translateService.currentLang);
    }
    getMonthDayName(cronConfig) {
        let name = '';
        this.daysOfMonth.forEach(item => {
            if (item.value === cronConfig.day) {
                name = item.label;
            }
        });
        return name;
    }
    getMonthName(cronConfig) {
        const date = new Date(0);
        date.setMonth(parseInt(cronConfig.month, 10) - 1);
        return formatDate(date, 'LLLL', this.translateService.currentLang);
    }
}
CronService.ɵfac = function CronService_Factory(t) { return new (t || CronService)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService)); };
CronService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CronService, factory: CronService.ɵfac });
CronService.ctorParameters = () => [
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CronService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9yZXBvcnRzL2Nyb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFHOUMsTUFBTSxPQUFPLFdBQVc7QUFDeEIsSUE0Q0UsWUFBb0IsZ0JBQWtDO0FBQ3hELFFBRHNCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQTVDdkQsb0JBQWUsR0FBVSxFQUFFLENBQUM7QUFDOUIsUUFBRSxnQkFBVyxHQUFHO0FBQ2hCLFlBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDL0IsWUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUMvQixZQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQy9CLFlBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDL0IsWUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUMvQixZQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQy9CLFlBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDL0IsWUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUMvQixZQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQy9CLFlBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakMsWUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNqQyxZQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2pDLFlBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakMsWUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNqQyxZQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2pDLFlBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakMsWUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNqQyxZQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2pDLFlBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakMsWUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNqQyxZQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2pDLFlBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakMsWUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNqQyxZQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FB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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENyb25Db25maWcsIEJhc2UgfSBmcm9tICcuL2V4cG9ydC1zY2hlZHVsZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ3JvblNlcnZpY2Uge1xuICBkYXlzT2ZXZWVrUG9zaXg6IGFueVtdID0gW107XG4gIGRheXNPZk1vbnRoID0gW1xuICAgIHsgdmFsdWU6ICcxJywgbGFiZWw6ICcxLicgfSxcbiAgICB7IHZhbHVlOiAnMicsIGxhYmVsOiAnMi4nIH0sXG4gICAgeyB2YWx1ZTogJzMnLCBsYWJlbDogJzMuJyB9LFxuICAgIHsgdmFsdWU6ICc0JywgbGFiZWw6ICc0LicgfSxcbiAgICB7IHZhbHVlOiAnNScsIGxhYmVsOiAnNS4nIH0sXG4gICAgeyB2YWx1ZTogJzYnLCBsYWJlbDogJzYuJyB9LFxuICAgIHsgdmFsdWU6ICc3JywgbGFiZWw6ICc3LicgfSxcbiAgICB7IHZhbHVlOiAnOCcsIGxhYmVsOiAnOC4nIH0sXG4gICAgeyB2YWx1ZTogJzknLCBsYWJlbDogJzkuJyB9LFxuICAgIHsgdmFsdWU6ICcxMCcsIGxhYmVsOiAnMTAuJyB9LFxuICAgIHsgdmFsdWU6ICcxMScsIGxhYmVsOiAnMTEuJyB9LFxuICAgIHsgdmFsdWU6ICcxMicsIGxhYmVsOiAnMTIuJyB9LFxuICAgIHsgdmFsdWU6ICcxMycsIGxhYmVsOiAnMTMuJyB9LFxuICAgIHsgdmFsdWU6ICcxNCcsIGxhYmVsOiAnMTQuJyB9LFxuICAgIHsgdmFsdWU6ICcxNScsIGxhYmVsOiAnMTUuJyB9LFxuICAgIHsgdmFsdWU6ICcxNicsIGxhYmVsOiAnMTYuJyB9LFxuICAgIHsgdmFsdWU6ICcxNycsIGxhYmVsOiAnMTcuJyB9LFxuICAgIHsgdmFsdWU6ICcxOCcsIGxhYmVsOiAnMTguJyB9LFxuICAgIHsgdmFsdWU6ICcxOScsIGxhYmVsOiAnMTkuJyB9LFxuICAgIHsgdmFsdWU6ICcyMCcsIGxhYmVsOiAnMjAuJyB9LFxuICAgIHsgdmFsdWU6ICcyMScsIGxhYmVsOiAnMjEuJyB9LFxuICAgIHsgdmFsdWU6ICcyMicsIGxhYmVsOiAnMjIuJyB9LFxuICAgIHsgdmFsdWU6ICcyMycsIGxhYmVsOiAnMjMuJyB9LFxuICAgIHsgdmFsdWU6ICcyNCcsIGxhYmVsOiAnMjQuJyB9LFxuICAgIHsgdmFsdWU6ICcyNScsIGxhYmVsOiAnMjUuJyB9LFxuICAgIHsgdmFsdWU6ICcyNicsIGxhYmVsOiAnMjYuJyB9LFxuICAgIHsgdmFsdWU6ICcyNycsIGxhYmVsOiAnMjcuJyB9LFxuICAgIHsgdmFsdWU6ICcyOCcsIGxhYmVsOiAnMjguJyB9LFxuICAgIHsgdmFsdWU6ICcyOScsIGxhYmVsOiAnMjkuJyB9LFxuICAgIHsgdmFsdWU6ICczMCcsIGxhYmVsOiAnMzAuJyB9LFxuICAgIHsgdmFsdWU6ICczMScsIGxhYmVsOiAnMzEuJyB9XG4gIF07XG4gIG1vbnRoczogYW55W10gPSBbXTtcbiAgaG91cnM6IGFueVtdID0gW107XG4gIG1pbnV0ZXM6IGFueVtdID0gW107XG4gIGludGVydmFscyA9IFtcbiAgICB7IHZhbHVlOiAyLCBsYWJlbDogZ2V0dGV4dCgnSG91cicpIH0sXG4gICAgeyB2YWx1ZTogMywgbGFiZWw6IGdldHRleHQoJ0RheScpIH0sXG4gICAgeyB2YWx1ZTogNCwgbGFiZWw6IGdldHRleHQoJ1dlZWsnKSB9LFxuICAgIHsgdmFsdWU6IDUsIGxhYmVsOiBnZXR0ZXh0KCdNb250aCcpIH0sXG4gICAgeyB2YWx1ZTogNiwgbGFiZWw6IGdldHRleHQoJ1llYXInKSB9XG4gIF07XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgMjQ7IHgrKykge1xuICAgICAgdGhpcy5ob3Vycy5wdXNoKHsgdmFsdWU6IHgudG9TdHJpbmcoKSwgbGFiZWw6IGAke3h9YCB9KTtcbiAgICB9XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCA2MDsgeCA9IHggKyA1KSB7XG4gICAgICB0aGlzLm1pbnV0ZXMucHVzaCh7IHZhbHVlOiB4LnRvU3RyaW5nKCksIGxhYmVsOiBgJHt4fWAgfSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCA3OyB4KyspIHtcbiAgICAgIHRoaXMuZGF5c09mV2Vla1Bvc2l4LnB1c2goe1xuICAgICAgICB2YWx1ZTogeC50b1N0cmluZygpLFxuICAgICAgICBsYWJlbDogdGhpcy5nZXRXZWVrRGF5TmFtZSgoeyB3ZWVrZGF5OiB4IH0gYXMgdW5rbm93bikgYXMgQ3JvbkNvbmZpZylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IHggPSAxOyB4IDwgMTM7IHgrKykge1xuICAgICAgdGhpcy5tb250aHMucHVzaCh7XG4gICAgICAgIHZhbHVlOiB4LnRvU3RyaW5nKCksXG4gICAgICAgIGxhYmVsOiB0aGlzLmdldE1vbnRoTmFtZSgoeyBtb250aDogeCB9IGFzIHVua25vd24pIGFzIENyb25Db25maWcpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZW5lcmF0ZUNyb24oY3JvbkNvbmZpZzogQ3JvbkNvbmZpZykge1xuICAgIGxldCBjcm9uOiBzdHJpbmcgPSAnJztcbiAgICBjcm9uID0gY3JvbkNvbmZpZy5taW51dGUgPyBgJHtjcm9uQ29uZmlnLm1pbnV0ZX1gIDogJyonO1xuICAgIGNyb24gKz0gY3JvbkNvbmZpZy5ob3VyID8gYCAke2Nyb25Db25maWcuaG91cn1gIDogJyAqJztcbiAgICBjcm9uICs9IGNyb25Db25maWcuZGF5ID8gYCAke2Nyb25Db25maWcuZGF5fWAgOiAnIConO1xuICAgIGNyb24gKz0gY3JvbkNvbmZpZy5tb250aCA/IGAgJHtjcm9uQ29uZmlnLm1vbnRofWAgOiAnIConO1xuICAgIGNyb24gKz0gY3JvbkNvbmZpZy53ZWVrZGF5ID8gYCAke2Nyb25Db25maWcud2Vla2RheX1gIDogJyAqJztcblxuICAgIHJldHVybiBjcm9uO1xuICB9XG5cbiAgZ2VuZXJhdGVDcm9uQ29uZmlnKGNyb246IHN0cmluZykge1xuICAgIGNvbnN0IHBhcnRzID0gY3Jvbi5zcGxpdCgvXFxzKy8pO1xuICAgIGNvbnN0IGNyb25Db25maWc6IENyb25Db25maWcgPSB7XG4gICAgICBtaW51dGU6IHBhcnRzWzBdLFxuICAgICAgaG91cjogcGFydHNbMV0sXG4gICAgICBkYXk6IHBhcnRzWzJdLFxuICAgICAgbW9udGg6IHBhcnRzWzNdLFxuICAgICAgd2Vla2RheTogcGFydHNbNF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyb25Db25maWc7XG4gIH1cblxuICBnZXRCYXNlKGNyb25Db25maWc6IENyb25Db25maWcpIHtcbiAgICBsZXQgYmFzZTogQmFzZSA9IEJhc2UuSW5pdGlhbDtcblxuICAgIGlmIChcbiAgICAgIGNyb25Db25maWcubWludXRlICE9PSAnKicgJiZcbiAgICAgIGNyb25Db25maWcuaG91ciA9PT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLmRheSA9PT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLm1vbnRoID09PSAnKicgJiZcbiAgICAgIGNyb25Db25maWcud2Vla2RheSA9PT0gJyonXG4gICAgKSB7XG4gICAgICBiYXNlID0gQmFzZS5Ib3VyO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjcm9uQ29uZmlnLm1pbnV0ZSAhPT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLmhvdXIgIT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5kYXkgPT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5tb250aCA9PT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLndlZWtkYXkgPT09ICcqJ1xuICAgICkge1xuICAgICAgYmFzZSA9IEJhc2UuRGF5O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjcm9uQ29uZmlnLm1pbnV0ZSAhPT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLmhvdXIgIT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5kYXkgPT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5tb250aCA9PT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLndlZWtkYXkgIT09ICcqJ1xuICAgICkge1xuICAgICAgYmFzZSA9IEJhc2UuV2VlaztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgY3JvbkNvbmZpZy5taW51dGUgIT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5ob3VyICE9PSAnKicgJiZcbiAgICAgIGNyb25Db25maWcuZGF5ICE9PSAnKicgJiZcbiAgICAgIGNyb25Db25maWcubW9udGggPT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy53ZWVrZGF5ID09PSAnKidcbiAgICApIHtcbiAgICAgIGJhc2UgPSBCYXNlLk1vbnRoO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjcm9uQ29uZmlnLm1pbnV0ZSAhPT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLmhvdXIgIT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5kYXkgIT09ICcqJyAmJlxuICAgICAgY3JvbkNvbmZpZy5tb250aCAhPT0gJyonICYmXG4gICAgICBjcm9uQ29uZmlnLndlZWtkYXkgPT09ICcqJ1xuICAgICkge1xuICAgICAgYmFzZSA9IEJhc2UuWWVhcjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY3JvbkNvbmZpZyBpbnZhbGlkXG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YWxpZGF0ZU1vZGVscyhiYXNlOiBCYXNlLCBjcm9uQ29uZmlnOiBDcm9uQ29uZmlnKSB7XG4gICAgbGV0IHZhbGlkOiBib29sZWFuO1xuICAgIHN3aXRjaCAoYmFzZSkge1xuICAgICAgY2FzZSBCYXNlLkluaXRpYWw6IC8vIFBsZWFzZSBzZWxlY3RcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEJhc2UuSG91cjpcbiAgICAgICAgaWYgKGNyb25Db25maWcubWludXRlICE9PSAnKicpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQmFzZS5EYXk6XG4gICAgICAgIGlmIChjcm9uQ29uZmlnLm1pbnV0ZSAhPT0gJyonICYmIGNyb25Db25maWcuaG91ciAhPT0gJyonKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEJhc2UuV2VlazpcbiAgICAgICAgaWYgKGNyb25Db25maWcubWludXRlICE9PSAnKicgJiYgY3JvbkNvbmZpZy5ob3VyICE9PSAnKicgJiYgY3JvbkNvbmZpZy53ZWVrZGF5ICE9PSAnKicpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQmFzZS5Nb250aDpcbiAgICAgICAgaWYgKGNyb25Db25maWcubWludXRlICE9PSAnKicgJiYgY3JvbkNvbmZpZy5ob3VyICE9PSAnKicgJiYgY3JvbkNvbmZpZy5kYXkgIT09ICcqJykge1xuICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCYXNlLlllYXI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjcm9uQ29uZmlnLm1pbnV0ZSAhPT0gJyonICYmXG4gICAgICAgICAgY3JvbkNvbmZpZy5ob3VyICE9PSAnKicgJiZcbiAgICAgICAgICBjcm9uQ29uZmlnLmRheSAhPT0gJyonICYmXG4gICAgICAgICAgY3JvbkNvbmZpZy5tb250aCAhPT0gJyonXG4gICAgICAgICkge1xuICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gIH1cblxuICBjbGVhck5leHRNb2RlbHMoYmFzZTogQmFzZSwgY3JvbkNvbmZpZzogQ3JvbkNvbmZpZykge1xuICAgIGlmIChiYXNlID09PSBCYXNlLkluaXRpYWwpIHtcbiAgICAgIC8vIHBsZWFzZSBzZWxlY3QsIGRlbGV0ZSBhbGxcbiAgICAgIC8vIGNyb24gZXhwcmVzc2lvbjogZXZlcnkgbWludXRlIGF0IHNlY29uZCAwXG4gICAgICBjcm9uQ29uZmlnLm1pbnV0ZSA9ICcqJztcbiAgICAgIGNyb25Db25maWcuaG91ciA9ICcqJztcbiAgICAgIGNyb25Db25maWcuZGF5ID0gJyonO1xuICAgICAgY3JvbkNvbmZpZy5tb250aCA9ICcqJztcbiAgICAgIGNyb25Db25maWcud2Vla2RheSA9ICcqJztcbiAgICB9IGVsc2UgaWYgKGJhc2UgPT09IEJhc2UuSG91cikge1xuICAgICAgLy8gaG91ciwgZG9uJ3QgZGVsZXRlIG1pbnV0ZXNcbiAgICAgIC8vIGNyb24gZXhwcmVzc2lvbjogZXZlcnkgaG91ciwgYXQgd2hhdGV2ZXIgbWludXRlLCBhdCBzZWNvbmQgMFxuICAgICAgY3JvbkNvbmZpZy5taW51dGUgPSBjcm9uQ29uZmlnLm1pbnV0ZSA9PT0gJyonID8gdGhpcy5taW51dGVzWzBdLnZhbHVlIDogY3JvbkNvbmZpZy5taW51dGU7XG4gICAgICBjcm9uQ29uZmlnLmhvdXIgPSAnKic7XG4gICAgICBjcm9uQ29uZmlnLmRheSA9ICcqJztcbiAgICAgIGNyb25Db25maWcubW9udGggPSAnKic7XG4gICAgICBjcm9uQ29uZmlnLndlZWtkYXkgPSAnKic7XG4gICAgfSBlbHNlIGlmIChiYXNlID09PSBCYXNlLkRheSkge1xuICAgICAgLy8gZGF5LCBkb24ndCBkZWxldGUgbWludXRlcyBhbmQgaG91cnNcbiAgICAgIC8vIGNyb24gZXhwcmVzc2lvbjogZXZlcnkgZGF5IG9mIGV2ZXJ5IG1vbnRoLCBhdCB3aGF0ZXZlciBob3VyIGFuZCBtaW51dGUsIGF0IHNlY29uZCAwXG4gICAgICBjcm9uQ29uZmlnLm1pbnV0ZSA9IGNyb25Db25maWcubWludXRlID09PSAnKicgPyB0aGlzLm1pbnV0ZXNbMF0udmFsdWUgOiBjcm9uQ29uZmlnLm1pbnV0ZTtcbiAgICAgIGNyb25Db25maWcuaG91ciA9IGNyb25Db25maWcuaG91ciA9PT0gJyonID8gdGhpcy5ob3Vyc1swXS52YWx1ZSA6IGNyb25Db25maWcuaG91cjtcbiAgICAgIGNyb25Db25maWcuZGF5ID0gJyonO1xuICAgICAgY3JvbkNvbmZpZy5tb250aCA9ICcqJztcbiAgICAgIGNyb25Db25maWcud2Vla2RheSA9ICcqJztcbiAgICB9IGVsc2UgaWYgKGJhc2UgPT09IEJhc2UuV2Vlaykge1xuICAgICAgLy8gd2VlaywgZGVsZXRlIG1vbnRoIGFuZCBkYXlcbiAgICAgIC8vIGNyb24gZXhwcmVzc2lvbjogZXZlcnkgbW9udGgsIGF0IHdoYXRldmVyIHdlZWtkYXksIGhvdXIgYW5kIG1pbnV0ZSwgYXQgc2Vjb25kIDBcbiAgICAgIGNyb25Db25maWcubWludXRlID0gY3JvbkNvbmZpZy5taW51dGUgPT09ICcqJyA/IHRoaXMubWludXRlc1swXS52YWx1ZSA6IGNyb25Db25maWcubWludXRlO1xuICAgICAgY3JvbkNvbmZpZy5ob3VyID0gY3JvbkNvbmZpZy5ob3VyID09PSAnKicgPyB0aGlzLmhvdXJzWzBdLnZhbHVlIDogY3JvbkNvbmZpZy5ob3VyO1xuICAgICAgY3JvbkNvbmZpZy5kYXkgPSAnKic7XG4gICAgICBjcm9uQ29uZmlnLm1vbnRoID0gJyonO1xuICAgICAgY3JvbkNvbmZpZy53ZWVrZGF5ID0gY3JvbkNvbmZpZy53ZWVrZGF5ID09PSAnKicgfHwgY3JvbkNvbmZpZy53ZWVrZGF5ID09PSAnPycgPyB0aGlzLmRheXNPZldlZWtQb3NpeFswXS52YWx1ZSA6IGNyb25Db25maWcud2Vla2RheSA7XG4gICAgfSBlbHNlIGlmIChiYXNlID09PSBCYXNlLk1vbnRoKSB7XG4gICAgICAvLyBtb250aCwgZGVsZXRlIG1vbnRoIGFuZCB3ZWVrZGF5XG4gICAgICAvLyBjcm9uIGV4cHJlc3Npb246IGV2ZXJ5IG1vbnRoLCBhdCB3aGF0ZXZlciBkYXkgb2YgbW9udGgsIGhvdXIgYW5kIG1pbnV0ZSwgYXQgc2Vjb25kIDBcbiAgICAgIGNyb25Db25maWcubWludXRlID0gY3JvbkNvbmZpZy5taW51dGUgPT09ICcqJyA/IHRoaXMubWludXRlc1swXS52YWx1ZSA6IGNyb25Db25maWcubWludXRlO1xuICAgICAgY3JvbkNvbmZpZy5ob3VyID0gY3JvbkNvbmZpZy5ob3VyID09PSAnKicgPyB0aGlzLmhvdXJzWzBdLnZhbHVlIDogY3JvbkNvbmZpZy5ob3VyO1xuICAgICAgY3JvbkNvbmZpZy5kYXkgPSBjcm9uQ29uZmlnLmRheSA9PT0gJyonID8gdGhpcy5kYXlzT2ZNb250aFswXS52YWx1ZSA6IGNyb25Db25maWcuZGF5O1xuICAgICAgY3JvbkNvbmZpZy5tb250aCA9ICcqJztcbiAgICAgIGNyb25Db25maWcud2Vla2RheSA9ICcqJztcbiAgICB9IGVsc2UgaWYgKGJhc2UgPT09IEJhc2UuWWVhcikge1xuICAgICAgLy8geWVhciwgZGVsZXRlIHdlZWtkYXlcbiAgICAgIC8vIGNyb24gZXhwcmVzc2lvbjogZXZlcnkgeWVhciwgYXQgd2hhdGV2ZXIgbW9udGgsIGRheSBvZiBtb250aCwgaG91ciBhbmQgbWludXRlLCBhdCBzZWNvbmQgMFxuICAgICAgY3JvbkNvbmZpZy5taW51dGUgPSBjcm9uQ29uZmlnLm1pbnV0ZSA9PT0gJyonID8gdGhpcy5taW51dGVzWzBdLnZhbHVlIDogY3JvbkNvbmZpZy5taW51dGU7XG4gICAgICBjcm9uQ29uZmlnLmhvdXIgPSBjcm9uQ29uZmlnLmhvdXIgPT09ICcqJyA/IHRoaXMuaG91cnNbMF0udmFsdWUgOiBjcm9uQ29uZmlnLmhvdXI7XG4gICAgICBjcm9uQ29uZmlnLmRheSA9IGNyb25Db25maWcuZGF5ID09PSAnKicgPyB0aGlzLmRheXNPZk1vbnRoWzBdLnZhbHVlIDogY3JvbkNvbmZpZy5kYXk7XG4gICAgICBjcm9uQ29uZmlnLm1vbnRoID0gY3JvbkNvbmZpZy5tb250aCA9PT0gJyonID8gdGhpcy5tb250aHNbMF0udmFsdWUgOiBjcm9uQ29uZmlnLm1vbnRoO1xuICAgICAgY3JvbkNvbmZpZy53ZWVrZGF5ID0gJyonO1xuICAgIH1cbiAgfVxuXG4gIGdldFdlZWtEYXlOYW1lKGNyb25Db25maWc6IENyb25Db25maWcpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoMCk7XG4gICAgY29uc3QgZmlyc3RTdW5kYXlEYXRlID0gZGF0ZS5nZXREYXRlKCkgKyAzOyAvLyBiZWNhdXNlIHdlIGtub3cgZGF0ZSAwIHdhcyBvbiBUaHVyc2RheS4uLlxuICAgIGRhdGUuc2V0RGF0ZShmaXJzdFN1bmRheURhdGUgKyBwYXJzZUludChjcm9uQ29uZmlnLndlZWtkYXksIDEwKSk7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgJ0VFRUUnLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuY3VycmVudExhbmcpO1xuICB9XG5cbiAgZ2V0TW9udGhEYXlOYW1lKGNyb25Db25maWc6IENyb25Db25maWcpIHtcbiAgICBsZXQgbmFtZSA9ICcnO1xuICAgIHRoaXMuZGF5c09mTW9udGguZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLnZhbHVlID09PSBjcm9uQ29uZmlnLmRheSkge1xuICAgICAgICBuYW1lID0gaXRlbS5sYWJlbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgZ2V0TW9udGhOYW1lKGNyb25Db25maWc6IENyb25Db25maWcpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoMCk7XG4gICAgZGF0ZS5zZXRNb250aChwYXJzZUludChjcm9uQ29uZmlnLm1vbnRoLCAxMCkgLSAxKTtcbiAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCAnTExMTCcsIHRoaXMudHJhbnNsYXRlU2VydmljZS5jdXJyZW50TGFuZyk7XG4gIH1cbn1cbiJdfQ==