import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { BasicAuth, FetchClient, TenantLoginOptionType, UserService } from '@c8y/client';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { AlertService } from '../alert/alert.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '../i18n/translate.service';
import { take } from 'rxjs/operators';
import { ModalService } from '../modal/modal.service';
import { Status } from '../common/status.model';
import { GainsightService } from '../product-experience/gainsight.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { LoginService } from '../login/login.service';
export class UserEditModalComponent {
    constructor(modal, user, ui, auth, client, alert, translate, userPreferences, modalService, c8yModalService, gainsightService, cookieBannerService, loginService) {
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.translate = translate;
        this.userPreferences = userPreferences;
        this.modalService = modalService;
        this.c8yModalService = c8yModalService;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.loginService = loginService;
        this.loading = false;
        this.showProductUsageSetting = false;
        this.lang = this.ui.state.lang;
        this.modalService.onHide.pipe(take(1)).subscribe((reason) => {
            if (reason !== null && this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
        });
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateUserInAppState();
            this.showProductUsageSetting = yield this.gainsightService.canEditProductExperienceSettings();
            if (this.showProductUsageSetting) {
                this.currentUsageTrackingState = !(yield this.gainsightService.isGainsightDisabledInUserPreferences()) &&
                    this.cookieBannerService.isFunctionalCookieEnabled();
            }
        });
    }
    onDismiss() {
        if (this.changedLang !== undefined) {
            this.translate.switchToLanguage(this.lang);
        }
        this.modal.hide();
    }
    onLanguage(lang) {
        this.changedLang = lang;
        this.translate.switchToLanguage(this.changedLang);
    }
    onProductExperience(option) {
        this.usageTrackingState = option;
    }
    updateAndClose(user) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            let reloadRequired = false;
            let logoutRequired = false;
            try {
                const passwordChanged = Boolean(user.password);
                const usesOAuth2Internal = this.loginService.loginMode.type === TenantLoginOptionType.OAUTH2_INTERNAL;
                if (passwordChanged && usesOAuth2Internal) {
                    yield this.c8yModalService.confirmLogout(gettext('You will be logged out to apply your new password. Do you want to proceed?'));
                    logoutRequired = true;
                }
                if (this.changedLang && this.changedLang !== this.lang) {
                    reloadRequired = yield this.persistLanguage(this.changedLang);
                }
                if (this.currentUsageTrackingState !== this.usageTrackingState) {
                    yield this.userPreferences.set(this.gainsightService.USER_PREFERENCES_KEY, this.usageTrackingState);
                    this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                    this.usageTrackingState ? this.gainsightService.loadTag(this.client.tenant) : yield this.gainsightTrackingAppReload();
                }
                if (user.customProperties.userOrigin !== 'OAUTH2') {
                    yield this.user.updateCurrent(user);
                    if (!logoutRequired) {
                        if (user.password) {
                            this.updateCredentials(user.password);
                        }
                        yield this.updateUserInAppState();
                    }
                }
                this.modal.hide();
                this.alert.success(gettext('User saved.'));
            }
            catch (e) {
                if (e) {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.loading = false;
                if (reloadRequired) {
                    location.reload();
                }
                if (logoutRequired) {
                    yield this.loginService.logout(true);
                }
            }
        });
    }
    persistLanguage(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            let shouldReload;
            try {
                yield this.c8yModalService.confirm(gettext('Reload recommended'), gettext('To change the language in the entire application, we recommend you to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = true;
            }
            catch (ex) {
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = false;
            }
            return shouldReload;
        });
    }
    gainsightTrackingAppReload() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                location.reload();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    updateUserInAppState() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUserResult = yield this.user.current();
            this.ui.currentUser.next(currentUserResult.data);
        });
    }
    updateCredentials(password) {
        const newCredentials = {
            password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    }
}
UserEditModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-user-edit-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n    [showProductUsageSetting]=\"showProductUsageSetting\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onProductExperience)=\"onProductExperience($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>\n"
            },] }
];
UserEditModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: UserService },
    { type: AppStateService },
    { type: BasicAuth },
    { type: FetchClient },
    { type: AlertService },
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: BsModalService },
    { type: ModalService },
    { type: GainsightService },
    { type: CookieBannerService },
    { type: LoginService }
];
//# sourceMappingURL=data:application/json;base64,