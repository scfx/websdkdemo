import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { BasicAuth, FetchClient, TenantLoginOptionType, UserService } from '@c8y/client';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { AlertService } from '../alert/alert.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '../i18n/translate.service';
import { take } from 'rxjs/operators';
import { ModalService } from '../modal/modal.service';
import { Status } from '../common/status.model';
import { GainsightService } from '../product-experience/gainsight.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { LoginService } from '../login/login.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from '../common/ui-state.service';
import * as ɵngcc4 from '../alert/alert.service';
import * as ɵngcc5 from '../i18n/translate.service';
import * as ɵngcc6 from '../common/user-preferences/user-preferences.service';
import * as ɵngcc7 from '../modal/modal.service';
import * as ɵngcc8 from '../product-experience/gainsight.service';
import * as ɵngcc9 from '../bootstrap/cookie-banner/cookie-banner.service';
import * as ɵngcc10 from '../login/login.service';
import * as ɵngcc11 from '../modal/modal.component';
import * as ɵngcc12 from './user-edit.component';
import * as ɵngcc13 from '../i18n/c8y-translate.pipe';
import * as ɵngcc14 from '@angular/common';
export class UserEditModalComponent {
    constructor(modal, user, ui, auth, client, alert, translate, userPreferences, modalService, c8yModalService, gainsightService, cookieBannerService, loginService) {
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.translate = translate;
        this.userPreferences = userPreferences;
        this.modalService = modalService;
        this.c8yModalService = c8yModalService;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.loginService = loginService;
        this.loading = false;
        this.showProductUsageSetting = false;
        this.lang = this.ui.state.lang;
        this.modalService.onHide.pipe(take(1)).subscribe((reason) => {
            if (reason !== null && this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
        });
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateUserInAppState();
            this.showProductUsageSetting = yield this.gainsightService.canEditProductExperienceSettings();
            if (this.showProductUsageSetting) {
                this.currentUsageTrackingState = !(yield this.gainsightService.isGainsightDisabledInUserPreferences()) &&
                    this.cookieBannerService.isFunctionalCookieEnabled();
            }
        });
    }
    onDismiss() {
        if (this.changedLang !== undefined) {
            this.translate.switchToLanguage(this.lang);
        }
        this.modal.hide();
    }
    onLanguage(lang) {
        this.changedLang = lang;
        this.translate.switchToLanguage(this.changedLang);
    }
    onProductExperience(option) {
        this.usageTrackingState = option;
    }
    updateAndClose(user) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            let reloadRequired = false;
            let logoutRequired = false;
            try {
                const passwordChanged = Boolean(user.password);
                const usesOAuth2Internal = this.loginService.loginMode.type === TenantLoginOptionType.OAUTH2_INTERNAL;
                if (passwordChanged && usesOAuth2Internal) {
                    yield this.c8yModalService.confirmLogout(gettext('You will be logged out to apply your new password. Do you want to proceed?'));
                    logoutRequired = true;
                }
                if (this.changedLang && this.changedLang !== this.lang) {
                    reloadRequired = yield this.persistLanguage(this.changedLang);
                }
                if (this.currentUsageTrackingState !== this.usageTrackingState) {
                    yield this.userPreferences.set(this.gainsightService.USER_PREFERENCES_KEY, this.usageTrackingState);
                    this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                    this.usageTrackingState ? this.gainsightService.loadTag(this.client.tenant) : yield this.gainsightTrackingAppReload();
                }
                if (user.customProperties.userOrigin !== 'OAUTH2') {
                    yield this.user.updateCurrent(user);
                    if (!logoutRequired) {
                        if (user.password) {
                            this.updateCredentials(user.password);
                        }
                        yield this.updateUserInAppState();
                    }
                }
                this.modal.hide();
                this.alert.success(gettext('User saved.'));
            }
            catch (e) {
                if (e) {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.loading = false;
                if (reloadRequired) {
                    location.reload();
                }
                if (logoutRequired) {
                    yield this.loginService.logout(true);
                }
            }
        });
    }
    persistLanguage(lang) {
        return __awaiter(this, void 0, void 0, function* () {
            let shouldReload;
            try {
                yield this.c8yModalService.confirm(gettext('Reload recommended'), gettext('To change the language in the entire application, we recommend you to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = true;
            }
            catch (ex) {
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
                shouldReload = false;
            }
            return shouldReload;
        });
    }
    gainsightTrackingAppReload() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                location.reload();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    updateUserInAppState() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUserResult = yield this.user.current();
            this.ui.currentUser.next(currentUserResult.data);
        });
    }
    updateCredentials(password) {
        const newCredentials = {
            password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    }
}
UserEditModalComponent.ɵfac = function UserEditModalComponent_Factory(t) { return new (t || UserEditModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BasicAuth), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FetchClient), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.GainsightService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.CookieBannerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.LoginService)); };
UserEditModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UserEditModalComponent, selectors: [["c8y-user-edit-modal"]], decls: 4, vars: 11, consts: [[3, "customFooter", "title", "onDismiss"], [3, "lang", "user", "loading", "isUsageTrackingEnabled", "showProductUsageSetting", "onLanguage", "onProductExperience", "onUser", "onCancel"]], template: function UserEditModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0);
        ɵngcc0.ɵɵlistener("onDismiss", function UserEditModalComponent_Template_c8y_modal_onDismiss_0_listener() { return ctx.onDismiss(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "c8y-user-edit", 1);
        ɵngcc0.ɵɵlistener("onLanguage", function UserEditModalComponent_Template_c8y_user_edit_onLanguage_2_listener($event) { return ctx.onLanguage($event); })("onProductExperience", function UserEditModalComponent_Template_c8y_user_edit_onProductExperience_2_listener($event) { return ctx.onProductExperience($event); })("onUser", function UserEditModalComponent_Template_c8y_user_edit_onUser_2_listener($event) { return ctx.updateAndClose($event); })("onCancel", function UserEditModalComponent_Template_c8y_user_edit_onCancel_2_listener() { return ctx.onDismiss(); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(1, 7, "Edit user"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("lang", ctx.lang)("user", ɵngcc0.ɵɵpipeBind1(3, 9, ctx.ui.currentUser))("loading", ctx.loading)("isUsageTrackingEnabled", ctx.currentUsageTrackingState)("showProductUsageSetting", ctx.showProductUsageSetting);
    } }, directives: [ɵngcc11.ModalComponent, ɵngcc12.UserEditComponent], pipes: [ɵngcc13.C8yTranslatePipe, ɵngcc14.AsyncPipe], encapsulation: 2 });
UserEditModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: UserService },
    { type: AppStateService },
    { type: BasicAuth },
    { type: FetchClient },
    { type: AlertService },
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: BsModalService },
    { type: ModalService },
    { type: GainsightService },
    { type: CookieBannerService },
    { type: LoginService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserEditModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-user-edit-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n    [showProductUsageSetting]=\"showProductUsageSetting\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onProductExperience)=\"onProductExperience($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>\n"
            }]
    }], function () { return [{ type: ɵngcc1.BsModalRef }, { type: ɵngcc2.UserService }, { type: ɵngcc3.AppStateService }, { type: ɵngcc2.BasicAuth }, { type: ɵngcc2.FetchClient }, { type: ɵngcc4.AlertService }, { type: ɵngcc5.TranslateService }, { type: ɵngcc6.UserPreferencesService }, { type: ɵngcc1.BsModalService }, { type: ɵngcc7.ModalService }, { type: ɵngcc8.GainsightService }, { type: ɵngcc9.CookieBannerService }, { type: ɵngcc10.LoginService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,