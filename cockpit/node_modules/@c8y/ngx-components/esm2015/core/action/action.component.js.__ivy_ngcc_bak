import { Component, Input, ViewChild } from '@angular/core';
import { ActionService } from './action.service';
/**
 * A <c8y-action> can be added with content projection.
 *
 * @example
 * ```html
 * <c8y-action>
 *   <button class="btn" (click)="myAction()">My action</button>
 * </c8y-action>
 * ```
 */
export class ActionComponent {
    constructor(actionService) {
        this.actionService = actionService;
        /**
         * Is this action disabled.
         */
        this.disabled = false;
        /**
         * The priority of this action (the higher the number, the higher the action will be displayed; optional)
         */
        this.priority = 0;
    }
    /**
     * After page view is initialized, component adds itself to global action list.
     */
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.actionService.add(this));
    }
    /**
     * Action is removed from global action list, if component is not used anymore.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.actionService.remove(this);
    }
}
ActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            },] }
];
ActionComponent.ctorParameters = () => [
    { type: ActionService }
];
ActionComponent.propDecorators = {
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    priority: [{ type: Input }],
    icon: [{ type: Input }],
    template: [{ type: ViewChild, args: ['template', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYWN0aW9uL2FjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRDs7Ozs7Ozs7O0dBU0c7QUFLSCxNQUFNLE9BQU8sZUFBZTtJQXVCMUIsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFyQmhEOztXQUVHO1FBQ00sYUFBUSxHQUFZLEtBQUssQ0FBQztRQUtuQzs7V0FFRztRQUNNLGFBQVEsR0FBVyxDQUFDLENBQUM7SUFVcUIsQ0FBQztJQUVwRDs7T0FFRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBYyxDQUFDLENBQ3JDLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7WUE1Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixtR0FBc0M7YUFDdkM7OztZQWZRLGFBQWE7Ozt1QkFxQm5CLEtBQUs7b0JBSUwsS0FBSzt1QkFJTCxLQUFLO21CQUlMLEtBQUs7dUJBRUwsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEFjdGlvblNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBBIDxjOHktYWN0aW9uPiBjYW4gYmUgYWRkZWQgd2l0aCBjb250ZW50IHByb2plY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktYWN0aW9uPlxuICogICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgKGNsaWNrKT1cIm15QWN0aW9uKClcIj5NeSBhY3Rpb248L2J1dHRvbj5cbiAqIDwvYzh5LWFjdGlvbj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FjdGlvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgQWN0aW9uIHtcblxuICAvKipcbiAgICogSXMgdGhpcyBhY3Rpb24gZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcHJpb3JpdHkgb2YgdGhpcyBhY3Rpb24gKHRoZSBoaWdoZXIgdGhlIG51bWJlciwgdGhlIGhpZ2hlciB0aGUgYWN0aW9uIHdpbGwgYmUgZGlzcGxheWVkOyBvcHRpb25hbClcbiAgICovXG4gIEBJbnB1dCgpIHByaW9yaXR5OiBudW1iZXIgPSAwO1xuICAvKipcbiAgICogVGhlIGljb24gdG8gc2hvdyBvbiB0aGlzIGFjdGlvblxuICAgKi9cbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlJywge3N0YXRpYzogZmFsc2V9KSB0ZW1wbGF0ZTogYW55O1xuICBhY3Rpb246ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgdmlld0luaXRUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aW9uU2VydmljZTogQWN0aW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogQWZ0ZXIgcGFnZSB2aWV3IGlzIGluaXRpYWxpemVkLCBjb21wb25lbnQgYWRkcyBpdHNlbGYgdG8gZ2xvYmFsIGFjdGlvbiBsaXN0LlxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudmlld0luaXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PlxuICAgICAgdGhpcy5hY3Rpb25TZXJ2aWNlLmFkZCh0aGlzIGFzIEFjdGlvbilcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGlzIHJlbW92ZWQgZnJvbSBnbG9iYWwgYWN0aW9uIGxpc3QsIGlmIGNvbXBvbmVudCBpcyBub3QgdXNlZCBhbnltb3JlLlxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudmlld0luaXRUaW1lb3V0KTtcbiAgICB0aGlzLmFjdGlvblNlcnZpY2UucmVtb3ZlKHRoaXMgYXMgQWN0aW9uKTtcbiAgfVxufVxuIl19