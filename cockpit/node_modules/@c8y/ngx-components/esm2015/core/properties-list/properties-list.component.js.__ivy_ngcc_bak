import { Component, Input } from '@angular/core';
import { sortBy, get } from 'lodash-es';
/**
 * Renders a list of properties of an object.
 *
 * @example
 * ```html
 * <c8y-properties-list
 *   icon="info"
 *   [properties]="properties"
 *   [values]="options"
 *   [emptyLabel]="'-'"
 *   [title]="'Application properties' | translate"
 * ></c8y-properties-list>
 * ```
 */
export class PropertiesListComponent {
    constructor() {
        /**
         * A string array of groups that are shown. If noParse is set to false,
         * each complex key will form a group.
         */
        this.groups = [];
        /**
         * The component tries to parse the properties and resolve keys and types. You can
         * avoid this by setting this property to true.
         */
        this.noParse = false;
        this._data = {};
    }
    /**
     * The properties that this list should display.
     */
    set properties(items) {
        this._properties = this.parseProperties(items);
    }
    /**
     * @ignore
     */
    get properties() {
        if (this.noParse) {
            return this._properties;
        }
        const propsWithGroups = [
            ...this._properties,
            ...this.groups.map(group => ({
                key: group,
                label: group,
                value: group,
                type: 'group'
            }))
        ].filter(item => !!item.value);
        return sortBy(propsWithGroups, ['key']);
    }
    /**
     * An object where the properties keys are resolved from.
     */
    set data(data) {
        this._data = data;
        this._properties = this.parseProperties(this._properties);
    }
    /**
     * Checks if a certain property has an group associated.
     * @param item The property to verify.
     */
    hasGroup(item) {
        if (!item.key) {
            return false;
        }
        const keyPath = item.key.split('.');
        return keyPath.length > 1 && this.groups.includes(keyPath[0]);
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this._properties = this.parseProperties(this._properties);
    }
    /**
     * Used in trackBy to avoid recalculation all the time.
     * @ignore
     */
    identity(index, item) {
        return item.value;
    }
    parseProperties(items = []) {
        return items.map(item => this.parsePropertyItem(item));
    }
    parsePropertyItem(item) {
        if (this.noParse) {
            return item;
        }
        item.value = this.resolveValueFromKey(item);
        item.value = item.transform && item.value ? item.transform(item.value) : item.value;
        item.type = this.resolveType(item);
        item.value = this.attachEmptyLabel(item);
        return item;
    }
    resolveValueFromKey(item) {
        if (item.key && this._data) {
            const keyPath = item.key.split('.');
            const rootGroup = keyPath[0];
            if (keyPath.length > 1 && !this.groups.includes(rootGroup)) {
                this.groups.push(rootGroup);
            }
            return get(this._data, item.key);
        }
        return item.value;
    }
    resolveType(item) {
        return Array.isArray(item.value) ? 'array' : item.action && item.value ? 'link' : 'string';
    }
    attachEmptyLabel(item) {
        if (!item.value) {
            return this.emptyLabel;
        }
        return item.value;
    }
}
PropertiesListComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-properties-list',
                template: "<p class=\"m-b-8\">\n  <i *ngIf=\"icon\" [c8yIcon]=\"icon\" class=\"text-info m-r-8\"></i>\n  <span class=\"text-label-small\">{{ title | translate }}</span>\n</p>\n<ul class=\"list-unstyled small\">\n  <li class=\"p-t-4 p-b-4 d-flex\" \n    *ngFor=\"let prop of properties; let i = index; trackBy: identity\"\n    [ngClass]=\"{'separator-top-bottom': i === 0, 'separator-bottom': i > 0}\"\n    >\n    <div\n      [ngClass]=\"{\n        'm-l-16': hasGroup(prop),\n        legend: prop.type === 'group',\n        'form-block': prop.type === 'group',\n        'm-b-0': prop.type === 'group',\n        'm-t-4': prop.type === 'group'\n      }\"\n      class=\"small text-medium text-nowrap m-r-4\"\n    >\n      {{ prop.label | translate }}\n    </div>\n    <span [ngSwitch]=\"prop.type\" class=\"flex-item-right\">\n      <span *ngSwitchCase=\"'string'\" class=\"flex-item-right\">{{ prop.value }}</span>\n      <a\n        *ngSwitchCase=\"'link'\"\n        (click)=\"prop.action($event, prop)\"\n        class=\"flex-item-right pointer text-truncate m-l-4\"\n        >{{ prop.value }}</a\n      >\n      <span *ngSwitchCase=\"'array'\">\n        <span\n          class=\"label label-default m-l-4\"\n          *ngFor=\"let propTag of prop.value\"\n          (click)=\"prop.action && prop.action($event, propTag)\"\n          [ngClass]=\"{\n            pointer: prop.action\n          }\"\n          >{{ propTag }}</span\n        >\n      </span>\n    </span>\n  </li>\n</ul>\n"
            },] }
];
PropertiesListComponent.propDecorators = {
    properties: [{ type: Input }],
    title: [{ type: Input }],
    icon: [{ type: Input }],
    data: [{ type: Input }],
    groups: [{ type: Input }],
    noParse: [{ type: Input }],
    emptyLabel: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,