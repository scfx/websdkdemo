import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { UserService } from '@c8y/client';
import { LoginService } from '../login/login.service';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
export class SmsChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.model = {
            smsToken: ''
        };
        this.isLoading = false;
        this.resendTfa = '0';
    }
    verifyTFACode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            if (this.useOAuthInternal()) {
                yield this.verifyCodeWithOauth();
            }
            else {
                yield this.verifyCodeWithBasicAuth();
            }
            this.isLoading = false;
        });
    }
    resendTFASms() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                yield this.users.verifyTFACode(this.resendTfa);
            }
            catch (e) {
                if (e.res.status === 403) {
                    this.loginService.cleanMessages();
                    this.loginService.addSuccessMessage('resend_sms');
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    useOAuthInternal() {
        return this.loginService.isPasswordGrantLogin(this.credentials);
    }
    verifyCodeWithOauth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { credentials } = this;
                yield this.loginService.switchLoginMode(Object.assign(Object.assign({}, credentials), { tfa: this.model.smsToken }));
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                if (resStatus === 401) {
                    // it is assumed that the user and password are correct so it must be the tfa code
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    verifyCodeWithBasicAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { res } = yield this.users.verifyTFACode(this.model.smsToken);
                const tfaToken = res.headers.get('tfatoken');
                this.credentials.tfa = tfaToken;
                this.loginWithTFA(tfaToken);
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                // BE returns 403 in case of invalid tfa code
                if (resStatus === 403) {
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    loginWithTFA(tfaToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials);
                this.loginService.saveTFAToken(tfaToken, sessionStorage);
                if (this.loginService.rememberMe) {
                    this.loginService.saveTFAToken(tfaToken, localStorage);
                }
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
}
SmsChallengeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-sms-challenge',
                template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Two-factor authentication\n  </div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n    <p *ngIf=\"!twoFactorForm.form.valid || isLoading \" class=\"help-block\" translate>\n      Insert the code received via SMS.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"small pointer m-r-auto\"\n      (click)=\"resendTFASms()\"\n      translate\n    >\n      Send new code\n    </a>\n    <a\n      title=\"{{ 'Log in' | translate }}\"\n      class=\"small pointer m-l-auto\"\n      (click)=\"onCancel.emit()\"\n      translate\n    >\n      Log in\n    </a>\n  </div>\n</form>\n"
            },] }
];
SmsChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
SmsChallengeComponent.propDecorators = {
    credentials: [{ type: Input }],
    onCancel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,