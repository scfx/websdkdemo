import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, ViewChild } from '@angular/core';
import { UserService, FetchClient, Client } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { LoginService } from '../login/login.service';
import { clone } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '../common/ui-state.service';
import * as ɵngcc3 from '../alert/alert.service';
import * as ɵngcc4 from '../login/login.service';
import * as ɵngcc5 from '../modal/modal.component';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '../forms/form-group.component';
import * as ɵngcc8 from '../i18n/c8y-translate.directive';
import * as ɵngcc9 from '../forms/required-input-placeholder.directive';
import * as ɵngcc10 from '../forms/messages.component';
import * as ɵngcc11 from '../forms/message.directive';
import * as ɵngcc12 from '../i18n/c8y-translate.pipe';

const _c0 = ["modal"];
export class PasswordConfirmModalComponent {
    constructor(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    passwordConfirm() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.password) {
                const supportUserName = this.ui.currentSupportUserName.value;
                const userId = this.ui.currentUser.value.id;
                const credentials = {
                    password: this.password,
                    user: `${supportUserName ? `${supportUserName}$` : ''}${userId}`,
                    tenant: this.client.tenant
                };
                try {
                    this.loading = true;
                    const strategy = clone(this.loginService.useBasicAuth({}));
                    delete credentials.tfa;
                    strategy.updateCredentials(credentials);
                    const newClient = this.createNewClient(strategy, this.client.baseUrl);
                    yield newClient.user.current();
                    this.emitSuccessAndClose();
                }
                catch (e) {
                    if (e.res && e.res.status === 401 && e.data && /pin|totp/i.test(e.data.message)) {
                        this.emitSuccessAndClose();
                    }
                    else {
                        this.alert.danger(gettext("Provided password doesn't match your current one."));
                    }
                }
                finally {
                    this.loading = false;
                }
            }
        });
    }
    cancel() {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    }
    createNewClient(strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    }
    emitSuccessAndClose() {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    }
}
PasswordConfirmModalComponent.ɵfac = function PasswordConfirmModalComponent_Factory(t) { return new (t || PasswordConfirmModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FetchClient), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.LoginService)); };
PasswordConfirmModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordConfirmModalComponent, selectors: [["c8y-password-confirm-modal"]], viewQuery: function PasswordConfirmModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modal = _t.first);
    } }, outputs: { passwordConfirmedEmitter: "passwordConfirmedEmitter" }, decls: 20, vars: 16, consts: [[3, "customFooter", "title"], ["modal", ""], [3, "ngSubmit"], ["confirmForm", "ngForm"], [3, "hasWarning"], ["translate", "", "for", "currentPassword"], ["id", "currentPassword", "type", "password", "name", "password", "required", "", 1, "form-control", 3, "ngModel", "placeholder", "ngModelChange"], ["translate", ""], [1, "modal-footer"], ["type", "button", "translate", "", 1, "btn", "btn-default", 3, "title", "click"], ["type", "submit", "translate", "", 1, "btn", "btn-primary", 3, "title", "disabled"]], template: function PasswordConfirmModalComponent_Template(rf, ctx) { if (rf & 1) {
        const _r2 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "c8y-modal", 0, 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementStart(3, "form", 2, 3);
        ɵngcc0.ɵɵlistener("ngSubmit", function PasswordConfirmModalComponent_Template_form_ngSubmit_3_listener() { ɵngcc0.ɵɵrestoreView(_r2); const _r1 = ɵngcc0.ɵɵreference(4); return _r1.form.valid && ctx.passwordConfirm(); });
        ɵngcc0.ɵɵelementStart(5, "c8y-form-group", 4);
        ɵngcc0.ɵɵelementStart(6, "label", 5);
        ɵngcc0.ɵɵtext(7, "Enter your password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function PasswordConfirmModalComponent_Template_input_ngModelChange_8_listener($event) { return ctx.password = $event; });
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "c8y-messages");
        ɵngcc0.ɵɵelementStart(11, "c8y-message", 7);
        ɵngcc0.ɵɵtext(12, " Enter the password of the user that you are currently logged in with. ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 8);
        ɵngcc0.ɵɵelementStart(14, "button", 9);
        ɵngcc0.ɵɵlistener("click", function PasswordConfirmModalComponent_Template_button_click_14_listener() { return ctx.cancel(); });
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵtext(16, " Cancel ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "button", 10);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵtext(19, " Confirm ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("customFooter", true)("title", ɵngcc0.ɵɵpipeBind1(2, 8, "Confirm your current password"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("hasWarning", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 10, "Enter your password"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.password);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(15, 12, "Cancel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(18, 14, "Confirm"));
        ɵngcc0.ɵɵproperty("disabled", !_r1.form.valid || ctx.loading);
    } }, directives: [ɵngcc5.ModalComponent, ɵngcc6.ɵNgNoValidate, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc7.FormGroupComponent, ɵngcc8.C8yTranslateDirective, ɵngcc9.RequiredInputPlaceholderDirective, ɵngcc6.DefaultValueAccessor, ɵngcc6.RequiredValidator, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc10.MessagesComponent, ɵngcc11.MessageDirective], pipes: [ɵngcc12.C8yTranslatePipe], encapsulation: 2 });
PasswordConfirmModalComponent.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: FetchClient },
    { type: AlertService },
    { type: LoginService }
];
PasswordConfirmModalComponent.propDecorators = {
    passwordConfirmedEmitter: [{ type: Output }],
    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordConfirmModalComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-confirm-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group [hasWarning]=\"true\">\r\n      <label translate for=\"currentPassword\">Enter your password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Enter your password' | translate }}\"\r\n        required\r\n      />\r\n      <c8y-messages>\r\n        <c8y-message translate>\r\n          Enter the password of the user that you are currently logged in with.\r\n        </c8y-message>\r\n      </c8y-messages>\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Confirm' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
            }]
    }], function () { return [{ type: ɵngcc1.UserService }, { type: ɵngcc2.AppStateService }, { type: ɵngcc1.FetchClient }, { type: ɵngcc3.AlertService }, { type: ɵngcc4.LoginService }]; }, { passwordConfirmedEmitter: [{
            type: Output
        }], modal: [{
            type: ViewChild,
            args: ['modal', { static: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYXV0aGVudGljYXRpb24vcGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLFdBQVcsRUFBZ0IsV0FBVyxFQUFFLE1BQU0sRUFBbUIsTUFBTSxhQUFhLENBQUM7QUFDOUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNMUMsTUFBTSxPQUFPLDZCQUE2QjtBQUMxQyxJQU1FLFlBQ1MsSUFBaUIsRUFDakIsRUFBbUIsRUFDbEIsTUFBbUIsRUFDbkIsS0FBbUIsRUFDbkIsWUFBMEI7QUFDbkMsUUFMUSxTQUFJLEdBQUosSUFBSSxDQUFhO0FBQUMsUUFDbEIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7QUFBQyxRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFhO0FBQUMsUUFDcEIsVUFBSyxHQUFMLEtBQUssQ0FBYztBQUFDLFFBQ3BCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQ3RDLFFBWlksNkJBQXdCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUNuRSxRQUFFLFlBQU8sR0FBRyxLQUFLLENBQUM7QUFDbEIsSUFVSyxDQUFDO0FBQ04sSUFDUSxlQUFlO0FBQ3ZCO0FBQ3FDLFlBRGpDLElB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LFdBQVc7QUFBSSxZQUUxQyxZQUFZO0FBQUksWUFFaEIsWUFBWTtBQUFHO0FBQUc7QUFDTix1Q0FRbEIsTUFBTTtBQUFLLG9CQUlYLFNBQVMsU0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQU07Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSwgSUNyZWRlbnRpYWxzLCBGZXRjaENsaWVudCwgQ2xpZW50LCBJQXV0aGVudGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vbW9kYWwvbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXNzd29yZC1jb25maXJtLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50IHtcbiAgQE91dHB1dCgpIHBhc3N3b3JkQ29uZmlybWVkRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgbG9hZGluZyA9IGZhbHNlO1xuICBwYXNzd29yZDogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsJywgeyBzdGF0aWM6IGZhbHNlIH0pIHByaXZhdGUgbW9kYWw6IE1vZGFsQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB1c2VyOiBVc2VyU2VydmljZSxcbiAgICBwdWJsaWMgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHBhc3N3b3JkQ29uZmlybSgpIHtcbiAgICBpZiAodGhpcy5wYXNzd29yZCkge1xuICAgICAgY29uc3Qgc3VwcG9ydFVzZXJOYW1lID0gdGhpcy51aS5jdXJyZW50U3VwcG9ydFVzZXJOYW1lLnZhbHVlO1xuICAgICAgY29uc3QgdXNlcklkID0gdGhpcy51aS5jdXJyZW50VXNlci52YWx1ZS5pZDtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICB1c2VyOiBgJHtzdXBwb3J0VXNlck5hbWUgPyBgJHtzdXBwb3J0VXNlck5hbWV9JGAgOiAnJ30ke3VzZXJJZH1gLFxuICAgICAgICB0ZW5hbnQ6IHRoaXMuY2xpZW50LnRlbmFudFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gY2xvbmUodGhpcy5sb2dpblNlcnZpY2UudXNlQmFzaWNBdXRoKHt9KSk7XG4gICAgICAgIGRlbGV0ZSBjcmVkZW50aWFscy50ZmE7XG4gICAgICAgIHN0cmF0ZWd5LnVwZGF0ZUNyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgbmV3Q2xpZW50ID0gdGhpcy5jcmVhdGVOZXdDbGllbnQoc3RyYXRlZ3ksIHRoaXMuY2xpZW50LmJhc2VVcmwpO1xuICAgICAgICBhd2FpdCBuZXdDbGllbnQudXNlci5jdXJyZW50KCk7XG4gICAgICAgIHRoaXMuZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS5yZXMgJiYgZS5yZXMuc3RhdHVzID09PSA0MDEgJiYgZS5kYXRhICYmIC9waW58dG90cC9pLnRlc3QoZS5kYXRhLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgdGhpcy5lbWl0U3VjY2Vzc0FuZENsb3NlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGVydC5kYW5nZXIoZ2V0dGV4dChcIlByb3ZpZGVkIHBhc3N3b3JkIGRvZXNuJ3QgbWF0Y2ggeW91ciBjdXJyZW50IG9uZS5cIikpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5wYXNzd29yZENvbmZpcm1lZEVtaXR0ZXIuZW1pdChmYWxzZSk7XG4gICAgdGhpcy5tb2RhbC5fZGlzbWlzcygpO1xuICB9XG5cbiAgY3JlYXRlTmV3Q2xpZW50KHN0cmF0ZWd5OiBJQXV0aGVudGljYXRpb24sIGJhc2VVcmw6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgQ2xpZW50KHN0cmF0ZWd5LCBiYXNlVXJsKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpIHtcbiAgICB0aGlzLnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5lbWl0KHRydWUpO1xuICAgIHRoaXMubW9kYWwuX2Rpc21pc3MoKTtcbiAgfVxufVxuIl19