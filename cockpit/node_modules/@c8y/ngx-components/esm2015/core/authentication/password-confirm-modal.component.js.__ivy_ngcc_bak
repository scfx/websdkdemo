import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, ViewChild } from '@angular/core';
import { UserService, FetchClient, Client } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { LoginService } from '../login/login.service';
import { clone } from 'lodash-es';
import { gettext } from '../i18n/gettext';
export class PasswordConfirmModalComponent {
    constructor(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    passwordConfirm() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.password) {
                const supportUserName = this.ui.currentSupportUserName.value;
                const userId = this.ui.currentUser.value.id;
                const credentials = {
                    password: this.password,
                    user: `${supportUserName ? `${supportUserName}$` : ''}${userId}`,
                    tenant: this.client.tenant
                };
                try {
                    this.loading = true;
                    const strategy = clone(this.loginService.useBasicAuth({}));
                    delete credentials.tfa;
                    strategy.updateCredentials(credentials);
                    const newClient = this.createNewClient(strategy, this.client.baseUrl);
                    yield newClient.user.current();
                    this.emitSuccessAndClose();
                }
                catch (e) {
                    if (e.res && e.res.status === 401 && e.data && /pin|totp/i.test(e.data.message)) {
                        this.emitSuccessAndClose();
                    }
                    else {
                        this.alert.danger(gettext("Provided password doesn't match your current one."));
                    }
                }
                finally {
                    this.loading = false;
                }
            }
        });
    }
    cancel() {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    }
    createNewClient(strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    }
    emitSuccessAndClose() {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    }
}
PasswordConfirmModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-password-confirm-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm your current password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group [hasWarning]=\"true\">\r\n      <label translate for=\"currentPassword\">Enter your password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Enter your password' | translate }}\"\r\n        required\r\n      />\r\n      <c8y-messages>\r\n        <c8y-message translate>\r\n          Enter the password of the user that you are currently logged in with.\r\n        </c8y-message>\r\n      </c8y-messages>\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Confirm' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
            },] }
];
PasswordConfirmModalComponent.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: FetchClient },
    { type: AlertService },
    { type: LoginService }
];
PasswordConfirmModalComponent.propDecorators = {
    passwordConfirmedEmitter: [{ type: Output }],
    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxXQUFXLEVBQWdCLFdBQVcsRUFBRSxNQUFNLEVBQW1CLE1BQU0sYUFBYSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTTFDLE1BQU0sT0FBTyw2QkFBNkI7SUFPeEMsWUFDUyxJQUFpQixFQUNqQixFQUFtQixFQUNsQixNQUFtQixFQUNuQixLQUFtQixFQUNuQixZQUEwQjtRQUozQixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVgxQiw2QkFBd0IsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBQ2pFLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFXYixDQUFDO0lBRUUsZUFBZTs7WUFDbkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQztnQkFDN0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDNUMsTUFBTSxXQUFXLEdBQWlCO29CQUNoQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLElBQUksRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRTtvQkFDaEUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtpQkFDM0IsQ0FBQztnQkFDRixJQUFJO29CQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUNwQixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDM0QsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDO29CQUN2QixRQUFRLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ3hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3RFLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7aUJBQzVCO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQy9FLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO3FCQUM1Qjt5QkFBTTt3QkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsbURBQW1ELENBQUMsQ0FBQyxDQUFDO3FCQUNqRjtpQkFDRjt3QkFBUztvQkFDUixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztpQkFDdEI7YUFDRjtRQUNILENBQUM7S0FBQTtJQUVELE1BQU07UUFDSixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUF5QixFQUFFLE9BQWU7UUFDeEQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLG1CQUFtQjtRQUN6QixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBNURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNEJBQTRCO2dCQUN0QywwM0NBQXNEO2FBQ3ZEOzs7WUFYUSxXQUFXO1lBQ1gsZUFBZTtZQURZLFdBQVc7WUFFdEMsWUFBWTtZQUVaLFlBQVk7Ozt1Q0FTbEIsTUFBTTtvQkFJTixTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UsIElDcmVkZW50aWFscywgRmV0Y2hDbGllbnQsIENsaWVudCwgSUF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBNb2RhbENvbXBvbmVudCB9IGZyb20gJy4uL21vZGFsL21vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcGFzc3dvcmQtY29uZmlybS1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudCB7XG4gIEBPdXRwdXQoKSBwYXNzd29yZENvbmZpcm1lZEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgcGFzc3dvcmQ6IHN0cmluZztcblxuICBAVmlld0NoaWxkKCdtb2RhbCcsIHsgc3RhdGljOiBmYWxzZSB9KSBwcml2YXRlIG1vZGFsOiBNb2RhbENvbXBvbmVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgdXNlcjogVXNlclNlcnZpY2UsXG4gICAgcHVibGljIHVpOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBwYXNzd29yZENvbmZpcm0oKSB7XG4gICAgaWYgKHRoaXMucGFzc3dvcmQpIHtcbiAgICAgIGNvbnN0IHN1cHBvcnRVc2VyTmFtZSA9IHRoaXMudWkuY3VycmVudFN1cHBvcnRVc2VyTmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHRoaXMudWkuY3VycmVudFVzZXIudmFsdWUuaWQ7XG4gICAgICBjb25zdCBjcmVkZW50aWFsczogSUNyZWRlbnRpYWxzID0ge1xuICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgdXNlcjogYCR7c3VwcG9ydFVzZXJOYW1lID8gYCR7c3VwcG9ydFVzZXJOYW1lfSRgIDogJyd9JHt1c2VySWR9YCxcbiAgICAgICAgdGVuYW50OiB0aGlzLmNsaWVudC50ZW5hbnRcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCBzdHJhdGVneSA9IGNsb25lKHRoaXMubG9naW5TZXJ2aWNlLnVzZUJhc2ljQXV0aCh7fSkpO1xuICAgICAgICBkZWxldGUgY3JlZGVudGlhbHMudGZhO1xuICAgICAgICBzdHJhdGVneS51cGRhdGVDcmVkZW50aWFscyhjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IG5ld0NsaWVudCA9IHRoaXMuY3JlYXRlTmV3Q2xpZW50KHN0cmF0ZWd5LCB0aGlzLmNsaWVudC5iYXNlVXJsKTtcbiAgICAgICAgYXdhaXQgbmV3Q2xpZW50LnVzZXIuY3VycmVudCgpO1xuICAgICAgICB0aGlzLmVtaXRTdWNjZXNzQW5kQ2xvc2UoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUucmVzICYmIGUucmVzLnN0YXR1cyA9PT0gNDAxICYmIGUuZGF0YSAmJiAvcGlufHRvdHAvaS50ZXN0KGUuZGF0YS5tZXNzYWdlKSkge1xuICAgICAgICAgIHRoaXMuZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoXCJQcm92aWRlZCBwYXNzd29yZCBkb2Vzbid0IG1hdGNoIHlvdXIgY3VycmVudCBvbmUuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMucGFzc3dvcmRDb25maXJtZWRFbWl0dGVyLmVtaXQoZmFsc2UpO1xuICAgIHRoaXMubW9kYWwuX2Rpc21pc3MoKTtcbiAgfVxuXG4gIGNyZWF0ZU5ld0NsaWVudChzdHJhdGVneTogSUF1dGhlbnRpY2F0aW9uLCBiYXNlVXJsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IENsaWVudChzdHJhdGVneSwgYmFzZVVybCk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRTdWNjZXNzQW5kQ2xvc2UoKSB7XG4gICAgdGhpcy5wYXNzd29yZENvbmZpcm1lZEVtaXR0ZXIuZW1pdCh0cnVlKTtcbiAgICB0aGlzLm1vZGFsLl9kaXNtaXNzKCk7XG4gIH1cbn1cbiJdfQ==