import { __awaiter } from "tslib";
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../login/login.service';
import * as ɵngcc2 from './password.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../common/icon.directive';
import * as ɵngcc5 from '../i18n/c8y-translate.directive';
import * as ɵngcc6 from '../i18n/c8y-translate.pipe';

function PasswordCheckListComponent_li_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 0);
    ɵngcc0.ɵɵelement(1, "i", 3);
    ɵngcc0.ɵɵelement(2, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const requirement_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", requirement_r1.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("small ", requirement_r1.contextualColor, "");
    ɵngcc0.ɵɵproperty("translate", requirement_r1.label)("translateParams", ctx_r0.translateParams);
} }
export class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (e.g. abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (e.g. ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (e.g. 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (e.g. !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: (password) => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
            if (!this.minGreenLength) {
                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
            }
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, (requirement) => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.ɵfac = function PasswordCheckListComponent_Factory(t) { return new (t || PasswordCheckListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LoginService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PasswordService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PasswordService)); };
PasswordCheckListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordCheckListComponent, selectors: [["c8y-password-check-list"]], inputs: { password: "password" }, decls: 6, vars: 4, consts: [[1, "small"], [1, "list-unstyled"], ["class", "small", 4, "ngFor", "ngForOf"], [1, "text-success", 3, "c8yIcon"], [3, "translate", "translateParams"]], template: function PasswordCheckListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "span", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "ul", 1);
        ɵngcc0.ɵɵtemplate(5, PasswordCheckListComponent_li_5_Template, 3, 6, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(3, 2, "Please meet 5 out of the 5 conditions below"), ":");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.checklist);
    } }, directives: [ɵngcc3.NgForOf, ɵngcc4.IconDirective, ɵngcc5.C8yTranslateDirective], pipes: [ɵngcc6.C8yTranslatePipe], encapsulation: 2 });
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService },
    { type: PasswordService }
];
PasswordCheckListComponent.propDecorators = {
    password: [{ type: Input, args: ['password',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordCheckListComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-password-check-list',
                template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.LoginService }, { type: ɵngcc2.PasswordService }, { type: ɵngcc2.PasswordService }]; }, { password: [{
            type: Input,
            args: ['password']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYXV0aGVudGljYXRpb24vcGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVExQyxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUE2Q3hDLFlBQ1MsWUFBMEIsRUFDekIsdUJBQXdDLEVBQ3hDLGVBQWdDO0FBQ3pDLFFBSFEsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUMxQiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlCO0FBQUMsUUFDekMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQzVDLFFBeENFLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO0FBQzdCLFFBQ0UsY0FBUyxHQUFHO0FBQ2QsWUFBSTtBQUNKLGdCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7QUFDbEUsZ0JBQU0sS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO0FBQ3RELGdCQUFNLElBQUksRUFBRSxFQUFFO0FBQ2QsZ0JBQU0sZUFBZSxFQUFFLEVBQUU7QUFDekIsYUFDSztBQUNMLFlBQUk7QUFDSixnQkFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLDRDQUE0QyxDQUFDO0FBQ2xFLGdCQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMs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cm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhc3N3b3JkU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IGFzc2lnbiwgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcGFzc3dvcmQtY2hlY2stbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ2hlY2tMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoJ3Bhc3N3b3JkJylcbiAgc2V0IHBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5vblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKTtcbiAgICB9XG4gIH1cblxuICBtaW5HcmVlbkxlbmd0aDogbnVtYmVyID0gMDtcblxuICBjaGVja2xpc3QgPSBbXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbG93ZXJjYXNlIGNoYXJhY3RlcnMgKGUuZy4gYWJjZGVmKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTG93ZXJDYXNlLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG5cbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIHVwcGVyY2FzZSBjaGFyYWN0ZXJzIChlLmcuIEFCQ0RFRiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1VwcGVyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbnVtYmVycyAoZS5nLiAxMjM0NTYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNOdW1iZXJzLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSBzeW1ib2xzIChlLmcuICFAIyQlXiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1NwZWNpYWxDaGFycyxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ011c3QgaGF2ZSBhdCBsZWFzdCB7e2xlbmd0aH19IGNoYXJhY3RlcnMnKSxcbiAgICAgIGNoZWNrOiAocGFzc3dvcmQpID0+IHBhc3N3b3JkLmxlbmd0aCA+PSB0aGlzLm1pbkdyZWVuTGVuZ3RoLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfVxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHBhc3N3b3JkU3RyZW5ndGhDaGVja2VyOiBQYXNzd29yZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwYXNzd29yZFNlcnZpY2U6IFBhc3N3b3JkU2VydmljZVxuICApIHsgfVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMubWluR3JlZW5MZW5ndGggPSBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS5nZXRHcmVlbk1pbkxlbmd0aCgpO1xuICAgIGlmICghdGhpcy5taW5HcmVlbkxlbmd0aCkge1xuICAgICAgdGhpcy5taW5HcmVlbkxlbmd0aCA9IHRoaXMucGFzc3dvcmRTZXJ2aWNlLmdldERlZmF1bHRQYXNzd29yZE1pbkxlbmd0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0cmFuc2xhdGVQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlbmd0aDogdGhpcy5taW5HcmVlbkxlbmd0aFxuICAgIH07XG4gIH1cblxuICBvblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKSB7XG4gICAgdGhpcy5jaGVja2xpc3QgPSBtYXAodGhpcy5jaGVja2xpc3QsIChyZXF1aXJlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9IHJlcXVpcmVtZW50LmNoZWNrKHBhc3N3b3JkKTtcbiAgICAgIGFzc2lnbihyZXF1aXJlbWVudCwge1xuICAgICAgICBpY29uOiBjaGVja2VkID8gJ2NoZWNrLWNpcmNsZScgOiAnJyxcbiAgICAgICAgY29udGV4dHVhbENvbG9yOiBjaGVja2VkID8gJycgOiAndGV4dC1tdXRlZCdcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcXVpcmVtZW50O1xuICAgIH0pO1xuICB9XG59XG4iXX0=