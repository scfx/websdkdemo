import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { BsModalService } from 'ngx-bootstrap/modal';
import { take } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
export class PasswordService {
    constructor(modalService) {
        this.modalService = modalService;
        this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    confirmPassword() {
        const modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        const passwordConfirmedEmitter = modalInstance.content.passwordConfirmedEmitter;
        return passwordConfirmedEmitter.pipe(take(1));
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
    getDefaultPasswordMinLength() {
        return this.DEFAULT_PASSWORD_MIN_LENGTH;
    }
}
PasswordService.ɵfac = function PasswordService_Factory(t) { return new (t || PasswordService)(ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
PasswordService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PasswordService, factory: PasswordService.ɵfac });
PasswordService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRW5DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFJdEMsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFxQkUsWUFBb0IsWUFBNEI7QUFBSSxRQUFoQyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7QUFBQyxRQXJCekMsZ0NBQTJCLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLFFBQ1UsVUFBSyxHQUEwQjtBQUN6QyxZQUFJLFNBQVMsRUFBRSxPQUFPO0FBQ3RCLFlBQUksS0FBSyxFQUFFLGdCQUFnQjtBQUMzQixZQUFJLFdBQVcsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2xDLFlBQUksZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsS0FBSztBQUM1QyxTQUFHLENBQUM7QUFDSixRQUFVLFdBQU0sR0FBMEI7QUFDMUMsWUFBSSxTQUFTLEVBQUUsUUFBUTtBQUN2QixZQUFJLEtBQUssRUFBRSxtQkFBbUI7QUFDOUIsWUFBSSxXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUNsQyxZQUFJLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLE1BQU07QUFDN0MsU0FBRyxDQUFDO0FBQ0osUUFBVSxRQUFHLEdBQTBCO0FBQ3ZDLFlBQUksU0FBUyxFQUFFLEtBQUs7QUFDcEIsWUFBSSxLQUFLLEVBQUUsaUJBQWlCO0FBQzVCLFlBQUksV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDaEMsWUFBSSxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHO0FBQzFDLFNBQUcsQ0FBQztBQUNKLElBQ3FELENBQUM7QUFDdEQsSUFDRSxlQUFlO0FBQUssUUFDbEIsTUFBTSxhQUFhLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUNyRixRQUFJLE1BQU0sd0JBQXdCLEdBQTBCLGFBQWEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDM0csUUFBSSxPQUFPLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxJQUNFLFlBQVksQ0FBQyxRQUFnQjtBQUMvQixRQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxZQUFZLENBQUMsUUFBZ0I7QUFDL0IsUUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNILElBQ0UsVUFBVSxDQUFDLFFBQWdCO0FBQzdCLFFBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFDSCxJQUNFLGVBQWUsQ0FBQyxRQUFnQjtBQUNsQyxRQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxnQkFBZ0IsQ0FBQyxRQUFnQjtBQUFJLFFBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0FBQ3BDLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7QUFDakMsWUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxZQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQy9CLFlBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7QUFDcEMsU0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2QsUUFDSSxJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRTtBQUM5QixZQUFNLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN4QixTQUFLO0FBQUMsYUFBSyxJQUFJLGdCQUFnQixJQUFJLENBQUMsRUFBRTtBQUN0QyxZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN6QixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ3RCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLDJCQUEyQjtBQUM3QixRQUFJLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNIOzJDQW5FQyxVQUFVOzJIQUNUO0FBQUM7QUFDVSxZQU5KLGNBQWM7QUFBRzs7OytFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGggfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aENvbG9yIH0gZnJvbSAnLi9wYXNzd29yZC5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU2VydmljZSB7XG4gIHByaXZhdGUgREVGQVVMVF9QQVNTV09SRF9NSU5fTEVOR1RIID0gODtcblxuICBwcml2YXRlIEdSRUVOOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgPSB7XG4gICAgY29sb3JOYW1lOiAnZ3JlZW4nLFxuICAgIGNvbG9yOiAncmdiKDAsIDEyOCwgMCknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdzdHJvbmcnKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLkdSRUVOXG4gIH07XG4gIHByaXZhdGUgWUVMTE9XOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgPSB7XG4gICAgY29sb3JOYW1lOiAneWVsbG93JyxcbiAgICBjb2xvcjogJ3JnYigyNTUsIDIwNCwgNTEpJyxcbiAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnbWVkaXVtJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5ZRUxMT1dcbiAgfTtcbiAgcHJpdmF0ZSBSRUQ6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICdyZWQnLFxuICAgIGNvbG9yOiAncmdiKDE3MCwgMCwgNTEpJyxcbiAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnd2VhaycpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguUkVEXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIGNvbmZpcm1QYXNzd29yZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBtb2RhbEluc3RhbmNlOiBhbnkgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50KTtcbiAgICBjb25zdCBwYXNzd29yZENvbmZpcm1lZEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG1vZGFsSW5zdGFuY2UuY29udGVudC5wYXNzd29yZENvbmZpcm1lZEVtaXR0ZXI7XG4gICAgcmV0dXJuIHBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5waXBlKHRha2UoMSkpO1xuICB9XG5cbiAgaGFzTG93ZXJDYXNlKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW2Etel0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzVXBwZXJDYXNlKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW0EtWl0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzTnVtYmVycyhwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1swLTldLykgIT09IC0xKTtcbiAgfVxuXG4gIGhhc1NwZWNpYWxDaGFycyhwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1teMC05YS16QS1aXSsvKSAhPT0gLTEpO1xuICB9XG5cbiAgZ2V0U3RyZW5ndGhDb2xvcihwYXNzd29yZDogc3RyaW5nKTogUGFzc3dvcmRTdHJlbmd0aENvbG9yIHtcbiAgICBjb25zdCBwYXNzd29yZFN0cmVuZ3RoID0gZmlsdGVyKFtcbiAgICAgIHRoaXMuaGFzTG93ZXJDYXNlKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzVXBwZXJDYXNlKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzTnVtYmVycyhwYXNzd29yZCksXG4gICAgICB0aGlzLmhhc1NwZWNpYWxDaGFycyhwYXNzd29yZClcbiAgICBdKS5sZW5ndGg7XG5cbiAgICBpZiAocGFzc3dvcmRTdHJlbmd0aCA+IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLkdSRUVOO1xuICAgIH0gZWxzZSBpZiAocGFzc3dvcmRTdHJlbmd0aCA+PSAzKSB7XG4gICAgICByZXR1cm4gdGhpcy5ZRUxMT1c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLlJFRDtcbiAgICB9XG4gIH1cblxuICBnZXREZWZhdWx0UGFzc3dvcmRNaW5MZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuREVGQVVMVF9QQVNTV09SRF9NSU5fTEVOR1RIO1xuICB9XG59XG4iXX0=