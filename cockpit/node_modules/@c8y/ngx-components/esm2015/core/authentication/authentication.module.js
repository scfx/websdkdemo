import { NgModule } from '@angular/core';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '../common/common.module';
import { PasswordCheckListComponent } from './password-check-list.component';
import { PasswordConfirm } from './password-confirm.directive';
import { PasswordStrengthCheckerService } from './password-strength-checker.service';
import { PasswordStrengthComponent } from './password-strength.component';
import { NewPasswordComponent } from './new-password.component';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { ModalModule } from '../modal/modal.module';
import { FormsModule } from '../forms/forms.module';
import { TotpChallengeComponent } from './totp-challenge.component';
import { SmsChallengeComponent } from './sms-challenge.component';
import { TotpSetupComponent } from './totp-setup.component';
import { PasswordService } from './password.service';
import { QRCodeModule } from 'angularx-qrcode';
import { ProvidePhoneNumberComponent } from './provide-phone-number.component';
/**
 * The angular module definition for new password.
 * @exports PasswordStrengthComponent
 * @exports PasswordCheckListComponent
 * @exports PasswordConfirm
 * @exports NewPasswordComponent
 * @exports PasswordConfirmModalComponent
 */
import * as ɵngcc0 from '@angular/core';
export class AuthenticationModule {
}
AuthenticationModule.ɵfac = function AuthenticationModule_Factory(t) { return new (t || AuthenticationModule)(); };
AuthenticationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AuthenticationModule });
AuthenticationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [PasswordStrengthCheckerService, PasswordService], imports: [[FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TotpChallengeComponent,
                    PasswordConfirm,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent,
                    ProvidePhoneNumberComponent
                ],
                imports: [FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule],
                exports: [
                    TotpChallengeComponent,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    PasswordConfirm,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent,
                    ProvidePhoneNumberComponent
                ],
                entryComponents: [PasswordConfirmModalComponent],
                providers: [PasswordStrengthCheckerService, PasswordService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AuthenticationModule, { declarations: function () { return [TotpChallengeComponent,
        PasswordConfirm,
        PasswordStrengthComponent,
        PasswordCheckListComponent,
        NewPasswordComponent,
        PasswordConfirmModalComponent,
        SmsChallengeComponent,
        TotpSetupComponent,
        ProvidePhoneNumberComponent]; }, imports: function () { return [FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule]; }, exports: function () { return [TotpChallengeComponent,
        PasswordStrengthComponent,
        PasswordCheckListComponent,
        PasswordConfirm,
        NewPasswordComponent,
        PasswordConfirmModalComponent,
        SmsChallengeComponent,
        TotpSetupComponent,
        ProvidePhoneNumberComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24ubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBNEJILE1BQU0sT0FBTyxvQkFBb0I7QUFBRztnREEzQm5DLFFBQVEsU0FBQyxrQkFDUixZQUFZLEVBQUU7R0FDWixzQkFBc0Isc0JBQ3RCLGVBQWUsc0JBQ2Y7VUFBeUIsc0JBQ3pCLDBCQUEwQixzQkFDMUIsb0JBQW9CLHNCQUNwQiw2QkFBNkIsc0JBQzdCLHFCQUFxQjtDQUNyQixrQkFBa0Isc0JBQ2xCLDJCQUEyQixrQkFDNUIsa0JBQ0QsT0FBTyxFQUFFLENBQUM7U0FBVyxFQUFFO0FBQWEsRUFBRSxZQUFZLEVBQUU7VUFBVyxFQUFFLFlBQVksQ0FBQztXQUM5RSxPQUFPLEVBQUUsc0JBQ1A7b0JBQXNCO0tBQ3RCLHlCQUF5QjtLQUN6QiwwQkFBMEI7S0FDMUIsZUFBZTtBQUNmLG9CQUFvQixzQkFDcEI7b0JBQTZCLHNCQUM3QjtvQkFBcUI7RUFDckIsa0JBQWtCLHNCQUNsQjs7RUFBMkIsa0JBQzVCLGtCQUNELGVBQWUsRUFBRSxDQUFDLDZCQUE2QixDQUFDO1FBQ2hELFNBQVMsRUFBRSxDQUFDO3VCQUE4QixFQUFFLGVBQWUsQ0FBQztXQUM3RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aURBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IFBhc3N3b3JkQ2hlY2tMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQYXNzd29yZENvbmZpcm0gfSBmcm9tICcuL3Bhc3N3b3JkLWNvbmZpcm0uZGlyZWN0aXZlJztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhDaGVja2VyU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQtc3RyZW5ndGgtY2hlY2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhDb21wb25lbnQgfSBmcm9tICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZXdQYXNzd29yZENvbXBvbmVudCB9IGZyb20gJy4vbmV3LXBhc3N3b3JkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vcGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICcuLi9tb2RhbC9tb2RhbC5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICcuLi9mb3Jtcy9mb3Jtcy5tb2R1bGUnO1xuaW1wb3J0IHsgVG90cENoYWxsZW5nZUNvbXBvbmVudCB9IGZyb20gJy4vdG90cC1jaGFsbGVuZ2UuY29tcG9uZW50JztcbmltcG9ydCB7IFNtc0NoYWxsZW5nZUNvbXBvbmVudCB9IGZyb20gJy4vc21zLWNoYWxsZW5nZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVG90cFNldHVwQ29tcG9uZW50IH0gZnJvbSAnLi90b3RwLXNldHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQYXNzd29yZFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLnNlcnZpY2UnO1xuaW1wb3J0IHsgUVJDb2RlTW9kdWxlIH0gZnJvbSAnYW5ndWxhcngtcXJjb2RlJztcbmltcG9ydCB7IFByb3ZpZGVQaG9uZU51bWJlckNvbXBvbmVudCB9IGZyb20gJy4vcHJvdmlkZS1waG9uZS1udW1iZXIuY29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgYW5ndWxhciBtb2R1bGUgZGVmaW5pdGlvbiBmb3IgbmV3IHBhc3N3b3JkLlxuICogQGV4cG9ydHMgUGFzc3dvcmRTdHJlbmd0aENvbXBvbmVudFxuICogQGV4cG9ydHMgUGFzc3dvcmRDaGVja0xpc3RDb21wb25lbnRcbiAqIEBleHBvcnRzIFBhc3N3b3JkQ29uZmlybVxuICogQGV4cG9ydHMgTmV3UGFzc3dvcmRDb21wb25lbnRcbiAqIEBleHBvcnRzIFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50XG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFRvdHBDaGFsbGVuZ2VDb21wb25lbnQsXG4gICAgUGFzc3dvcmRDb25maXJtLFxuICAgIFBhc3N3b3JkU3RyZW5ndGhDb21wb25lbnQsXG4gICAgUGFzc3dvcmRDaGVja0xpc3RDb21wb25lbnQsXG4gICAgTmV3UGFzc3dvcmRDb21wb25lbnQsXG4gICAgUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQsXG4gICAgU21zQ2hhbGxlbmdlQ29tcG9uZW50LFxuICAgIFRvdHBTZXR1cENvbXBvbmVudCxcbiAgICBQcm92aWRlUGhvbmVOdW1iZXJDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0Zvcm1zTW9kdWxlLCBUb29sdGlwTW9kdWxlLCBDb21tb25Nb2R1bGUsIE1vZGFsTW9kdWxlLCBRUkNvZGVNb2R1bGVdLFxuICBleHBvcnRzOiBbXG4gICAgVG90cENoYWxsZW5nZUNvbXBvbmVudCxcbiAgICBQYXNzd29yZFN0cmVuZ3RoQ29tcG9uZW50LFxuICAgIFBhc3N3b3JkQ2hlY2tMaXN0Q29tcG9uZW50LFxuICAgIFBhc3N3b3JkQ29uZmlybSxcbiAgICBOZXdQYXNzd29yZENvbXBvbmVudCxcbiAgICBQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudCxcbiAgICBTbXNDaGFsbGVuZ2VDb21wb25lbnQsXG4gICAgVG90cFNldHVwQ29tcG9uZW50LFxuICAgIFByb3ZpZGVQaG9uZU51bWJlckNvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1Bhc3N3b3JkU3RyZW5ndGhDaGVja2VyU2VydmljZSwgUGFzc3dvcmRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvbk1vZHVsZSB7fVxuIl19