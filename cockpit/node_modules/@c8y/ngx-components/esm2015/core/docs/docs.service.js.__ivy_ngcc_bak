import { Injectable, Injector } from '@angular/core';
import { OptionsService } from '../common/options.service';
import { documentationItems } from './defaults.items';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { HOOK_DOCS } from './docs.models';
import { fromTriggerOnce } from '../common/extension-hooks';
import { Subject } from 'rxjs';
import { Router } from '@angular/router';
import { shareReplay, startWith, first, filter } from 'rxjs/operators';
import { isUndefined } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "@angular/router";
export class DocsService {
    constructor(options, app, injector, router) {
        this.options = options;
        this.app = app;
        this.injector = injector;
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        this.refreshTrigger = new Subject();
        const supportUrlRefreshTrigger = this.app.map(({ supportUrl }) => supportUrl);
        this.items$ = fromTriggerOnce(router, [supportUrlRefreshTrigger, this.refreshTrigger], [() => this.injector.get(HOOK_DOCS, []), () => this.factories, this]).pipe(startWith([]), shareReplay(1));
    }
    getBaseUrl() {
        return this.options.get('docsBaseUrl', 'https://www.cumulocity.com/guides');
    }
    get templateStr() {
        return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
    }
    getUserGuideLink(link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    }
    list() {
        return this.items$
            .pipe(filter(i => !!i.length), first())
            .toPromise();
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get() {
        // use the function as a factory
        const { links, noDefault, excludeDefault = [] } = this.options.get('docs', {});
        const { supportUrl } = this.app.state;
        let staticLinks = noDefault
            ? []
            : documentationItems
                .map((item) => (Object.assign(Object.assign({}, item), { url: this.getUserGuideLink(item.url) })))
                .filter(({ url }) => !excludeDefault.some(e => new RegExp(e).test(url)));
        if (links) {
            // backwards compatibility
            links.map((lnk) => {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    }
    getLink(templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    }
    prefixWithSlash(partialLink = '') {
        const shouldPrefix = !(partialLink && /^\//.test(partialLink));
        const prefix = shouldPrefix ? '/' : '';
        return `${prefix}${partialLink}`;
    }
}
DocsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.Router)); }, token: DocsService, providedIn: "root" });
DocsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DocsService.ctorParameters = () => [
    { type: OptionsService },
    { type: AppStateService },
    { type: Injector },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,