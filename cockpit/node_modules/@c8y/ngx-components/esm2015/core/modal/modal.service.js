import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ConfirmModalComponent } from './modal-confirm.component';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to show a modal.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/modal';
export class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     */
    confirm(title, body, status = Status.INFO, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels: modalLabels, status } });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels, status } });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    confirmLogout(body, status = Status.WARNING, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = { ok: labels.ok || gettext('Confirm and log out'), cancel: labels.cancel || gettext('Cancel') };
            const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
            return yield this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
        });
    }
}
ModalService.ɵfac = function ModalService_Factory(t) { return new (t || ModalService)(ɵngcc0.ɵɵinject(ɵngcc1.BsModalService)); };
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService.ctorParameters = () => [
    { type: BsModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.BsModalService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9tb2RhbC9tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQWMsTUFBTSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDO0FBSUE7QUFIQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUgsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFDRSxZQUFvQixZQUE0QjtBQUFJLFFBQWhDLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtBQUFDLElBQUUsQ0FBQztBQUN0RCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFRLE9BQU8sQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLFNBQXFCLE1BQU0sQ0FBQyxJQUFJLEVBQUcsU0FBYyxFQUFFO0FBQ2hHO0FBQThELFlBQTFELE1BQU0sV0FBVyxHQUFHLEVBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDO0FBQzFHLFlBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQy9ILFlBQUksT0FBTyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3pDLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFRLFdBQVcsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLFNBQXFCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsbUJBQTJCLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFBSTtBQUVoSSxZQURBLE1BQU0sTUFBTSxHQUFHLEVBQUMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUN4RCxZQUFJLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEVBQUMsWUFBWSxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQ2xILFlBQUksT0FBTyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3pDLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURHO0FBQ0wsSUFBUSxhQUFhLENBQUMsSUFBYSxFQUFFLFNBQXFCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsU0FBYyxFQUFFO0FBQzFGO0FBQThELFlBQTFELE1BQU0sV0FBVyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDeEgsWUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksT0FBTyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7QUFDekcsWUFBSSxPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FDdkIsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQzFCLFNBQVMsRUFDVCxNQUFNLEVBQ04sV0FBVyxDQUNaLENBQUM7QUFDTixRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7aUlBQUM7QUFDRCwrTEEvQ0s7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFLRyxZQWJOLGNBQWM7QUFBRztPQVN4QixVQUFVLEVBQUUsTUFBTSxjQUNuQjs7Ozs7K0VBVjJCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgQ29uZmlybU1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9tb2RhbC1jb25maXJtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdGF0dXNUeXBlLCBTdGF0dXMgfSBmcm9tICcuLi9jb21tb24vc3RhdHVzLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gc2hvdyBhIG1vZGFsLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb2RhbFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSkge31cblxuICAvKipcbiAgICogU2hvd3MgYSBxdWljayBjb25maXJtIG1lc3NhZ2UgbW9kYWwuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhhdCBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBsYWJlbHMgVGhlIGxhYmVscyB0byB1c2UuIERlZmF1bHQ6IHsgb2s6ICdDb25maXJtJywgY2FuY2VsOiAnQ2FuY2VsJ31cbiAgICovXG4gIGFzeW5jIGNvbmZpcm0odGl0bGU6IHN0cmluZywgYm9keTogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTywgIGxhYmVsczogYW55ID0ge30pIHtcbiAgICBjb25zdCBtb2RhbExhYmVscyA9IHtvazogbGFiZWxzLm9rIHx8IGdldHRleHQoJ0NvbmZpcm0nKSwgY2FuY2VsOiBsYWJlbHMuY2FuY2VsIHx8IGdldHRleHQoJ0NhbmNlbCcpfTtcbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coQ29uZmlybU1vZGFsQ29tcG9uZW50LCB7aW5pdGlhbFN0YXRlOiB7dGl0bGUsIGJvZHksIGxhYmVsczogbW9kYWxMYWJlbHMsIHN0YXR1c319KTtcbiAgICByZXR1cm4gYXdhaXQgbW9kYWxSZWYuY29udGVudC5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgYSBxdWljayBhY2tub3dsZWRnZSBtZXNzYWdlIG1vZGFsLlxuICAgKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoYXQgbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gYWNrbm93bGVkZ2VMYWJlbCBUaGUgbGFiZWwgdG8gdXNlLlxuICAgKi9cbiAgYXN5bmMgYWNrbm93bGVkZ2UodGl0bGU6IHN0cmluZywgYm9keTogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTywgYWNrbm93bGVkZ2VMYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnQ29uZmlybScpICkge1xuICAgIGNvbnN0IGxhYmVscyA9IHtvazogYWNrbm93bGVkZ2VMYWJlbCwgY2FuY2VsOiBudWxsfTtcbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coQ29uZmlybU1vZGFsQ29tcG9uZW50LCB7aW5pdGlhbFN0YXRlOiB7dGl0bGUsIGJvZHksIGxhYmVscywgc3RhdHVzfX0pO1xuICAgIHJldHVybiBhd2FpdCBtb2RhbFJlZi5jb250ZW50LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGxvZ291dCBjb25maXJtYXRpb24gbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS4gRGVmYXVsdDogJ1lvdSB3aWxsIGJlIGxvZ2dlZCBvdXQgdG8gYXBwbHkgeW91ciBjaGFuZ2VzLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPydcbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gbGFiZWxzIFRoZSBsYWJlbHMgdG8gdXNlLiBEZWZhdWx0OiB7IG9rOiAnQ29uZmlybSBhbmQgbG9nIG91dCcsIGNhbmNlbDogJ0NhbmNlbCcgfVxuICAgKi9cbiAgYXN5bmMgY29uZmlybUxvZ291dChib2R5Pzogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuV0FSTklORywgbGFiZWxzOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IG1vZGFsTGFiZWxzID0geyBvazogbGFiZWxzLm9rIHx8IGdldHRleHQoJ0NvbmZpcm0gYW5kIGxvZyBvdXQnKSwgY2FuY2VsOiBsYWJlbHMuY2FuY2VsIHx8IGdldHRleHQoJ0NhbmNlbCcpIH07XG4gICAgY29uc3QgbW9kYWxCb2R5ID0gYm9keSB8fCBnZXR0ZXh0KCdZb3UgbXVzdCBsb2cgb3V0IHRvIGFwcGx5IHlvdXIgY2hhbmdlcy4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jb25maXJtKFxuICAgICAgZ2V0dGV4dCgnTG9nb3V0IHJlcXVpcmVkJyksXG4gICAgICBtb2RhbEJvZHksXG4gICAgICBzdGF0dXMsXG4gICAgICBtb2RhbExhYmVsc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==