import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ConfirmModalComponent } from './modal-confirm.component';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to show a modal.
 */
export class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     */
    confirm(title, body, status = Status.INFO, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels: modalLabels, status } });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return __awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels, status } });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    confirmLogout(body, status = Status.WARNING, labels = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const modalLabels = { ok: labels.ok || gettext('Confirm and log out'), cancel: labels.cancel || gettext('Cancel') };
            const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
            return yield this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
        });
    }
}
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ModalService.ctorParameters = () => [
    { type: BsModalService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbW9kYWwvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFjLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBRTFDOztHQUVHO0FBSUgsTUFBTSxPQUFPLFlBQVk7SUFFdkIsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQUcsQ0FBQztJQUVwRDs7Ozs7O09BTUc7SUFDRyxPQUFPLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxTQUFxQixNQUFNLENBQUMsSUFBSSxFQUFHLFNBQWMsRUFBRTs7WUFDNUYsTUFBTSxXQUFXLEdBQUcsRUFBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUM7WUFDdEcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQzNILE9BQU8sTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFFRDs7Ozs7O09BTUc7SUFDRyxXQUFXLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxTQUFxQixNQUFNLENBQUMsSUFBSSxFQUFFLG1CQUEyQixPQUFPLENBQUMsU0FBUyxDQUFDOztZQUM1SCxNQUFNLE1BQU0sR0FBRyxFQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7WUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsRUFBQyxDQUFDLENBQUM7WUFDOUcsT0FBTyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLENBQUM7S0FBQTtJQUVEOzs7OztPQUtHO0lBQ0csYUFBYSxDQUFDLElBQWEsRUFBRSxTQUFxQixNQUFNLENBQUMsT0FBTyxFQUFFLFNBQWMsRUFBRTs7WUFDdEYsTUFBTSxXQUFXLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNwSCxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksT0FBTyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7WUFDckcsT0FBTyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQ3ZCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUMxQixTQUFTLEVBQ1QsTUFBTSxFQUNOLFdBQVcsQ0FDWixDQUFDO1FBQ0osQ0FBQztLQUFBOzs7O1lBaERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBVlEsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBDb25maXJtTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFsLWNvbmZpcm0uY29tcG9uZW50JztcbmltcG9ydCB7IFN0YXR1c1R5cGUsIFN0YXR1cyB9IGZyb20gJy4uL2NvbW1vbi9zdGF0dXMubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbi8qKlxuICogU2VydmljZSB0byBzaG93IGEgbW9kYWwuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1vZGFsU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGNvbmZpcm0gbWVzc2FnZSBtb2RhbC5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGF0IG1vZGFsLlxuICAgKiBAcGFyYW0gYm9keSBUaGUgdGV4dCBib2R5IHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSBzdGF0dXMgVGhlIHN0YXR1cy5cbiAgICogQHBhcmFtIGxhYmVscyBUaGUgbGFiZWxzIHRvIHVzZS4gRGVmYXVsdDogeyBvazogJ0NvbmZpcm0nLCBjYW5jZWw6ICdDYW5jZWwnfVxuICAgKi9cbiAgYXN5bmMgY29uZmlybSh0aXRsZTogc3RyaW5nLCBib2R5OiBzdHJpbmcsIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPLCAgbGFiZWxzOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IG1vZGFsTGFiZWxzID0ge29rOiBsYWJlbHMub2sgfHwgZ2V0dGV4dCgnQ29uZmlybScpLCBjYW5jZWw6IGxhYmVscy5jYW5jZWwgfHwgZ2V0dGV4dCgnQ2FuY2VsJyl9O1xuICAgIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhDb25maXJtTW9kYWxDb21wb25lbnQsIHtpbml0aWFsU3RhdGU6IHt0aXRsZSwgYm9keSwgbGFiZWxzOiBtb2RhbExhYmVscywgc3RhdHVzfX0pO1xuICAgIHJldHVybiBhd2FpdCBtb2RhbFJlZi5jb250ZW50LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyBhIHF1aWNrIGFja25vd2xlZGdlIG1lc3NhZ2UgbW9kYWwuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhhdCBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBhY2tub3dsZWRnZUxhYmVsIFRoZSBsYWJlbCB0byB1c2UuXG4gICAqL1xuICBhc3luYyBhY2tub3dsZWRnZSh0aXRsZTogc3RyaW5nLCBib2R5OiBzdHJpbmcsIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPLCBhY2tub3dsZWRnZUxhYmVsOiBzdHJpbmcgPSBnZXR0ZXh0KCdDb25maXJtJykgKSB7XG4gICAgY29uc3QgbGFiZWxzID0ge29rOiBhY2tub3dsZWRnZUxhYmVsLCBjYW5jZWw6IG51bGx9O1xuICAgIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhDb25maXJtTW9kYWxDb21wb25lbnQsIHtpbml0aWFsU3RhdGU6IHt0aXRsZSwgYm9keSwgbGFiZWxzLCBzdGF0dXN9fSk7XG4gICAgcmV0dXJuIGF3YWl0IG1vZGFsUmVmLmNvbnRlbnQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgbG9nb3V0IGNvbmZpcm1hdGlvbiBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LiBEZWZhdWx0OiAnWW91IHdpbGwgYmUgbG9nZ2VkIG91dCB0byBhcHBseSB5b3VyIGNoYW5nZXMuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/J1xuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBsYWJlbHMgVGhlIGxhYmVscyB0byB1c2UuIERlZmF1bHQ6IHsgb2s6ICdDb25maXJtIGFuZCBsb2cgb3V0JywgY2FuY2VsOiAnQ2FuY2VsJyB9XG4gICAqL1xuICBhc3luYyBjb25maXJtTG9nb3V0KGJvZHk/OiBzdHJpbmcsIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5XQVJOSU5HLCBsYWJlbHM6IGFueSA9IHt9KSB7XG4gICAgY29uc3QgbW9kYWxMYWJlbHMgPSB7IG9rOiBsYWJlbHMub2sgfHwgZ2V0dGV4dCgnQ29uZmlybSBhbmQgbG9nIG91dCcpLCBjYW5jZWw6IGxhYmVscy5jYW5jZWwgfHwgZ2V0dGV4dCgnQ2FuY2VsJykgfTtcbiAgICBjb25zdCBtb2RhbEJvZHkgPSBib2R5IHx8IGdldHRleHQoJ1lvdSBtdXN0IGxvZyBvdXQgdG8gYXBwbHkgeW91ciBjaGFuZ2VzLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbmZpcm0oXG4gICAgICBnZXR0ZXh0KCdMb2dvdXQgcmVxdWlyZWQnKSxcbiAgICAgIG1vZGFsQm9keSxcbiAgICAgIHN0YXR1cyxcbiAgICAgIG1vZGFsTGFiZWxzXG4gICAgKTtcbiAgfVxufVxuIl19