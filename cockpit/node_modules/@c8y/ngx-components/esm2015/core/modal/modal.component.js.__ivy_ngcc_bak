import { Component, Input, Optional, Output, EventEmitter, HostListener } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { gettext } from '../i18n/gettext';
import { isEmpty } from 'lodash';
/**
 * C8y modal component.
 * ## Example:
 *
 * Creating custom modal:
 * ```typescript
 *  import { Component } from "@angular/core";
 *  import { Subject } from 'rxjs';
 *
 * @Component({
 *  selector: "my-modal",
 *  template: `
 *    <c8y-modal title="CustomTitle"
 *      (onClose)="onClose($event)"
 *      (onDismiss)="onDismiss($event)"
 *      [labels]="labels"
 *      [disabled]="true" <- will disable ok button
 *      >
 *        <span>I am body of modal</span>
 *        <span>For simple string use body="string"</span>
 *    </c8y-modal>`
 * })
 *
 * export class MyModalComponent {
 *
 *  closeSubject: Subject<boolean> = new Subject();
 *  labels : ModalLabels = {ok: "customOK", cancel: "customCancel"};
 *
 *  onDismiss(event){
 *    this.closeSubject.next(false);
 *  }
 *
 *  onClose(event) {
 *    this.closeSubject.next(true);
 *  }
 * }
 * ```
 * Showing modal:
 * ```typescript
 * import { BsModalService } from "ngx-bootstrap/modal";
 *
 * constructor(
 *  public bsModalService: BsModalService,
 * ) {}
 *
 * showModal() {
 *  const modalRef = this.bsModalService.show(MyModalComponent);
 *  modalRef.content.closeSubject.subscribe(result => {
 *    console.log('results:', result);
 *  });
 * }
 * ```
 */
export class ModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.onDismiss = new EventEmitter();
        this.onClose = new EventEmitter();
        this.disabled = false;
        this.customFooter = false;
        this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
    }
    set labels({ ok, cancel }) {
        this._labels = { ok, cancel };
    }
    get labels() { return this._labels; }
    _dismiss() {
        let fn = this.dismiss;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onDismiss.emit(true);
    }
    _close() {
        let fn = this.close;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onClose.emit(true);
    }
    onEnterKeyDown(event) {
        const hasOnlyOneButton = isEmpty(this.labels.ok) !== isEmpty(this.labels.cancel);
        const isCancelClickable = !this.customFooter && this.labels.cancel;
        const isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
        if (hasOnlyOneButton && isCancelClickable) {
            this._dismiss();
        }
        if (hasOnlyOneButton && isOkClickable) {
            this._close();
        }
    }
}
ModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-modal',
                template: "<div class=\"modal-header\">\n  <ng-content select=\"[c8y-modal-title]\"></ng-content>\n  <h3 [hidden]=\"!title\">\n    {{ title | translate }}\n  </h3>\n</div>\n<div class=\"modal-body\">\n  <p [hidden]=\"!title\" class=\"text-center text-break-word\">\n    {{ body }}\n  </p>\n  <ng-content></ng-content>\n</div>\n<div\n  class=\"modal-footer\"\n  *ngIf=\"!customFooter\">\n  <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n  <button\n    title=\"{{ labels.cancel | translate }}\"\n    *ngIf=\"labels.cancel\"\n    class=\"btn btn-default\"\n    (click)=\"_dismiss()\"\n  >\n    {{ labels.cancel | translate }}\n  </button>\n  <button\n    title=\"{{ labels.ok | translate }}\"\n    *ngIf=\"labels.ok\"\n    class=\"btn btn-primary\"\n    (click)=\"_close()\"\n    [disabled]=\"disabled\"\n  >\n    {{ labels.ok | translate }}\n  </button>\n</div>\n"
            },] }
];
ModalComponent.ctorParameters = () => [
    { type: BsModalRef, decorators: [{ type: Optional }] }
];
ModalComponent.propDecorators = {
    onDismiss: [{ type: Output }],
    onClose: [{ type: Output }],
    disabled: [{ type: Input }],
    close: [{ type: Input }],
    dismiss: [{ type: Input }],
    title: [{ type: Input }],
    body: [{ type: Input }],
    customFooter: [{ type: Input }],
    labels: [{ type: Input }],
    onEnterKeyDown: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9tb2RhbC9tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9ERztBQU1ILE1BQU0sT0FBTyxjQUFjO0lBaUJ6QixZQUFnQyxLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBaEJ2QyxjQUFTLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDdEQsWUFBTyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFLakIsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFPL0IsWUFBTyxHQUFpQixFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBRTdCLENBQUM7SUFSckQsSUFBYSxNQUFNLENBQUMsRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFjO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBQyxFQUFFLEVBQUcsTUFBTSxFQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksTUFBTSxLQUFrQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBTWxELFFBQVE7UUFDTixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQUU7UUFDeEQsSUFBSSxFQUFFLEVBQUU7WUFBRSxFQUFFLEVBQUUsQ0FBQztTQUFFO1FBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUFFO1FBQ3hELElBQUksRUFBRSxFQUFFO1lBQUUsRUFBRSxFQUFFLENBQUM7U0FBRTtRQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRW1ELGNBQWMsQ0FBQyxLQUFvQjtRQUNyRixNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ25FLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDN0UsSUFBSSxnQkFBZ0IsSUFBSyxpQkFBaUIsRUFBRTtZQUMxQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7UUFDRCxJQUFJLGdCQUFnQixJQUFLLGFBQWEsRUFBRTtZQUN0QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7OztZQWhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLHcyQkFBcUM7YUFDdEM7OztZQTdEUSxVQUFVLHVCQWdGSixRQUFROzs7d0JBaEJwQixNQUFNO3NCQUNOLE1BQU07dUJBQ04sS0FBSztvQkFDTCxLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSzttQkFDTCxLQUFLOzJCQUNMLEtBQUs7cUJBQ0wsS0FBSzs2QkF3QkwsWUFBWSxTQUFDLHdCQUF3QixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBNb2RhbExhYmVscyB9IGZyb20gJy4uL3NlbGVjdC1tb2RhbC9zZWxlY3QtbW9kYWwubW9kZWwnO1xuXG4vKipcbiAqIEM4eSBtb2RhbCBjb21wb25lbnQuXG4gKiAjIyBFeGFtcGxlOlxuICpcbiAqIENyZWF0aW5nIGN1c3RvbSBtb2RhbDpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuICogIGltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBAQ29tcG9uZW50KHtcbiAqICBzZWxlY3RvcjogXCJteS1tb2RhbFwiLFxuICogIHRlbXBsYXRlOiBgXG4gKiAgICA8Yzh5LW1vZGFsIHRpdGxlPVwiQ3VzdG9tVGl0bGVcIlxuICogICAgICAob25DbG9zZSk9XCJvbkNsb3NlKCRldmVudClcIlxuICogICAgICAob25EaXNtaXNzKT1cIm9uRGlzbWlzcygkZXZlbnQpXCJcbiAqICAgICAgW2xhYmVsc109XCJsYWJlbHNcIlxuICogICAgICBbZGlzYWJsZWRdPVwidHJ1ZVwiIDwtIHdpbGwgZGlzYWJsZSBvayBidXR0b25cbiAqICAgICAgPlxuICogICAgICAgIDxzcGFuPkkgYW0gYm9keSBvZiBtb2RhbDwvc3Bhbj5cbiAqICAgICAgICA8c3Bhbj5Gb3Igc2ltcGxlIHN0cmluZyB1c2UgYm9keT1cInN0cmluZ1wiPC9zcGFuPlxuICogICAgPC9jOHktbW9kYWw+YFxuICogfSlcbiAqXG4gKiBleHBvcnQgY2xhc3MgTXlNb2RhbENvbXBvbmVudCB7XG4gKlxuICogIGNsb3NlU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG4gKiAgbGFiZWxzIDogTW9kYWxMYWJlbHMgPSB7b2s6IFwiY3VzdG9tT0tcIiwgY2FuY2VsOiBcImN1c3RvbUNhbmNlbFwifTtcbiAqXG4gKiAgb25EaXNtaXNzKGV2ZW50KXtcbiAqICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICogIH1cbiAqXG4gKiAgb25DbG9zZShldmVudCkge1xuICogICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dCh0cnVlKTtcbiAqICB9XG4gKiB9XG4gKiBgYGBcbiAqIFNob3dpbmcgbW9kYWw6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gXCJuZ3gtYm9vdHN0cmFwL21vZGFsXCI7XG4gKlxuICogY29uc3RydWN0b3IoXG4gKiAgcHVibGljIGJzTW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcbiAqICkge31cbiAqXG4gKiBzaG93TW9kYWwoKSB7XG4gKiAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLmJzTW9kYWxTZXJ2aWNlLnNob3coTXlNb2RhbENvbXBvbmVudCk7XG4gKiAgbW9kYWxSZWYuY29udGVudC5jbG9zZVN1YmplY3Quc3Vic2NyaWJlKHJlc3VsdCA9PiB7XG4gKiAgICBjb25zb2xlLmxvZygncmVzdWx0czonLCByZXN1bHQpO1xuICogIH0pO1xuICogfVxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tb2RhbC5jb21wb25lbnQuaHRtbCcsXG59KVxuXG5leHBvcnQgY2xhc3MgTW9kYWxDb21wb25lbnQge1xuICBAT3V0cHV0KCkgb25EaXNtaXNzOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNsb3NlOiAoKSA9PiB2b2lkO1xuICBASW5wdXQoKSBkaXNtaXNzOiAoKSA9PiB2b2lkO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBib2R5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbUZvb3RlcjogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBzZXQgbGFiZWxzKHtvaywgY2FuY2VsfTogTW9kYWxMYWJlbHMpIHtcbiAgICB0aGlzLl9sYWJlbHMgPSB7b2sgLCBjYW5jZWx9O1xuICB9XG5cbiAgZ2V0IGxhYmVscygpOiBNb2RhbExhYmVscyB7IHJldHVybiB0aGlzLl9sYWJlbHM7IH1cblxuICBwcml2YXRlIF9sYWJlbHM6IE1vZGFsTGFiZWxzID0gIHsgb2s6IGdldHRleHQoJ09LJyksIGNhbmNlbDogZ2V0dGV4dCgnQ2FuY2VsJykgfTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIG1vZGFsOiBCc01vZGFsUmVmKSB7fVxuXG4gIF9kaXNtaXNzKCkge1xuICAgIGxldCBmbiA9IHRoaXMuZGlzbWlzcztcbiAgICBpZiAoIWZuICYmIHRoaXMubW9kYWwpIHsgZm4gPSAoKSA9PiB0aGlzLm1vZGFsLmhpZGUoKTsgfVxuICAgIGlmIChmbikgeyBmbigpOyB9XG4gICAgdGhpcy5vbkRpc21pc3MuZW1pdCh0cnVlKTtcbiAgfVxuXG4gIF9jbG9zZSgpIHtcbiAgICBsZXQgZm4gPSB0aGlzLmNsb3NlO1xuICAgIGlmICghZm4gJiYgdGhpcy5tb2RhbCkgeyBmbiA9ICgpID0+IHRoaXMubW9kYWwuaGlkZSgpOyB9XG4gICAgaWYgKGZuKSB7IGZuKCk7IH1cbiAgICB0aGlzLm9uQ2xvc2UuZW1pdCh0cnVlKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmtleWRvd24uZW50ZXInLCBbJyRldmVudCddKSBvbkVudGVyS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGhhc09ubHlPbmVCdXR0b24gPSBpc0VtcHR5KHRoaXMubGFiZWxzLm9rKSAhPT0gaXNFbXB0eSh0aGlzLmxhYmVscy5jYW5jZWwpO1xuICAgIGNvbnN0IGlzQ2FuY2VsQ2xpY2thYmxlID0gIXRoaXMuY3VzdG9tRm9vdGVyICYmIHRoaXMubGFiZWxzLmNhbmNlbDtcbiAgICBjb25zdCBpc09rQ2xpY2thYmxlID0gIXRoaXMuY3VzdG9tRm9vdGVyICYmICF0aGlzLmRpc2FibGVkICYmIHRoaXMubGFiZWxzLm9rO1xuICAgIGlmIChoYXNPbmx5T25lQnV0dG9uICAmJiBpc0NhbmNlbENsaWNrYWJsZSkge1xuICAgICAgdGhpcy5fZGlzbWlzcygpO1xuICAgIH1cbiAgICBpZiAoaGFzT25seU9uZUJ1dHRvbiAgJiYgaXNPa0NsaWNrYWJsZSkge1xuICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==