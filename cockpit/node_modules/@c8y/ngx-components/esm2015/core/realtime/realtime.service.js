import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { filter, finalize, map } from 'rxjs/operators';
/**
 * A wrapper class for handling realtime notifications in RxJS fashion.
 */
export class RealtimeService {
    constructor(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
        this.isActive = true;
    }
    /**
     * A flag displaying if realtime notifications are currently active.
     */
    get active() {
        return this.isActive;
    }
    /**
     * Get an Observable of all realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
     */
    onAll$(entityOrId) {
        const subject$ = this.getSubjectForChannel(entityOrId);
        return subject$.pipe(finalize(() => {
            if (subject$.observers.length === 1 && subject$.observers[0].closed) {
                subject$.stop();
                this.subjects$.delete(subject$.channel);
            }
        }));
    }
    /**
     * Subscribes again all realtime channels with active observers.
     */
    start() {
        if (!this.isActive) {
            this.subjects$.forEach(subject$ => {
                subject$.start();
            });
            this.isActive = true;
        }
    }
    /**
     * Stops realtime notifications and unsubscribes all realtime channels.
     */
    stop() {
        if (this.isActive) {
            this.subjects$.forEach(subject$ => {
                subject$.stop();
            });
            this.isActive = false;
        }
    }
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    onCreate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'CREATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all UPDATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of updated entity objects.
     */
    onUpdate$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'UPDATE'), map(msg => msg.data));
    }
    /**
     * Get an Observable of all DELETE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of deleted entity objects.
     */
    onDelete$(entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(msg => msg.realtimeAction === 'DELETE'), map(msg => coerceNumberProperty(msg.data)));
    }
    getIdString(reference) {
        let id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    }
    getChannel(entityOrId) {
        return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
    }
    getSubjectForChannel(entityOrId) {
        const channel = this.getChannel(entityOrId);
        let subject$;
        if (this.subjects$.has(channel)) {
            subject$ = this.subjects$.get(channel);
        }
        else {
            subject$ = new RealtimeSubject(channel, this.realtime);
            this.subjects$.set(channel, subject$);
        }
        return subject$;
    }
}
// tslint:disable-next-line: max-classes-per-file
class RealtimeSubject extends Subject {
    constructor(realtimeChannel, realtime) {
        super();
        this.realtimeChannel = realtimeChannel;
        this.realtime = realtime;
        this.start();
    }
    get channel() {
        return this.realtimeChannel;
    }
    start() {
        if (!this.realtimeSubscription) {
            this.realtimeSubscription = this.realtime.subscribe(this.realtimeChannel, msg => {
                const data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                this.next(data);
            });
        }
    }
    stop() {
        if (this.realtimeSubscription) {
            this.realtime.unsubscribe(this.realtimeSubscription);
            this.realtimeSubscription = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,