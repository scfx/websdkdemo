import { __awaiter } from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { LoginViews } from './login.model';
import { FetchClient } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { LoginService } from './login.service';
import { AlertService } from '../alert/alert.service';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
/**
 * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
 * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
 * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
 * The component will redirect user to this domain, preserving URL path and params.
 */
export class TenantIdSetupComponent {
    constructor(client, ui, loginService, alert, translateService) {
        this.client = client;
        this.ui = ui;
        this.loginService = loginService;
        this.alert = alert;
        this.translateService = translateService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {
            tenant: ''
        };
    }
    /**
     * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
     */
    setupLoginMode() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.tenant = this.model.tenant;
            try {
                yield this.ui.refreshLoginOptions();
                this.loginService.initLoginOptions();
                this.redirectToCorrectDomain();
            }
            catch (e) {
                if (e.res && e.res.status === 401) {
                    this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    /**
     * Redirects to tenant domain when login mode contains domain.
     */
    redirectToCorrectDomain() {
        const loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
        if (loginRedirectDomain) {
            this.loginService.redirectToDomain(loginRedirectDomain);
        }
        else {
            this.onChangeView.emit({ view: LoginViews.Credentials });
        }
    }
}
TenantIdSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-tenant-id-setup',
                template: "<form #tenantIdSetupForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>\n    Tenant setup\n  </div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n    translate\n  >\n    Apply\n  </button>\n</form>\n"
            },] }
];
TenantIdSetupComponent.ctorParameters = () => [
    { type: FetchClient },
    { type: AppStateService },
    { type: LoginService },
    { type: AlertService },
    { type: TranslateService }
];
TenantIdSetupComponent.propDecorators = {
    onChangeView: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbG9naW4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFRMUM7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDLFlBQ1UsTUFBbUIsRUFDbkIsRUFBbUIsRUFDbkIsWUFBMEIsRUFDMUIsS0FBbUIsRUFDbkIsZ0JBQWtDO1FBSmxDLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWGxDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QyxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUN6QixVQUFLLEdBQUc7WUFDTixNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUM7SUFRQyxDQUFDO0lBRUo7O09BRUc7SUFDRyxjQUFjOztZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2FBQ2hDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtvQkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ2YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDM0IsT0FBTyxDQUFDLGlEQUFpRCxDQUFDLEVBQzFELEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQ2hDLENBQ0YsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQzthQUNGO1FBQ0gsQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDSCx1QkFBdUI7UUFDckIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztRQUM1RSxJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN6RDthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDOzs7WUE1REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLDY1QkFBK0M7YUFFaEQ7OztZQVhRLFdBQVc7WUFDWCxlQUFlO1lBQ2YsWUFBWTtZQUNaLFlBQVk7WUFDWixnQkFBZ0I7OzsyQkFnQnRCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ2luVmlld3MgfSBmcm9tICcuL2xvZ2luLm1vZGVsJztcbmltcG9ydCB7IEZldGNoQ2xpZW50IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS10ZW5hbnQtaWQtc2V0dXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcblxuLyoqXG4gKiBgVGVuYW50SWRTZXR1cENvbXBvbmVudGAgaXMgaW50ZW5kZWQgdG8gYmUgc2hvd24gd2hlbiB0ZW5hbnQncyBpZCBjYW5ub3QgYmUgZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgY3VycmVudCBVUkwuXG4gKiBJdCBhc2tzIHRoZSB1c2VyIHRvIHByb3ZpZGUgdGFyZ2V0IHRlbmFudCdzIGlkIGFuZCB0aGVuIGl0IGZldGNoZXMgbG9naW4gb3B0aW9ucyBmb3IgdGhpcyB0ZW5hbnQuXG4gKiBJbiBjYXNlIG9mIE9BSS1TZWN1cmUgbG9naW4gbW9kZSwgbG9naW4gb3B0aW9ucyB3aWxsIGNvbnRhaW4gYGRvbWFpbmAgcHJvcGVydHkgc2V0IGJ5IGJhY2tlbmQuXG4gKiBUaGUgY29tcG9uZW50IHdpbGwgcmVkaXJlY3QgdXNlciB0byB0aGlzIGRvbWFpbiwgcHJlc2VydmluZyBVUkwgcGF0aCBhbmQgcGFyYW1zLlxuICovXG5leHBvcnQgY2xhc3MgVGVuYW50SWRTZXR1cENvbXBvbmVudCB7XG4gIEBPdXRwdXQoKSBvbkNoYW5nZVZpZXcgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIExPR0lOX1ZJRVdTID0gTG9naW5WaWV3cztcbiAgbW9kZWwgPSB7XG4gICAgdGVuYW50OiAnJ1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudCxcbiAgICBwcml2YXRlIHVpOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogU2V0cyB1cCBsb2dpbiBtb2RlIGZvciBwYXJ0aWN1bGFyIHRlbmFudC4gSW4gY2FzZSBvZiBPQUktU2VjdXJlIHdpbGwgcmVkaXJlY3QgdXNlciB0byB0ZW5hbnQgZG9tYWluLlxuICAgKi9cbiAgYXN5bmMgc2V0dXBMb2dpbk1vZGUoKSB7XG4gICAgdGhpcy5jbGllbnQudGVuYW50ID0gdGhpcy5tb2RlbC50ZW5hbnQ7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMudWkucmVmcmVzaExvZ2luT3B0aW9ucygpO1xuICAgICAgdGhpcy5sb2dpblNlcnZpY2UuaW5pdExvZ2luT3B0aW9ucygpO1xuICAgICAgdGhpcy5yZWRpcmVjdFRvQ29ycmVjdERvbWFpbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLnJlcyAmJiBlLnJlcy5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICB0aGlzLmFsZXJ0LmRhbmdlcihcbiAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcbiAgICAgICAgICAgIGdldHRleHQoJ0NvdWxkIG5vdCBmaW5kIHRlbmFudCB3aXRoIElEIFwie3sgdGVuYW50SWQgfX1cIi4nKSxcbiAgICAgICAgICAgIHsgdGVuYW50SWQ6IHRoaXMubW9kZWwudGVuYW50IH1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZGlyZWN0cyB0byB0ZW5hbnQgZG9tYWluIHdoZW4gbG9naW4gbW9kZSBjb250YWlucyBkb21haW4uXG4gICAqL1xuICByZWRpcmVjdFRvQ29ycmVjdERvbWFpbigpIHtcbiAgICBjb25zdCBsb2dpblJlZGlyZWN0RG9tYWluID0gdGhpcy5sb2dpblNlcnZpY2UubG9naW5Nb2RlLmxvZ2luUmVkaXJlY3REb21haW47XG4gICAgaWYgKGxvZ2luUmVkaXJlY3REb21haW4pIHtcbiAgICAgIHRoaXMubG9naW5TZXJ2aWNlLnJlZGlyZWN0VG9Eb21haW4obG9naW5SZWRpcmVjdERvbWFpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25DaGFuZ2VWaWV3LmVtaXQoeyB2aWV3OiBMb2dpblZpZXdzLkNyZWRlbnRpYWxzIH0pO1xuICAgIH1cbiAgfVxufVxuIl19