import { Component, EventEmitter, Input, Output } from '@angular/core';
import { pipe } from 'rxjs';
import { tap } from 'rxjs/operators';
import { gettext } from '../i18n/gettext';
import { Location } from '@angular/common';
export class ListDisplaySwitchComponent {
    constructor(location) {
        this.location = location;
        this.filterPipe = pipe(tap());
        this.onListClassChange = new EventEmitter();
        this.DISPLAY_OPTIONS = [
            {
                name: 'AUTO',
                value: 'auto',
                label: gettext('Auto'),
                default: true,
                getListClass: () => {
                    const option = this._listLength > this.AUTO_GRID_ITEMS_LIMIT
                        ? this.DISPLAY_OPTIONS.find((opt) => opt.name === 'LIST')
                        : this.DISPLAY_OPTIONS.find((opt) => opt.name === 'GRID');
                    return option.getListClass();
                }
            },
            {
                name: 'GRID',
                value: 'grid',
                label: gettext('Grid'),
                getListClass: () => 'interact-grid'
            },
            {
                name: 'LIST',
                value: 'list',
                label: gettext('List'),
                getListClass: () => 'interact-list'
            }
        ];
        this.AUTO_GRID_ITEMS_LIMIT = 12;
    }
    set listLength(val) {
        this._listLength = val;
        this.loadSelectedOption();
    }
    ngOnInit() {
        this.loadSelectedOption();
    }
    onOptionSelect(option) {
        const localStorageKey = this.getLocalStorageKey();
        if (option.default) {
            localStorage.removeItem(localStorageKey);
        }
        else {
            localStorage.setItem(localStorageKey, option.value);
        }
        this.loadSelectedOption();
    }
    loadSelectedOption() {
        this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
        this.onListClassChange.emit(this.selectedOption.getListClass());
    }
    getLocalStorageOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.value === localStorage.getItem(this.getLocalStorageKey()));
    }
    getDefaultOption() {
        return this.DISPLAY_OPTIONS.find((option) => option.default);
    }
    getLocalStorageKey() {
        return `list-display-option[${this.getListKey()}]`;
    }
    getListKey() {
        return this.listKey || this.location.path();
    }
}
ListDisplaySwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-list-display-switch',
                template: "<div class=\"form-group\">\n  <label class=\"m-r-8\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">{{\n        option.label\n      }}</option></select\n    >\n    <span></span>\n  </div>\n</div>\n"
            },] }
];
ListDisplaySwitchComponent.ctorParameters = () => [
    { type: Location }
];
ListDisplaySwitchComponent.propDecorators = {
    listKey: [{ type: Input }],
    listLength: [{ type: Input, args: ['listLength',] }],
    filterPipe: [{ type: Input }],
    onListClassChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZGlzcGxheS1zd2l0Y2gvbGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQWMsSUFBSSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQU8sR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0zQyxNQUFNLE9BQU8sMEJBQTBCO0lBd0NyQyxZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBakM3QixlQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEIsc0JBQWlCLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFHdEUsb0JBQWUsR0FBb0I7WUFDMUM7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQ3RCLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFlBQVksRUFBRSxHQUFHLEVBQUU7b0JBQ2pCLE1BQU0sTUFBTSxHQUNWLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjt3QkFDM0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQzt3QkFDekQsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDO29CQUM5RCxPQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDL0IsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQ3RCLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlO2FBQ3BDO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQ3RCLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlO2FBQ3BDO1NBQ0YsQ0FBQztRQUNlLDBCQUFxQixHQUFHLEVBQUUsQ0FBQztJQUVILENBQUM7SUF0QzFDLElBQ0ksVUFBVSxDQUFDLEdBQVc7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQW9DRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFxQjtRQUNsQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNsRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDbEIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBQ0wsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzlFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTyxxQkFBcUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDOUIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUM3RSxDQUFDO0lBQ0osQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixPQUFPLHVCQUF1QixJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQztJQUNyRCxDQUFDO0lBRU8sVUFBVTtRQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7WUFqRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLDhjQUFtRDthQUNwRDs7O1lBTFEsUUFBUTs7O3NCQU9kLEtBQUs7eUJBQ0wsS0FBSyxTQUFDLFlBQVk7eUJBS2xCLEtBQUs7Z0NBQ0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElSZXN1bHRMaXN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgcGlwZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgRGlzcGxheU9wdGlvbiB9IGZyb20gJy4vbGlzdC1kaXNwbGF5LXN3aXRjaC5tb2RlbCc7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWRpc3BsYXktc3dpdGNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtZGlzcGxheS1zd2l0Y2guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIExpc3REaXNwbGF5U3dpdGNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGlzdEtleTogc3RyaW5nO1xuICBASW5wdXQoJ2xpc3RMZW5ndGgnKVxuICBzZXQgbGlzdExlbmd0aCh2YWw6IG51bWJlcikge1xuICAgIHRoaXMuX2xpc3RMZW5ndGggPSB2YWw7XG4gICAgdGhpcy5sb2FkU2VsZWN0ZWRPcHRpb24oKTtcbiAgfVxuICBASW5wdXQoKSBmaWx0ZXJQaXBlID0gcGlwZSh0YXAoKSk7XG4gIEBPdXRwdXQoKSBvbkxpc3RDbGFzc0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgc2VsZWN0ZWRPcHRpb246IERpc3BsYXlPcHRpb247XG5cbiAgcmVhZG9ubHkgRElTUExBWV9PUFRJT05TOiBEaXNwbGF5T3B0aW9uW10gPSBbXG4gICAge1xuICAgICAgbmFtZTogJ0FVVE8nLFxuICAgICAgdmFsdWU6ICdhdXRvJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdBdXRvJyksXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgZ2V0TGlzdENsYXNzOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9XG4gICAgICAgICAgdGhpcy5fbGlzdExlbmd0aCA+IHRoaXMuQVVUT19HUklEX0lURU1TX0xJTUlUXG4gICAgICAgICAgICA/IHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQoKG9wdCkgPT4gb3B0Lm5hbWUgPT09ICdMSVNUJylcbiAgICAgICAgICAgIDogdGhpcy5ESVNQTEFZX09QVElPTlMuZmluZCgob3B0KSA9PiBvcHQubmFtZSA9PT0gJ0dSSUQnKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbi5nZXRMaXN0Q2xhc3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdHUklEJyxcbiAgICAgIHZhbHVlOiAnZ3JpZCcsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnR3JpZCcpLFxuICAgICAgZ2V0TGlzdENsYXNzOiAoKSA9PiAnaW50ZXJhY3QtZ3JpZCdcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdMSVNUJyxcbiAgICAgIHZhbHVlOiAnbGlzdCcsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnTGlzdCcpLFxuICAgICAgZ2V0TGlzdENsYXNzOiAoKSA9PiAnaW50ZXJhY3QtbGlzdCdcbiAgICB9XG4gIF07XG4gIHByaXZhdGUgcmVhZG9ubHkgQVVUT19HUklEX0lURU1TX0xJTUlUID0gMTI7XG4gIHByaXZhdGUgX2xpc3RMZW5ndGg6IG51bWJlcjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sb2FkU2VsZWN0ZWRPcHRpb24oKTtcbiAgfVxuXG4gIG9uT3B0aW9uU2VsZWN0KG9wdGlvbjogRGlzcGxheU9wdGlvbikge1xuICAgIGNvbnN0IGxvY2FsU3RvcmFnZUtleSA9IHRoaXMuZ2V0TG9jYWxTdG9yYWdlS2V5KCk7XG4gICAgaWYgKG9wdGlvbi5kZWZhdWx0KSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShsb2NhbFN0b3JhZ2VLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbFN0b3JhZ2VLZXksIG9wdGlvbi52YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMubG9hZFNlbGVjdGVkT3B0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRTZWxlY3RlZE9wdGlvbigpIHtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uID0gdGhpcy5nZXRMb2NhbFN0b3JhZ2VPcHRpb24oKSB8fCB0aGlzLmdldERlZmF1bHRPcHRpb24oKTtcbiAgICB0aGlzLm9uTGlzdENsYXNzQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZE9wdGlvbi5nZXRMaXN0Q2xhc3MoKSk7XG4gIH1cblxuICBwcml2YXRlIGdldExvY2FsU3RvcmFnZU9wdGlvbigpOiBEaXNwbGF5T3B0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5ESVNQTEFZX09QVElPTlMuZmluZChcbiAgICAgIChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSA9PT0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5nZXRMb2NhbFN0b3JhZ2VLZXkoKSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0T3B0aW9uKCk6IERpc3BsYXlPcHRpb24ge1xuICAgIHJldHVybiB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKChvcHRpb24pID0+IG9wdGlvbi5kZWZhdWx0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYWxTdG9yYWdlS2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBsaXN0LWRpc3BsYXktb3B0aW9uWyR7dGhpcy5nZXRMaXN0S2V5KCl9XWA7XG4gIH1cblxuICBwcml2YXRlIGdldExpc3RLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5saXN0S2V5IHx8IHRoaXMubG9jYXRpb24ucGF0aCgpO1xuICB9XG59XG4iXX0=