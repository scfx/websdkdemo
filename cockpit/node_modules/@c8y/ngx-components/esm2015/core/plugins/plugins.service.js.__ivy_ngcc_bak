import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/ngx-components/api';
import { gettext } from '../i18n/gettext';
export class PluginsService {
    constructor(applicationService, client) {
        this.applicationService = applicationService;
        this.client = client;
    }
    listPackages() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.list({ pageSize: 2000 });
            return data.filter((app) => app.exports || (app.manifest && app.manifest.exports));
        });
    }
    listVersions(forPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.binary(forPackage).listPlugins();
            return data
                .map(plugin => (Object.assign(Object.assign({}, plugin.pluginPackage), { version: plugin.pluginName })))
                .filter(plugin => plugin.exports);
        });
    }
    listInstalled(forApp, flat = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const app = yield this.getApplication(forApp);
            const c8yJson = yield this.getCumulocityJsonFile(app);
            if (flat) {
                let flatList = [];
                for (const key in c8yJson.imports) {
                    if (c8yJson.imports.hasOwnProperty(key)) {
                        flatList = [
                            ...flatList,
                            ...c8yJson.imports[key].map(imp => /@/.test(key) ? `${key}/${imp}` : `${key}@latest/${imp}`)
                        ];
                    }
                }
                return flatList;
            }
            return c8yJson.imports;
        });
    }
    addByName(addTo, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('//').pop();
            const contextPath = pluginName.split('//').shift();
            const pkg = {
                contextPath
            };
            return this.add(addTo, pkg, name);
        });
    }
    removeByName(removeFrom, pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = pluginName.split('/').pop();
            const contextPath = /@latest/.test(pluginName)
                ? pluginName.split('@').shift()
                : pluginName.split('/').shift();
            const pkg = {
                contextPath
            };
            return this.remove(removeFrom, pkg, name);
        });
    }
    add(addToApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(addToApp, fromPackage, name, true);
        });
    }
    remove(removeFromApp, fromPackage, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.addOrRemove(removeFromApp, fromPackage, name, false);
        });
    }
    updateRemotesInCumulocityJson(app, remotes) {
        return __awaiter(this, void 0, void 0, function* () {
            const c8yJson = yield this.getCumulocityJsonFile(app);
            return this.storeCumulocityJson(app, Object.assign(Object.assign({}, c8yJson), { remotes }));
        });
    }
    addOrRemove(addToApp, fromPackage, name, add = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const application = yield this.getApplication(addToApp);
            const pkg = yield this.getApplication(fromPackage);
            const c8yJson = yield this.getCumulocityJsonFile(application);
            // TODO: Versions?!!
            const pkgImport = new Set(c8yJson.imports[pkg.contextPath]);
            if (add) {
                pkgImport.add(name);
            }
            else {
                pkgImport.delete(name);
            }
            c8yJson.imports[pkg.contextPath] = Array.from(pkgImport);
            yield this.storeCumulocityJson(application, c8yJson);
            return c8yJson;
        });
    }
    storeCumulocityJson(application, c8yJson) {
        return this.applicationService
            .binary(application)
            .updateFiles([{ path: 'cumulocity.json', contents: JSON.stringify(c8yJson) }]);
    }
    getCumulocityJsonFile(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.client.fetch(`/apps/${app.contextPath}/cumulocity.json`);
            if (result.status >= 400) {
                throw new Error(gettext('No Cumulocity IoT manifest found.'));
            }
            const c8yJson = yield result.json();
            if (!c8yJson.imports) {
                c8yJson.imports = {};
            }
            return c8yJson;
        });
    }
    getApplication(app) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof app !== 'number' && app.contextPath) {
                return app;
            }
            const { data } = yield this.applicationService.detail(app);
            return data;
        });
    }
}
PluginsService.decorators = [
    { type: Injectable }
];
PluginsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,