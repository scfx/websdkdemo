import { Component, ContentChildren } from '@angular/core';
import { BreadcrumbService } from './breadcrumb.service';
import { BreadcrumbItemComponent } from './breadcrumb-item.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './breadcrumb.service';

function BreadcrumbComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
const _c0 = ["*"];
export class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
    }
    ngAfterViewInit() {
        this.items = this.contentChildItems.toArray();
        this.viewInitTimeout = setTimeout(() => this.breadcrumbService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.breadcrumbService.remove(this);
    }
}
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BreadcrumbService)); };
BreadcrumbComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["c8y-breadcrumb"]], contentQueries: function BreadcrumbComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, BreadcrumbItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentChildItems = _t);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, BreadcrumbComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2 });
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService }
];
BreadcrumbComponent.propDecorators = {
    contentChildItems: [{ type: ContentChildren, args: [BreadcrumbItemComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-breadcrumb',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
            }]
    }], function () { return [{ type: ɵngcc1.BreadcrumbService }]; }, { contentChildItems: [{
            type: ContentChildren,
            args: [BreadcrumbItemComponent]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7Ozs7QUFNdEUsTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBS2pDLFlBQW9CLGlCQUFvQztBQUFJLFFBQXhDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7QUFBQyxJQUFFLENBQUM7QUFDOUQsSUFDRSxlQUFlO0FBQ2pCLFFBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbEQsUUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FDckMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFrQixDQUFDLENBQy9DLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQWtCLENBQUMsQ0FBQztBQUN0RCxJQUFFLENBQUM7QUFDSDsrQ0F0QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxnQkFBZ0Isa0JBQzFCO2tDQUEwQyxjQUMzQzs7Ozs7Ozs7NkJBQ0k7QUFBQztBQUE2QyxZQVAxQyxpQkFBaUI7QUFBRztBQUFHO0FBQ25CLGdDQVFWLGVBQWUsU0FBQyx1QkFBdUI7QUFBTTs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiwgQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL2JyZWFkY3J1bWIubW9kZWwnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYlNlcnZpY2UgfSBmcm9tICcuL2JyZWFkY3J1bWIuc2VydmljZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1icmVhZGNydW1iJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBCcmVhZGNydW1iIHtcbiAgaXRlbXM6IEJyZWFkY3J1bWJJdGVtW107XG4gIEBDb250ZW50Q2hpbGRyZW4oQnJlYWRjcnVtYkl0ZW1Db21wb25lbnQpIHByaXZhdGUgY29udGVudENoaWxkSXRlbXM6IFF1ZXJ5TGlzdDxCcmVhZGNydW1iSXRlbT47XG4gIHByaXZhdGUgdmlld0luaXRUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5jb250ZW50Q2hpbGRJdGVtcy50b0FycmF5KCk7XG4gICAgdGhpcy52aWV3SW5pdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+XG4gICAgICB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLmFkZCh0aGlzIGFzIEJyZWFkY3J1bWIpXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnZpZXdJbml0VGltZW91dCk7XG4gICAgdGhpcy5icmVhZGNydW1iU2VydmljZS5yZW1vdmUodGhpcyBhcyBCcmVhZGNydW1iKTtcbiAgfVxufVxuIl19