import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import { ValidationPattern } from './validation-pattern';
import * as ɵngcc0 from '@angular/core';
export class DefaultValidationDirective {
    constructor() {
        this.c8yDefaultValidation = '';
    }
    validate(control) {
        if (!control.value) {
            return null;
        }
        const validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error(`Pattern ${this.c8yDefaultValidation} not found.`);
        }
        let valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : { [this.c8yDefaultValidation]: true };
    }
}
DefaultValidationDirective.ɵfac = function DefaultValidationDirective_Factory(t) { return new (t || DefaultValidationDirective)(); };
DefaultValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DefaultValidationDirective, selectors: [["", "c8yDefaultValidation", ""]], inputs: { c8yDefaultValidation: "c8yDefaultValidation" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }])] });
DefaultValidationDirective.propDecorators = {
    c8yDefaultValidation: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yDefaultValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }]
            }]
    }], function () { return []; }, { c8yDefaultValidation: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9kZWZhdWx0LXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQThCLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBTXpELE1BQU0sT0FBTywwQkFBMEI7QUFBRyxJQUoxQztBQUNHLFFBSVEseUJBQW9CLEdBQVcsRUFBRSxDQUFDO0FBQzdDLElBc0JBLENBQUM7QUFDRCxJQXRCRSxRQUFRLENBQUMsT0FBd0I7QUFBSSxRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUN4QixZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFNBQUs7QUFDTCxRQUFJLE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN4RSxRQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDckIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxDQUFDLG9CQUFvQixhQUFhLENBQUMsQ0FBQztBQUN6RSxTQUFLO0FBQ0wsUUFDSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDckIsUUFBSSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUU7QUFDNUIsWUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JELFNBQUs7QUFDTCxRQUFJLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRTtBQUM5QixZQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO0FBQzFELFNBQUs7QUFDTCxRQUFJLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRTtBQUM5QixZQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDO0FBQzNELFNBQUs7QUFDTCxRQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUMvRCxJQUFFLENBQUM7QUFDSDtzREE1QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsY0FDNUYsZ09BQ0k7QUFBQztBQUE4QyxtQ0FDakQsS0FBSztBQUFJOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblBhdHRlcm4gfSBmcm9tICcuL3ZhbGlkYXRpb24tcGF0dGVybic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjOHlEZWZhdWx0VmFsaWRhdGlvbl0nLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZX1dXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgQElucHV0KCkgYzh5RGVmYXVsdFZhbGlkYXRpb246IHN0cmluZyA9ICcnO1xuXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtba2V5OiBzdHJpbmddOiBhbnl9IHwgbnVsbCB7XG4gICAgaWYgKCFjb250cm9sLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IFZhbGlkYXRpb25QYXR0ZXJuLmdldCh0aGlzLmM4eURlZmF1bHRWYWxpZGF0aW9uKTtcbiAgICBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0dGVybiAke3RoaXMuYzh5RGVmYXVsdFZhbGlkYXRpb259IG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgIGlmICh2YWxpZGF0aW9uLnBhdHRlcm4pIHtcbiAgICAgIHZhbGlkID0gdmFsaWRhdGlvbi5wYXR0ZXJuLnRlc3QoY29udHJvbC52YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWxpZGF0aW9uLm1heExlbmd0aCkge1xuICAgICAgdmFsaWQgPSBjb250cm9sLnZhbHVlLmxlbmd0aCA8IHZhbGlkYXRpb24ubWF4TGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGlvbi5taW5MZW5ndGgpIHtcbiAgICAgIHZhbGlkID0gY29udHJvbC52YWx1ZS5sZW5ndGggPj0gdmFsaWRhdGlvbi5taW5MZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB2YWxpZCA/IG51bGwgOiB7W3RoaXMuYzh5RGVmYXVsdFZhbGlkYXRpb25dOiB0cnVlIH07XG4gIH1cbn1cbiJdfQ==