// tslint:disable: max-line-length
import { gettext } from '../i18n/gettext';
// @dynamic
export class ValidationPattern {
    static get(key) {
        const pattern = this.rules[key];
        return pattern;
    }
}
ValidationPattern.messages = {
    deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
    domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
        'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
    email: gettext('Invalid email address.'),
    emails: gettext('Invalid email addresses.'),
    internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
    loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
    max: gettext('Max value: {{ value }}'),
    min: gettext('Min value: {{ value }}'),
    opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
    password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
    passwordConfirm: gettext('Passwords do not match.'),
    passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
    phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
    required: gettext('This field is required.'),
    tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
        'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
    urlSegment: gettext('Slash, single or double dots and white space not allowed.'),
    user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
};
ValidationPattern.rules = {
    deviceId: {
        pattern: /^[^\s/]*$/
    },
    domain: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
    },
    groupName: {
        maxLength: 254
    },
    hostname: {
        pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
    },
    ip: {
        pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    },
    opcuaBrowsePath: {
        pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
    },
    password: {
        pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
    },
    phoneNumber: {
        pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
    },
    tenantId: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
    },
    user: {
        pattern: /^[^\\/\s$:+]*$/
    },
    urlSegment: {
        pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
    },
    loginAlias: {
        pattern: /^[^\\/$:+]*$/
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1wYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy92YWxpZGF0aW9uLXBhdHRlcm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2xDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVMxQyxXQUFXO0FBQ1gsTUFBTSxPQUFPLGlCQUFpQjtJQTRFNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFXO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxPQUEwQixDQUFDO0lBQ3BDLENBQUM7O0FBOUVlLDBCQUFRLEdBQUc7SUFDekIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQztJQUN4RSxNQUFNLEVBQUUsT0FBTyxDQUNiLG1GQUFtRjtRQUNqRixvRkFBb0YsQ0FDdkY7SUFDRCxLQUFLLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7SUFDM0Msd0JBQXdCLEVBQUUsT0FBTyxDQUMvQix1RUFBdUUsQ0FDeEU7SUFDRCxVQUFVLEVBQUUsT0FBTyxDQUNqQixpRkFBaUYsQ0FDbEY7SUFDRCxHQUFHLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ3RDLEdBQUcsRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDdEMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQUMvQyxRQUFRLEVBQUUsT0FBTyxDQUNmLDhKQUE4SixDQUMvSjtJQUNELGVBQWUsRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7SUFDbkQsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLDhEQUE4RCxDQUFDO0lBQ3pGLFdBQVcsRUFBRSxPQUFPLENBQ2xCLDJGQUEyRixDQUM1RjtJQUNELFFBQVEsRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7SUFDNUMsUUFBUSxFQUFFLE9BQU8sQ0FDZixzREFBc0Q7UUFDcEQscUZBQXFGLENBQ3hGO0lBQ0QsVUFBVSxFQUFFLE9BQU8sQ0FBQywyREFBMkQsQ0FBQztJQUNoRixJQUFJLEVBQUUsT0FBTyxDQUNYLHlGQUF5RixDQUMxRjtDQUNGLENBQUM7QUFFYyx1QkFBSyxHQUFHO0lBQ3RCLFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxXQUFXO0tBQ3JCO0lBQ0QsTUFBTSxFQUFFO1FBQ04sT0FBTyxFQUFFLG9DQUFvQztLQUM5QztJQUNELFNBQVMsRUFBRTtRQUNULFNBQVMsRUFBRSxHQUFHO0tBQ2Y7SUFDRCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsMkdBQTJHO0tBQ3JIO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsT0FBTyxFQUFFLDZGQUE2RjtLQUN2RztJQUNELGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxtQ0FBbUM7S0FDN0M7SUFDRCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsd0RBQXdEO0tBQ2xFO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLDhCQUE4QjtLQUN4QztJQUNELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSw2QkFBNkI7S0FDdkM7SUFDRCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsZ0JBQWdCO0tBQzFCO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLDJFQUEyRTtLQUNyRjtJQUNELFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxjQUFjO0tBQ3hCO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25SdWxlcyB7XG4gIHBhdHRlcm4/OiBSZWdFeHA7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25QYXR0ZXJuIHtcbiAgc3RhdGljIHJlYWRvbmx5IG1lc3NhZ2VzID0ge1xuICAgIGRldmljZUlkOiBnZXR0ZXh0KCdEZXZpY2UgSUQgbXVzdCBub3QgY29udGFpbiBzcGFjZXMgb3Igc2xhc2hlcyAoXCIvXCIpLicpLFxuICAgIGRvbWFpbjogZ2V0dGV4dChcbiAgICAgICdPbmx5IGxvd2VyY2FzZSBsZXR0ZXJzLCBkaWdpdHMgYW5kIGh5cGhlbnMgYWxsb3dlZCBpbiB0aGUgZmlyc3QgcGFydCBvZiB0aGUgVVJJLiAnICtcbiAgICAgICAgJ011c3Qgc3RhcnQgd2l0aCBhIGxldHRlcjsgaHlwaGVucyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZS4gTXVzdCBiZSBhIHZhbGlkIFVSSS4nXG4gICAgKSxcbiAgICBlbWFpbDogZ2V0dGV4dCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzLicpLFxuICAgIGVtYWlsczogZ2V0dGV4dCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzZXMuJyksXG4gICAgaW50ZXJuYXRpb25hbFBob25lTnVtYmVyOiBnZXR0ZXh0KFxuICAgICAgJ0ludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyIHJlcXVpcmVkLCBpbiB0aGUgZm9ybWF0ICs0OSA5IDg3NiA1NDMgMjEwLidcbiAgICApLFxuICAgIGxvZ2luQWxpYXM6IGdldHRleHQoXG4gICAgICAnTG9naW4gYWxpYXMgbXVzdCBub3QgY29udGFpbiBzbGFzaGVzIChcIi9cIiwgXCJcXFxcXCIpIG5vciAoXCIrXCIpLCAoXCI6XCIpLCAoXCIkXCIpIHNpZ25zLidcbiAgICApLFxuICAgIG1heDogZ2V0dGV4dCgnTWF4IHZhbHVlOiB7eyB2YWx1ZSB9fScpLFxuICAgIG1pbjogZ2V0dGV4dCgnTWluIHZhbHVlOiB7eyB2YWx1ZSB9fScpLFxuICAgIG9wY3VhQnJvd3NlUGF0aDogZ2V0dGV4dCgnSW52YWxpZCBPUEMgVUEgVVJJLicpLFxuICAgIHBhc3N3b3JkOiBnZXR0ZXh0KFxuICAgICAgJ1Bhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgYW5kIG5vIG1vcmUgdGhhbiAzMiBhbmQgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzIGFuZCBmb2xsb3dpbmcgc3ltYm9sczogYH4hQCMkJV4mKigpX3wrLT0/OzpcXCdcIiwuPD57fVtdXFxcXC8nXG4gICAgKSxcbiAgICBwYXNzd29yZENvbmZpcm06IGdldHRleHQoJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2guJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogZ2V0dGV4dCgnUGFzc3dvcmQgbm90IGdvb2QgZW5vdWdoLCBwYXNzd29yZCBtdXN0IGJlIHN0cm9uZ2VyIChncmVlbikuJyksXG4gICAgcGhvbmVOdW1iZXI6IGdldHRleHQoXG4gICAgICAnSW52YWxpZCBwaG9uZSBudW1iZXIgZm9ybWF0LiBPbmx5IGRpZ2l0cywgc3BhY2VzLCBzbGFzaGVzIChcIi9cIikgYW5kIGRhc2hlcyAoXCItXCIpIGFsbG93ZWQuJ1xuICAgICksXG4gICAgcmVxdWlyZWQ6IGdldHRleHQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJyksXG4gICAgdGVuYW50SWQ6IGdldHRleHQoXG4gICAgICAnTWF5IGNvbnRhaW4gbG93ZXJjYXNlIGxldHRlcnMsIGRpZ2l0cywgYW5kIGh5cGhlbnMuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIG9ubHkgYWxsb3dlZCBpbiB0aGUgbWlkZGxlOyBtaW5pbXVtIDIgY2hhcmFjdGVycy4nXG4gICAgKSxcbiAgICB1cmxTZWdtZW50OiBnZXR0ZXh0KCdTbGFzaCwgc2luZ2xlIG9yIGRvdWJsZSBkb3RzIGFuZCB3aGl0ZSBzcGFjZSBub3QgYWxsb3dlZC4nKSxcbiAgICB1c2VyOiBnZXR0ZXh0KFxuICAgICAgJ1VzZXJuYW1lIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG5vciBzbGFzaGVzIChcIi9cIiwgXCJcXFxcXCIpIG5vciAoXCIrXCIpLCAoXCI6XCIpLCAoXCIkXCIpIHNpZ25zLidcbiAgICApXG4gIH07XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bGVzID0ge1xuICAgIGRldmljZUlkOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxzL10qJC9cbiAgICB9LFxuICAgIGRvbWFpbjoge1xuICAgICAgcGF0dGVybjogL15bYS16XStbYS16MC05LV0qW2EtejAtOV0rXFwuezF9LiskL1xuICAgIH0sXG4gICAgZ3JvdXBOYW1lOiB7XG4gICAgICBtYXhMZW5ndGg6IDI1NFxuICAgIH0sXG4gICAgaG9zdG5hbWU6IHtcbiAgICAgIHBhdHRlcm46IC9eKChbYS16QS1aMC05XXxbYS16QS1aMC05XVthLXpBLVowLTktXSpbYS16QS1aMC05XSlcXC4pKihbQS1aYS16MC05XXxbQS1aYS16MC05XVtBLVphLXowLTktXSpbQS1aYS16MC05XSkkL1xuICAgIH0sXG4gICAgaXA6IHtcbiAgICAgIHBhdHRlcm46IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJC9cbiAgICB9LFxuICAgIG9wY3VhQnJvd3NlUGF0aDoge1xuICAgICAgcGF0dGVybjogL14ob3BjLnRjcHxodHRwfGh0dHBzKTpcXC9cXC9bXiBcIl0rJC9cbiAgICB9LFxuICAgIHBhc3N3b3JkOiB7XG4gICAgICBwYXR0ZXJuOiAvXlthLXpBLVowLTlgfiFAIyQlXiYqKClffCtcXC09Pzs6J1wiLC48Pnt9W1xcXVxcXFwvXXs4LDMyfSQvXG4gICAgfSxcbiAgICBwaG9uZU51bWJlcjoge1xuICAgICAgcGF0dGVybjogL14kfF4oXFwrfDB7Mn0pW1xcZFxccy8tXXsxLDMwfSQvXG4gICAgfSxcbiAgICB0ZW5hbnRJZDoge1xuICAgICAgcGF0dGVybjogL15bYS16XStbYS16MC05LV0qW2EtejAtOV0rJC9cbiAgICB9LFxuICAgIHVzZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eW15cXFxcL1xccyQ6K10qJC9cbiAgICB9LFxuICAgIHVybFNlZ21lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9eKChbLl17MSwyfSl8KFsvXSkrfCgoWy9dKikoWy5dezEsMn0pKFsvXSopKXwoKC4qKShbL118WyBdKykoLiopKXwoXFxzKykpJC9cbiAgICB9LFxuICAgIGxvZ2luQWxpYXM6IHtcbiAgICAgIHBhdHRlcm46IC9eW15cXFxcLyQ6K10qJC9cbiAgICB9XG4gIH07XG5cbiAgc3RhdGljIGdldChrZXk6IHN0cmluZykge1xuICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnJ1bGVzW2tleV07XG4gICAgcmV0dXJuIHBhdHRlcm4gYXMgVmFsaWRhdGlvblJ1bGVzO1xuICB9XG59XG4iXX0=