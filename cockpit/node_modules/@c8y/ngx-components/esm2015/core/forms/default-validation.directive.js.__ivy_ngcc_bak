import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import { ValidationPattern } from './validation-pattern';
export class DefaultValidationDirective {
    constructor() {
        this.c8yDefaultValidation = '';
    }
    validate(control) {
        if (!control.value) {
            return null;
        }
        const validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error(`Pattern ${this.c8yDefaultValidation} not found.`);
        }
        let valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : { [this.c8yDefaultValidation]: true };
    }
}
DefaultValidationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[c8yDefaultValidation]',
                providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective, multi: true }]
            },] }
];
DefaultValidationDirective.propDecorators = {
    c8yDefaultValidation: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZm9ybXMvZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTXpELE1BQU0sT0FBTywwQkFBMEI7SUFKdkM7UUFLVyx5QkFBb0IsR0FBVyxFQUFFLENBQUM7SUF1QjdDLENBQUM7SUFyQkMsUUFBUSxDQUFDLE9BQXdCO1FBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsb0JBQW9CLGFBQWEsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUN0QixLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzdELENBQUM7OztZQTNCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7YUFDNUY7OzttQ0FFRSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUGF0dGVybiB9IGZyb20gJy4vdmFsaWRhdGlvbi1wYXR0ZXJuJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eURlZmF1bHRWYWxpZGF0aW9uXScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUsIG11bHRpOiB0cnVlfV1cbn0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBASW5wdXQoKSBjOHlEZWZhdWx0VmFsaWRhdGlvbjogc3RyaW5nID0gJyc7XG5cbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKToge1trZXk6IHN0cmluZ106IGFueX0gfCBudWxsIHtcbiAgICBpZiAoIWNvbnRyb2wudmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0aW9uID0gVmFsaWRhdGlvblBhdHRlcm4uZ2V0KHRoaXMuYzh5RGVmYXVsdFZhbGlkYXRpb24pO1xuICAgIGlmICghdmFsaWRhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXR0ZXJuICR7dGhpcy5jOHlEZWZhdWx0VmFsaWRhdGlvbn0gbm90IGZvdW5kLmApO1xuICAgIH1cblxuICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgaWYgKHZhbGlkYXRpb24ucGF0dGVybikge1xuICAgICAgdmFsaWQgPSB2YWxpZGF0aW9uLnBhdHRlcm4udGVzdChjb250cm9sLnZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRpb24ubWF4TGVuZ3RoKSB7XG4gICAgICB2YWxpZCA9IGNvbnRyb2wudmFsdWUubGVuZ3RoIDwgdmFsaWRhdGlvbi5tYXhMZW5ndGg7XG4gICAgfVxuICAgIGlmICh2YWxpZGF0aW9uLm1pbkxlbmd0aCkge1xuICAgICAgdmFsaWQgPSBjb250cm9sLnZhbHVlLmxlbmd0aCA+PSB2YWxpZGF0aW9uLm1pbkxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkID8gbnVsbCA6IHtbdGhpcy5jOHlEZWZhdWx0VmFsaWRhdGlvbl06IHRydWUgfTtcbiAgfVxufVxuIl19