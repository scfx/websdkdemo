import { NgModule } from '@angular/core';
import { PhoneValidationDirective } from './phone-validation.directive';
import { DefaultValidationDirective } from './default-validation.directive';
import { MinValidationDirective } from './min-validation.directive';
import { MaxValidationDirective } from './max-validation.directive';
import { CommonModule } from '../common/common.module';
import { FormsModule as NgFormsModule } from '@angular/forms';
import { FormGroupComponent } from './form-group.component';
import { MessageDirective } from './message.directive';
import { MessagesComponent } from './messages.component';
import { InputGroupListComponent } from './input-group-list.component';
import { InputGroupListContainerDirective } from './input-group-list-container.directive';
import { JsonValidationPrettifierDirective } from './json-validation-prettifier.directive';
import { TextAreaRowHeightDirective } from './text-area-row-height.directive';
import { RequiredInputPlaceholderDirective } from './required-input-placeholder.directive';
import { IpRangeInputListComponent } from './ip-range-input-list.component';
import { FilterInputComponent } from './filter-input.component';
import { EmailsValidatorDirective } from './emails-validator.directive';
import { RangeComponent } from './range.component';
import { RangeDirective } from './range.directive';
/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 * @exports RangeComponent A component that allows to display a styled range slider.
 */
export class FormsModule {
}
FormsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgFormsModule],
                exports: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    NgFormsModule,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent
                ],
                declarations: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    FilterInputComponent,
                    EmailsValidatorDirective,
                    RangeDirective,
                    RangeComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9mb3Jtcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFdBQVcsSUFBSSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxRixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5EOzs7Ozs7OztHQVFHO0FBMkNILE1BQU0sT0FBTyxXQUFXOzs7WUExQ3ZCLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO2dCQUN0QyxPQUFPLEVBQUU7b0JBQ1Asd0JBQXdCO29CQUN4QiwwQkFBMEI7b0JBQzFCLHNCQUFzQjtvQkFDdEIsc0JBQXNCO29CQUN0QixhQUFhO29CQUNiLGtCQUFrQjtvQkFDbEIsZ0JBQWdCO29CQUNoQixpQkFBaUI7b0JBQ2pCLHVCQUF1QjtvQkFDdkIsZ0NBQWdDO29CQUNoQyxpQ0FBaUM7b0JBQ2pDLDBCQUEwQjtvQkFDMUIsaUNBQWlDO29CQUNqQyx5QkFBeUI7b0JBQ3pCLG9CQUFvQjtvQkFDcEIsd0JBQXdCO29CQUN4QixjQUFjO29CQUNkLGNBQWM7aUJBQ2Y7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLHdCQUF3QjtvQkFDeEIsMEJBQTBCO29CQUMxQixzQkFBc0I7b0JBQ3RCLHNCQUFzQjtvQkFDdEIsa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLGlCQUFpQjtvQkFDakIsdUJBQXVCO29CQUN2QixnQ0FBZ0M7b0JBQ2hDLGlDQUFpQztvQkFDakMsMEJBQTBCO29CQUMxQixpQ0FBaUM7b0JBQ2pDLHlCQUF5QjtvQkFDekIsb0JBQW9CO29CQUNwQix3QkFBd0I7b0JBQ3hCLGNBQWM7b0JBQ2QsY0FBYztpQkFDZjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vcGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL2RlZmF1bHQtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vbWluLXZhbGlkYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IE1heFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL21heC12YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSBhcyBOZ0Zvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybUdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9tZXNzYWdlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNZXNzYWdlc0NvbXBvbmVudCB9IGZyb20gJy4vbWVzc2FnZXMuY29tcG9uZW50JztcbmltcG9ydCB7IElucHV0R3JvdXBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwTGlzdENvbnRhaW5lckRpcmVjdGl2ZSB9IGZyb20gJy4vaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IEpzb25WYWxpZGF0aW9uUHJldHRpZmllckRpcmVjdGl2ZSB9IGZyb20gJy4vanNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0LWFyZWEtcm93LWhlaWdodC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUmVxdWlyZWRJbnB1dFBsYWNlaG9sZGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9yZXF1aXJlZC1pbnB1dC1wbGFjZWhvbGRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCB9IGZyb20gJy4vaXAtcmFuZ2UtaW5wdXQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlsdGVySW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRW1haWxzVmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9lbWFpbHMtdmFsaWRhdG9yLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSYW5nZUNvbXBvbmVudCB9IGZyb20gJy4vcmFuZ2UuY29tcG9uZW50JztcbmltcG9ydCB7IFJhbmdlRGlyZWN0aXZlIH0gZnJvbSAnLi9yYW5nZS5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIEBleHBvcnRzIEZvcm1Hcm91cENvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGFsbG93cyB0byBncm91cCBhbiBpbnB1dCBhbmQgY2FuIGRpc3BsYXkgd2FybmluZ3MgYW5kIGVycm9ycy5cbiAqIEBleHBvcnRzIFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSBBbGxvd3MgdG8gdmFsaWRhdGUgaW50ZXJuYXRpb25hbCBwaG9uZSBudW1iZXJzLlxuICogQGV4cG9ydHMgTmV3c2xldHRlckRpcmVjdGl2ZSBBbGxvd3MgdG8gc3Vic2NyaWJlIHRvIHRoZSBuZXdzbGV0dGVyLlxuICogQGV4cG9ydHMgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUgQWxsb3dzIHRvIHZhbGlkYXRlIHNvbWUgcHJlZGVmaW5lZCBwYXR0ZXJucy5cbiAqIEBleHBvcnRzIE1lc3NhZ2VEaXJlY3RpdmUgQSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgdG8gZGVmaW5lIG1lc3NhZ2VzLlxuICogQGV4cG9ydHMgTWVzc2FnZXNDb21wb25lbnQgQWxsb3dzIHRvIGRpc3BsYXkgZXJyb3IgbWVzc2FnZXMuXG4gKiBAZXhwb3J0cyBSYW5nZUNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGFsbG93cyB0byBkaXNwbGF5IGEgc3R5bGVkIHJhbmdlIHNsaWRlci5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgTmdGb3Jtc01vZHVsZV0sXG4gIGV4cG9ydHM6IFtcbiAgICBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIE5nRm9ybXNNb2R1bGUsXG4gICAgRm9ybUdyb3VwQ29tcG9uZW50LFxuICAgIE1lc3NhZ2VEaXJlY3RpdmUsXG4gICAgTWVzc2FnZXNDb21wb25lbnQsXG4gICAgSW5wdXRHcm91cExpc3RDb21wb25lbnQsXG4gICAgSW5wdXRHcm91cExpc3RDb250YWluZXJEaXJlY3RpdmUsXG4gICAgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlLFxuICAgIFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlLFxuICAgIFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSxcbiAgICBJcFJhbmdlSW5wdXRMaXN0Q29tcG9uZW50LFxuICAgIEZpbHRlcklucHV0Q29tcG9uZW50LFxuICAgIEVtYWlsc1ZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBSYW5nZURpcmVjdGl2ZSxcbiAgICBSYW5nZUNvbXBvbmVudFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIEZvcm1Hcm91cENvbXBvbmVudCxcbiAgICBNZXNzYWdlRGlyZWN0aXZlLFxuICAgIE1lc3NhZ2VzQ29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29tcG9uZW50LFxuICAgIElucHV0R3JvdXBMaXN0Q29udGFpbmVyRGlyZWN0aXZlLFxuICAgIEpzb25WYWxpZGF0aW9uUHJldHRpZmllckRpcmVjdGl2ZSxcbiAgICBUZXh0QXJlYVJvd0hlaWdodERpcmVjdGl2ZSxcbiAgICBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUsXG4gICAgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCxcbiAgICBGaWx0ZXJJbnB1dENvbXBvbmVudCxcbiAgICBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgUmFuZ2VEaXJlY3RpdmUsXG4gICAgUmFuZ2VDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGb3Jtc01vZHVsZSB7fVxuIl19