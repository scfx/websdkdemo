import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '@ngx-translate/core';
export class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        if (this.el && this.el.nativeElement && this.el.nativeElement.required !== undefined) {
            const required = this.el.nativeElement.required && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== required) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, required));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
}
RequiredInputPlaceholderDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[required]'
            },] }
];
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9yZXF1aXJlZC1pbnB1dC1wbGFjZWhvbGRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFLdkQsTUFBTSxPQUFPLGlDQUFpQztJQUk1QyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUNuQixrQkFBb0M7UUFGcEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFrQjtRQU50QywyQkFBc0IsR0FBWSxLQUFLLENBQUM7UUFRN0MsSUFBSSxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ3BGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUNoRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7WUFFdEQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtnQkFDN0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMzRTtTQUNGO0lBQ0gsQ0FBQztJQUVPLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEtBQUs7UUFDOUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7UUFDcEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDakYsTUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2hFLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMzRDtRQUNELElBQUksaUJBQWlCLEtBQUssQ0FBQyxFQUFFO1lBQzNCLFdBQVcsR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUM5RSxDQUFDO0lBRU8saUJBQWlCLENBQUMsV0FBVztRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2FBQzVCOzs7WUFObUIsVUFBVTtZQUFFLFNBQVM7WUFFaEMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyVmlld0NoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtyZXF1aXJlZF0nXG59KVxuZXhwb3J0IGNsYXNzIFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQge1xuICBwcml2YXRlIHNob3VsZFNraXBSZXF1aXJlZEhpbnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBwcml2YXRlIHJlcTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgIHRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludCA9ICEhdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsb3Nlc3QoJ1twbGFjZWhvbGRlci1uby1yZXF1aXJlZC1oaW50XScpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmVsICYmIHRoaXMuZWwubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcmVxdWlyZWQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQgJiYgIXRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludDtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBsYWNlaG9sZGVyO1xuXG4gICAgICBpZiAodGhpcy5wbGFjZWhvbGRlciAhPT0gcGxhY2Vob2xkZXIgfHwgdGhpcy5yZXEgIT09IHJlcXVpcmVkKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUGxhY2Vob2xkZXIodGhpcy5nZXRUZXh0Rm9yUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIsIHJlcXVpcmVkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0Rm9yUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIgPSAnJywgcmVxdWlyZWQgPSBmYWxzZSkge1xuICAgIHRoaXMucmVxID0gcmVxdWlyZWQ7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0ID0gYCgke3RoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoZ2V0dGV4dCgncmVxdWlyZWQnKSl9KWA7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0SW5kZXggPSBwbGFjZWhvbGRlci5sYXN0SW5kZXhPZihyZXF1aXJlZFRleHQpO1xuICAgIGlmIChyZXF1aXJlZFRleHRJbmRleCA+IDApIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXIuc2xpY2UoMCwgcmVxdWlyZWRUZXh0SW5kZXggLSAxKTtcbiAgICB9XG4gICAgaWYgKHJlcXVpcmVkVGV4dEluZGV4ID09PSAwKSB7XG4gICAgICBwbGFjZWhvbGRlciA9ICcnO1xuICAgIH1cbiAgICBpZiAoIXJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZWhvbGRlci50cmltKCkgPyBgJHtwbGFjZWhvbGRlcn0gJHtyZXF1aXJlZFRleHR9YCA6IHJlcXVpcmVkVGV4dDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIH1cbn1cbiJdfQ==