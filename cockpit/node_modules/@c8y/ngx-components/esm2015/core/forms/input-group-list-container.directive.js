import { Directive, ContentChildren } from '@angular/core';
import { InputGroupListComponent } from './input-group-list.component';
import * as ɵngcc0 from '@angular/core';
export class InputGroupListContainerDirective {
    ngAfterContentInit() {
        this.listProjections.map(element => {
            if (element !== this.listProjections.last) {
                setTimeout(() => {
                    element.plus = false;
                });
            }
        });
        this.listProjections.changes.subscribe(elements => {
            if (elements.length === 1) {
                setTimeout(() => {
                    elements.first.plus = true;
                    elements.first.minus = false;
                });
                return;
            }
            elements.map(element => {
                setTimeout(() => {
                    element.minus = true;
                });
                if (element !== elements.last) {
                    setTimeout(() => {
                        element.plus = false;
                    });
                }
                if (element === elements.last) {
                    setTimeout(() => {
                        element.plus = true;
                    });
                }
            });
        });
    }
}
InputGroupListContainerDirective.ɵfac = function InputGroupListContainerDirective_Factory(t) { return new (t || InputGroupListContainerDirective)(); };
InputGroupListContainerDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: InputGroupListContainerDirective, selectors: [["", "c8yInputGroupListContainer", ""]], contentQueries: function InputGroupListContainerDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, InputGroupListComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listProjections = _t);
    } } });
InputGroupListContainerDirective.propDecorators = {
    listProjections: [{ type: ContentChildren, args: [InputGroupListComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputGroupListContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[c8yInputGroupListContainer]'
            }]
    }], null, { listProjections: [{
            type: ContentChildren,
            args: [InputGroupListComponent]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL2lucHV0LWdyb3VwLWxpc3QtY29udGFpbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUtULGVBQWUsRUFFaEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBS3ZFLE1BQU0sT0FBTyxnQ0FBZ0M7QUFBRyxJQUc5QyxrQkFBa0I7QUFDcEIsUUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN2QyxZQUFNLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFO0FBQ2pELGdCQUFRLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDeEIsb0JBQVUsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDL0IsZ0JBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQ0ksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3RELFlBQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUNqQyxnQkFBUSxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3hCLG9CQUFVLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNyQyxvQkFBVSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdkMsZ0JBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxnQkFDUSxPQUFPO0FBQ2YsYUFBTztBQUNQLFlBQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUM3QixnQkFBUSxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3hCLG9CQUFVLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQy9CLGdCQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsZ0JBQ1EsSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtBQUN2QyxvQkFBVSxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQzFCLHdCQUFZLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLG9CQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2IsaUJBQVM7QUFDVCxnQkFBUSxJQUFJLE9BQU8sS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFO0FBQ3ZDLG9CQUFVLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDMUIsd0JBQVksT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEMsb0JBQVUsQ0FBQyxDQUFDLENBQUM7QUFDYixpQkFBUztBQUNULFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7NERBMUNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsOEJBQThCLGNBQ3pDOzs7Ozs7V0FDSTtBQUFDO0FBQW9ELDhCQUN2RCxlQUFlLFNBQUMsdUJBQXVCO0FBQU07Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IElucHV0R3JvdXBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC1saXN0LmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjOHlJbnB1dEdyb3VwTGlzdENvbnRhaW5lcl0nXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBMaXN0Q29udGFpbmVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBDb250ZW50Q2hpbGRyZW4oSW5wdXRHcm91cExpc3RDb21wb25lbnQpIGxpc3RQcm9qZWN0aW9uczogUXVlcnlMaXN0PElucHV0R3JvdXBMaXN0Q29tcG9uZW50PjtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5saXN0UHJvamVjdGlvbnMubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMubGlzdFByb2plY3Rpb25zLmxhc3QpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5wbHVzID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5saXN0UHJvamVjdGlvbnMuY2hhbmdlcy5zdWJzY3JpYmUoZWxlbWVudHMgPT4ge1xuICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBlbGVtZW50cy5maXJzdC5wbHVzID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50cy5maXJzdC5taW51cyA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbGVtZW50cy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQubWludXMgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZWxlbWVudCAhPT0gZWxlbWVudHMubGFzdCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5wbHVzID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IGVsZW1lbnRzLmxhc3QpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQucGx1cyA9IHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=