import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { fromTrigger, sortByPriority, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 *
 * @example
 * ```typescript
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 * ```
 *
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export const HOOK_ACTION_BAR = new InjectionToken('ActionBarFactory');
/**
 * A service which defines action-bar items via the multi provider concept.
 *
 * @example
 * ```typescript
 * // preferred way, multi provider concept:
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 *
 * // use services:
 * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
 * ```
 */
export class ActionBarService extends StateService {
    /**
     * @ignore
     */
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_ACTION_BAR, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((items) => sortByPriority(items)), shareReplay(1));
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Refreshes the current store.
     */
    refresh() {
        this.refreshTrigger.next();
    }
    /**
     * Adds a new item to the action bar in the header and emits a state change.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action bar item from the header and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
}
ActionBarService.ɵfac = function ActionBarService_Factory(t) { return new (t || ActionBarService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
ActionBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActionBarService_Factory() { return new ActionBarService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: ActionBarService, providedIn: "root" });
ActionBarService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionBarService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Router }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2FjdGlvbi1iYXIvYWN0aW9uLWJhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBR0wsV0FBVyxFQUNYLGNBQWMsRUFDZCxjQUFjLEVBQ2YsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEU7QUFBcUM7QUFzQnJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQXFCLGtCQUFrQixDQUFDLENBQUM7QUFFMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFJSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsWUFBWTtBQUFHLElBTW5EO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxZQUFvQixRQUFrQixFQUFFLE1BQWM7QUFDeEQsUUFBSSxLQUFLLEVBQUUsQ0FBQztBQUNaLFFBRnNCLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQVB2QyxjQUFTLEdBQXlCLEVBQUUsQ0FBQztBQUN2QyxRQUFXLG1CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMxQyxRQUFZLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBcUIsSUFBSSxHQUFHLEVBQWlCLENBQUMsQ0FBQztBQUN2RixRQU1JLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQzNELFlBQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQztBQUNsRCxZQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzFCLFlBQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDakMsU0FBSyxDQUFDLENBQUMsSUFBSSxDQUNMLEdBQUcsQ0FBQyxDQUFDLEtBQXNCLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN0RCxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBRSxJQUFJLEtBQUs7QUFBSyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsT0FBTztBQUNULFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFFLEdBQUcsQ0FBQyxJQUFtQjtBQUN6QixRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsTUFBTSxDQUFDLElBQW1CO0FBQzVCLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUIsUUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7dUtBQUM7QUFDRCxpT0F2REs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHb0MsWUF4RVgsUUFBUTtlQXNFM0MsZkF0RStDLFlBQ3hDLE1BQU07QUFBRztDQXFFTixFQUFFLE1BQU0sY0FDbkI7Ozs7O2tHQXRFbUI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvbkZhY3RvcnksXG4gIEV4dGVuc2lvblBvaW50LFxuICBmcm9tVHJpZ2dlcixcbiAgc29ydEJ5UHJpb3JpdHksXG4gIHN0YXRlVG9GYWN0b3J5XG59IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXRlLXNlcnZpY2UuYWJzdHJhY3QnO1xuaW1wb3J0IHsgQWN0aW9uQmFySXRlbSB9IGZyb20gJy4vYWN0aW9uLWJhci5tb2RlbCc7XG5cbi8qKlxuICogQW4gZXh0ZW5zaW9uIEhPT0sgY2FuIHVzZSBlaXRoZXIgYSBwdXJlIHZhbHVlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VWYWx1ZTogeyAuLi5ob29rVmFsdWUgfSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKlxuICogT3IgYW4gYXJyYXkgdG8gZGlyZWN0bHkgcmVnaXN0ZXIgbXVsdGlwbGU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZVZhbHVlOiBbeyAuLi5ob29rVmFsdWVzIH1dLCBtdWx0aTogdHJ1ZSB9XG4gKiBgYGBcbiAqXG4gKiBPciBhbiBFeHRlbnNpb25GYWN0b3J5IHdoaWNoIGFsbG93cyB0byBkZWZpbmUgYSBnZXQoKSBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvblxuICogZ2V0cyBjYWxsZWQgb24gZWFjaCBuYXZpZ2F0aW9uIHdpdGggdGhlIGN1cnJlbnQgcm91dGUgYW5kIGNhbiByZXR1cm4gdmFsdWVzXG4gKiBhc3luYyAob2JzZXJ2YWJsZSBvciBwcm9taXNlKS5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlRmFjdG9yeTogeyBnZXQ6IChyb3V0ZSkgPT4gZG9Tb21ldGhpbmdBc3luYyhyb3V0ZSkgfSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKi9cbmV4cG9ydCB0eXBlIEFjdGlvbkJhckV4dGVuc2lvbiA9IEFjdGlvbkJhckl0ZW0gfCBBY3Rpb25CYXJJdGVtW10gfCBFeHRlbnNpb25GYWN0b3J5PEFjdGlvbkJhckl0ZW0+O1xuXG4vKipcbiAqIEEgaG9vayB0byBhZGQgQWN0aW9uQmFySXRlbXMgdXNpbmcgdGhlIG11bHRpIHByb3ZpZGVyIGV4dGVuc2lvbiBjb25jZXB0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBwcm92aWRlcnM6IFtcbiAqICAge1xuICogICAgIHByb3ZpZGU6IEhPT0tfQUNUSU9OX0JBUixcbiAqICAgICB1c2VWYWx1ZTogW3sgdGVtcGxhdGU6IFNvbWVDb21wb25lbnQsIHByaW9yaXR5OiAxMCwgcGxhY2VtZW50OiAnbGVmdCcgfSBhcyBBY3Rpb25CYXJJdGVtXSxcbiAqICAgICBtdWx0aTogdHJ1ZVxuICogICB9XG4gKiBdXG4gKiBgYGBcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX0FDVElPTl9CQVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uQmFyRXh0ZW5zaW9uPignQWN0aW9uQmFyRmFjdG9yeScpO1xuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBkZWZpbmVzIGFjdGlvbi1iYXIgaXRlbXMgdmlhIHRoZSBtdWx0aSBwcm92aWRlciBjb25jZXB0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBwcmVmZXJyZWQgd2F5LCBtdWx0aSBwcm92aWRlciBjb25jZXB0OlxuICogcHJvdmlkZXJzOiBbXG4gKiAgIHtcbiAqICAgICBwcm92aWRlOiBIT09LX0FDVElPTl9CQVIsXG4gKiAgICAgdXNlVmFsdWU6IFt7IHRlbXBsYXRlOiBTb21lQ29tcG9uZW50LCBwcmlvcml0eTogMTAsIHBsYWNlbWVudDogJ2xlZnQnIH0gYXMgQWN0aW9uQmFySXRlbV0sXG4gKiAgICAgbXVsdGk6IHRydWVcbiAqICAgfVxuICogXVxuICpcbiAqIC8vIHVzZSBzZXJ2aWNlczpcbiAqIHRoaXMuYWN0aW9uQmFyU2VydmljZS5hZGQoeyB0ZW1wbGF0ZTogU29tZUNvbXBvbmVudCwgcHJpb3JpdHk6IDEwLCBwbGFjZW1lbnQ6ICdsZWZ0JyB9KTtcbiAqIGBgYFxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25CYXJTZXJ2aWNlIGV4dGVuZHMgU3RhdGVTZXJ2aWNlIGltcGxlbWVudHMgRXh0ZW5zaW9uUG9pbnQ8QWN0aW9uQmFyRXh0ZW5zaW9uPiB7XG4gIGl0ZW1zJDogT2JzZXJ2YWJsZTxBY3Rpb25CYXJJdGVtW10+O1xuICBmYWN0b3JpZXM6IEFjdGlvbkJhckV4dGVuc2lvbltdID0gW107XG4gIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3QoKTtcbiAgcHJvdGVjdGVkIHN0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8U2V0PEFjdGlvbkJhckl0ZW0+PihuZXcgU2V0PEFjdGlvbkJhckl0ZW0+KCkpO1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvciwgcm91dGVyOiBSb3V0ZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaXRlbXMkID0gZnJvbVRyaWdnZXIocm91dGVyLCB0aGlzLnJlZnJlc2hUcmlnZ2VyLCBbXG4gICAgICAoKSA9PiB0aGlzLmluamVjdG9yLmdldChIT09LX0FDVElPTl9CQVIsIFtdKSxcbiAgICAgICgpID0+IHRoaXMuZmFjdG9yaWVzLFxuICAgICAgc3RhdGVUb0ZhY3RvcnkodGhpcy5zdGF0ZSQpXG4gICAgXSkucGlwZShcbiAgICAgIG1hcCgoaXRlbXM6IEFjdGlvbkJhckl0ZW1bXSkgPT4gc29ydEJ5UHJpb3JpdHkoaXRlbXMpKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgc2V0IG9mIGFjdGlvbnMuXG4gICAqL1xuICBnZXQgc3RhdGUoKTogU2V0PEFjdGlvbkJhckl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaGVzIHRoZSBjdXJyZW50IHN0b3JlLlxuICAgKi9cbiAgcmVmcmVzaCgpIHtcbiAgICB0aGlzLnJlZnJlc2hUcmlnZ2VyLm5leHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbmV3IGl0ZW0gdG8gdGhlIGFjdGlvbiBiYXIgaW4gdGhlIGhlYWRlciBhbmQgZW1pdHMgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZC5cbiAgICovXG4gIGFkZChpdGVtOiBBY3Rpb25CYXJJdGVtKSB7XG4gICAgdGhpcy5zdGF0ZS5hZGQoaXRlbSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGFjdGlvbiBiYXIgaXRlbSBmcm9tIHRoZSBoZWFkZXIgYW5kIGVtaXRzIGEgc3RhdGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmUoaXRlbTogQWN0aW9uQmFySXRlbSkge1xuICAgIHRoaXMuc3RhdGUuZGVsZXRlKGl0ZW0pO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cbn1cbiJdfQ==