import { Component, EventEmitter, Input, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
export class ListItemRadioComponent {
    constructor() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    /**
     * Resets the native radio element.
     */
    reset() {
        this.radio.nativeElement.checked = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    change(checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * Registers an onChange event.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers an onTouch event.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @ignore
     */
    writeValue(value) {
        this.model = value;
    }
}
ListItemRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-list-item-radio, c8y-li-radio',
                template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__radio'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => ListItemRadioComponent)
                    }
                ]
            },] }
];
ListItemRadioComponent.propDecorators = {
    radio: [{ type: ViewChild, args: ['radio', { static: true },] }],
    selected: [{ type: Input }],
    name: [{ type: Input }],
    disabled: [{ type: Input }],
    onSelect: [{ type: Output }],
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1ncm91cC9saXN0LWl0ZW0tcmFkaW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBRU4sU0FBUyxFQUNULFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekU7Ozs7Ozs7Ozs7R0FVRztBQWVILE1BQU0sT0FBTyxzQkFBc0I7SUFkbkM7UUFtQkU7O1dBRUc7UUFFSCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCOztXQUVHO1FBRUgsU0FBSSxHQUFHLGlCQUFpQixDQUFDO1FBQ3pCOztXQUVHO1FBRUgsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQjs7V0FFRztRQUVILGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBcUV6QyxDQUFDO0lBbkRDOztPQUVHO0lBQ0gsS0FBSztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO1lBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLE9BQU87UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQixDQUFDLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7WUExR0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLHNSQUErQztnQkFDL0MsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSx1QkFBdUI7aUJBQy9CO2dCQUNELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixLQUFLLEVBQUUsSUFBSTt3QkFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDO3FCQUN0RDtpQkFDRjthQUNGOzs7b0JBS0UsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7dUJBSW5DLEtBQUs7bUJBS0wsS0FBSzt1QkFLTCxLQUFLO3VCQUtMLE1BQU07b0JBS04sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGQsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gZGlzcGxheSBhIHJhZGlvIGJ1dHRvbiBpbiBhIGM4eS1saS4gVXNlIGl0IHdpdGggY29udGVudCBwcm9qZWN0aW9uLiBJdFxuICogY2FuIGJlIHVzZWQgc3RhbmRhbG9uZSBvciB3aXRoIGFuIG5nTW9kZWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktbGk+XG4gKiAgIDxjOHktbGktcmFkaW8+PC9jOHktbGktcmFkaW8+XG4gKiA8L2M4eS1saT5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbGlzdC1pdGVtLXJhZGlvLCBjOHktbGktcmFkaW8nLFxuICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnYzh5LWxpc3RfX2l0ZW1fX3JhZGlvJ1xuICB9LFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTGlzdEl0ZW1SYWRpb0NvbXBvbmVudClcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTGlzdEl0ZW1SYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ3JhZGlvJywgeyBzdGF0aWM6IHRydWUgfSkgcmFkaW86IEVsZW1lbnRSZWY7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHJhZGlvIGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSByYWRpbyAodXNlIGRpZmZlcmVudCBuYW1lcyBmb3IgZGlmZmVyZW50IHJhZGlvIGdyb3VwcykuXG4gICAqL1xuICBASW5wdXQoKVxuICBuYW1lID0gJ2xpc3RfaXRlbV9yYWRpbyc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHJhZGlvIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZWQgYXMgc29vbiBhcyB0aGUgcmFkaW8gaXMgc2VsZWN0ZWQuXG4gICAqL1xuICBAT3V0cHV0KClcbiAgb25TZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2YWx1ZS5cbiAgICovXG4gIEBJbnB1dCgpIHZhbHVlOiBhbnk7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtb2RlbDogYW55O1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIG5hdGl2ZSByYWRpbyBlbGVtZW50LlxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yYWRpby5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWQgJiYgIWNoYW5nZXMuc2VsZWN0ZWQuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TZWxlY3QuZW1pdChjaGFuZ2VzLnNlbGVjdGVkLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJlZCB3aGVuIHRoZSByYWRpbyBpcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0gY2hlY2tlZCBTaG91bGQgaXQgYmUgY2hlY2tlZCBvciBub3Q/XG4gICAqL1xuICBjaGFuZ2UoY2hlY2tlZCkge1xuICAgIHRoaXMub25TZWxlY3QuZW1pdChjaGVja2VkKTtcbiAgICB0aGlzLm1vZGVsID0gdGhpcy52YWx1ZTtcbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLm1vZGVsKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub25Ub3VjaGVkKSB7XG4gICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gb25DaGFuZ2UgZXZlbnQuXG4gICAqL1xuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIG9uVG91Y2ggZXZlbnQuXG4gICAqL1xuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xuICB9XG59XG4iXX0=