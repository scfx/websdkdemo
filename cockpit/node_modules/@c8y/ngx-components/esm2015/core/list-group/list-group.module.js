import { NgModule } from '@angular/core';
import { ListGroupComponent } from './list-group.component';
import { ListItemComponent } from './list-item.component';
import { CommonModule } from '../common/common.module';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { ListItemIconComponent } from './list-item-icon.component';
import { ListItemBodyComponent } from './list-item-body.component';
import { ListItemFooterComponent } from './list-item-footer.component';
import { ListItemActionComponent } from './list-item-action.component';
import { ListItemCollapseComponent } from './list-item-collapse.component';
import { ListItemCheckboxComponent } from './list-item-checkbox.component';
import { ListItemRadioComponent } from './list-item-radio.component';
import { ListItemTimelineComponent } from './list-item-timeline.component';
/**
 * The list-group module allows you to compose different styles
 * of lists used in Cumulocity IoT. They can consist of plain
 * text, actions, icons and more.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li>Item 1<c8y-li>
 *   <c8y-li>Item 2<c8y-li>
 * </c8y-list-group>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-bootstrap/collapse';
export class ListGroupModule {
}
ListGroupModule.ɵfac = function ListGroupModule_Factory(t) { return new (t || ListGroupModule)(); };
ListGroupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ListGroupModule });
ListGroupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, CollapseModule.forRoot(), BsDropdownModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListGroupModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CollapseModule.forRoot(), BsDropdownModule],
                declarations: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent,
                    ListItemTimelineComponent
                ],
                exports: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent,
                    ListItemTimelineComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListGroupModule, { declarations: function () { return [ListGroupComponent,
        ListItemComponent,
        ListItemIconComponent,
        ListItemBodyComponent,
        ListItemFooterComponent,
        ListItemActionComponent,
        ListItemCollapseComponent,
        ListItemCheckboxComponent,
        ListItemRadioComponent,
        ListItemTimelineComponent]; }, imports: function () { return [CommonModule, ɵngcc1.CollapseModule, BsDropdownModule]; }, exports: function () { return [ListGroupComponent,
        ListItemComponent,
        ListItemIconComponent,
        ListItemBodyComponent,
        ListItemFooterComponent,
        ListItemActionComponent,
        ListItemCollapseComponent,
        ListItemCheckboxComponent,
        ListItemRadioComponent,
        ListItemTimelineComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1ncm91cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1ncm91cC9saXN0LWdyb3VwLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBNEJILE1BQU0sT0FBTyxlQUFlO0FBQUc7MkNBM0I5QixRQUFRLFNBQUMsa0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWTtDQUFFLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxrQkFDbkUsWUFBWSxFQUFFO1NBQ1osa0JBQWtCLHNCQUNsQixpQkFBaUIsc0JBQ2pCLHFCQUFxQixzQkFDckI7ZUFBcUIsc0JBQ3JCLHVCQUF1QixzQkFDdkIsdUJBQXVCO2dCQUN2Qjs7QUFBeUIsc0JBQ3pCLHlCQUF5QixzQkFDekI7TUFBc0Isc0JBQ3RCO3FCQUF5QixrQkFDMUI7aUJBQ0QsT0FBTyxFQUFFO1NBQ1Asa0JBQWtCO01BQ2xCLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDckIscUJBQXFCLHNCQUNyQjtxQkFBdUIsc0JBQ3ZCO21CQUF1QixzQkFDdkI7bUJBQXlCLHNCQUN6QjtzQkFBeUIsc0JBQ3pCOztDQUFzQixzQkFDdEI7cUJBQXlCLGtCQUMxQjthQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0NBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaXN0R3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2xpc3QtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IExpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9saXN0LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IENvbGxhcHNlTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9jb2xsYXBzZSc7XG5pbXBvcnQgeyBMaXN0SXRlbUljb25Db21wb25lbnQgfSBmcm9tICcuL2xpc3QtaXRlbS1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaXN0SXRlbUJvZHlDb21wb25lbnQgfSBmcm9tICcuL2xpc3QtaXRlbS1ib2R5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaXN0SXRlbUZvb3RlckNvbXBvbmVudCB9IGZyb20gJy4vbGlzdC1pdGVtLWZvb3Rlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGlzdEl0ZW1BY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL2xpc3QtaXRlbS1hY3Rpb24uY29tcG9uZW50JztcbmltcG9ydCB7IExpc3RJdGVtQ29sbGFwc2VDb21wb25lbnQgfSBmcm9tICcuL2xpc3QtaXRlbS1jb2xsYXBzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGlzdEl0ZW1DaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4vbGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaXN0SXRlbVJhZGlvQ29tcG9uZW50IH0gZnJvbSAnLi9saXN0LWl0ZW0tcmFkaW8uY29tcG9uZW50JztcbmltcG9ydCB7IExpc3RJdGVtVGltZWxpbmVDb21wb25lbnQgfSBmcm9tICcuL2xpc3QtaXRlbS10aW1lbGluZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoZSBsaXN0LWdyb3VwIG1vZHVsZSBhbGxvd3MgeW91IHRvIGNvbXBvc2UgZGlmZmVyZW50IHN0eWxlc1xuICogb2YgbGlzdHMgdXNlZCBpbiBDdW11bG9jaXR5IElvVC4gVGhleSBjYW4gY29uc2lzdCBvZiBwbGFpblxuICogdGV4dCwgYWN0aW9ucywgaWNvbnMgYW5kIG1vcmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktbGlzdC1ncm91cD5cbiAqICAgPGM4eS1saT5JdGVtIDE8Yzh5LWxpPlxuICogICA8Yzh5LWxpPkl0ZW0gMjxjOHktbGk+XG4gKiA8L2M4eS1saXN0LWdyb3VwPlxuICogYGBgXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIENvbGxhcHNlTW9kdWxlLmZvclJvb3QoKSwgQnNEcm9wZG93bk1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIExpc3RHcm91cENvbXBvbmVudCxcbiAgICBMaXN0SXRlbUNvbXBvbmVudCxcbiAgICBMaXN0SXRlbUljb25Db21wb25lbnQsXG4gICAgTGlzdEl0ZW1Cb2R5Q29tcG9uZW50LFxuICAgIExpc3RJdGVtRm9vdGVyQ29tcG9uZW50LFxuICAgIExpc3RJdGVtQWN0aW9uQ29tcG9uZW50LFxuICAgIExpc3RJdGVtQ29sbGFwc2VDb21wb25lbnQsXG4gICAgTGlzdEl0ZW1DaGVja2JveENvbXBvbmVudCxcbiAgICBMaXN0SXRlbVJhZGlvQ29tcG9uZW50LFxuICAgIExpc3RJdGVtVGltZWxpbmVDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIExpc3RHcm91cENvbXBvbmVudCxcbiAgICBMaXN0SXRlbUNvbXBvbmVudCxcbiAgICBMaXN0SXRlbUljb25Db21wb25lbnQsXG4gICAgTGlzdEl0ZW1Cb2R5Q29tcG9uZW50LFxuICAgIExpc3RJdGVtRm9vdGVyQ29tcG9uZW50LFxuICAgIExpc3RJdGVtQWN0aW9uQ29tcG9uZW50LFxuICAgIExpc3RJdGVtQ29sbGFwc2VDb21wb25lbnQsXG4gICAgTGlzdEl0ZW1DaGVja2JveENvbXBvbmVudCxcbiAgICBMaXN0SXRlbVJhZGlvQ29tcG9uZW50LFxuICAgIExpc3RJdGVtVGltZWxpbmVDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0R3JvdXBNb2R1bGUge31cbiJdfQ==