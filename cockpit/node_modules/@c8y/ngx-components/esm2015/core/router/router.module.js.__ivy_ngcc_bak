import { NgModule } from '@angular/core';
import { RouterModule as NgRouterModule } from '@angular/router';
import { RouterService } from './router.service';
import { ContextRouteComponent } from './context-route.component';
import { HeaderModule } from '../header/header.module';
import { CommonModule } from '../common/common.module';
import { ContextRouteGuard } from './context-route.guard';
import { ViewContext } from './router.models';
import { RouterTabsResolver } from './router-tabs.resolver';
import { EmptyComponent } from './empty.component';
export const routes = [{
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }];
// tslint:disable-next-line: forin
for (const key in ViewContext) {
    const context = ViewContext[key];
    routes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver,
        }
    });
}
export class RouterModule {
    constructor(routerService) {
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    static providers() {
        return [
            ContextRouteGuard,
            RouterTabsResolver,
            RouterService
        ];
    }
    static forRoot() {
        return {
            ngModule: RouterModule,
            providers: RouterModule.providers()
        };
    }
}
RouterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ContextRouteComponent, EmptyComponent],
                imports: [
                    NgRouterModule.forRoot(routes),
                    HeaderModule,
                    CommonModule
                ],
                entryComponents: [ContextRouteComponent, EmptyComponent]
            },] }
];
RouterModule.ctorParameters = () => [
    { type: RouterService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxJQUFJLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQVMsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFZLENBQUM7UUFDOUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsU0FBUyxFQUFFLGNBQWM7S0FDMUI7SUFDRDtRQUNFLElBQUksRUFBRSxhQUFhO1FBQ25CLFNBQVMsRUFBRSxjQUFjO0tBQzFCLENBQUMsQ0FBQztBQUNILGtDQUFrQztBQUNsQyxLQUFLLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRTtJQUM3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNWLElBQUksRUFBRSxPQUFPO1FBQ2IsU0FBUyxFQUFFLHFCQUFxQjtRQUNoQyxXQUFXLEVBQUUsQ0FBRSxpQkFBaUIsQ0FBRTtRQUNsQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsa0JBQWtCO1NBQ3pCO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7QUFXRCxNQUFNLE9BQU8sWUFBWTtJQWdCdkIsWUFBWSxhQUE0QjtRQUN0QyxtRkFBbUY7SUFDckYsQ0FBQztJQWpCRCxNQUFNLENBQUMsU0FBUztRQUNkLE9BQU87WUFDTCxpQkFBaUI7WUFDakIsa0JBQWtCO1lBQ2xCLGFBQWE7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxFQUFFO1NBQ3BDLENBQUM7SUFDSixDQUFDOzs7WUF2QkYsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFFLHFCQUFxQixFQUFFLGNBQWMsQ0FBQztnQkFDdEQsT0FBTyxFQUFFO29CQUNQLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO29CQUM5QixZQUFZO29CQUNaLFlBQVk7aUJBQ2I7Z0JBQ0QsZUFBZSxFQUFFLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDO2FBQ3pEOzs7WUF2Q1EsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgYXMgTmdSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVyU2VydmljZSB9IGZyb20gJy4vcm91dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGV4dFJvdXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb250ZXh0LXJvdXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIZWFkZXJNb2R1bGUgfSBmcm9tICcuLi9oZWFkZXIvaGVhZGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBDb250ZXh0Um91dGVHdWFyZCB9IGZyb20gJy4vY29udGV4dC1yb3V0ZS5ndWFyZCc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dCwgUm91dGUgfSBmcm9tICcuL3JvdXRlci5tb2RlbHMnO1xuaW1wb3J0IHsgUm91dGVyVGFic1Jlc29sdmVyIH0gZnJvbSAnLi9yb3V0ZXItdGFicy5yZXNvbHZlcic7XG5pbXBvcnQgeyBFbXB0eUNvbXBvbmVudCB9IGZyb20gJy4vZW1wdHkuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IHJvdXRlczogUm91dGVbXSA9IFt7XG4gIHBhdGg6ICd1c2Vycy9uZXcnLFxuICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50XG59LFxue1xuICBwYXRoOiAndGVuYW50cy9uZXcnLFxuICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50XG59XTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZm9yaW5cbmZvciAoY29uc3Qga2V5IGluIFZpZXdDb250ZXh0KSB7XG4gIGNvbnN0IGNvbnRleHQgPSBWaWV3Q29udGV4dFtrZXldO1xuICByb3V0ZXMucHVzaCh7XG4gICAgcGF0aDogY29udGV4dCxcbiAgICBjb21wb25lbnQ6IENvbnRleHRSb3V0ZUNvbXBvbmVudCxcbiAgICBjYW5BY3RpdmF0ZTogWyBDb250ZXh0Um91dGVHdWFyZCBdLFxuICAgIGRhdGE6IHsgY29udGV4dCwgY29udGV4dERhdGE6IHt9IH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgdGFiczogUm91dGVyVGFic1Jlc29sdmVyLFxuICAgIH1cbiAgfSk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBDb250ZXh0Um91dGVDb21wb25lbnQsIEVtcHR5Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIE5nUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKSxcbiAgICBIZWFkZXJNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0NvbnRleHRSb3V0ZUNvbXBvbmVudCwgRW1wdHlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlck1vZHVsZSB7XG4gIHN0YXRpYyBwcm92aWRlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIENvbnRleHRSb3V0ZUd1YXJkLFxuICAgICAgUm91dGVyVGFic1Jlc29sdmVyLFxuICAgICAgUm91dGVyU2VydmljZVxuICAgIF07XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJvdXRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogUm91dGVyTW9kdWxlLnByb3ZpZGVycygpXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJvdXRlclNlcnZpY2U6IFJvdXRlclNlcnZpY2UpIHtcbiAgICAvLyBEZWNsYXJlZCBidXQgbmV2ZXIgdXNlZCBpcyBpbnRlbmRlZDogdG8gYWx3YXlzIGhhdmUgYSBpbnN0YW5jZSBvZiBSb3V0ZXJTZXJ2aWNlLlxuICB9XG59XG4iXX0=