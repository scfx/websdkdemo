import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { startWith, switchMap } from 'rxjs/operators';
import { fromFactories } from '../common/extension-hooks';
import { ContextRouteService } from './context-route.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-route.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated: Use HOOK_ROUTE
 */
export const HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A hook to use for Multi Provider extension.
 */
export const HOOK_ROUTE = new InjectionToken('HookRoute');
/**
 * A service which defines routes
 */
export class RouterService {
    constructor(injector, router, contextRouteService) {
        this.injector = injector;
        this.router = router;
        this.contextRouteService = contextRouteService;
        this.refreshTrigger = new Subject();
        this.state = new Map();
        this.factories = [];
        this.refreshTrigger
            .pipe(startWith(1), switchMap(() => fromFactories([
            () => this.injector.get(HOOK_ROUTE, []),
            () => this.getComponentsViaDeprecatedHook(),
            () => this.factories
        ], router, false)))
            .subscribe((routes) => {
            const toAddRoutes = routes.filter(route => {
                const path = `${route.context || ''}${route.path}`;
                const isAlreadyAdded = this.state.has(path);
                if (!isAlreadyAdded) {
                    this.state.set(path, route);
                }
                return !isAlreadyAdded;
            });
            this.addRoute(toAddRoutes);
        });
    }
    /**
     * Refresh the current context
     */
    refresh() {
        this.refreshTrigger.next(1);
        this.contextRouteService.refreshContext();
    }
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    }
    getComponentsViaDeprecatedHook() {
        const componentsViaDeprecatedHook = this.injector.get(HOOK_ONCE_ROUTE, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_ONCE_ROUTE is now deprecated. Use HOOK_ROUTE instead.');
        }
        return componentsViaDeprecatedHook;
    }
    addRoutes(routes) {
        const emptyRoute = this.router.config.find(r => r.path === '**');
        this.router.resetConfig([
            ...this.router.config.filter(r => r.path !== '**'),
            ...routes.map((r) => this.convertRoute(this.router.config, r)),
            emptyRoute
        ].filter(Boolean));
    }
    convertRoute(initialConfig, route) {
        if (route.context) {
            initialConfig.forEach((r) => {
                if (r.data && r.data.context === route.context) {
                    r.children = [route, ...(r.children || [])];
                }
            });
            return;
        }
        return route;
    }
}
RouterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ContextRouteService)); }, token: RouterService, providedIn: "root" });
RouterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RouterService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: ContextRouteService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3JvdXRlci9yb3V0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQW9DLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBeUI5RDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFbEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxjQUFjLENBQWUsV0FBVyxDQUFDLENBQUM7QUFFeEU7O0dBRUc7QUFJSCxNQUFNLE9BQU8sYUFBYTtJQU94QixZQUNVLFFBQWtCLEVBQ25CLE1BQWMsRUFDYixtQkFBd0M7UUFGeEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVJ6QyxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDL0IsVUFBSyxHQUFHLElBQUksR0FBRyxFQUFpQixDQUFDO1FBRTFDLGNBQVMsR0FBcUIsRUFBRSxDQUFDO1FBTy9CLElBQUksQ0FBQyxjQUFjO2FBQ2hCLElBQUksQ0FDSCxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQ1osU0FBUyxDQUFDLEdB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QUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRTtvQkFDOUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTztTQUNSO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7O1lBaEdGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBOUNvQyxRQUFRO1lBQ3BDLE1BQU07WUFJTixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEV4dGVuc2lvbkZhY3RvcnksIEV4dGVuc2lvblBvaW50LCBmcm9tRmFjdG9yaWVzIH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBDb250ZXh0Um91dGVTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LXJvdXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUm91dGUsIFJvdXRlRmFjdG9yeSB9IGZyb20gJy4vcm91dGVyLm1vZGVscyc7XG5cbmRlY2xhcmUgY29uc3QgX19NT0RFX186IHN0cmluZztcblxuLyoqXG4gKiBBbiBleHRlbnNpb24gSE9PSyBjYW4gdXNlIGVpdGhlciBhIHB1cmUgdmFsdWU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZVZhbHVlOiB7IC4uLmhvb2tWYWx1ZSB9LCBtdWx0aTogdHJ1ZSB9XG4gKiBgYGBcbiAqXG4gKiBPciBhbiBhcnJheSB0byBkaXJlY3RseSByZWdpc3RlciBtdWx0aXBsZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlVmFsdWU6IFt7IC4uLmhvb2tWYWx1ZXMgfV0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICpcbiAqIE9yIGFuIEV4dGVuc2lvbkZhY3Rvcnkgd2hpY2ggYWxsb3dzIHRvIGRlZmluZSBhIGdldCgpIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uXG4gKiBnZXRzIGNhbGxlZCBvbiBlYWNoIG5hdmlnYXRpb24gd2l0aCB0aGUgY3VycmVudCByb3V0ZSBhbmQgY2FuIHJldHVybiB2YWx1ZXNcbiAqIGFzeW5jIChvYnNlcnZhYmxlIG9yIHByb21pc2UpLlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VGYWN0b3J5OiB7IGdldDogKHJvdXRlKSA9PiBkb1NvbWV0aGluZ0FzeW5jKHJvdXRlKSB9LCBtdWx0aTogdHJ1ZSB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHR5cGUgUm91dGVFeHRlbnNpb24gPSBSb3V0ZSB8IFJvdXRlW10gfCBFeHRlbnNpb25GYWN0b3J5PFJvdXRlPjtcblxuLyoqXG4gKiBBIGhvb2sgdG8gdXNlIGZvciBNdWx0aSBQcm92aWRlciBleHRlbnNpb24uXG4gKiBAZGVwcmVjYXRlZDogVXNlIEhPT0tfUk9VVEVcbiAqL1xuZXhwb3J0IGNvbnN0IEhPT0tfT05DRV9ST1VURSA9IG5ldyBJbmplY3Rpb25Ub2tlbignUm91dGVGYWN0b3J5Jyk7XG5cbi8qKlxuICogQSBob29rIHRvIHVzZSBmb3IgTXVsdGkgUHJvdmlkZXIgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgY29uc3QgSE9PS19ST1VURSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSb3V0ZUZhY3Rvcnk+KCdIb29rUm91dGUnKTtcblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggZGVmaW5lcyByb3V0ZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUm91dGVyU2VydmljZSBpbXBsZW1lbnRzIEV4dGVuc2lvblBvaW50PFJvdXRlRXh0ZW5zaW9uPiB7XG4gIGl0ZW1zJDogT2JzZXJ2YWJsZTxSb3V0ZVtdPjtcbiAgcmVhZG9ubHkgcmVmcmVzaFRyaWdnZXIgPSBuZXcgU3ViamVjdCgpO1xuICByZWFkb25seSBzdGF0ZSA9IG5ldyBNYXA8c3RyaW5nLCBSb3V0ZT4oKTtcblxuICBmYWN0b3JpZXM6IFJvdXRlRXh0ZW5zaW9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwdWJsaWMgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBjb250ZXh0Um91dGVTZXJ2aWNlOiBDb250ZXh0Um91dGVTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXJcbiAgICAgIC5waXBlKFxuICAgICAgICBzdGFydFdpdGgoMSksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgIGZyb21GYWN0b3JpZXMoXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICgpID0+IHRoaXMuaW5qZWN0b3IuZ2V0KEhPT0tfUk9VVEUsIFtdKSxcbiAgICAgICAgICAgICAgKCkgPT4gdGhpcy5nZXRDb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2soKSxcbiAgICAgICAgICAgICAgKCkgPT4gdGhpcy5mYWN0b3JpZXNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByb3V0ZXIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgocm91dGVzOiBSb3V0ZVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvQWRkUm91dGVzID0gcm91dGVzLmZpbHRlcihyb3V0ZSA9PiB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IGAke3JvdXRlLmNvbnRleHQgfHwgJyd9JHtyb3V0ZS5wYXRofWA7XG4gICAgICAgICAgY29uc3QgaXNBbHJlYWR5QWRkZWQgPSB0aGlzLnN0YXRlLmhhcyhwYXRoKTtcbiAgICAgICAgICBpZiAoIWlzQWxyZWFkeUFkZGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldChwYXRoLCByb3V0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhaXNBbHJlYWR5QWRkZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZFJvdXRlKHRvQWRkUm91dGVzKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggdGhlIGN1cnJlbnQgY29udGV4dFxuICAgKi9cbiAgcmVmcmVzaCgpIHtcbiAgICB0aGlzLnJlZnJlc2hUcmlnZ2VyLm5leHQoMSk7XG4gICAgdGhpcy5jb250ZXh0Um91dGVTZXJ2aWNlLnJlZnJlc2hDb250ZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IHJvdXRlIHRvIHRoZSByb3V0ZXIgY29uZmlndXJhdGlvbiBvciBhIGNvbnRleHQuXG4gICAqIEBwYXJhbSByb3V0ZSBUaGUgcm91dGUgdG8gYWRkXG4gICAqL1xuICBhZGRSb3V0ZShyb3V0ZTogUm91dGUgfCBSb3V0ZVtdKSB7XG4gICAgdGhpcy5hZGRSb3V0ZXMoQXJyYXkuaXNBcnJheShyb3V0ZSkgPyByb3V0ZSA6IFtyb3V0ZV0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2soKSB7XG4gICAgY29uc3QgY29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rOiBSb3V0ZUZhY3RvcnlbXSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxuICAgICAgSE9PS19PTkNFX1JPVVRFLFxuICAgICAgW11cbiAgICApIGFzIFJvdXRlRmFjdG9yeVtdO1xuICAgIGlmIChcbiAgICAgIGNvbXBvbmVudHNWaWFEZXByZWNhdGVkSG9vayAmJlxuICAgICAgY29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rLmxlbmd0aCAmJlxuICAgICAgX19NT0RFX18gIT09ICdwcm9kdWN0aW9uJ1xuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKCdIT09LX09OQ0VfUk9VVEUgaXMgbm93IGRlcHJlY2F0ZWQuIFVzZSBIT09LX1JPVVRFIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudHNWaWFEZXByZWNhdGVkSG9vaztcbiAgfVxuXG4gIHByaXZhdGUgYWRkUm91dGVzKHJvdXRlcykge1xuICAgIGNvbnN0IGVtcHR5Um91dGUgPSB0aGlzLnJvdXRlci5jb25maWcuZmluZChyID0+IHIucGF0aCA9PT0gJyoqJyk7XG4gICAgdGhpcy5yb3V0ZXIucmVzZXRDb25maWcoXG4gICAgICBbXG4gICAgICAgIC4uLnRoaXMucm91dGVyLmNvbmZpZy5maWx0ZXIociA9PiByLnBhdGggIT09ICcqKicpLFxuICAgICAgICAuLi5yb3V0ZXMubWFwKChyOiBSb3V0ZSkgPT4gdGhpcy5jb252ZXJ0Um91dGUodGhpcy5yb3V0ZXIuY29uZmlnLCByKSksXG4gICAgICAgIGVtcHR5Um91dGVcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFJvdXRlKGluaXRpYWxDb25maWcsIHJvdXRlOiBSb3V0ZSkge1xuICAgIGlmIChyb3V0ZS5jb250ZXh0KSB7XG4gICAgICBpbml0aWFsQ29uZmlnLmZvckVhY2goKHI6IFJvdXRlKSA9PiB7XG4gICAgICAgIGlmIChyLmRhdGEgJiYgci5kYXRhLmNvbnRleHQgPT09IHJvdXRlLmNvbnRleHQpIHtcbiAgICAgICAgICByLmNoaWxkcmVuID0gW3JvdXRlLCAuLi4oci5jaGlsZHJlbiB8fCBbXSldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG59XG4iXX0=