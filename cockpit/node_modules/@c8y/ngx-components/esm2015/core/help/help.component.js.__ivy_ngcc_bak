import { Component, Input } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { AppStateService } from '../common/ui-state.service';
import { DocsService } from '../docs/docs.service';
/**
 * A component which shows a context help in
 * the action bar.
 *
 * @example
 * ```html
 * <c8y-help src="/users-guide/cockpit/#dashboards"></c8y-help>
 * ```
 */
export class HelpComponent {
    /**
     * @ignore Only private DI
     */
    constructor(docsService, appState, translateService) {
        this.docsService = docsService;
        this.appState = appState;
        this.translateService = translateService;
        /**
         * The source of the documentation. Used to link to the documentation as well as
         * to parse the source to display.
         */
        this.src = '';
        /**
         * Indicates if the help dialog is collapsed.
         */
        this.isCollapsed = true;
        /**
         * The priority where the help icon should be shown in the action bar
         */
        this.priority = Infinity;
        /**
         * Currrent version of the UI which will be used to get the correct data from
         * the docs. If the UI version is equal to the latest doc version, the value
         * must be ''.
         */
        this.version = this.parseVersion(this.appState.uiVersion);
        /**
         * An title. Set in open by passing the source.
         */
        this.title = '';
        /**
         * The section heading in the doc which is going to be displayed.
         */
        this.sectionHeading = '';
        /**
         * The section content in the doc which is going to be displayed.
         */
        this.sectionContent = '';
        /**
         * Indicates if the component is loading.
         */
        this.isLoading = true;
        /**
         * Indicates if the component failed loading the source.
         */
        this.hasError = false;
        this.SUPPORTED_LANGUAGES = ['en'];
    }
    /**
     * Identifies if the current user language is supported
     * Currently only English is supported.
     */
    get isSupportedLanguage() {
        return this.SUPPORTED_LANGUAGES.indexOf(this.translateService.currentLang) > -1;
    }
    /**
     * Builds the URL based on the src. The Base URL can be set in the application options docBaseUrl.
     * @param src The source of the help on the guide.
     * @param index This flag is used to call the index.json content of a guide. For example, "https://www.cumulocity.com/guides/users-guide/cockpit/index.json".
     */
    getUrl(src = '', index = false) {
        const docsUrl = new URL(this.docsService.getBaseUrl());
        const srcUrl = new URL(`${docsUrl}${src}`);
        const [url, hashFragment] = src.split('#');
        this.sectionHeading = hashFragment;
        if (index) {
            src = `${url}index.json`;
        }
        if (this.version === '') {
            return index ? `${docsUrl.href + src}` : srcUrl.href;
        }
        return `${docsUrl.href}/${this.version}${src}`;
    }
    /**
     * Toggles the visibility of the help dialog.
     */
    toggle() {
        if (this.isCollapsed) {
            this.open();
            return;
        }
        this.close();
    }
    /**
     * Closes the help dialog.
     */
    close() {
        this.isCollapsed = true;
        this.clean();
    }
    /**
     * Opens the help dialog.
     */
    open() {
        this.isCollapsed = false;
        this.isLoading = true;
        this.requestContent();
        if (!this.icon) {
            this.icon = this.resolveIcon();
        }
    }
    requestContent() {
        const req = new XMLHttpRequest();
        req.onreadystatechange = () => this.render(req);
        req.addEventListener('load', () => this.render(req));
        req.open('GET', this.getUrl(this.src, true));
        req.responseType = 'json';
        req.setRequestHeader('Accept', 'text/html');
        req.send();
    }
    clean() {
        this.title = '';
        this.isLoading = true;
        this.hasError = false;
        this.sectionContent = '';
    }
    parseVersion(uiVersion) {
        const version = uiVersion.split('.')[0];
        const majorNumber = Math.floor(parseInt(version, 10) / 100);
        const minorNumber = parseInt(version, 10) - majorNumber * 100;
        return `${majorNumber}.${minorNumber}.0`;
    }
    resolveIcon() {
        try {
            const icon = Array.from(document.querySelector('nav .active i').classList).find(classes => classes.startsWith('c8y-icon-') || classes.startsWith('dlt-c8y-icon-'));
            return icon.replace('dlt-c8y-icon-', '').replace('c8y-icon-', 'c8y-');
        }
        catch (ex) {
            return 'life-saver';
        }
    }
    render(req) {
        if (req.readyState === 4) {
            this.isLoading = false;
            if (req.status === 404 && this.version !== '') {
                this.version = '';
                this.open();
            }
            if (req.status === 200) {
                this.hasError = false;
                const sectionData = req.response[this.sectionHeading];
                if (sectionData) {
                    this.title = sectionData.title;
                    this.sectionContent = sectionData.helpcontent;
                }
            }
            else {
                this.hasError = true;
            }
        }
    }
}
HelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-help',
                template: "<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"pull-right\"\n  [priority]=\"priority\"\n  *ngIf=\"isSupportedLanguage\"\n>\n  <button\n    class=\"btn btn-help\"\n    [title]=\"'Open help' | translate\"\n    (click)=\"toggle()\"\n    [attr.aria-expanded]=\"!isCollapsed\"\n    aria-controls=\"collapseHelp\"\n  >\n    <i\n      [c8yIcon]=\"'question-circle-o'\"\n      class=\"text-info\"\n    ></i>\n  </button>\n</c8y-action-bar-item>\n\n<div\n  id=\"collapseHelp\"\n  class=\"c8y-help-drawer\"\n  [collapse]=\"isCollapsed\"\n  [isAnimated]=\"true\"\n>\n  <div\n    class=\"c8y-help-drawer-block\"\n    #docOutlet\n  >\n    <div\n      *ngIf=\"isLoading\"\n    >\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <div *ngIf=\"!isLoading\">\n      <div class=\"d-flex\">\n        <i\n          [c8yIcon]=\"!hasError ? icon : 'unlink'\"\n          [ngClass]=\"{ 'text-warning': hasError, 'text-muted': !hasError }\"\n          class=\"c8y-icon-duocolor icon-48\"\n        ></i>\n        <div\n          class=\"p-l-16 p-t-16 flex-grow\"\n          *ngIf=\"!hasError\"\n        >\n          <h4 class=\"text-bold text-primary m-b-16\">{{title}}</h4>\n          <div\n            id=\"helpContent\"\n            class=\"help-content\"\n            [innerHTML] = \"sectionContent\"\n          ></div>\n          \n        </div>\n\n        <div\n          class=\"p-l-16 p-t-16 flex-grow\"\n          *ngIf=\"hasError\"\n        >\n          <h4\n            class=\"text-bold m-b-16\"\n            translate\n          >Sorry, that didn't work</h4>\n          <div class=\"help-content\">\n            <p translate>The content couldn't be loaded.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <div class=\"c8y-help-drawer-footer\" *ngIf=\"!isLoading\">\n    <button\n      class=\"btn btn-default\"\n      (click)=\"toggle()\"\n      [title]=\"'Close help' | translate\"\n      [attr.aria-expanded]=\"!isCollapsed\"\n      aria-controls=\"collapseHelp\"\n      translate\n    >Close</button>\n    <a\n      href=\"{{ hasError ? getUrl() : getUrl(src) }}\"\n      class=\"btn btn-primary\"\n      target=\"_blank\"\n    >\n    <span translate *ngIf=\"!hasError\">\n      Open the <span>User guide`KEEP_ORIGINAL`</span>\n    </span>\n    <span translate *ngIf=\"hasError\">\n      Check the <span>User guide`KEEP_ORIGINAL`</span>\n    </span>\n    </a>\n  </div>\n</div>\n"
            },] }
];
HelpComponent.ctorParameters = () => [
    { type: DocsService },
    { type: AppStateService },
    { type: TranslateService }
];
HelpComponent.propDecorators = {
    src: [{ type: Input }],
    isCollapsed: [{ type: Input }],
    priority: [{ type: Input }],
    icon: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,