import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injector, Input, TemplateRef, Type } from '@angular/core';
import { FilteringFormRendererContext } from './filtering-form-renderer';
export class FilteringFormRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.defaultRendererFilterText = '';
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        const { renderer, context } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
        const { filterPredicate } = context.property;
        if (typeof filterPredicate === 'string') {
            this.defaultRendererFilterText = filterPredicate;
        }
    }
}
FilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-filtering-form-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group m-b-8 p-t-8\">\n    <label>{{ 'Filter text' | translate }}</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    />\n  </div>\n\n  <div class=\"data-grid__dropdown__footer d-flex separator-top\">\n    <button\n      title=\"{{ 'Reset' | translate }}\"\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n    >\n      {{ 'Reset' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Apply' | translate }}\"\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    >\n      {{ 'Apply' | translate }}\n    </button>\n  </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
FilteringFormRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
FilteringFormRendererComponent.propDecorators = {
    _spec: [{ type: Input, args: ['spec',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9kYXRhLWdyaWQvY29sdW1uL2ZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBRVQsUUFBUSxFQUNSLEtBQUssRUFFTCxXQUFXLEVBQ1gsSUFBSSxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSw0QkFBNEIsRUFBNkIsTUFBTSwyQkFBMkIsQ0FBQztBQU9wRyxNQUFNLE9BQU8sOEJBQThCO0lBV3pDLFlBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBRnJFLDhCQUF5QixHQUFHLEVBQUUsQ0FBQztJQUV5QyxDQUFDO0lBVHpFLElBQ0ksS0FBSyxDQUFDLElBQStCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFRRCxXQUFXO1FBQ1QsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXhDLElBQUksUUFBUSxZQUFZLFdBQVcsRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztTQUNoQzthQUFNLElBQUksUUFBUSxZQUFZLElBQUksRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztZQUVoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ25GLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTthQUN0QixDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQzdDLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxlQUFlLENBQUM7U0FDbEQ7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw2QkFBNkI7Z0JBQ3ZDLGk3Q0FBdUQ7Z0JBQ3ZELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFkQyxRQUFRO1lBSFIsaUJBQWlCOzs7b0JBb0JoQixLQUFLLFNBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBEb0NoZWNrLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuaW1wb3J0IHsgRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCwgRmlsdGVyaW5nRm9ybVJlbmRlcmVyU3BlYyB9IGZyb20gJy4vZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBzcGVjOiBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJTcGVjO1xuICBASW5wdXQoJ3NwZWMnKVxuICBzZXQgX3NwZWMoc3BlYzogRmlsdGVyaW5nRm9ybVJlbmRlcmVyU3BlYykge1xuICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gIH1cblxuICByZW5kZXJlclR5cGU6ICdURU1QTEFURScgfCAnQ09NUE9ORU5UJztcbiAgcmVuZGVyZXJJbmplY3RvcjogSW5qZWN0b3I7XG4gIGRlZmF1bHRSZW5kZXJlckZpbHRlclRleHQgPSAnJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgY29uc3QgeyByZW5kZXJlciwgY29udGV4dCB9ID0gdGhpcy5zcGVjO1xuXG4gICAgaWYgKHJlbmRlcmVyIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ1RFTVBMQVRFJztcbiAgICB9IGVsc2UgaWYgKHJlbmRlcmVyIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnQ09NUE9ORU5UJztcblxuICAgICAgdGhpcy5yZW5kZXJlckluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb250ZXh0LCB1c2VWYWx1ZTogdGhpcy5zcGVjLmNvbnRleHQgfV0sXG4gICAgICAgIHBhcmVudDogdGhpcy5pbmplY3RvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBmaWx0ZXJQcmVkaWNhdGUgfSA9IGNvbnRleHQucHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJQcmVkaWNhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmRlZmF1bHRSZW5kZXJlckZpbHRlclRleHQgPSBmaWx0ZXJQcmVkaWNhdGU7XG4gICAgfVxuICB9XG59XG4iXX0=