/* tslint:disable:max-classes-per-file */
import { Directive, TemplateRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class CellRendererContext {
}
export class CellRendererDefDirective {
    constructor(template) {
        this.template = template;
    }
}
CellRendererDefDirective.ɵfac = function CellRendererDefDirective_Factory(t) { return new (t || CellRendererDefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CellRendererDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CellRendererDefDirective, selectors: [["", "c8yCellRendererDef", ""]] });
CellRendererDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CellRendererDefDirective, [{
        type: Directive,
        args: [{ selector: '[c8yCellRendererDef]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
export class HeaderCellRendererDefDirective {
    constructor(template) {
        this.template = template;
    }
}
HeaderCellRendererDefDirective.ɵfac = function HeaderCellRendererDefDirective_Factory(t) { return new (t || HeaderCellRendererDefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
HeaderCellRendererDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderCellRendererDefDirective, selectors: [["", "c8yHeaderCellRendererDef", ""]] });
HeaderCellRendererDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderCellRendererDefDirective, [{
        type: Directive,
        args: [{ selector: '[c8yHeaderCellRendererDef]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1yZW5kZXJlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9kYXRhLWdyaWQvY29sdW1uL2NlbGwtcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBRXpDLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFRLE1BQU0sZUFBZSxDQUFDOztBQWE3RCxNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLENBR0M7QUFHRCxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFDdEMsWUFBbUIsUUFBMEI7QUFBSSxRQUE5QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtBQUFDLElBQUUsQ0FBQztBQUNuRDtvREFIQyxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUU7d0pBQzFDO0FBQUM7QUFBa0QsWUFwQnBDLFdBQVc7QUFBRzs7Ozs0RUFBRTtBQXlCcEMsTUFBTSxPQUFPLDhCQUE4QjtBQUFHLElBQzVDLFlBQW1CLFFBQTBCO0FBQUksUUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7QUFBQyxJQUFFLENBQUM7QUFDbkQ7MERBSEMsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLDRCQUE0QixFQUFFOzBLQUNoRDtBQUFDO0FBQXdELFlBekIxQyxXQUFXO0FBQUc7Ozs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi4vZGF0YS1ncmlkLm1vZGVsJztcblxuZXhwb3J0IGludGVyZmFjZSBDZWxsUmVuZGVyZXJEZWYge1xuICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDZWxsUmVuZGVyZXJTcGVjIHtcbiAgcmVuZGVyZXI6IFRlbXBsYXRlUmVmPENlbGxSZW5kZXJlckNvbnRleHQ+IHwgVHlwZTxhbnk+O1xuICBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0O1xufVxuXG5leHBvcnQgY2xhc3MgQ2VsbFJlbmRlcmVyQ29udGV4dCB7XG4gIHZhbHVlOiBhbnk7XG4gIGl0ZW0/OiBhbnk7XG4gIHByb3BlcnR5OiBDb2x1bW47XG59XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjOHlDZWxsUmVuZGVyZXJEZWZdJyB9KVxuZXhwb3J0IGNsYXNzIENlbGxSZW5kZXJlckRlZkRpcmVjdGl2ZSBpbXBsZW1lbnRzIENlbGxSZW5kZXJlckRlZiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2M4eUhlYWRlckNlbGxSZW5kZXJlckRlZl0nIH0pXG5leHBvcnQgY2xhc3MgSGVhZGVyQ2VsbFJlbmRlcmVyRGVmRGlyZWN0aXZlIGltcGxlbWVudHMgQ2VsbFJlbmRlcmVyRGVmIHtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19