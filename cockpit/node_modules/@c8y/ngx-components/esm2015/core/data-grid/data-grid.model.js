export const minColumnGridTrackSize = 80;
/** Maps column types to relative widths. */
export const ratiosByColumnTypes = {
    /** The width ration for icon column type. */
    icon: 1,
    /** The width ration for numeric column type. */
    numeric: 1,
    /** The width ration for short text column type. */
    'text-short': 1.67,
    /** The width ration for long text column type. */
    'text-long': 3.33
};
/** Filtering actions. */
export var FilteringActionType;
(function (FilteringActionType) {
    /** Action invoked when filter settings are to be applied. */
    FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
    /** Action invoked when filter settings are to be cleared. */
    FilteringActionType["ResetFilter"] = "RESET_FILTER";
})(FilteringActionType || (FilteringActionType = {}));
//# sourceMappingURL=data:application/json;base64,