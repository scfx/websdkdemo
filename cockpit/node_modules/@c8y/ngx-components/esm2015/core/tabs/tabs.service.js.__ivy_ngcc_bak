import { Injectable, InjectionToken, Injector, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, filter, first, map, shareReplay } from 'rxjs/operators';
import { fromTrigger, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { OptionsService } from '../common/options.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../common/options.service";
/**
 * A hook to use for Multi Provider extension.
 */
export const HOOK_TABS = new InjectionToken('TabsFactory');
/**
 * A service which defines the used tabs.
 */
export class TabsService extends StateService {
    constructor(injector, router, translateService, options) {
        super();
        this.injector = injector;
        this.translateService = translateService;
        this.options = options;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.items$ = fromTrigger(router, this.refreshTrigger, [
            () => this.injector.get(HOOK_TABS, []),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map(tabs => this.prepareTabs(tabs)), shareReplay(1), distinctUntilChanged());
        this.orientation$ = this.items$.pipe(map((tabs) => {
            const firstTabWithDefinedOrientation = tabs.find(tab => tab.orientation);
            if (firstTabWithDefinedOrientation) {
                return firstTabWithDefinedOrientation.orientation;
            }
            return this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        }), distinctUntilChanged());
    }
    prepareTabs(tabs) {
        return this.sortTabs(tabs
            .map(tab => (Object.assign(Object.assign({}, tab), { template: tab.template instanceof ViewContainerRef ? tab.template : undefined })))
            .filter((tab, index, self) => index === self.findIndex(t => t.path === tab.path)));
    }
    sortTabs(tabs) {
        return tabs.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next(1);
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    get firstTab$() {
        return this.items$.pipe(map(tabs => tabs[0]), filter(Boolean), first());
    }
}
TabsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.OptionsService)); }, token: TabsService, providedIn: "root" });
TabsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TabsService.ctorParameters = () => [
    { type: Injector },
    { type: Router },
    { type: TranslateService },
    { type: OptionsService }
];
//# sourceMappingURL=data:application/json;base64,