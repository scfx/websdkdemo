import { coerceNumberProperty } from '@angular/cdk/coercion';
import { VIRTUAL_SCROLL_STRATEGY } from '@angular/cdk/scrolling';
import { Directive, forwardRef, Input } from '@angular/core';
import { VirtualScrollWindowStrategy } from './virtual-scroll-window-strategy';
/**
 * Provider factory for `VirtualScrollWindowStrategy` that simply extracts the already created
 * `VirtualScrollWindowStrategy` from the given directive.
 * @param windowDir The instance of `VirtualScrollWindowDirective` to extract the
 *     `VirtualScrollWindowStrategy` from.
 */
import * as ɵngcc0 from '@angular/core';
export function _virtualScrollWindowStrategyFactory(windowDir) {
    return windowDir._scrollStrategy;
}
// This is an adapted version of the original CdkFixedSizeVirtualScroll
// https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
export class VirtualScrollWindowDirective {
    constructor() {
        this._itemSizePx = 20;
        this._minBufferPx = 100;
        this._maxBufferPx = 200;
        this._offsetSizePx = 0;
        /** The scroll strategy used by this directive. */
        this._scrollStrategy = new VirtualScrollWindowStrategy(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
    /** The size of the items in the list (in pixels). */
    get itemSizePx() { return this._itemSizePx; }
    set itemSizePx(value) { this._itemSizePx = coerceNumberProperty(value); }
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     */
    get minBufferPx() { return this._minBufferPx; }
    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     */
    get maxBufferPx() { return this._maxBufferPx; }
    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }
    /** The size of the offset (in pixels). */
    get offsetSizePx() { return this._offsetSizePx; }
    set offsetSizePx(value) { this._offsetSizePx = coerceNumberProperty(value); }
    ngOnChanges() {
        this._scrollStrategy.updateItemAndBufferSize(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
}
VirtualScrollWindowDirective.ɵfac = function VirtualScrollWindowDirective_Factory(t) { return new (t || VirtualScrollWindowDirective)(); };
VirtualScrollWindowDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: VirtualScrollWindowDirective, selectors: [["cdk-virtual-scroll-viewport", "windowVirtualScrollStrategy", ""]], inputs: { itemSizePx: "itemSizePx", minBufferPx: "minBufferPx", maxBufferPx: "maxBufferPx", offsetSizePx: "offsetSizePx" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: VIRTUAL_SCROLL_STRATEGY,
                useFactory: _virtualScrollWindowStrategyFactory,
                deps: [forwardRef(() => VirtualScrollWindowDirective)]
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
VirtualScrollWindowDirective.propDecorators = {
    itemSizePx: [{ type: Input }],
    minBufferPx: [{ type: Input }],
    maxBufferPx: [{ type: Input }],
    offsetSizePx: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VirtualScrollWindowDirective, [{
        type: Directive,
        args: [{
                selector: 'cdk-virtual-scroll-viewport[windowVirtualScrollStrategy]',
                providers: [{
                        provide: VIRTUAL_SCROLL_STRATEGY,
                        useFactory: _virtualScrollWindowStrategyFactory,
                        deps: [forwardRef(() => VirtualScrollWindowDirective)]
                    }]
            }]
    }], function () { return []; }, { itemSizePx: [{
            type: Input
        }], minBufferPx: [{
            type: Input
        }], maxBufferPx: [{
            type: Input
        }], offsetSizePx: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1zY3JvbGwtd2luZG93LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9jb21tb24vdmlydHVhbC1zY3JvbGwvdmlydHVhbC1zY3JvbGwtd2luZG93LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBQ0gsTUFBTSxVQUFVLG1DQUFtQyxDQUFDLFNBQXVDO0FBQzNGLElBQUUsT0FBTyxTQUFTLENBQUMsZUFBZSxDQUFDO0FBQ25DLENBQUM7QUFFRCx1RUFBdUU7QUFDdkUsbUdBQW1HO0FBU25HLE1BQU0sT0FBTyw0QkFBNEI7QUFBRyxJQVI1QztBQUNHLFFBWUQsZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDbkIsUUFRRSxpQkFBWSxHQUFHLEdBQUcsQ0FBQztBQUNyQixRQU9FLGlCQUFZLEdBQUcsR0FBRyxDQUFDO0FBQ3JCLFFBS0Usa0JBQWEsR0FBRyxDQUFDLENBQUM7QUFDcEIsUUFDRSxrREFBa0Q7QUFDcEQsUUFBRSxvQkFBZSxHQUNiLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVHLElBSUEsQ0FBQztBQUNELElBckNFLHFEQUFxRDtBQUN2RCxJQUFFLElBQ0ksVUFBVSxLQUFhLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDdkQsSUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkYsSUFFRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxJQUNJLFdBQVcsS0FBYSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3pELElBQUUsSUFBSSxXQUFXLENBQUMsS0FBYSxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLElBRUU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLElBQ0ksV0FBVyxLQUFhLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDekQsSUFBRSxJQUFJLFdBQVcsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckYsSUFFRSwwQ0FBMEM7QUFDNUMsSUFBRSxJQUNJLFlBQVksS0FBYSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNELElBQUUsSUFBSSxZQUFZLENBQUMsS0FBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZGLElBTUUsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekgsSUFBRSxDQUFDO0FBQ0g7d0RBN0NDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUU7b0JBQTBELGtCQUNwRSxTQUFTLEVBQUUsQ0FBQywwQkFDVixPQUFPLEVBQUUsdUJBQXVCLDBCQUNoQyxVQUFVLEVBQUUsbUNBQW1DLDBCQUMvQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxzQkFDdkQsQ0FBQyxlQUNIOzs7O2lEQUNJO0FBQUM7QUFBZ0QseUJBRW5ELEtBQUs7QUFDTiwwQkFRQyxLQUFLO0FBQ04sMEJBT0MsS0FBSztBQUNOLDJCQUtDLEtBQUs7QUFDUDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgVklSVFVBTF9TQ1JPTExfU1RSQVRFR1kgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlydHVhbFNjcm9sbFdpbmRvd1N0cmF0ZWd5IH0gZnJvbSAnLi92aXJ0dWFsLXNjcm9sbC13aW5kb3ctc3RyYXRlZ3knO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZhY3RvcnkgZm9yIGBWaXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3lgIHRoYXQgc2ltcGx5IGV4dHJhY3RzIHRoZSBhbHJlYWR5IGNyZWF0ZWRcbiAqIGBWaXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3lgIGZyb20gdGhlIGdpdmVuIGRpcmVjdGl2ZS5cbiAqIEBwYXJhbSB3aW5kb3dEaXIgVGhlIGluc3RhbmNlIG9mIGBWaXJ0dWFsU2Nyb2xsV2luZG93RGlyZWN0aXZlYCB0byBleHRyYWN0IHRoZVxuICogICAgIGBWaXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3lgIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfdmlydHVhbFNjcm9sbFdpbmRvd1N0cmF0ZWd5RmFjdG9yeSh3aW5kb3dEaXI6IFZpcnR1YWxTY3JvbGxXaW5kb3dEaXJlY3RpdmUpIHtcbiAgcmV0dXJuIHdpbmRvd0Rpci5fc2Nyb2xsU3RyYXRlZ3k7XG59XG5cbi8vIFRoaXMgaXMgYW4gYWRhcHRlZCB2ZXJzaW9uIG9mIHRoZSBvcmlnaW5hbCBDZGtGaXhlZFNpemVWaXJ0dWFsU2Nyb2xsXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9jb21wb25lbnRzL2Jsb2IvbWFzdGVyL3NyYy9jZGsvc2Nyb2xsaW5nL2ZpeGVkLXNpemUtdmlydHVhbC1zY3JvbGwudHNcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2Nkay12aXJ0dWFsLXNjcm9sbC12aWV3cG9ydFt3aW5kb3dWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3ldJyxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IFZJUlRVQUxfU0NST0xMX1NUUkFURUdZLFxuICAgIHVzZUZhY3Rvcnk6IF92aXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3lGYWN0b3J5LFxuICAgIGRlcHM6IFtmb3J3YXJkUmVmKCgpID0+IFZpcnR1YWxTY3JvbGxXaW5kb3dEaXJlY3RpdmUpXVxuICB9XSxcbn0pXG5leHBvcnQgY2xhc3MgVmlydHVhbFNjcm9sbFdpbmRvd0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIC8qKiBUaGUgc2l6ZSBvZiB0aGUgaXRlbXMgaW4gdGhlIGxpc3QgKGluIHBpeGVscykuICovXG4gIEBJbnB1dCgpXG4gIGdldCBpdGVtU2l6ZVB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9pdGVtU2l6ZVB4OyB9XG4gIHNldCBpdGVtU2l6ZVB4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5faXRlbVNpemVQeCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbHVlKTsgfVxuICBfaXRlbVNpemVQeCA9IDIwO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBhbW91bnQgb2YgYnVmZmVyIHJlbmRlcmVkIGJleW9uZCB0aGUgdmlld3BvcnQgKGluIHBpeGVscykuXG4gICAqIElmIHRoZSBhbW91bnQgb2YgYnVmZmVyIGRpcHMgYmVsb3cgdGhpcyBudW1iZXIsIG1vcmUgaXRlbXMgd2lsbCBiZSByZW5kZXJlZC4gRGVmYXVsdHMgdG8gMTAwcHguXG4gICAqL1xuICBASW5wdXQoKVxuICBnZXQgbWluQnVmZmVyUHgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX21pbkJ1ZmZlclB4OyB9XG4gIHNldCBtaW5CdWZmZXJQeCh2YWx1ZTogbnVtYmVyKSB7IHRoaXMuX21pbkJ1ZmZlclB4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUpOyB9XG4gIF9taW5CdWZmZXJQeCA9IDEwMDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBwaXhlbHMgd29ydGggb2YgYnVmZmVyIHRvIHJlbmRlciBmb3Igd2hlbiByZW5kZXJpbmcgbmV3IGl0ZW1zLiBEZWZhdWx0cyB0byAyMDBweC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGdldCBtYXhCdWZmZXJQeCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fbWF4QnVmZmVyUHg7IH1cbiAgc2V0IG1heEJ1ZmZlclB4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5fbWF4QnVmZmVyUHggPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7IH1cbiAgX21heEJ1ZmZlclB4ID0gMjAwO1xuXG4gIC8qKiBUaGUgc2l6ZSBvZiB0aGUgb2Zmc2V0IChpbiBwaXhlbHMpLiAqL1xuICBASW5wdXQoKVxuICBnZXQgb2Zmc2V0U2l6ZVB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9vZmZzZXRTaXplUHg7IH1cbiAgc2V0IG9mZnNldFNpemVQeCh2YWx1ZTogbnVtYmVyKSB7IHRoaXMuX29mZnNldFNpemVQeCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbHVlKTsgfVxuICBfb2Zmc2V0U2l6ZVB4ID0gMDtcblxuICAvKiogVGhlIHNjcm9sbCBzdHJhdGVneSB1c2VkIGJ5IHRoaXMgZGlyZWN0aXZlLiAqL1xuICBfc2Nyb2xsU3RyYXRlZ3k6IFZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneSA9XG4gICAgbmV3IFZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneSh0aGlzLml0ZW1TaXplUHgsIHRoaXMub2Zmc2V0U2l6ZVB4LCB0aGlzLm1pbkJ1ZmZlclB4LCB0aGlzLm1heEJ1ZmZlclB4KTtcblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLl9zY3JvbGxTdHJhdGVneS51cGRhdGVJdGVtQW5kQnVmZmVyU2l6ZSh0aGlzLml0ZW1TaXplUHgsIHRoaXMub2Zmc2V0U2l6ZVB4LCB0aGlzLm1pbkJ1ZmZlclB4LCB0aGlzLm1heEJ1ZmZlclB4KTtcbiAgfVxufVxuIl19