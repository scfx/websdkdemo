import { coerceNumberProperty } from '@angular/cdk/coercion';
import { VIRTUAL_SCROLL_STRATEGY } from '@angular/cdk/scrolling';
import { Directive, forwardRef, Input } from '@angular/core';
import { VirtualScrollWindowStrategy } from './virtual-scroll-window-strategy';
/**
 * Provider factory for `VirtualScrollWindowStrategy` that simply extracts the already created
 * `VirtualScrollWindowStrategy` from the given directive.
 * @param windowDir The instance of `VirtualScrollWindowDirective` to extract the
 *     `VirtualScrollWindowStrategy` from.
 */
export function _virtualScrollWindowStrategyFactory(windowDir) {
    return windowDir._scrollStrategy;
}
// This is an adapted version of the original CdkFixedSizeVirtualScroll
// https://github.com/angular/components/blob/master/src/cdk/scrolling/fixed-size-virtual-scroll.ts
export class VirtualScrollWindowDirective {
    constructor() {
        this._itemSizePx = 20;
        this._minBufferPx = 100;
        this._maxBufferPx = 200;
        this._offsetSizePx = 0;
        /** The scroll strategy used by this directive. */
        this._scrollStrategy = new VirtualScrollWindowStrategy(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
    /** The size of the items in the list (in pixels). */
    get itemSizePx() { return this._itemSizePx; }
    set itemSizePx(value) { this._itemSizePx = coerceNumberProperty(value); }
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     */
    get minBufferPx() { return this._minBufferPx; }
    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     */
    get maxBufferPx() { return this._maxBufferPx; }
    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }
    /** The size of the offset (in pixels). */
    get offsetSizePx() { return this._offsetSizePx; }
    set offsetSizePx(value) { this._offsetSizePx = coerceNumberProperty(value); }
    ngOnChanges() {
        this._scrollStrategy.updateItemAndBufferSize(this.itemSizePx, this.offsetSizePx, this.minBufferPx, this.maxBufferPx);
    }
}
VirtualScrollWindowDirective.decorators = [
    { type: Directive, args: [{
                selector: 'cdk-virtual-scroll-viewport[windowVirtualScrollStrategy]',
                providers: [{
                        provide: VIRTUAL_SCROLL_STRATEGY,
                        useFactory: _virtualScrollWindowStrategyFactory,
                        deps: [forwardRef(() => VirtualScrollWindowDirective)]
                    }],
            },] }
];
VirtualScrollWindowDirective.propDecorators = {
    itemSizePx: [{ type: Input }],
    minBufferPx: [{ type: Input }],
    maxBufferPx: [{ type: Input }],
    offsetSizePx: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1zY3JvbGwtd2luZG93LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL3ZpcnR1YWwtc2Nyb2xsL3ZpcnR1YWwtc2Nyb2xsLXdpbmRvdy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDakUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRS9FOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLG1DQUFtQyxDQUFDLFNBQXVDO0lBQ3pGLE9BQU8sU0FBUyxDQUFDLGVBQWUsQ0FBQztBQUNuQyxDQUFDO0FBRUQsdUVBQXVFO0FBQ3ZFLG1HQUFtRztBQVNuRyxNQUFNLE9BQU8sNEJBQTRCO0lBUnpDO1FBYUUsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFTakIsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFRbkIsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFNbkIsa0JBQWEsR0FBRyxDQUFDLENBQUM7UUFFbEIsa0RBQWtEO1FBQ2xELG9CQUFlLEdBQ2IsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFLNUcsQ0FBQztJQXBDQyxxREFBcUQ7SUFDckQsSUFDSSxVQUFVLEtBQWEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNyRCxJQUFJLFVBQVUsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFHakY7OztPQUdHO0lBQ0gsSUFDSSxXQUFXLEtBQWEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN2RCxJQUFJLFdBQVcsQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFHbkY7O09BRUc7SUFDSCxJQUNJLFdBQVcsS0FBYSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELElBQUksV0FBVyxDQUFDLEtBQWEsSUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUduRiwwQ0FBMEM7SUFDMUMsSUFDSSxZQUFZLEtBQWEsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFPckYsV0FBVztRQUNULElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZILENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBEQUEwRDtnQkFDcEUsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLHVCQUF1Qjt3QkFDaEMsVUFBVSxFQUFFLG1DQUFtQzt3QkFDL0MsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDRCQUE0QixDQUFDLENBQUM7cUJBQ3ZELENBQUM7YUFDSDs7O3lCQUdFLEtBQUs7MEJBU0wsS0FBSzswQkFRTCxLQUFLOzJCQU1MLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBWSVJUVUFMX1NDUk9MTF9TVFJBVEVHWSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3kgfSBmcm9tICcuL3ZpcnR1YWwtc2Nyb2xsLXdpbmRvdy1zdHJhdGVneSc7XG5cbi8qKlxuICogUHJvdmlkZXIgZmFjdG9yeSBmb3IgYFZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneWAgdGhhdCBzaW1wbHkgZXh0cmFjdHMgdGhlIGFscmVhZHkgY3JlYXRlZFxuICogYFZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneWAgZnJvbSB0aGUgZ2l2ZW4gZGlyZWN0aXZlLlxuICogQHBhcmFtIHdpbmRvd0RpciBUaGUgaW5zdGFuY2Ugb2YgYFZpcnR1YWxTY3JvbGxXaW5kb3dEaXJlY3RpdmVgIHRvIGV4dHJhY3QgdGhlXG4gKiAgICAgYFZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneWAgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF92aXJ0dWFsU2Nyb2xsV2luZG93U3RyYXRlZ3lGYWN0b3J5KHdpbmRvd0RpcjogVmlydHVhbFNjcm9sbFdpbmRvd0RpcmVjdGl2ZSkge1xuICByZXR1cm4gd2luZG93RGlyLl9zY3JvbGxTdHJhdGVneTtcbn1cblxuLy8gVGhpcyBpcyBhbiBhZGFwdGVkIHZlcnNpb24gb2YgdGhlIG9yaWdpbmFsIENka0ZpeGVkU2l6ZVZpcnR1YWxTY3JvbGxcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvYmxvYi9tYXN0ZXIvc3JjL2Nkay9zY3JvbGxpbmcvZml4ZWQtc2l6ZS12aXJ0dWFsLXNjcm9sbC50c1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnY2RrLXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0W3dpbmRvd1ZpcnR1YWxTY3JvbGxTdHJhdGVneV0nLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogVklSVFVBTF9TQ1JPTExfU1RSQVRFR1ksXG4gICAgdXNlRmFjdG9yeTogX3ZpcnR1YWxTY3JvbGxXaW5kb3dTdHJhdGVneUZhY3RvcnksXG4gICAgZGVwczogW2ZvcndhcmRSZWYoKCkgPT4gVmlydHVhbFNjcm9sbFdpbmRvd0RpcmVjdGl2ZSldXG4gIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsU2Nyb2xsV2luZG93RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqIFRoZSBzaXplIG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdCAoaW4gcGl4ZWxzKS4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGl0ZW1TaXplUHgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2l0ZW1TaXplUHg7IH1cbiAgc2V0IGl0ZW1TaXplUHgodmFsdWU6IG51bWJlcikgeyB0aGlzLl9pdGVtU2l6ZVB4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUpOyB9XG4gIF9pdGVtU2l6ZVB4ID0gMjA7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBidWZmZXIgcmVuZGVyZWQgYmV5b25kIHRoZSB2aWV3cG9ydCAoaW4gcGl4ZWxzKS5cbiAgICogSWYgdGhlIGFtb3VudCBvZiBidWZmZXIgZGlwcyBiZWxvdyB0aGlzIG51bWJlciwgbW9yZSBpdGVtcyB3aWxsIGJlIHJlbmRlcmVkLiBEZWZhdWx0cyB0byAxMDBweC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGdldCBtaW5CdWZmZXJQeCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fbWluQnVmZmVyUHg7IH1cbiAgc2V0IG1pbkJ1ZmZlclB4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5fbWluQnVmZmVyUHggPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7IH1cbiAgX21pbkJ1ZmZlclB4ID0gMTAwO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHBpeGVscyB3b3J0aCBvZiBidWZmZXIgdG8gcmVuZGVyIGZvciB3aGVuIHJlbmRlcmluZyBuZXcgaXRlbXMuIERlZmF1bHRzIHRvIDIwMHB4LlxuICAgKi9cbiAgQElucHV0KClcbiAgZ2V0IG1heEJ1ZmZlclB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9tYXhCdWZmZXJQeDsgfVxuICBzZXQgbWF4QnVmZmVyUHgodmFsdWU6IG51bWJlcikgeyB0aGlzLl9tYXhCdWZmZXJQeCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbHVlKTsgfVxuICBfbWF4QnVmZmVyUHggPSAyMDA7XG5cbiAgLyoqIFRoZSBzaXplIG9mIHRoZSBvZmZzZXQgKGluIHBpeGVscykuICovXG4gIEBJbnB1dCgpXG4gIGdldCBvZmZzZXRTaXplUHgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX29mZnNldFNpemVQeDsgfVxuICBzZXQgb2Zmc2V0U2l6ZVB4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5fb2Zmc2V0U2l6ZVB4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUpOyB9XG4gIF9vZmZzZXRTaXplUHggPSAwO1xuXG4gIC8qKiBUaGUgc2Nyb2xsIHN0cmF0ZWd5IHVzZWQgYnkgdGhpcyBkaXJlY3RpdmUuICovXG4gIF9zY3JvbGxTdHJhdGVneTogVmlydHVhbFNjcm9sbFdpbmRvd1N0cmF0ZWd5ID1cbiAgICBuZXcgVmlydHVhbFNjcm9sbFdpbmRvd1N0cmF0ZWd5KHRoaXMuaXRlbVNpemVQeCwgdGhpcy5vZmZzZXRTaXplUHgsIHRoaXMubWluQnVmZmVyUHgsIHRoaXMubWF4QnVmZmVyUHgpO1xuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuX3Njcm9sbFN0cmF0ZWd5LnVwZGF0ZUl0ZW1BbmRCdWZmZXJTaXplKHRoaXMuaXRlbVNpemVQeCwgdGhpcy5vZmZzZXRTaXplUHgsIHRoaXMubWluQnVmZmVyUHgsIHRoaXMubWF4QnVmZmVyUHgpO1xuICB9XG59XG4iXX0=