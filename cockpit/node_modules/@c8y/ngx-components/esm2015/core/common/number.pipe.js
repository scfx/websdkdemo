import { DecimalPipe as NgDecimalPipe } from '@angular/common';
import { Inject, LOCALE_ID, Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export const NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/**
 * Formats a value according to digit options and locale rules.
 * Extends the behavior of Angular's <code>number</code> pipe by
 * providing an option to define if a truncated value should be
 * rounded up or down (with the <code>number</code> pipe the
 * value will be rounded using the "to-nearest" method).
 *
 * ```html
 * <span>{{ 3.45612 | c8yNumber: 'ceil':'1.1-3' }}</span> <!-- 3.457 -->
 * <span>{{ 3.46 | c8yNumber: 'ceil':'1.3-3' }}</span> <!-- 3.460 -->
 * <span>{{ 3.45685 | c8yNumber: 'floor':'1.1-3' }}</span> <!-- 3.456 -->```
 */
export class NumberPipe extends NgDecimalPipe {
    constructor(locale) {
        super(locale);
    }
    /**
     * @param value The value to be formatted.
     * @param round When the value needs to be truncated defines if it will be rounded up (='ceil') or down (='floor')
     * @param digitsInfo Sets digit and decimal representation.
     * @param locale Specifies what locale format rules to use.
     */
    transform(value, round, digitsInfo, locale) {
        if (round) {
            let maxFractionPart = 0;
            if (digitsInfo) {
                const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
                if (parts === null) {
                    throw new Error(`${digitsInfo} is not a valid digit info`);
                }
                maxFractionPart = Number.parseInt(parts[5], 10);
            }
            const multiplicator = Math.pow(10, maxFractionPart);
            value = strToNumber(value);
            value = Math[round](value * multiplicator) / multiplicator;
        }
        return super.transform(value, digitsInfo, locale);
    }
}
NumberPipe.ɵfac = function NumberPipe_Factory(t) { return new (t || NumberPipe)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID, 16)); };
NumberPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "c8yNumber", type: NumberPipe, pure: true });
NumberPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberPipe, [{
        type: Pipe,
        args: [{ name: 'c8yNumber' }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
/**
 * Transforms a string into a number (if needed).
 */
function strToNumber(value) {
    // Convert strings to numbers
    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
    }
    if (typeof value !== 'number') {
        throw new Error(`${value} is not a number`);
    }
    return value;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLnBpcGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL251bWJlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLElBQUksYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUV4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyw2QkFBNkIsQ0FBQztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE1BQU0sT0FBTyxVQUFXLFNBQVEsYUFBYTtBQUM3QyxJQUFFLFlBQStCLE1BQWM7QUFDL0MsUUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0gsSUFhRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQUUsU0FBUyxDQUNQLEtBQXlDLEVBQ3pDLEtBQTBDLEVBQzFDLFVBQW1CLEVBQ25CLE1BQWU7QUFDaEIsUUFDQyxJQUFJLEtBQUssRUFBRTtBQUNmLFlBQU0sSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLFlBQU0sSUFBSSxVQUFVLEVBQUU7QUFDdEIsZ0JBQVEsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdELGdCQUNRLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtBQUM1QixvQkFBVSxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsVUFBVSw0QkFBNEIsQ0FBQyxDQUFDO0FBQ3JFLGlCQUFTO0FBQ1QsZ0JBQVEsZUFBZSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3hELGFBQU87QUFDUCxZQUNNLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzFELFlBQ00sS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxZQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLGFBQWEsQ0FBQztBQUNqRSxTQUFLO0FBQ0wsUUFBSSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxJQUFFLENBQUM7QUFDSDtzQ0FoREMsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTswR0FDdEI7QUFBQztBQUFvQyx5Q0FDM0IsTUFBTSxTQUFDLFNBQVM7QUFBUTs7Ozs7OztrQ0FBRTtBQWdEekM7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLFdBQVcsQ0FBQyxLQUFzQjtBQUFJLElBQzdDLDZCQUE2QjtBQUMvQixJQUFFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUM5RSxRQUFJLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLEtBQUc7QUFDSCxJQUFFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO0FBQ2pDLFFBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssa0JBQWtCLENBQUMsQ0FBQztBQUNoRCxLQUFHO0FBQ0gsSUFBRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlY2ltYWxQaXBlIGFzIE5nRGVjaW1hbFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBMT0NBTEVfSUQsIFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNvbnN0IE5VTUJFUl9GT1JNQVRfUkVHRVhQID0gL14oXFxkKyk/XFwuKChcXGQrKSgtKFxcZCspKT8pPyQvO1xuXG4vKipcbiAqIEZvcm1hdHMgYSB2YWx1ZSBhY2NvcmRpbmcgdG8gZGlnaXQgb3B0aW9ucyBhbmQgbG9jYWxlIHJ1bGVzLlxuICogRXh0ZW5kcyB0aGUgYmVoYXZpb3Igb2YgQW5ndWxhcidzIDxjb2RlPm51bWJlcjwvY29kZT4gcGlwZSBieVxuICogcHJvdmlkaW5nIGFuIG9wdGlvbiB0byBkZWZpbmUgaWYgYSB0cnVuY2F0ZWQgdmFsdWUgc2hvdWxkIGJlXG4gKiByb3VuZGVkIHVwIG9yIGRvd24gKHdpdGggdGhlIDxjb2RlPm51bWJlcjwvY29kZT4gcGlwZSB0aGVcbiAqIHZhbHVlIHdpbGwgYmUgcm91bmRlZCB1c2luZyB0aGUgXCJ0by1uZWFyZXN0XCIgbWV0aG9kKS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8c3Bhbj57eyAzLjQ1NjEyIHwgYzh5TnVtYmVyOiAnY2VpbCc6JzEuMS0zJyB9fTwvc3Bhbj4gPCEtLSAzLjQ1NyAtLT5cbiAqIDxzcGFuPnt7IDMuNDYgfCBjOHlOdW1iZXI6ICdjZWlsJzonMS4zLTMnIH19PC9zcGFuPiA8IS0tIDMuNDYwIC0tPlxuICogPHNwYW4+e3sgMy40NTY4NSB8IGM4eU51bWJlcjogJ2Zsb29yJzonMS4xLTMnIH19PC9zcGFuPiA8IS0tIDMuNDU2IC0tPmBgYFxuICovXG5AUGlwZSh7IG5hbWU6ICdjOHlOdW1iZXInIH0pXG5leHBvcnQgY2xhc3MgTnVtYmVyUGlwZSBleHRlbmRzIE5nRGVjaW1hbFBpcGUge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihsb2NhbGUpO1xuICB9XG5cbiAgdHJhbnNmb3JtKFxuICAgIHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsXG4gICAgcm91bmQ6ICdjZWlsJyB8ICdmbG9vcicgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIGRpZ2l0c0luZm8/OiBzdHJpbmcsXG4gICAgbG9jYWxlPzogc3RyaW5nXG4gICk6IHN0cmluZyB8IG51bGw7XG4gIHRyYW5zZm9ybShcbiAgICB2YWx1ZTogbnVsbCB8IHVuZGVmaW5lZCxcbiAgICByb3VuZDogJ2NlaWwnIHwgJ2Zsb29yJyB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgZGlnaXRzSW5mbz86IHN0cmluZyxcbiAgICBsb2NhbGU/OiBzdHJpbmdcbiAgKTogbnVsbDtcbiAgLyoqXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgZm9ybWF0dGVkLlxuICAgKiBAcGFyYW0gcm91bmQgV2hlbiB0aGUgdmFsdWUgbmVlZHMgdG8gYmUgdHJ1bmNhdGVkIGRlZmluZXMgaWYgaXQgd2lsbCBiZSByb3VuZGVkIHVwICg9J2NlaWwnKSBvciBkb3duICg9J2Zsb29yJylcbiAgICogQHBhcmFtIGRpZ2l0c0luZm8gU2V0cyBkaWdpdCBhbmQgZGVjaW1hbCByZXByZXNlbnRhdGlvbi5cbiAgICogQHBhcmFtIGxvY2FsZSBTcGVjaWZpZXMgd2hhdCBsb2NhbGUgZm9ybWF0IHJ1bGVzIHRvIHVzZS5cbiAgICovXG4gIHRyYW5zZm9ybShcbiAgICB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgICByb3VuZDogJ2NlaWwnIHwgJ2Zsb29yJyB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgZGlnaXRzSW5mbz86IHN0cmluZyxcbiAgICBsb2NhbGU/OiBzdHJpbmdcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAocm91bmQpIHtcbiAgICAgIGxldCBtYXhGcmFjdGlvblBhcnQgPSAwO1xuICAgICAgaWYgKGRpZ2l0c0luZm8pIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBkaWdpdHNJbmZvLm1hdGNoKE5VTUJFUl9GT1JNQVRfUkVHRVhQKTtcblxuICAgICAgICBpZiAocGFydHMgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZGlnaXRzSW5mb30gaXMgbm90IGEgdmFsaWQgZGlnaXQgaW5mb2ApO1xuICAgICAgICB9XG4gICAgICAgIG1heEZyYWN0aW9uUGFydCA9IE51bWJlci5wYXJzZUludChwYXJ0c1s1XSwgMTApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtdWx0aXBsaWNhdG9yID0gTWF0aC5wb3coMTAsIG1heEZyYWN0aW9uUGFydCk7XG5cbiAgICAgIHZhbHVlID0gc3RyVG9OdW1iZXIodmFsdWUpO1xuICAgICAgdmFsdWUgPSBNYXRoW3JvdW5kXSh2YWx1ZSAqIG11bHRpcGxpY2F0b3IpIC8gbXVsdGlwbGljYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnRyYW5zZm9ybSh2YWx1ZSwgZGlnaXRzSW5mbywgbG9jYWxlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYSBzdHJpbmcgaW50byBhIG51bWJlciAoaWYgbmVlZGVkKS5cbiAqL1xuZnVuY3Rpb24gc3RyVG9OdW1iZXIodmFsdWU6IG51bWJlciB8IHN0cmluZyk6IG51bWJlciB7XG4gIC8vIENvbnZlcnQgc3RyaW5ncyB0byBudW1iZXJzXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc05hTihOdW1iZXIodmFsdWUpIC0gcGFyc2VGbG9hdCh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dmFsdWV9IGlzIG5vdCBhIG51bWJlcmApO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==