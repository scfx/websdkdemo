import { __awaiter } from "tslib";
import { Observable, throwError } from 'rxjs';
import { concatMap, map, switchMap } from 'rxjs/operators';
export class ZipService {
    getEntries(zipFile) {
        return new Observable(subscriber => {
            const reader = new zip.BlobReader(zipFile);
            zip.createReader(reader, zipReader => {
                zipReader.getEntries(entries => {
                    subscriber.next(entries);
                    subscriber.complete();
                });
            }, message => {
                subscriber.error({ message });
            });
        });
    }
    getData(entry) {
        const data = new Observable(subscriber => {
            const writer = new zip.BlobWriter();
            entry.getData(writer, blob => {
                subscriber.next(blob);
                subscriber.complete();
            });
        });
        return data;
    }
    getJsonData(zipFile, fileEntryFilter) {
        return this.getEntries(zipFile).pipe(map(entries => {
            const entryFile = entries.find(entry => entry.filename === fileEntryFilter.filename);
            if (!entryFile) {
                throwError(`File not found ${JSON.stringify(fileEntryFilter)}`);
            }
            return entryFile;
        }), concatMap(entry => this.getData(entry)), switchMap((blob) => __awaiter(this, void 0, void 0, function* () { return yield blob.text(); })), map(text => JSON.parse(text)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemlwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi96aXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0QsTUFBTSxPQUFPLFVBQVU7SUFDckIsVUFBVSxDQUFDLE9BQWE7UUFDdEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0MsR0FBRyxDQUFDLFlBQVksQ0FDZCxNQUFNLEVBQ04sU0FBUyxDQUFDLEVBQUU7Z0JBQ1YsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDN0IsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDekIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsRUFDRCxPQUFPLENBQUMsRUFBRTtnQkFDUixVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFlO1FBQ3JCLE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxDQUFPLFVBQVUsQ0FBQyxFQUFFO1lBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRW5DLEtBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNwQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0QixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFhLEVBQUUsZUFBcUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1osTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JGLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2QsVUFBVSxDQUFDLGtCQUFrQixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNqRTtZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxFQUNGLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDdkMsU0FBUyxDQUFDLENBQU0sSUFBSSxFQUFDLEVBQUUsZ0RBQUMsT0FBQSxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQSxHQUFBLENBQUMsRUFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZGVjbGFyZSBjb25zdCB6aXA6IGFueTtcblxuZXhwb3J0IGNsYXNzIFppcFNlcnZpY2Uge1xuICBnZXRFbnRyaWVzKHppcEZpbGU6IEZpbGUpOiBPYnNlcnZhYmxlPFppcEVudHJ5W10+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlciA9PiB7XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgemlwLkJsb2JSZWFkZXIoemlwRmlsZSk7XG4gICAgICB6aXAuY3JlYXRlUmVhZGVyKFxuICAgICAgICByZWFkZXIsXG4gICAgICAgIHppcFJlYWRlciA9PiB7XG4gICAgICAgICAgemlwUmVhZGVyLmdldEVudHJpZXMoZW50cmllcyA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZW50cmllcyk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2UgPT4ge1xuICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoeyBtZXNzYWdlIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0RGF0YShlbnRyeTogWmlwRW50cnkpOiBPYnNlcnZhYmxlPEJsb2I+IHtcbiAgICBjb25zdCBkYXRhID0gbmV3IE9ic2VydmFibGU8QmxvYj4oc3Vic2NyaWJlciA9PiB7XG4gICAgICBjb25zdCB3cml0ZXIgPSBuZXcgemlwLkJsb2JXcml0ZXIoKTtcblxuICAgICAgKGVudHJ5IGFzIGFueSkuZ2V0RGF0YSh3cml0ZXIsIGJsb2IgPT4ge1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQoYmxvYik7XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZ2V0SnNvbkRhdGEoemlwRmlsZTogRmlsZSwgZmlsZUVudHJ5RmlsdGVyOiB7IGZpbGVuYW1lOiBzdHJpbmcgfSk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cmllcyh6aXBGaWxlKS5waXBlKFxuICAgICAgbWFwKGVudHJpZXMgPT4ge1xuICAgICAgICBjb25zdCBlbnRyeUZpbGUgPSBlbnRyaWVzLmZpbmQoZW50cnkgPT4gZW50cnkuZmlsZW5hbWUgPT09IGZpbGVFbnRyeUZpbHRlci5maWxlbmFtZSk7XG4gICAgICAgIGlmICghZW50cnlGaWxlKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihgRmlsZSBub3QgZm91bmQgJHtKU09OLnN0cmluZ2lmeShmaWxlRW50cnlGaWx0ZXIpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeUZpbGU7XG4gICAgICB9KSxcbiAgICAgIGNvbmNhdE1hcChlbnRyeSA9PiB0aGlzLmdldERhdGEoZW50cnkpKSxcbiAgICAgIHN3aXRjaE1hcChhc3luYyBibG9iID0+IGF3YWl0IGJsb2IudGV4dCgpKSxcbiAgICAgIG1hcCh0ZXh0ID0+IEpTT04ucGFyc2UodGV4dCkpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFppcEVudHJ5IHtcbiAgdmVyc2lvbjogbnVtYmVyO1xuICBiaXRGbGFnOiBudW1iZXI7XG4gIGNvbXByZXNzaW9uTWV0aG9kOiBudW1iZXI7XG4gIGxhc3RNb2REYXRlUmF3OiBudW1iZXI7XG4gIGxhc3RNb2REYXRlOiBzdHJpbmc7XG4gIGNyYzMyOiBudW1iZXI7XG4gIGNvbXByZXNzZWRTaXplOiBudW1iZXI7XG4gIHVuY29tcHJlc3NlZFNpemU6IG51bWJlcjtcbiAgZmlsZW5hbWVMZW5ndGg6IG51bWJlcjtcbiAgZXh0cmFGaWVsZExlbmd0aDogbnVtYmVyO1xuICBjb21tZW50TGVuZ3RoOiBudW1iZXI7XG4gIGRpcmVjdG9yeTogYm9vbGVhbjtcbiAgb2Zmc2V0OiAwO1xuICBmaWxlbmFtZTogc3RyaW5nO1xuICBjb21tZW50OiBzdHJpbmc7XG59XG4iXX0=