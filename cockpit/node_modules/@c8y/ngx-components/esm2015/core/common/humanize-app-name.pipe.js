import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash';
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
export class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    transform(appNameOrApp = 'Cumulocity') {
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || this.humanize(appName);
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    }
    humanize(str = '') {
        const result = str.replace(/_/g, ' ').split('');
        result[0] = (result[0] || '').toUpperCase();
        return result.join('');
    }
}
HumanizeAppNamePipe.ɵfac = function HumanizeAppNamePipe_Factory(t) { return new (t || HumanizeAppNamePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslateService, 16)); };
HumanizeAppNamePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "humanizeAppName", type: HumanizeAppNamePipe, pure: true });
HumanizeAppNamePipe.ctorParameters = () => [
    { type: TranslateService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HumanizeAppNamePipe, [{
        type: Pipe,
        args: [{ name: 'humanizeAppName' }]
    }], function () { return [{ type: ɵngcc1.TranslateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vaHVtYW5pemUtYXBwLW5hbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUd4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7OztBQUVGLE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQVFqQyxZQUFvQixnQkFBa0M7QUFBSSxRQUF0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFOL0MsaUJBQVksR0FBRztBQUN6QixZQUFJLGNBQWMsRUFBRSxnQkFBZ0I7QUFDcEMsWUFBSSxPQUFPLEVBQUUsU0FBUztBQUN0QixZQUFJLGdCQUFnQixFQUFFLG1CQUFtQjtBQUN6QyxTQUFHLENBQUM7QUFDSixJQUMyRCxDQUFDO0FBQzVELElBQ0UsU0FBUyxDQUFDLGVBQW9CLFlBQVk7QUFBSSxRQUM1QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xELFFBQ0ksSUFBSSxJQUFJLENBQUM7QUFDYixRQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUN4QyxZQUFNLElBQUksR0FBRyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUMzRCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQztBQUNyQixTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMzRCxJQUFFLENBQUM7QUFDSCxJQUNVLFVBQVUsQ0FBQyxZQUFtQztBQUFJLFFBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDekMsWUFBTSxHQUFHLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztBQUMvQixZQUFNLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO0FBQ3RDLFlBQU0sWUFBWTtBQUNsQixTQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDYixRQUFJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLElBQUUsQ0FBQztBQUNILElBQ1UsZUFBZSxDQUFDLE1BQU07QUFDaEMsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDN0MsSUFBRSxDQUFDO0FBQ0gsSUFDVSxXQUFXLENBQUMsWUFBbUM7QUFBSSxRQUN6RCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0gsSUFDVSxRQUFRLENBQUMsTUFBYyxFQUFFO0FBQUksUUFDbkMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELFFBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2hELFFBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNIOytDQTdDQyxJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7a0lBQzVCO0FBQUM7QUFBNkMsWUFaMUMsZ0JBQWdCO0FBQUc7Ozs7aUZBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElBcHBsaWNhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgZ2V0LCBmaW5kLCBuZWdhdGUsIGlzVW5kZWZpbmVkIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEh1bWFuaXplUGlwZSB9IGZyb20gJy4vaHVtYW5pemUucGlwZSc7XG5cbi8qXG4gKiBIdW1hbml6ZSBhbiBhcHBsaWNhdGlvbiBuYW1lIGFuZCB0cmFuc2xhdGVzIGl0LlxuICogVXNhZ2U6XG4gKiAgIGFwcE5hbWVPckFwcCB8IGh1bWFuaXplQXBwTmFtZSB8IGFzeW5jXG4qL1xuQFBpcGUoeyBuYW1lOiAnaHVtYW5pemVBcHBOYW1lJyB9KVxuZXhwb3J0IGNsYXNzIEh1bWFuaXplQXBwTmFtZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICBwcml2YXRlIGludGVybmFsQXBwcyA9IHtcbiAgICBhZG1pbmlzdHJhdGlvbjogJ0FkbWluaXN0cmF0aW9uJyxcbiAgICBjb2NrcGl0OiAnQ29ja3BpdCcsXG4gICAgZGV2aWNlbWFuYWdlbWVudDogJ0RldmljZSBtYW5hZ2VtZW50J1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICB0cmFuc2Zvcm0oYXBwTmFtZU9yQXBwOiBhbnkgPSAnQ3VtdWxvY2l0eScpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGNvbnN0IGFwcE5hbWUgPSB0aGlzLmdldEFwcE5hbWUoYXBwTmFtZU9yQXBwKTtcblxuICAgIGxldCB0ZXh0O1xuICAgIGlmICh0aGlzLmlzUHVibGljQXBwKGFwcE5hbWVPckFwcCkpIHtcbiAgICAgIHRleHQgPSBnZXR0ZXh0KCd7eyBhcHBOYW1lIHwgdHJhbnNsYXRlIH19IChwdWJsaWMpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHQgPSBhcHBOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLnN0cmVhbSh0ZXh0LCB7IGFwcE5hbWUgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFwcE5hbWUoYXBwTmFtZU9yQXBwOiBJQXBwbGljYXRpb24gfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFwcE5hbWUgPSB0aGlzLmdldEZpcnN0RGVmaW5lZChbXG4gICAgICBnZXQoYXBwTmFtZU9yQXBwLCAnbmFtZScpLFxuICAgICAgZ2V0KGFwcE5hbWVPckFwcCwgJ2NvbnRleHRQYXRoJyksXG4gICAgICBhcHBOYW1lT3JBcHBcbiAgICBdKSB8fCAnJztcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEFwcHNbYXBwTmFtZV0gfHwgdGhpcy5odW1hbml6ZShhcHBOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rmlyc3REZWZpbmVkKHZhbHVlcykge1xuICAgIHJldHVybiBmaW5kKHZhbHVlcywgbmVnYXRlKGlzVW5kZWZpbmVkKSk7XG4gIH1cblxuICBwcml2YXRlIGlzUHVibGljQXBwKGFwcE5hbWVPckFwcDogSUFwcGxpY2F0aW9uIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZ2V0KGFwcE5hbWVPckFwcCwgJ3B1YmxpYycpKTtcbiAgfVxuXG4gIHByaXZhdGUgaHVtYW5pemUoc3RyOiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3RyLnJlcGxhY2UoL18vZywgJyAnKS5zcGxpdCgnJyk7XG4gICAgcmVzdWx0WzBdID0gKHJlc3VsdFswXSB8fCAnJykudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICB9XG59XG4iXX0=