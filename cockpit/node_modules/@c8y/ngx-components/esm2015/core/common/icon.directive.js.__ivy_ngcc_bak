import { Directive, Renderer2, Input, ElementRef } from '@angular/core';
/**
 * Allows to set a icon. Switches between c8y default icons
 * and font awesome icons
 * @example <i [c8yIcon]="'clock'">
 */
export class IconDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.c8yMatch = /^c8y-/;
        this.klasses = [];
        this.currentClasses = '';
    }
    set c8yIcon(icon) {
        this.updateIcon(icon);
    }
    isC8y(icon) {
        return this.c8yMatch.test(icon);
    }
    getClasses(icon = '') {
        let classes = '';
        if (icon) {
            const _icon = icon.trim();
            const isC8y = this.isC8y(_icon);
            const iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : `dlt-c8y-icon-${_icon}`;
            classes = `${isC8y ? 'c8y-icon' : ''} ${iconClass}`;
        }
        return classes;
    }
    updateIcon(icon) {
        const newClasses = this.getClasses(icon);
        if (newClasses !== this.currentClasses) {
            this.currentClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.removeClass(this.el.nativeElement, klass);
            });
            newClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.addClass(this.el.nativeElement, klass);
            });
            this.currentClasses = newClasses;
        }
    }
}
IconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[c8yIcon]',
            },] }
];
IconDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
IconDirective.propDecorators = {
    c8yIcon: [{ type: Input }]
};
export const ICONS = [
    'home',
    'th',
    'bar-chart-o',
    'tasks',
    'tachometer',
    'bell',
    'puzzle-piece',
    'map-marker',
    'location-arrow',
    'globe',
    'power-off',
    'desktop',
    'laptop',
    'mobile',
    'signal',
    'qrcode',
    'file',
    'file-text',
    'folder',
    'folder-open',
    'archive',
    'ssd',
    'book',
    'bookmark',
    'tag',
    'flag',
    'search',
    'heart',
    'star',
    'bolt',
    'cog',
    'cogs',
    'wrench',
    'ban',
    'user',
    'users',
    'sign-in',
    'sign-out',
    'upload',
    'download',
    'cloud-upload',
    'cloud-download',
    'cloud',
    'hourglass',
    'refresh',
    'repeat',
    'undo',
    'lock',
    'unlock',
    'info',
    'question-circle',
    'exclamation-circle',
    'bug',
    'calendar',
    'random',
    'asterisk',
    'key',
    'link',
    'chain-broken',
    'external-link',
    'picture-o',
    'comment',
    'bullhorn',
    'phone',
    'lightbulb-o',
    'flask',
    'cloud-network',
    'exchange',
    'code-fork',
    'keyboard-o',
    'terminal',
    'code',
    'clipboard',
    'pencil',
    'envelope',
    'inbox',
    'reply',
    'share',
    'thumbs-up',
    'thumbs-down',
    'check',
    'plus',
    'expand',
    'compress',
    'arrows',
    'arrow-up',
    'arrow-down',
    'arrow-left',
    'arrow-right',
    'th-list',
    'bars',
    'table',
    'columns',
    'filter',
    'sort',
    'sort-up',
    'sort-down',
    'ellipsis-h',
    'ellipsis-v',
    'rss'
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi9pY29uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFOzs7O0dBSUc7QUFJSCxNQUFNLE9BQU8sYUFBYTtJQVN4QixZQUNVLEVBQWMsRUFDZCxRQUFtQjtRQURuQixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUxyQixhQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ25CLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixtQkFBYyxHQUFHLEVBQUUsQ0FBQztJQUl6QixDQUFDO0lBVkosSUFDSSxPQUFPLENBQUMsSUFBWTtRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFTTyxLQUFLLENBQUMsSUFBSTtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxVQUFVLENBQUMsT0FBZSxFQUFFO1FBQ2xDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxFQUFFLENBQUM7WUFDOUYsT0FBTyxHQUFHLEdBQUcsS0FB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O0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxZQUFZO0lBQ1osWUFBWTtJQUNaLEtBQUs7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBSZW5kZXJlcjIsIElucHV0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQWxsb3dzIHRvIHNldCBhIGljb24uIFN3aXRjaGVzIGJldHdlZW4gYzh5IGRlZmF1bHQgaWNvbnNcbiAqIGFuZCBmb250IGF3ZXNvbWUgaWNvbnNcbiAqIEBleGFtcGxlIDxpIFtjOHlJY29uXT1cIidjbG9jaydcIj5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUljb25dJyxcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkRpcmVjdGl2ZSB7XG5cbiAgQElucHV0KClcbiAgc2V0IGM4eUljb24oaWNvbjogc3RyaW5nKSB7XG4gICAgdGhpcy51cGRhdGVJY29uKGljb24pO1xuICB9XG4gIHByaXZhdGUgYzh5TWF0Y2ggPSAvXmM4eS0vO1xuICBwcml2YXRlIGtsYXNzZXMgPSBbXTtcbiAgcHJpdmF0ZSBjdXJyZW50Q2xhc3NlcyA9ICcnO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgcHJpdmF0ZSBpc0M4eShpY29uKSB7XG4gICAgcmV0dXJuIHRoaXMuYzh5TWF0Y2gudGVzdChpY29uKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2xhc3NlcyhpY29uOiBzdHJpbmcgPSAnJykge1xuICAgIGxldCBjbGFzc2VzID0gJyc7XG4gICAgaWYgKGljb24pIHtcbiAgICAgIGNvbnN0IF9pY29uID0gaWNvbi50cmltKCk7XG4gICAgICBjb25zdCBpc0M4eSA9IHRoaXMuaXNDOHkoX2ljb24pO1xuICAgICAgY29uc3QgaWNvbkNsYXNzID0gaXNDOHkgPyBfaWNvbi5yZXBsYWNlKHRoaXMuYzh5TWF0Y2gsICdjOHktaWNvbi0nKSA6IGBkbHQtYzh5LWljb24tJHtfaWNvbn1gO1xuICAgICAgY2xhc3NlcyA9IGAke2lzQzh5ID8gJ2M4eS1pY29uJyA6ICcnfSAke2ljb25DbGFzc31gO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXdDbGFzc2VzID0gdGhpcy5nZXRDbGFzc2VzKGljb24pO1xuICAgIGlmIChuZXdDbGFzc2VzICE9PSB0aGlzLmN1cnJlbnRDbGFzc2VzKSB7XG4gICAgICB0aGlzLmN1cnJlbnRDbGFzc2VzLnNwbGl0KC9cXHMvKS5maWx0ZXIoKGMpID0+IGMpLmZvckVhY2goKGtsYXNzKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBrbGFzcyk7XG4gICAgICB9KTtcbiAgICAgIG5ld0NsYXNzZXMuc3BsaXQoL1xccy8pLmZpbHRlcigoYykgPT4gYykuZm9yRWFjaCgoa2xhc3MpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGtsYXNzKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jdXJyZW50Q2xhc3NlcyA9IG5ld0NsYXNzZXM7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBJQ09OUyA9IFtcbiAgICAgICAgICdob21lJyxcbiAgICAgICAgICd0aCcsXG4gICAgICAgICAnYmFyLWNoYXJ0LW8nLFxuICAgICAgICAgJ3Rhc2tzJyxcbiAgICAgICAgICd0YWNob21ldGVyJyxcbiAgICAgICAgICdiZWxsJyxcbiAgICAgICAgICdwdXp6bGUtcGllY2UnLFxuICAgICAgICAgJ21hcC1tYXJrZXInLFxuICAgICAgICAgJ2xvY2F0aW9uLWFycm93JyxcbiAgICAgICAgICdnbG9iZScsXG4gICAgICAgICAncG93ZXItb2ZmJyxcbiAgICAgICAgICdkZXNrdG9wJyxcbiAgICAgICAgICdsYXB0b3AnLFxuICAgICAgICAgJ21vYmlsZScsXG4gICAgICAgICAnc2lnbmFsJyxcbiAgICAgICAgICdxcmNvZGUnLFxuICAgICAgICAgJ2ZpbGUnLFxuICAgICAgICAgJ2ZpbGUtdGV4dCcsXG4gICAgICAgICAnZm9sZGVyJyxcbiAgICAgICAgICdmb2xkZXItb3BlbicsXG4gICAgICAgICAnYXJjaGl2ZScsXG4gICAgICAgICAnc3NkJyxcbiAgICAgICAgICdib29rJyxcbiAgICAgICAgICdib29rbWFyaycsXG4gICAgICAgICAndGFnJyxcbiAgICAgICAgICdmbGFnJyxcbiAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgJ2hlYXJ0JyxcbiAgICAgICAgICdzdGFyJyxcbiAgICAgICAgICdib2x0JyxcbiAgICAgICAgICdjb2cnLFxuICAgICAgICAgJ2NvZ3MnLFxuICAgICAgICAgJ3dyZW5jaCcsXG4gICAgICAgICAnYmFuJyxcbiAgICAgICAgICd1c2VyJyxcbiAgICAgICAgICd1c2VycycsXG4gICAgICAgICAnc2lnbi1pbicsXG4gICAgICAgICAnc2lnbi1vdXQnLFxuICAgICAgICAgJ3VwbG9hZCcsXG4gICAgICAgICAnZG93bmxvYWQnLFxuICAgICAgICAgJ2Nsb3VkLXVwbG9hZCcsXG4gICAgICAgICAnY2xvdWQtZG93bmxvYWQnLFxuICAgICAgICAgJ2Nsb3VkJyxcbiAgICAgICAgICdob3VyZ2xhc3MnLFxuICAgICAgICAgJ3JlZnJlc2gnLFxuICAgICAgICAgJ3JlcGVhdCcsXG4gICAgICAgICAndW5kbycsXG4gICAgICAgICAnbG9jaycsXG4gICAgICAgICAndW5sb2NrJyxcbiAgICAgICAgICdpbmZvJyxcbiAgICAgICAgICdxdWVzdGlvbi1jaXJjbGUnLFxuICAgICAgICAgJ2V4Y2xhbWF0aW9uLWNpcmNsZScsXG4gICAgICAgICAnYnVnJyxcbiAgICAgICAgICdjYWxlbmRhcicsXG4gICAgICAgICAncmFuZG9tJyxcbiAgICAgICAgICdhc3RlcmlzaycsXG4gICAgICAgICAna2V5JyxcbiAgICAgICAgICdsaW5rJyxcbiAgICAgICAgICdjaGFpbi1icm9rZW4nLFxuICAgICAgICAgJ2V4dGVybmFsLWxpbmsnLFxuICAgICAgICAgJ3BpY3R1cmUtbycsXG4gICAgICAgICAnY29tbWVudCcsXG4gICAgICAgICAnYnVsbGhvcm4nLFxuICAgICAgICAgJ3Bob25lJyxcbiAgICAgICAgICdsaWdodGJ1bGItbycsXG4gICAgICAgICAnZmxhc2snLFxuICAgICAgICAgJ2Nsb3VkLW5ldHdvcmsnLFxuICAgICAgICAgJ2V4Y2hhbmdlJyxcbiAgICAgICAgICdjb2RlLWZvcmsnLFxuICAgICAgICAgJ2tleWJvYXJkLW8nLFxuICAgICAgICAgJ3Rlcm1pbmFsJyxcbiAgICAgICAgICdjb2RlJyxcbiAgICAgICAgICdjbGlwYm9hcmQnLFxuICAgICAgICAgJ3BlbmNpbCcsXG4gICAgICAgICAnZW52ZWxvcGUnLFxuICAgICAgICAgJ2luYm94JyxcbiAgICAgICAgICdyZXBseScsXG4gICAgICAgICAnc2hhcmUnLFxuICAgICAgICAgJ3RodW1icy11cCcsXG4gICAgICAgICAndGh1bWJzLWRvd24nLFxuICAgICAgICAgJ2NoZWNrJyxcbiAgICAgICAgICdwbHVzJyxcbiAgICAgICAgICdleHBhbmQnLFxuICAgICAgICAgJ2NvbXByZXNzJyxcbiAgICAgICAgICdhcnJvd3MnLFxuICAgICAgICAgJ2Fycm93LXVwJyxcbiAgICAgICAgICdhcnJvdy1kb3duJyxcbiAgICAgICAgICdhcnJvdy1sZWZ0JyxcbiAgICAgICAgICdhcnJvdy1yaWdodCcsXG4gICAgICAgICAndGgtbGlzdCcsXG4gICAgICAgICAnYmFycycsXG4gICAgICAgICAndGFibGUnLFxuICAgICAgICAgJ2NvbHVtbnMnLFxuICAgICAgICAgJ2ZpbHRlcicsXG4gICAgICAgICAnc29ydCcsXG4gICAgICAgICAnc29ydC11cCcsXG4gICAgICAgICAnc29ydC1kb3duJyxcbiAgICAgICAgICdlbGxpcHNpcy1oJyxcbiAgICAgICAgICdlbGxpcHNpcy12JyxcbiAgICAgICAgICdyc3MnXG4gICAgICAgXTtcbiJdfQ==