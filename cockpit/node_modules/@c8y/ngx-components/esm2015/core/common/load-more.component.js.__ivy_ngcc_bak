import { __awaiter } from "tslib";
import { Component, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
export class LoadMoreComponent {
    constructor(element) {
        this.element = element;
        this.useIntersection = true;
        this.hidden = false;
        this.class = 'c8y-list__item p-0';
        this.maxIterations = 10;
        this.hideNoMoreDataHint = false;
        this.onLoad = new EventEmitter();
        this.isLoading = false;
        this.counter = 0;
        this.hasNoMoreData = false;
        this.LOAD_SAME_PAGE_THRESHOLD = 50;
        this.destroyed = false;
    }
    get hostClass() {
        return this.hidden || (!this.hasMore && !this.hasNoMoreData) ? '' : this.class;
    }
    get hasMore() {
        return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
    }
    ngAfterContentInit() {
        this.destroyed = false;
        if (this.useIntersection && 'IntersectionObserver' in window) {
            this.intersectionObserver = new IntersectionObserver(event => this.buttonInView(event[0]), {
                root: this.container ? this.container.nativeElement : null
            });
            this.intersectionObserver.observe(this.element.nativeElement);
        }
        this.hasNoMoreData = this.shouldShowNoMoreDataHint();
    }
    ngOnDestroy() {
        this.destroyed = true;
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
            this.intersectionObserver.unobserve(this.element.nativeElement);
            clearTimeout(this.loadUntilIntersected);
        }
    }
    loadMore(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.destroyed) {
                this.isLoading = true;
                if (event) {
                    event.stopPropagation();
                }
                if (this.hasMore) {
                    const result = yield this.paging.next();
                    this.paging = result.paging;
                    this.onLoad.emit(result.data);
                    this.intersectionLoading();
                    this.hasNoMoreData = this.shouldShowNoMoreDataHint();
                }
                else {
                    this.counter = 0;
                    this.isLoading = false;
                }
            }
        });
    }
    intersectionLoading() {
        if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
            this.loadUntilIntersected = setTimeout(() => this.loadMore(), this.getLoadingThreshold());
            this.useIntersection = this.shouldSwitchMode();
        }
        else {
            this.isLoading = false;
            this.loadUntilIntersected = undefined;
        }
    }
    getLoadingThreshold() {
        return this.LOAD_SAME_PAGE_THRESHOLD * this.counter++;
    }
    shouldShowNoMoreDataHint() {
        return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
    }
    shouldSwitchMode() {
        return this.counter < this.maxIterations || this.hidden;
    }
    buttonInView(event) {
        if (event.isIntersecting) {
            this.loadMore();
        }
        else if (this.loadUntilIntersected) {
            clearTimeout(this.loadUntilIntersected);
            this.loadUntilIntersected = null;
            this.isLoading = false;
        }
        else {
            // avoiding a race condition when timeout is faster
            // cleared then set
            this.loadUntilIntersected = null;
        }
    }
}
LoadMoreComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-load-more',
                template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore && !(loadingTemplate && isLoading)\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}</span\n      >\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"hasNoMoreData && !hideNoMoreDataHint && !isLoading\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"loadingTemplate && isLoading\">\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n</ng-container>\n"
            },] }
];
LoadMoreComponent.ctorParameters = () => [
    { type: ElementRef }
];
LoadMoreComponent.propDecorators = {
    paging: [{ type: Input }],
    useIntersection: [{ type: Input }],
    hidden: [{ type: Input }],
    container: [{ type: Input }],
    class: [{ type: Input }],
    maxIterations: [{ type: Input }],
    noMoreDataHint: [{ type: Input }],
    loadingTemplate: [{ type: Input }],
    hideNoMoreDataHint: [{ type: Input }],
    loadNextLabel: [{ type: Input }],
    loadingLabel: [{ type: Input }],
    onLoad: [{ type: Output }],
    hostClass: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,