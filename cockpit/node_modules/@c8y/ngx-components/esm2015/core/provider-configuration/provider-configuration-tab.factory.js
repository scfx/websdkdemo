import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { flatten } from 'lodash-es';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from '../common';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class ProviderConfigurationTabFactory {
    constructor(config, router, injector) {
        this.router = router;
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        const configForRoute = this.config.find(c => c.tab
            ? this.router.url === '/' + this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
            : false);
        const filteredRoutes = configForRoute
            ? this.config.filter(c => c.navigation.path.replace(/^\/|\/$/g, '') ===
                configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab)
            : [];
        const canActivate = filteredRoutes
            .map(c => c.tab.canActivate && c.tab.canActivate.length
            ? c.tab.canActivate.map(ca => this.injector.get(ca))
            : undefined)
            .map(this.checkCanActivate.bind(this));
        return canActivate.length > 0
            ? forkJoin(canActivate).pipe(map((canActivateResult) => filteredRoutes
                .map((c, index) => {
                const tab = Object.assign(Object.assign({}, c.tab), { path: this.getNodeTabPath(c.navigation.path, c.tab.path) });
                return canActivateResult[index] ? tab : undefined;
            })
                .filter(el => !!el)))
            : [];
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getNodeTabPath(nodePath, tabPath) {
        return `${nodePath.replace(/^\/|\/$/g, '')}/${tabPath.replace(/^\/|\/$/g, '')}`;
    }
}
ProviderConfigurationTabFactory.ɵfac = function ProviderConfigurationTabFactory_Factory(t) { return new (t || ProviderConfigurationTabFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ProviderConfigurationTabFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationTabFactory, factory: ProviderConfigurationTabFactory.ɵfac });
ProviderConfigurationTabFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Router },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationTabFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }, { type: ɵngcc1.Router }, { type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,