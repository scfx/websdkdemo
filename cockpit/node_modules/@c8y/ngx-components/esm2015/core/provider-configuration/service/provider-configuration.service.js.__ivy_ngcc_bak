import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FetchClient, Service } from '@c8y/client';
import { get } from 'lodash-es';
export class ProviderConfigurationService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
    }
    detail() {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, ProviderConfigurationService.NO_DETAIL_ID);
        });
    }
    update(entity) {
        const _super = Object.create(null, {
            update: { get: () => super.update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.update.call(this, entity);
        });
    }
    delete() {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, ProviderConfigurationService.NO_DETAIL_ID);
        });
    }
    /** There is a single provider configuration per tenant and detail URL is not needed */
    getDetailUrl(_) {
        return this.listUrl;
    }
}
ProviderConfigurationService.NO_DETAIL_ID = null;
ProviderConfigurationService.decorators = [
    { type: Injectable }
];
ProviderConfigurationService.ctorParameters = () => [
    { type: FetchClient },
    { type: ActivatedRoute }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3NlcnZpY2UvcHJvdmlkZXItY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUF3QixPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUloQyxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsT0FBMkI7SUFNM0UsWUFBWSxNQUFtQixFQUFFLGNBQThCO1FBQzdELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLGNBQWMsRUFBRSxzREFBc0QsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLGNBQWMsRUFBRSxzREFBc0QsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFSyxNQUFNOzs7OztZQUNWLE9BQU8sT0FBTSxNQUFNLFlBQUMsNEJBQTRCLENBQUMsWUFBWSxFQUFFO1FBQ2pFLENBQUM7S0FBQTtJQUVLLE1BQU0sQ0FBQyxNQUFtQzs7Ozs7WUFDOUMsT0FBTyxPQUFNLE1BQU0sWUFBQyxNQUFNLEVBQUU7UUFDOUIsQ0FBQztLQUFBO0lBRUssTUFBTTs7Ozs7WUFDVixPQUFPLE9BQU0sTUFBTSxZQUFDLDRCQUE0QixDQUFDLFlBQVksRUFBRTtRQUNqRSxDQUFDO0tBQUE7SUFFRCx1RkFBdUY7SUFDN0UsWUFBWSxDQUFDLENBQWdDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOztBQTFCdUIseUNBQVksR0FBVyxJQUFJLENBQUM7O1lBRnJELFVBQVU7OztZQUpGLFdBQVc7WUFEWCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElJZGVudGlmaWVkLCBJUmVzdWx0LCBTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFByb3ZpZGVyUHJvcGVydGllcyB9IGZyb20gJy4uL21vZGVsL3Byb3ZpZGVyLXByb3BlcnRpZXMubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJDb25maWd1cmF0aW9uU2VydmljZSBleHRlbmRzIFNlcnZpY2U8UHJvdmlkZXJQcm9wZXJ0aWVzPiB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE5PX0RFVEFJTF9JRDogc3RyaW5nID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nO1xuICBwcm90ZWN0ZWQgbGlzdFVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogRmV0Y2hDbGllbnQsIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIHN1cGVyKGNsaWVudCk7XG4gICAgdGhpcy5iYXNlVXJsID0gZ2V0KGFjdGl2YXRlZFJvdXRlLCAnc25hcHNob3QuZGF0YS5lbmRwb2ludC5jb25maWd1cmF0aW9uRW5kcG9pbnQuYmFzZVVybCcpO1xuICAgIHRoaXMubGlzdFVybCA9IGdldChhY3RpdmF0ZWRSb3V0ZSwgJ3NuYXBzaG90LmRhdGEuZW5kcG9pbnQuY29uZmlndXJhdGlvbkVuZHBvaW50Lmxpc3RVcmwnKTtcbiAgfVxuXG4gIGFzeW5jIGRldGFpbCgpOiBQcm9taXNlPElSZXN1bHQ8UHJvdmlkZXJQcm9wZXJ0aWVzPj4ge1xuICAgIHJldHVybiBzdXBlci5kZXRhaWwoUHJvdmlkZXJDb25maWd1cmF0aW9uU2VydmljZS5OT19ERVRBSUxfSUQpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlKGVudGl0eTogUGFydGlhbDxQcm92aWRlclByb3BlcnRpZXM+KTogUHJvbWlzZTxJUmVzdWx0PFByb3ZpZGVyUHJvcGVydGllcz4+IHtcbiAgICByZXR1cm4gc3VwZXIudXBkYXRlKGVudGl0eSk7XG4gIH1cblxuICBhc3luYyBkZWxldGUoKTogUHJvbWlzZTxJUmVzdWx0PG51bGw+PiB7XG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZShQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlLk5PX0RFVEFJTF9JRCk7XG4gIH1cblxuICAvKiogVGhlcmUgaXMgYSBzaW5nbGUgcHJvdmlkZXIgY29uZmlndXJhdGlvbiBwZXIgdGVuYW50IGFuZCBkZXRhaWwgVVJMIGlzIG5vdCBuZWVkZWQgKi9cbiAgcHJvdGVjdGVkIGdldERldGFpbFVybChfOiBzdHJpbmcgfCBudW1iZXIgfCBJSWRlbnRpZmllZCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGlzdFVybDtcbiAgfVxufVxuIl19