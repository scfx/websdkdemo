import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FetchClient, Service } from '@c8y/client';
import { get } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/router';
export class ProviderDefinitionsService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.listUrl');
    }
    list() {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this);
        });
    }
}
ProviderDefinitionsService.ɵfac = function ProviderDefinitionsService_Factory(t) { return new (t || ProviderDefinitionsService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc2.ActivatedRoute)); };
ProviderDefinitionsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderDefinitionsService, factory: ProviderDefinitionsService.ɵfac });
ProviderDefinitionsService.ctorParameters = () => [
    { type: FetchClient },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderDefinitionsService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }, { type: ɵngcc2.ActivatedRoute }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItZGVmaW5pdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3NlcnZpY2UvcHJvdmlkZXItZGVmaW5pdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBZSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDaEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7OztBQUloQyxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsT0FBMkI7QUFDM0UsSUFHRSxZQUFZLE1BQW1CLEVBQUUsY0FBOEI7QUFDakUsUUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEIsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxjQUFjLEVBQUUsb0RBQW9ELENBQUMsQ0FBQztBQUM3RixRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLGNBQWMsRUFBRSxvREFBb0QsQ0FBQyxDQUFDO0FBQzdGLElBQUUsQ0FBQztBQUNILElBQ1EsSUFBSTtBQUFLO0FBQ2Q7QUFHYTtBQUFZO0FBQThELFlBSHRGLE9BQU8sT0FBTSxJQUFJLFlBQUc7QUFDeEIsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIO3NEQWRDLFVBQVU7NEpBQ1Q7QUFBQztBQUFvRCxZQUw5QyxXQUFXO0FBQUksWUFEZixjQUFjO0FBQUc7Ozs2R0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElSZXN1bHRMaXN0LCBTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFByb3ZpZGVyRGVmaW5pdGlvbiB9IGZyb20gJy4uL21vZGVsL3Byb3ZpZGVyLWRlZmluaXRpb24ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJEZWZpbml0aW9uc1NlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlPFByb3ZpZGVyRGVmaW5pdGlvbj4ge1xuICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nO1xuICBwcm90ZWN0ZWQgbGlzdFVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogRmV0Y2hDbGllbnQsIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIHN1cGVyKGNsaWVudCk7XG4gICAgdGhpcy5iYXNlVXJsID0gZ2V0KGFjdGl2YXRlZFJvdXRlLCAnc25hcHNob3QuZGF0YS5lbmRwb2ludC5kZWZpbml0aW9uc0VuZHBvaW50LmJhc2VVcmwnKTtcbiAgICB0aGlzLmxpc3RVcmwgPSBnZXQoYWN0aXZhdGVkUm91dGUsICdzbmFwc2hvdC5kYXRhLmVuZHBvaW50LmRlZmluaXRpb25zRW5kcG9pbnQubGlzdFVybCcpO1xuICB9XG5cbiAgYXN5bmMgbGlzdCgpOiBQcm9taXNlPElSZXN1bHRMaXN0PFByb3ZpZGVyRGVmaW5pdGlvbj4+IHtcbiAgICByZXR1cm4gc3VwZXIubGlzdCgpO1xuICB9XG59XG4iXX0=