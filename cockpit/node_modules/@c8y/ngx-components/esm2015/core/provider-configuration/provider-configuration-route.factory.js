import { Inject, Injectable, Optional } from '@angular/core';
import { flatten, get, uniqBy } from 'lodash-es';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationComponent } from './provider-configuration.component';
import { ConditionalTabsOutletComponent } from '../tabs';
import * as ɵngcc0 from '@angular/core';
export class ProviderConfigurationRouteFactory {
    constructor(config) {
        this.config = flatten(config);
    }
    get() {
        const navigationRoutes = uniqBy(this.config.filter(c => c.tab), 'navigation.path').map(c => {
            return {
                path: c.navigation.path,
                component: ConditionalTabsOutletComponent
            };
        });
        const navigationWithTabsRoutes = this.config.map(c => ({
            path: c.tab
                ? `${c.navigation.path.replace(/^\/|\/$/g, '')}/${c.tab.path.replace(/^\/|\/$/g, '')}`
                : c.navigation.path,
            component: ProviderConfigurationComponent,
            canActivate: [
                ...(c.navigation.canActivate || []),
                ...(get(c, 'tab.canActivate') || [])
            ].filter(g => !!g),
            data: {
                layout: c.layout,
                endpoint: c.endpoint
            }
        }));
        return [...navigationRoutes, ...navigationWithTabsRoutes];
    }
}
ProviderConfigurationRouteFactory.ɵfac = function ProviderConfigurationRouteFactory_Factory(t) { return new (t || ProviderConfigurationRouteFactory)(ɵngcc0.ɵɵinject(HOOK_DYNAMIC_PROVIDER_CONFIG, 8)); };
ProviderConfigurationRouteFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ProviderConfigurationRouteFactory, factory: ProviderConfigurationRouteFactory.ɵfac });
ProviderConfigurationRouteFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProviderConfigurationRouteFactory, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1yb3V0ZS5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24vcHJvdmlkZXItY29uZmlndXJhdGlvbi1yb3V0ZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHakQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0UsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDcEYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sU0FBUyxDQUFDOztBQUt6RCxNQUFNLE9BQU8saUNBQWlDO0FBQUcsSUFHL0MsWUFBOEQsTUFBaUM7QUFDakcsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSCxJQUNFLEdBQUc7QUFDTCxRQUFJLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQy9GLFlBQU0sT0FBTztBQUNiLGdCQUFRLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUk7QUFDL0IsZ0JBQVEsU0FBUyxFQUFFLDhCQUE4QjtBQUNqRCxhQUFPLENBQUM7QUFDUixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxZQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRztBQUNqQixnQkFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDOUYsZ0JBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSTtBQUMzQixZQUFNLFNBQVMsRUFBRSw4QkFBOEI7QUFDL0MsWUFBTSxXQUFXLEVBQUU7QUFDbkIsZ0JBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUMzQyxnQkFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM1QyxhQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixZQUFNLElBQUksRUFBRTtBQUNaLGdCQUFRLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTtBQUN4QixnQkFBUSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVE7QUFDNUIsYUFBTztBQUNQLFNBQUssQ0FBQyxDQUFDLENBQUM7QUFDUixRQUNJLE9BQU8sQ0FBQyxHQUFHLGdCQUFnQixFQUFFLEdBQUcsd0JBQXdCLENBQUMsQ0FBQztBQUM5RCxJQUFFLENBQUM7QUFDSDs2REFqQ0MsVUFBVTtpTEFDVDtBQUFDO0FBQTJELHdDQUcvQyxRQUFRLFlBQUksTUFBTSxTQUFDLDRCQUE0QjtBQUFROzs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmxhdHRlbiwgZ2V0LCB1bmlxQnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUm91dGVGYWN0b3J5IH0gZnJvbSAnLi4vcm91dGVyJztcbmltcG9ydCB7IER5bmFtaWNQcm92aWRlckNvbmZpZyB9IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRyB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uZGl0aW9uYWxUYWJzT3V0bGV0Q29tcG9uZW50IH0gZnJvbSAnLi4vdGFicyc7XG5pbXBvcnQgeyBFeHRlbnNpb25GYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFJvdXRlPiB7XG4gIHByaXZhdGUgY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUcpIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW11bXSkge1xuICAgIHRoaXMuY29uZmlnID0gZmxhdHRlbihjb25maWcpO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIGNvbnN0IG5hdmlnYXRpb25Sb3V0ZXMgPSB1bmlxQnkodGhpcy5jb25maWcuZmlsdGVyKGMgPT4gYy50YWIpLCAnbmF2aWdhdGlvbi5wYXRoJykubWFwKGMgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogYy5uYXZpZ2F0aW9uLnBhdGgsXG4gICAgICAgIGNvbXBvbmVudDogQ29uZGl0aW9uYWxUYWJzT3V0bGV0Q29tcG9uZW50XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgbmF2aWdhdGlvbldpdGhUYWJzUm91dGVzID0gdGhpcy5jb25maWcubWFwKGMgPT4gKHtcbiAgICAgIHBhdGg6IGMudGFiXG4gICAgICAgID8gYCR7Yy5uYXZpZ2F0aW9uLnBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKX0vJHtjLnRhYi5wYXRoLnJlcGxhY2UoL15cXC98XFwvJC9nLCAnJyl9YFxuICAgICAgICA6IGMubmF2aWdhdGlvbi5wYXRoLFxuICAgICAgY29tcG9uZW50OiBQcm92aWRlckNvbmZpZ3VyYXRpb25Db21wb25lbnQsXG4gICAgICBjYW5BY3RpdmF0ZTogW1xuICAgICAgICAuLi4oYy5uYXZpZ2F0aW9uLmNhbkFjdGl2YXRlIHx8IFtdKSxcbiAgICAgICAgLi4uKGdldChjLCAndGFiLmNhbkFjdGl2YXRlJykgfHwgW10pXG4gICAgICBdLmZpbHRlcihnID0+ICEhZyksXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGxheW91dDogYy5sYXlvdXQsXG4gICAgICAgIGVuZHBvaW50OiBjLmVuZHBvaW50XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIFsuLi5uYXZpZ2F0aW9uUm91dGVzLCAuLi5uYXZpZ2F0aW9uV2l0aFRhYnNSb3V0ZXNdO1xuICB9XG59XG4iXX0=