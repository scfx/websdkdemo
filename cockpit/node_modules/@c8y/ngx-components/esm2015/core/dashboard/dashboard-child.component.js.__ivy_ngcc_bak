import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DashboardChildActionComponent } from './dashboard-child-action.component';
import { DashboardChildChange } from './dashboard-child-change';
import { DashboardComponent } from './dashboard.component';
/**
 * A dashboard child allows to position elements
 * correctly on a grid. The user can then resize and
 * rearrange the elements, as long as they are not `frozen`.
 *
 * By setting `c8y-dashboard-child-actions` and
 * `c8y-dashboard-child-title` on the element you can add
 * custom actions or a custom title to the current child.
 *
 * By adding the correct branded classes, you can define
 * the look and feel of the child. By default it is displayed
 * as a card.
 *
 * Example:
 *
 * ```html
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * ```
 */
export class DashboardChildComponent {
    constructor(dashboard, sanitizer, element) {
        this.dashboard = dashboard;
        this.sanitizer = sanitizer;
        this.element = element;
        this.actions = [];
        this.isResize = false;
        this.isDragging = false;
        this.klasses = {};
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        /**
         * The width of the component in grid-columns.
         */
        this.width = 1;
        /**
         * The height of the component in grid-rows.
         */
        this.height = 1;
        /**
         * The margin of the child in pixel.
         */
        this.margin = 12;
        /**
         * If a dashboard is frozen, all children cannot be moved
         * or resized.
         */
        this.isFrozen = false;
        /**
         * The child content is initialized, as soon it is scrolled into viewport
         */
        this.useIntersection = false;
        /**
         * An event fired if a child change is started (dragging or resizing)
         */
        this.changeStart = new EventEmitter();
        /**
         * An event fired if a child change is ended
         */
        this.changeEnd = new EventEmitter();
        /**
         * All classes added to this child
         */
        this.class = {};
        /**
         * An indicator if the child is intersected (that mean visible for the user)
         */
        this.intersected = false;
    }
    /**
     * Updates the pixel width of the child (used for resizing)
     */
    set pxWidth(value) {
        this._pxWidth = `${value}px`;
    }
    /**
     * Updates the pixel height of the child (used for resizing)
     */
    set pxHeight(value) {
        this._pxHeight = `${value}px`;
    }
    /**
     * nasty workaround for that issue:
     * https://github.com/angular/angular/issues/9343
     */
    get inlineStyle() {
        return this.sanitizer.bypassSecurityTrustStyle(`
    grid-column-start: ${this.x + 1};
    grid-row-start: ${this.y + 1};
    grid-column-end: span ${this.width};
    grid-row-end: span ${this.height};
    display: block;
    margin: ${this.margin || 12}px;
    order: ${this.getOrder()};
    `);
    }
    ngOnChanges() {
        this.klasses = Object.assign({ card: true, 'card-dashboard': true, disabled: this.isFrozen, 'on-resize': this.isResize }, this.class);
    }
    ngOnInit() {
        if (this.x === undefined || this.y === undefined) {
            setTimeout(() => this.setDynamicDimension());
        }
        if (this.useIntersection && 'IntersectionObserver' in window) {
            const intersectionObserver = new IntersectionObserver(event => (this.intersected = this.childInView(event[0], intersectionObserver)));
            intersectionObserver.observe(this.element.nativeElement);
        }
        else {
            this.intersected = true;
        }
    }
    ngAfterViewInit() {
        this.dashboard.children.push(this);
    }
    setDynamicDimension() {
        const ds = new DashboardChildChange(this);
        const { x, y } = ds.findFreeDimension();
        this.x = x;
        this.y = y;
        this.dashboard.emitChange(this);
    }
    resizeStarted($event) {
        this.isResize = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.resize$.subscribe();
        this.changeStart.emit(this);
        this.ngOnChanges();
    }
    dragStarted($event) {
        this.isDragging = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.drag$.subscribe();
        this.changeStart.emit(this);
    }
    reset($event) {
        this.isResize = false;
        this.isDragging = false;
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        this.ngOnChanges();
        if ($event) {
            $event.source.reset();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
            this.dashboard.emitChange(this);
            this.changeEnd.emit(this);
        }
    }
    ngOnDestroy() {
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        this.removeSelfFromDashboard();
    }
    removeSelfFromDashboard() {
        const i = this.dashboard.children.indexOf(this);
        if (i >= 0) {
            this.dashboard.children.splice(i, 1);
        }
    }
    getOrder() {
        return `${Math.round((this.y + (this.x + 1) / 100) * 100)}`;
    }
    childInView(event, observer) {
        if (event.isIntersecting) {
            observer.unobserve(event.target);
            return true;
        }
        return false;
    }
}
DashboardChildComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-dashboard-child',
                template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <div class=\"optionsBtn dropdown\" dropdown container=\"body\" placement=\"bottom right\">\n          <a\n            title=\"{{ 'Settings' | translate }}\"\n            href=\"\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </a>\n          <ul\n            class=\"dropdown-menu dropdown-menu-right\"\n            style=\"right:-1px;\"\n            *dropdownMenu\n          >\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n",
                host: {
                    class: 'dashboard-grid-child'
                }
            },] }
];
DashboardChildComponent.ctorParameters = () => [
    { type: DashboardComponent },
    { type: DomSanitizer },
    { type: ElementRef }
];
DashboardChildComponent.propDecorators = {
    actions: [{ type: ContentChildren, args: [DashboardChildActionComponent,] }],
    x: [{ type: Input }],
    y: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input }],
    margin: [{ type: Input }],
    isFrozen: [{ type: Input }],
    useIntersection: [{ type: Input }],
    changeStart: [{ type: Output }],
    changeEnd: [{ type: Output }],
    class: [{ type: Input }],
    inlineStyle: [{ type: HostBinding, args: ['attr.style',] }]
};
//# sourceMappingURL=data:application/json;base64,