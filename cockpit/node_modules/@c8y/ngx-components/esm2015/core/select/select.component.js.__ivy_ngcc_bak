import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { gettext } from '../i18n/gettext';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild, ContentChildren } from '@angular/core';
import { ListItemComponent } from '../list-group/list-item.component';
export class SelectComponent {
    constructor() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.disableApplyOnNoSelection = false;
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    preventClick(evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    }
    isOpenChange(isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    }
    outterSelected(item) {
        const { selected } = this;
        let isSelected = () => false;
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = (i) => selected.indexOf(i) > -1;
        }
        return isSelected(item);
    }
    isSelected(item) {
        return this.itemsSelected.has(item);
    }
    isAllItemsSelected() {
        return this.itemsSelected.size === this.items.length;
    }
    isAllFilteredSelected() {
        return this.itemsSelected.size === this.filteredItems.length;
    }
    isNoItemSelected() {
        return !this.itemsSelected.size;
    }
    applyChanges() {
        const selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    }
    selectAll(checked) {
        this.filteredItems.forEach(item => this.onChangeItem(checked, item));
    }
    ngOnInit() {
        if (this.updateItems) {
            this.updateItems.subscribe(() => {
                this.updateSelected();
                this.updateLabel();
                this.showAllLabel = this.isAllItemsSelected();
            });
        }
    }
    onChangeItem(checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(({ name }) => search.test(name));
        }
        else {
            this.filteredItems = this.items;
        }
    }
    getSelectAllToggleStatus() {
        const label = this.getLabel();
        const checked = this.isAllSelected();
        const indeterminate = !checked && this.itemsSelected.size > 0;
        return { label, checked, indeterminate };
    }
    ngOnChanges(changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    }
    ngOnDestroy() {
        if (this.updateItems && !this.updateItems.closed) {
            this.updateItems.unsubscribe();
        }
    }
    updateLabel() {
        const outterSelected = this.items.filter(i => this.outterSelected(i));
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(({ name }) => name).join(', ');
        }
    }
    updateSelected() {
        const { itemsSelected, items } = this;
        itemsSelected.clear();
        items.forEach(item => {
            if (this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    }
    isAllSelected() {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    }
    getLabel() {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    }
}
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-select',
                template: "<div\n  class=\"c8y-child-assets-selector dropdown fit-w\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n  c8yDropdownDirection\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <ng-content select=\"c8y-li\"></ng-content>\n    <ng-container *ngIf=\"liChildren.length === 0\">\n      <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n        <div class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Filter' | translate }}\u2026\"\n            (keyup)=\"updateFiltered($event.target.value)\"\n            [(ngModel)]=\"searchFilter\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!textFilter\"></i>\n            <i c8yIcon=\"times\" class=\"text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n          </span>\n        </div>\n      </li>\n\n      <li class=\"multiselect-item\">\n        <label\n          [title]=\"getSelectAllToggleStatus().label | translate\"\n          class=\"c8y-checkbox input-sm\"\n          ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"getSelectAllToggleStatus().checked\"\n            (change)=\"selectAll($event.target.checked)\"\n            [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n            class=\"m-t-0\"\n          />\n          <span></span>\n          <span class=\"label-text\">\n            {{ getSelectAllToggleStatus().label | translate }}\n          </span>\n        </label>\n      </li>\n\n      <li class=\"multiselect-item-container\">\n        <ul class=\"list-unstyled\">\n          <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n            <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isSelected(item)\"\n                (change)=\"onChangeItem($event.target.checked, item)\"\n                class=\"m-t-0\"\n              />\n              <span></span>\n              <span class=\"label-text\">\n                {{ item.name | translate }}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </li>\n      <li class=\"divider\"></li>\n      <li class=\"bg-white\">\n        <button\n          title=\"{{ applyLabel | translate }}\"\n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"disableApplyOnNoSelection && isNoItemSelected()\"\n          (click)=\"applyChanges()\"\n        >\n          {{ applyLabel | translate }}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            },] }
];
SelectComponent.propDecorators = {
    placeholder: [{ type: Input }],
    selectedLabel: [{ type: Input }],
    applyLabel: [{ type: Input }],
    items: [{ type: Input }],
    selected: [{ type: Input }],
    updateItems: [{ type: Input }],
    disableApplyOnNoSelection: [{ type: Input }],
    onChange: [{ type: Output }],
    dropdown: [{ type: ViewChild, args: [BsDropdownDirective, { static: false },] }],
    liChildren: [{ type: ContentChildren, args: [ListItemComponent,] }],
    preventClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,