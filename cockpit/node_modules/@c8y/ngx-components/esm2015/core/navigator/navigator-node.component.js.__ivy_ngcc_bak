// tslint:disable-next-line:max-line-length
import { Component, ComponentFactoryResolver, Input, ViewChild, ViewChildren, ViewContainerRef, Output, EventEmitter } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { NavigatorIconComponent } from './navigator-icon.component';
import { NavigatorService } from './navigator.service';
import { PopoverConfirmComponent } from '../modal/popover-confirm.component';
/**
 * Navigator node renderer.
 */
export class NavigatorNodeComponent {
    constructor(componentFactoryResolver, navigator) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.navigator = navigator;
        /**
         * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
         *
         * The type of event depends on where you click on the navigator node:
         * * clicking the icon will broadcast the event "icon",
         * * clicking the expander will broadcast the event "expander",
         * * clicking the label will broadcast the event "link".
         */
        this.nodeClick = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        this.childrenNodes.forEach(n => (n.parentNode = this));
        this.viewInitTimeout = setTimeout(() => {
            this.updateIcon();
            this.openOnFirstUrl();
            this.expandParentIfActive();
            this.node.confirm = this.confirm;
        });
    }
    /**
     * Expands the navigator node when the URL matches the path provided in the node.
     */
    openOnFirstUrl() {
        if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
            this.expandCollapse(true);
        }
    }
    /**
     * Returns the expander title.
     */
    get expandTitle() {
        return !this.node.open ? 'Expand' : 'Collapse';
    }
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from = 'link', $event) {
        let open;
        switch (from) {
            case "expander" /* EXPANDER */:
                if ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                }
                open = !this.node.open;
                break;
            case "icon" /* ICON */:
            case "link" /* LINK */:
                open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
                break;
        }
        this.handleExpandCollapse(open, from, $event);
        this.nodeClick.emit(from);
    }
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {boolean} recursive Open or close the children.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open, recursive, forNode = {}) {
        this.node.open = open;
        if (recursive) {
            this.childrenNodes.forEach(n => n.expandCollapse(open, recursive));
        }
        forNode.open = open;
        this.node.click(forNode);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        if (this.node) {
            this.node.destroy();
        }
    }
    handleExpandCollapse(open, from, $event) {
        if (open === this.node.open ||
            (this.node.path && !open && from !== "expander" /* EXPANDER */)) {
            return;
        }
        this.expandCollapse(open, false, { [from]: true, $event });
    }
    expandParentIfActive() {
        if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
            this.parentNode.expandCollapse(true);
        }
    }
    updateIcon() {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    }
    updateIconComponent() {
        let componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        const iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        const componentRef = this.iconSlot.createComponent(iconComponentFactory);
        componentRef.instance.node = this.node;
    }
    updateIconTemplate() {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate);
    }
}
NavigatorNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-navigator-node-display',
                template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [attr.id]=\"isRoot ? node.id : undefined\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open && node.hasChildren, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node-display\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node-display>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div>\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
            },] }
];
NavigatorNodeComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: NavigatorService }
];
NavigatorNodeComponent.propDecorators = {
    iconSlot: [{ type: ViewChild, args: ['icon', { read: ViewContainerRef, static: false },] }],
    node: [{ type: Input }],
    isRoot: [{ type: Input }],
    routerLinkActive: [{ type: ViewChild, args: [RouterLinkActive, { static: false },] }],
    childrenNodes: [{ type: ViewChildren, args: [NavigatorNodeComponent,] }],
    nodeClick: [{ type: Output }],
    confirm: [{ type: ViewChild, args: [PopoverConfirmComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9uYXZpZ2F0b3IvbmF2aWdhdG9yLW5vZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQztBQUMzQyxPQUFPLEVBQ0wsU0FBUyxFQUNULHdCQUF3QixFQUN4QixLQUFLLEVBRUwsU0FBUyxFQUNULFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsTUFBTSxFQUNOLFlBQVksRUFFYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQVE3RTs7R0FFRztBQUtILE1BQU0sT0FBTyxzQkFBc0I7SUFnRGpDLFlBQ1Usd0JBQWtELEVBQ2xELFNBQTJCO1FBRDNCLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUF4QnJDOzs7Ozs7O1dBT0c7UUFDTyxjQUFTLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7SUFpQjVELENBQUM7SUFFSjs7T0FFRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FB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QUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7bUJBSzNELEtBQUs7cUJBS0wsS0FBSzsrQkFLTCxTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzRCQUs3QyxZQUFZLFNBQUMsc0JBQXNCO3dCQVVuQyxNQUFNO3NCQUtOLFNBQVMsU0FBQyx1QkFBdUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgSW5wdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVmlld0NoaWxkLFxuICBWaWV3Q2hpbGRyZW4sXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rQWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE5hdmlnYXRvckljb25Db21wb25lbnQgfSBmcm9tICcuL25hdmlnYXRvci1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYXZpZ2F0b3JOb2RlLCBDbGlja09wdGlvbnMgfSBmcm9tICcuL25hdmlnYXRvci1ub2RlJztcbmltcG9ydCB7IE5hdmlnYXRvclNlcnZpY2UgfSBmcm9tICcuL25hdmlnYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvcG92ZXJDb25maXJtQ29tcG9uZW50IH0gZnJvbSAnLi4vbW9kYWwvcG9wb3Zlci1jb25maXJtLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIENsaWNrRXZlbnRTb3VyY2Uge1xuICBJQ09OID0gJ2ljb24nLFxuICBFWFBBTkRFUiA9ICdleHBhbmRlcicsXG4gIExJTksgPSAnbGluaydcbn1cblxuLyoqXG4gKiBOYXZpZ2F0b3Igbm9kZSByZW5kZXJlci5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW5hdmlnYXRvci1ub2RlLWRpc3BsYXknLFxuICB0ZW1wbGF0ZVVybDogJy4vbmF2aWdhdG9yLW5vZGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE5hdmlnYXRvck5vZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZCgnaWNvbicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZSB9KSBpY29uU2xvdDogVmlld0NvbnRhaW5lclJlZjtcblxuICAvKipcbiAgICogTmF2aWdhdG9yIG5vZGUuXG4gICAqL1xuICBASW5wdXQoKSBub2RlOiBOYXZpZ2F0b3JOb2RlO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5hdmlnYXRvciBub2RlIGlzIGEgcm9vdCBub2RlICh0b3Agbm9kZSBpbiB0aGUgaGllcmFyY2h5KS5cbiAgICovXG4gIEBJbnB1dCgpIGlzUm9vdDogYm9vbGVhbjtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZChSb3V0ZXJMaW5rQWN0aXZlLCB7IHN0YXRpYzogZmFsc2UgfSkgcm91dGVyTGlua0FjdGl2ZTogUm91dGVyTGlua0FjdGl2ZTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZHJlbihOYXZpZ2F0b3JOb2RlQ29tcG9uZW50KSBjaGlsZHJlbk5vZGVzOiBRdWVyeUxpc3Q8TmF2aWdhdG9yTm9kZUNvbXBvbmVudD47XG5cbiAgLyoqXG4gICAqIEV2ZW50IGVtaXR0ZXIgcmVzcG9uc2libGUgZm9yIGJyb2FkY2FzdGluZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBldmVudHM6IFwiaWNvblwiLCBcImV4cGFuZGVyXCIgb3IgXCJsaW5rXCIgYXMgc3RyaW5nIHZhbHVlLlxuICAgKlxuICAgKiBUaGUgdHlwZSBvZiBldmVudCBkZXBlbmRzIG9uIHdoZXJlIHlvdSBjbGljayBvbiB0aGUgbmF2aWdhdG9yIG5vZGU6XG4gICAqICogY2xpY2tpbmcgdGhlIGljb24gd2lsbCBicm9hZGNhc3QgdGhlIGV2ZW50IFwiaWNvblwiLFxuICAgKiAqIGNsaWNraW5nIHRoZSBleHBhbmRlciB3aWxsIGJyb2FkY2FzdCB0aGUgZXZlbnQgXCJleHBhbmRlclwiLFxuICAgKiAqIGNsaWNraW5nIHRoZSBsYWJlbCB3aWxsIGJyb2FkY2FzdCB0aGUgZXZlbnQgXCJsaW5rXCIuXG4gICAqL1xuICBAT3V0cHV0KCkgbm9kZUNsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZChQb3BvdmVyQ29uZmlybUNvbXBvbmVudCwgeyBzdGF0aWM6IGZhbHNlIH0pIGNvbmZpcm06IFBvcG92ZXJDb25maXJtQ29tcG9uZW50O1xuXG4gIC8qKlxuICAgKiBQYXJlbnQgbm9kZSByZW5kZXJlci5cbiAgICovXG4gIHBhcmVudE5vZGU6IE5hdmlnYXRvck5vZGVDb21wb25lbnQ7XG5cbiAgcHJpdmF0ZSB2aWV3SW5pdFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIG5hdmlnYXRvcjogTmF2aWdhdG9yU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmNoaWxkcmVuTm9kZXMuZm9yRWFjaChuID0+IChuLnBhcmVudE5vZGUgPSB0aGlzKSk7XG4gICAgdGhpcy52aWV3SW5pdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgICAgdGhpcy5vcGVuT25GaXJzdFVybCgpO1xuICAgICAgdGhpcy5leHBhbmRQYXJlbnRJZkFjdGl2ZSgpO1xuICAgICAgdGhpcy5ub2RlLmNvbmZpcm0gPSB0aGlzLmNvbmZpcm07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyB0aGUgbmF2aWdhdG9yIG5vZGUgd2hlbiB0aGUgVVJMIG1hdGNoZXMgdGhlIHBhdGggcHJvdmlkZWQgaW4gdGhlIG5vZGUuXG4gICAqL1xuICBvcGVuT25GaXJzdFVybCgpIHtcbiAgICBpZiAodGhpcy5uYXZpZ2F0b3Iub3Blbk9uRmlyc3RVcmwodGhpcy5ub2RlKSAmJiAhdGhpcy5ub2RlLm9wZW4pIHtcbiAgICAgIHRoaXMuZXhwYW5kQ29sbGFwc2UodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGV4cGFuZGVyIHRpdGxlLlxuICAgKi9cbiAgZ2V0IGV4cGFuZFRpdGxlKCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlLm9wZW4gPyAnRXhwYW5kJyA6ICdDb2xsYXBzZSc7XG4gIH1cblxuICAvKipcbiAgICogQ2xpY2sgZXZlbnQgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZyb20gU291cmNlIG9mIHRoZSBjbGljayBldmVudC5cbiAgICogQHBhcmFtIGV2ZW50IERPTSBldmVudC5cbiAgICovXG4gIGNsaWNrKGZyb206ICdpY29uJyB8ICdleHBhbmRlcicgfCAnbGluaycgPSAnbGluaycsICRldmVudD86IE1vdXNlRXZlbnQpIHtcbiAgICBsZXQgb3BlbjogYm9vbGVhbjtcblxuICAgIHN3aXRjaCAoZnJvbSkge1xuICAgICAgY2FzZSBDbGlja0V2ZW50U291cmNlLkVYUEFOREVSOlxuICAgICAgICBpZiAoJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIG9wZW4gPSAhdGhpcy5ub2RlLm9wZW47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDbGlja0V2ZW50U291cmNlLklDT046XG4gICAgICBjYXNlIENsaWNrRXZlbnRTb3VyY2UuTElOSzpcbiAgICAgICAgb3BlbiA9IHRoaXMucm91dGVyTGlua0FjdGl2ZSAmJiB0aGlzLnJvdXRlckxpbmtBY3RpdmUuaXNBY3RpdmUgPyB0cnVlIDogIXRoaXMubm9kZS5vcGVuO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVFeHBhbmRDb2xsYXBzZShvcGVuLCBmcm9tLCAkZXZlbnQpO1xuICAgIHRoaXMubm9kZUNsaWNrLmVtaXQoZnJvbSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyBvciBjb2xsYXBzZXMgdGhlIG5hdmlnYXRvciBub2RlIGFuZCBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbiBPcGVuIG9yIGNsb3NlIHRoZSBub2RlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY3Vyc2l2ZSBPcGVuIG9yIGNsb3NlIHRoZSBjaGlsZHJlbi5cbiAgICogQHBhcmFtIHtDbGlja09wdGlvbnN9IGZvck5vZGUgQ2xpY2sgb3B0aW9ucy5cbiAgICovXG4gIGV4cGFuZENvbGxhcHNlKG9wZW4sIHJlY3Vyc2l2ZT8sIGZvck5vZGU6IENsaWNrT3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5ub2RlLm9wZW4gPSBvcGVuO1xuICAgIGlmIChyZWN1cnNpdmUpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW5Ob2Rlcy5mb3JFYWNoKG4gPT4gbi5leHBhbmRDb2xsYXBzZShvcGVuLCByZWN1cnNpdmUpKTtcbiAgICB9XG4gICAgZm9yTm9kZS5vcGVuID0gb3BlbjtcbiAgICB0aGlzLm5vZGUuY2xpY2soZm9yTm9kZSk7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudmlld0luaXRUaW1lb3V0KTtcblxuICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVFeHBhbmRDb2xsYXBzZShvcGVuLCBmcm9tLCAkZXZlbnQpIHtcbiAgICBpZiAoXG4gICAgICBvcGVuID09PSB0aGlzLm5vZGUub3BlbiB8fFxuICAgICAgKHRoaXMubm9kZS5wYXRoICYmICFvcGVuICYmIGZyb20gIT09IENsaWNrRXZlbnRTb3VyY2UuRVhQQU5ERVIpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZXhwYW5kQ29sbGFwc2Uob3BlbiwgZmFsc2UsIHsgW2Zyb21dOiB0cnVlLCAkZXZlbnQgfSk7XG4gIH1cblxuICBwcml2YXRlIGV4cGFuZFBhcmVudElmQWN0aXZlKCkge1xuICAgIGlmICh0aGlzLnJvdXRlckxpbmtBY3RpdmUgJiYgdGhpcy5yb3V0ZXJMaW5rQWN0aXZlLmlzQWN0aXZlICYmIHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgdGhpcy5wYXJlbnROb2RlLmV4cGFuZENvbGxhcHNlKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSWNvbigpIHtcbiAgICBpZiAodGhpcy5ub2RlLmljb25UZW1wbGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGVJY29uVGVtcGxhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVJY29uQ29tcG9uZW50KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVJY29uQ29tcG9uZW50KCkge1xuICAgIGxldCBjb21wb25lbnRUeXBlID0gTmF2aWdhdG9ySWNvbkNvbXBvbmVudDtcbiAgICBpZiAodGhpcy5ub2RlICYmIHRoaXMubm9kZS5pY29uQ29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnRUeXBlID0gdGhpcy5ub2RlLmljb25Db21wb25lbnQ7XG4gICAgfVxuICAgIHRoaXMuaWNvblNsb3QuY2xlYXIoKTtcbiAgICBjb25zdCBpY29uQ29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgY29tcG9uZW50VHlwZVxuICAgICk7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5pY29uU2xvdC5jcmVhdGVDb21wb25lbnQoaWNvbkNvbXBvbmVudEZhY3RvcnkpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5ub2RlID0gdGhpcy5ub2RlO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVJY29uVGVtcGxhdGUoKSB7XG4gICAgdGhpcy5pY29uU2xvdC5jbGVhcigpO1xuICAgIHRoaXMuaWNvblNsb3QuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMubm9kZS5pY29uVGVtcGxhdGUpO1xuICB9XG59XG4iXX0=