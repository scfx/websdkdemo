import { Component, ElementRef, NgZone } from '@angular/core';
import { HeaderService } from '../header.service';
import { debounceTime, map, filter } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../header.service';
import * as ɵngcc2 from '../../common/outlet.directive';

function TitleOutletComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 2);
} }
export class TitleOutletComponent {
    constructor(headerService, element, zone) {
        this.headerService = headerService;
        this.element = element;
        this.zone = zone;
        this.title = undefined;
        this.pageTitleUpdate = true;
        const title$ = this.headerService.map(state => state.title);
        title$.subscribe(title => (this.title = title));
        const pageTitleUpdate$ = this.headerService.map(state => state.pageTitleUpdate);
        pageTitleUpdate$.subscribe(pageTitleUpdate => (this.pageTitleUpdate = pageTitleUpdate));
        this.zone.runOutsideAngular(() => {
            this.headerService.state$.pipe(debounceTime(100), filter(state => state.pageTitleUpdate), debounceTime(100), map(() => this.element.nativeElement.querySelector('h1')), filter(el => el !== null), map(el => el.innerText), filter(Boolean))
                .subscribe((title) => headerService.changePageTitle(title));
        });
    }
}
TitleOutletComponent.ɵfac = function TitleOutletComponent_Factory(t) { return new (t || TitleOutletComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HeaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TitleOutletComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TitleOutletComponent, selectors: [["c8y-title-outlet"]], decls: 2, vars: 1, consts: [[1, "c8y-ui-title"], ["class", "title", 4, "c8yOutlet"], [1, "title"]], template: function TitleOutletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TitleOutletComponent_div_1_Template, 1, 0, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("c8yOutlet", ctx.title);
    } }, directives: [ɵngcc2.OutletDirective], encapsulation: 2 });
TitleOutletComponent.ctorParameters = () => [
    { type: HeaderService },
    { type: ElementRef },
    { type: NgZone }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TitleOutletComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-title-outlet',
                template: "<div class=\"c8y-ui-title\">\n  <div class=\"title\" *c8yOutlet=\"title\"></div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.HeaderService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9oZWFkZXIvdGl0bGUvdGl0bGUtb3V0bGV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQU0zRCxNQUFNLE9BQU8sb0JBQW9CO0FBQ2pDLElBR0UsWUFDVSxhQUE0QixFQUM1QixPQUFtQixFQUNuQixJQUFZO0FBQ3JCLFFBSFMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUM3QixZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUFDcEIsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUN4QixRQVBFLFVBQUssR0FBRyxTQUFTLENBQUM7QUFDcEIsUUFBRSxvQkFBZSxHQUFZLElBQUksQ0FBQztBQUNsQyxRQU1JLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hFLFFBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3BELFFBQ0ksTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNwRixRQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQzVGLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7QUFDckMsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzVCLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUN0QyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDekQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QixpQkFBUyxTQUFTLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1RSxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7Z0RBL0JDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsa0JBQWtCLGtCQUM1QixzR0FBNEMsY0FDN0M7Ozs7Ozs7O21FQUNJO0FBQUM7QUFDVSxZQVJQLGFBQWE7QUFBSSxZQUROLFVBQVU7QUFBSSxZQUFGLE1BQU07QUFBRzs7Ozs7OztvSUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhlYWRlclNlcnZpY2UgfSBmcm9tICcuLi9oZWFkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIG1hcCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdGl0bGUtb3V0bGV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RpdGxlLW91dGxldC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGl0bGVPdXRsZXRDb21wb25lbnQge1xuICB0aXRsZSA9IHVuZGVmaW5lZDtcbiAgcGFnZVRpdGxlVXBkYXRlOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGhlYWRlclNlcnZpY2U6IEhlYWRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgem9uZTogTmdab25lXG4gICkge1xuICAgIGNvbnN0IHRpdGxlJCA9IHRoaXMuaGVhZGVyU2VydmljZS5tYXAoc3RhdGUgPT4gc3RhdGUudGl0bGUpO1xuICAgIHRpdGxlJC5zdWJzY3JpYmUodGl0bGUgPT4gKHRoaXMudGl0bGUgPSB0aXRsZSkpO1xuXG4gICAgY29uc3QgcGFnZVRpdGxlVXBkYXRlJCA9IHRoaXMuaGVhZGVyU2VydmljZS5tYXAoc3RhdGUgPT4gc3RhdGUucGFnZVRpdGxlVXBkYXRlKTtcbiAgICBwYWdlVGl0bGVVcGRhdGUkLnN1YnNjcmliZShwYWdlVGl0bGVVcGRhdGUgPT4gKHRoaXMucGFnZVRpdGxlVXBkYXRlID0gcGFnZVRpdGxlVXBkYXRlKSk7XG5cbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5oZWFkZXJTZXJ2aWNlLnN0YXRlJC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoMTAwKSxcbiAgICAgICAgZmlsdGVyKHN0YXRlID0+IHN0YXRlLnBhZ2VUaXRsZVVwZGF0ZSksXG4gICAgICAgIGRlYm91bmNlVGltZSgxMDApLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignaDEnKSksXG4gICAgICAgIGZpbHRlcihlbCA9PiBlbCAhPT0gbnVsbCksXG4gICAgICAgIG1hcChlbCA9PiBlbC5pbm5lclRleHQpLFxuICAgICAgICBmaWx0ZXIoQm9vbGVhbikpXG4gICAgICAgIC5zdWJzY3JpYmUoKHRpdGxlOiBzdHJpbmcpID0+IGhlYWRlclNlcnZpY2UuY2hhbmdlUGFnZVRpdGxlKHRpdGxlKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==