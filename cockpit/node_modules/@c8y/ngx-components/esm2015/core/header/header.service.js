import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map, combineLatest, delay, debounceTime } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { StateService } from '../common/state-service.abstract';
import { NavigatorService } from '../navigator/navigator.service';
import { HumanizeAppNamePipe } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../navigator/navigator.service";
import * as i2 from "../common/options.service";
import * as i3 from "../common/humanize-app-name.pipe";
/**
 * A service which defines header functions.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../navigator/navigator.service';
import * as ɵngcc2 from '../common/options.service';
import * as ɵngcc3 from '../common';
export class HeaderService extends StateService {
    constructor(navigatorService, options, humanizeAppName) {
        super();
        this.navigatorService = navigatorService;
        this.options = options;
        this.humanizeAppName = humanizeAppName;
        this.headerOpen = false;
        this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        this.hasItemsInNavigator$ = this.navigatorService.items$.pipe(delay(this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), map(({ length }) => !!length), distinctUntilChanged());
        this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            }
        });
        this.title = undefined;
        this.header$ = this.map((header) => header);
        this.navigatorOpen$ = this.map(({ nav }) => nav.open).pipe(combineLatest(this.hasItemsInNavigator$), map(([open, hasItems]) => open && hasItems));
        const titleReference = document.querySelector('title');
        const isGlobalTitleValid = (!!options.globalTitle && typeof options.globalTitle === 'string' && options.globalTitle.length > 0);
        this.title = {
            elementRef: titleReference,
            titleSuffix: isGlobalTitleValid ? `${options.globalTitle} - ${options.name}` : options.name
        };
        this.humanizeAppName.transform(options.name)
            .subscribe(nameTranslated => {
            this.title.titleSuffix = isGlobalTitleValid ? `${options.globalTitle} - ${nameTranslated}` : nameTranslated;
        });
    }
    get state() {
        return this.state$.value;
    }
    get navigatorHiddenOnStartup() {
        return this.options.hideNavigator;
    }
    get largeWidth() {
        return document.documentElement.clientWidth > 1200;
    }
    get shouldToggle() {
        return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
    }
    /**
     * Toggles the main header menu in mobile view.
     */
    toggle() {
        this.headerOpen = !this.headerOpen;
    }
    /**
     * Toggles the navigator open status.
     */
    toggleNavigator() {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    }
    /**
     * Force to close the navigator.
     */
    closeNavigator() {
        this.state.nav.open = false;
        this.emitNewState();
    }
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    configNavigator(config = {}) {
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    }
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    changeTitle(newTitle, pageTitleUpdate = true) {
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    }
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    changePageTitle(newTitle) {
        this.title.elementRef.innerText = newTitle
            ? `${newTitle} / ${this.title.titleSuffix}`
            : `${this.title.titleSuffix}`;
    }
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    verifyIfNavOpen() {
        this.hasItemsInNavigator$
            .pipe(debounceTime(300))
            .subscribe(hasItems => hasItems && this.shouldToggle && this.toggleNavigator());
    }
    shouldShowBreadcrumbs() {
        return this.options.breadcrumbs;
    }
}
HeaderService.ɵfac = function HeaderService_Factory(t) { return new (t || HeaderService)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc2.OptionsService), ɵngcc0.ɵɵinject(ɵngcc3.HumanizeAppNamePipe)); };
HeaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i2.OptionsService), i0.ɵɵinject(i3.HumanizeAppNamePipe)); }, token: HeaderService, providedIn: "root" });
HeaderService.ctorParameters = () => [
    { type: NavigatorService },
    { type: OptionsService },
    { type: HumanizeAppNamePipe }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc2.OptionsService }, { type: ɵngcc3.HumanizeAppNamePipe }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,