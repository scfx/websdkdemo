import { Component, Input } from '@angular/core';
import { find, keys, get, assign, isEmpty } from 'lodash-es';
import { OptionsService } from '../../common/options.service';
export class AppIconComponent {
    constructor(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    ngOnInit() {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        const iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.mapFontAwesomeToDelightIcons(this.model.appIcon),
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(c => !!c);
        this.model.appNameAbbr = this.name.substr(0, 2);
    }
    findStaticIcon() {
        const contextPath = this.contextPath || this.name;
        const appContextPathNormalized = find(keys(this.c8yAppIconsList), cp => {
            return contextPath.indexOf(cp) > -1;
        });
        const appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? `c8y-icon-${appIcon}` : undefined;
    }
    iconFromAppDefinition() {
        const app = this.app || this.options;
        const iconClassProperty = ['icon', 'class'];
        const iconClass = get(app, ['manifest', ...iconClassProperty]) || get(app, iconClassProperty);
        return iconClass;
    }
    iconUrlFromAppDefinition() {
        const app = this.app || this.options;
        const iconUrlProperty = ['icon', 'url'];
        const iconUrl = get(app, ['manifest', ...iconUrlProperty]) || get(app, iconUrlProperty);
        return iconUrl;
    }
    mapFontAwesomeToDelightIcons(iconClasses) {
        if (!iconClasses) {
            return;
        }
        const regex = /fa-/gi;
        return iconClasses.replace(regex, 'dlt-c8y-icon-');
    }
}
AppIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-app-icon',
                template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
                host: { class: 'c8y-app-icon' }
            },] }
];
AppIconComponent.ctorParameters = () => [
    { type: OptionsService }
];
AppIconComponent.propDecorators = {
    contextPath: [{ type: Input }],
    name: [{ type: Input }],
    app: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9oZWFkZXIvYXBwbGljYXRpb24vYXBwLWljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQU85RCxNQUFNLE9BQU8sZ0JBQWdCO0lBK0IzQixZQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTdCbEMsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUczQixVQUFLLEdBQUc7WUFDTixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBRU0sb0JBQWUsR0FBRztZQUN4QixnQkFBZ0IsRUFBRSxtQkFBbUI7WUFDckMsbUJBQW1CLEVBQUUsbUJBQW1CO1lBQ3hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtZQUNyQyxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7UUFFTSxVQUFLLEdBQVksS0FBSyxDQUFDO1FBRXZCLHFCQUFnQixHQUFHO1lBQ3pCLG1CQUFtQixFQUFFLFdBQVc7WUFDaEMsaUJBQWlCLEVBQUUsU0FBUztZQUM1QixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQztJQUU0QyxDQUFDO0lBRS9DLFFBQVE7UUFDTixJ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SUFDckQsQ0FBQzs7O1lBcEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsOExBQXdDO2dCQUN4QyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFO2FBQ2hDOzs7WUFOUSxjQUFjOzs7MEJBUXBCLEtBQUs7bUJBQ0wsS0FBSztrQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaW5kLCBrZXlzLCBnZXQsIGFzc2lnbiwgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYXBwLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7IGNsYXNzOiAnYzh5LWFwcC1pY29uJyB9XG59KVxuZXhwb3J0IGNsYXNzIEFwcEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBjb250ZXh0UGF0aDogc3RyaW5nO1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgYXBwOiBhbnk7XG5cbiAgbW9kZWwgPSB7XG4gICAgYXBwSWNvbjogJycsXG4gICAgc2hvd0ljb246IHRydWUsXG4gICAgaWNvbkNsYXNzOiBbJ2M4eS1pY29uJ10sXG4gICAgYXBwTmFtZUFiYnI6ICcnLFxuICAgIGljb25TdHlsZToge31cbiAgfTtcblxuICBwcml2YXRlIGM4eUFwcEljb25zTGlzdCA9IHtcbiAgICBhbmFseXRpY3NidWlsZGVyOiAnYW5hbHl0aWNzLWJ1aWxkZXInLFxuICAgICdhbmFseXRpY3MtYnVpbGRlcic6ICdhbmFseXRpY3MtYnVpbGRlcicsXG4gICAgY29ja3BpdDogJ2NvY2twaXQnLFxuICAgIGRldmljZW1hbmFnZW1lbnQ6ICdkZXZpY2UtbWFuYWdlbWVudCcsXG4gICAgYWRtaW5pc3RyYXRpb246ICdhZG1pbmlzdHJhdGlvbicsXG4gICAgYXBhbWFlcGw6ICdhcGFtYS1lcGwnXG4gIH07XG5cbiAgcHJpdmF0ZSB3aGl0ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgZGVmYXVsdEljb25TdHlsZSA9IHtcbiAgICAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JyxcbiAgICAnYmFja2dyb3VuZC1zaXplJzogJ2NvbnRhaW4nLFxuICAgIGhlaWdodDogJzM2cHgnLFxuICAgIHdpZHRoOiAnMzZweCdcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnNTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubW9kZWwuYXBwSWNvbiA9IHRoaXMuaWNvbkZyb21BcHBEZWZpbml0aW9uKCkgfHwgdGhpcy5maW5kU3RhdGljSWNvbigpO1xuICAgIGNvbnN0IGljb25VcmwgPSB0aGlzLmljb25VcmxGcm9tQXBwRGVmaW5pdGlvbigpO1xuICAgIGlmIChpY29uVXJsKSB7XG4gICAgICB0aGlzLm1vZGVsLmljb25TdHlsZSA9IGFzc2lnbih0aGlzLmRlZmF1bHRJY29uU3R5bGUsIHtcbiAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBpY29uVXJsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbC5zaG93SWNvbiA9ICEhdGhpcy5tb2RlbC5hcHBJY29uIHx8ICFpc0VtcHR5KHRoaXMubW9kZWwuaWNvblN0eWxlKTtcbiAgICB0aGlzLm1vZGVsLmljb25DbGFzcyA9IFtcbiAgICAgICdjOHktaWNvbicsXG4gICAgICB0aGlzLm1hcEZvbnRBd2Vzb21lVG9EZWxpZ2h0SWNvbnModGhpcy5tb2RlbC5hcHBJY29uKSxcbiAgICAgIHRoaXMud2hpdGUgPyAnYzh5LWljb24td2hpdGUnIDogJ2M4eS1pY29uLWR1b2NvbG9yJ1xuICAgIF0uZmlsdGVyKGMgPT4gISFjKTtcbiAgICB0aGlzLm1vZGVsLmFwcE5hbWVBYmJyID0gdGhpcy5uYW1lLnN1YnN0cigwLCAyKTtcbiAgfVxuXG4gIHByaXZhdGUgZmluZFN0YXRpY0ljb24oKSB7XG4gICAgY29uc3QgY29udGV4dFBhdGggPSB0aGlzLmNvbnRleHRQYXRoIHx8IHRoaXMubmFtZTtcbiAgICBjb25zdCBhcHBDb250ZXh0UGF0aE5vcm1hbGl6ZWQgPSBmaW5kKGtleXModGhpcy5jOHlBcHBJY29uc0xpc3QpLCBjcCA9PiB7XG4gICAgICByZXR1cm4gY29udGV4dFBhdGguaW5kZXhPZihjcCkgPiAtMTtcbiAgICB9KTtcbiAgICBjb25zdCBhcHBJY29uID0gdGhpcy5jOHlBcHBJY29uc0xpc3RbYXBwQ29udGV4dFBhdGhOb3JtYWxpemVkXTtcbiAgICByZXR1cm4gYXBwSWNvbiA/IGBjOHktaWNvbi0ke2FwcEljb259YCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgaWNvbkZyb21BcHBEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwIHx8IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpY29uQ2xhc3NQcm9wZXJ0eSA9IFsnaWNvbicsICdjbGFzcyddO1xuICAgIGNvbnN0IGljb25DbGFzcyA9IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uQ2xhc3NQcm9wZXJ0eV0pIHx8ICBnZXQoYXBwLCBpY29uQ2xhc3NQcm9wZXJ0eSk7XG4gICAgcmV0dXJuIGljb25DbGFzcztcbiAgfVxuXG4gIHByaXZhdGUgaWNvblVybEZyb21BcHBEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwIHx8IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpY29uVXJsUHJvcGVydHkgPSBbJ2ljb24nLCAndXJsJ107XG4gICAgY29uc3QgaWNvblVybCA9IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uVXJsUHJvcGVydHldKSB8fCBnZXQoYXBwLCBpY29uVXJsUHJvcGVydHkpO1xuICAgIHJldHVybiBpY29uVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBGb250QXdlc29tZVRvRGVsaWdodEljb25zKGljb25DbGFzc2VzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWljb25DbGFzc2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlZ2V4ID0gL2ZhLS9naTtcbiAgICByZXR1cm4gaWNvbkNsYXNzZXMucmVwbGFjZShyZWdleCwgJ2RsdC1jOHktaWNvbi0nKTtcbiAgfVxufVxuIl19