import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map, combineLatest, delay, debounceTime } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { StateService } from '../common/state-service.abstract';
import { NavigatorService } from '../navigator/navigator.service';
import { HumanizeAppNamePipe } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../navigator/navigator.service";
import * as i2 from "../common/options.service";
import * as i3 from "../common/humanize-app-name.pipe";
/**
 * A service which defines header functions.
 */
export class HeaderService extends StateService {
    constructor(navigatorService, options, humanizeAppName) {
        super();
        this.navigatorService = navigatorService;
        this.options = options;
        this.humanizeAppName = humanizeAppName;
        this.headerOpen = false;
        this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        this.hasItemsInNavigator$ = this.navigatorService.items$.pipe(delay(this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), map(({ length }) => !!length), distinctUntilChanged());
        this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            }
        });
        this.title = undefined;
        this.header$ = this.map((header) => header);
        this.navigatorOpen$ = this.map(({ nav }) => nav.open).pipe(combineLatest(this.hasItemsInNavigator$), map(([open, hasItems]) => open && hasItems));
        const titleReference = document.querySelector('title');
        const isGlobalTitleValid = (!!options.globalTitle && typeof options.globalTitle === 'string' && options.globalTitle.length > 0);
        this.title = {
            elementRef: titleReference,
            titleSuffix: isGlobalTitleValid ? `${options.globalTitle} - ${options.name}` : options.name
        };
        this.humanizeAppName.transform(options.name)
            .subscribe(nameTranslated => {
            this.title.titleSuffix = isGlobalTitleValid ? `${options.globalTitle} - ${nameTranslated}` : nameTranslated;
        });
    }
    get state() {
        return this.state$.value;
    }
    get navigatorHiddenOnStartup() {
        return this.options.hideNavigator;
    }
    get largeWidth() {
        return document.documentElement.clientWidth > 1200;
    }
    get shouldToggle() {
        return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
    }
    /**
     * Toggles the main header menu in mobile view.
     */
    toggle() {
        this.headerOpen = !this.headerOpen;
    }
    /**
     * Toggles the navigator open status.
     */
    toggleNavigator() {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    }
    /**
     * Force to close the navigator.
     */
    closeNavigator() {
        this.state.nav.open = false;
        this.emitNewState();
    }
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    configNavigator(config = {}) {
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    }
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    changeTitle(newTitle, pageTitleUpdate = true) {
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    }
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    changePageTitle(newTitle) {
        this.title.elementRef.innerText = newTitle
            ? `${newTitle} / ${this.title.titleSuffix}`
            : `${this.title.titleSuffix}`;
    }
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    verifyIfNavOpen() {
        this.hasItemsInNavigator$
            .pipe(debounceTime(300))
            .subscribe(hasItems => hasItems && this.shouldToggle && this.toggleNavigator());
    }
    shouldShowBreadcrumbs() {
        return this.options.breadcrumbs;
    }
}
HeaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i2.OptionsService), i0.ɵɵinject(i3.HumanizeAppNamePipe)); }, token: HeaderService, providedIn: "root" });
HeaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
HeaderService.ctorParameters = () => [
    { type: NavigatorService },
    { type: OptionsService },
    { type: HumanizeAppNamePipe }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2hlYWRlci9oZWFkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDOzs7OztBQUVoRDs7R0FFRztBQUlILE1BQU0sT0FBTyxhQUFjLFNBQVEsWUFBWTtJQXFCN0MsWUFDVSxnQkFBa0MsRUFDbEMsT0FBdUIsRUFDdkIsZUFBb0M7UUFFNUMsS0FBSyxFQUFFLENBQUM7UUFKQSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQXZCOUMsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUdWLDZDQUF3QyxHQUFHLElBQUksQ0FBQztRQUV6RCx5QkFBb0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDdEQsS0FBSyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxFQUNwRCxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQzdCLG9CQUFv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dCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIGNvbWJpbmVMYXRlc3QsIGRlbGF5LCBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXRlLXNlcnZpY2UuYWJzdHJhY3QnO1xuaW1wb3J0IHsgTmF2aWdhdG9yU2VydmljZSB9IGZyb20gJy4uL25hdmlnYXRvci9uYXZpZ2F0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuL2hlYWRlci5tb2RlbCc7XG5pbXBvcnQgeyBIdW1hbml6ZUFwcE5hbWVQaXBlIH0gZnJvbSAnLi4vY29tbW9uJztcblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggZGVmaW5lcyBoZWFkZXIgZnVuY3Rpb25zLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBIZWFkZXJTZXJ2aWNlIGV4dGVuZHMgU3RhdGVTZXJ2aWNlIHtcbiAgaGVhZGVyT3BlbiA9IGZhbHNlO1xuICBoZWFkZXIkOiBPYnNlcnZhYmxlPEhlYWRlcj47XG4gIG5hdmlnYXRvck9wZW4kOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICByZWFkb25seSBERUxBWV9UT19BVk9JRF9GTElDS0VSSU5HX09OX0FTWU5DX05PREVTID0gMTAwMDtcblxuICBoYXNJdGVtc0luTmF2aWdhdG9yJCA9IHRoaXMubmF2aWdhdG9yU2VydmljZS5pdGVtcyQucGlwZShcbiAgICBkZWxheSh0aGlzLkRFTEFZX1RPX0FWT0lEX0ZMSUNLRVJJTkdfT05fQVNZTkNfTk9ERVMpLFxuICAgIG1hcCgoeyBsZW5ndGggfSkgPT4gISFsZW5ndGgpLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgKTtcblxuICBzdGF0ZSQ6IEJlaGF2aW9yU3ViamVjdDxIZWFkZXI+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxIZWFkZXI+KHtcbiAgICB0aXRsZTogdW5kZWZpbmVkLFxuICAgIG5hdjoge1xuICAgICAgb3BlbjogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIHRpdGxlID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmF2aWdhdG9yU2VydmljZTogTmF2aWdhdG9yU2VydmljZSxcbiAgICBwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgaHVtYW5pemVBcHBOYW1lOiBIdW1hbml6ZUFwcE5hbWVQaXBlLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaGVhZGVyJCA9IHRoaXMubWFwKChoZWFkZXI6IEhlYWRlcikgPT4gaGVhZGVyKTtcbiAgICB0aGlzLm5hdmlnYXRvck9wZW4kID0gdGhpcy5tYXAoKHsgbmF2IH0pID0+IG5hdi5vcGVuKS5waXBlKFxuICAgICAgY29tYmluZUxhdGVzdCh0aGlzLmhhc0l0ZW1zSW5OYXZpZ2F0b3IkKSxcbiAgICAgIG1hcCgoW29wZW4sIGhhc0l0ZW1zXSkgPT4gb3BlbiAmJiBoYXNJdGVtcylcbiAgICApO1xuICAgIGNvbnN0IHRpdGxlUmVmZXJlbmNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGl0bGUnKTtcblxuICAgIGNvbnN0IGlzR2xvYmFsVGl0bGVWYWxpZCA9ICghIW9wdGlvbnMuZ2xvYmFsVGl0bGUgJiYgdHlwZW9mIG9wdGlvbnMuZ2xvYmFsVGl0bGUgPT09ICdzdHJpbmcnICYmIG9wdGlvbnMuZ2xvYmFsVGl0bGUubGVuZ3RoID4gMCk7XG5cbiAgICB0aGlzLnRpdGxlID0ge1xuICAgICAgZWxlbWVudFJlZjogdGl0bGVSZWZlcmVuY2UsXG4gICAgICB0aXRsZVN1ZmZpeDogaXNHbG9iYWxUaXRsZVZhbGlkID8gYCR7b3B0aW9ucy5nbG9iYWxUaXRsZX0gLSAke29wdGlvbnMubmFtZX1gIDogb3B0aW9ucy5uYW1lXG4gICAgfTtcbiAgICB0aGlzLmh1bWFuaXplQXBwTmFtZS50cmFuc2Zvcm0ob3B0aW9ucy5uYW1lKVxuICAgICAgLnN1YnNjcmliZSggbmFtZVRyYW5zbGF0ZWQgPT4ge1xuICAgICAgdGhpcy50aXRsZS50aXRsZVN1ZmZpeCA9IGlzR2xvYmFsVGl0bGVWYWxpZCA/IGAke29wdGlvbnMuZ2xvYmFsVGl0bGV9IC0gJHtuYW1lVHJhbnNsYXRlZH1gIDogbmFtZVRyYW5zbGF0ZWQ7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICBnZXQgbmF2aWdhdG9ySGlkZGVuT25TdGFydHVwKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaGlkZU5hdmlnYXRvcjtcbiAgfVxuXG4gIGdldCBsYXJnZVdpZHRoKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiAxMjAwO1xuICB9XG5cbiAgZ2V0IHNob3VsZFRvZ2dsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5sYXJnZVdpZHRoICYmICF0aGlzLm5hdmlnYXRvckhpZGRlbk9uU3RhcnR1cCAmJiAhdGhpcy5zdGF0ZS5uYXYub3BlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBtYWluIGhlYWRlciBtZW51IGluIG1vYmlsZSB2aWV3LlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuaGVhZGVyT3BlbiA9ICF0aGlzLmhlYWRlck9wZW47XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgbmF2aWdhdG9yIG9wZW4gc3RhdHVzLlxuICAgKi9cbiAgdG9nZ2xlTmF2aWdhdG9yKCkge1xuICAgIHRoaXMuc3RhdGUubmF2Lm9wZW4gPSAhdGhpcy5zdGF0ZS5uYXYub3BlbjtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlIHRvIGNsb3NlIHRoZSBuYXZpZ2F0b3IuXG4gICAqL1xuICBjbG9zZU5hdmlnYXRvcigpIHtcbiAgICB0aGlzLnN0YXRlLm5hdi5vcGVuID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGNvbmZpZyBPYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllczpcbiAgICogLSBvcGVuOiBCb29sZWFuXG4gICAqL1xuICBjb25maWdOYXZpZ2F0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuc3RhdGUubmF2ID0gT2JqZWN0LmFzc2lnbih0aGlzLnN0YXRlLm5hdiwgY29uZmlnKTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgYXBwbGljYXRpb24gdGl0bGUuXG4gICAqIEBwYXJhbSBuZXdUaXRsZSBUaGUgbmV3IHRpdGxlIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGNoYW5nZVRpdGxlKG5ld1RpdGxlPzogYW55LCBwYWdlVGl0bGVVcGRhdGU6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgdGhpcy5zdGF0ZS50aXRsZSA9IG5ld1RpdGxlO1xuICAgIHRoaXMuc3RhdGUucGFnZVRpdGxlVXBkYXRlID0gcGFnZVRpdGxlVXBkYXRlO1xuXG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIHBhZ2UgdGl0bGUuXG4gICAqIEBwYXJhbSBuZXdUaXRsZSBUaGUgbmV3IHRpdGxlIG9mIHRoZSBwYWdlLlxuICAgKi9cbiAgY2hhbmdlUGFnZVRpdGxlKG5ld1RpdGxlPzogc3RyaW5nKSB7XG4gICAgdGhpcy50aXRsZS5lbGVtZW50UmVmLmlubmVyVGV4dCA9IG5ld1RpdGxlXG4gICAgICA/IGAke25ld1RpdGxlfSAvICR7dGhpcy50aXRsZS50aXRsZVN1ZmZpeH1gXG4gICAgICA6IGAke3RoaXMudGl0bGUudGl0bGVTdWZmaXh9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZHMgY2hlY2tzIGlmIHRoZSBuYXZpZ2F0b3IgdG9nZ2xlcyBvbiBzdGFydHVwXG4gICAqIG9yIGlmIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIG5hdmlnYXRvciBub2RlLlxuICAgKiBEZWxheSBvZiAzMDBtcyBpcyBpbnRlbmRlZCBmb3IgYW5pbWF0aW9uIHB1cnBvc2UuXG4gICAqL1xuICB2ZXJpZnlJZk5hdk9wZW4oKSB7XG4gICAgdGhpcy5oYXNJdGVtc0luTmF2aWdhdG9yJFxuICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKDMwMCkpXG4gICAgICAuc3Vic2NyaWJlKGhhc0l0ZW1zID0+IGhhc0l0ZW1zICYmIHRoaXMuc2hvdWxkVG9nZ2xlICYmIHRoaXMudG9nZ2xlTmF2aWdhdG9yKCkpO1xuICB9XG5cbiAgc2hvdWxkU2hvd0JyZWFkY3J1bWJzKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYnJlYWRjcnVtYnM7XG4gIH1cbn1cbiJdfQ==