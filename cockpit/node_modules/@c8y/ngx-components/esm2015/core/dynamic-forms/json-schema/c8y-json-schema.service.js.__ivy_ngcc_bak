import { Injectable } from '@angular/core';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
import * as i0 from "@angular/core";
export class C8yJSONSchema extends FormlyJsonschema {
    toFieldConfig(schema, options) {
        const config = super.toFieldConfig(schema, this.c8yOptions((options || {}).map));
        if (Array.isArray(config.fieldGroup)) {
            config.fieldGroup.forEach((field) => {
                if (field.type === 'array' && field.templateOptions.required) {
                    field.fieldArray.templateOptions.required = true;
                }
            });
        }
        return config;
    }
    c8yOptions(map) {
        return {
            map(mappedField, mapSource) {
                let result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = Object.assign(Object.assign({}, result), { defaultValue: mapSource.const, templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = Object.assign(Object.assign({}, result), { templateOptions: Object.assign(Object.assign({}, result.templateOptions), { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = Object.assign(Object.assign({}, result), { type: 'radio' });
                }
                /** fields with `contentMediaType` or `contentEncoding` are represented as file inputs */
                if (mapSource.contentMediaType || mapSource.contentEncoding) {
                    result = Object.assign(Object.assign({}, result), { type: 'file', templateOptions: Object.assign(Object.assign({}, result.templateOptions), { accept: mapSource.contentMediaType, maxAllowedFiles: 1, contentEncoding: mapSource.contentEncoding }) });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    }
}
C8yJSONSchema.ɵprov = i0.ɵɵdefineInjectable({ factory: function C8yJSONSchema_Factory() { return new C8yJSONSchema(); }, token: C8yJSONSchema, providedIn: "root" });
C8yJSONSchema.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzh5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb3JlL2R5bmFtaWMtZm9ybXMvanNvbi1zY2hlbWEvYzh5LWpzb24tc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLGFBQWMsU0FBUSxnQkFBZ0I7SUFDakQsYUFBYSxDQUFDLE1BQW1CLEVBQUUsT0FBYTtRQUM5QyxNQUFNLE1BQU0sR0FBc0IsS0FBSyxDQUFDLGFBQWEsQ0FDbkQsTUFBTSxFQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3JDLENBQUM7UUFDRixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBd0IsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFO29CQUM1RCxLQUFLLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUNsRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sVUFBVSxDQUNoQixHQUFrRjtRQUVsRixPQUFPO1lBQ0wsR0FBRyxDQUFDLFdBQThCLEVBQUUsU0FBc0I7Z0JBQ3hELElBQUksTUFBTSxHQUFzQixXQUFXLENBQUM7Z0JBRTVDLGtEQUFrRDtnQkFDbEQsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO29CQUNuQixNQUFNLG1DQUNELE1BQU0sS0FDVCxZQUFZLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFDN0IsZUFBZSxrQ0FBTyxNQUFNLENBQUMsZUFBZSxLQUFFLElBQUksRUFBRSxRQUFRLE1BQzdELENBQUM7aUJBQ0g7Z0JBRUQsc0RBQXNEO2dCQUN0RCxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUU7b0JBQ3ZCLE1BQU0sbUNBQ0QsTUFBTSxLQUNULGVBQWUsa0NBQU8sTUFBTSxDQUFDLGVBQWUsS0FBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLE1BQ3BGLENBQUM7aUJBQ0g7Z0JBRUQsNENBQTRDO2dCQUM1QyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUU7b0JBQ3RCLE1BQU0sbUNBQ0QsTUFBTSxLQUNULGVBQWUsa0NBQ1YsTUFBTSxDQUFDLGVBQWUsS0FDekIsV0FBVyxFQUFHLFNBQVMsQ0FBQyxRQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFFM0QsQ0FBQztpQkFDSDtnQkFFRCxxREFBcUQ7Z0JBQ3JELElBQUksU0FBUyxDQUFDLElBQUksRUFBRTtvQkFDbEIsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsSUFBSSxFQUFFLE9BQU8sR0FDZCxDQUFDO2lCQUNIO2dCQUVELHlGQUF5RjtnQkFDekYsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLElBQUksU0FBUyxDQUFDLGVBQWUsRUFBRTtvQkFDM0QsTUFBTSxtQ0FDRCxNQUFNLEtBQ1QsSUFBSSxFQUFFLE1BQU0sRUFDWixlQUFlLGtDQUNWLE1BQU0sQ0FBQyxlQUFlLEtBQ3pCLE1BQU0sRUFBRSxTQUFTLENBQUMsZ0JBQWdCLEVBQ2xDLGVBQWUsRUFBRSxDQUFDLEVBQ2xCLGVBQWUsRUFBRSxTQUFTLENBQUMsZUFBZSxNQUU3QyxDQUFDO2lCQUNIO2dCQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDL0MsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDOzs7O1lBL0VGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlKc29uc2NoZW1hIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZS9qc29uLXNjaGVtYSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hNyB9IGZyb20gJ2pzb24tc2NoZW1hJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQzh5SlNPTlNjaGVtYSBleHRlbmRzIEZvcm1seUpzb25zY2hlbWEge1xuICB0b0ZpZWxkQ29uZmlnKHNjaGVtYTogSlNPTlNjaGVtYTcsIG9wdGlvbnM/OiBhbnkpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgY29uc3QgY29uZmlnOiBGb3JtbHlGaWVsZENvbmZpZyA9IHN1cGVyLnRvRmllbGRDb25maWcoXG4gICAgICBzY2hlbWEsXG4gICAgICB0aGlzLmM4eU9wdGlvbnMoKG9wdGlvbnMgfHwge30pLm1hcClcbiAgICApO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy5maWVsZEdyb3VwKSkge1xuICAgICAgY29uZmlnLmZpZWxkR3JvdXAuZm9yRWFjaCgoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSA9PiB7XG4gICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnYXJyYXknICYmIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5yZXF1aXJlZCkge1xuICAgICAgICAgIGZpZWxkLmZpZWxkQXJyYXkudGVtcGxhdGVPcHRpb25zLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBwcml2YXRlIGM4eU9wdGlvbnMoXG4gICAgbWFwOiAobWFwcGVkRmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBtYXBTb3VyY2U6IEpTT05TY2hlbWE3KSA9PiBGb3JtbHlGaWVsZENvbmZpZ1xuICApIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFwKG1hcHBlZEZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgbWFwU291cmNlOiBKU09OU2NoZW1hNykge1xuICAgICAgICBsZXQgcmVzdWx0OiBGb3JtbHlGaWVsZENvbmZpZyA9IG1hcHBlZEZpZWxkO1xuXG4gICAgICAgIC8qKiBgY29uc3RgIHR5cGUgaXMgcmVwcmVzZW50ZWQgYXMgaGlkZGVuIGlucHV0ICovXG4gICAgICAgIGlmIChtYXBTb3VyY2UuY29uc3QpIHtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IG1hcFNvdXJjZS5jb25zdCxcbiAgICAgICAgICAgIHRlbXBsYXRlT3B0aW9uczogeyAuLi5yZXN1bHQudGVtcGxhdGVPcHRpb25zLCB0eXBlOiAnaGlkZGVuJyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBgd3JpdGVPbmx5YCBmaWVsZCByZXByZXNlbnRlZCBhcyBwYXNzd29yZCBpbnB1dCAqL1xuICAgICAgICBpZiAobWFwU291cmNlLndyaXRlT25seSkge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIHRlbXBsYXRlT3B0aW9uczogeyAuLi5yZXN1bHQudGVtcGxhdGVPcHRpb25zLCB0eXBlOiAncGFzc3dvcmQnLCBhdXRvY29tcGxldGU6ICdvZmYnIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIGBleGFtcGxlc2AgdmFsdWVzIHVzZWQgYXMgcGxhY2Vob2xkZXIgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS5leGFtcGxlcykge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICAgICAgICAuLi5yZXN1bHQudGVtcGxhdGVPcHRpb25zLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogKG1hcFNvdXJjZS5leGFtcGxlcyBhcyBzdHJpbmdbXSkuam9pbignLCAnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogYGVudW1gIGZpZWxkIHJlcHJlc2VudGVkIGFzIHJhZGlvIGJ1dHRvbiBncm91cCAqL1xuICAgICAgICBpZiAobWFwU291cmNlLmVudW0pIHtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB0eXBlOiAncmFkaW8nXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBmaWVsZHMgd2l0aCBgY29udGVudE1lZGlhVHlwZWAgb3IgYGNvbnRlbnRFbmNvZGluZ2AgYXJlIHJlcHJlc2VudGVkIGFzIGZpbGUgaW5wdXRzICovXG4gICAgICAgIGlmIChtYXBTb3VyY2UuY29udGVudE1lZGlhVHlwZSB8fCBtYXBTb3VyY2UuY29udGVudEVuY29kaW5nKSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgIC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICAgIGFjY2VwdDogbWFwU291cmNlLmNvbnRlbnRNZWRpYVR5cGUsXG4gICAgICAgICAgICAgIG1heEFsbG93ZWRGaWxlczogMSxcbiAgICAgICAgICAgICAgY29udGVudEVuY29kaW5nOiBtYXBTb3VyY2UuY29udGVudEVuY29kaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXAgPyBtYXAocmVzdWx0LCBtYXBTb3VyY2UpIDogcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==