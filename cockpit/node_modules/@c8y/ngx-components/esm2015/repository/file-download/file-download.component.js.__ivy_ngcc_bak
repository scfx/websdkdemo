import { __awaiter, __decorate } from "tslib";
import { AlertService } from '@c8y/ngx-components';
import { Component, Input } from '@angular/core';
import { RepositoryService } from './../repository.service';
import { memoize } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { InventoryBinaryService } from '@c8y/client';
import { LinkRenderType } from './link-render-type.enum';
export class FileDownloadComponent {
    constructor(repositoryService, inventoryBinaryService, alertService) {
        this.repositoryService = repositoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.alertService = alertService;
        this.linkRenderType = LinkRenderType;
        this.isDownloading = false;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    determineBehavior() {
        let result;
        if (this.inventoryBinaryService.getIdFromUrl(this.url)) {
            result = LinkRenderType.DOWNLOAD;
        }
        else if (this.url.match(/\/\//g)) {
            result = LinkRenderType.LINK;
        }
        else {
            result = LinkRenderType.TEXTONLY;
        }
        return result;
    }
    downloadFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isDownloading = true;
                const binary = yield this.repositoryService.getBinaryFile(this.url, {
                    allowExternal: false
                });
                this.isDownloading = false;
                saveAs(binary);
            }
            catch (ex) {
                this.isDownloading = false;
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
}
FileDownloadComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-file-download',
                template: "<a\n  *ngIf=\"determineBehavior() === linkRenderType.LINK\"\n  href=\"{{ url }}\"\n  class=\"pointer\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  {{ getBinaryName$(url) | async }}\n</a>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.TEXTONLY\">{{\n  getBinaryName$(url) | async\n}}</span>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.DOWNLOAD\">\n  <a *ngIf=\"!isDownloading\" class=\"pointer\" (click)=\"downloadFile()\">\n    {{ getBinaryName$(url) | async }}\n  </a>\n\n  <span *ngIf=\"isDownloading\">\n    <i c8yIcon=\"spinner\" class=\"icon-spin\"></i> {{ 'Downloading\u2026' | translate }}\n  </span>\n</span>\n"
            },] }
];
FileDownloadComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: InventoryBinaryService },
    { type: AlertService }
];
FileDownloadComponent.propDecorators = {
    url: [{ type: Input }]
};
__decorate([
    memoize()
], FileDownloadComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize()
], FileDownloadComponent.prototype, "determineBehavior", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1kb3dubG9hZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9yZXBvc2l0b3J5L2ZpbGUtZG93bmxvYWQvZmlsZS1kb3dubG9hZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTXpELE1BQU0sT0FBTyxxQkFBcUI7SUFJaEMsWUFDVSxpQkFBb0MsRUFDcEMsc0JBQThDLEVBQzlDLFlBQTBCO1FBRjFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUxwQyxtQkFBYyxHQUFHLGNBQWMsQ0FBQztRQUNoQyxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQUtuQixDQUFDO0lBR0osY0FBYyxDQUFDLFNBQVM7UUFDdEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFHRCxpQkFBaUI7UUFDZixJQUFJLE1BQXNCLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0RCxNQUFNLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUNsQzthQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7U0FDOUI7YUFBTTtZQUNMLE1BQU0sR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVLLFlBQVk7O1lBQ2hCLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLE1BQU0sTUFBTSxHQUFTLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUN4RSxhQUFhLEVBQUUsS0FBSztpQkFDckIsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDaEI7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxFQUFFLEVBQUU7b0JBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDeEM7YUFDRjtRQUNILENBQUM7S0FBQTs7O1lBOUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix5cEJBQTZDO2FBQzlDOzs7WUFUUSxpQkFBaUI7WUFHakIsc0JBQXNCO1lBTHRCLFlBQVk7OztrQkFhbEIsS0FBSzs7QUFVTjtJQURDLE9BQU8sRUFBRTsyREFHVDtBQUdEO0lBREMsT0FBTyxFQUFFOzhEQVdUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VydmljZSB9IGZyb20gJy4vLi4vcmVwb3NpdG9yeS5zZXJ2aWNlJztcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgSW52ZW50b3J5QmluYXJ5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IExpbmtSZW5kZXJUeXBlIH0gZnJvbSAnLi9saW5rLXJlbmRlci10eXBlLmVudW0nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZmlsZS1kb3dubG9hZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9maWxlLWRvd25sb2FkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWxlRG93bmxvYWRDb21wb25lbnQge1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcbiAgbGlua1JlbmRlclR5cGUgPSBMaW5rUmVuZGVyVHlwZTtcbiAgaXNEb3dubG9hZGluZyA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeUJpbmFyeVNlcnZpY2U6IEludmVudG9yeUJpbmFyeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgQG1lbW9pemUoKVxuICBnZXRCaW5hcnlOYW1lJChiaW5hcnlVcmwpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5nZXRCaW5hcnlOYW1lJChiaW5hcnlVcmwpO1xuICB9XG5cbiAgQG1lbW9pemUoKVxuICBkZXRlcm1pbmVCZWhhdmlvcigpOiBMaW5rUmVuZGVyVHlwZSB7XG4gICAgbGV0IHJlc3VsdDogTGlua1JlbmRlclR5cGU7XG4gICAgaWYgKHRoaXMuaW52ZW50b3J5QmluYXJ5U2VydmljZS5nZXRJZEZyb21VcmwodGhpcy51cmwpKSB7XG4gICAgICByZXN1bHQgPSBMaW5rUmVuZGVyVHlwZS5ET1dOTE9BRDtcbiAgICB9IGVsc2UgaWYgKHRoaXMudXJsLm1hdGNoKC9cXC9cXC8vZykpIHtcbiAgICAgIHJlc3VsdCA9IExpbmtSZW5kZXJUeXBlLkxJTks7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IExpbmtSZW5kZXJUeXBlLlRFWFRPTkxZO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXN5bmMgZG93bmxvYWRGaWxlKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgYmluYXJ5OiBGaWxlID0gYXdhaXQgdGhpcy5yZXBvc2l0b3J5U2VydmljZS5nZXRCaW5hcnlGaWxlKHRoaXMudXJsLCB7XG4gICAgICAgIGFsbG93RXh0ZXJuYWw6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IGZhbHNlO1xuICAgICAgc2F2ZUFzKGJpbmFyeSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IGZhbHNlO1xuICAgICAgaWYgKGV4KSB7XG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19