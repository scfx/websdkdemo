import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, OperationStatus } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
import { DeviceConfigurationOperation } from '../repository.model';
import { RepositoryService } from '../repository.service';
import { DeviceConfigurationService } from './device-configuration.service';
export class TextBasedConfigurationComponent {
    constructor(route, alertService, repositoryService, deviceConfigurationService, inventoryService) {
        this.route = route;
        this.alertService = alertService;
        this.repositoryService = repositoryService;
        this.deviceConfigurationService = deviceConfigurationService;
        this.inventoryService = inventoryService;
        this.reloadingConfig = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.load();
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            this.device = this.route.snapshot.parent.data.contextData;
            yield this.loadDevice();
            yield this.loadOperation();
            this.showTextBasedConfigReload = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.SEND_CONFIG]);
            this.showTextBasedConfigSave = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.CONFIG]);
            if (this.device.c8y_Configuration && this.device.c8y_Configuration.config) {
                this.config = this.device.c8y_Configuration.config;
            }
        });
    }
    loadOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = yield this.repositoryService.getLastConfigUpdateOperation(this.device.id);
            if (operation !== null) {
                this.reloadingConfig =
                    !!operation.c8y_SendConfiguration &&
                        (operation.status === OperationStatus.PENDING ||
                            operation.status === OperationStatus.EXECUTING);
                this.repositoryService.observeOperation(operation).subscribe((operationUpdate) => {
                    this.latestOperation = operationUpdate;
                });
            }
        });
    }
    get savingConfig() {
        return this.latestOperation
            ? !!this.latestOperation.c8y_Configuration &&
                (this.latestOperation.status === OperationStatus.PENDING ||
                    this.latestOperation.status === OperationStatus.EXECUTING)
            : false;
    }
    reloadConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloadingConfig = true;
            const operationCfg = yield this.repositoryService.createTextBasedConfigurationReloadOperation(this.device);
            try {
                this.repositoryService
                    .createObservedOperation(operationCfg)
                    .subscribe(operationUpdate => this.onOperationReloadSuccess(operationUpdate), operationUpdate => this.onOperationReloadError(operationUpdate), () => this.onOperationReloadComplete());
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    updateConfiguration(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const operationCfg = yield this.repositoryService.createTextBasedConfigurationUpdateOperation(this.device, config);
            try {
                this.repositoryService
                    .createObservedOperation(operationCfg)
                    .subscribe(operationUpdate => this.onOperationUpdateSuccess(operationUpdate), operationUpdate => this.onOperationUpdateError(operationUpdate), () => this.onOperationUpdateComplete());
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    onOperationReloadSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be reloaded.'));
        }
    }
    onOperationReloadError(operationUpdate) {
        this.latestOperation = operationUpdate;
        this.reloadingConfig = false;
    }
    onOperationReloadComplete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadDevice();
            this.config = this.device.c8y_Configuration.config;
            this.reloadingConfig = false;
        });
    }
    onOperationUpdateSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be updated.'));
        }
    }
    onOperationUpdateError(operationUpdate) {
        this.latestOperation = operationUpdate;
    }
    onOperationUpdateComplete() {
        this.device.c8y_Configuration.config = this.config;
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            this.device = (yield this.inventoryService.detail(this.device.id, {
                withChildren: false
            })).data;
        });
    }
}
TextBasedConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-text-based-configuration',
                template: "<div class=\"d-flex d-col fit-h\">\n  <fieldset class=\"card-block bg-gray-white fit-w\">\n    <div class=\"content-flex-50\">\n      <div class=\"flex-item-left d-flex\">\n        <button\n          title=\"{{ 'Get configuration from device' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm flex-item-v-center m-t-8 m-b-8\"\n          *ngIf=\"showTextBasedConfigReload\"\n          (click)=\"reloadConfiguration()\"\n          [disabled]=\"reloadingConfig || savingConfig\"\n        >\n          <i\n            c8yIcon=\"refresh\"\n            *ngIf=\"reloadingConfig\"\n            class=\"m-r-4\"\n            [ngClass]=\"{ 'icon-spin': reloadingConfig }\"\n          ></i>\n          <i c8yIcon=\"download\" *ngIf=\"!reloadingConfig\" class=\"m-r-4\"></i>\n\n          {{ 'Get configuration from device' | translate }}\n        </button>\n      </div>\n      <c8y-single-operation\n        *ngIf=\"latestOperation !== undefined\"\n        [operation]=\"latestOperation\"\n        class=\"flex-grow\"\n      ></c8y-single-operation>\n    </div>\n  </fieldset>\n  <div class=\"flex-grow\">\n    <textarea\n      [(ngModel)]=\"config\"\n      class=\"form-control fit-h p-r-16 p-l-16\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      c8y-spellcheck=\"false\"\n    ></textarea>\n  </div>\n  <div class=\"card-footer fit-w separator\" *ngIf=\"showTextBasedConfigSave\">\n    <button\n      type=\"button\"\n      id=\"send-config-btn\"\n      (click)=\"updateConfiguration(config)\"\n      [disabled]=\"reloadingConfig || savingConfig || !config\"\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': savingConfig }\"\n    >\n      <span title=\"{{ 'Send' | translate }}\" *ngIf=\"!savingConfig\">\n        {{ 'Send configuration to device' | translate }}\n      </span>\n      <span title=\"{{ 'Sending\u2026' | translate }}\" *ngIf=\"savingConfig\">\n        {{ 'Sending\u2026' | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n"
            },] }
];
TextBasedConfigurationComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService },
    { type: RepositoryService },
    { type: DeviceConfigurationService },
    { type: InventoryService }
];
//# sourceMappingURL=data:application/json;base64,