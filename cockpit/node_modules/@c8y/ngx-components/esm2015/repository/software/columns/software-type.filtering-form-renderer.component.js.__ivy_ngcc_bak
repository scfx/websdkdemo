import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { FilteringFormRendererContext, gettext, TypeaheadComponent } from '@c8y/ngx-components';
import { cloneDeep, uniqBy } from 'lodash-es';
import { BehaviorSubject, NEVER, pipe } from 'rxjs';
import { debounceTime, map, switchMap, tap } from 'rxjs/operators';
import { RepositoryType } from '../../repository.model';
import { RepositoryService } from '../../repository.service';
export class SoftwareTypeFilteringFormRendererComponent {
    constructor(context, changeDetectorRef, repositoryService, elementRef) {
        this.context = context;
        this.changeDetectorRef = changeDetectorRef;
        this.repositoryService = repositoryService;
        this.elementRef = elementRef;
        this.softwareWithType$ = NEVER;
        this.search$ = new BehaviorSubject(null);
        this.filterPipe = pipe(tap());
        this.typeaheadPlaceholder = gettext('Start typing to search, e.g. {{ example }}');
        this.queriesUtil = new QueriesUtil();
        this.softwareTypes = new Set();
        this.softwareWithType$ = this.search$.pipe(debounceTime(300), tap(() => this.softwareTypes.clear()), switchMap((searchString) => {
            let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);
            const filter = !!searchString
                ? {
                    softwareType: {
                        __eq: `*${searchString}*`
                    }
                }
                : {
                    __has: 'softwareType'
                };
            query = this.queriesUtil.addAndFilter(query, filter);
            return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {
                skipDefaultOrder: true,
                query,
                params: {
                    pageSize: 200
                }
            });
        }));
        this.filterPipe = pipe(map(this.removeDuplicatesBySoftwareType.bind(this)), tap(() => this.changeDetectorRef.detectChanges()));
    }
    onEnterKeyDown(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.context.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        this.selectedType = cloneDeep(column.externalFilterQuery || {});
    }
    ngAfterViewInit() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.typeahead) === null || _a === void 0 ? void 0 : _a.searchControl) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.focus();
        try {
            this.elementRef.nativeElement.parentElement.parentElement.style.overflow = 'visible';
        }
        catch (ex) {
            // intentionally empty
        }
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.selectedType
        });
    }
    removeDuplicatesBySoftwareType(list) {
        const uniqueBySoftwareType = uniqBy(list, 'softwareType').filter((sw) => !this.softwareTypes.has(sw.softwareType));
        uniqueBySoftwareType.forEach((sw) => this.softwareTypes.add(sw.softwareType));
        return uniqueBySoftwareType;
    }
}
SoftwareTypeFilteringFormRendererComponent.decorators = [
    { type: Component, args: [{
                template: "<c8y-form-group>\n  <label translate>Filter by software type</label>\n  <c8y-typeahead\n    [(ngModel)]=\"selectedType\"\n    name=\"softwareType\"\n    placeholder=\"{{ typeaheadPlaceholder | translate: { example: 'yum' } }}\"\n    displayProperty=\"softwareType\"\n    (onSearch)=\"search$.next($event)\"\n  >\n    <c8y-li\n      *c8yFor=\"let software of softwareWithType$; pipe: filterPipe; loadMore: 'auto'\"\n      class=\"p-l-8 p-r-8 c8y-list__item--link\"\n      (click)=\"\n        selectedType = software; typeahead.dropdown.hide(); changeDetectorRef.detectChanges()\n      \"\n      [active]=\"selectedType?.softwareType === software?.softwareType\"\n    >\n      <c8y-highlight\n        [text]=\"software?.softwareType || '--'\"\n        [pattern]=\"search$.value\"\n      ></c8y-highlight>\n    </c8y-li>\n  </c8y-typeahead>\n</c8y-form-group>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"context.resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
SoftwareTypeFilteringFormRendererComponent.ctorParameters = () => [
    { type: FilteringFormRendererContext },
    { type: ChangeDetectorRef },
    { type: RepositoryService },
    { type: ElementRef }
];
SoftwareTypeFilteringFormRendererComponent.propDecorators = {
    typeahead: [{ type: ViewChild, args: [TypeaheadComponent, { static: false },] }],
    onEnterKeyDown: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onEscapeKeyDown: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,