import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { gettext, NavigatorNode } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
export class RepositoryNavigationFactory {
    constructor() {
        this.navs = [];
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.navs.length === 0) {
                this.navs.push(new NavigatorNode({
                    label: gettext('Firmware repository'),
                    path: 'firmware',
                    icon: 'c8y-firmware',
                    parent: gettext('Management'),
                    priority: 1000
                }));
                this.navs.push(new NavigatorNode({
                    label: gettext('Software repository'),
                    path: 'software',
                    icon: 'c8y-tools',
                    parent: gettext('Management'),
                    priority: 900
                }));
                this.navs.push(new NavigatorNode({
                    label: gettext('Configuration repository'),
                    path: 'configuration',
                    icon: 'gears',
                    parent: gettext('Management'),
                    priority: 800
                }));
            }
            return this.navs;
        });
    }
}
RepositoryNavigationFactory.ɵfac = function RepositoryNavigationFactory_Factory(t) { return new (t || RepositoryNavigationFactory)(); };
RepositoryNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RepositoryNavigationFactory, factory: RepositoryNavigationFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RepositoryNavigationFactory, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS1uYXZpZ2F0aW9uLWZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS1uYXZpZ2F0aW9uLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0scUJBQXFCLENBQUM7O0FBR25GLE1BQU0sT0FBTywyQkFBMkI7QUFBRyxJQUQzQztBQUNFLFFBQ0EsU0FBSSxHQUFvQixFQUFFLENBQUM7QUFDN0IsSUFpQ0EsQ0FBQztBQUNELElBakNRLEdBQUc7QUFDWDtBQUVNLFlBRkYsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEMsZ0JBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxhQUFhLENBQUM7QUFDMUIsb0JBQVUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUMvQyxvQkFBVSxJQUFJLEVBQUUsVUFBVTtBQUMxQixvQkFBVSxJQUFJLEVBQUUsY0FBYztBQUM5QixvQkFBVSxNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUN2QyxvQkFBVSxRQUFRLEVBQUUsSUFBSTtBQUN4QixpQkFBUyxDQUFDLENBQ0gsQ0FBQztBQUNSLGdCQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNaLElBQUksYUFBYSxDQUFDO0FBQzFCLG9CQUFVLEtBQUssRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDL0Msb0JBQVUsSUFBSSxFQUFFLFVBQVU7QUFDMUIsb0JBQVUsSUFBSSxFQUFFLFdBQVc7QUFDM0Isb0JBQVUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDdkMsb0JBQVUsUUFBUSxFQUFFLEdBQUc7QUFDdkIsaUJBQVMsQ0FBQyxDQUNILENBQUM7QUFDUixnQkFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDWixJQUFJLGFBQWEsQ0FBQztBQUMxQixvQkFBVSxLQUFLLEVBQUUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBQ3BELG9CQUFVLElBQUksRUFBRSxlQUFlO0FBQy9CLG9CQUFVLElBQUksRUFBRSxPQUFPO0FBQ3ZCLG9CQUFVLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3ZDLG9CQUFVLFFBQVEsRUFBRSxHQUFHO0FBQ3ZCLGlCQUFTLENBQUMsQ0FDSCxDQUFDO0FBQ1IsYUFBSztBQUNMLFlBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JCLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDt1REFwQ0MsVUFBVTs7OztnREFDVDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlOYXZpZ2F0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIE5hdmlnYXRvck5vZGVGYWN0b3J5IHtcbiAgbmF2czogTmF2aWdhdG9yTm9kZVtdID0gW107XG5cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGlmICh0aGlzLm5hdnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLm5hdnMucHVzaChcbiAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdGaXJtd2FyZSByZXBvc2l0b3J5JyksXG4gICAgICAgICAgcGF0aDogJ2Zpcm13YXJlJyxcbiAgICAgICAgICBpY29uOiAnYzh5LWZpcm13YXJlJyxcbiAgICAgICAgICBwYXJlbnQ6IGdldHRleHQoJ01hbmFnZW1lbnQnKSxcbiAgICAgICAgICBwcmlvcml0eTogMTAwMFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMubmF2cy5wdXNoKFxuICAgICAgICBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NvZnR3YXJlIHJlcG9zaXRvcnknKSxcbiAgICAgICAgICBwYXRoOiAnc29mdHdhcmUnLFxuICAgICAgICAgIGljb246ICdjOHktdG9vbHMnLFxuICAgICAgICAgIHBhcmVudDogZ2V0dGV4dCgnTWFuYWdlbWVudCcpLFxuICAgICAgICAgIHByaW9yaXR5OiA5MDBcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLm5hdnMucHVzaChcbiAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdDb25maWd1cmF0aW9uIHJlcG9zaXRvcnknKSxcbiAgICAgICAgICBwYXRoOiAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICAgaWNvbjogJ2dlYXJzJyxcbiAgICAgICAgICBwYXJlbnQ6IGdldHRleHQoJ01hbmFnZW1lbnQnKSxcbiAgICAgICAgICBwcmlvcml0eTogODAwXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYXZzO1xuICB9XG59XG4iXX0=