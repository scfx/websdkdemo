import { Component, EventEmitter, Input, Output } from '@angular/core';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, combineLatest, from, of } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';
import { RepositoryService } from '../repository.service';
import { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';
import { RepositoryType } from './../repository.model';
export class InstalledSoftwareComponent {
    constructor(repository, bsModal) {
        this.repository = repository;
        this.bsModal = bsModal;
        this.changes = new EventEmitter();
        this.showSoftwareChanges = new EventEmitter();
        this.showFilter = false;
        this.supportsSoftwareOperations = false;
        this.textFilter$ = new BehaviorSubject('');
        this.softwareTypeFilter$ = new BehaviorSubject('');
        this.operationTypes = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];
        this.filterCriteria$ = combineLatest(this.textFilter$, this.softwareTypeFilter$).pipe(map(([textFilter, softwareTypeFilter]) => ({
            name: textFilter,
            softwareType: softwareTypeFilter
        })), map(filterCriteria => !filterCriteria.name && !filterCriteria.softwareType ? null : filterCriteria));
    }
    ngOnInit() {
        const supportedOperations = get(this.device, 'c8y_SupportedOperations', []);
        this.supportsSoftwareOperations = this.operationTypes.some(operationType => supportedOperations.indexOf(operationType) > -1);
    }
    installSoftware() {
        this.displaySoftwareSelectModal({
            title: gettext('Install software'),
            labels: { ok: gettext('Install') },
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: modal => this.getInstallableSoftwareListWithVersions$(modal.content.searchTerm)
        }).subscribe(softwareToInstall => {
            this.emitSoftwareInstall(softwareToInstall);
            this.showSoftwareChanges.emit();
        });
    }
    updateSoftware(softwareToRemove) {
        this.displaySoftwareSelectModal({
            title: gettext('Update software'),
            labels: { ok: gettext('Update') },
            showFilter: false,
            repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToRemove)
        }).subscribe(softwareToInstall => {
            this.emitSoftwareInstall(softwareToInstall);
            this.showSoftwareChanges.emit();
        });
    }
    removeSoftware(softwareToRemove) {
        this.emitSoftwareRemoval([softwareToRemove]);
    }
    getInstallableSoftwareListWithVersions$(searchTerm$) {
        const installedSoftwareNames = (this.softwareList || []).map(s => s.name);
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: this.deviceTypeQuery,
            partialName: searchTerm,
            params: { pageSize: 100 }
        })), map(({ data }) => data), map(softwareList => {
            return softwareList.filter(software => {
                return !installedSoftwareNames.includes(software.name);
            });
        }), map(softwareList => this.attachVersions(softwareList)), shareReplay(1));
    }
    getSingleSoftwareWithVersions$(software) {
        return from(this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: { name: software.name }
        })).pipe(map(({ data }) => data), map(softwareList => this.attachVersions(softwareList)), shareReplay(1));
    }
    attachVersions(softwareList) {
        softwareList.forEach(software => {
            software.versions = this.repository.listBaseVersions(software);
        });
        return softwareList;
    }
    displaySoftwareSelectModal(initialStateOverrides) {
        const initialState = Object.assign({ repositoryType: RepositoryType.SOFTWARE, subTitle: gettext('Available softwares matching the device type'), mode: ModalSelectionMode.MULTI, icon: 'c8y-tools', disableSelected: false, selected: this.softwareList }, initialStateOverrides);
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            class: 'modal-sm',
            initialState
        });
        if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ =
                initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        return modal.content.resultEmitter;
    }
    emitSoftwareInstall(items) {
        this.changes.emit(items.map(item => {
            return Object.assign(Object.assign({}, item), { action: 'install' });
        }));
    }
    emitSoftwareRemoval(items) {
        this.changes.emit(items.map(item => {
            return Object.assign(Object.assign({}, item), { action: 'delete' });
        }));
    }
}
InstalledSoftwareComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-installed-software',
                template: "<div class=\"d-flex d-col flex-grow\">\n  <div class=\"card-header large-padding separator sticky-top\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n  <div class=\"flex-grow\">\n    <fieldset\n      id=\"operation-block\"\n      *ngIf=\"deviceSoftwareChangesOperation\"\n      class=\"card-block large-padding bg-gray-lighter\"\n    >\n      <c8y-single-operation [operation]=\"deviceSoftwareChangesOperation\"></c8y-single-operation>\n    </fieldset>\n    <fieldset class=\"card-block large-padding overflow-visible\" *ngIf=\"showFilter\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              type=\"search\"\n              title=\"{{ 'Filter installed software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter installed software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                class=\"text-muted\"\n                c8yIcon=\"times\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-6\">\n          <c8y-software-type\n            [required]=\"false\"\n            [emitResultsOnly]=\"true\"\n            [showBtnInNotFoundMessage]=\"false\"\n            [allowFreeEntries]=\"false\"\n            [placeholder]=\"'Filter by software type\u2026' | translate\"\n            (onSelectSoftware)=\"softwareTypeFilter$.next($event?.softwareType)\"\n          ></c8y-software-type>\n        </div>\n      </div>\n    </fieldset>\n\n    <fieldset\n      id=\"software-list\"\n      class=\"flex-grow inner-scroll\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <!-- NOT EMPTY STATE -->\n      <c8y-device-software-list\n        [device]=\"device\"\n        [filterCriteria$]=\"filterCriteria$\"\n        [softwareList]=\"softwareList\"\n        [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n        (update)=\"updateSoftware($event)\"\n        (remove)=\"removeSoftware($event)\"\n        (onListEmpty)=\"showFilter = !$event\"\n        class=\"d-block p-l-16 p-r-16\"\n      >\n        <!-- EMPTY STATE -->\n        <div class=\"c8y-empty-state text-center m-t-16\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software installed.</strong> <br />\n            <small translate>Click below to install software into this device.</small>\n          </p>\n        </div>\n        <!-- NO SEARCH RESULTS STATE -->\n        <div class=\"c8y-empty-state c8y-no-results-state text-center m-t-16\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software matches your filter criteria.</strong> <br />\n            <small translate>Try changing your search criteria.</small>\n          </p>\n        </div>\n      </c8y-device-software-list>\n    </fieldset>\n  </div>\n  <!-- INSTALL SOFTWARE-->\n  <div\n    class=\"card-footer large-padding separator sticky-bottom d-flex j-c-between\"\n    [ngClass]=\"{ 'visible-sm visible-xs': !supportsSoftwareOperations }\"\n  >\n    <button\n      *ngIf=\"supportsSoftwareOperations\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n    <button\n      (click)=\"showSoftwareChanges.emit()\"\n      class=\"btn btn-clean text-primary visible-sm visible-xs\"\n      [title]=\"'Show &quot;Software changes&quot;' | translate\"\n    >\n      <span translate>Show \"Software changes\"</span>\n      <i c8yIcon=\"chevron-right\"></i>\n    </button>\n  </div>\n</div>\n"
            },] }
];
InstalledSoftwareComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: BsModalService }
];
InstalledSoftwareComponent.propDecorators = {
    device: [{ type: Input }],
    softwareList: [{ type: Input }],
    deviceSoftwareChanges: [{ type: Input }],
    deviceSoftwareChangesOperation: [{ type: Input }],
    deviceSoftwareChangesInProgress: [{ type: Input }],
    deviceTypeQuery: [{ type: Input }],
    changes: [{ type: Output }],
    showSoftwareChanges: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,