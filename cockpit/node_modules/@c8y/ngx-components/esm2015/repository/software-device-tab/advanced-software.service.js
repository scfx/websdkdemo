import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient, Service } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
export class AdvancedSoftwareService extends Service {
    constructor(client, applicationService) {
        super(client);
        this.applicationService = applicationService;
        this.baseUrl = 'service/advanced-software';
        this.listUrl = 'software';
        this.propertyName = 'softwareList';
    }
    list(filter = {}) {
        return super.list(filter);
    }
    isASMAvailable() {
        if (this.isAvailable === undefined) {
            this.isAvailable = this.applicationService
                .isAvailable(AdvancedSoftwareService.applicationName)
                .then(result => !!(result === null || result === void 0 ? void 0 : result.data));
        }
        return this.isAvailable;
    }
}
AdvancedSoftwareService.ɵfac = function AdvancedSoftwareService_Factory(t) { return new (t || AdvancedSoftwareService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.ApplicationService)); };
AdvancedSoftwareService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AdvancedSoftwareService, factory: AdvancedSoftwareService.ɵfac });
AdvancedSoftwareService.applicationName = 'advanced-software-mgmt';
AdvancedSoftwareService.ctorParameters = () => [
    { type: FetchClient },
    { type: ApplicationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdvancedSoftwareService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }, { type: ɵngcc1.ApplicationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWR2YW5jZWQtc29mdHdhcmUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcmVwb3NpdG9yeS9zb2Z0d2FyZS1kZXZpY2UtdGFiL2FkdmFuY2VkLXNvZnR3YXJlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUErQixPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7OztBQUdwRyxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsT0FBdUI7QUFDcEUsSUFRRSxZQUFZLE1BQW1CLEVBQVUsa0JBQXNDO0FBQ2pGLFFBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xCLFFBRjJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxRQU50RSxZQUFPLEdBQVcsMkJBQTJCLENBQUM7QUFDMUQsUUFBWSxZQUFPLEdBQVcsVUFBVSxDQUFDO0FBQ3pDLFFBQVksaUJBQVksR0FBRyxjQUFjLENBQUM7QUFDMUMsSUFLRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLENBQUMsU0FBaUIsRUFBRTtBQUFJLFFBQzFCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFDSCxJQUNFLGNBQWM7QUFBSyxRQUNqQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO0FBQ3hDLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCO0FBQ2hELGlCQUFTLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUM7QUFDN0QsaUJBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLElBQUksQ0FBQSxDQUFDLENBQUM7QUFDeEMsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNIOzttSkFBQztBQXpCeUIsdUNBQWUsR0FBRyx3QkFBd0IsQ0FBQyxBQURuRTtBQUFDO0VBREYsVUFBVSxaQUN5QyxZQUh2QixXQUFXO0FBQUksWUFBbkMsa0JBQWtCO0FBQUc7OztpSEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlLCBGZXRjaENsaWVudCwgSU1hbmFnZWRPYmplY3QsIElSZXN1bHRMaXN0LCBTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWR2YW5jZWRTb2Z0d2FyZVNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlPElNYW5hZ2VkT2JqZWN0PiB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFwcGxpY2F0aW9uTmFtZSA9ICdhZHZhbmNlZC1zb2Z0d2FyZS1tZ210JztcblxuICBwcm90ZWN0ZWQgYmFzZVVybDogc3RyaW5nID0gJ3NlcnZpY2UvYWR2YW5jZWQtc29mdHdhcmUnO1xuICBwcm90ZWN0ZWQgbGlzdFVybDogc3RyaW5nID0gJ3NvZnR3YXJlJztcbiAgcHJvdGVjdGVkIHByb3BlcnR5TmFtZSA9ICdzb2Z0d2FyZUxpc3QnO1xuXG4gIHByaXZhdGUgaXNBdmFpbGFibGU6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBGZXRjaENsaWVudCwgcHJpdmF0ZSBhcHBsaWNhdGlvblNlcnZpY2U6IEFwcGxpY2F0aW9uU2VydmljZSkge1xuICAgIHN1cGVyKGNsaWVudCk7XG4gIH1cblxuICBsaXN0KGZpbHRlcjogb2JqZWN0ID0ge30pOiBQcm9taXNlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj4ge1xuICAgIHJldHVybiBzdXBlci5saXN0KGZpbHRlcik7XG4gIH1cblxuICBpc0FTTUF2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAodGhpcy5pc0F2YWlsYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdGhpcy5hcHBsaWNhdGlvblNlcnZpY2VcbiAgICAgICAgLmlzQXZhaWxhYmxlKEFkdmFuY2VkU29mdHdhcmVTZXJ2aWNlLmFwcGxpY2F0aW9uTmFtZSlcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+ICEhcmVzdWx0Py5kYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pc0F2YWlsYWJsZTtcbiAgfVxufVxuIl19