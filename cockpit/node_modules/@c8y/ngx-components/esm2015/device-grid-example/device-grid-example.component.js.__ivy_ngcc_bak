import { Component } from '@angular/core';
import { DeviceGridService, CustomDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { gettext } from '@c8y/ngx-components';
import { find } from 'lodash-es';
export class DeviceGridExampleComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    getExampleWithStandardColumns() {
        const columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns
        };
    }
    getExampleWithStandardColumnsAndSavedFilteringSorting() {
        const columns = this.deviceGridService.getDefaultColumns();
        const nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns
        };
    }
    getExampleWithCustomColumnAndPredefinedFiltering() {
        const columns = this.deviceGridService.getDefaultColumns();
        const typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns
        };
    }
    onExampleSelect(example) {
        this.columnsInput = example.columns;
    }
}
DeviceGridExampleComponent.decorators = [
    { type: Component, args: [{
                selector: 'c8y-device-grid-example',
                template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
            },] }
];
DeviceGridExampleComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC1leGFtcGxlL2RldmljZS1ncmlkLWV4YW1wbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUNMLGlCQUFpQixFQUVqQixzQkFBc0IsRUFDdkIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1qQyxNQUFNLE9BQU8sMEJBQTBCO0lBT3JDLFlBQXNCLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUc7WUFDZCxJQUFJLENBQUMsNkJBQTZCLEVBQUU7WUFDcEMsSUFBSSxDQUFDLHFEQUFxRCxFQUFFO1lBQzVELElBQUksQ0FBQyxnREFBZ0QsRUFBRTtTQUN4RCxDQUFDO0lBQ0osQ0FBQztJQUVELDZCQUE2QjtRQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMzRCxPQUFPO1lBQ0wsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixPQUFPO1NBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxxREFBcUQ7UUFDbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDM0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELFVBQVUsQ0FBQyxtQkFBbUIsR0FBRztZQUMvQixLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDbEIsQ0FBQztRQUNGLFVBQVUsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQzlCLE9BQU87WUFDTCxLQUFLLEVBQUUsK0NBQStDO1lBQ3RELE9BQU87U0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGdEQUFnRDtRQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMzRCxNQUFNLFVBQVUsR0FBRyxJQUFJLHNCQUFzQixFQUFFLENBQUM7UUFDaEQsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDekIsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDekIsVUFBVSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsVUFBVSxDQUFDLG1CQUFtQixHQUFHO1lBQy9CLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDO1NBQzNCLENBQUM7UUFDRixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakMsT0FBTztZQUNMLEtBQUssRUFBRSw0REFBNEQ7WUFDbkUsT0FBTztTQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQU87UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ3RDLENBQUM7OztZQTFERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsazdDQUFtRDthQUNwRDs7O1lBWEMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEZXZpY2VHcmlkU2VydmljZSxcbiAgRGV2aWNlR3JpZENvbHVtbixcbiAgQ3VzdG9tRGV2aWNlR3JpZENvbHVtblxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgZmluZCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1kZXZpY2UtZ3JpZC1leGFtcGxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RldmljZS1ncmlkLWV4YW1wbGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUdyaWRFeGFtcGxlQ29tcG9uZW50IHtcbiAgZXhhbXBsZXM6IEFycmF5PHsgbGFiZWw6IHN0cmluZzsgY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdIH0+O1xuICBzZWxlY3RlZEV4YW1wbGU7XG4gIGNvbHVtbnNJbnB1dDogRGV2aWNlR3JpZENvbHVtbltdO1xuICBjb2x1bW5zT3V0cHV0OiBEZXZpY2VHcmlkQ29sdW1uW107XG4gIGRldmljZVF1ZXJ5U3RyaW5nT3V0cHV0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRldmljZUdyaWRTZXJ2aWNlOiBEZXZpY2VHcmlkU2VydmljZSkge1xuICAgIHRoaXMuZXhhbXBsZXMgPSBbXG4gICAgICB0aGlzLmdldEV4YW1wbGVXaXRoU3RhbmRhcmRDb2x1bW5zKCksXG4gICAgICB0aGlzLmdldEV4YW1wbGVXaXRoU3RhbmRhcmRDb2x1bW5zQW5kU2F2ZWRGaWx0ZXJpbmdTb3J0aW5nKCksXG4gICAgICB0aGlzLmdldEV4YW1wbGVXaXRoQ3VzdG9tQ29sdW1uQW5kUHJlZGVmaW5lZEZpbHRlcmluZygpXG4gICAgXTtcbiAgfVxuXG4gIGdldEV4YW1wbGVXaXRoU3RhbmRhcmRDb2x1bW5zKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnU3RhbmRhcmQgY29sdW1ucycsXG4gICAgICBjb2x1bW5zXG4gICAgfTtcbiAgfVxuXG4gIGdldEV4YW1wbGVXaXRoU3RhbmRhcmRDb2x1bW5zQW5kU2F2ZWRGaWx0ZXJpbmdTb3J0aW5nKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKCk7XG4gICAgY29uc3QgbmFtZUNvbHVtbiA9IGZpbmQoY29sdW1ucywgeyBuYW1lOiAnbmFtZScgfSk7XG4gICAgbmFtZUNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5ID0ge1xuICAgICAgbmFtZXM6IFsnKlRlbXAqJ11cbiAgICB9O1xuICAgIG5hbWVDb2x1bW4uc29ydE9yZGVyID0gJ2Rlc2MnO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogJ1N0YW5kYXJkIGNvbHVtbnMgd2l0aCBzYXZlZCBmaWx0ZXJpbmcvc29ydGluZycsXG4gICAgICBjb2x1bW5zXG4gICAgfTtcbiAgfVxuXG4gIGdldEV4YW1wbGVXaXRoQ3VzdG9tQ29sdW1uQW5kUHJlZGVmaW5lZEZpbHRlcmluZygpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0Q29sdW1ucygpO1xuICAgIGNvbnN0IHR5cGVDb2x1bW4gPSBuZXcgQ3VzdG9tRGV2aWNlR3JpZENvbHVtbigpO1xuICAgIHR5cGVDb2x1bW4ubmFtZSA9ICd0eXBlJztcbiAgICB0eXBlQ29sdW1uLnBhdGggPSAndHlwZSc7XG4gICAgdHlwZUNvbHVtbi5oZWFkZXIgPSBnZXR0ZXh0KCdUeXBlJyk7XG4gICAgdHlwZUNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5ID0ge1xuICAgICAgZXF1YWxzOiBbJ2M4eV9NUVRURGV2aWNlJ11cbiAgICB9O1xuICAgIGNvbHVtbnMuc3BsaWNlKDIsIDAsIHR5cGVDb2x1bW4pO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogJ1N0YW5kYXJkIGNvbHVtbnMgd2l0aCBjdXN0b20gb25lIHdpdGggcHJlZGVmaW5lZCBmaWx0ZXJpbmcnLFxuICAgICAgY29sdW1uc1xuICAgIH07XG4gIH1cblxuICBvbkV4YW1wbGVTZWxlY3QoZXhhbXBsZSkge1xuICAgIHRoaXMuY29sdW1uc0lucHV0ID0gZXhhbXBsZS5jb2x1bW5zO1xuICB9XG59XG4iXX0=