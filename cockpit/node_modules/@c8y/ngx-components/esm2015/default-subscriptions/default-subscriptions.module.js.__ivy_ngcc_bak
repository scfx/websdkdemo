import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { DefaultSubscriptionsComponent } from './default-subscriptions.component';
import { DefaultSubscriptionsService } from './default-subscriptions.service';
import { DefaultSubscriptionsGuard } from './default-subscriptions.guard';
import { DefaultSubscriptionsNavigationFactory } from './default-subscriptions-navigation.factory';
const ɵ0 = [
    {
        path: 'default-subscriptions',
        component: DefaultSubscriptionsComponent,
        canActivate: [DefaultSubscriptionsGuard]
    }
];
export class DefaultSubscriptionsModule {
}
DefaultSubscriptionsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, ReactiveFormsModule],
                declarations: [DefaultSubscriptionsComponent],
                entryComponents: [DefaultSubscriptionsComponent],
                exports: [DefaultSubscriptionsComponent],
                providers: [
                    DefaultSubscriptionsService,
                    DefaultSubscriptionsGuard,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: DefaultSubscriptionsNavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zdWJzY3JpcHRpb25zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RlZmF1bHQtc3Vic2NyaXB0aW9ucy9kZWZhdWx0LXN1YnNjcmlwdGlvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztXQWlCbkY7SUFDUjtRQUNFLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsU0FBUyxFQUFFLDZCQUE2QjtRQUN4QyxXQUFXLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztLQUN6QztDQUNTO0FBS2xCLE1BQU0sT0FBTywwQkFBMEI7OztZQTFCdEMsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQztnQkFDMUMsWUFBWSxFQUFFLENBQUMsNkJBQTZCLENBQUM7Z0JBQzdDLGVBQWUsRUFBRSxDQUFDLDZCQUE2QixDQUFDO2dCQUNoRCxPQUFPLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztnQkFDeEMsU0FBUyxFQUFFO29CQUNULDJCQUEyQjtvQkFDM0IseUJBQXlCO29CQUN6Qjt3QkFDRSxPQUFPLEVBQUUsb0JBQW9CO3dCQUM3QixRQUFRLEVBQUUscUNBQXFDO3dCQUMvQyxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQU1JO3dCQUNaLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIEhPT0tfTkFWSUdBVE9SX05PREVTLCBIT09LX1JPVVRFLCBSb3V0ZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZGVmYXVsdC1zdWJzY3JpcHRpb25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZWZhdWx0U3Vic2NyaXB0aW9uc1NlcnZpY2UgfSBmcm9tICcuL2RlZmF1bHQtc3Vic2NyaXB0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IERlZmF1bHRTdWJzY3JpcHRpb25zR3VhcmQgfSBmcm9tICcuL2RlZmF1bHQtc3Vic2NyaXB0aW9ucy5ndWFyZCc7XG5pbXBvcnQgeyBEZWZhdWx0U3Vic2NyaXB0aW9uc05hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9kZWZhdWx0LXN1YnNjcmlwdGlvbnMtbmF2aWdhdGlvbi5mYWN0b3J5JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0RlZmF1bHRTdWJzY3JpcHRpb25zQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0RlZmF1bHRTdWJzY3JpcHRpb25zQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgRGVmYXVsdFN1YnNjcmlwdGlvbnNTZXJ2aWNlLFxuICAgIERlZmF1bHRTdWJzY3JpcHRpb25zR3VhcmQsXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogRGVmYXVsdFN1YnNjcmlwdGlvbnNOYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkZWZhdWx0LXN1YnNjcmlwdGlvbnMnLFxuICAgICAgICAgIGNvbXBvbmVudDogRGVmYXVsdFN1YnNjcmlwdGlvbnNDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtEZWZhdWx0U3Vic2NyaXB0aW9uc0d1YXJkXVxuICAgICAgICB9XG4gICAgICBdIGFzIFJvdXRlW10sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEZWZhdWx0U3Vic2NyaXB0aW9uc01vZHVsZSB7fVxuIl19