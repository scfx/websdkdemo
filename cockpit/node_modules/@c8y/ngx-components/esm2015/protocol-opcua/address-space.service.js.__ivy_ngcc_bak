import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { BehaviorSubject } from 'rxjs';
export class AddressSpaceService {
    constructor(fetchClient) {
        this.client = fetchClient;
        this.microserviceUrl = '/service/opcua-mgmt-service/address-space';
        this.header = { 'Content-Type': 'application/json' };
        this.nodeNavigationData$ = new BehaviorSubject({
            node: undefined,
            selectedAncestorIds: []
        });
    }
    resetTreeToRootNode() {
        this.triggerNodeToOpen({ node: undefined, selectedAncestorIds: [] });
    }
    triggerNodeToOpen(nodeNavigationData) {
        this.nodeNavigationData$.next(nodeNavigationData);
    }
    getNodeNavData$() {
        return this.nodeNavigationData$.asObservable();
    }
    getNode(serverId, nodeId) {
        if (serverId && serverId.length > 0) {
            if (nodeId && nodeId.length > 0) {
                return this.getNodeById(serverId, nodeId);
            }
            return this.getRootNode(serverId);
        }
    }
    getRootNode(serverId) {
        if (serverId && serverId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${serverId}`, options);
        }
    }
    getNodeById(serverId, nodeId) {
        if (serverId && nodeId && serverId.length > 0 && nodeId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const param = encodeURIComponent(nodeId);
            return this.client.fetch(`${this.microserviceUrl}/${serverId}?nodeId=${param}`, options);
        }
    }
    getChildrenOf(node, serverId) {
        if (serverId && node.nodeId && serverId.length > 0 && node.nodeId.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            const param = encodeURIComponent(node.nodeId);
            return this.client.fetch(`${this.microserviceUrl}/${serverId}/children?nodeId=${param}`, options);
        }
    }
    childrenAvailable(nodeReferences) {
        if (!nodeReferences || nodeReferences.length === 0) {
            return false;
        }
        return nodeReferences.some(ref => !ref.inverse && ref.hierarchical);
    }
    getSearchedNodes(searchKey, serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `service/opcua-mgmt-service/search/${serverId}/`;
            const options = {
                headers: this.header,
                params: {
                    searchString: '*' + searchKey + '*'
                }
            };
            const res = yield this.client.fetch(url, options);
            return res.json();
        });
    }
    getIcon(nodeClassName) {
        const iconList = {
            Object: 'cube',
            Variable: 'th-list',
            Method: 'random',
            View: 'window-maximize',
            ObjectType: 'c8y-group',
            VariableType: 'c8y-group',
            ReferenceType: 'c8y-group',
            DataType: 'c8y-group'
        };
        return iconList[nodeClassName] || 'circle';
    }
}
AddressSpaceService.decorators = [
    { type: Injectable }
];
AddressSpaceService.ctorParameters = () => [
    { type: FetchClient }
];
//# sourceMappingURL=data:application/json;base64,