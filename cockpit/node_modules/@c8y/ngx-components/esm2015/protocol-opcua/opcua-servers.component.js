import { __awaiter } from "tslib";
import { Component, Optional } from '@angular/core';
import { AlertService, ContextRouteComponent, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { OpcuaService } from './opcuaService';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './opcuaService';
import * as ɵngcc2 from '@c8y/ngx-components';
import * as ɵngcc3 from '@ngx-translate/core';
import * as ɵngcc4 from 'ngx-bootstrap/popover';
import * as ɵngcc5 from './opcua-server-list.component';
import * as ɵngcc6 from './opcua-server-config.component';
import * as ɵngcc7 from '@angular/common';

const _c0 = function (a0) { return { "split-view__detail--selected": a0 }; };
export class OpcuaServersComponent {
    constructor(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.moId = this.opcuaService.getMoId();
            if (this.moId && this.moId.length > 0) {
                const res = yield this.opcuaService.getServers(this.moId);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    this.serverObjectList = (yield res.json());
                    this.serverObjectList.map(server => this.setQuickInfo(server));
                }
            }
        });
    }
    localServerObjectExist() {
        return !!this.serverObjectList.find(server => server.id === this.NEW_SERVER_ID);
    }
    addServer() {
        const server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    }
    onSaved(server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    }
    reloadTabs() {
        if (this.context) {
            this.context.refreshTabs();
        }
    }
    onCanceled(server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(item => {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    }
    onRemoved(server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    }
    getKeystore(binaryId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.opcuaService.getKeystore(binaryId);
            return data;
        });
    }
    onPresent(server) {
        return __awaiter(this, void 0, void 0, function* () {
            if (server &&
                server.id !== this.NEW_SERVER_ID &&
                server.config &&
                server.config.keystoreBinaryId) {
                try {
                    const mo = yield this.getKeystore(server.config.keystoreBinaryId);
                    server.config.keystoreFilename = mo.name;
                }
                catch (ex) {
                    this.server = Object.assign({}, server);
                    console.log('Could not get existing keystore:', ex);
                }
            }
            if (this.serverObjectList.length > 0) {
                this.serverObjectList.forEach(item => {
                    item.active = false;
                    if (item.id === server.id) {
                        item.active = true;
                        server.active = item.active;
                    }
                });
                this.setQuickInfo(server);
                this.server = Object.assign({}, server);
            }
        });
    }
    createServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.opcuaService.createServer(server);
            const svr = (yield response.json());
            this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
            this.reloadTabs();
        });
    }
    updateServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatedServer = (yield this.opcuaService.updateServer(server));
            if (updatedServer) {
                this.updateServerObjectListById(updatedServer.id, updatedServer);
            }
        });
    }
    removeServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.opcuaService.removeServer(server);
                this.removeServerObjectListById(server.id);
                this.reloadTabs();
            }
            catch (ex) {
                console.log('Could not remove OPC UA server:', ex);
            }
        });
    }
    removeServerObjectListById(id) {
        this.serverObjectList.forEach((item, index) => {
            if (item.id === id) {
                this.serverObjectList.splice(index, 1);
                delete this.server;
            }
        });
    }
    updateServerObjectListById(id, server) {
        const idx = this.serverObjectList.findIndex(item => item.id === id);
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    }
    setQuickInfo(server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    }
}
OpcuaServersComponent.ɵfac = function OpcuaServersComponent_Factory(t) { return new (t || OpcuaServersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OpcuaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AlertService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContextRouteComponent, 8)); };
OpcuaServersComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaServersComponent, selectors: [["opcua-servers"]], decls: 18, vars: 16, consts: [[1, "card", "content-fullpage", "split-view--5-7"], [1, "card-header", "grid__col--fullspan", "separator"], [1, "card-title"], ["placement", "right", "triggers", "focus", 1, "btn-clean", "m-l-4", 3, "popover"], ["c8yIcon", "question-circle-o", 1, "text-info"], [1, "inner-scroll", "split-view__list"], [1, "bg-gray-white", "flex-grow"], [1, "c8y-nav-stacked"], [3, "serverList", "present"], [1, "card-footer", "separator", "sticky-bottom"], [1, "btn", "btn-default", 3, "title", "disabled", "click"], [3, "c8yIcon"], [1, "inner-scroll", "split-view__detail", 3, "ngClass", "server", "canceled", "removed", "saved"]], template: function OpcuaServersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "h4", 2);
        ɵngcc0.ɵɵtext(3, "OPC UA servers");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "button", 3);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelement(6, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "div", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelementStart(10, "opcua-server-list", 8);
        ɵngcc0.ɵɵlistener("present", function OpcuaServersComponent_Template_opcua_server_list_present_10_listener($event) { return ctx.onPresent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 9);
        ɵngcc0.ɵɵelementStart(12, "button", 10);
        ɵngcc0.ɵɵlistener("click", function OpcuaServersComponent_Template_button_click_12_listener() { return ctx.addServer(); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelement(14, "i", 11);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "opcua-server-config", 12);
        ɵngcc0.ɵɵlistener("canceled", function OpcuaServersComponent_Template_opcua_server_config_canceled_17_listener($event) { return ctx.onCanceled($event); })("removed", function OpcuaServersComponent_Template_opcua_server_config_removed_17_listener($event) { return ctx.onRemoved($event); })("saved", function OpcuaServersComponent_Template_opcua_server_config_saved_17_listener($event) { return ctx.onSaved($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("popover", ɵngcc0.ɵɵpipeBind1(5, 8, "Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected."));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("serverList", ctx.serverObjectList);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(13, 10, "Add server"));
        ɵngcc0.ɵɵproperty("disabled", ctx.localServerObjectExist());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("c8yIcon", "plus-circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 12, "Add server"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c0, ctx.server))("server", ctx.server);
    } }, directives: [ɵngcc4.PopoverDirective, ɵngcc2.IconDirective, ɵngcc5.OpcuaServerListComponent, ɵngcc6.OpcuaServerConfigComponent, ɵngcc7.NgClass], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
OpcuaServersComponent.ctorParameters = () => [
    { type: OpcuaService },
    { type: AlertService },
    { type: TranslateService },
    { type: ContextRouteComponent, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaServersComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-servers',
                template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header grid__col--fullspan separator\">\n    <h4 class=\"card-title\">OPC UA servers</h4>\n    <button class=\"btn-clean m-l-4\"\n      popover=\"{{ 'Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected.' | translate }}\"\n      placement=\"right\"\n      triggers=\"focus\"\n    >\n      <i c8yIcon=\"question-circle-o\" class=\"text-info \"></i>\n    </button>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-gray-white flex-grow\">\n      <div class=\"c8y-nav-stacked\">\n        <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n        </opcua-server-list>\n      </div>\n    </div>\n    <div class=\"card-footer separator sticky-bottom\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-default\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"inner-scroll split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.OpcuaService }, { type: ɵngcc2.AlertService }, { type: ɵngcc3.TranslateService }, { type: ɵngcc2.ContextRouteComponent, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,