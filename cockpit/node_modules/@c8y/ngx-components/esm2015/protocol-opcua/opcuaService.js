import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { AlertService } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/client';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@c8y/ngx-components';
export class OpcuaService {
    constructor(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    getServers(id) {
        if (id && id.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${id}`, options);
        }
    }
    createServer(data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.microserviceUrl}`, options);
        }
    }
    updateServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.doesGatewayIdExist(server) && this.doesIdExist(server)) {
                this.cleanUpPayload(server);
                const options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify(server)
                };
                const res = yield this.client.fetch(`${this.microserviceUrl}`, options);
                let data;
                try {
                    data = yield res.json();
                }
                catch (e) {
                    // nothing
                }
                if (res.status !== 200) {
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    return data;
                }
            }
        });
    }
    removeServer(data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${this.microserviceUrl}/${data.gatewayId}/${data.id}`, options);
        }
    }
    getKeystore(binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    }
    uploadKeystore(file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    }
    updateKeystore(id, file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id && id.length > 0 && file && file.size > 0) {
                const { res } = yield this.removeKeystore(id);
                if (res && res.status === 204) {
                    return this.uploadKeystore(file);
                }
            }
            return Promise.reject('Invalid file');
        });
    }
    removeKeystore(id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    }
    getMoId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    }
    getId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    }
    getDeviceProtocol(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: this.header,
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${id}`, options);
        });
    }
    updateDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}/${data.id}`, options);
        });
    }
    createDeviceProtocol(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.deviceTypeProtocolUrl}`, options);
        });
    }
    doesGatewayIdExist(data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    }
    doesIdExist(data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    }
    cleanUpPayload(data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    }
}
OpcuaService.ɵfac = function OpcuaService_Factory(t) { return new (t || OpcuaService)(ɵngcc0.ɵɵinject(ɵngcc1.FetchClient), ɵngcc0.ɵɵinject(ɵngcc1.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.AlertService)); };
OpcuaService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OpcuaService, factory: OpcuaService.ɵfac });
OpcuaService.ctorParameters = () => [
    { type: FetchClient },
    { type: InventoryService },
    { type: Router },
    { type: AlertService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FetchClient }, { type: ɵngcc1.InventoryService }, { type: ɵngcc2.Router }, { type: ɵngcc3.AlertService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWFTZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1vcGN1YS9vcGN1YVNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBaUIsZ0JBQWdCLEVBQTBCLE1BQU0sYUFBYSxDQUFDO0FBRW5HLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBR25ELE1BQU0sT0FBTyxZQUFZO0FBQ3pCLElBS0UsWUFDVSxNQUFtQixFQUNuQixnQkFBa0MsRUFDbEMsTUFBYyxFQUNkLFlBQTBCO0FBQ25DLFFBSlMsV0FBTSxHQUFOLE1BQU0sQ0FBYTtBQUFDLFFBQ3BCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDZixpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUN0QyxRQUNJLElBQUksQ0FBQyxlQUFlLEdBQUcsb0NBQW9DLENBQUM7QUFDaEUsUUFBSSxJQUFJLENBQUMscUJBQXFCLEdBQUcseUNBQXlDLENBQUM7QUFDM0UsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLENBQUM7QUFDekQsUUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSCxJQUNFLFVBQVUsQ0FBQyxFQUFVO0FBQ3ZCLFFBQUksSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDN0IsWUFBTSxNQUFNLE9BQU8sR0FBa0I7QUFDckMsZ0JBQVEsTUFBTSxFQUFFLEtBQUs7QUFDckIsZ0JBQVEsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFN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Q0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQ3RFLElBQUUsQ0FBQztBQUNILElBQ1UsY0FBYyxDQUFDLElBQWlCO0FBQzFDLFFBQUksSUFBSSxJQUFJLEVBQUU7QUFDZCxZQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRTtBQUFFLGdCQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUFDLGFBQUM7QUFDM0QsWUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFBRSxnQkFBQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7QUFBQyxhQUFDO0FBQ3BELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDt3Q0FuS0MsVUFBVTtrSEFDVDtBQUFDO0FBQ1UsWUFQSixXQUFXO0FBQUksWUFBYSxnQkFBZ0I7QUFBSSxZQUVoRCxNQUFNO0FBQUksWUFDVixZQUFZO0FBQUc7Ozt1S0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElGZXRjaE9wdGlvbnMsIEludmVudG9yeVNlcnZpY2UsIEludmVudG9yeUJpbmFyeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPcGN1YVNlcnZlciB9IGZyb20gJy4vb3BjdWEtc2VydmVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcGN1YVNlcnZpY2Uge1xuICBwcml2YXRlIGJpbmFyeVNlcnZpY2U6IEludmVudG9yeUJpbmFyeVNlcnZpY2U7XG4gIHByaXZhdGUgbWljcm9zZXJ2aWNlVXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgZGV2aWNlVHlwZVByb3RvY29sVXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgaGVhZGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgICApIHtcbiAgICB0aGlzLm1pY3Jvc2VydmljZVVybCA9ICcvc2VydmljZS9vcGN1YS1tZ210LXNlcnZpY2Uvc2VydmVyJztcbiAgICB0aGlzLmRldmljZVR5cGVQcm90b2NvbFVybCA9ICcvc2VydmljZS9vcGN1YS1tZ210LXNlcnZpY2UvZGV2aWNlVHlwZXMnO1xuICAgIHRoaXMuaGVhZGVyID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gICAgdGhpcy5iaW5hcnlTZXJ2aWNlID0gaW52ZW50b3J5U2VydmljZS5iaW5hcnk7XG4gIH1cblxuICBnZXRTZXJ2ZXJzKGlkOiBzdHJpbmcpIHtcbiAgICBpZiAoaWQgJiYgaWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5taWNyb3NlcnZpY2VVcmx9LyR7aWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlU2VydmVyKGRhdGE6IE9wY3VhU2VydmVyKSB7XG4gICAgaWYgKHRoaXMuZG9lc0dhdGV3YXlJZEV4aXN0KGRhdGEpKSB7XG4gICAgICB0aGlzLmNsZWFuVXBQYXlsb2FkKGRhdGEpO1xuICAgICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5mZXRjaChgJHt0aGlzLm1pY3Jvc2VydmljZVVybH1gLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGVTZXJ2ZXIoc2VydmVyOiBPcGN1YVNlcnZlcikge1xuICAgIGlmICh0aGlzLmRvZXNHYXRld2F5SWRFeGlzdChzZXJ2ZXIpICYmIHRoaXMuZG9lc0lkRXhpc3Qoc2VydmVyKSkge1xuICAgICAgdGhpcy5jbGVhblVwUGF5bG9hZChzZXJ2ZXIpO1xuICAgICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzZXJ2ZXIpXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5taWNyb3NlcnZpY2VVcmx9YCwgb3B0aW9ucyk7XG4gICAgICBsZXQgZGF0YTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBub3RoaW5nXG4gICAgICB9XG5cbiAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlcyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVNlcnZlcihkYXRhOiBPcGN1YVNlcnZlcikge1xuICAgIGlmICh0aGlzLmRvZXNHYXRld2F5SWRFeGlzdChkYXRhKSAmJiB0aGlzLmRvZXNJZEV4aXN0KGRhdGEpKSB7XG4gICAgICBjb25zdCBvcHRpb25zOiBJRmV0Y2hPcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmZldGNoKGAke3RoaXMubWljcm9zZXJ2aWNlVXJsfS8ke2RhdGEuZ2F0ZXdheUlkfS8ke2RhdGEuaWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0S2V5c3RvcmUoYmluYXJ5SWQ6IHN0cmluZykge1xuICAgIGlmIChiaW5hcnlJZCAmJiBiaW5hcnlJZC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChiaW5hcnlJZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdXBsb2FkS2V5c3RvcmUoZmlsZTogRmlsZSkge1xuICAgIGlmIChmaWxlICYmIGZpbGUuc2l6ZSA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmJpbmFyeVNlcnZpY2UuY3JlYXRlKGZpbGUpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0ludmFsaWQgZmlsZScpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlS2V5c3RvcmUoaWQ6IHN0cmluZywgZmlsZTogRmlsZSkge1xuICAgIGlmIChpZCAmJiBpZC5sZW5ndGggPiAwICYmIGZpbGUgJiYgZmlsZS5zaXplID4gMCkge1xuICAgICAgY29uc3QgeyByZXMgfSA9IGF3YWl0IHRoaXMucmVtb3ZlS2V5c3RvcmUoaWQpO1xuICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkS2V5c3RvcmUoZmlsZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnSW52YWxpZCBmaWxlJyk7XG4gIH1cblxuICByZW1vdmVLZXlzdG9yZShpZDogc3RyaW5nKSB7XG4gICAgaWYgKGlkICYmIGlkLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmJpbmFyeVNlcnZpY2UuZGVsZXRlKGlkKTtcbiAgICB9XG4gIH1cblxuICBnZXRNb0lkKCkge1xuICAgIGNvbnN0IGN1cnJlbnRVcmw6IHN0cmluZyA9IHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnVybDtcbiAgICBjb25zdCBpc0RldmljZTogYm9vbGVhbiA9IG5ldyBSZWdFeHAoL2RldmljZVxcL1xcZCsvKS50ZXN0KGN1cnJlbnRVcmwpO1xuICAgIGlmIChpc0RldmljZSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRVcmwubWF0Y2goL1xcZCsvKVswXTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgZ2V0SWQoKSB7XG4gICAgY29uc3QgY3VycmVudFVybDogc3RyaW5nID0gdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QudXJsO1xuICAgIGNvbnN0IGlzRGV2aWNlcHJvdG9jb2w6IGJvb2xlYW4gPSBuZXcgUmVnRXhwKC9kZXZpY2Vwcm90b2NvbHMvKS50ZXN0KGN1cnJlbnRVcmwpO1xuICAgIGlmIChpc0RldmljZXByb3RvY29sICYmIFJlZ0V4cCgvXFxkKyQvKS50ZXN0KGN1cnJlbnRVcmwpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFVybC5tYXRjaCgvXFxkKyQvKVswXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXREZXZpY2VQcm90b2NvbChpZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmZldGNoKGAke3RoaXMuZGV2aWNlVHlwZVByb3RvY29sVXJsfS8ke2lkfWAsIG9wdGlvbnMpO1xuXG4gIH1cblxuICBhc3luYyB1cGRhdGVEZXZpY2VQcm90b2NvbChkYXRhKSB7XG4gICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5kZXZpY2VUeXBlUHJvdG9jb2xVcmx9LyR7ZGF0YS5pZH1gLCBvcHRpb25zKTtcblxuICB9XG5cbiAgYXN5bmMgY3JlYXRlRGV2aWNlUHJvdG9jb2woZGF0YSkge1xuICAgIGNvbnN0IG9wdGlvbnM6IElGZXRjaE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5mZXRjaChgJHt0aGlzLmRldmljZVR5cGVQcm90b2NvbFVybH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgZG9lc0dhdGV3YXlJZEV4aXN0KGRhdGE6IE9wY3VhU2VydmVyKSB7XG4gICAgcmV0dXJuIGRhdGEgJiYgZGF0YS5nYXRld2F5SWQgJiYgZGF0YS5nYXRld2F5SWQubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHByaXZhdGUgZG9lc0lkRXhpc3QoZGF0YTogT3BjdWFTZXJ2ZXIpIHtcbiAgICByZXR1cm4gZGF0YSAmJiBkYXRhLmlkICYmIGRhdGEuaWQubGVuZ3RoID4gMCAmJiBkYXRhLmlkICE9PSAnbmV3JztcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW5VcFBheWxvYWQoZGF0YTogT3BjdWFTZXJ2ZXIpIHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEuaWQgJiYgZGF0YS5pZCA9PT0gJ25ldycpIHsgZGVsZXRlIGRhdGEuaWQ7IH1cbiAgICAgIGlmIChkYXRhLnF1aWNrSW5mbykgeyBkZWxldGUgZGF0YS5xdWlja0luZm87IH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==