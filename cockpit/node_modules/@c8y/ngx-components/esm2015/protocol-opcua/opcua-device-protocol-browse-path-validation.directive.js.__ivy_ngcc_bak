import { Directive, forwardRef, ElementRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { some, isEqual, isEmpty } from 'lodash-es';
export class OpcuaDeviceProtocolBrowsePathValidation {
    constructor(el) {
        this.el = el;
    }
    validate(control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    }
    isValidJson(value) {
        try {
            const browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    }
    toArray(str) {
        return JSON.parse(str);
    }
    isBrowsePathUnique(value) {
        const mappings = this.getMappings();
        const found = some(mappings, item => {
            if (isEqual(item.browsePath, this.toArray(value)) && item.id !== this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    }
}
OpcuaDeviceProtocolBrowsePathValidation.decorators = [
    { type: Directive, args: [{
                selector: '[c8yBrowsePathValidator][ngModel]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                        multi: true
                    }
                ]
            },] }
];
OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = () => [
    { type: ElementRef }
];
OpcuaDeviceProtocolBrowsePathValidation.propDecorators = {
    getMappings: [{ type: Input }],
    model: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtb3BjdWEvb3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBc0MsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkYsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBWW5ELE1BQU0sT0FBTyx1Q0FBdUM7SUFJbEQsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7SUFBRyxDQUFDO0lBRXRDLFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0wsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMxQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQ3RDO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFLO1FBQ2YsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBSztRQUN0QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNsQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUM5RSxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQzs7O1lBbERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUNBQW1DO2dCQUM3QyxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGFBQWE7d0JBQ3RCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUNBQXVDLENBQUM7d0JBQ3RFLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0Y7OztZQWIrQixVQUFVOzs7MEJBZXZDLEtBQUs7b0JBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgSW5wdXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdGb3JtLCBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IHNvbWUsIGlzRXF1YWwsIGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5QnJvd3NlUGF0aFZhbGlkYXRvcl1bbmdNb2RlbF0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gT3BjdWFEZXZpY2VQcm90b2NvbEJyb3dzZVBhdGhWYWxpZGF0aW9uKSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE9wY3VhRGV2aWNlUHJvdG9jb2xCcm93c2VQYXRoVmFsaWRhdGlvbiBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgpIGdldE1hcHBpbmdzOiAoKSA9PiBbXTtcbiAgQElucHV0KCkgbW9kZWw6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgIGlmIChjb250cm9sLnZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZEpzb24oY29udHJvbC52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaW52YWxpZEJyb3dzZVBhdGhOb3RhdGlvbjogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNCcm93c2VQYXRoVW5pcXVlKGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHsgYnJvd3NlUGF0aE5vdFVuaXF1ZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaXNWYWxpZEpzb24odmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYnJvd3NlUGF0aCA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgcmV0dXJuICFpc0VtcHR5KGJyb3dzZVBhdGgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdG9BcnJheShzdHIpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9XG5cbiAgaXNCcm93c2VQYXRoVW5pcXVlKHZhbHVlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbWFwcGluZ3MgPSB0aGlzLmdldE1hcHBpbmdzKCk7XG4gICAgY29uc3QgZm91bmQgPSBzb21lKG1hcHBpbmdzLCBpdGVtID0+IHtcbiAgICAgIGlmIChpc0VxdWFsKGl0ZW0uYnJvd3NlUGF0aCwgdGhpcy50b0FycmF5KHZhbHVlKSkgJiYgaXRlbS5pZCAhPT0gdGhpcy5tb2RlbC5pZCkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQgPyB0cnVlIDogZmFsc2U7XG4gIH1cbn1cbiJdfQ==