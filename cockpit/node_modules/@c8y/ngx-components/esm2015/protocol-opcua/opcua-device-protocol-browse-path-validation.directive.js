import { Directive, forwardRef, ElementRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { some, isEqual, isEmpty } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
export class OpcuaDeviceProtocolBrowsePathValidation {
    constructor(el) {
        this.el = el;
    }
    validate(control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    }
    isValidJson(value) {
        try {
            const browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    }
    toArray(str) {
        return JSON.parse(str);
    }
    isBrowsePathUnique(value) {
        const mappings = this.getMappings();
        const found = some(mappings, item => {
            if (isEqual(item.browsePath, this.toArray(value)) && item.id !== this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    }
}
OpcuaDeviceProtocolBrowsePathValidation.ɵfac = function OpcuaDeviceProtocolBrowsePathValidation_Factory(t) { return new (t || OpcuaDeviceProtocolBrowsePathValidation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OpcuaDeviceProtocolBrowsePathValidation.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OpcuaDeviceProtocolBrowsePathValidation, selectors: [["", "c8yBrowsePathValidator", "", "ngModel", ""]], inputs: { getMappings: "getMappings", model: "model" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                multi: true
            }
        ])] });
OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = () => [
    { type: ElementRef }
];
OpcuaDeviceProtocolBrowsePathValidation.propDecorators = {
    getMappings: [{ type: Input }],
    model: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaDeviceProtocolBrowsePathValidation, [{
        type: Directive,
        args: [{
                selector: '[c8yBrowsePathValidator][ngModel]',
                providers: [
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { getMappings: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1vcGN1YS9vcGN1YS1kZXZpY2UtcHJvdG9jb2wtYnJvd3NlLXBhdGgtdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFzQyxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBWW5ELE1BQU0sT0FBTyx1Q0FBdUM7QUFBRyxJQUlyRCxZQUFvQixFQUFjO0FBQUksUUFBbEIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLElBQUUsQ0FBQztBQUN4QyxJQUNFLFFBQVEsQ0FBQyxPQUF3QjtBQUFJLFFBQ25DLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtBQUN2QixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUM1QyxnQkFBUSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDbkQsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3BELG9CQUFVLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUMvQyxpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVcsQ0FBQyxLQUFLO0FBQ25CLFFBQUksSUFBSTtBQUNSLFlBQU0sTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxZQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsU0FBSztBQUFDLFFBQUEsT0FBTyxLQUFLLEVBQUU7QUFDcEIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxPQUFPLENBQUMsR0FBRztBQUNiLFFBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNILElBQ0Usa0JBQWtCLENBQUMsS0FBSztBQUFJLFFBQzFCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN4QyxRQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUU7QUFDeEMsWUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO0FBQ3RGLGdCQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0g7bUVBbkRDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsbUNBQW1DLGtCQUM3QyxTQUFTLEVBQUUsc0JBQ1Q7U0FDRSxPQUFPLEVBQUUsYUFBYSwwQkFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQywwQkFDdEUsS0FBSyxFQUFFLElBQUksc0JBQ1osa0JBQ0YsY0FDRjs7Ozs7O2VBQ0k7QUFBQztBQUFpRSxZQWR2QyxVQUFVO0FBQUc7QUFBRztBQUM3QiwwQkFjaEIsS0FBSztBQUFLLG9CQUNWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgSW5wdXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdGb3JtLCBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IHNvbWUsIGlzRXF1YWwsIGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5QnJvd3NlUGF0aFZhbGlkYXRvcl1bbmdNb2RlbF0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gT3BjdWFEZXZpY2VQcm90b2NvbEJyb3dzZVBhdGhWYWxpZGF0aW9uKSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE9wY3VhRGV2aWNlUHJvdG9jb2xCcm93c2VQYXRoVmFsaWRhdGlvbiBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgpIGdldE1hcHBpbmdzOiAoKSA9PiBbXTtcbiAgQElucHV0KCkgbW9kZWw6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgIGlmIChjb250cm9sLnZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZEpzb24oY29udHJvbC52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaW52YWxpZEJyb3dzZVBhdGhOb3RhdGlvbjogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNCcm93c2VQYXRoVW5pcXVlKGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHsgYnJvd3NlUGF0aE5vdFVuaXF1ZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaXNWYWxpZEpzb24odmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYnJvd3NlUGF0aCA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgcmV0dXJuICFpc0VtcHR5KGJyb3dzZVBhdGgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdG9BcnJheShzdHIpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9XG5cbiAgaXNCcm93c2VQYXRoVW5pcXVlKHZhbHVlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbWFwcGluZ3MgPSB0aGlzLmdldE1hcHBpbmdzKCk7XG4gICAgY29uc3QgZm91bmQgPSBzb21lKG1hcHBpbmdzLCBpdGVtID0+IHtcbiAgICAgIGlmIChpc0VxdWFsKGl0ZW0uYnJvd3NlUGF0aCwgdGhpcy50b0FycmF5KHZhbHVlKSkgJiYgaXRlbS5pZCAhPT0gdGhpcy5tb2RlbC5pZCkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQgPyB0cnVlIDogZmFsc2U7XG4gIH1cbn1cbiJdfQ==