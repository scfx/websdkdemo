import { __awaiter } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AddressSpaceService } from './address-space.service';
import { OpcuaService } from './opcuaService';
import { AlertService } from '@c8y/ngx-components';
import { DynamicDataSource } from './dynamic-data-source';
import { NestedTreeControl } from '@angular/cdk/tree';
import { clone } from 'lodash';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './address-space.service';
import * as ɵngcc2 from './opcuaService';
import * as ɵngcc3 from '@c8y/ngx-components';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/cdk/tree';

const _c0 = function (a0) { return { strong: a0 }; };
function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "cdk-nested-tree-node", 7);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template_cdk_nested_tree_node_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.toggleFocusedNode(node_r5); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵelement(2, "i", 8);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r5 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r3.isFocusedNode(node_r5)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r3.getIcon(node_r5.nodeClassName))("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c0, ctx_r3.isFocusedNode(node_r5)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r5.displayName, " ");
} }
const _c1 = function (a0, a1) { return { "dlt-c8y-icon-plus-square": a0, "dlt-c8y-icon-minus-square": a1 }; };
function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "cdk-nested-tree-node");
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "button", 10);
    ɵngcc0.ɵɵelement(3, "i", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "i", 12);
    ɵngcc0.ɵɵelementStart(5, "span", 7);
    ɵngcc0.ɵɵlistener("click", function OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template_span_click_5_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const node_r8 = restoredCtx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.toggleFocusedNode(node_r8); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "span", 13);
    ɵngcc0.ɵɵelement(8, "i", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainer(9, 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r8 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", node_r8.currentlyLoadingChildren);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(7, _c1, !node_r8.expanded, node_r8.expanded));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("c8yIcon", ctx_r4.getIcon(node_r8.nodeClassName));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c0, ctx_r4.isFocusedNode(node_r8)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r8.displayName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("visibility", node_r8.currentlyLoadingChildren ? "visible" : "hidden");
} }
function OpcuaAddressSpaceTreeComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "cdk-tree", 4);
    ɵngcc0.ɵɵtemplate(2, OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_2_Template, 4, 8, "cdk-nested-tree-node", 5);
    ɵngcc0.ɵɵtemplate(3, OpcuaAddressSpaceTreeComponent_div_0_cdk_nested_tree_node_3_Template, 10, 12, "cdk-nested-tree-node", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.dataSource)("treeControl", ctx_r0.nestedTreeControl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("cdkTreeNodeDefWhen", ctx_r0.hasChild);
} }
function OpcuaAddressSpaceTreeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "div", 17);
    ɵngcc0.ɵɵelement(2, "div", 18);
    ɵngcc0.ɵɵelement(3, "div", 19);
    ɵngcc0.ɵɵelement(4, "div", 20);
    ɵngcc0.ɵɵelement(5, "div", 21);
    ɵngcc0.ɵɵelement(6, "div", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function OpcuaAddressSpaceTreeComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtext(1, " No source data available to fetch address space.\n");
    ɵngcc0.ɵɵelementEnd();
} }
export class OpcuaAddressSpaceTreeComponent {
    constructor(addressSpaceService, opcuaService, alertService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.destroy$ = new Subject();
        this.getChildren = (node) => (node.expanded ? node.children : []);
        this.hasChild = (_, _nodeData) => this.addressSpaceService.childrenAvailable(_nodeData.references);
    }
    set moId(id) {
        this._moId = id || undefined;
    }
    ngOnInit() {
        this.initializeDataSet();
    }
    ngOnChanges(changes) {
        if (changes.moId && changes.moId.previousValue && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    }
    initializeDataSet() {
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .pipe(takeUntil(this.destroy$))
            .subscribe(nodeNavData => this.openNode(nodeNavData));
        this.subscriptionRef = this.focusEmitter.subscribe(node => {
            this.focused = this.isFocusedNode(node) ? undefined : node;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    }
    openNode(nodeNavData) {
        return __awaiter(this, void 0, void 0, function* () {
            const { node, selectedAncestorIds } = nodeNavData;
            let nodeId;
            // We just set the nodeId when the selectedAncestorIds variable an empty array.
            // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
            // from the root node.
            if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                nodeId = node.nodeId;
            }
            // Always recreate the tree when routing to a specific nested node,
            // because previous modifications to the tree-structure could cause errors
            // while traversing with 'old' tree-data
            // -----------------
            // setupTree is able to handle nodeId = undefined
            yield this.setupTree(nodeId);
            if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                return;
            }
            if (nodeNavData && this.dataSource) {
                const clonedAncestors = clone(selectedAncestorIds);
                clonedAncestors.shift();
                const n = yield this.dataSource.toggleNode(this.dataSource.data[0], true);
                this.setChildNodes(n.children, clonedAncestors);
                this.toggleFocusedNode(node);
            }
        });
    }
    setChildNodes(nodes, ids) {
        if (nodes) {
            ids.forEach((id) => __awaiter(this, void 0, void 0, function* () {
                const match = nodes.find(n => n.nodeId === id);
                if (match && ids.length > 0) {
                    const idx = ids.findIndex(value => value === id);
                    if (idx >= 0) {
                        ids.splice(idx, 1);
                    }
                    const toggledNode = yield this.dataSource.toggleNode(match, true);
                    this.setChildNodes(toggledNode.children, ids);
                }
            }));
        }
    }
    setupTree(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            if (!this._moId || this._moId.length === 0) {
                this._moId = this.opcuaService.getMoId();
            }
            // addressSpaceService.getNode returns either the root node of the server (moId)
            // or if nodeId !== undefined the node with given nodeId
            const res = yield this.addressSpaceService.getNode(this._moId, nodeId);
            if (res) {
                if (res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.dataSource = undefined;
                }
                else {
                    const rootNode = (yield res.json());
                    this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                    this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                    this.dataSource.data = [rootNode];
                }
                this.loading = false;
            }
            else {
                this.loading = false;
            }
        });
    }
    getMoId() {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    toggleFocusedNode(node) {
        const relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    }
    isFocusedNode(node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    }
    getRelativePath(node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    }
}
OpcuaAddressSpaceTreeComponent.ɵfac = function OpcuaAddressSpaceTreeComponent_Factory(t) { return new (t || OpcuaAddressSpaceTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AddressSpaceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OpcuaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlertService)); };
OpcuaAddressSpaceTreeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: OpcuaAddressSpaceTreeComponent, selectors: [["opcua-address-space-tree"]], inputs: { focusEmitter: "focusEmitter", moId: "moId", node: "node" }, outputs: { selectedNode: "selectedNode" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [["class", "card-block", 4, "ngIf"], ["class", "p-8", 4, "ngIf"], ["class", "alert alert-info m-t-16", "translate", "", 4, "ngIf"], [1, "card-block"], [3, "dataSource", "treeControl"], ["class", "interact", 3, "ngClass", "click", 4, "cdkTreeNodeDef"], [4, "cdkTreeNodeDef", "cdkTreeNodeDefWhen"], [1, "interact", 3, "ngClass", "click"], [1, "m-r-4", "interact", 3, "c8yIcon", "ngClass"], [1, "flex-row"], ["cdkTreeNodeToggle", "", 1, "btn-clean", "text-primary", "m-r-4", 3, "disabled"], [3, "ngClass"], [1, "m-r-4", "interact", 3, "c8yIcon"], [1, "m-l-4"], [1, "dlt-c8y-icon-circle-o-notch", "icon-spin"], ["cdkTreeNodeOutlet", ""], [1, "p-8"], [1, "spinner", "p-relative"], [1, "rect1"], [1, "rect2"], [1, "rect3"], [1, "rect4"], [1, "rect5"], ["translate", "", 1, "alert", "alert-info", "m-t-16"]], template: function OpcuaAddressSpaceTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OpcuaAddressSpaceTreeComponent_div_0_Template, 4, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, OpcuaAddressSpaceTreeComponent_div_1_Template, 7, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(2, OpcuaAddressSpaceTreeComponent_div_2_Template, 2, 0, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataSource && !ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.dataSource && !ctx.loading);
    } }, directives: [ɵngcc4.NgIf, ɵngcc5.CdkTree, ɵngcc5.CdkTreeNodeDef, ɵngcc5.CdkNestedTreeNode, ɵngcc4.NgClass, ɵngcc3.IconDirective, ɵngcc5.CdkTreeNodeToggle, ɵngcc5.CdkTreeNodeOutlet, ɵngcc3.C8yTranslateDirective], encapsulation: 2 });
OpcuaAddressSpaceTreeComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService },
    { type: AlertService }
];
OpcuaAddressSpaceTreeComponent.propDecorators = {
    moId: [{ type: Input }],
    node: [{ type: Input }],
    focusEmitter: [{ type: Input }],
    selectedNode: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OpcuaAddressSpaceTreeComponent, [{
        type: Component,
        args: [{
                selector: 'opcua-address-space-tree',
                template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node\n      *cdkTreeNodeDef=\"let node\"\n      (click)=\"toggleFocusedNode(node)\"\n      [ngClass]=\"{ strong: isFocusedNode(node) }\"\n      class=\"interact\"\n    >\n      <span>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n        ></i>\n        {{ node.displayName }}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button\n          cdkTreeNodeToggle\n          class=\"btn-clean text-primary m-r-4\"\n          [disabled]=\"node.currentlyLoadingChildren\"\n        >\n          <i\n            [ngClass]=\"{ 'dlt-c8y-icon-plus-square': !node.expanded, 'dlt-c8y-icon-minus-square': node.expanded }\"\n          ></i>\n        </button>\n        <i\n          class=\"m-r-4 interact\"\n          [c8yIcon]=\"getIcon(node.nodeClassName)\"\n        ></i>\n        <span\n          (click)=\"toggleFocusedNode(node)\"\n          [ngClass]=\"{ strong: isFocusedNode(node) }\"\n          class=\"interact\"\n        >\n          {{ node.displayName }}\n        </span>\n        <span\n          class=\"m-l-4\"\n          [style.visibility]=\"node.currentlyLoadingChildren ? 'visible' : 'hidden'\"\n        >\n          <i class=\"dlt-c8y-icon-circle-o-notch icon-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div class=\"p-8\" *ngIf=\"loading\">\n  <div class=\"spinner p-relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AddressSpaceService }, { type: ɵngcc2.OpcuaService }, { type: ɵngcc3.AlertService }]; }, { focusEmitter: [{
            type: Input
        }], selectedNode: [{
            type: Output
        }], moId: [{
            type: Input
        }], node: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,