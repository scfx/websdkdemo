import { __awaiter } from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { AddressSpaceService } from './address-space.service';
import { gettext } from '@c8y/ngx-components';
import { OpcuaService } from './opcuaService';
export class OpcuaAddressSpaceComponent {
    constructor(addressSpaceService, opcuaService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.selectednode = false;
        this.loading = false;
        this.searchInProgress = false;
        this.focusStatus = new EventEmitter();
        this.moId = '';
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.filterLabel = gettext('Filterâ€¦');
            this.moId = this.opcuaService.getMoId();
        });
    }
    ngOnDestroy() {
        // The BehaviourSubject will store the last array of ancestorNodes from the previous search
        // this would cause the component while subscribing in the init-phase to the subject to travers
        // to the last searched node again. From user perspective it does not make sense, because the user
        // left the Address space (tab) and should loose the context and just request a new search or
        // browse the tree manually.
        this.addressSpaceService.resetTreeToRootNode();
    }
    searchNodes() {
        return __awaiter(this, void 0, void 0, function* () {
            this.searchInProgress = true;
            this.clearNodeListAndCheckSearchString();
            if (this.isSearch) {
                this.currentNode = undefined;
                this.nodeList = yield this.addressSpaceService.getSearchedNodes(this.searchKey, this.moId);
                this.searchInProgress = false;
                this.nodeList.resultLabel = gettext('Results found');
            }
        });
    }
    clearNodeListAndCheckSearchString() {
        this.isSearch = this.searchKey !== undefined && this.searchKey !== '' ? true : false;
        if (!this.isSearch) {
            this.searchInProgress = false;
        }
    }
    clearSearch() {
        this.isSearch = false;
        this.searchKey = '';
        this.currentNode = undefined;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    selectNode(node) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node && node.nodeId && node.nodeId.length > 0) {
                const res = yield this.addressSpaceService.getNodeById(this.moId, node.nodeId);
                this.toggleCurrentNode((yield res.json()));
            }
        });
    }
    toggleCurrentNode(node) {
        this.currentNode = this.isNodeSet(node) ? undefined : node;
    }
    backHandler(node) {
        this.isSearch = false;
        this.focusStatus.emit(node);
        this.toggleCurrentNode(node);
    }
    isNodeSet(node) {
        if (this.currentNode !== undefined && this.currentNode.nodeId === node.nodeId) {
            return true;
        }
        return false;
    }
}
OpcuaAddressSpaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'opcua-address-space',
                template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-gray-lighter split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -4px 0;\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button *ngIf=\"!isSearch\" type=\"submit\" class=\"btn btn-clean\" (click)=\"searchNodes()\">\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button *ngIf=\"isSearch\" class=\"btn btn-clean\" (click)=\"clearSearch()\">\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em\n            >&nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div class=\"p-8\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <div class=\"spinner p-relative\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div\n          class=\"list-group list-group-links\"\n          *ngIf=\"isSearch && !loading\"\n          >\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item flex-row': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"m-r-4\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span>\n              {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none;\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n"
            },] }
];
OpcuaAddressSpaceComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService }
];
OpcuaAddressSpaceComponent.propDecorators = {
    focusStatus: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtYWRkcmVzcy1zcGFjZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm90b2NvbC1vcGN1YS9vcGN1YS1hZGRyZXNzLXNwYWNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxtQkFBbUIsRUFBb0IsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzlDLE1BQU0sT0FBTywwQkFBMEI7SUFhckMsWUFDVSxtQkFBd0MsRUFDeEMsWUFBMEI7UUFEMUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQWJwQyxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUc5QixZQUFPLEdBQVksS0FBSyxDQUFDO1FBQ3pCLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUt4QixnQkFBVyxHQUFtQyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUNyRixTQUFJLEdBQVcsRUFBRSxDQUFDO0lBSXZCLENBQUM7SUFFRSxRQUFROztZQUNaLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxDQUFDO0tBQUE7SUFFRCxXQUFXO1FBQ1QsMkZBQTJGO1FBQzNGLCtGQUErRjtRQUMvRixrR0FBa0c7UUFDbEcsNkZBQTZGO1FBQzdGLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUssV0FBVzs7WUFDZixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1lBQ3pDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN0RDtRQUNILENBQUM7S0FBQTtJQUVELGlDQUFpQztRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQsT0FBTyxDQUFDLGFBQXFCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUssVUFBVSxDQUFDLElBQUk7O1lBQ25CLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqRCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQy9FLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFxQixDQUFDLENBQUM7YUFDaEU7UUFDSCxDQUFDO0tBQUE7SUFFRCxpQkFBaUIsQ0FBQyxJQUFzQjtRQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdELENBQUM7SUFFRCxXQUFXLENBQUMsSUFBSTtRQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXNCO1FBQzlCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM3RSxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF0RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLHEzRkFBbUQ7YUFDcEQ7OztZQVRRLG1CQUFtQjtZQUduQixZQUFZOzs7MEJBa0JsQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFkZHJlc3NTcGFjZVNlcnZpY2UsIEFkZHJlc3NTcGFjZU5vZGUgfSBmcm9tICcuL2FkZHJlc3Mtc3BhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEeW5hbWljRGF0YVNvdXJjZSB9IGZyb20gJy4vZHluYW1pYy1kYXRhLXNvdXJjZSc7XG5pbXBvcnQgeyBPcGN1YVNlcnZpY2UgfSBmcm9tICcuL29wY3VhU2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnb3BjdWEtYWRkcmVzcy1zcGFjZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vcGN1YS1hZGRyZXNzLXNwYWNlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBPcGN1YUFkZHJlc3NTcGFjZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgY3VycmVudE5vZGU6IEFkZHJlc3NTcGFjZU5vZGU7XG4gIHNlbGVjdGVkbm9kZTogYm9vbGVhbiA9IGZhbHNlO1xuICBzZWFyY2hLZXk6IHN0cmluZztcbiAgaXNTZWFyY2g6IGJvb2xlYW47XG4gIGxvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2VhcmNoSW5Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlO1xuICBmaWx0ZXJMYWJlbDogc3RyaW5nO1xuICBkYXRhU291cmNlOiBEeW5hbWljRGF0YVNvdXJjZTtcbiAgbm9kZUxpc3Q7XG5cbiAgQE91dHB1dCgpIGZvY3VzU3RhdHVzOiBFdmVudEVtaXR0ZXI8QWRkcmVzc1NwYWNlTm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyPEFkZHJlc3NTcGFjZU5vZGU+KCk7XG4gIHByaXZhdGUgbW9JZDogc3RyaW5nID0gJyc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWRkcmVzc1NwYWNlU2VydmljZTogQWRkcmVzc1NwYWNlU2VydmljZSxcbiAgICBwcml2YXRlIG9wY3VhU2VydmljZTogT3BjdWFTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmZpbHRlckxhYmVsID0gZ2V0dGV4dCgnRmlsdGVy4oCmJyk7XG4gICAgdGhpcy5tb0lkID0gdGhpcy5vcGN1YVNlcnZpY2UuZ2V0TW9JZCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgLy8gVGhlIEJlaGF2aW91clN1YmplY3Qgd2lsbCBzdG9yZSB0aGUgbGFzdCBhcnJheSBvZiBhbmNlc3Rvck5vZGVzIGZyb20gdGhlIHByZXZpb3VzIHNlYXJjaFxuICAgIC8vIHRoaXMgd291bGQgY2F1c2UgdGhlIGNvbXBvbmVudCB3aGlsZSBzdWJzY3JpYmluZyBpbiB0aGUgaW5pdC1waGFzZSB0byB0aGUgc3ViamVjdCB0byB0cmF2ZXJzXG4gICAgLy8gdG8gdGhlIGxhc3Qgc2VhcmNoZWQgbm9kZSBhZ2Fpbi4gRnJvbSB1c2VyIHBlcnNwZWN0aXZlIGl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UsIGJlY2F1c2UgdGhlIHVzZXJcbiAgICAvLyBsZWZ0IHRoZSBBZGRyZXNzIHNwYWNlICh0YWIpIGFuZCBzaG91bGQgbG9vc2UgdGhlIGNvbnRleHQgYW5kIGp1c3QgcmVxdWVzdCBhIG5ldyBzZWFyY2ggb3JcbiAgICAvLyBicm93c2UgdGhlIHRyZWUgbWFudWFsbHkuXG4gICAgdGhpcy5hZGRyZXNzU3BhY2VTZXJ2aWNlLnJlc2V0VHJlZVRvUm9vdE5vZGUoKTtcbiAgfVxuXG4gIGFzeW5jIHNlYXJjaE5vZGVzKCkge1xuICAgIHRoaXMuc2VhcmNoSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgdGhpcy5jbGVhck5vZGVMaXN0QW5kQ2hlY2tTZWFyY2hTdHJpbmcoKTtcbiAgICBpZiAodGhpcy5pc1NlYXJjaCkge1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMubm9kZUxpc3QgPSBhd2FpdCB0aGlzLmFkZHJlc3NTcGFjZVNlcnZpY2UuZ2V0U2VhcmNoZWROb2Rlcyh0aGlzLnNlYXJjaEtleSwgdGhpcy5tb0lkKTtcbiAgICAgIHRoaXMuc2VhcmNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5ub2RlTGlzdC5yZXN1bHRMYWJlbCA9IGdldHRleHQoJ1Jlc3VsdHMgZm91bmQnKTtcbiAgICB9XG4gIH1cblxuICBjbGVhck5vZGVMaXN0QW5kQ2hlY2tTZWFyY2hTdHJpbmcoKSB7XG4gICAgdGhpcy5pc1NlYXJjaCA9IHRoaXMuc2VhcmNoS2V5ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zZWFyY2hLZXkgIT09ICcnID8gdHJ1ZSA6IGZhbHNlO1xuICAgIGlmICghdGhpcy5pc1NlYXJjaCkge1xuICAgICAgdGhpcy5zZWFyY2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJTZWFyY2goKSB7XG4gICAgdGhpcy5pc1NlYXJjaCA9IGZhbHNlO1xuICAgIHRoaXMuc2VhcmNoS2V5ID0gJyc7XG4gICAgdGhpcy5jdXJyZW50Tm9kZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldEljb24obm9kZUNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkcmVzc1NwYWNlU2VydmljZS5nZXRJY29uKG5vZGVDbGFzc05hbWUpO1xuICB9XG5cbiAgYXN5bmMgc2VsZWN0Tm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlSWQgJiYgbm9kZS5ub2RlSWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5hZGRyZXNzU3BhY2VTZXJ2aWNlLmdldE5vZGVCeUlkKHRoaXMubW9JZCwgbm9kZS5ub2RlSWQpO1xuICAgICAgdGhpcy50b2dnbGVDdXJyZW50Tm9kZSgoYXdhaXQgcmVzLmpzb24oKSkgYXMgQWRkcmVzc1NwYWNlTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlQ3VycmVudE5vZGUobm9kZTogQWRkcmVzc1NwYWNlTm9kZSkge1xuICAgIHRoaXMuY3VycmVudE5vZGUgPSB0aGlzLmlzTm9kZVNldChub2RlKSA/IHVuZGVmaW5lZCA6IG5vZGU7XG4gIH1cblxuICBiYWNrSGFuZGxlcihub2RlKSB7XG4gICAgdGhpcy5pc1NlYXJjaCA9IGZhbHNlO1xuICAgIHRoaXMuZm9jdXNTdGF0dXMuZW1pdChub2RlKTtcbiAgICB0aGlzLnRvZ2dsZUN1cnJlbnROb2RlKG5vZGUpO1xuICB9XG5cbiAgaXNOb2RlU2V0KG5vZGU6IEFkZHJlc3NTcGFjZU5vZGUpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY3VycmVudE5vZGUubm9kZUlkID09PSBub2RlLm5vZGVJZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19