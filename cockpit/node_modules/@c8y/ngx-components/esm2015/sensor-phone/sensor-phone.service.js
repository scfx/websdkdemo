import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DeviceRegistrationService, InventoryService } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { head } from 'lodash-es';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
export class SensorPhoneService {
    constructor(ui, inventoryService, deviceRegistrationService) {
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.deviceRegistrationService = deviceRegistrationService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
    createPhoneRegistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.addPhoneGroup();
            const device = { id: deviceId, groupId: group.id };
            const { res } = yield this.deviceRegistrationService.create(device);
            if (res.status !== this.HTTP_STATUS_CODE.CREATED) {
                throw res;
            }
        });
    }
    acceptPhoneReqistrationRequest(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { res } = yield this.deviceRegistrationService.accept(deviceId);
            if (res.status !== this.HTTP_STATUS_CODE.OK) {
                throw res;
            }
        });
    }
}
SensorPhoneService.ɵfac = function SensorPhoneService_Factory(t) { return new (t || SensorPhoneService)(ɵngcc0.ɵɵinject(ɵngcc1.AppStateService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc2.DeviceRegistrationService)); };
SensorPhoneService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SensorPhoneService, factory: SensorPhoneService.ɵfac });
SensorPhoneService.ctorParameters = () => [
    { type: AppStateService },
    { type: InventoryService },
    { type: DeviceRegistrationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SensorPhoneService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AppStateService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc2.DeviceRegistrationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlbnNvci1waG9uZS9zZW5zb3ItcGhvbmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7O0FBR2pDLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFTRSxZQUNVLEVBQW1CLEVBQ25CLGdCQUFrQyxFQUNsQyx5QkFBb0Q7QUFDN0QsUUFIUyxPQUFFLEdBQUYsRUFBRSxDQUFpQjtBQUFDLFFBQ3BCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO0FBQ2hFLFFBYlcscUJBQWdCLEdBQUc7QUFDOUIsWUFBSSxFQUFFLEVBQUUsR0FBRztBQUNYLFlBQUksT0FBTyxFQUFFLEdBQUc7QUFDaEIsU0FBRyxDQUFDO0FBQ0osUUFFVSx5QkFBb0IsR0FBRyx3QkFBd0IsQ0FBQztBQUMxRCxRQUFtQixxQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEQsUUFNSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDM0MsWUFBTSxJQUFJLElBQUksRUFBRTtBQUNoQixnQkFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDMUMsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2xDLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxD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QUcsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hFLFlBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7QUFDdEQsZ0JBQU0sTUFBTSxHQUFHLENBQUM7QUFDaEIsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNRLDhCQUE4QixDQUFDLFFBQVE7QUFDL0M7QUFBOEQsWUFBMUQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRSxZQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFO0FBQ2pELGdCQUFNLE1BQU0sR0FBRyxDQUFDO0FBQ2hCLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7OENBM0ZDLFVBQVU7b0lBQ1Q7QUFBQztBQUNVLFlBTEosZUFBZTtBQUFJLFlBRFEsZ0JBQWdCO0FBQUksWUFBL0MseUJBQXlCO0FBQUc7OzsrSkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZSwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgaGVhZCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZW5zb3JQaG9uZVNlcnZpY2Uge1xuICByZWFkb25seSBIVFRQX1NUQVRVU19DT0RFID0ge1xuICAgIE9LOiAyMDAsXG4gICAgQ1JFQVRFRDogMjAxXG4gIH07XG4gIHByaXZhdGUgZG9tYWluTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHRlbmFudElkOiBzdHJpbmc7XG4gIHByaXZhdGUgUEhPTkVfR1JPVVBfRlJBR01FTlQgPSAnYzh5X0lzU2Vuc29yUGhvbmVHcm91cCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgUEhPTkVfR1JPVVBfTkFNRSA9IGdldHRleHQoJ1Bob25lcycpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlOiBEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMudWkuY3VycmVudFRlbmFudC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICB0aGlzLmRvbWFpbk5hbWUgPSBkYXRhLmRvbWFpbk5hbWU7XG4gICAgICAgIHRoaXMudGVuYW50SWQgPSBkYXRhLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRIb3N0KCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3Vic3RyaW5nKHRoaXMuZG9tYWluTmFtZS5pbmRleE9mKCcuJykgKyAxKTtcbiAgfVxuXG4gIGdldFRlbmFudE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluTmFtZS5zcGxpdCgnLicpWzBdO1xuICB9XG5cbiAgZ2V0VGVuYW50SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVuYW50SWQ7XG4gIH1cblxuICBhc3luYyBjaGVja1Bob25lR3JvdXBFeGlzdHMoKSB7XG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KHtcbiAgICAgIGZyYWdtZW50VHlwZTogdGhpcy5QSE9ORV9HUk9VUF9GUkFHTUVOVFxuICAgIH0pO1xuICAgIGlmIChkYXRhICYmIHJlcyAmJiByZXMuc3RhdHVzID09PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuT0spIHtcbiAgICAgIHJldHVybiBoZWFkKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGFkZFBob25lR3JvdXAoKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCB0aGlzLmNoZWNrUGhvbmVHcm91cEV4aXN0cygpO1xuICAgIGlmIChncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVQaG9uZUdyb3VwKCk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IG5ld1Bob25lR3JvdXAgPSB7XG4gICAgICBjOHlfR2xvYmFsOiB7fSxcbiAgICAgIGM4eV9Jc0RldmljZUdyb3VwOiB7fSxcbiAgICAgIHR5cGU6ICdjOHlfRGV2aWNlR3JvdXAnLFxuICAgICAgbmFtZTogdGhpcy5QSE9ORV9HUk9VUF9OQU1FLFxuICAgICAgW3RoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRdOiB7fVxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIHJlcyB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmNyZWF0ZShuZXdQaG9uZUdyb3VwKTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLkNSRUFURUQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdlbmVyYXRlUmVnaXN0cmF0aW9uRGF0YShkZXZpY2VJZCkge1xuICAgIGNvbnN0IHJlcyA9ICdjOHk6Ly8nICsgdGhpcy5nZXRUZW5hbnROYW1lKCkgKyAnLicgKyB0aGlzLmdldEhvc3QoKSArICcvP2RldmljZUlkPScgKyBkZXZpY2VJZDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGhvbmVSZWdpc3RyYXRpb25SZXF1ZXN0KGRldmljZUlkKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCB0aGlzLmFkZFBob25lR3JvdXAoKTtcbiAgICBjb25zdCBkZXZpY2UgPSB7IGlkOiBkZXZpY2VJZCwgZ3JvdXBJZDogZ3JvdXAuaWQgfTtcblxuICAgIGNvbnN0IHsgcmVzIH0gPSBhd2FpdCB0aGlzLmRldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UuY3JlYXRlKGRldmljZSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT09IHRoaXMuSFRUUF9TVEFUVVNfQ09ERS5DUkVBVEVEKSB7XG4gICAgICB0aHJvdyByZXM7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWNjZXB0UGhvbmVSZXFpc3RyYXRpb25SZXF1ZXN0KGRldmljZUlkKSB7XG4gICAgY29uc3QgeyByZXMgfSA9IGF3YWl0IHRoaXMuZGV2aWNlUmVnaXN0cmF0aW9uU2VydmljZS5hY2NlcHQoZGV2aWNlSWQpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuT0spIHtcbiAgICAgIHRocm93IHJlcztcbiAgICB9XG4gIH1cbn1cbiJdfQ==