import { gettext } from '@c8y/ngx-components';
export const MESSAGES = {
    '^Sender name$': {
        gettext: gettext('Sender name')
    },
    '^Sender name used for sent SMS$': {
        gettext: gettext('Sender name used for sent SMS')
    },
    '^Sender address$': {
        gettext: gettext('Sender address')
    },
    '^Sender address used for sent SMS$': {
        gettext: gettext('Sender address used for sent SMS')
    },
    '^Username$': {
        gettext: gettext('Username')
    },
    '^Password$': {
        gettext: gettext('Password')
    },
    '^Licence key$': {
        gettext: gettext('License key')
    },
    '^Key$': {
        gettext: gettext('Key')
    },
    '^API base URL$': {
        gettext: gettext('API base URL')
    },
    '^API URL$': {
        gettext: gettext('API URL')
    },
    '^oauth$': {
        gettext: gettext('OAuth')
    },
    '^basic$': {
        gettext: gettext('Basic')
    },
    '^Authentication method$': {
        gettext: gettext('Authentication method')
    },
    '^Defines which authentication method is used with the provider$': {
        gettext: gettext('Defines which authentication method is used with the provider')
    },
    '^Static headers$': {
        gettext: gettext('Static headers')
    },
    '^Static headers that should be added to requests towards the provider$': {
        gettext: gettext('Static headers that should be added to requests towards the provider')
    },
    '^OAuth token URL$': {
        gettext: gettext('OAuth token URL')
    },
    '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {
        gettext: gettext('URL where the OAuth token is requested from (required if OAuth method is chosen)')
    },
    '^OAuth toke mime type$': {
        gettext: gettext('OAuth token mime type')
    },
    '^Overrides the OAuth token response mime type$': {
        gettext: gettext('Overrides the OAuth token response mime type')
    },
    '^OAuth access toke type$': {
        gettext: gettext('OAuth access token type')
    },
    '^Overrides the OAuth access token type$': {
        gettext: gettext('Overrides the OAuth access token type')
    },
    '^Global configuration$': {
        gettext: gettext('Global configuration')
    },
    '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {
        gettext: gettext('Enables or disables the settings globally for all tenants (only possible in management tenant)')
    },
    '^API key$': {
        gettext: gettext('API key')
    },
    '^Inherit to subtenants$': {
        gettext: gettext('Inherit to subtenants')
    },
    "^Enables or disables if this tenant's configuration may be inherited to subtenants$": {
        gettext: gettext('Enables or disables the option to inherit the tenant configuration to subtenants')
    },
    '^Login$': {
        gettext: gettext('Login')
    },
    '^Source business unit ID$': {
        gettext: gettext('Source business unit ID')
    },
    '^Client ID$': {
        gettext: gettext('Client ID')
    },
    '^Client secret$': {
        gettext: gettext('Client secret')
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi1tZXNzYWdlcy5kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc21zLWdhdGV3YXkvcGF0dGVybi1tZXNzYWdlcy5kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU5QyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdEIsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7S0FDaEM7SUFDRCxpQ0FBaUMsRUFBRTtRQUNqQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO0tBQ2xEO0lBQ0Qsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztLQUNuQztJQUNELG9DQUFvQyxFQUFFO1FBQ3BDLE9BQU8sRUFBRSxPQUFPLENBQUMsa0NBQWtDLENBQUM7S0FDckQ7SUFDRCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUM3QjtJQUNELFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQzdCO0lBQ0QsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7S0FDaEM7SUFDRCxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUN4QjtJQUNELGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO0tBQ2pDO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDNUI7SUFDRCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUMxQjtJQUNELFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDO0tBQzFCO0lBQ0QseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUMxQztJQUNELGlFQUFpRSxFQUFFO1FBQ2pFLE9BQU8sRUFBRSxPQUFPLENBQUMsK0RBQStELENBQUM7S0FDbEY7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0tBQ25DO0lBQ0Qsd0VBQXdFLEVBQUU7UUFDeEUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxzRUFBc0UsQ0FBQztLQUN6RjtJQUNELG1CQUFtQixFQUFFO1FBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7S0FDcEM7SUFDRCxvRkFBb0YsRUFBRTtRQUNwRixPQUFPLEVBQUUsT0FBTyxDQUNkLGtGQUFrRixDQUNuRjtLQUNGO0lBQ0Qsd0JBQXdCLEVBQUU7UUFDeEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUMxQztJQUNELGdEQUFnRCxFQUFFO1FBQ2hELE9BQU8sRUFBRSxPQUFPLENBQUMsOENBQThDLENBQUM7S0FDakU7SUFDRCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0tBQzVDO0lBQ0QseUNBQXlDLEVBQUU7UUFDekMsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztLQUMxRDtJQUNELHdCQUF3QixFQUFFO1FBQ3hCLE9BQU8sRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7S0FDekM7SUFDRCxpSEFBaUgsRUFBRTtRQUNqSCxPQUFPLEVBQUUsT0FBTyxDQUNkLGdHQUFnRyxDQUNqRztLQUNGO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDNUI7SUFDRCx5QkFBeUIsRUFBRTtRQUN6QixPQUFPLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0tBQzFDO0lBQ0QscUZBQXFGLEVBQUU7UUFDckYsT0FBTyxFQUFFLE9BQU8sQ0FDZCxrRkFBa0YsQ0FDbkY7S0FDRjtJQUNELFNBQVMsRUFBRTtRQUNULE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDO0tBQzFCO0lBQ0QsMkJBQTJCLEVBQUU7UUFDM0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztLQUM1QztJQUNELGFBQWEsRUFBRTtRQUNiLE9BQU8sRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO0tBQzlCO0lBQ0QsaUJBQWlCLEVBQUU7UUFDakIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7S0FDbEM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgTUVTU0FHRVMgPSB7XG4gICdeU2VuZGVyIG5hbWUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NlbmRlciBuYW1lJylcbiAgfSxcbiAgJ15TZW5kZXIgbmFtZSB1c2VkIGZvciBzZW50IFNNUyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU2VuZGVyIG5hbWUgdXNlZCBmb3Igc2VudCBTTVMnKVxuICB9LFxuICAnXlNlbmRlciBhZGRyZXNzJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTZW5kZXIgYWRkcmVzcycpXG4gIH0sXG4gICdeU2VuZGVyIGFkZHJlc3MgdXNlZCBmb3Igc2VudCBTTVMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NlbmRlciBhZGRyZXNzIHVzZWQgZm9yIHNlbnQgU01TJylcbiAgfSxcbiAgJ15Vc2VybmFtZSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlcm5hbWUnKVxuICB9LFxuICAnXlBhc3N3b3JkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQYXNzd29yZCcpXG4gIH0sXG4gICdeTGljZW5jZSBrZXkkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0xpY2Vuc2Uga2V5JylcbiAgfSxcbiAgJ15LZXkkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0tleScpXG4gIH0sXG4gICdeQVBJIGJhc2UgVVJMJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBUEkgYmFzZSBVUkwnKVxuICB9LFxuICAnXkFQSSBVUkwkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FQSSBVUkwnKVxuICB9LFxuICAnXm9hdXRoJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPQXV0aCcpXG4gIH0sXG4gICdeYmFzaWMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Jhc2ljJylcbiAgfSxcbiAgJ15BdXRoZW50aWNhdGlvbiBtZXRob2QkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0F1dGhlbnRpY2F0aW9uIG1ldGhvZCcpXG4gIH0sXG4gICdeRGVmaW5lcyB3aGljaCBhdXRoZW50aWNhdGlvbiBtZXRob2QgaXMgdXNlZCB3aXRoIHRoZSBwcm92aWRlciQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRGVmaW5lcyB3aGljaCBhdXRoZW50aWNhdGlvbiBtZXRob2QgaXMgdXNlZCB3aXRoIHRoZSBwcm92aWRlcicpXG4gIH0sXG4gICdeU3RhdGljIGhlYWRlcnMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1N0YXRpYyBoZWFkZXJzJylcbiAgfSxcbiAgJ15TdGF0aWMgaGVhZGVycyB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byByZXF1ZXN0cyB0b3dhcmRzIHRoZSBwcm92aWRlciQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU3RhdGljIGhlYWRlcnMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gcmVxdWVzdHMgdG93YXJkcyB0aGUgcHJvdmlkZXInKVxuICB9LFxuICAnXk9BdXRoIHRva2VuIFVSTCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT0F1dGggdG9rZW4gVVJMJylcbiAgfSxcbiAgJ15VUkwgd2hlcmUgdGhlIE9BdXRoIHRva2VuIGlzIHJlcXVlc3RlZCBmcm9tIChyZXF1aXJlZCBpZiBPQXV0aCBtZXRob2QgaXMgY2hvc2VuKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dChcbiAgICAgICdVUkwgd2hlcmUgdGhlIE9BdXRoIHRva2VuIGlzIHJlcXVlc3RlZCBmcm9tIChyZXF1aXJlZCBpZiBPQXV0aCBtZXRob2QgaXMgY2hvc2VuKSdcbiAgICApXG4gIH0sXG4gICdeT0F1dGggdG9rZSBtaW1lIHR5cGUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ09BdXRoIHRva2VuIG1pbWUgdHlwZScpXG4gIH0sXG4gICdeT3ZlcnJpZGVzIHRoZSBPQXV0aCB0b2tlbiByZXNwb25zZSBtaW1lIHR5cGUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ092ZXJyaWRlcyB0aGUgT0F1dGggdG9rZW4gcmVzcG9uc2UgbWltZSB0eXBlJylcbiAgfSxcbiAgJ15PQXV0aCBhY2Nlc3MgdG9rZSB0eXBlJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPQXV0aCBhY2Nlc3MgdG9rZW4gdHlwZScpXG4gIH0sXG4gICdeT3ZlcnJpZGVzIHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gdHlwZSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3ZlcnJpZGVzIHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gdHlwZScpXG4gIH0sXG4gICdeR2xvYmFsIGNvbmZpZ3VyYXRpb24kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0dsb2JhbCBjb25maWd1cmF0aW9uJylcbiAgfSxcbiAgJ15FbmFibGVzIG9yIGRpc2FibGVzIGlmIHRoZSBzZXR0aW5ncyBtYXkgYmUgdXNlZCBnbG9iYWxseSBmb3IgYWxsIHRlbmFudHMgKE9ubHkgcG9zc2libGUgaW4gbWFuYWdlbWVudCB0ZW5hbnQpJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KFxuICAgICAgJ0VuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIHNldHRpbmdzIGdsb2JhbGx5IGZvciBhbGwgdGVuYW50cyAob25seSBwb3NzaWJsZSBpbiBtYW5hZ2VtZW50IHRlbmFudCknXG4gICAgKVxuICB9LFxuICAnXkFQSSBrZXkkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FQSSBrZXknKVxuICB9LFxuICAnXkluaGVyaXQgdG8gc3VidGVuYW50cyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnSW5oZXJpdCB0byBzdWJ0ZW5hbnRzJylcbiAgfSxcbiAgXCJeRW5hYmxlcyBvciBkaXNhYmxlcyBpZiB0aGlzIHRlbmFudCdzIGNvbmZpZ3VyYXRpb24gbWF5IGJlIGluaGVyaXRlZCB0byBzdWJ0ZW5hbnRzJFwiOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dChcbiAgICAgICdFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBvcHRpb24gdG8gaW5oZXJpdCB0aGUgdGVuYW50IGNvbmZpZ3VyYXRpb24gdG8gc3VidGVuYW50cydcbiAgICApXG4gIH0sXG4gICdeTG9naW4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0xvZ2luJylcbiAgfSxcbiAgJ15Tb3VyY2UgYnVzaW5lc3MgdW5pdCBJRCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU291cmNlIGJ1c2luZXNzIHVuaXQgSUQnKVxuICB9LFxuICAnXkNsaWVudCBJRCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2xpZW50IElEJylcbiAgfSxcbiAgJ15DbGllbnQgc2VjcmV0JCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDbGllbnQgc2VjcmV0JylcbiAgfVxufTtcbiJdfQ==