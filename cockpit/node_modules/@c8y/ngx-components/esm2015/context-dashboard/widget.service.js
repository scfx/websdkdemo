import { __awaiter } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { sortBy, cloneDeep, get } from 'lodash-es';
import { DynamicComponentService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@ngx-translate/core";
import * as i3 from "./context-dashboard.model";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@ngx-translate/core';
export class WidgetService {
    constructor(dynamicComponentService, translateService, moduleConfig) {
        this.dynamicComponentService = dynamicComponentService;
        this.translateService = translateService;
        this.moduleConfig = moduleConfig;
        this.dynamicComponentService.items$.subscribe(widgets => {
            this.widgets = widgets;
        });
    }
    getWidgetDefinition(componentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dynamicComponentService.getById(componentId);
        });
    }
    getWidgetDefinitions() {
        const translatedComponents = this.widgets.map(cmp => (Object.assign(Object.assign({}, cmp), { label: this.translateService.instant(cmp.label) })));
        return cloneDeep(sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
    }
    mapLegacy(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.getWidgetDefinition(widget.componentId || widget.name);
            if (get(cmp, 'data.settings.upgrade')) {
                widget.widgetComponent = cmp.data.settings.widgetComponent;
                widget.configComponent = cmp.data.settings.configComponent;
                widget.templateUrl = cmp.data.settings.templateUrl;
                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                widget.transformConfigWithContext =
                    cmp.data.settings.componentTransformConfigWithContext ||
                        cmp.data.settings.transformConfigWithContext ||
                        widget.transformConfigWithContext;
            }
            else {
                delete widget.templateUrl;
                delete widget.configTemplateUrl;
            }
            return widget;
        });
    }
}
WidgetService.ɵfac = function WidgetService_Factory(t) { return new (t || WidgetService)(ɵngcc0.ɵɵinject(ɵngcc1.DynamicComponentService), ɵngcc0.ɵɵinject(ɵngcc2.TranslateService), ɵngcc0.ɵɵinject(CONTEXT_DASHBOARD_CONFIG, 8)); };
WidgetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(i0.ɵɵinject(i1.DynamicComponentService), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.CONTEXT_DASHBOARD_CONFIG, 8)); }, token: WidgetService, providedIn: "root" });
WidgetService.ctorParameters = () => [
    { type: DynamicComponentService },
    { type: TranslateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.DynamicComponentService }, { type: ɵngcc2.TranslateService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [CONTEXT_DASHBOARD_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3dpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBc0MsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQTBCLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0Y7QUFHQztBQUVXO0FBRUM7Ozs7QUFIYixNQUFNLE9BQU8sYUFBYTtBQUMxQixJQUVFLFlBQ1UsdUJBQWdELEVBQ2hELGdCQUFrQyxFQUduQyxZQUFvQztBQUM1QyxRQUxTLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7QUFBQyxRQUNqRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFHcEMsaUJBQVksR0FBWixZQUFZLENBQXdCO0FBQy9DLFFBQ0ksSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDNUQsWUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUM3QixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDUSxtQkFBbUIsQ0FBQyxXQUFXO0FBQUk7QUFDbEIsWUFBckIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdELFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLG9CQUFvQjtBQUN0QixRQUFJLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxpQ0FDaEQsR0FBRyxLQUNOLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFDL0MsQ0FBQyxDQUFDO0FBQ1IsUUFDSSxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNuRyxJQUFFLENBQUM7QUFDSCxJQUNRLFNBQVMsQ0FBQyxNQUF1QjtBQUFJO0FBQ0EsWUFBekMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEYsWUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsRUFBRTtBQUMzQyxnQkFBTSxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztBQUNqRSxnQkFBTSxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztBQUNqRSxnQkFBTSxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztBQUN6RCxnQkFBTSxNQUFNLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUM7QUFDckUsZ0JBQU0sTUFBTSxDQUFDLDBCQUEwQjtBQUN2QyxvQkFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUM7QUFDN0Qsd0JBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCO0FBQ3BELHdCQUFRLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztBQUMxQyxhQUFLO0FBQUMsaUJBQUs7QUFDWCxnQkFBTSxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDaEMsZ0JBQU0sT0FBTyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDdEMsYUFBSztBQUNMLFlBQUksT0FBTyxNQUFnQixDQUFDO0FBQzVCLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDtxT0FBQztBQUNELDJSQTlDSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUlJLFlBUlAsdUJBQXVCO0FBSzlCLFVBQVUsRUFBRSxNQUFNLGxCQUxnQixZQUMzQixnQkFBZ0I7QUFLeEIsQUFMNEIsNENBWXhCLFFBQVEsWUFDUixNQUFNLFNBQUMsd0JBQXdCO0FBQzlCOzs7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgc29ydEJ5LCBjbG9uZURlZXAsIGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBEeW5hbWljQ29tcG9uZW50U2VydmljZSwgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24sIFdpZGdldCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZENvbmZpZywgQ09OVEVYVF9EQVNIQk9BUkRfQ09ORklHIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFdpZGdldFNlcnZpY2Uge1xuICB3aWRnZXRzOiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZHluYW1pY0NvbXBvbmVudFNlcnZpY2U6IER5bmFtaWNDb21wb25lbnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQ09OVEVYVF9EQVNIQk9BUkRfQ09ORklHKVxuICAgIHB1YmxpYyBtb2R1bGVDb25maWc6IENvbnRleHREYXNoYm9hcmRDb25maWdcbiAgKSB7XG4gICAgdGhpcy5keW5hbWljQ29tcG9uZW50U2VydmljZS5pdGVtcyQuc3Vic2NyaWJlKHdpZGdldHMgPT4ge1xuICAgICAgdGhpcy53aWRnZXRzID0gd2lkZ2V0cztcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFdpZGdldERlZmluaXRpb24oY29tcG9uZW50SWQpOiBQcm9taXNlPER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZHluYW1pY0NvbXBvbmVudFNlcnZpY2UuZ2V0QnlJZChjb21wb25lbnRJZCk7XG4gIH1cblxuICBnZXRXaWRnZXREZWZpbml0aW9ucygpIHtcbiAgICBjb25zdCB0cmFuc2xhdGVkQ29tcG9uZW50cyA9IHRoaXMud2lkZ2V0cy5tYXAoY21wID0+ICh7XG4gICAgICAuLi5jbXAsXG4gICAgICBsYWJlbDogdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoY21wLmxhYmVsKVxuICAgIH0pKTtcblxuICAgIHJldHVybiBjbG9uZURlZXAoc29ydEJ5KHRyYW5zbGF0ZWRDb21wb25lbnRzLCAnbGFiZWwnKS5maWx0ZXIodGhpcy5tb2R1bGVDb25maWcud2lkZ2V0RmlsdGVyKSk7XG4gIH1cblxuICBhc3luYyBtYXBMZWdhY3kod2lkZ2V0OiBQYXJ0aWFsPFdpZGdldD4pOiBQcm9taXNlPFdpZGdldD4ge1xuICAgIGNvbnN0IGNtcCA9IGF3YWl0IHRoaXMuZ2V0V2lkZ2V0RGVmaW5pdGlvbih3aWRnZXQuY29tcG9uZW50SWQgfHwgd2lkZ2V0Lm5hbWUpO1xuICAgIGlmIChnZXQoY21wLCAnZGF0YS5zZXR0aW5ncy51cGdyYWRlJykpIHtcbiAgICAgIHdpZGdldC53aWRnZXRDb21wb25lbnQgPSBjbXAuZGF0YS5zZXR0aW5ncy53aWRnZXRDb21wb25lbnQ7XG4gICAgICB3aWRnZXQuY29uZmlnQ29tcG9uZW50ID0gY21wLmRhdGEuc2V0dGluZ3MuY29uZmlnQ29tcG9uZW50O1xuICAgICAgd2lkZ2V0LnRlbXBsYXRlVXJsID0gY21wLmRhdGEuc2V0dGluZ3MudGVtcGxhdGVVcmw7XG4gICAgICB3aWRnZXQuY29uZmlnVGVtcGxhdGVVcmwgPSBjbXAuZGF0YS5zZXR0aW5ncy5jb25maWdUZW1wbGF0ZVVybDtcbiAgICAgIHdpZGdldC50cmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dCA9XG4gICAgICAgIGNtcC5kYXRhLnNldHRpbmdzLmNvbXBvbmVudFRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0IHx8XG4gICAgICAgIGNtcC5kYXRhLnNldHRpbmdzLnRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0IHx8XG4gICAgICAgIHdpZGdldC50cmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHdpZGdldC50ZW1wbGF0ZVVybDtcbiAgICAgIGRlbGV0ZSB3aWRnZXQuY29uZmlnVGVtcGxhdGVVcmw7XG4gICAgfVxuICAgIHJldHVybiB3aWRnZXQgYXMgV2lkZ2V0O1xuICB9XG59XG4iXX0=