import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE, ViewContext } from '@c8y/ngx-components';
import { ContextDashboardModule } from '../context-dashboard.module';
import { ContextDashboardComponent } from '../context-dashboard.component';
import { ReportDashboardGuard } from './report-dashboard.guard';
import { ReportDashboardNavigationFactory } from './report-dashboard-navigation.factory';
import { ReportDashboardListComponent } from './report-dashboard-list.component';
import { ReportDashboardService } from './report-dashboard.service';
const ɵ0 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
export class ReportDashboardModule {
}
ReportDashboardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ReportDashboardListComponent],
                entryComponents: [],
                imports: [
                    CoreModule,
                    ContextDashboardModule,
                    RouterModule.forChild([
                        {
                            path: 'reports',
                            component: ReportDashboardListComponent
                        }
                    ])
                ],
                providers: [
                    ReportDashboardGuard,
                    ReportDashboardNavigationFactory,
                    ReportDashboardService,
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: ReportDashboardNavigationFactory,
                        multi: true
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxVQUFVLEVBQ1Ysb0JBQW9CLEVBQ3BCLFVBQVUsRUFDVixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztXQXFCcEQ7SUFDUjtRQUNFLElBQUksRUFBRSx3QkFBd0I7UUFDOUIsU0FBUyxFQUFFLHlCQUF5QjtRQUNwQyxXQUFXLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztRQUNuQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07S0FDNUI7Q0FDRjtBQVVQLE1BQU0sT0FBTyxxQkFBcUI7OztZQXBDakMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLDRCQUE0QixDQUFDO2dCQUM1QyxlQUFlLEVBQUUsRUFBRTtnQkFDbkIsT0FBTyxFQUFFO29CQUNQLFVBQVU7b0JBQ1Ysc0JBQXNCO29CQUN0QixZQUFZLENBQUMsUUFBUSxDQUFDO3dCQUNwQjs0QkFDRSxJQUFJLEVBQUUsU0FBUzs0QkFDZixTQUFTLEVBQUUsNEJBQTRCO3lCQUN4QztxQkFDRixDQUFDO2lCQUNIO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxvQkFBb0I7b0JBQ3BCLGdDQUFnQztvQkFDaEMsc0JBQXNCO29CQUN0Qjt3QkFDRSxPQUFPLEVBQUUsVUFBVTt3QkFDbkIsUUFBUSxJQU9QO3dCQUNELEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxvQkFBb0I7d0JBQzdCLFFBQVEsRUFBRSxnQ0FBZ0M7d0JBQzFDLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIENvcmVNb2R1bGUsXG4gIEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICBIT09LX1JPVVRFLFxuICBWaWV3Q29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRNb2R1bGUgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5tb2R1bGUnO1xuXG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQuY29tcG9uZW50JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZEd1YXJkIH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLmd1YXJkJztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZE5hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLW5hdmlnYXRpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBSZXBvcnREYXNoYm9hcmRMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1JlcG9ydERhc2hib2FyZExpc3RDb21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBDb250ZXh0RGFzaGJvYXJkTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZS5mb3JDaGlsZChbXG4gICAgICB7XG4gICAgICAgIHBhdGg6ICdyZXBvcnRzJyxcbiAgICAgICAgY29tcG9uZW50OiBSZXBvcnREYXNoYm9hcmRMaXN0Q29tcG9uZW50XG4gICAgICB9XG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgUmVwb3J0RGFzaGJvYXJkR3VhcmQsXG4gICAgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgUmVwb3J0RGFzaGJvYXJkU2VydmljZSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtSZXBvcnREYXNoYm9hcmRHdWFyZF0sXG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuUmVwb3J0XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSZXBvcnREYXNoYm9hcmRNb2R1bGUge31cbiJdfQ==