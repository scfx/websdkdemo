import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { NavigatorNode, NavigatorService, gettext } from '@c8y/ngx-components';
import { ReportDashboardService } from './report-dashboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from '@c8y/client';
import * as ɵngcc3 from './report-dashboard.service';
export class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    priority: 5
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority,
                        routerLinkExact: false
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
}
ReportDashboardNavigationFactory.ɵfac = function ReportDashboardNavigationFactory_Factory(t) { return new (t || ReportDashboardNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.NavigatorService), ɵngcc0.ɵɵinject(ɵngcc2.InventoryService), ɵngcc0.ɵɵinject(ɵngcc3.ReportDashboardService)); };
ReportDashboardNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReportDashboardNavigationFactory, factory: ReportDashboardNavigationFactory.ɵfac });
ReportDashboardNavigationFactory.ctorParameters = () => [
    { type: NavigatorService },
    { type: InventoryService },
    { type: ReportDashboardService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDashboardNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NavigatorService }, { type: ɵngcc2.InventoryService }, { type: ɵngcc3.ReportDashboardService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFrQixnQkFBZ0IsRUFBZSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQUdwRSxNQUFNLE9BQU8sZ0NBQWdDO0FBQzdDLElBRUUsWUFDVSxnQkFBa0MsRUFDbEMsZ0JBQWtDLEVBQ2xDLHNCQUE4QztBQUN2RCxRQUhTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDbkMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUMxRCxRQU5FLFdBQU0sR0FBWSxLQUFLLENBQUM7QUFDMUIsSUFLSyxDQUFDO0FBQ04sSUFDUSxHQUFHO0FBQ1g7QUFHVyxZQUhQLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3RCLGdCQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLGdCQUNNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQ3ZCLElBQUksYUFBYSxDQUFDO0FBQzFCLG9CQUFVLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ25DLG9CQUFVLElBQUksRUFBRSxTQUFTO0FBQ3pCLG9CQUFVLElBQUksRUFBRSxhQUFhO0FBQzdCLG9CQUFVLFFBQVEsRUFBRSxDQUFDO0FBQ3JCLGlCQUFTLENBQUMsQ0FDSCxDQUFDO0FBQ1IsZ0JBQ00sTUFBTSxPQUFPLEdBQXFCLENBQUMsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO0FBQ3ZGLG9CQUFRLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtBQUNoRCxvQkFBUSxRQUFRLEVBQUUsSUFBSTtBQUN0QixpQkFBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDZixnQkFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQy9CLG9CQUFRLE1BQU0sSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDO0FBQ3ZDLHdCQUFVLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSTtBQUM1Qix3QkFBVSxJQUFJLEVBQUUsV0FBVyxNQUFNLENBQUMsRUFBRSxFQUFFO0FBQ3RDLHdCQUFVLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtBQUMzQix3QkFBVSxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7QUFDbkMsd0JBQVUsZUFBZSxFQUFFLEtBQUs7QUFDaEMscUJBQVMsQ0FBQyxDQUFDO0FBQ1gsb0JBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxnQkFBTSxDQUFDLENBQUMsQ0FBQztBQUNULGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7NERBdkNDLFVBQVU7OEtBQ1Q7QUFBQztBQUNVLFlBTFcsZ0JBQWdCO0FBQUksWUFEbkIsZ0JBQWdCO0FBQUksWUFFcEMsc0JBQXNCO0FBQUc7Ozs2SkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9ydERhc2hib2FyZE5hdmlnYXRpb25GYWN0b3J5IHtcbiAgbG9hZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuYXZpZ2F0b3JTZXJ2aWNlOiBOYXZpZ2F0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIHJlcG9ydERhc2hib2FyZFNlcnZpY2U6IFJlcG9ydERhc2hib2FyZFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGdldCgpIHtcbiAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5hZGQoXG4gICAgICAgIG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnUmVwb3J0cycpLFxuICAgICAgICAgIHBhdGg6ICdyZXBvcnRzJyxcbiAgICAgICAgICBpY29uOiAnYzh5LXJlcG9ydHMnLFxuICAgICAgICAgIHByaW9yaXR5OiA1XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXBvcnRzOiBJTWFuYWdlZE9iamVjdFtdID0gKGF3YWl0IHRoaXMucmVwb3J0RGFzaGJvYXJkU2VydmljZS5saXN0UmVwb3J0cyh7XG4gICAgICAgIGZpbHRlcjogeyBfX2hhczogJ2M4eV9Jc05hdmlnYXRvck5vZGUnIH0sXG4gICAgICAgIHBhZ2VTaXplOiAyMDAwXG4gICAgICB9KSkuZGF0YTtcbiAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiByZXBvcnQubmFtZSxcbiAgICAgICAgICBwYXRoOiBgcmVwb3J0cy8ke3JlcG9ydC5pZH1gLFxuICAgICAgICAgIGljb246IHJlcG9ydC5pY29uLFxuICAgICAgICAgIHByaW9yaXR5OiByZXBvcnQucHJpb3JpdHksXG4gICAgICAgICAgcm91dGVyTGlua0V4YWN0OiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmFkZChub2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19