import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ROUTE } from '@c8y/ngx-components';
import { TenantsNavigationFactory } from './tenants-navigation.factory';
import { TenantListComponent } from './tenant-list/tenant-list.component';
import { CreationTimeFilteringFormRendererComponent } from './tenant-list/creation-time.filtering-form-renderer.component';
import { StatusFilteringFormRendererComponent } from './tenant-list/status.filtering-form-renderer.component';
import { TENANTS_MODULE_CONFIG } from './tenants.model';
import { TenantListGuard } from './tenant-list/tenant-list.guard';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = [
    {
        path: 'tenants',
        component: TenantListComponent,
        canActivate: [TenantListGuard]
    }
];
export class TenantsModule {
    static config(config = {}) {
        return {
            ngModule: TenantsModule,
            providers: [
                {
                    provide: TENANTS_MODULE_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
TenantsModule.ɵfac = function TenantsModule_Factory(t) { return new (t || TenantsModule)(); };
TenantsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TenantsModule });
TenantsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        TenantListGuard,
        {
            provide: HOOK_NAVIGATOR_NODES,
            useClass: TenantsNavigationFactory,
            multi: true
        },
        {
            provide: HOOK_ROUTE,
            useValue: ɵ0,
            multi: true
        }
    ], imports: [[
            RouterModule,
            BsDatepickerModule,
            CoreModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    RouterModule,
                    BsDatepickerModule,
                    CoreModule
                ],
                exports: [],
                declarations: [
                    TenantListComponent,
                    CreationTimeFilteringFormRendererComponent,
                    StatusFilteringFormRendererComponent
                ],
                entryComponents: [
                    TenantListComponent,
                    CreationTimeFilteringFormRendererComponent,
                    StatusFilteringFormRendererComponent
                ],
                providers: [
                    TenantListGuard,
                    {
                        provide: HOOK_NAVIGATOR_NODES,
                        useClass: TenantsNavigationFactory,
                        multi: true
                    },
                    {
                        provide: HOOK_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TenantsModule, { declarations: function () { return [TenantListComponent,
        CreationTimeFilteringFormRendererComponent,
        StatusFilteringFormRendererComponent]; }, imports: function () { return [RouterModule,
        BsDatepickerModule,
        CoreModule]; } }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RlbmFudHMvdGVuYW50cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTlELE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFTLE1BQU0scUJBQXFCLENBQUM7QUFDMUYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLDBDQUEwQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDM0gsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDOUcsT0FBTyxFQUF1QixxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFDbEUsV0EyQmdCO0FBQ2hCLElBQVE7QUFDUixRQUFVLElBQUksRUFBRSxTQUFTO0FBQ3pCLFFBQVUsU0FBUyxFQUFFLG1CQUFtQjtBQUN4QyxRQUFVLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUN4QyxLQUFTO0FBQ1QsQ0FBa0I7QUFLbEIsTUFBTSxPQUFPLGFBQWE7QUFDMUIsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQThCLEVBQUU7QUFBSSxRQUNoRCxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsYUFBYTtBQUM3QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxxQkFBcUI7QUFDeEMsb0JBQVUsUUFBUSxFQUFFLE1BQU07QUFDMUIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7eUNBakRDLFFBQVEsU0FBQyxrQkFDUixPQUFPLEVBQUU7WUFDUCxZQUFZLHNCQUNaLGtCQUFrQjtDQUNsQixVQUFVLGtCQUNYLGtCQUNELE9BQU8sRUFBRSxFQUFFO0VBQ1gsWUFBWSxFQUFFOztHQUNaLG1CQUFtQjtDQUNuQiwwQ0FBMEM7aUJBQzFDOzs7UUFBb0Msa0JBQ3JDO1dBQ0Q7QUFBZSxFQUFFO0FBQ2Y7U0FBbUI7WUFDbkI7NEJBQTBDO2tCQUMxQzs7Z0JBQW9DLGtCQUNyQyxrQkFDRCxTQUFTLEVBQUUsc0JBQ1QsZUFBZTthQUNmO2VBQ0U7S0FBTyxFQUFFO0FBQW9CLDBCQUM3QjtBQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLEtBQUssRUFBRSxJQUFJO2NBQ1o7aUJBQ0Q7Y0FDRSxPQUFPLEVBQUU7Q0FBVSwwQkFDbkIsUUFBUSxJQU1JO3dCQUNaLEtBQUssRUFBRSxJQUFJLHNCQUNaO1dBQ0YsY0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBQ0k7QUFBQztBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCc0RhdGVwaWNrZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2RhdGVwaWNrZXInO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBIT09LX05BVklHQVRPUl9OT0RFUywgSE9PS19ST1VURSwgUm91dGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRlbmFudHNOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vdGVuYW50cy1uYXZpZ2F0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgVGVuYW50TGlzdENvbXBvbmVudCB9IGZyb20gJy4vdGVuYW50LWxpc3QvdGVuYW50LWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IENyZWF0aW9uVGltZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vdGVuYW50LWxpc3QvY3JlYXRpb24tdGltZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RhdHVzRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi90ZW5hbnQtbGlzdC9zdGF0dXMuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRlbmFudHNNb2R1bGVDb25maWcsIFRFTkFOVFNfTU9EVUxFX0NPTkZJRyB9IGZyb20gJy4vdGVuYW50cy5tb2RlbCc7XG5pbXBvcnQgeyBUZW5hbnRMaXN0R3VhcmQgfSBmcm9tICcuL3RlbmFudC1saXN0L3RlbmFudC1saXN0Lmd1YXJkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFJvdXRlck1vZHVsZSxcbiAgICBCc0RhdGVwaWNrZXJNb2R1bGUsXG4gICAgQ29yZU1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgVGVuYW50TGlzdENvbXBvbmVudCxcbiAgICBDcmVhdGlvblRpbWVGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFRlbmFudExpc3RDb21wb25lbnQsXG4gICAgQ3JlYXRpb25UaW1lRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFN0YXR1c0ZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBUZW5hbnRMaXN0R3VhcmQsXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogVGVuYW50c05hdmlnYXRpb25GYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfUk9VVEUsXG4gICAgICB1c2VWYWx1ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogJ3RlbmFudHMnLFxuICAgICAgICAgIGNvbXBvbmVudDogVGVuYW50TGlzdENvbXBvbmVudCxcbiAgICAgICAgICBjYW5BY3RpdmF0ZTogW1RlbmFudExpc3RHdWFyZF1cbiAgICAgICAgfVxuICAgICAgXSBhcyBSb3V0ZVtdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGVuYW50c01vZHVsZSB7XG4gIHN0YXRpYyBjb25maWcoY29uZmlnOiBUZW5hbnRzTW9kdWxlQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRlbmFudHNNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFRlbmFudHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFRFTkFOVFNfTU9EVUxFX0NPTkZJRyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=