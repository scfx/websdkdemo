import { __awaiter } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { gettext, NavigatorNode } from '@c8y/ngx-components';
import { TenantListGuard } from './tenant-list/tenant-list.guard';
import { TENANTS_MODULE_CONFIG } from './tenants.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tenant-list/tenant-list.guard';
export class TenantsNavigationFactory {
    constructor(tenantListGuard, config) {
        this.tenantListGuard = tenantListGuard;
        this.config = config;
        this.navs = [];
    }
    get() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const canActivateTenantList = yield this.tenantListGuard.canActivate();
            if (!this.navs.length) {
                const subtenantsNavigatorNode = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.subtenantsNavigatorNode) !== null && _b !== void 0 ? _b : true;
                if (subtenantsNavigatorNode !== false) {
                    this.navs.push(new NavigatorNode(Object.assign({ parent: gettext('Tenants'), label: gettext('Subtenants'), icon: 'c8y-sub-tenants', path: 'tenants', routerLinkExact: false, priority: 4000, hidden: !canActivateTenantList }, (subtenantsNavigatorNode === true ? {} : subtenantsNavigatorNode))));
                }
            }
            return this.navs;
        });
    }
}
TenantsNavigationFactory.ɵfac = function TenantsNavigationFactory_Factory(t) { return new (t || TenantsNavigationFactory)(ɵngcc0.ɵɵinject(ɵngcc1.TenantListGuard), ɵngcc0.ɵɵinject(TENANTS_MODULE_CONFIG, 8)); };
TenantsNavigationFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TenantsNavigationFactory, factory: TenantsNavigationFactory.ɵfac });
TenantsNavigationFactory.ctorParameters = () => [
    { type: TenantListGuard },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TENANTS_MODULE_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantsNavigationFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TenantListGuard }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TENANTS_MODULE_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50cy1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RlbmFudHMvdGVuYW50cy1uYXZpZ2F0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBd0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUF1QixxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFHN0UsTUFBTSxPQUFPLHdCQUF3QjtBQUFHLElBR3RDLFlBQ1UsZUFBZ0MsRUFDVyxNQUEyQjtBQUMvRSxRQUZTLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUFDLFFBQ1UsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7QUFDbEYsUUFMVSxTQUFJLEdBQW9CLEVBQUUsQ0FBQztBQUNyQyxJQUlLLENBQUM7QUFDTixJQUNRLEdBQUc7QUFBSztBQUFvQjtBQUNvQixZQUFwRCxNQUFNLHFCQUFxQixHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzRSxZQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUMzQixnQkFBTSxNQUFNLHVCQUF1QixHQUFHLE1BQUEsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSx1QkFBdUIsbUNBQUksSUFBSSxDQUFDO0FBQ25GLGdCQUFNLElBQUksdUJBQXVCLEtBQUssS0FBSyxFQUFFO0FBQzdDLG9CQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNaLElBQUksYUFBYSxpQkFDZixNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUMxQixLQUFLLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUM1QixJQUFJLEVBQUUsaUJBQWlCLEVBQ3ZCLElBQUksRUFBRSxTQUFTLEVBQ2YsZUFBZSxFQUFFLEtBQUssRUFDdEIsUUFBUSxFQUFFLElBQUksRUFDZCxNQUFNLEVBQUUsQ0FBQyxxQkFBcUIsSUFDM0IsQ0FBQyx1QkFBdUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFDcEUsQ0FDSCxDQUFDO0FBQ1YsaUJBQU87QUFDUCxhQUFLO0FBQ0wsWUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDckI7QUFFTSxLQUZIO0FBQ0g7b0RBOUJDLFVBQVU7c0pBQ1Q7QUFBQztBQUFrRCxZQUo1QyxlQUFlO0FBQUksNENBU3ZCLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCO0FBQVE7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBOYXZpZ2F0b3JOb2RlLCBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVGVuYW50TGlzdEd1YXJkIH0gZnJvbSAnLi90ZW5hbnQtbGlzdC90ZW5hbnQtbGlzdC5ndWFyZCc7XG5pbXBvcnQgeyBUZW5hbnRzTW9kdWxlQ29uZmlnLCBURU5BTlRTX01PRFVMRV9DT05GSUcgfSBmcm9tICcuL3RlbmFudHMubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGVuYW50c05hdmlnYXRpb25GYWN0b3J5IGltcGxlbWVudHMgTmF2aWdhdG9yTm9kZUZhY3Rvcnkge1xuICBwcml2YXRlIG5hdnM6IE5hdmlnYXRvck5vZGVbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVuYW50TGlzdEd1YXJkOiBUZW5hbnRMaXN0R3VhcmQsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChURU5BTlRTX01PRFVMRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBUZW5hbnRzTW9kdWxlQ29uZmlnXG4gICkge31cblxuICBhc3luYyBnZXQoKTogUHJvbWlzZTxOYXZpZ2F0b3JOb2RlW10+IHtcbiAgICBjb25zdCBjYW5BY3RpdmF0ZVRlbmFudExpc3QgPSBhd2FpdCB0aGlzLnRlbmFudExpc3RHdWFyZC5jYW5BY3RpdmF0ZSgpO1xuICAgIGlmICghdGhpcy5uYXZzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3VidGVuYW50c05hdmlnYXRvck5vZGUgPSB0aGlzLmNvbmZpZz8uc3VidGVuYW50c05hdmlnYXRvck5vZGUgPz8gdHJ1ZTtcbiAgICAgIGlmIChzdWJ0ZW5hbnRzTmF2aWdhdG9yTm9kZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5uYXZzLnB1c2goXG4gICAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgICAgcGFyZW50OiBnZXR0ZXh0KCdUZW5hbnRzJyksXG4gICAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU3VidGVuYW50cycpLFxuICAgICAgICAgICAgaWNvbjogJ2M4eS1zdWItdGVuYW50cycsXG4gICAgICAgICAgICBwYXRoOiAndGVuYW50cycsXG4gICAgICAgICAgICByb3V0ZXJMaW5rRXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgcHJpb3JpdHk6IDQwMDAsXG4gICAgICAgICAgICBoaWRkZW46ICFjYW5BY3RpdmF0ZVRlbmFudExpc3QsXG4gICAgICAgICAgICAuLi4oc3VidGVuYW50c05hdmlnYXRvck5vZGUgPT09IHRydWUgPyB7fSA6IHN1YnRlbmFudHNOYXZpZ2F0b3JOb2RlKVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5hdnM7XG4gIH1cbn1cbiJdfQ==