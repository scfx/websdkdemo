import { __awaiter } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { gettext, NavigatorNode } from '@c8y/ngx-components';
import { TenantListGuard } from './tenant-list/tenant-list.guard';
import { TENANTS_MODULE_CONFIG } from './tenants.model';
export class TenantsNavigationFactory {
    constructor(tenantListGuard, config) {
        this.tenantListGuard = tenantListGuard;
        this.config = config;
        this.navs = [];
    }
    get() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const canActivateTenantList = yield this.tenantListGuard.canActivate();
            if (!this.navs.length) {
                const subtenantsNavigatorNode = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.subtenantsNavigatorNode) !== null && _b !== void 0 ? _b : true;
                if (subtenantsNavigatorNode !== false) {
                    this.navs.push(new NavigatorNode(Object.assign({ parent: gettext('Tenants'), label: gettext('Subtenants'), icon: 'c8y-sub-tenants', path: 'tenants', routerLinkExact: false, priority: 4000, hidden: !canActivateTenantList }, (subtenantsNavigatorNode === true ? {} : subtenantsNavigatorNode))));
                }
            }
            return this.navs;
        });
    }
}
TenantsNavigationFactory.decorators = [
    { type: Injectable }
];
TenantsNavigationFactory.ctorParameters = () => [
    { type: TenantListGuard },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TENANTS_MODULE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50cy1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZW5hbnRzL3RlbmFudHMtbmF2aWdhdGlvbi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBdUIscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUc3RSxNQUFNLE9BQU8sd0JBQXdCO0lBR25DLFlBQ1UsZUFBZ0MsRUFDVyxNQUEyQjtRQUR0RSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDVyxXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUp4RSxTQUFJLEdBQW9CLEVBQUUsQ0FBQztJQUtoQyxDQUFDO0lBRUUsR0FBRzs7O1lBQ1AsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNyQixNQUFNLHVCQUF1QixHQUFHLE1BQUEsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSx1QkFBdUIsbUNBQUksSUFBSSxDQUFDO2dCQUM3RSxJQUFJLHVCQUF1QixLQUFLLEtBQUssRUFBRTtvQkFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxhQUFhLGlCQUNmLE1BQU0sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQzFCLEtBQUssRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQzVCLElBQUksRUFBRSxpQkFBaUIsRUFDdkIsSUFBSSxFQUFFLFNBQVMsRUFDZixlQUFlLEVBQUUsS0FBSyxFQUN0QixRQUFRLEVBQUUsSUFBSSxFQUNkLE1BQU0sRUFBRSxDQUFDLHFCQUFxQixJQUMzQixDQUFDLHVCQUF1QixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUNwRSxDQUNILENBQUM7aUJBQ0g7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQzs7S0FDbEI7OztZQTdCRixVQUFVOzs7WUFIRixlQUFlOzRDQVNuQixRQUFRLFlBQUksTUFBTSxTQUFDLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvck5vZGVGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUZW5hbnRMaXN0R3VhcmQgfSBmcm9tICcuL3RlbmFudC1saXN0L3RlbmFudC1saXN0Lmd1YXJkJztcbmltcG9ydCB7IFRlbmFudHNNb2R1bGVDb25maWcsIFRFTkFOVFNfTU9EVUxFX0NPTkZJRyB9IGZyb20gJy4vdGVuYW50cy5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZW5hbnRzTmF2aWdhdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByaXZhdGUgbmF2czogTmF2aWdhdG9yTm9kZVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW5hbnRMaXN0R3VhcmQ6IFRlbmFudExpc3RHdWFyZCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFRFTkFOVFNfTU9EVUxFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IFRlbmFudHNNb2R1bGVDb25maWdcbiAgKSB7fVxuXG4gIGFzeW5jIGdldCgpOiBQcm9taXNlPE5hdmlnYXRvck5vZGVbXT4ge1xuICAgIGNvbnN0IGNhbkFjdGl2YXRlVGVuYW50TGlzdCA9IGF3YWl0IHRoaXMudGVuYW50TGlzdEd1YXJkLmNhbkFjdGl2YXRlKCk7XG4gICAgaWYgKCF0aGlzLm5hdnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBzdWJ0ZW5hbnRzTmF2aWdhdG9yTm9kZSA9IHRoaXMuY29uZmlnPy5zdWJ0ZW5hbnRzTmF2aWdhdG9yTm9kZSA/PyB0cnVlO1xuICAgICAgaWYgKHN1YnRlbmFudHNOYXZpZ2F0b3JOb2RlICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLm5hdnMucHVzaChcbiAgICAgICAgICBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgICAgICBwYXJlbnQ6IGdldHRleHQoJ1RlbmFudHMnKSxcbiAgICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdTdWJ0ZW5hbnRzJyksXG4gICAgICAgICAgICBpY29uOiAnYzh5LXN1Yi10ZW5hbnRzJyxcbiAgICAgICAgICAgIHBhdGg6ICd0ZW5hbnRzJyxcbiAgICAgICAgICAgIHJvdXRlckxpbmtFeGFjdDogZmFsc2UsXG4gICAgICAgICAgICBwcmlvcml0eTogNDAwMCxcbiAgICAgICAgICAgIGhpZGRlbjogIWNhbkFjdGl2YXRlVGVuYW50TGlzdCxcbiAgICAgICAgICAgIC4uLihzdWJ0ZW5hbnRzTmF2aWdhdG9yTm9kZSA9PT0gdHJ1ZSA/IHt9IDogc3VidGVuYW50c05hdmlnYXRvck5vZGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmF2cztcbiAgfVxufVxuIl19