import { Injectable } from '@angular/core';
import { TabsService } from '@c8y/ngx-components';
import { BridgeService } from './bridge.service';
export class Ng1ActionFactoryService {
    constructor(bridge, tabs) {
        this.bridge = bridge;
        this.tabs = tabs;
        this.routeChanges$ = bridge.$routeChanges;
        this.$location = bridge.injector.get('$location');
        this.tabs.items$.subscribe((newTabs) => this.handleTabsRedirect(newTabs));
    }
    handleTabsRedirect(tabs) {
        /**
         * This function is doing the same process as function redirect in the file
         * modules/core/ui/navigation/tabs.provider.js
         * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
         */
        const redirectedTab = tabs.find((tab) => tab.redirectedTo);
        const [topPriorityTab] = tabs;
        if (redirectedTab && !topPriorityTab.redirectedTo) {
            this.$location.replace();
            this.$location.path(topPriorityTab.path);
            topPriorityTab.redirectedTo = true;
            redirectedTab.redirectedTo = false;
        }
    }
    get() {
        return this.bridge.getActions();
    }
}
Ng1ActionFactoryService.decorators = [
    { type: Injectable }
];
Ng1ActionFactoryService.ctorParameters = () => [
    { type: BridgeService },
    { type: TabsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi91cGdyYWRlL2FjdGlvbi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF5QixXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLakQsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQyxZQUNVLE1BQXFCLEVBQ3JCLElBQWlCO1FBRGpCLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUV6QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFJO1FBQ3JCOzs7O1dBSUc7UUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFFLGNBQWMsQ0FBRSxHQUFHLElBQUksQ0FBQztRQUNoQyxJQUFJLGFBQWEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUU7WUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDbkMsYUFBYSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUEvQkYsVUFBVTs7O1lBSkYsYUFBYTtZQURVLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkZhY3RvcnksIFRhYnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UgaW1wbGVtZW50cyBBY3Rpb25GYWN0b3J5IHtcbiAgcm91dGVDaGFuZ2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAkbG9jYXRpb246IGFueTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBicmlkZ2U6IEJyaWRnZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0YWJzOiBUYWJzU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJvdXRlQ2hhbmdlcyQgPSBicmlkZ2UuJHJvdXRlQ2hhbmdlcztcbiAgICB0aGlzLiRsb2NhdGlvbiA9IGJyaWRnZS5pbmplY3Rvci5nZXQoJyRsb2NhdGlvbicpO1xuICAgIHRoaXMudGFicy5pdGVtcyQuc3Vic2NyaWJlKChuZXdUYWJzKSA9PiB0aGlzLmhhbmRsZVRhYnNSZWRpcmVjdChuZXdUYWJzKSk7XG4gIH1cblxuICBoYW5kbGVUYWJzUmVkaXJlY3QodGFicykge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgZG9pbmcgdGhlIHNhbWUgcHJvY2VzcyBhcyBmdW5jdGlvbiByZWRpcmVjdCBpbiB0aGUgZmlsZVxuICAgICAqIG1vZHVsZXMvY29yZS91aS9uYXZpZ2F0aW9uL3RhYnMucHJvdmlkZXIuanNcbiAgICAgKiBUaGF0IGZ1bmN0aW9uICBpcyBub3QgcnVuIGJlY2F1c2UgYnJpZGdlLnNlcnZpY2UudHMgb3ZlcnJpZGVzIHRoZSBtZXRob2QgYWRkVGFiIHdoZXJlIHRoZSByZWRpcmVjdCgpIHdhcyBjYWxsZWQuXG4gICAgICovXG4gICAgY29uc3QgcmVkaXJlY3RlZFRhYiA9IHRhYnMuZmluZCgodGFiKSA9PiB0YWIucmVkaXJlY3RlZFRvKTtcbiAgICBjb25zdCBbIHRvcFByaW9yaXR5VGFiIF0gPSB0YWJzO1xuICAgIGlmIChyZWRpcmVjdGVkVGFiICYmICF0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8pIHtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnBhdGgodG9wUHJpb3JpdHlUYWIucGF0aCk7XG4gICAgICB0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8gPSB0cnVlO1xuICAgICAgcmVkaXJlY3RlZFRhYi5yZWRpcmVjdGVkVG8gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnJpZGdlLmdldEFjdGlvbnMoKTtcbiAgfVxufVxuIl19