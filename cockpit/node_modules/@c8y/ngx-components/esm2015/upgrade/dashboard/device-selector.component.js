import { __awaiter } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dashboard-bridge.service';
export class DeviceSelectorComponent {
    constructor(dashboardBridgeService, el) {
        this.dashboardBridgeService = dashboardBridgeService;
        this.el = el;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.ng1Scope = this.dashboardBridgeService.instantiateDeviceSelector(this.el.nativeElement, this.config);
        });
    }
    ngOnDestroy() {
        if (this.ng1Scope) {
            this.ng1Scope.$destroy();
        }
    }
}
DeviceSelectorComponent.ɵfac = function DeviceSelectorComponent_Factory(t) { return new (t || DeviceSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DashboardBridgeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DeviceSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DeviceSelectorComponent, selectors: [["c8y-device-selector-legacy"]], decls: 0, vars: 0, template: function DeviceSelectorComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
DeviceSelectorComponent.ctorParameters = () => [
    { type: DashboardBridgeService },
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-device-selector-legacy',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DashboardBridgeService }, { type: ɵngcc0.ElementRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9kYXNoYm9hcmQvZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFTLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFPcEUsTUFBTSxPQUFPLHVCQUF1QjtBQUFHLElBSXJDLFlBQ1Usc0JBQThDLEVBQzlDLEVBQWM7QUFDdkIsUUFGUywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0FBQUMsUUFDL0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUMxQixJQUFLLENBQUM7QUFDTixJQUNRLFFBQVE7QUFDaEI7QUFBOEQsWUFBMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlHLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLFdBQVc7QUFBSyxRQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN2QixZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO21EQXZCQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDRCQUE0QixrQkFDdEMsUUFBUSxFQUFFLEVBQUUsa0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsd1FBQ0k7QUFBQztBQUFpRCxZQVA5QyxzQkFBc0I7QUFBSSxZQURpQixVQUFVO0FBQUc7Ozs7Ozs7O29IQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1kZXZpY2Utc2VsZWN0b3ItbGVnYWN5JyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgbmcxU2NvcGU7XG4gIGNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGRhc2hib2FyZEJyaWRnZVNlcnZpY2U6IERhc2hib2FyZEJyaWRnZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZzFTY29wZSA9IHRoaXMuZGFzaGJvYXJkQnJpZGdlU2VydmljZS5pbnN0YW50aWF0ZURldmljZVNlbGVjdG9yKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5jb25maWcpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubmcxU2NvcGUpIHtcbiAgICAgIHRoaXMubmcxU2NvcGUuJGRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==