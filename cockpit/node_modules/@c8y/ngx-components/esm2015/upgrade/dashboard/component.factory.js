import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dashboard-bridge.service';
export class Ng1ComponentFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const components = (yield this.bridge.ng1Components.list()).map(cmp => {
                const data = {
                    settings: Object.assign(Object.assign({}, cmp.options), { configTemplateUrl: cmp.configTemplateUrl, widgetComponent: cmp.widgetComponent, configComponent: cmp.configComponent, transformConfigWithContext: cmp.transformConfigWithContext || cmp.componentTransformConfigWithContext, upgrade: true })
                };
                data.settings.templateUrl = cmp.templateUrl; // workaround as in object it creates build error
                return {
                    id: cmp.name,
                    label: cmp.nameDisplay || cmp.name,
                    description: cmp.description,
                    component: WidgetComponent,
                    configComponent: WidgetComponent,
                    previewImage: cmp.previewImage,
                    data
                };
            });
            // add the device selector legacy component
            components.push({
                id: 'device.selector.legacy',
                label: 'Device selector',
                description: '',
                data: { settings: { noNewWidgets: true, upgrade: true } },
                component: DeviceSelectorComponent
            });
            return components;
        });
    }
}
Ng1ComponentFactoryService.ɵfac = function Ng1ComponentFactoryService_Factory(t) { return new (t || Ng1ComponentFactoryService)(ɵngcc0.ɵɵinject(ɵngcc1.DashboardBridgeService)); };
Ng1ComponentFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ComponentFactoryService, factory: Ng1ComponentFactoryService.ɵfac });
Ng1ComponentFactoryService.ctorParameters = () => [
    { type: DashboardBridgeService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ComponentFactoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DashboardBridgeService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3VwZ3JhZGUvZGFzaGJvYXJkL2NvbXBvbmVudC5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBR3RFLE1BQU0sT0FBTywwQkFBMEI7QUFDdkMsSUFBRSxZQUFvQixNQUE4QjtBQUFJLFFBQWxDLFdBQU0sR0FBTixNQUFNLENBQXdCO0FBQUMsSUFBRSxDQUFDO0FBQ3hELElBQVEsR0FBRztBQUNYO0FBQThELFlBQTFELE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMxRSxnQkFBTSxNQUFNLElBQUksR0FBRztBQUNuQixvQkFBUSxRQUFRLGtDQUNILEdBQUcsQ0FBQyxPQUFPLEtBQ2QsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUN4QyxlQUFlLEVBQUUsR0FBRyxDQUFDLGVBQWUsRUFDcEMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxlQUFlLEVBQ3BDLDBCQUEwQixFQUN4QixHQUFHLENBQUMsMEJBQTBCLElBQUksR0FBRyxDQUFDLG1DQUFtQyxFQUMzRSxPQUFPLEVBQUUsSUFBSSxHQUNkO0FBQ1QsaUJBQWMsQ0FBQztBQUNmLGdCQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxpREFBaUQ7QUFDcEcsZ0JBQ00sT0FBTztBQUNiLG9CQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSTtBQUNwQixvQkFBUSxLQUFLLEVBQUUsR0FBRyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSTtBQUMxQyxvQkFBUSxXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVc7QUFDcEMsb0JBQVEsU0FBUyxFQUFFLGVBQWU7QUFDbEMsb0JBQVEsZUFBZSxFQUFFLGVBQWU7QUFDeEMsb0JBQVEsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZO0FBQ3RDLG9CQUFRLElBQUk7QUFDWixpQkFBcUMsQ0FBQztBQUN0QyxZQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsWUFDSSwyQ0FBMkM7QUFDL0MsWUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQ3BCLGdCQUFNLEVBQUUsRUFBRSx3QkFBd0I7QUFDbEMsZ0JBQU0sS0FBSyxFQUFFLGlCQUFpQjtBQUM5QixnQkFBTSxXQUFXLEVBQUUsRUFBRTtBQUNyQixnQkFBTSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUMvRCxnQkFBTSxTQUFTLEVBQUUsdUJBQXVCO0FBQ3hDLGFBQUssQ0FBQyxDQUFDO0FBQ1AsWUFDSSxPQUFPLFVBQVUsQ0FBQztBQUN0QixRQUFFLENBQUM7QUFFSCxLQUZHO0FBQ0g7c0RBeENDLFVBQVU7NEpBQ1Q7QUFBQztBQUNVLFlBTkosc0JBQXNCO0FBQUc7Ozt1RkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyaWRnZTogRGFzaGJvYXJkQnJpZGdlU2VydmljZSkge31cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSAoYXdhaXQgdGhpcy5icmlkZ2UubmcxQ29tcG9uZW50cy5saXN0KCkpLm1hcChjbXAgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAuLi5jbXAub3B0aW9ucyxcbiAgICAgICAgICBjb25maWdUZW1wbGF0ZVVybDogY21wLmNvbmZpZ1RlbXBsYXRlVXJsLFxuICAgICAgICAgIHdpZGdldENvbXBvbmVudDogY21wLndpZGdldENvbXBvbmVudCxcbiAgICAgICAgICBjb25maWdDb21wb25lbnQ6IGNtcC5jb25maWdDb21wb25lbnQsXG4gICAgICAgICAgdHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQ6XG4gICAgICAgICAgICBjbXAudHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQgfHwgY21wLmNvbXBvbmVudFRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0LFxuICAgICAgICAgIHVwZ3JhZGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnk7XG4gICAgICBkYXRhLnNldHRpbmdzLnRlbXBsYXRlVXJsID0gY21wLnRlbXBsYXRlVXJsOyAvLyB3b3JrYXJvdW5kIGFzIGluIG9iamVjdCBpdCBjcmVhdGVzIGJ1aWxkIGVycm9yXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBjbXAubmFtZSxcbiAgICAgICAgbGFiZWw6IGNtcC5uYW1lRGlzcGxheSB8fCBjbXAubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNtcC5kZXNjcmlwdGlvbixcbiAgICAgICAgY29tcG9uZW50OiBXaWRnZXRDb21wb25lbnQsXG4gICAgICAgIGNvbmZpZ0NvbXBvbmVudDogV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICBwcmV2aWV3SW1hZ2U6IGNtcC5wcmV2aWV3SW1hZ2UsXG4gICAgICAgIGRhdGFcbiAgICAgIH0gYXMgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb247XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgdGhlIGRldmljZSBzZWxlY3RvciBsZWdhY3kgY29tcG9uZW50XG4gICAgY29tcG9uZW50cy5wdXNoKHtcbiAgICAgIGlkOiAnZGV2aWNlLnNlbGVjdG9yLmxlZ2FjeScsXG4gICAgICBsYWJlbDogJ0RldmljZSBzZWxlY3RvcicsXG4gICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICBkYXRhOiB7IHNldHRpbmdzOiB7IG5vTmV3V2lkZ2V0czogdHJ1ZSwgdXBncmFkZTogdHJ1ZSB9IH0sXG4gICAgICBjb21wb25lbnQ6IERldmljZVNlbGVjdG9yQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cztcbiAgfVxufVxuIl19