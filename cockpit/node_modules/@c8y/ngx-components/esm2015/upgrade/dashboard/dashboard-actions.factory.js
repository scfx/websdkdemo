import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { CopyActionComponent } from './copy-action.component';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dashboard-bridge.service';
export class Ng1DashboardActionFactoryService {
    constructor(dashboardBridgeService) {
        this.dashboardBridgeService = dashboardBridgeService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const canCopy = contextData &&
            activeRoute.snapshot.data.dashboard &&
            [ViewContext.Device, ViewContext.Group].includes(data.context);
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.dashboardBridgeService.dashboardClipboard;
        if (canCopy) {
            actions.push({
                priority: -20,
                placement: 'more',
                template: CopyActionComponent
            });
        }
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteActionComponent
            });
        }
        return actions;
    }
}
Ng1DashboardActionFactoryService.ɵfac = function Ng1DashboardActionFactoryService_Factory(t) { return new (t || Ng1DashboardActionFactoryService)(ɵngcc0.ɵɵinject(ɵngcc1.DashboardBridgeService)); };
Ng1DashboardActionFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1DashboardActionFactoryService, factory: Ng1DashboardActionFactoryService.ɵfac });
Ng1DashboardActionFactoryService.ctorParameters = () => [
    { type: DashboardBridgeService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1DashboardActionFactoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DashboardBridgeService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9kYXNoYm9hcmQvZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBbUMsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQUdoRSxNQUFNLE9BQU8sZ0NBQWdDO0FBQUcsSUFDOUMsWUFBb0Isc0JBQThDO0FBQUksUUFBbEQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUFDLElBQUUsQ0FBQztBQUN4RSxJQUNFLEdBQUcsQ0FBQyxXQUE0QjtBQUNsQyxRQUFJLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUN2QixRQUFJLE1BQU0sSUFBSSxHQUNSLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQzlELFlBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSTtBQUNuQyxZQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0MsUUFBSSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLFFBQUksTUFBTSxPQUFPLEdBQ1gsV0FBVztBQUNqQixZQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDekMsWUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckUsUUFBSSxNQUFNLFFBQVEsR0FDWixXQUFXO0FBQ2pCLFlBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNwRSxZQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztBQUNyRCxRQUNJLElBQUksT0FBTyxFQUFFO0FBQ2pCLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQztBQUNuQixnQkFBUSxRQUFRLEVBQUUsQ0FBQyxFQUFFO0FBQ3JCLGdCQUFRLFNBQVMsRUFBRSxNQUFNO0FBQ3pCLGdCQUFRLFFBQVEsRUFBRSxtQkFBbUI7QUFDckMsYUFBd0IsQ0FBQyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUNJLElBQUksUUFBUSxFQUFFO0FBQ2xCLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQztBQUNuQixnQkFBUSxRQUFRLEVBQUUsQ0FBQyxFQUFFO0FBQ3JCLGdCQUFRLFNBQVMsRUFBRSxNQUFNO0FBQ3pCLGdCQUFRLFFBQVEsRUFBRSxvQkFBb0I7QUFDdEMsYUFBd0IsQ0FBQyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUNJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLElBQUUsQ0FBQztBQUNIOzREQXRDQyxVQUFVOzhLQUNUO0FBQUM7QUFBMEQsWUFKcEQsc0JBQXNCO0FBQUc7Ozt1RkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQWN0aW9uQmFyRmFjdG9yeSwgQWN0aW9uQmFySXRlbSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvcHlBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL2NvcHktYWN0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9kYXNoYm9hcmQtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFzdGVBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3Bhc3RlLWFjdGlvbi5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxRGFzaGJvYXJkQWN0aW9uRmFjdG9yeVNlcnZpY2UgaW1wbGVtZW50cyBBY3Rpb25CYXJGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlKSB7fVxuXG4gIGdldChhY3RpdmVSb3V0ZT86IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGRhdGEgPVxuICAgICAgIWFjdGl2ZVJvdXRlLnBhcmVudCB8fCBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZlUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG4gICAgY29uc3QgeyBjb250ZXh0RGF0YSB9ID0gZGF0YTtcbiAgICBjb25zdCBjYW5Db3B5ID1cbiAgICAgIGNvbnRleHREYXRhICYmXG4gICAgICBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhLmRhc2hib2FyZCAmJlxuICAgICAgW1ZpZXdDb250ZXh0LkRldmljZSwgVmlld0NvbnRleHQuR3JvdXBdLmluY2x1ZGVzKGRhdGEuY29udGV4dCk7XG4gICAgY29uc3QgY2FuUGFzdGUgPVxuICAgICAgY29udGV4dERhdGEgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhkYXRhLmNvbnRleHQpICYmXG4gICAgICB0aGlzLmRhc2hib2FyZEJyaWRnZVNlcnZpY2UuZGFzaGJvYXJkQ2xpcGJvYXJkO1xuXG4gICAgaWYgKGNhbkNvcHkpIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAtMjAsXG4gICAgICAgIHBsYWNlbWVudDogJ21vcmUnLFxuICAgICAgICB0ZW1wbGF0ZTogQ29weUFjdGlvbkNvbXBvbmVudFxuICAgICAgfSBhcyBBY3Rpb25CYXJJdGVtKTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUGFzdGUpIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAtMTAsXG4gICAgICAgIHBsYWNlbWVudDogJ21vcmUnLFxuICAgICAgICB0ZW1wbGF0ZTogUGFzdGVBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH1cbn1cbiJdfQ==