import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dashboard-bridge.service';
import * as ɵngcc2 from '@c8y/ngx-components';

const _c0 = ["templateCopy"];
function CopyActionComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵlistener("click", function CopyActionComponent_ng_template_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.copyDashboard(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "i", 2);
    ɵngcc0.ɵɵelementStart(4, "span", 3);
    ɵngcc0.ɵɵtext(5, "Copy dashboard");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 1, "Copy dashboard"));
} }
export class CopyActionComponent {
    constructor(vcRef, dashboardBridgeService) {
        this.vcRef = vcRef;
        this.dashboardBridgeService = dashboardBridgeService;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    copyDashboard() {
        this.dashboardBridgeService.copyDashboard();
    }
}
CopyActionComponent.ɵfac = function CopyActionComponent_Factory(t) { return new (t || CopyActionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DashboardBridgeService)); };
CopyActionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CopyActionComponent, selectors: [["c8y-copy-action-legacy"]], viewQuery: function CopyActionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateCopy = _t.first);
    } }, decls: 2, vars: 0, consts: [["templateCopy", ""], [3, "title", "click"], [1, "dlt-c8y-icon-copy", "m-r-4"], ["translate", ""]], template: function CopyActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CopyActionComponent_ng_template_0_Template, 6, 3, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc2.C8yTranslateDirective], pipes: [ɵngcc2.C8yTranslatePipe], encapsulation: 2 });
CopyActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: DashboardBridgeService }
];
CopyActionComponent.propDecorators = {
    templateCopy: [{ type: ViewChild, args: ['templateCopy', { read: TemplateRef, static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CopyActionComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-copy-action-legacy',
                template: `
    <ng-template #templateCopy>
      <li>
        <button title="{{'Copy dashboard' | translate}}" (click)="copyDashboard()">
          <i class="dlt-c8y-icon-copy m-r-4"></i><span translate>Copy dashboard</span>
        </button>
      </li>
    </ng-template>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.DashboardBridgeService }]; }, { templateCopy: [{
            type: ViewChild,
            args: ['templateCopy', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL2Rhc2hib2FyZC9jb3B5LWFjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY3BFLE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQUdqQyxZQUNVLEtBQXVCLEVBQ3ZCLHNCQUE4QztBQUN2RCxRQUZTLFVBQUssR0FBTCxLQUFLLENBQWtCO0FBQUMsUUFDeEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUMxRCxJQUFLLENBQUM7QUFDTixJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNILElBQ0UsYUFBYTtBQUNmLFFBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUNIOytDQTNCQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHdCQUF3QixrQkFDbEMsUUFBUSxFQUFFO2tNQVFUO0NBQ0Y7Ozs7OzsyR0FDSTtBQUFDO0FBQTZDLFlBZkMsZ0JBQWdCO0FBQUksWUFDL0Qsc0JBQXNCO0FBQUc7QUFBRztBQUUvQiwyQkFhSCxTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1jb3B5LWFjdGlvbi1sZWdhY3knLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVDb3B5PlxuICAgICAgPGxpPlxuICAgICAgICA8YnV0dG9uIHRpdGxlPVwie3snQ29weSBkYXNoYm9hcmQnIHwgdHJhbnNsYXRlfX1cIiAoY2xpY2spPVwiY29weURhc2hib2FyZCgpXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJkbHQtYzh5LWljb24tY29weSBtLXItNFwiPjwvaT48c3BhbiB0cmFuc2xhdGU+Q29weSBkYXNoYm9hcmQ8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9saT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIENvcHlBY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZUNvcHknLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVDb3B5O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBkYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnZjUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlQ29weSk7XG4gIH1cblxuICBjb3B5RGFzaGJvYXJkKCkge1xuICAgIHRoaXMuZGFzaGJvYXJkQnJpZGdlU2VydmljZS5jb3B5RGFzaGJvYXJkKCk7XG4gIH1cbn1cbiJdfQ==