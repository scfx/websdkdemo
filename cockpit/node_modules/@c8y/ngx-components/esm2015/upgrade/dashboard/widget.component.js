import { __awaiter } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Optional } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetsDashboardComponent } from '@c8y/ngx-components';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@c8y/ngx-components';
import * as ɵngcc2 from './dashboard-bridge.service';
export class WidgetComponent {
    constructor(dashboard, dashboardBridgeService, el) {
        this.dashboard = dashboard;
        this.dashboardBridgeService = dashboardBridgeService;
        this.el = el;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config) {
                this.ng1Scope = yield this.dashboardBridgeService.instantiateComponent(this.config, this.el.nativeElement);
                if (this.dashboard) {
                    this.resizeSubscription = this.dashboard.onChangeDashboard.subscribe(() => {
                        this.ng1Scope.$broadcast('dashboardResize');
                    });
                }
            }
        });
    }
    ngOnDestroy() {
        if (this.ng1Scope) {
            this.ng1Scope.$destroy();
        }
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    }
}
WidgetComponent.ɵfac = function WidgetComponent_Factory(t) { return new (t || WidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WidgetsDashboardComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DashboardBridgeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WidgetComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WidgetComponent, selectors: [["c8y-widget-legacy"]], decls: 0, vars: 0, template: function WidgetComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
WidgetComponent.ctorParameters = () => [
    { type: WidgetsDashboardComponent, decorators: [{ type: Optional }] },
    { type: DashboardBridgeService },
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WidgetComponent, [{
        type: Component,
        args: [{
                selector: 'c8y-widget-legacy',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.WidgetsDashboardComponent, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.DashboardBridgeService }, { type: ɵngcc0.ElementRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9kYXNoYm9hcmQvd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUdWLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQVFoRSxNQUFNLE9BQU8sZUFBZTtBQUFHLElBSTdCLFlBQ3NCLFNBQW9DLEVBQ2hELHNCQUE4QyxFQUM5QyxFQUFjO0FBQ3ZCLFFBSHFCLGNBQVMsR0FBVCxTQUFTLENBQTJCO0FBQUMsUUFDakQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUFDLFFBQy9DLE9BQUUsR0FBRixFQUFFLENBQVk7QUFDMUIsSUFBSyxDQUFDO0FBQ04sSUFDUSxRQUFRO0FBQ2hCO0FBQ3VDLFlBRG5DLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQixnQkFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLG9CQUFvQixDQUNwRSxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUN0QixDQUFDO0FBQ1IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQzFCLG9CQUFRLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDbEYsd0JBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN0RCxvQkFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLGlCQUFPO0FBQ1AsYUFBSztBQUNMLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxJQUNFLFdBQVc7QUFBSyxRQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN2QixZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDakMsWUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOzJDQXJDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG1CQUFtQixrQkFDN0IsUUFBUSxFQUFFLEVBQUUsa0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sY0FDaEQ7Z1BBQ0k7QUFBQztBQUF5QyxZQVJ0Qyx5QkFBeUIsdUJBYTdCLFFBQVE7QUFBTyxZQWRYLHNCQUFzQjtBQUFJLFlBTGpDLFVBQVU7QUFDWDs7Ozs7Ozs7Ozt3R0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQnJpZGdlU2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWJyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFdpZGdldHNEYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktd2lkZ2V0LWxlZ2FjeScsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBuZzFTY29wZTtcbiAgY29uZmlnO1xuICBwcml2YXRlIHJlc2l6ZVN1YnNjcmlwdGlvbj86IFN1YnNjcmlwdGlvbjtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBkYXNoYm9hcmQ6IFdpZGdldHNEYXNoYm9hcmRDb21wb25lbnQsXG4gICAgcHJpdmF0ZSBkYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5uZzFTY29wZSA9IGF3YWl0IHRoaXMuZGFzaGJvYXJkQnJpZGdlU2VydmljZS5pbnN0YW50aWF0ZUNvbXBvbmVudChcbiAgICAgICAgdGhpcy5jb25maWcsXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLmRhc2hib2FyZCkge1xuICAgICAgICB0aGlzLnJlc2l6ZVN1YnNjcmlwdGlvbiA9IHRoaXMuZGFzaGJvYXJkLm9uQ2hhbmdlRGFzaGJvYXJkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5uZzFTY29wZS4kYnJvYWRjYXN0KCdkYXNoYm9hcmRSZXNpemUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubmcxU2NvcGUpIHtcbiAgICAgIHRoaXMubmcxU2NvcGUuJGRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVzaXplU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnJlc2l6ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19