import { Injectable } from '@angular/core';
import { TabsService } from '@c8y/ngx-components';
import { BridgeService } from './bridge.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './bridge.service';
import * as ɵngcc2 from '@c8y/ngx-components';
export class Ng1ActionFactoryService {
    constructor(bridge, tabs) {
        this.bridge = bridge;
        this.tabs = tabs;
        this.routeChanges$ = bridge.$routeChanges;
        this.$location = bridge.injector.get('$location');
        this.tabs.items$.subscribe((newTabs) => this.handleTabsRedirect(newTabs));
    }
    handleTabsRedirect(tabs) {
        /**
         * This function is doing the same process as function redirect in the file
         * modules/core/ui/navigation/tabs.provider.js
         * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
         */
        const redirectedTab = tabs.find((tab) => tab.redirectedTo);
        const [topPriorityTab] = tabs;
        if (redirectedTab && !topPriorityTab.redirectedTo) {
            this.$location.replace();
            this.$location.path(topPriorityTab.path);
            topPriorityTab.redirectedTo = true;
            redirectedTab.redirectedTo = false;
        }
    }
    get() {
        return this.bridge.getActions();
    }
}
Ng1ActionFactoryService.ɵfac = function Ng1ActionFactoryService_Factory(t) { return new (t || Ng1ActionFactoryService)(ɵngcc0.ɵɵinject(ɵngcc1.BridgeService), ɵngcc0.ɵɵinject(ɵngcc2.TabsService)); };
Ng1ActionFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ActionFactoryService, factory: Ng1ActionFactoryService.ɵfac });
Ng1ActionFactoryService.ctorParameters = () => [
    { type: BridgeService },
    { type: TabsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ActionFactoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BridgeService }, { type: ɵngcc2.TabsService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3VwZ3JhZGUvYWN0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXlCLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUtqRCxNQUFNLE9BQU8sdUJBQXVCO0FBQUcsSUFHckMsWUFDVSxNQUFxQixFQUNyQixJQUFpQjtBQUMxQixRQUZTLFdBQU0sR0FBTixNQUFNLENBQWU7QUFBQyxRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFhO0FBQzdCLFFBQ0ksSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQzlDLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0RCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDOUUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxrQkFBa0IsQ0FBQyxJQUFJO0FBQ3pCLFFBQUk7QUFDSjtBQUNJO0FBQ0k7QUFFSixXQURHO0FBQ1AsUUFBSSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0QsUUFBSSxNQUFNLENBQUUsY0FBYyxDQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3BDLFFBQUksSUFBSSxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO0FBQ3ZELFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMvQixZQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQyxZQUFNLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3pDLFlBQU0sYUFBYSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDekMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsR0FBRztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUNIO21EQWhDQyxVQUFVO21KQUNUO0FBQUM7QUFBaUQsWUFMM0MsYUFBYTtBQUFJLFlBRE0sV0FBVztBQUFHOzs7NEdBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uRmFjdG9yeSwgVGFic1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2JyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZzFBY3Rpb25GYWN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEFjdGlvbkZhY3Rvcnkge1xuICByb3V0ZUNoYW5nZXMkOiBPYnNlcnZhYmxlPGFueT47XG4gICRsb2NhdGlvbjogYW55O1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJyaWRnZTogQnJpZGdlU2VydmljZSxcbiAgICBwcml2YXRlIHRhYnM6IFRhYnNTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMucm91dGVDaGFuZ2VzJCA9IGJyaWRnZS4kcm91dGVDaGFuZ2VzO1xuICAgIHRoaXMuJGxvY2F0aW9uID0gYnJpZGdlLmluamVjdG9yLmdldCgnJGxvY2F0aW9uJyk7XG4gICAgdGhpcy50YWJzLml0ZW1zJC5zdWJzY3JpYmUoKG5ld1RhYnMpID0+IHRoaXMuaGFuZGxlVGFic1JlZGlyZWN0KG5ld1RhYnMpKTtcbiAgfVxuXG4gIGhhbmRsZVRhYnNSZWRpcmVjdCh0YWJzKSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBkb2luZyB0aGUgc2FtZSBwcm9jZXNzIGFzIGZ1bmN0aW9uIHJlZGlyZWN0IGluIHRoZSBmaWxlXG4gICAgICogbW9kdWxlcy9jb3JlL3VpL25hdmlnYXRpb24vdGFicy5wcm92aWRlci5qc1xuICAgICAqIFRoYXQgZnVuY3Rpb24gIGlzIG5vdCBydW4gYmVjYXVzZSBicmlkZ2Uuc2VydmljZS50cyBvdmVycmlkZXMgdGhlIG1ldGhvZCBhZGRUYWIgd2hlcmUgdGhlIHJlZGlyZWN0KCkgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBjb25zdCByZWRpcmVjdGVkVGFiID0gdGFicy5maW5kKCh0YWIpID0+IHRhYi5yZWRpcmVjdGVkVG8pO1xuICAgIGNvbnN0IFsgdG9wUHJpb3JpdHlUYWIgXSA9IHRhYnM7XG4gICAgaWYgKHJlZGlyZWN0ZWRUYWIgJiYgIXRvcFByaW9yaXR5VGFiLnJlZGlyZWN0ZWRUbykge1xuICAgICAgdGhpcy4kbG9jYXRpb24ucmVwbGFjZSgpO1xuICAgICAgdGhpcy4kbG9jYXRpb24ucGF0aCh0b3BQcmlvcml0eVRhYi5wYXRoKTtcbiAgICAgIHRvcFByaW9yaXR5VGFiLnJlZGlyZWN0ZWRUbyA9IHRydWU7XG4gICAgICByZWRpcmVjdGVkVGFiLnJlZGlyZWN0ZWRUbyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5icmlkZ2UuZ2V0QWN0aW9ucygpO1xuICB9XG59XG4iXX0=