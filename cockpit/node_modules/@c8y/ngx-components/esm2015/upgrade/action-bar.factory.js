import { Injectable } from '@angular/core';
import { BridgeService } from './bridge.service';
import { switchMap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './bridge.service';
export class Ng1ActionBarFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
        this.routeChanges$ = bridge.$routeChanges;
        this.$ng1RouteChangeSuccess = bridge.$ng1RouteChangeSuccess;
    }
    get() {
        return this.routeChanges$.pipe(switchMap(e => {
            return this.bridge.getActionBarItems();
        }));
    }
}
Ng1ActionBarFactoryService.ɵfac = function Ng1ActionBarFactoryService_Factory(t) { return new (t || Ng1ActionBarFactoryService)(ɵngcc0.ɵɵinject(ɵngcc1.BridgeService)); };
Ng1ActionBarFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1ActionBarFactoryService, factory: Ng1ActionBarFactoryService.ɵfac });
Ng1ActionBarFactoryService.ctorParameters = () => [
    { type: BridgeService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1ActionBarFactoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BridgeService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi91cGdyYWRlL2FjdGlvbi1iYXIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUczQyxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUFHeEMsWUFBb0IsTUFBcUI7QUFDM0MsUUFEc0IsV0FBTSxHQUFOLE1BQU0sQ0FBZTtBQUFDLFFBQ3hDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUM5QyxRQUFJLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUM7QUFDaEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxHQUFHO0FBQUssUUFDTixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDcEIsWUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUMvQyxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtzREFoQkMsVUFBVTs0SkFDVDtBQUFDO0FBQW9ELFlBTDlDLGFBQWE7QUFBRzs7OzhFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25CYXJGYWN0b3J5LCBBY3Rpb25CYXJJdGVtIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICByb3V0ZUNoYW5nZXMkOiBPYnNlcnZhYmxlPGFueT47XG4gICRuZzFSb3V0ZUNoYW5nZVN1Y2Nlc3M6IE9ic2VydmFibGU8YW55PjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBicmlkZ2U6IEJyaWRnZVNlcnZpY2UpIHtcbiAgICB0aGlzLnJvdXRlQ2hhbmdlcyQgPSBicmlkZ2UuJHJvdXRlQ2hhbmdlcztcbiAgICB0aGlzLiRuZzFSb3V0ZUNoYW5nZVN1Y2Nlc3MgPSBicmlkZ2UuJG5nMVJvdXRlQ2hhbmdlU3VjY2VzcztcbiAgfVxuXG4gIGdldCgpOiBPYnNlcnZhYmxlPEFjdGlvbkJhckl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5yb3V0ZUNoYW5nZXMkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyaWRnZS5nZXRBY3Rpb25CYXJJdGVtcygpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=