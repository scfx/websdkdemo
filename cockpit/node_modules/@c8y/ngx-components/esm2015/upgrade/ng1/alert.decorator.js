function c8yAlertDecorator($delegate, $rootScope, $injector) {
    'ngInject';
    $delegate.add = alert => {
        $delegate.addAlert(transformAlert(alert));
    };
    $rootScope.$on('alert', (evt, alert) => {
        $delegate.addAlert(transformAlert(alert));
    });
    $rootScope.$on('message', (evt, alert) => {
        $delegate.addAlert(transformAlert(alert));
    });
    /**
     * Solution based on the: https://stackoverflow.com/questions/40102148/how-to-iterate-over-all-properties-in-objects-prototype-chain.
     * Problem came after switching to ES6, as all prototype properties of classes are non-enumerable.
     */
    const allNames = new Set();
    for (let o = $delegate; o !== Object.prototype; o = Object.getPrototypeOf(o)) {
        for (const name of Object.getOwnPropertyNames(o)) {
            allNames.add(name);
        }
    }
    Array.from(allNames).forEach((property) => {
        if (typeof $delegate[property] === 'function') {
            $delegate[property] = $delegate[property].bind($delegate);
        }
    });
    function transformAlert(alert) {
        const newAlert = Object.assign({}, alert);
        if (alert.onClose) {
            newAlert.onClose = () => {
                $injector.invoke(alert.onClose);
            };
        }
        if (alert.onDetail) {
            newAlert.onDetail = () => {
                $injector.invoke(alert.onDetail);
            };
        }
        return newAlert;
    }
    return $delegate;
}
export { c8yAlertDecorator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9uZzEvYWxlcnQuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTO0lBQ3pELFVBQVUsQ0FBQztJQUVYLFNBQVMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDdEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNyQyxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDdkMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVIOzs7T0FHRztJQUNILE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDNUUsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQjtLQUNGO0lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7UUFDaEQsSUFBSSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxVQUFVLEVBQUU7WUFDN0MsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0Q7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsY0FBYyxDQUFDLEtBQVU7UUFDaEMsTUFBTSxRQUFRLHFCQUFhLEtBQUssQ0FBRSxDQUFDO1FBQ25DLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNqQixRQUFRLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtnQkFDdEIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDO1NBQ0g7UUFDRCxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDbEIsUUFBUSxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUU7Z0JBQ3ZCLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQztTQUNIO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGM4eUFsZXJ0RGVjb3JhdG9yKCRkZWxlZ2F0ZSwgJHJvb3RTY29wZSwgJGluamVjdG9yKSB7XHJcbiAgJ25nSW5qZWN0JztcclxuXHJcbiAgJGRlbGVnYXRlLmFkZCA9IGFsZXJ0ID0+IHtcclxuICAgICRkZWxlZ2F0ZS5hZGRBbGVydCh0cmFuc2Zvcm1BbGVydChhbGVydCkpO1xyXG4gIH07XHJcblxyXG4gICRyb290U2NvcGUuJG9uKCdhbGVydCcsIChldnQsIGFsZXJ0KSA9PiB7XHJcbiAgICAkZGVsZWdhdGUuYWRkQWxlcnQodHJhbnNmb3JtQWxlcnQoYWxlcnQpKTtcclxuICB9KTtcclxuXHJcbiAgJHJvb3RTY29wZS4kb24oJ21lc3NhZ2UnLCAoZXZ0LCBhbGVydCkgPT4ge1xyXG4gICAgJGRlbGVnYXRlLmFkZEFsZXJ0KHRyYW5zZm9ybUFsZXJ0KGFsZXJ0KSk7XHJcbiAgfSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvbHV0aW9uIGJhc2VkIG9uIHRoZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDAxMDIxNDgvaG93LXRvLWl0ZXJhdGUtb3Zlci1hbGwtcHJvcGVydGllcy1pbi1vYmplY3RzLXByb3RvdHlwZS1jaGFpbi5cclxuICAgKiBQcm9ibGVtIGNhbWUgYWZ0ZXIgc3dpdGNoaW5nIHRvIEVTNiwgYXMgYWxsIHByb3RvdHlwZSBwcm9wZXJ0aWVzIG9mIGNsYXNzZXMgYXJlIG5vbi1lbnVtZXJhYmxlLlxyXG4gICAqL1xyXG4gIGNvbnN0IGFsbE5hbWVzID0gbmV3IFNldCgpO1xyXG4gIGZvciAobGV0IG8gPSAkZGVsZWdhdGU7IG8gIT09IE9iamVjdC5wcm90b3R5cGU7IG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobykpIHtcclxuICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvKSkge1xyXG4gICAgICBhbGxOYW1lcy5hZGQobmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEFycmF5LmZyb20oYWxsTmFtZXMpLmZvckVhY2goKHByb3BlcnR5OiBzdHJpbmcpID0+IHtcclxuICAgIGlmICh0eXBlb2YgJGRlbGVnYXRlW3Byb3BlcnR5XSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAkZGVsZWdhdGVbcHJvcGVydHldID0gJGRlbGVnYXRlW3Byb3BlcnR5XS5iaW5kKCRkZWxlZ2F0ZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybUFsZXJ0KGFsZXJ0OiBhbnkpIHtcclxuICAgIGNvbnN0IG5ld0FsZXJ0OiBhbnkgPSB7IC4uLmFsZXJ0IH07XHJcbiAgICBpZiAoYWxlcnQub25DbG9zZSkge1xyXG4gICAgICBuZXdBbGVydC5vbkNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICRpbmplY3Rvci5pbnZva2UoYWxlcnQub25DbG9zZSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoYWxlcnQub25EZXRhaWwpIHtcclxuICAgICAgbmV3QWxlcnQub25EZXRhaWwgPSAoKSA9PiB7XHJcbiAgICAgICAgJGluamVjdG9yLmludm9rZShhbGVydC5vbkRldGFpbCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3QWxlcnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJGRlbGVnYXRlO1xyXG59XHJcblxyXG5leHBvcnQgeyBjOHlBbGVydERlY29yYXRvciB9O1xyXG4iXX0=