import { NavigatorNodeRoot } from '@c8y/ngx-components';
import { assign } from 'lodash-es';
export class NavigatorNodeRootLegacy extends NavigatorNodeRoot {
    addRoot(nodeData) {
        let duplicate;
        if (nodeData.path === '') {
            nodeData.path = '/';
        }
        nodeData.label = nodeData.name;
        if (typeof nodeData.parent === 'object') {
            nodeData.parent.label = nodeData.parent.name;
        }
        if (nodeData.preventDuplicates) {
            duplicate = this.find(({ path, parents, label }) => {
                return path === nodeData.path &&
                    (label === nodeData.label) &&
                    parents.some((p) => p.label === nodeData.parent);
            });
            if (duplicate) {
                duplicate.routerLinkExact = false;
            }
        }
        return duplicate || super.addRoot(nodeData);
    }
    createNode(node) {
        const newNode = super.createNode(node);
        const update = newNode.update.bind(newNode);
        const root = this;
        return Object.defineProperties(assign(newNode, {
            realName: newNode.name || newNode.label,
            _parent: true,
            update(data) {
                if (this._parent === undefined) {
                    // _parent was deleted somene instead to put this in root
                    root.addRoot(this);
                    // put it back so it can be deleted again
                    this._parent = true;
                }
                update(data);
            },
            addChild(nodeChild) {
                this.add(root.createNode(nodeChild));
            }
        }), {
            label: {
                get() {
                    return this.realName || '';
                },
                set(name) {
                    this.realName = name;
                }
            },
            name: {
                get() {
                    return this.realName || '';
                },
                set(name) {
                    this.realName = name;
                }
            },
            show: {
                get() {
                    return !this.hidden;
                },
                set(show) {
                    this.hidden = !show;
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC1sZWdhY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL25nMS9uYXZpZ2F0b3Itbm9kZS1yb290LWxlZ2FjeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQWlCLE1BQU0scUJBQXFCLENBQUM7QUFDdkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsaUJBQWlCO0lBRTVELE9BQU8sQ0FBQyxRQUFRO1FBQ2QsSUFBSSxTQUFTLENBQUM7UUFDZCxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQ3hCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQ3JCO1FBQ0QsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUN2QyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztTQUM5QztRQUVELElBQUksUUFBUSxDQUFDLGlCQUFpQixFQUFFO1lBQzlCLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7Z0JBQ2hELE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxJQUFJO29CQUMzQixDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsS0FBSyxDQUFDO29CQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksU0FBUyxFQUFFO2dCQUNiLFNBQVMsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2FBQ25DO1NBQ0Y7UUFFRCxPQUFPLFNBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBSTtRQUNiLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDN0MsUUFBUSxFQUFHLE9BQWUsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDaEQsT0FBTyxFQUFFLElBQUk7WUFDYixNQUFNLENBQUMsSUFBSTtnQkFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO29CQUM5Qix5REFBeUQ7b0JBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ25CLHlDQUF5QztvQkFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNmLENBQUM7WUFDRCxRQUFRLENBQUMsU0FBUztnQkFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsQ0FBQztTQUNGLENBQUMsRUFBRTtZQUNGLEtBQUssRUFBRTtnQkFDTCxHQUFHO29CQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsR0FBRyxDQUFDLElBQUk7b0JBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLENBQUM7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSixHQUFHO29CQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsR0FBRyxDQUFDLElBQUk7b0JBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLENBQUM7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSixHQUFHO29CQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUN0QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxJQUFJO29CQUNOLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ3RCLENBQUM7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdmlnYXRvck5vZGVSb290LCBOYXZpZ2F0b3JOb2RlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5leHBvcnQgY2xhc3MgTmF2aWdhdG9yTm9kZVJvb3RMZWdhY3kgZXh0ZW5kcyBOYXZpZ2F0b3JOb2RlUm9vdCB7XG5cbiAgYWRkUm9vdChub2RlRGF0YSk6IE5hdmlnYXRvck5vZGUge1xuICAgIGxldCBkdXBsaWNhdGU7XG4gICAgaWYgKG5vZGVEYXRhLnBhdGggPT09ICcnKSB7XG4gICAgICBub2RlRGF0YS5wYXRoID0gJy8nO1xuICAgIH1cbiAgICBub2RlRGF0YS5sYWJlbCA9IG5vZGVEYXRhLm5hbWU7XG4gICAgaWYgKHR5cGVvZiBub2RlRGF0YS5wYXJlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICBub2RlRGF0YS5wYXJlbnQubGFiZWwgPSBub2RlRGF0YS5wYXJlbnQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZURhdGEucHJldmVudER1cGxpY2F0ZXMpIHtcbiAgICAgIGR1cGxpY2F0ZSA9IHRoaXMuZmluZCgoeyBwYXRoLCBwYXJlbnRzLCBsYWJlbH0pID0+IHtcbiAgICAgICAgcmV0dXJuIHBhdGggPT09IG5vZGVEYXRhLnBhdGggJiZcbiAgICAgICAgICAobGFiZWwgPT09IG5vZGVEYXRhLmxhYmVsKSAmJlxuICAgICAgICAgIHBhcmVudHMuc29tZSgocCkgPT4gcC5sYWJlbCA9PT0gbm9kZURhdGEucGFyZW50KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICBkdXBsaWNhdGUucm91dGVyTGlua0V4YWN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGR1cGxpY2F0ZSB8fCBzdXBlci5hZGRSb290KG5vZGVEYXRhKTtcbiAgfVxuXG4gIGNyZWF0ZU5vZGUobm9kZSkge1xuICAgIGNvbnN0IG5ld05vZGUgPSBzdXBlci5jcmVhdGVOb2RlKG5vZGUpO1xuICAgIGNvbnN0IHVwZGF0ZSA9IG5ld05vZGUudXBkYXRlLmJpbmQobmV3Tm9kZSk7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXM7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGFzc2lnbihuZXdOb2RlLCB7XG4gICAgICByZWFsTmFtZTogKG5ld05vZGUgYXMgYW55KS5uYW1lIHx8IG5ld05vZGUubGFiZWwsXG4gICAgICBfcGFyZW50OiB0cnVlLCAvLyBqdXN0IHVzZSBpdCB0byBkZXRlY3QgaWYgaXQgaGFzIGJlZW4gZGVsZXRlZFxuICAgICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gX3BhcmVudCB3YXMgZGVsZXRlZCBzb21lbmUgaW5zdGVhZCB0byBwdXQgdGhpcyBpbiByb290XG4gICAgICAgICAgcm9vdC5hZGRSb290KHRoaXMpO1xuICAgICAgICAgIC8vIHB1dCBpdCBiYWNrIHNvIGl0IGNhbiBiZSBkZWxldGVkIGFnYWluXG4gICAgICAgICAgdGhpcy5fcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGUoZGF0YSk7XG4gICAgICB9LFxuICAgICAgYWRkQ2hpbGQobm9kZUNoaWxkKSB7XG4gICAgICAgIHRoaXMuYWRkKHJvb3QuY3JlYXRlTm9kZShub2RlQ2hpbGQpKTtcbiAgICAgIH1cbiAgICB9KSwge1xuICAgICAgbGFiZWw6IHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlYWxOYW1lIHx8ICcnO1xuICAgICAgICB9LFxuICAgICAgICBzZXQobmFtZSkge1xuICAgICAgICAgIHRoaXMucmVhbE5hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVhbE5hbWUgfHwgJyc7XG4gICAgICAgIH0sXG4gICAgICAgIHNldChuYW1lKSB7XG4gICAgICAgICAgdGhpcy5yZWFsTmFtZSA9IG5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzaG93OiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gIXRoaXMuaGlkZGVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQoc2hvdykge1xuICAgICAgICAgIHRoaXMuaGlkZGVuID0gIXNob3c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19