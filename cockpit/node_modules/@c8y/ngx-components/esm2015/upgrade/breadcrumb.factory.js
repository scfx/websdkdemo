import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { BridgeService } from './bridge.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './bridge.service';
export class Ng1BreadcrumbFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
        this.trigger = new ReplaySubject(1);
        this.breadcrumbs = this.trigger.pipe(debounceTime(100), switchMap(() => {
            return this.bridge.getBreadcrumbs();
        }));
    }
    get() {
        this.trigger.next();
        return this.breadcrumbs;
    }
}
Ng1BreadcrumbFactoryService.ɵfac = function Ng1BreadcrumbFactoryService_Factory(t) { return new (t || Ng1BreadcrumbFactoryService)(ɵngcc0.ɵɵinject(ɵngcc1.BridgeService)); };
Ng1BreadcrumbFactoryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng1BreadcrumbFactoryService, factory: Ng1BreadcrumbFactoryService.ɵfac });
Ng1BreadcrumbFactoryService.ctorParameters = () => [
    { type: BridgeService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng1BreadcrumbFactoryService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BridgeService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5mYWN0b3J5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi91cGdyYWRlL2JyZWFkY3J1bWIuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUdqRCxNQUFNLE9BQU8sMkJBQTJCO0FBQUcsSUFRekMsWUFDVSxNQUFxQjtBQUM5QixRQURTLFdBQU0sR0FBTixNQUFNLENBQWU7QUFDakMsUUFUVSxZQUFPLEdBQVEsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUMsUUFBVSxnQkFBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNyQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDbkIsWUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDMUMsUUFBSSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osSUFFSyxDQUFDO0FBQ04sSUFDRSxHQUFHO0FBQ0wsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hCLFFBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNIO3VEQWpCQyxVQUFVOytKQUNUO0FBQUM7QUFBcUQsWUFIL0MsYUFBYTtBQUFHOzs7OEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJyZWFkY3J1bWJGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2JyaWRnZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nMUJyZWFkY3J1bWJGYWN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEJyZWFkY3J1bWJGYWN0b3J5IHtcbiAgcHJpdmF0ZSB0cmlnZ2VyOiBhbnkgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgcHJpdmF0ZSBicmVhZGNydW1icyA9IHRoaXMudHJpZ2dlci5waXBlKFxuICAgIGRlYm91bmNlVGltZSgxMDApLFxuICAgIHN3aXRjaE1hcCgoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5icmlkZ2UuZ2V0QnJlYWRjcnVtYnMoKTtcbiAgICB9KVxuICApO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJyaWRnZTogQnJpZGdlU2VydmljZVxuICApIHt9XG5cbiAgZ2V0KCkge1xuICAgIHRoaXMudHJpZ2dlci5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuYnJlYWRjcnVtYnM7XG4gIH1cbn1cbiJdfQ==