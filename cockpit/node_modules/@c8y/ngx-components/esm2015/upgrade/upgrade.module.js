import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
import { absoluteDateServiceProvider } from './absolute-date.service';
import * as angular from 'angular';
import { setAngularJSGlobal } from '@angular/upgrade/static';
import * as ɵngcc0 from '@angular/core';
setAngularJSGlobal(angular);
export class UpgradeModule {
}
UpgradeModule.ɵfac = function UpgradeModule_Factory(t) { return new (t || UpgradeModule)(); };
UpgradeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: UpgradeModule });
UpgradeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        absoluteDateServiceProvider,
        bridgeServiceProvider,
        authBridgeServiceProvider,
        { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
        { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
        { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
        { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
        { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
        { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
    ], imports: [[RouterModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UpgradeModule, [{
        type: NgModule,
        args: [{
                imports: [RouterModule],
                exports: [],
                providers: [
                    absoluteDateServiceProvider,
                    bridgeServiceProvider,
                    authBridgeServiceProvider,
                    { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
                    { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
                    { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
                    { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
                    { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
                    { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UpgradeModule, { imports: function () { return [RouterModule]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3VwZ3JhZGUvdXBncmFkZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDYixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEUsT0FBTyxLQUFLLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7O0FBRTdELGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBaUI1QixNQUFNLE9BQU8sYUFBYTtBQUFHO3lDQWY1QixRQUFRLFNBQUMsa0JBQ1IsT0FBTyxFQUFFLENBQUM7R0FBWSxDQUFDLGtCQUN2QixPQUFPLEVBQUUsRUFBRSxrQkFDWCxTQUFTLEVBQUUsc0JBQ1Q7MEJBQTJCLHNCQUMzQixxQkFBcUI7aUJBQ3JCO0tBQXlCLHNCQUN6QixFQUFFO0tBQU8sRUFBRSxvQkFBb0IsRUFBRTtFQUFRLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxzQkFDaEYsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFO0dBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLHNCQUNwRSxFQUFFLE9BQU8sRUFBRTtXQUFlLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsc0JBQy9FLEVBQUU7TUFBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtTQUN4RSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDJCQUEyQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7cUJBQ2hGLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUU7SUFBSyxFQUFFLElBQUksRUFBRSxrQkFDckU7T0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NLQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2JyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEhPT0tfQUNUSU9OLFxuICBIT09LX0FDVElPTl9CQVIsXG4gIEhPT0tfQlJFQURDUlVNQixcbiAgSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gIEhPT0tfVEFCUyxcbiAgSE9PS19ET0NTLFxuICBSb3V0ZXJNb2R1bGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYWN0aW9uLWJhci5mYWN0b3J5JztcbmltcG9ydCB7IE5nMUFjdGlvbkZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9hY3Rpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFCcmVhZGNydW1iRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2JyZWFkY3J1bWIuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFOb2Rlc0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9ub2Rlcy5mYWN0b3J5JztcbmltcG9ydCB7IE5nMVRhYnNGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vdGFicy5mYWN0b3J5JztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZzFEb2NzRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2RvY3MuZmFjdG9yeSc7XG5pbXBvcnQgeyBhdXRoQnJpZGdlU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi9hdXRoLWJyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IGFic29sdXRlRGF0ZVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vYWJzb2x1dGUtZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgeyBzZXRBbmd1bGFySlNHbG9iYWwgfSBmcm9tICdAYW5ndWxhci91cGdyYWRlL3N0YXRpYyc7XG5cbnNldEFuZ3VsYXJKU0dsb2JhbChhbmd1bGFyKTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1JvdXRlck1vZHVsZV0sXG4gIGV4cG9ydHM6IFtdLFxuICBwcm92aWRlcnM6IFtcbiAgICBhYnNvbHV0ZURhdGVTZXJ2aWNlUHJvdmlkZXIsXG4gICAgYnJpZGdlU2VydmljZVByb3ZpZGVyLFxuICAgIGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIsXG4gICAgeyBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUywgdXNlQ2xhc3M6IE5nMU5vZGVzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX1RBQlMsIHVzZUNsYXNzOiBOZzFUYWJzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTl9CQVIsIHVzZUNsYXNzOiBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQUNUSU9OLCB1c2VDbGFzczogTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0JSRUFEQ1JVTUIsIHVzZUNsYXNzOiBOZzFCcmVhZGNydW1iRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0RPQ1MsIHVzZUNsYXNzOiBOZzFEb2NzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBVcGdyYWRlTW9kdWxlIHt9XG4iXX0=