import { Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { DynamicComponentDefinition, DynamicComponentExtension } from './dynamic-component.model';
import * as ɵngcc0 from '@angular/core';
export declare class DynamicComponentService extends StateService implements ExtensionPoint<DynamicComponentExtension> {
    private injector;
    items$: Observable<DynamicComponentDefinition[]>;
    readonly refreshTrigger: Subject<unknown>;
    readonly state$: BehaviorSubject<Set<DynamicComponentDefinition>>;
    /**
     * Additional factories that can be added by plugins.
     */
    factories: DynamicComponentExtension[];
    constructor(injector: Injector, router: Router, waitTimeout: number);
    refresh(): void;
    get state(): Set<DynamicComponentDefinition>;
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById(id: any): Promise<DynamicComponentDefinition>;
    add(component: DynamicComponentDefinition): void;
    remove(component: DynamicComponentDefinition): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DynamicComponentService, never>;
}

//# sourceMappingURL=dynamic-component.service.d.ts.map