{"version":3,"file":"cookie-banner.service.d.ts","sources":["cookie-banner.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Subject } from 'rxjs';\nimport { OptionsService } from '../../common/options.service';\nimport { Cookie, CookieBannerSettings, CookiePreferences } from './cookie-banner.model';\n/**\n * This service is handling the cookie banner and cookie preferences related logic.\n */\nexport declare class CookieBannerService {\n    private options;\n    readonly STORAGE_KEY: string;\n    readonly COOKIE_BANNER = \"cookieBanner\";\n    readonly COOKIE_PREFERENCES_CONFIG = \"cookiePreferences\";\n    isCookieBannerShowed$: Subject<boolean>;\n    cookieDescriptions: {\n        required: any;\n        functional: any;\n        marketing: any;\n    };\n    constructor(options: OptionsService);\n    /**\n     * Returns Cookie preferences configuration.\n     * @returns {object} Return an object with cookie preferences configuration defined in application options.\n     */\n    getCookiePreferencesConfig(): CookiePreferences;\n    /**\n     * Returns Cookie banner configuration.\n     * @returns {object} Return an object with cookie banner configuration defined in application options.\n     */\n    getCookieBannerSettings(): CookieBannerSettings;\n    /**\n     * Converts the cookie preferences to boolean. Sets the cookie preferences configuration in local storage.\n     * @param {object} cookiePreferences Object with cookie preferences configuration\n     */\n    setCookies(cookiePreferences: CookiePreferences): void;\n    /**\n     * Verifies that cookie banner should be shown.\n     * @returns {boolean} Returns if the cookie banner should be shown.\n     */\n    shouldShowCookieBanner(): boolean;\n    /**\n     * Gets the cookie preferences configuration from local storage.\n     * @returns {object} Object with cookie preferences configuration.\n     */\n    getUserCookiePreferences(): CookiePreferences;\n    /**\n     * Verifies that cookie preferences configuration is defined.\n     * @returns {boolean} Returns if the cookie preferences configuration is defined.\n     */\n    isConfigCookiePreferencesDefined(): boolean;\n    /**\n     * Verifies that functional cookies are enabled.\n     * @returns {boolean} True when functional cookies are enabled.\n     */\n    isFunctionalCookieEnabled(): boolean;\n    /**\n     * Description of cookies.\n     * @param {'required' | 'functional' | 'marketing'} cookieType Takes one of the following options: 'required', 'functional', 'marketing'.\n     * @returns {string} The default cookie description, if not explicitly defined in application options.\n     */\n    getCookieDescription(cookieType: 'required' | 'functional' | 'marketing'): string;\n    /**\n     * Transforms cookie preferences configuration object to an array of cookie preferences objects. Each object in returned array contains cookie 'name', 'value' and 'isReadonly' property.\n     * @param {object} cookiePreferences.\n     * @returns {Array} Array shows if the cookie is Readonly.\n     */\n    transformCookiePreferencesToList(cookiePreferences: CookiePreferences): Cookie[];\n    /**\n     * Transforms an array of cookie preferences objects to cookie preferences configuration object.\n     * @param {Array} cookiePreferencesList Array of cookie preferences.\n     * @returns {object} An object with cookie preferences configuration.\n     */\n    transformCookiePreferencesListToCookiePreferences(cookiePreferencesList: Cookie[]): CookiePreferences;\n}\n"]}