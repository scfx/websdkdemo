import { HttpClient } from '@angular/common/http';
import { TranslateLoader } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { OptionsService } from '../common/options.service';
import { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';
import * as ɵngcc0 from '@angular/core';
export declare class TranslateCustomLoader implements TranslateLoader {
    private http;
    private optionsService;
    private cachedLocaleDictionaryService;
    private path;
    private languages;
    constructor(http: HttpClient, optionsService: OptionsService, cachedLocaleDictionaryService: CachedLocaleDictionaryService, path?: string, languages?: any);
    getTranslation(lang: string): Observable<any>;
    /**
     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
     */
    getDictionaryWithTrimmedKeys(dictionary: object): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TranslateCustomLoader, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TranslateCustomLoader>;
}
export declare function trimTranslationKey(key: any): any;

//# sourceMappingURL=translate.loader.d.ts.map