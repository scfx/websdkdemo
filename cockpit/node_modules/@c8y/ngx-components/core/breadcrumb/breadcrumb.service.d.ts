import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { Breadcrumb } from './breadcrumb.model';
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare type BreadcrumbExtension = Breadcrumb | Breadcrumb[] | ExtensionFactory<Breadcrumb>;
export declare const HOOK_BREADCRUMB: InjectionToken<unknown>;
export declare class BreadcrumbService extends StateService implements ExtensionPoint<BreadcrumbExtension> {
    private injector;
    items$: Observable<Breadcrumb[]>;
    factories: BreadcrumbExtension[];
    readonly refreshTrigger: Subject<unknown>;
    readonly state$: BehaviorSubject<Set<Breadcrumb>>;
    private preferredPath;
    constructor(injector: Injector, router: Router);
    get state(): Set<Breadcrumb>;
    /**
     * Adds a new item to the action bar in the header.
     * @param item The item to add.
     */
    add(item: Breadcrumb): void;
    /**
     * Removes an action bar item from the header.
     * @param item The item to remove.
     */
    remove(item: Breadcrumb): void;
    /**
     * Refresh the extension factories
     */
    refresh(): void;
    /**
     * Sets the crumb that contains that path to the top.
     * @param path The path to prefer.
     */
    selectPreferredByPath(path: string): void;
    sortByPreferredPath(breadcrumbs: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<BreadcrumbService, never>;
}

//# sourceMappingURL=breadcrumb.service.d.ts.map