import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { ActionBarItem } from './action-bar.model';
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare type ActionBarExtension = ActionBarItem | ActionBarItem[] | ExtensionFactory<ActionBarItem>;
/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 *
 * @example
 * ```typescript
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 * ```
 *
 */
export declare const HOOK_ACTION_BAR: InjectionToken<ActionBarExtension>;
/**
 * A service which defines action-bar items via the multi provider concept.
 *
 * @example
 * ```typescript
 * // preferred way, multi provider concept:
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 *
 * // use services:
 * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
 * ```
 */
export declare class ActionBarService extends StateService implements ExtensionPoint<ActionBarExtension> {
    private injector;
    items$: Observable<ActionBarItem[]>;
    factories: ActionBarExtension[];
    readonly refreshTrigger: Subject<unknown>;
    protected state$: BehaviorSubject<Set<ActionBarItem>>;
    /**
     * @ignore
     */
    constructor(injector: Injector, router: Router);
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state(): Set<ActionBarItem>;
    /**
     * Refreshes the current store.
     */
    refresh(): void;
    /**
     * Adds a new item to the action bar in the header and emits a state change.
     * @param item The item to add.
     */
    add(item: ActionBarItem): void;
    /**
     * Removes an action bar item from the header and emits a state change.
     * @param item The item to remove.
     */
    remove(item: ActionBarItem): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ActionBarService, never>;
}

//# sourceMappingURL=action-bar.service.d.ts.map