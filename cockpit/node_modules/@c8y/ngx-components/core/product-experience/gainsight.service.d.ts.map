{"version":3,"file":"gainsight.service.d.ts","sources":["gainsight.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { ICustomProperties } from '@c8y/client';\nimport { AppStateService } from '../common/ui-state.service';\nimport { OptionsService } from '../common/options.service';\nimport { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';\nimport { UserPreferencesService } from '../common/user-preferences/user-preferences.service';\n/**\n * A service to manage the Gainsight integration. It allows to load the\n * tag and\n */\nexport declare class GainsightService {\n    private appState;\n    private options;\n    private cookieBannerService;\n    private userPreferencesService;\n    /**\n     * A subject that emits the tag function as soon as a new tag is set.\n     */\n    tagFunction$: BehaviorSubject<any>;\n    readonly USER_PREFERENCES_KEY = \"gainsightEnabled\";\n    private readonly GAINSIGHT_URL;\n    private readonly GAINSIGHT_GLOBAL_SCOPE;\n    private readonly SCRIPT_EXECUTION_WAIT_TIME;\n    private readonly OPTIONS_KEY_CATEGORY;\n    private readonly OPTIONS_KEY_NAME;\n    private isScriptLoaded;\n    private gainsightKey;\n    constructor(appState: AppStateService, options: OptionsService, cookieBannerService: CookieBannerService, userPreferencesService: UserPreferencesService);\n    isGainsightDisabledInUserPreferences(): Promise<boolean>;\n    setFunctionalCookie(value: boolean): void;\n    getGainsightKey(): Promise<string>;\n    /**\n     * Returns the tag global function which can be used to identify user\n     * or add special events.\n     */\n    get tagFunction(): any;\n    /**\n     * Load the script tag and calls the identify function to start the tracking.\n     * @param currentTenant The current tenant.\n     * @param identify If set to false, only the tag is loaded.\n     */\n    loadTag(currentTenant: any, identify?: boolean): Promise<void>;\n    /**\n     * Identifies the user/account at Gainsight.\n     * @param user The user which is given to Gainsight.\n     * @param tenant The tenant which is given to Gainsight.\n     * @param versionUI The UI version used.\n     * @param versionBE The BE version used.\n     */\n    identify(user: any, tenant: any, instanceId: any, versionUI?: any, versionBE?: any): void;\n    triggerEvent(eventName: string, props?: object): void;\n    /**\n     * Checks if the Gainsight's tag should be loaded.\n     * The decision to load Gainsight will depend on custom properties and functional cookies.\n     * @param customProperties Tenant's customProperties.\n     */\n    shouldLoadGainsightTag(customProperties: ICustomProperties): boolean;\n    canEditProductExperienceSettings(): Promise<boolean>;\n    private isGainsightDisabled;\n    private isCustomBranding;\n    private loadScriptTag;\n    private getInstanceIdFromUrl;\n}\n"]}