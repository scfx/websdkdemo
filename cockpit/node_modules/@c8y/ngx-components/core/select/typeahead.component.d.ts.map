{"version":3,"file":"typeahead.component.d.ts","sources":["typeahead.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, QueryList, AfterViewInit } from '@angular/core';\nimport { Validator, AbstractControl } from '@angular/forms';\nimport { IIdentified } from '@c8y/client';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { ListItemComponent } from '../list-group/list-item.component';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class TypeaheadComponent implements ControlValueAccessor, Validator, AfterViewInit {\n    searchControl: ElementRef;\n    searchControlModel: any;\n    dropdown: BsDropdownDirective;\n    list: QueryList<ListItemComponent>;\n    required: boolean;\n    maxlength: string | number;\n    disabled: boolean;\n    allowFreeEntries: boolean;\n    placeholder: string;\n    displayProperty: string;\n    icon: string;\n    name: string;\n    autoClose: boolean;\n    container: '' | 'body';\n    selected: IIdentified;\n    onSearch: EventEmitter<string>;\n    onIconClick: EventEmitter<string>;\n    private subscription;\n    private onChange;\n    private onTouched;\n    private readonly KEYCODE_UP;\n    private readonly KEYCODE_DOWN;\n    private readonly KEYCODE_TAB;\n    private readonly KEYCODE_ENTER;\n    private readonly KEYCODE_ESC;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    doBlur(): void;\n    getDisplayProperty(): any;\n    onShown(): void;\n    /**\n     * Resets the input field - clear value and clean field to be pristine and untouched.\n     */\n    reset(): void;\n    ngOnDestroy(): void;\n    ngAfterViewInit(): void;\n    handleKeyboard(event: any): void;\n    validate(ctrl: AbstractControl): {\n        [key: string]: any;\n    };\n    private selectNextItemOnKeyboardMove;\n}\n"]}