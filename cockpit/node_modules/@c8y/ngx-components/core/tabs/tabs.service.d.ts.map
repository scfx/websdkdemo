{"version":3,"file":"tabs.service.d.ts","sources":["tabs.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ExtensionFactory, ExtensionPoint } from '../common/extension-hooks';\nimport { StateService } from '../common/state-service.abstract';\nimport { Tab } from './tab.model';\nimport { OptionsService } from '../common/options.service';\n/**\n * An extension HOOK can use either a pure value:\n * ```typescript\n *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }\n * ```\n *\n * Or an array to directly register multiple:\n * ```typescript\n *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }\n * ```\n *\n * Or an ExtensionFactory which allows to define a get() function. This function\n * gets called on each navigation with the current route and can return values\n * async (observable or promise).\n * ```typescript\n *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }\n * ```\n */\nexport declare type TabExtension = Tab | Tab[] | ExtensionFactory<Tab>;\n/**\n * A hook to use for Multi Provider extension.\n */\nexport declare const HOOK_TABS: InjectionToken<TabExtension[]>;\n/**\n * A service which defines the used tabs.\n */\nexport declare class TabsService extends StateService implements ExtensionPoint<TabExtension> {\n    private injector;\n    private translateService;\n    private options;\n    items$: Observable<Tab[]>;\n    orientation$: Observable<string>;\n    readonly refreshTrigger: Subject<unknown>;\n    readonly state$: BehaviorSubject<Set<Tab>>;\n    /**\n     * Additional factories that can be added by plugins.\n     */\n    factories: TabExtension[];\n    constructor(injector: Injector, router: Router, translateService: TranslateService, options: OptionsService);\n    prepareTabs(tabs: any): any;\n    sortTabs(tabs: any): any;\n    /**\n     * Refresh the extension factories\n     */\n    refresh(): void;\n    /**\n     * Returns the current state.\n     * @readonly\n     * @returns The current set of actions.\n     */\n    get state(): Set<Tab>;\n    /**\n     * Adds a new item to tabs and emits state change\n     * @param item The item to add.\n     */\n    add(item: Tab): void;\n    /**\n     * Removes a tab and emits a state change.\n     * @param item The item to remove.\n     */\n    remove(item: Tab): void;\n    get firstTab$(): Observable<unknown>;\n}\n"]}