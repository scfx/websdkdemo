import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
/**
 * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
 *
 * ## Example:
 *
 * ```html
 *  <div>
 *    <c8y-drop-area
 *      (dropped)="uploadFile($event)"
 *      [icon]="'upload'">
 *    </c8y-drop-area>
 *  </div>
 * ```
 */
export declare class DropAreaComponent implements OnInit, ControlValueAccessor {
    private cd;
    title: any;
    message: any;
    icon: string;
    loadingMessage: any;
    forceHideList: boolean;
    /** Affects displaying both the drop zone and the list of dropped files. */
    alwaysShow: boolean;
    clickToOpen: boolean;
    loading: boolean;
    progress: number;
    dropped: EventEmitter<DroppedFile[]>;
    maxAllowedFiles: number;
    files: FileList;
    /** Specifies a filter for what file types the user can pick from the file input dialog box. */
    accept: string;
    isOver: boolean;
    errors: boolean;
    errorMessage: string;
    filesNameString: string;
    area: ElementRef;
    zone: ElementRef;
    picker: ElementRef;
    constructor(cd: ChangeDetectorRef);
    ngOnInit(): void;
    /**
     * Toggles the style of the drop zone element when a file is dragged over the component.
     */
    toggle($event?: any): void;
    /**
     * Shows computer browser with files to drop into drop-area zone.
     */
    showPicker($event?: any): void;
    /**
     * Triggered when file is on over drop area, but not dropped.
     */
    onOver(): void;
    /**
     * Triggered when file is dropped.
     */
    onPick($event: any): void;
    /**
     * Handle file when it is dropped into drop-area.
     */
    onDrop($event: any): void;
    /**
     * Checks condition what should be displayed: drop-area zone or list of dropped files.
     */
    shouldShowFilesList(): boolean;
    /**
     * Triggered when file is picked over web application.
     */
    stopDragging(): void;
    /**
     * Delete files already dropped files.
     */
    onDelete(): void;
    onChange: (value: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private onFilesSelected;
    private getFilesNamesAsString;
    private isFilesArrayEmpty;
    private isTooManyFiles;
    private hasEmptyFiles;
    private isAnyFileEmpty;
    private clearErrors;
    private preventDefault;
    private compose;
    private read;
    private onLoad;
}
export interface DroppedFile {
    file: File;
    readAsText(): any;
    readAsArrayBuffer(): any;
    readAsBinaryString(): any;
    readAsDataURL(): any;
    readAsJson(): any;
}
