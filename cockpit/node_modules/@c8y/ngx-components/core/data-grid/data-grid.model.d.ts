import { TemplateRef, Type } from '@angular/core';
import { IResultList } from '@c8y/client';
/** Describes the interface of the data grid. */
export interface DataGrid {
    /** The list of columns. */
    columns: Column[];
    /** The list of items. */
    rows: Row[];
    /** Pagination object. */
    pagination: Pagination;
    /** A callback function to fetch server data. */
    serverSideDataCallback: ServerSideDataCallback;
    /** Whether items are selectable. */
    selectable: boolean;
    /** The name of the primary key property. */
    selectionPrimaryKey: string;
    /** Data grid display options. */
    displayOptions: DisplayOptions;
    /** Individual action controls. */
    actionControls: ActionControl[];
    /** Bulk action controls. */
    bulkActionControls: BulkActionControl[];
    /** Header action controls. */
    headerActionControls?: HeaderActionControl[];
}
/** Describes a data grid column. */
export interface Column {
    /** The name for the column. */
    name: string | SpecialColumnName;
    /** The column's header (if not given, `name` is used by default). */
    header?: string;
    /** The path in a row item to read the cell value from. */
    path?: string;
    /** Whether the column is displayed. */
    visible?: boolean;
    /** Whether the column can be moved to another position. */
    positionFixed?: boolean;
    /** Optional type of data in the column (used to set data-type attribute, e.g. for additional styling). */
    dataType?: ColumnDataType;
    /** The column's size, e.g. "40 px". */
    gridTrackSize?: string;
    /** Additional CSS classes for the header cell. */
    headerCSSClassName?: string | string[];
    /** Additional CSS classes for data cells. */
    cellCSSClassName?: string | string[];
    /** Whether the column is sortable. */
    sortable?: boolean;
    /** Whether the sort order is ascending, descending or not specified. */
    sortOrder?: SortOrder;
    /** Whether the column is filterable. */
    filterable?: boolean;
    /** The string to search for or a function for client-side filtering. */
    filterPredicate?: string | FilterPredicateFunction;
    /** Custom filtering form renderer can set any value here and it can be used to build a query to the server. */
    externalFilterQuery?: any;
    /** Custom data cell renderer component. Inject `CellRendererContext` to get access to data value, item and column object. */
    cellRendererComponent?: Type<any>;
    /** Custom header cell renderer component. Inject `CellRendererContext` to get access to header value and column object. */
    headerCellRendererComponent?: Type<any>;
    /** Custom filtering form renderer component. Inject `FilteringFormRendererContext` to get access to column object and methods: applyFilter, resetFilter. */
    filteringFormRendererComponent?: Type<any>;
}
/** Describes a column configuration. */
export interface ColumnConfig {
    /** The name for the column. */
    name?: string;
    /** Whether the column is displayed. */
    visible?: boolean;
    /** Whether the sort order is ascending, descending or not specified. */
    sortOrder?: SortOrder;
    /** The settings of filter in a column. */
    filter?: Filter;
}
/** Describes the settings of filter in a column. */
export interface Filter {
    /** Custom filtering form renderer can set any value here and it can be used to build a query to the server. */
    externalFilterQuery?: any;
}
/** Describes an object with data grid configuration. */
export interface GridConfig {
    /** The configuration objects for all the columns. */
    columns: ColumnConfig[];
    /** Pagination object. */
    pagination: Pagination;
}
/**  */
export declare const enum SpecialColumnName {
    /** Column with checkbox. */
    Checkbox = "checkbox",
    /** Column with row actions. */
    Actions = "actions"
}
/**  */
export declare const enum ColumnDataType {
    /** Column with icon. */
    Icon = "icon",
    /** Numeric column. */
    Numeric = "numeric",
    /** Column with short text. */
    TextShort = "text-short",
    /** Column with long text. */
    TextLong = "text-long"
}
/** Classes for column data record. */
export declare const enum ColumnDataRecordClassName {
    /** An icon. */
    Icon = "data-record-icon",
    /** A header. */
    Header = "data-record-header",
    /** Default - empty. */
    Default = ""
}
export declare const minColumnGridTrackSize = 80;
/** Maps column types to relative widths. */
export declare const ratiosByColumnTypes: {
    /** The width ration for icon column type. */
    icon: number;
    /** The width ration for numeric column type. */
    numeric: number;
    /** The width ration for short text column type. */
    'text-short': number;
    /** The width ration for long text column type. */
    'text-long': number;
};
/** Sorting order: ascending, descending, or not specified. */
export declare type SortOrder = 'asc' | 'desc' | '';
/**
 * A filter predicate function.
 * @param item The current item to be checked.
 * @param path The property path configured in the current column.
 * @returns The boolean value indicating whether the item matches a condition or not.
 */
export declare type FilterPredicateFunction = (item: object, path: string) => boolean;
/** Filtering actions. */
export declare enum FilteringActionType {
    /** Action invoked when filter settings are to be applied. */
    ApplyFilter = "APPLY_FILTER",
    /** Action invoked when filter settings are to be cleared. */
    ResetFilter = "RESET_FILTER"
}
/** Describes an item in the row. */
export interface Row {
    /** The unique identifier of the item. */
    id: string;
    /** Any item property. */
    [key: string]: any;
}
/** Describes a pagination object. */
export interface Pagination {
    /** The number of the current page. */
    currentPage: number;
    /** The number of the next page. */
    nextPage?: number;
    /** The number of items on a single page. */
    pageSize: number;
}
/**
 * A callback function to fetch server data.
 * @param dataSourceModifier The current data source modifier.
 * @returns Returns the result from server.
 */
export declare type ServerSideDataCallback = (dataSourceModifier: DataSourceModifier) => ServerSideDataResult;
/** Describes a data source modifier for requesting server data. */
export interface DataSourceModifier {
    /** The list of columns. */
    columns: Column[];
    /** Text to search. */
    searchText: string;
    /** Pagination object. */
    pagination: Pagination;
    /** Selection info object. */
    selection: {
        /** Whether the selection is enabled. */
        enabled: boolean;
        /** The name of the primary key. */
        primaryKey: string;
    };
}
/** Describes a result from server with data and additional statistics. */
export declare type ServerSideDataResult = IResultList<object> & {
    /** The real grand total number of items (the whole dataset). */
    size: number;
    /** The number of items after filtering applied to the whole dataset (subset). */
    filteredSize: number;
    /** The list of ids of all filtered items (subset). */
    filteredDataIds?: string[];
};
/** Describes an object with data source statistics. */
export interface DataSourceStats {
    /** The real grand total number of items (the whole dataset). */
    size: number;
    /** The number of items after filtering applied to the whole dataset (subset). */
    filteredSize: number;
    /** The number of the current page. */
    currentPage: number;
    /** The number of the next page. */
    nextPage?: number;
    /** The number of items currently shown in the list view, a.k.a. current page (what the user sees on screen). */
    currentPageSize: number;
    /** The number of items on the first page.  */
    firstPageSize: number;
}
/** Describes data grid display options. */
export interface DisplayOptions {
    /** Show or hide zebra-striping in the table */
    striped: boolean;
    /** Show or hide each cell border */
    bordered: boolean;
    /** Show or hide the grid header */
    gridHeader: boolean;
    /** Show or hide filter label in the grid header */
    filter: boolean;
}
/** Describes a data grid action control for individual item. */
export interface ActionControl {
    /** The type of the action, predefined or custom. */
    type: BuiltInActionType | string;
    /** The label for the action button. */
    text?: string;
    /** The icon for the action button. */
    icon?: string;
    /**
     * A callback function.
     * @param item The item to perform the action on.
     * @param reload The function to call, if you want to reload the grid.
     */
    callback: ((item: Row, reload: () => void) => void) | Function;
    /**
     * Determines if the action should be shown for given item (if not defined, the action will be shown always).
     * @param item The item for which the action is supposed to be performed.
     */
    showIf?: ((item: Row) => boolean) | Function;
    [key: string]: any;
}
/** Describes a data grid action control for multiple items. */
export interface BulkActionControl extends ActionControl {
    /**
     * A callback function.
     * @param selectedItemIds The list of ids of the selected items.
     * @param reload The function to call, if you want to reload the grid.
     */
    callback(selectedItemIds: string[], reload: () => void): void;
    /**
     * Determines if the action should be shown for given selected items (if not defined, the action will be shown always).
     * @param selectedItemIds The list of ids of the selected items for which the action is supposed to be performed.
     */
    showIf?(selectedItemIds: string[]): boolean;
}
/** Describes a data grid action control for the header. */
export interface HeaderActionControl extends ActionControl {
    /**
     * Custom template can be provided. If no template is provided,
     * the default headerActionControl template is used.
     */
    template?: TemplateRef<any>;
    /**
     * A callback function.
     */
    callback(): void;
    /**
     * Determines if the action should be shown.
     */
    showIf?(): boolean;
}
/** Predefined types of actions. */
export declare const enum BuiltInActionType {
    /** Edit built-in action. */
    Edit = "EDIT",
    /** Delete built-in action. */
    Delete = "DELETE",
    /** Export built-in action. */
    Export = "EXPORT"
}
