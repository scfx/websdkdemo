{"version":3,"file":"tenant-ui.service.d.ts","sources":["tenant-ui.service.d.ts"],"names":[],"mappingssourcesContent":["import { ApplicationService, ITenantLoginOption, UserService } from '@c8y/client';\nimport { AppStateService } from './ui-state.service';\n/** The helper UI service for tenant related methods built upon client services. */\nexport declare class TenantUiService {\n    private userService;\n    private appStateService;\n    private applicationService;\n    readonly MANAGEMENT = \"management\";\n    readonly ROLE_TENANT_MANAGEMENT_READ = \"ROLE_TENANT_MANAGEMENT_READ\";\n    constructor(userService: UserService, appStateService: AppStateService, applicationService: ApplicationService);\n    /**\n     * Checks whether current tenant is the management tenant.\n     * @returns True if current tenant is the management tenant.\n     */\n    isManagementTenant(): Promise<boolean>;\n    /**\n     * Checks whether current tenant is an enterprise tenant.\n     * An enterprise tenant is a tenant which has subscribed:\n     * - `branding` microservice or `feature-branding` feature app,\n     * - `sslmanagement` microservice,\n     * - `feature-user-hierarchy` feature app,\n     * - `feature-broker` feature app.\n     *\n     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.\n     *\n     * @returns True, if current tenant is an enterprise tenant.\n     */\n    isEnterpriseTenant(): Promise<boolean>;\n    /**\n     * Checks whether the current user has read access to tenants, i.e.:\n     * - the current tenant can create subtenants or it's the management tenant,\n     * - the current user has ROLE_TENANT_MANAGEMENT_READ role.\n     * @returns True, if the current user has read access to tenants.\n     */\n    canReadTenants(): boolean;\n    /**\n     * Returns tenant login option which is preferred.\n     *\n     * @param All available tenant's login options.\n     *\n     * @returns Returns ITenantLoginOption.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const preferredLoginOption = tenantLoginOptionsService.getPreferredLoginOption(loginOptions);\n     *   })();\n     * ```\n     */\n    getPreferredLoginOption(loginOptions: ITenantLoginOption[]): ITenantLoginOption;\n    /**\n     * Returns Oauth2 login option if it can be used by UI.\n     *\n     * @param All available tenant's login options.\n     *\n     * @returns Returns ITenantLoginOption.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const oauth2 = tenantLoginOptionsService.getOauth2Option(loginOptions);\n     *   })();\n     * ```\n     */\n    getOauth2Option(loginOptions: ITenantLoginOption[]): ITenantLoginOption;\n    /**\n     * Callback which checks if login option is visible on login page.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const loginOptionsVisibleOnLoginPage = loginOptions.filter(tenantLoginOptionsService.isVisibleOnLoginPage);\n     *   })();\n     * ```\n     */\n    isVisibleOnLoginPage(loginOption: ITenantLoginOption): boolean;\n    /**\n     * Callback which checks if login option type is 'OAUTH2_INTERNAL'.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const oauth2InternalLoginOptions = loginOptions.filter(tenantLoginOptionsService.isOauthInternal);\n     *   })();\n     * ```\n     */\n    isOauthInternal(loginOption: ITenantLoginOption): boolean;\n    /**\n     * Callback which checks if login option type is 'BASIC'.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const basicLoginOptions = loginOptions.filter(tenantLoginOptionsService.isBasic);\n     *   })();\n     * ```\n     */\n    isBasic(loginOption: ITenantLoginOption): boolean;\n    /**\n     * Callback which checks if login option type is 'OAUTH2' and grantType is 'AUTHORIZATION_CODE'.\n     *\n     * **Example**\n     * ```typescript\n     *\n     *    (() => {\n     *      const oauth2LoginOptions = loginOptions.filter(tenantLoginOptionsService.OAUTH2);\n     *   })();\n     * ```\n     */\n    isOauth2(loginOption: ITenantLoginOption): boolean;\n    private hasApp;\n    private isManagement;\n}\n"]}