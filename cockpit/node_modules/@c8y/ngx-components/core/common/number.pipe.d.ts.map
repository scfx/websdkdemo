{"version":3,"file":"number.pipe.d.ts","sources":["number.pipe.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DecimalPipe as NgDecimalPipe } from '@angular/common';\nexport declare const NUMBER_FORMAT_REGEXP: RegExp;\n/**\n * Formats a value according to digit options and locale rules.\n * Extends the behavior of Angular's <code>number</code> pipe by\n * providing an option to define if a truncated value should be\n * rounded up or down (with the <code>number</code> pipe the\n * value will be rounded using the \"to-nearest\" method).\n *\n * ```html\n * <span>{{ 3.45612 | c8yNumber: 'ceil':'1.1-3' }}</span> <!-- 3.457 -->\n * <span>{{ 3.46 | c8yNumber: 'ceil':'1.3-3' }}</span> <!-- 3.460 -->\n * <span>{{ 3.45685 | c8yNumber: 'floor':'1.1-3' }}</span> <!-- 3.456 -->```\n */\nexport declare class NumberPipe extends NgDecimalPipe {\n    constructor(locale: string);\n    transform(value: number | string, round: 'ceil' | 'floor' | null | undefined, digitsInfo?: string, locale?: string): string | null;\n    transform(value: null | undefined, round: 'ceil' | 'floor' | null | undefined, digitsInfo?: string, locale?: string): null;\n}\n"]}