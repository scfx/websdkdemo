{"version":3,"file":"permissions.service.d.ts","sources":["permissions.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AppStateService } from './ui-state.service';\nimport { InventoryService } from '@c8y/client';\nimport { UserService } from '@c8y/client';\nexport declare class Permissions {\n    private appState;\n    private inventory;\n    private user;\n    constructor(appState: AppStateService, inventory: InventoryService, user: UserService);\n    /**\n     * Checks if the current user has write permissions for the given mo.\n     * (either through global role, individual device permissions or via inventory roles).\n     *\n     * @param {array} roleIds Array of roles which the current user should have.\n     * @param {object} mo The managed object for which we are checking whether the user has access.\n     */\n    canEdit(roleIds: any, mo: any): Promise<boolean>;\n    hasRole(roleId: string): boolean;\n    hasAllRoles(roleIds: string[]): boolean;\n    hasAnyRole(roleIds: string[]): boolean;\n    protected checkIfOwner(mo: any): Promise<boolean>;\n    protected checkWithRequest(mo: any): Promise<boolean>;\n    private checkIfCanEdit;\n}\n"]}