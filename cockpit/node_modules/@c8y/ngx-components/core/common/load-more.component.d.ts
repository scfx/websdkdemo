import { ElementRef, EventEmitter, TemplateRef } from '@angular/core';
import { IIdentified, Paging } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class LoadMoreComponent {
    private element;
    paging: Paging<any>;
    useIntersection: boolean;
    hidden: boolean;
    container: ElementRef;
    class: string;
    maxIterations: number;
    noMoreDataHint: TemplateRef<any>;
    loadingTemplate: TemplateRef<any>;
    hideNoMoreDataHint: boolean;
    loadNextLabel: string;
    loadingLabel: string;
    onLoad: EventEmitter<IIdentified>;
    isLoading: boolean;
    counter: number;
    hasNoMoreData: boolean;
    private loadUntilIntersected;
    private readonly LOAD_SAME_PAGE_THRESHOLD;
    private intersectionObserver;
    private destroyed;
    get hostClass(): string;
    get hasMore(): boolean;
    constructor(element: ElementRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    loadMore(event?: any): Promise<void>;
    private intersectionLoading;
    private getLoadingThreshold;
    private shouldShowNoMoreDataHint;
    private shouldSwitchMode;
    private buttonInView;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<LoadMoreComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<LoadMoreComponent, "c8y-load-more", never, { "useIntersection": "useIntersection"; "hidden": "hidden"; "class": "class"; "maxIterations": "maxIterations"; "hideNoMoreDataHint": "hideNoMoreDataHint"; "paging": "paging"; "container": "container"; "noMoreDataHint": "noMoreDataHint"; "loadingTemplate": "loadingTemplate"; "loadNextLabel": "loadNextLabel"; "loadingLabel": "loadingLabel"; }, { "onLoad": "onLoad"; }, never, never>;
}

//# sourceMappingURL=load-more.component.d.ts.map