import { InjectionToken } from '@angular/core';
import { ApplicationOptions } from './ApplicationOptions';
import { ExtensionFactory } from './extension-hooks';
import { SystemOptionsService, TenantOptionsService } from '@c8y/ngx-components/api';
export declare const HOOK_OPTIONS: InjectionToken<ExtensionFactory<ApplicationOptions>>;
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
export declare class OptionsService extends ApplicationOptions {
    private systemOptionsService;
    private tenantOptionService;
    [key: string]: any;
    constructor(options: any, systemOptionsService: SystemOptionsService, tenantOptionService: TenantOptionsService);
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     */
    get(optionKey: keyof OptionsService, defaultValue?: any): any;
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    set(key: string, value: any): void;
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    getSupportUrl(): Promise<string | boolean>;
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    getActivateSupportUser(): Promise<boolean>;
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getSystemOption(category: string, key: string, defaultValue?: any): Promise<any>;
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getTenantOption(category: string, key: string, defaultValue?: any): Promise<any>;
    private setupOptions;
    private getOptionFromService;
    private parseOptionRawValue;
}
