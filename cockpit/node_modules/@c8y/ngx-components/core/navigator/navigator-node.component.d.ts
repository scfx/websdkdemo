import { ComponentFactoryResolver, QueryList, ViewContainerRef, EventEmitter, OnDestroy } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { NavigatorNode, ClickOptions } from './navigator-node';
import { NavigatorService } from './navigator.service';
import { PopoverConfirmComponent } from '../modal/popover-confirm.component';
import * as ɵngcc0 from '@angular/core';
export declare const enum ClickEventSource {
    ICON = "icon",
    EXPANDER = "expander",
    LINK = "link"
}
/**
 * Navigator node renderer.
 */
export declare class NavigatorNodeComponent implements OnDestroy {
    private componentFactoryResolver;
    private navigator;
    /**
     * @ignore
     */
    iconSlot: ViewContainerRef;
    /**
     * Navigator node.
     */
    node: NavigatorNode;
    /**
     * Determines whether the navigator node is a root node (top node in the hierarchy).
     */
    isRoot: boolean;
    /**
     * @ignore
     */
    routerLinkActive: RouterLinkActive;
    /**
     * @ignore
     */
    childrenNodes: QueryList<NavigatorNodeComponent>;
    /**
     * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
     *
     * The type of event depends on where you click on the navigator node:
     * * clicking the icon will broadcast the event "icon",
     * * clicking the expander will broadcast the event "expander",
     * * clicking the label will broadcast the event "link".
     */
    nodeClick: EventEmitter<string>;
    /**
     * @ignore
     */
    confirm: PopoverConfirmComponent;
    /**
     * Parent node renderer.
     */
    parentNode: NavigatorNodeComponent;
    private viewInitTimeout;
    constructor(componentFactoryResolver: ComponentFactoryResolver, navigator: NavigatorService);
    /**
     * @ignore
     */
    ngAfterViewInit(): void;
    /**
     * Expands the navigator node when the URL matches the path provided in the node.
     */
    openOnFirstUrl(): void;
    /**
     * Returns the expander title.
     */
    get expandTitle(): "Expand" | "Collapse";
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from?: 'icon' | 'expander' | 'link', $event?: MouseEvent): void;
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {boolean} recursive Open or close the children.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open: any, recursive?: any, forNode?: ClickOptions): void;
    /**
     * @ignore
     */
    ngOnDestroy(): void;
    private handleExpandCollapse;
    private expandParentIfActive;
    private updateIcon;
    private updateIconComponent;
    private updateIconTemplate;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NavigatorNodeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<NavigatorNodeComponent, "c8y-navigator-node-display", never, { "node": "node"; "isRoot": "isRoot"; }, { "nodeClick": "nodeClick"; }, never, never>;
}

//# sourceMappingURL=navigator-node.component.d.ts.map