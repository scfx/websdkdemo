{"version":3,"file":"stepper-buttons.component.d.ts","sources":["stepper-buttons.component.d.ts"],"names":[],"mappingssourcesContent":["import { CdkStep } from '@angular/cdk/stepper';\nimport { AfterContentInit, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { C8yStepper } from './stepper.component';\nimport { StepperButtonsVisibility } from './stepper.model';\n/**\n * C8yStepperButtons provides a convinient way to have, according to\n * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole\n * step-process. Buttons rendered with the help of this component will use the branding css.\n *\n * By default all steps with this component in use will render a next button, expect the last step.\n * The other way around, every step using this component will render a back button, expect the first step.\n * To get a cancel button rendered you need to handle the onCancel event.\n * For next and back button you don't need to handle the available events onNext and onBack because default behavior\n * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()\n * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following\n * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving\n * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back\n * on your own.\n *\n * With the component input [labels] you can change the label of each button in each step. It takes an object like this:\n * {next?: string, back?: string, cancel?: string}\n *\n * The [pending] input is of type boolean and will enable css animation for the next button when true.\n *\n * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup\n * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.\n * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.\n *\n * **Example**\n * ```\n * <c8y-stepper>\n *  <cdk-step>\n *    <!--\n *      your html code\n *          ...\n *          ...    -->\n *    <c8y-stepper-buttons\n *     (onNext)=\"save()\"\n *     [labels]=\"{ next: 'Save' }\"\n *     [pending]=\"pendingStatus\"\n *     ></c8y-stepper-buttons>\n *  </cdk-step>\n * </c8y-stepper>\n *\n * // in your component:\n * async save() {\n *   this.pendingStatus = true;\n *   // your async request goes here ...\n *   // await something();\n *   this.pendingStatus = false;\n *   this.stepper.next();\n * }\n * ```\n */\nexport declare class C8yStepperButtons implements AfterContentInit, OnDestroy, OnChanges {\n    private stepper;\n    private step;\n    /**\n     * Optional\n     * Specify custom labels for each button (cancel, back or next)\n     */\n    labels?: {\n        cancel?: string;\n        back?: string;\n        next?: string;\n        custom?: string;\n    };\n    /**\n     * Optional\n     * Indicates if a request is pending and sets the next button\n     * to disabled when true\n     */\n    pending?: boolean;\n    /**\n     * Disabled state of a button\n     */\n    disabled?: boolean;\n    /**\n     * EventEmitter which emits when cancel button is clicked\n     */\n    onCancel: EventEmitter<any>;\n    /**\n     * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.\n     */\n    onNext: EventEmitter<{\n        stepper: C8yStepper;\n        step: CdkStep;\n    }>;\n    /**\n     * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.\n     */\n    onBack: EventEmitter<{\n        stepper: C8yStepper;\n        step: CdkStep;\n    }>;\n    /**\n     * EventEmitter which emits when the optional custom button is clicked\n     */\n    onCustom: EventEmitter<any>;\n    /**\n     * Indicator which button should be shown.\n     * Based on the cdk-steps within the c8y-stepper\n     * next and back buttons are rendered.\n     */\n    showBtns: StepperButtonsVisibility;\n    /**\n     * Flag that indicates that the default settings defined in the showBtns have been overwritten.\n     */\n    forceShowBtns: boolean;\n    private statusChangeSubscription;\n    constructor(stepper: C8yStepper, step: CdkStep);\n    /**\n     * This option forces the display of the buttons passed by the input.\n     * It will override the default settings and take precedence over the standard settings.\n     * @param btns An object that contains options for displaying buttons.\n     *\n     * **Example**\n     * ```html\n     *\n     * <c8y-stepper-buttons\n     *   [labels]=\"{ custom: 'Custom btn', cancel: 'Cancel btn' }\"\n     *   [showButtons]=\"{ custom: true, cancel: true }\"\n     * ></c8y-stepper-buttons>\n     *\n     * ```\n     */\n    set showButtons(btns: StepperButtonsVisibility);\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Gets called when cancel button is clicked.\n     * It will emit immediate.\n     */\n    cancel(): void;\n    /**\n     * Gets called when next button is clicked. When onNext EventEmitter has an observer registered\n     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.\n     * Otherwise it will call stepper.next() as default.\n     */\n    next(): void;\n    /**\n     * Gets called when back button is clicked. When onBack EventEmitter has an observer registered\n     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.\n     * Otherwise it will call stepper.previous() as default.\n     */\n    back(): void;\n    /**\n     * Gets called when the custom button is clicked.\n     * It will emit immediately.\n     */\n    custom(): void;\n}\n"]}