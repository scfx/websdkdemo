import { DiagnosticsService } from './diagnostics.service';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { ForOfRealtimeOptions, OperationRealtimeService } from '@c8y/ngx-components';
import { IManagedObject, IOperation } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class DiagnosticsComponent {
    private route;
    private diagnosticService;
    operationRealtime: OperationRealtimeService;
    statusIcons: {
        [x: number]: string;
    };
    statusClasses: {
        [x: number]: string;
    };
    deviceId: string;
    device$: BehaviorSubject<IManagedObject>;
    operations$: import("rxjs").Observable<import("@c8y/client").IResultList<IOperation>>;
    operationsPipe: import("rxjs").UnaryFunction<import("rxjs").Observable<IOperation[]>, import("rxjs").Observable<IOperation[]>>;
    realtimeOptions: ForOfRealtimeOptions;
    operationCount: number;
    constructor(route: ActivatedRoute, diagnosticService: DiagnosticsService, operationRealtime: OperationRealtimeService);
    onDiagnosticRequest(): void;
    onDelete(operation: IOperation): void;
    onCancel(operation: IOperation): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DiagnosticsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DiagnosticsComponent, "c8y-diagnostics", never, {}, {}, never, never>;
}

//# sourceMappingURL=diagnostics.component.d.ts.map