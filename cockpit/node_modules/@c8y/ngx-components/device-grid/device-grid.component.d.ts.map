{"version":3,"file":"device-grid.component.d.ts","sources":["device-grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { ActionControl, BulkActionControl, DataGridComponent, DataSourceModifier, FilteringActionType, FilteringModifier, LoadMoreMode, Pagination, ServerSideDataResult, GridConfig, HeaderActionControl } from '@c8y/ngx-components';\nimport { DeviceGridColumn, DataCallback } from './device-grid.models';\nimport { DeviceGridService } from './device-grid.service';\nexport declare class DeviceGridComponent implements OnInit {\n    deviceGridService: DeviceGridService;\n    /** Optional callback function that allows to modify server side data result before it's rendered. */\n    dataCallback: DataCallback;\n    /** Takes an event emitter. When an event is emitted, the grid will be reloaded. */\n    refresh: EventEmitter<any>;\n    /** The title for the data grid, it's displayed in the grid's header. */\n    title: string;\n    /** The label for load more button. */\n    loadMoreItemsLabel: any;\n    /** The label for loading indicator. */\n    loadingItemsLabel: string;\n    /** The list of columns to be displayed in the grid. If not given, it defaults to standard columns. */\n    set _columns(value: DeviceGridColumn[]);\n    /** Pagination settings, e.g. allows for setting current page or page size. If not given, defaults to standard settings. */\n    set _pagination(value: Pagination);\n    infiniteScroll: LoadMoreMode;\n    /** Sets load more mode. */\n    set _infiniteScroll(infiniteScroll: LoadMoreMode);\n    /** Sets action controls (actions available for individual items). If not given, it defaults to standard actions. */\n    set _actionControls(value: ActionControl[]);\n    /** Determines whether items can be selected by clicking a checkbox in the first column. */\n    selectable: boolean;\n    /** Sets the base query which is appended to the request for data. */\n    baseQuery: any;\n    /** Sets bulk action controls (actions available for items selected by user). If not given, it defaults to standard bulk actions. */\n    set _bulkActionControls(value: BulkActionControl[]);\n    /** Sets header action controls (actions available from the grid header). If not given, it defaults to empty list of actions. */\n    set _headerActionControls(value: HeaderActionControl[]);\n    childDeviceGrid: boolean;\n    parentDeviceId: string;\n    /** Sets the withChildren query which is appended to the request. */\n    withChildren: boolean;\n    /** Emits an event when columns configuration changes. */\n    onColumnsChange: EventEmitter<DeviceGridColumn[]>;\n    onDeviceQueryStringChange: EventEmitter<string>;\n    /** Emits an event when items selection changes. The array contains ids of selected items. */\n    itemsSelect: EventEmitter<string[]>;\n    actionControls: ActionControl[];\n    columns: DeviceGridColumn[];\n    pagination: Pagination;\n    bulkActionControls: BulkActionControl[];\n    headerActionControls: HeaderActionControl[];\n    serverSideDataCallback: any;\n    dataGrid: DataGridComponent;\n    constructor(deviceGridService: DeviceGridService);\n    ngOnInit(): void;\n    trackByName(_index: any, column: DeviceGridColumn): string;\n    onDataSourceModifier(dataSourceModifier: DataSourceModifier): Promise<ServerSideDataResult>;\n    setActionControls(): Promise<void>;\n    onDeleteDevice(device: any): Promise<void>;\n    updateFiltering(columnNames: string[], action: {\n        type: FilteringActionType;\n        payload?: {\n            filteringModifier: FilteringModifier;\n        };\n    }): void;\n    configChange(config: GridConfig): void;\n}\n"]}