import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { ActionControl, BulkActionControl, Column, GridConfig, HeaderActionControl, AlertService, ModalService, Pagination } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { ColumnUtilService } from './columns/column-util.service';
import { DeviceGridColumn } from './device-grid.models';
import * as ɵngcc0 from '@angular/core';
export declare class DeviceGridService {
    protected inventoryService: InventoryService;
    protected translateService: TranslateService;
    protected alertService: AlertService;
    protected modal: ModalService;
    protected columnUtilService: ColumnUtilService;
    protected queriesUtil: QueriesUtil;
    protected GRID_CONFIG_DEFAULT_STORAGE_KEY: string;
    protected DEFAULT_PAGE_SIZE: number;
    constructor(inventoryService: InventoryService, translateService: TranslateService, alertService: AlertService, modal: ModalService, columnUtilService?: ColumnUtilService);
    getDefaultColumns(): DeviceGridColumn[];
    getDefaultPagination(): Pagination;
    getInfiniteScrollPagination(): Pagination;
    getDefaultActionControls(): ActionControl[];
    getDefaultBulkActionControls(): BulkActionControl[];
    getDefaultHeaderActionControls(): HeaderActionControl[];
    getProperName(device: IManagedObject): string;
    getModel(device: IManagedObject): string;
    getSerialNumber(device: IManagedObject): string;
    getParentsNames(device: IManagedObject, featuredParentId?: string | number): string;
    getHref(groupOrDevice: IManagedObject, prefix?: string): string;
    getAlarmsHref(device: IManagedObject): string;
    getUserConfiguredColumns(columns: Column[]): any[];
    delete(device: IManagedObject): Promise<void>;
    getData(columns: DeviceGridColumn[], pagination: Pagination, query?: any, withChildren?: boolean): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getChildDeviceData(columns: DeviceGridColumn[], pagination: Pagination, query: any, withChildren: boolean, id: string): Promise<import("@c8y/client").IResultList<IManagedObject>>;
    getCount(columns: DeviceGridColumn[], pagination: Pagination, query?: any): Promise<number>;
    getCountChildDevices(columns: DeviceGridColumn[], pagination: Pagination, query: any, id: string): Promise<number>;
    getTotalChildDevices(query: any, id: string): Promise<number>;
    getTotal(query?: any): Promise<number>;
    getDeviceQueryString(columns: DeviceGridColumn[], query: any): string;
    getQueryObj(columns: DeviceGridColumn[], defaultFilter?: {}): any;
    getConfig(key?: string): GridConfig;
    saveConfig(config: GridConfig, key?: string): void;
    clearConfig(key?: string): void;
    private getHardware;
    private isVendme;
    private getDevicesFilters;
    private extendQueryByColumn;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DeviceGridService, never>;
}

//# sourceMappingURL=device-grid.service.d.ts.map