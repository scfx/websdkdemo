import { EventEmitter, OnInit } from '@angular/core';
import { IManagedObject, IOperation } from '@c8y/client';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable } from 'rxjs';
import { RepositoryService } from '../repository.service';
import { DeviceSoftware, DeviceSoftwareChange, SoftwareFilterCriteria } from './../repository.model';
import * as ɵngcc0 from '@angular/core';
export declare class InstalledSoftwareComponent implements OnInit {
    private repository;
    private bsModal;
    device: IManagedObject;
    softwareList: DeviceSoftware[];
    deviceSoftwareChanges: DeviceSoftwareChange[];
    deviceSoftwareChangesOperation: IOperation;
    deviceSoftwareChangesInProgress: boolean;
    deviceTypeQuery: object;
    changes: EventEmitter<DeviceSoftwareChange[]>;
    showSoftwareChanges: EventEmitter<void>;
    showFilter: boolean;
    supportsSoftwareOperations: boolean;
    textFilter$: BehaviorSubject<string>;
    softwareTypeFilter$: BehaviorSubject<string>;
    filterCriteria$: Observable<SoftwareFilterCriteria>;
    private readonly operationTypes;
    constructor(repository: RepositoryService, bsModal: BsModalService);
    ngOnInit(): void;
    installSoftware(): void;
    updateSoftware(softwareToRemove: any): void;
    removeSoftware(softwareToRemove: any): void;
    getInstallableSoftwareListWithVersions$(searchTerm$: BehaviorSubject<string>): Observable<IManagedObject[]>;
    getSingleSoftwareWithVersions$(software: DeviceSoftware): Observable<IManagedObject[]>;
    attachVersions(softwareList: IManagedObject[]): IManagedObject[];
    displaySoftwareSelectModal(initialStateOverrides: any): EventEmitter<import("./../repository.model").SelectedRepositoryBinary[]>;
    emitSoftwareInstall(items: DeviceSoftware[]): void;
    emitSoftwareRemoval(items: DeviceSoftware[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<InstalledSoftwareComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<InstalledSoftwareComponent, "c8y-installed-software", never, { "device": "device"; "softwareList": "softwareList"; "deviceSoftwareChanges": "deviceSoftwareChanges"; "deviceSoftwareChangesOperation": "deviceSoftwareChangesOperation"; "deviceSoftwareChangesInProgress": "deviceSoftwareChangesInProgress"; "deviceTypeQuery": "deviceTypeQuery"; }, { "changes": "changes"; "showSoftwareChanges": "showSoftwareChanges"; }, never, never>;
}

//# sourceMappingURL=installed-software.component.d.ts.map