import { EventEmitter } from '@angular/core';
import { NgForm } from '@angular/forms';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { RepositoryService } from '../repository.service';
import { ModalModel, RepositoryCategory } from '../repository.model';
import { AlertService } from '@c8y/ngx-components';
import { BehaviorSubject } from 'rxjs';
import { PickedFiles } from '@c8y/ngx-components';
import { IManagedObject } from '@c8y/client';
import * as ɵngcc0 from '@angular/core';
export declare class AddFirmwareModalComponent {
    private modal;
    private repositoryService;
    private alert;
    form: NgForm;
    saved: EventEmitter<RepositoryCategory>;
    onInput: BehaviorSubject<string>;
    model: ModalModel;
    firmwaresResult: any;
    saving: boolean;
    firmwarePreselected: boolean;
    textForFirmwareUrlPopover: string;
    private inputSubscription$;
    constructor(modal: BsModalRef, repositoryService: RepositoryService, alert: AlertService);
    ngOnInit(): void;
    setInitialState(): void;
    loadFirmwares(): void;
    getFirmwareResult(searchStr: string): import("rxjs").Observable<import("@c8y/client").IResultList<IManagedObject>>;
    save(): Promise<void>;
    successMsg(): void;
    cancel(): void;
    ngOnDestroy(): void;
    onFile(dropped: PickedFiles): void;
    onFirmwareSelect(firmware: IManagedObject): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<AddFirmwareModalComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<AddFirmwareModalComponent, "c8y-add-firmware-software-modal", never, {}, { "saved": "saved"; }, never, never>;
}

//# sourceMappingURL=add-firmware-modal.component.d.ts.map