"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InventoryBinaryService = void 0;
const form_data_1 = __importDefault(require("form-data"));
const core_1 = require("../core");
class InventoryBinaryService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'inventory';
        this.listUrl = 'binaries';
        this.propertyName = 'managedObjects';
    }
    /**
     * Uploads a file and creates a managed object with its metadata.
     * @param file A file to be uploaded.
     * @param managedObject An object containing metadata about the file.
     * Note that you can specify `fileType` and `fileName` in case `file` does not define them
     * but these two properties will be removed from `managedObject` before saving.
     */
    create(file, managedObject = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'POST';
            const url = this.listUrl;
            const body = new form_data_1.default();
            let fileName;
            let fileType;
            if (managedObject.fileName) {
                fileName = managedObject.fileName;
                delete managedObject.fileName;
            }
            if (managedObject.fileType) {
                fileType = managedObject.fileType;
                delete managedObject.fileType;
            }
            if (!fileName) {
                fileName = 'bin';
            }
            if (typeof (File) !== 'undefined' && file instanceof File) {
                fileName = file.name;
                fileType = file.type;
            }
            if (!managedObject.name) {
                managedObject.name = fileName;
            }
            if (!managedObject.type) {
                managedObject.type = fileType || 'c8y_upload';
            }
            body.append('file', file, fileName);
            body.append('object', JSON.stringify(managedObject));
            let bodyHeaders;
            if (typeof body.getHeaders === 'function') {
                bodyHeaders = body.getHeaders();
            }
            const headers = Object.assign({
                accept: 'application/json'
            }, bodyHeaders);
            const res = yield this.fetch(url, { method, body, headers });
            const data = yield res.json();
            return { res, data };
        });
    }
    list(filter = {}) {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this, filter);
        });
    }
    delete(managedObjectOrId) {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, managedObjectOrId);
        });
    }
    download(managedObjectOrId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getDetailUrl(managedObjectOrId);
            return yield this.fetch(url);
        });
    }
    /**
     * Gets binary managed object's id from its download or self URL.
     *
     * @param {string} url URL string.
     *
     * @returns {number} Binary managed object's id.
     *
     * **Example**
     * ```typescript
     *
     *   const id = InventoryBinaryService.getIdFromUrl('http://mytenant.cumulocity.com/inventory/binaries/12345');
     * ```
     */
    getIdFromUrl(url) {
        const regexp = new RegExp('\\/inventory\\/binaries\\/(\\d+)|\\/inventory\\/managedObjects\\/(\\d+)');
        const matches = url.match(regexp);
        return matches && (matches[1] || matches[2]);
    }
}
exports.InventoryBinaryService = InventoryBinaryService;
//# sourceMappingURL=InventoryBinaryService.js.map