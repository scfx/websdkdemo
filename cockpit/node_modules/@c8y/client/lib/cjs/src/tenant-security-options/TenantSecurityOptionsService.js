"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSecurityOptionsService = void 0;
const core_1 = require("../core");
/**
 * @description
 * This service allows to get tenant security option.
 */
class TenantSecurityOptionsService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'tenant';
        this.listUrl = 'security-options';
        this.category = 'password';
        this.propertyName = 'options';
    }
    /**
     * Get a specific tenant's security option.
     *
     * @param {ITenantSecurityOption} Tenant's security option object with key value.
     *
     * @returns Returns promise object that is resolved with the ITenantSecurityOption wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *     const option: ITenantSecurityOption = {
     *        key: 'limit.validity'
     *      };
     *
     *    (async () => {
     *      const {data, res} = await tenantSecurityOptionsService.detail(option);
     *   })();
     * ```
     */
    detail(tenantSecurityOption) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, tenantSecurityOption);
        });
    }
    getDetailUrl(tenantSecurityOption) {
        return `${this.listUrl}/${this.category}/${tenantSecurityOption.key}`;
    }
    onBeforeCreate(obj) {
        return obj;
    }
}
exports.TenantSecurityOptionsService = TenantSecurityOptionsService;
//# sourceMappingURL=TenantSecurityOptionsService.js.map