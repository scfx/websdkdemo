import { IIdentified, Service, IResult } from '../core';
import { IDeviceRegistration, IDeviceRegistrationCreate } from './IDeviceRegistration';
import { IDeviceCredentials } from './IDeviceCredentials';
/**
 * Interface to use as options parameter
 * to bootstrap a new device.
 */
export interface IDeviceBootstrapOptions {
    /**
     * If already logged in it is accessible via
     * client.auth.getHeader, see [[BasicAuth.getHeader]]
     *
     * **Example**
     * ``` typescript
     *
     * // tenant/username:password
     * const basicAuthToken = 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk';
     * ```
     */
    basicAuthToken?: string;
    /**
     * Object to define username and password
     * as string.
     *
     * **Example**
     * ``` typescript
     *
     *    const basicAuth = {
     *      user: 'username',
     *      pass: 'password'
     *    }
     * ```
     */
    basicAuth?: {
        user: string;
        pass: string;
    };
}
/**
 * This class allows registration of a new device.
 */
export declare class DeviceRegistrationService extends Service<IDeviceRegistration> {
    protected baseUrl: string;
    protected listUrl: string;
    protected propertyName: string;
    /**
     * Gets the details of device registration.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const entityId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await deviceRegistrationService.detail(entityId);
     *    })();
     * ```
     */
    detail(entityOrId: string | number | IIdentified): Promise<IResult<IDeviceRegistration>>;
    /**
     * Creates a new device registration.
     *
     * @param {IDeviceRegistrationCreate} entity Device registration object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const mandantoryObject: IDeviceRegistrationCreate = {
     *      id: 1,
     *    };
     *
     *    (async () => {
     *      const {data, res} = await deviceRegistrationService.create(mandantoryObject);
     *    })();
     * ```
     */
    create(entity: IDeviceRegistrationCreate): Promise<IResult<IDeviceRegistration>>;
    /**
     * Gets the list of device registrations by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying registrations.
     *
     * **Example**
     * ```typescript
     *
     *   const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await deviceRegistrationService.list(filter);
     *   })();
     * ```
     */
    list(filter?: object): Promise<import("../core").IResultList<IDeviceRegistration>>;
    /**
     * Removes an registration with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId entity or id of the registration.
     *
     * **Example**
     * ```typescript
     *
     *   const id = 'abc';
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.delete(id);
     *     // data will be null
     *   })();
     * ```
     */
    delete(entityOrId: string | number | IIdentified): Promise<IResult<null>>;
    /**
     * Accepts the device registration for given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId entity or id of registration.
     *
     * **Example**
     * ```typescript
     *
     *   const id = 'abc';
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.accept(id);
     *   })();
     * ```
     */
    accept(entityOrId: string | number | IIdentified): Promise<IResult<IDeviceRegistration>>;
    /**
     * Bootstraps the device with given id.
     *
     * @param entityOrId entity or id of registration.
     * @param options for details see [[IDeviceBootstrapOptions]]
     *
     * **Example**
     * ```typescript
     *
     *   const id: 'abc';
     *   const options: IDeviceBootstrapOptions = {
     *     basicAuthToken: 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk',
     *     basicAuth: {
     *       user: 'username',
     *       pass: 'password'
     *     }
     *   };
     *
     *   (async () => {
     *     const {data, res} = await deviceRegistrationService.bootstrap(id, options);
     *   })();
     * ```
     */
    bootstrap(entityOrId: string | number | IIdentified, options: IDeviceBootstrapOptions): Promise<IResult<IDeviceCredentials>>;
    protected onBeforeCreate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate;
    protected onBeforeUpdate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate;
}
