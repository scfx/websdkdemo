var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ApplicationService } from '../application';
import { Service } from '../core/Service';
export class SmartGroupsService extends Service {
    constructor(client) {
        super(client);
        this.baseUrl = 'inventory';
        this.listUrl = 'managedObjects';
        this.SMART_GROUP_TYPE = 'c8y_DynamicGroup';
        this.SMART_GROUP_FRAGMENT_TYPE = 'c8y_IsDynamicGroup';
        this.DEVICE_GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
        this.DEVICE_GROUP_TYPE = 'c8y_DeviceGroup';
        this.DEVICE_SUBGROUP_TYPE = 'c8y_DeviceSubgroup';
        this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME = 'smartgroup';
        this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH = 'service/smartgroup';
        this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH = `${this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH}/smartgroups`;
        this.applicationService = new ApplicationService(client);
    }
    /**
     * Gets the details of managed object
     *
     * @param {IdReference} entityOrId Entity or Id of the ManagedObject.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const id: string = '1';
     *    const filter: any = { withChildren: false };
     *
     *    (async () => {
     *      const {data, res} = await smartGroupsService.detail(id, filter);
     *   })();
     * ```
     */
    detail(entityOrId, filter = {}) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, entityOrId, filter);
        });
    }
    /**
     * Updates smart group managed object with given id.
     *
     * @param {Partial<IManagedObject>} mo Partial managed object of the smart group.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const smartGroup = { id: '1', name: 'newName' };
     *
     *    (async () => {
     *      await smartGroupsService.update(smartGroup);
     *   })();
     * ```
     */
    update(mo, filter = {}) {
        const _super = Object.create(null, {
            update: { get: () => super.update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = mo;
            const { data: isInstalled } = yield this.isSmartGroupsV2MicroserviceInstalled();
            const { data: groupMo } = yield this.detail(id, { withChildren: false });
            return isInstalled && this.isSmartGroupV2(groupMo)
                ? this.updateSmartGroupV2(mo, filter)
                : _super.update.call(this, mo);
        });
    }
    /**
     * Updates smart group v2 managed object with given id.
     *
     * @param {Partial<IManagedObject>} mo Partial managed object of the smart group v2.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const smartGroupV2 = { id: '1', name: 'newName' };
     *
     *    (async () => {
     *      await smartGroupsService.updateSmartGroupV2(smartGroupV2);
     *   })();
     * ```
     */
    updateSmartGroupV2(mo, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = mo, partialMo = __rest(mo, ["id"]);
            const method = 'PUT';
            const body = JSON.stringify(this.onBeforeUpdate(partialMo));
            const headers = { 'content-type': 'application/json', accept: 'application/json' };
            const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;
            const res = yield this.fetch(url, { method, body, headers, params: Object.assign({}, filter) });
            const data = yield res.json();
            return { res, data };
        });
    }
    /**
     * Removes managed object with given id.
     *
     * @param {IManagedObject} group Managed object of the group.
     * @param {object} params Additional query params.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *   const group = { id: '1' } as IManagedObject;
     *   const params: any = {
     *     withChildren: false
     *   }
     *
     *    (async () => {
     *      await smartGroupsService.delete(group, params);
     *   })();
     * ```
     */
    delete(entityOrId, params = {}) {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { data: isInstalled } = yield this.isSmartGroupsV2MicroserviceInstalled();
            const data = (yield this.detail(entityOrId, { withChildren: false })).data;
            return isInstalled && this.isSmartGroupV2(data)
                ? yield this.removeSmartGroupV2(data)
                : yield _super.delete.call(this, data, params);
        });
    }
    /**
     * Checks if the smart groups v2 microservice is installed.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await smartGroupsService.isSmartGroupsV2MicroserviceInstalled();
     *   })();
     * ```
     */
    isSmartGroupsV2MicroserviceInstalled() {
        return this.applicationService.isAvailable({
            name: this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME
        });
    }
    /**
     * Checks whether a given managed object is a smart group
     *
     * @param {IManagedObject} mo Managed object to check.
     *
     * @returns boolean
     *
     * @example
     * ```typescript
     *
     *    const mo: IManagedObject = {id: 1, type: "c8y_DeviceGroup", c8y_IsDeviceGroup: {}} as IManagedObject;
     *
     *    (() => {
     *      const isSmartGroup = smartGroupsService.isSmartGroup(mo);
     *   })();
     * ```
     */
    isSmartGroup(mo) {
        const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);
        const isSmartGroupType = mo && mo.type === this.SMART_GROUP_TYPE;
        return hasSmartGroupFragmentType || isSmartGroupType;
    }
    /**
     * Checks whether a given managed object is a smart group v2
     *
     * @param {IManagedObject} mo Managed object to check.
     *
     * @returns boolean
     *
     * @example
     * ```typescript
     *
     *    const mo: IManagedObject = {id: 1, type: "c8y_DeviceGroup", c8y_IsDeviceGroup: {}} as IManagedObject;
     *
     *    (() => {
     *      const isSmartGroup = smartGroupsService.isSmartGroupV2(mo);
     *   })();
     * ```
     */
    isSmartGroupV2(mo) {
        const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);
        const hasDeviceGroupFragmentType = mo.hasOwnProperty(this.DEVICE_GROUP_FRAGMENT_TYPE);
        const isGroupOrSubgroup = (mo && mo.type === this.DEVICE_GROUP_TYPE) || mo.type === this.DEVICE_SUBGROUP_TYPE;
        return hasSmartGroupFragmentType && hasDeviceGroupFragmentType && isGroupOrSubgroup;
    }
    /**
     * Removes smart group v2 managed object with given id.
     *
     * @param {IdReference} entityOrId entity or Id of the ManagedObject.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const id: string = '1';
     *
     *    (async () => {
     *      await smartGroupsService.removeSmartGroupV2(id);
     *   })();
     * ```
     */
    removeSmartGroupV2(entityOrId) {
        return __awaiter(this, void 0, void 0, function* () {
            let id;
            if (typeof entityOrId === 'object' && entityOrId.id) {
                id = entityOrId.id;
            }
            else {
                id = entityOrId;
            }
            const method = 'DELETE';
            const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;
            const res = yield this.client.fetch(url, { method });
            return { res, data: null };
        });
    }
    getUrl(url = '') {
        const partialUrl = url.replace(/^\/+/, '');
        const baseUrl = this.baseUrl.replace(/\/+$/, '');
        if (url.includes(this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH)) {
            return partialUrl;
        }
        else {
            return `${baseUrl}/${partialUrl}`;
        }
    }
}
//# sourceMappingURL=SmartGroupsService.js.map