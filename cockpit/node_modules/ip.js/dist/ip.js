// Version 1.2.2 ip.js - https://github.com/vasturiano/ip.js
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.Ip = {}));
}(this, function (exports) { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var jsbiUmd = createCommonjsModule(function (module, exports) {
  (function(e,i){module.exports=i();})(commonjsGlobal,function(){function e(i){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(i)}function i(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var _,n=0;n<t.length;n++)_=t[n],_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(e,_.key,_);}function _(e,i,_){return i&&t(e.prototype,i),_&&t(e,_),e}function n(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(i&&i.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),i&&l(e,i);}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}function l(e,i){return l=Object.setPrototypeOf||function(e,i){return e.__proto__=i,e},l(e,i)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(i){return !1}}function a(){return a=o()?Reflect.construct:function(e,i,t){var _=[null];_.push.apply(_,i);var n=Function.bind.apply(e,_),g=new n;return t&&l(g,t.prototype),g},a.apply(null,arguments)}function s(e){return -1!==Function.toString.call(e).indexOf("[native code]")}function u(e){var i="function"==typeof Map?new Map:void 0;return u=function(e){function t(){return a(e,arguments,g(this).constructor)}if(null===e||!s(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if("undefined"!=typeof i){if(i.has(e))return i.get(e);i.set(e,t);}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),l(t,e)},u(e)}function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,i){return i&&("object"==typeof i||"function"==typeof i)?i:r(e)}var h=function(t){var o=Math.abs,a=Math.max,s=Math.imul,u=Math.clz32;function l(e,t){var _;if(i(this,l),e>l.__kMaxLength)throw new RangeError("Maximum BigInt size exceeded");return _=d(this,g(l).call(this,e)),_.sign=t,_}return n(l,t),_(l,[{key:"toDebugString",value:function(){var e=["BigInt["],i=!0,t=!1,_=void 0;try{for(var n,g,l=this[Symbol.iterator]();!(i=(n=l.next()).done);i=!0)g=n.value,e.push((g?(g>>>0).toString(16):g)+", ");}catch(e){t=!0,_=e;}finally{try{i||null==l.return||l.return();}finally{if(t)throw _}}return e.push("]"),e.join("")}},{key:"toString",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10;if(2>e||36<e)throw new RangeError("toString() radix argument must be between 2 and 36");return 0===this.length?"0":0==(e&e-1)?l.__toStringBasePowerOfTwo(this,e):l.__toStringGeneric(this,e,!1)}},{key:"__copy",value:function(){for(var e=new l(this.length,this.sign),t=0;t<this.length;t++)e[t]=this[t];return e}},{key:"__trim",value:function(){for(var e=this.length,i=this[e-1];0===i;)e--,i=this[e-1],this.pop();return 0===e&&(this.sign=!1),this}},{key:"__initializeDigits",value:function(){for(var e=0;e<this.length;e++)this[e]=0;}},{key:"__clzmsd",value:function(){return u(this[this.length-1])}},{key:"__inplaceMultiplyAdd",value:function(e,t,_){_>this.length&&(_=this.length);for(var n=65535&e,g=e>>>16,l=0,o=65535&t,a=t>>>16,u=0;u<_;u++){var r=this.__digit(u),d=65535&r,h=r>>>16,b=s(d,n),m=s(d,g),c=s(h,n),v=s(h,g),y=o+(65535&b),f=a+l+(y>>>16)+(b>>>16)+(65535&m)+(65535&c);o=(m>>>16)+(c>>>16)+(65535&v)+(f>>>16),l=o>>>16,o&=65535,a=v>>>16;this.__setDigit(u,65535&y|f<<16);}if(0!==l||0!==o||0!==a)throw new Error("implementation bug")}},{key:"__inplaceAdd",value:function(e,t,_){for(var n,g=0,l=0;l<_;l++)n=this.__halfDigit(t+l)+e.__halfDigit(l)+g,g=n>>>16,this.__setHalfDigit(t+l,n);return g}},{key:"__inplaceSub",value:function(e,t,_){var n=0;if(1&t){t>>=1;for(var g=this.__digit(t),l=65535&g,o=0;o<_-1>>>1;o++){var a=e.__digit(o),s=(g>>>16)-(65535&a)-n;n=1&s>>>16,this.__setDigit(t+o,s<<16|65535&l),g=this.__digit(t+o+1),l=(65535&g)-(a>>>16)-n,n=1&l>>>16;}var u=e.__digit(o),r=(g>>>16)-(65535&u)-n;n=1&r>>>16,this.__setDigit(t+o,r<<16|65535&l);if(t+o+1>=this.length)throw new RangeError("out of bounds");0==(1&_)&&(g=this.__digit(t+o+1),l=(65535&g)-(u>>>16)-n,n=1&l>>>16,this.__setDigit(t+e.length,4294901760&g|65535&l));}else{t>>=1;for(var d=0;d<e.length-1;d++){var h=this.__digit(t+d),b=e.__digit(d),m=(65535&h)-(65535&b)-n;n=1&m>>>16;var c=(h>>>16)-(b>>>16)-n;n=1&c>>>16,this.__setDigit(t+d,c<<16|65535&m);}var v=this.__digit(t+d),y=e.__digit(d),f=(65535&v)-(65535&y)-n;n=1&f>>>16;var D=0;0==(1&_)&&(D=(v>>>16)-(y>>>16)-n,n=1&D>>>16),this.__setDigit(t+d,D<<16|65535&f);}return n}},{key:"__inplaceRightShift",value:function(e){if(0!==e){for(var t,_=this.__digit(0)>>>e,n=this.length-1,g=0;g<n;g++)t=this.__digit(g+1),this.__setDigit(g,t<<32-e|_),_=t>>>e;this.__setDigit(n,_);}}},{key:"__digit",value:function(e){return this[e]}},{key:"__unsignedDigit",value:function(e){return this[e]>>>0}},{key:"__setDigit",value:function(e,i){this[e]=0|i;}},{key:"__setDigitGrow",value:function(e,i){this[e]=0|i;}},{key:"__halfDigitLength",value:function(){var e=this.length;return 65535>=this.__unsignedDigit(e-1)?2*e-1:2*e}},{key:"__halfDigit",value:function(e){return 65535&this[e>>>1]>>>((1&e)<<4)}},{key:"__setHalfDigit",value:function(e,i){var t=e>>>1,_=this.__digit(t),n=1&e?65535&_|i<<16:4294901760&_|65535&i;this.__setDigit(t,n);}}],[{key:"BigInt",value:function(i){var t=Math.floor,_=Number.isFinite;if("number"==typeof i){if(0===i)return l.__zero();if((0|i)===i)return 0>i?l.__oneDigit(-i,!0):l.__oneDigit(i,!1);if(!_(i)||t(i)!==i)throw new RangeError("The number "+i+" cannot be converted to BigInt because it is not an integer");return l.__fromDouble(i)}if("string"==typeof i){var n=l.__fromString(i);if(null===n)throw new SyntaxError("Cannot convert "+i+" to a BigInt");return n}if("boolean"==typeof i)return !0===i?l.__oneDigit(1,!1):l.__zero();if("object"===e(i)){if(i.constructor===l)return i;var g=l.__toPrimitive(i);return l.BigInt(g)}throw new TypeError("Cannot convert "+i+" to a BigInt")}},{key:"toNumber",value:function(e){var i=e.length;if(0===i)return 0;if(1===i){var t=e.__unsignedDigit(0);return e.sign?-t:t}var _=e.__digit(i-1),n=u(_),g=32*i-n;if(1024<g)return e.sign?-Infinity:1/0;var o=g-1,a=_,s=i-1,r=n+1,d=32===r?0:a<<r;d>>>=12;var h=r-12,b=12<=r?0:a<<20+r,m=20+r;0<h&&0<s&&(s--,a=e.__digit(s),d|=a>>>32-h,b=a<<h,m=h),0<m&&0<s&&(s--,a=e.__digit(s),b|=a>>>32-m,m-=32);var c=l.__decideRounding(e,m,s,a);if((1===c||0===c&&1==(1&b))&&(b=b+1>>>0,0===b&&(d++,0!=d>>>20&&(d=0,o++,1023<o))))return e.sign?-Infinity:1/0;var v=e.sign?-2147483648:0;return o=o+1023<<20,l.__kBitConversionInts[1]=v|o|d,l.__kBitConversionInts[0]=b,l.__kBitConversionDouble[0]}},{key:"unaryMinus",value:function(e){if(0===e.length)return e;var i=e.__copy();return i.sign=!e.sign,i}},{key:"bitwiseNot",value:function(e){return e.sign?l.__absoluteSubOne(e).__trim():l.__absoluteAddOne(e,!0)}},{key:"exponentiate",value:function(e,i){if(i.sign)throw new RangeError("Exponent must be positive");if(0===i.length)return l.__oneDigit(1,!1);if(0===e.length)return e;if(1===e.length&&1===e.__digit(0))return e.sign&&0==(1&i.__digit(0))?l.unaryMinus(e):e;if(1<i.length)throw new RangeError("BigInt too big");var t=i.__unsignedDigit(0);if(1===t)return e;if(t>=l.__kMaxLengthBits)throw new RangeError("BigInt too big");if(1===e.length&&2===e.__digit(0)){var _=1+(t>>>5),n=e.sign&&0!=(1&t),g=new l(_,n);g.__initializeDigits();var o=1<<(31&t);return g.__setDigit(_-1,o),g}var a=null,s=e;for(0!=(1&t)&&(a=e),t>>=1;0!==t;t>>=1)s=l.multiply(s,s),0!=(1&t)&&(null===a?a=s:a=l.multiply(a,s));return a}},{key:"multiply",value:function(e,t){if(0===e.length)return e;if(0===t.length)return t;var _=e.length+t.length;32<=e.__clzmsd()+t.__clzmsd()&&_--;var n=new l(_,e.sign!==t.sign);n.__initializeDigits();for(var g=0;g<e.length;g++)l.__multiplyAccumulate(t,e.__digit(g),n,g);return n.__trim()}},{key:"divide",value:function(e,i){if(0===i.length)throw new RangeError("Division by zero");if(0>l.__absoluteCompare(e,i))return l.__zero();var t,_=e.sign!==i.sign,n=i.__unsignedDigit(0);if(1===i.length&&65535>=n){if(1===n)return _===e.sign?e:l.unaryMinus(e);t=l.__absoluteDivSmall(e,n,null);}else t=l.__absoluteDivLarge(e,i,!0,!1);return t.sign=_,t.__trim()}},{key:"remainder",value:function e(i,t){if(0===t.length)throw new RangeError("Division by zero");if(0>l.__absoluteCompare(i,t))return i;var _=t.__unsignedDigit(0);if(1===t.length&&65535>=_){if(1===_)return l.__zero();var n=l.__absoluteModSmall(i,_);return 0===n?l.__zero():l.__oneDigit(n,i.sign)}var e=l.__absoluteDivLarge(i,t,!1,!0);return e.sign=i.sign,e.__trim()}},{key:"add",value:function(e,i){var t=e.sign;return t===i.sign?l.__absoluteAdd(e,i,t):0<=l.__absoluteCompare(e,i)?l.__absoluteSub(e,i,t):l.__absoluteSub(i,e,!t)}},{key:"subtract",value:function(e,i){var t=e.sign;return t===i.sign?0<=l.__absoluteCompare(e,i)?l.__absoluteSub(e,i,t):l.__absoluteSub(i,e,!t):l.__absoluteAdd(e,i,t)}},{key:"leftShift",value:function(e,i){return 0===i.length||0===e.length?e:i.sign?l.__rightShiftByAbsolute(e,i):l.__leftShiftByAbsolute(e,i)}},{key:"signedRightShift",value:function(e,i){return 0===i.length||0===e.length?e:i.sign?l.__leftShiftByAbsolute(e,i):l.__rightShiftByAbsolute(e,i)}},{key:"unsignedRightShift",value:function(){throw new TypeError("BigInts have no unsigned right shift; use >> instead")}},{key:"lessThan",value:function(e,i){return 0>l.__compareToBigInt(e,i)}},{key:"lessThanOrEqual",value:function(e,i){return 0>=l.__compareToBigInt(e,i)}},{key:"greaterThan",value:function(e,i){return 0<l.__compareToBigInt(e,i)}},{key:"greaterThanOrEqual",value:function(e,i){return 0<=l.__compareToBigInt(e,i)}},{key:"equal",value:function(e,t){if(e.sign!==t.sign)return !1;if(e.length!==t.length)return !1;for(var _=0;_<e.length;_++)if(e.__digit(_)!==t.__digit(_))return !1;return !0}},{key:"bitwiseAnd",value:function(e,i){if(!e.sign&&!i.sign)return l.__absoluteAnd(e,i).__trim();if(e.sign&&i.sign){var t=a(e.length,i.length)+1,_=l.__absoluteSubOne(e,t),n=l.__absoluteSubOne(i);return _=l.__absoluteOr(_,n,_),l.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var g=[i,e];e=g[0],i=g[1];}return l.__absoluteAndNot(e,l.__absoluteSubOne(i)).__trim()}},{key:"bitwiseXor",value:function(e,i){if(!e.sign&&!i.sign)return l.__absoluteXor(e,i).__trim();if(e.sign&&i.sign){var t=a(e.length,i.length),_=l.__absoluteSubOne(e,t),n=l.__absoluteSubOne(i);return l.__absoluteXor(_,n,_).__trim()}var g=a(e.length,i.length)+1;if(e.sign){var o=[i,e];e=o[0],i=o[1];}var s=l.__absoluteSubOne(i,g);return s=l.__absoluteXor(s,e,s),l.__absoluteAddOne(s,!0,s).__trim()}},{key:"bitwiseOr",value:function(e,i){var t=a(e.length,i.length);if(!e.sign&&!i.sign)return l.__absoluteOr(e,i).__trim();if(e.sign&&i.sign){var _=l.__absoluteSubOne(e,t),n=l.__absoluteSubOne(i);return _=l.__absoluteAnd(_,n,_),l.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var g=[i,e];e=g[0],i=g[1];}var o=l.__absoluteSubOne(i,t);return o=l.__absoluteAndNot(o,e,o),l.__absoluteAddOne(o,!0,o).__trim()}},{key:"ADD",value:function(e,i){if(e=l.__toPrimitive(e),i=l.__toPrimitive(i),"string"==typeof e)return "string"!=typeof i&&(i=i.toString()),e+i;if("string"==typeof i)return e.toString()+i;if(e=l.__toNumeric(e),i=l.__toNumeric(i),l.__isBigInt(e)&&l.__isBigInt(i))return l.add(e,i);if("number"==typeof e&&"number"==typeof i)return e+i;throw new TypeError("Cannot mix BigInt and other types, use explicit conversions")}},{key:"LT",value:function(e,i){return l.__compare(e,i,0)}},{key:"LE",value:function(e,i){return l.__compare(e,i,1)}},{key:"GT",value:function(e,i){return l.__compare(e,i,2)}},{key:"GE",value:function(e,i){return l.__compare(e,i,3)}},{key:"EQ",value:function(i,t){for(;;){if(l.__isBigInt(i))return l.__isBigInt(t)?l.equal(i,t):l.EQ(t,i);if("number"==typeof i){if(l.__isBigInt(t))return l.__equalToNumber(t,i);if("object"!==e(t))return i==t;t=l.__toPrimitive(t);}else if("string"==typeof i){if(l.__isBigInt(t))return i=l.__fromString(i),null!==i&&l.equal(i,t);if("object"!==e(t))return i==t;t=l.__toPrimitive(t);}else if("boolean"==typeof i){if(l.__isBigInt(t))return l.__equalToNumber(t,+i);if("object"!==e(t))return i==t;t=l.__toPrimitive(t);}else if("symbol"===e(i)){if(l.__isBigInt(t))return !1;if("object"!==e(t))return i==t;t=l.__toPrimitive(t);}else if("object"===e(i)){if("object"===e(t)&&t.constructor!==l)return i==t;i=l.__toPrimitive(i);}else return i==t}}},{key:"__zero",value:function(){return new l(0,!1)}},{key:"__oneDigit",value:function(e,i){var t=new l(1,i);return t.__setDigit(0,e),t}},{key:"__decideRounding",value:function(e,i,t,_){if(0<i)return -1;var n;if(0>i)n=-i-1;else{if(0===t)return -1;t--,_=e.__digit(t),n=31;}var g=1<<n;if(0==(_&g))return -1;if(g-=1,0!=(_&g))return 1;for(;0<t;)if(t--,0!==e.__digit(t))return 1;return 0}},{key:"__fromDouble",value:function(e){l.__kBitConversionDouble[0]=e;var i,t=2047&l.__kBitConversionInts[1]>>>20,_=t-1023,n=(_>>>5)+1,g=new l(n,0>e),o=1048575&l.__kBitConversionInts[1]|1048576,a=l.__kBitConversionInts[0],s=20,u=31&_,r=0;if(u<s){var d=s-u;r=d+32,i=o>>>d,o=o<<32-d|a>>>d,a<<=32-d;}else if(u===s)r=32,i=o,o=a;else{var h=u-s;r=32-h,i=o<<h|a>>>32-h,o=a<<h;}g.__setDigit(n-1,i);for(var b=n-2;0<=b;b--)0<r?(r-=32,i=o,o=a):i=0,g.__setDigit(b,i);return g.__trim()}},{key:"__isWhitespace",value:function(e){return !!(13>=e&&9<=e)||(159>=e?32==e:131071>=e?160==e||5760==e:196607>=e?(e&=131071,10>=e||40==e||41==e||47==e||95==e||4096==e):65279==e)}},{key:"__fromString",value:function(e){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,t=0,_=e.length,n=0;if(n===_)return l.__zero();for(var g=e.charCodeAt(n);l.__isWhitespace(g);){if(++n===_)return l.__zero();g=e.charCodeAt(n);}if(43===g){if(++n===_)return null;g=e.charCodeAt(n),t=1;}else if(45===g){if(++n===_)return null;g=e.charCodeAt(n),t=-1;}if(0===i){if(i=10,48===g){if(++n===_)return l.__zero();if(g=e.charCodeAt(n),88===g||120===g){if(i=16,++n===_)return null;g=e.charCodeAt(n);}else if(79===g||111===g){if(i=8,++n===_)return null;g=e.charCodeAt(n);}else if(66===g||98===g){if(i=2,++n===_)return null;g=e.charCodeAt(n);}}}else if(16===i&&48===g){if(++n===_)return l.__zero();if(g=e.charCodeAt(n),88===g||120===g){if(++n===_)return null;g=e.charCodeAt(n);}}for(;48===g;){if(++n===_)return l.__zero();g=e.charCodeAt(n);}var o=_-n,a=l.__kMaxBitsPerChar[i],s=l.__kBitsPerCharTableMultiplier-1;if(o>1073741824/a)return null;var u=a*o+s>>>l.__kBitsPerCharTableShift,r=new l(u+31>>>5,!1),h=10>i?i:10,b=10<i?i-10:0;if(0==(i&i-1)){a>>=l.__kBitsPerCharTableShift;var c=[],v=[],y=!1;do{for(var f,D=0,k=0;;){if(f=void 0,g-48>>>0<h)f=g-48;else if((32|g)-97>>>0<b)f=(32|g)-87;else{y=!0;break}if(k+=a,D=D<<a|f,++n===_){y=!0;break}if(g=e.charCodeAt(n),32<k+a)break}c.push(D),v.push(k);}while(!y);l.__fillFromParts(r,c,v);}else{r.__initializeDigits();var p=!1,B=0;do{for(var S,C=0,A=1;;){if(S=void 0,g-48>>>0<h)S=g-48;else if((32|g)-97>>>0<b)S=(32|g)-87;else{p=!0;break}var I=A*i;if(4294967295<I)break;if(A=I,C=C*i+S,B++,++n===_){p=!0;break}g=e.charCodeAt(n);}s=32*l.__kBitsPerCharTableMultiplier-1;var m=a*B+s>>>l.__kBitsPerCharTableShift+5;r.__inplaceMultiplyAdd(A,C,m);}while(!p)}for(;n!==_;){if(!l.__isWhitespace(g))return null;g=e.charCodeAt(n++);}return 0!==t&&10!==i?null:(r.sign=-1===t,r.__trim())}},{key:"__fillFromParts",value:function(e,t,_){for(var n=0,g=0,l=0,o=t.length-1;0<=o;o--){var a=t[o],s=_[o];g|=a<<l,l+=s,32===l?(e.__setDigit(n++,g),l=0,g=0):32<l&&(e.__setDigit(n++,g),l-=32,g=a>>>s-l);}if(0!==g){if(n>=e.length)throw new Error("implementation bug");e.__setDigit(n++,g);}for(;n<e.length;n++)e.__setDigit(n,0);}},{key:"__toStringBasePowerOfTwo",value:function(e,t){var _=e.length,n=t-1;n=(85&n>>>1)+(85&n),n=(51&n>>>2)+(51&n),n=(15&n>>>4)+(15&n);var g=n,o=t-1,a=e.__digit(_-1),s=u(a),r=0|(32*_-s+g-1)/g;if(e.sign&&r++,268435456<r)throw new Error("string too long");for(var d=Array(r),h=r-1,b=0,m=0,c=0;c<_-1;c++){var v=e.__digit(c),y=(b|v<<m)&o;d[h--]=l.__kConversionChars[y];var f=g-m;for(b=v>>>f,m=32-f;m>=g;)d[h--]=l.__kConversionChars[b&o],b>>>=g,m-=g;}var D=(b|a<<m)&o;for(d[h--]=l.__kConversionChars[D],b=a>>>g-m;0!==b;)d[h--]=l.__kConversionChars[b&o],b>>>=g;if(e.sign&&(d[h--]="-"),-1!==h)throw new Error("implementation bug");return d.join("")}},{key:"__toStringGeneric",value:function(e,t,_){var n=e.length;if(0===n)return "";if(1===n){var g=e.__unsignedDigit(0).toString(t);return !1===_&&e.sign&&(g="-"+g),g}var o=32*n-u(e.__digit(n-1)),a=l.__kMaxBitsPerChar[t],s=a-1,r=o*l.__kBitsPerCharTableMultiplier;r+=s-1,r=0|r/s;var d,h,b=r+1>>1,m=l.exponentiate(l.__oneDigit(t,!1),l.__oneDigit(b,!1)),c=m.__unsignedDigit(0);if(1===m.length&&65535>=c){d=new l(e.length,!1),d.__initializeDigits();for(var v,y=0,f=2*e.length-1;0<=f;f--)v=y<<16|e.__halfDigit(f),d.__setHalfDigit(f,0|v/c),y=0|v%c;h=y.toString(t);}else{var D=l.__absoluteDivLarge(e,m,!0,!0);d=D.quotient;var k=D.remainder.__trim();h=l.__toStringGeneric(k,t,!0);}d.__trim();for(var p=l.__toStringGeneric(d,t,!0);h.length<b;)h="0"+h;return !1===_&&e.sign&&(p="-"+p),p+h}},{key:"__unequalSign",value:function(e){return e?-1:1}},{key:"__absoluteGreater",value:function(e){return e?-1:1}},{key:"__absoluteLess",value:function(e){return e?1:-1}},{key:"__compareToBigInt",value:function(e,i){var t=e.sign;if(t!==i.sign)return l.__unequalSign(t);var _=l.__absoluteCompare(e,i);return 0<_?l.__absoluteGreater(t):0>_?l.__absoluteLess(t):0}},{key:"__compareToNumber",value:function(e,i){if(!0|i){var t=e.sign,_=0>i;if(t!==_)return l.__unequalSign(t);if(0===e.length){if(_)throw new Error("implementation bug");return 0===i?0:-1}if(1<e.length)return l.__absoluteGreater(t);var n=o(i),g=e.__unsignedDigit(0);return g>n?l.__absoluteGreater(t):g<n?l.__absoluteLess(t):0}return l.__compareToDouble(e,i)}},{key:"__compareToDouble",value:function(e,i){if(i!==i)return i;if(i===1/0)return -1;if(i===-Infinity)return 1;var t=e.sign;if(t!==0>i)return l.__unequalSign(t);if(0===i)throw new Error("implementation bug: should be handled elsewhere");if(0===e.length)return -1;l.__kBitConversionDouble[0]=i;var _=2047&l.__kBitConversionInts[1]>>>20;if(2047==_)throw new Error("implementation bug: handled elsewhere");var n=_-1023;if(0>n)return l.__absoluteGreater(t);var g=e.length,o=e.__digit(g-1),a=u(o),s=32*g-a,r=n+1;if(s<r)return l.__absoluteLess(t);if(s>r)return l.__absoluteGreater(t);var d=1048576|1048575&l.__kBitConversionInts[1],h=l.__kBitConversionInts[0],b=20,m=31-a;if(m!==(s-1)%31)throw new Error("implementation bug");var c,v=0;if(m<b){var y=b-m;v=y+32,c=d>>>y,d=d<<32-y|h>>>y,h<<=32-y;}else if(m===b)v=32,c=d,d=h;else{var f=m-b;v=32-f,c=d<<f|h>>>32-f,d=h<<f;}if(o>>>=0,c>>>=0,o>c)return l.__absoluteGreater(t);if(o<c)return l.__absoluteLess(t);for(var D=g-2;0<=D;D--){0<v?(v-=32,c=d>>>0,d=h,h=0):c=0;var k=e.__unsignedDigit(D);if(k>c)return l.__absoluteGreater(t);if(k<c)return l.__absoluteLess(t)}if(0!==d||0!==h){if(0===v)throw new Error("implementation bug");return l.__absoluteLess(t)}return 0}},{key:"__equalToNumber",value:function(e,i){return i|0===i?0===i?0===e.length:1===e.length&&e.sign===0>i&&e.__unsignedDigit(0)===o(i):0===l.__compareToDouble(e,i)}},{key:"__comparisonResultToBool",value:function(e,i){switch(i){case 0:return 0>e;case 1:return 0>=e;case 2:return 0<e;case 3:return 0<=e;}throw new Error("unreachable")}},{key:"__compare",value:function(e,i,t){if(e=l.__toPrimitive(e),i=l.__toPrimitive(i),"string"==typeof e&&"string"==typeof i)switch(t){case 0:return e<i;case 1:return e<=i;case 2:return e>i;case 3:return e>=i;}if(l.__isBigInt(e)&&"string"==typeof i)return i=l.__fromString(i),null!==i&&l.__comparisonResultToBool(l.__compareToBigInt(e,i),t);if("string"==typeof e&&l.__isBigInt(i))return e=l.__fromString(e),null!==e&&l.__comparisonResultToBool(l.__compareToBigInt(e,i),t);if(e=l.__toNumeric(e),i=l.__toNumeric(i),l.__isBigInt(e)){if(l.__isBigInt(i))return l.__comparisonResultToBool(l.__compareToBigInt(e,i),t);if("number"!=typeof i)throw new Error("implementation bug");return l.__comparisonResultToBool(l.__compareToNumber(e,i),t)}if("number"!=typeof e)throw new Error("implementation bug");if(l.__isBigInt(i))return l.__comparisonResultToBool(l.__compareToNumber(i,e),2^t);if("number"!=typeof i)throw new Error("implementation bug");return 0===t?e<i:1===t?e<=i:2===t?e>i:3===t?e>=i:void 0}},{key:"__absoluteAdd",value:function(e,t,_){if(e.length<t.length)return l.__absoluteAdd(t,e,_);if(0===e.length)return e;if(0===t.length)return e.sign===_?e:l.unaryMinus(e);var n=e.length;(0===e.__clzmsd()||t.length===e.length&&0===t.__clzmsd())&&n++;for(var g=new l(n,_),o=0,a=0;a<t.length;a++){var s=t.__digit(a),u=e.__digit(a),r=(65535&u)+(65535&s)+o,d=(u>>>16)+(s>>>16)+(r>>>16);o=d>>>16,g.__setDigit(a,65535&r|d<<16);}for(;a<e.length;a++){var h=e.__digit(a),b=(65535&h)+o,m=(h>>>16)+(b>>>16);o=m>>>16,g.__setDigit(a,65535&b|m<<16);}return a<g.length&&g.__setDigit(a,o),g.__trim()}},{key:"__absoluteSub",value:function(e,t,_){if(0===e.length)return e;if(0===t.length)return e.sign===_?e:l.unaryMinus(e);for(var n=new l(e.length,_),g=0,o=0;o<t.length;o++){var a=e.__digit(o),s=t.__digit(o),u=(65535&a)-(65535&s)-g;g=1&u>>>16;var r=(a>>>16)-(s>>>16)-g;g=1&r>>>16,n.__setDigit(o,65535&u|r<<16);}for(;o<e.length;o++){var d=e.__digit(o),h=(65535&d)-g;g=1&h>>>16;var b=(d>>>16)-g;g=1&b>>>16,n.__setDigit(o,65535&h|b<<16);}return n.__trim()}},{key:"__absoluteAddOne",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length;null===_?_=new l(n,t):_.sign=t;for(var g=!0,o=0;o<n;o++){var a=e.__digit(o),s=-1===a;g&&(a=0|a+1),g=s,_.__setDigit(o,a);}return g&&_.__setDigitGrow(n,1),_}},{key:"__absoluteSubOne",value:function(e,t){var _=e.length;t=t||_;for(var n=new l(t,!1),g=!0,o=0;o<_;o++){var a=e.__digit(o),s=0===a;g&&(a=0|a-1),g=s,n.__setDigit(o,a);}for(var u=_;u<t;u++)n.__setDigit(u,0);return n}},{key:"__absoluteAnd",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,g=t.length,o=g;if(n<g){o=n;var a=e,s=n;e=t,n=g,t=a,g=s;}var u=o;null===_?_=new l(u,!1):u=_.length;for(var r=0;r<o;r++)_.__setDigit(r,e.__digit(r)&t.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:"__absoluteAndNot",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,g=t.length,o=g;n<g&&(o=n);var a=n;null===_?_=new l(a,!1):a=_.length;for(var s=0;s<o;s++)_.__setDigit(s,e.__digit(s)&~t.__digit(s));for(;s<n;s++)_.__setDigit(s,e.__digit(s));for(;s<a;s++)_.__setDigit(s,0);return _}},{key:"__absoluteOr",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,g=t.length,o=g;if(n<g){o=n;var a=e,s=n;e=t,n=g,t=a,g=s;}var u=n;null===_?_=new l(u,!1):u=_.length;for(var r=0;r<o;r++)_.__setDigit(r,e.__digit(r)|t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:"__absoluteXor",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,g=t.length,o=g;if(n<g){o=n;var a=e,s=n;e=t,n=g,t=a,g=s;}var u=n;null===_?_=new l(u,!1):u=_.length;for(var r=0;r<o;r++)_.__setDigit(r,e.__digit(r)^t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<u;r++)_.__setDigit(r,0);return _}},{key:"__absoluteCompare",value:function(e,t){var _=e.length-t.length;if(0!=_)return _;for(var n=e.length-1;0<=n&&e.__digit(n)===t.__digit(n);)n--;return 0>n?0:e.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}},{key:"__multiplyAccumulate",value:function(e,t,_,n){if(0!==t){for(var g=65535&t,l=t>>>16,o=0,a=0,u=0,r=0;r<e.length;r++,n++){var d=_.__digit(n),h=65535&d,b=d>>>16,m=e.__digit(r),c=65535&m,v=m>>>16,y=s(c,g),f=s(c,l),D=s(v,g),k=s(v,l);h+=a+(65535&y),b+=u+o+(h>>>16)+(y>>>16)+(65535&f)+(65535&D),o=b>>>16,a=(f>>>16)+(D>>>16)+(65535&k)+o,o=a>>>16,a&=65535,u=k>>>16,d=65535&h|b<<16,_.__setDigit(n,d);}for(;0!==o||0!==a||0!==u;n++){var p=_.__digit(n),B=(65535&p)+a,S=(p>>>16)+(B>>>16)+u+o;a=0,u=0,o=S>>>16,p=65535&B|S<<16,_.__setDigit(n,p);}}}},{key:"__internalMultiplyAdd",value:function(e,t,_,g,l){for(var o=_,a=0,u=0;u<g;u++){var r=e.__digit(u),d=s(65535&r,t),h=(65535&d)+a+o;o=h>>>16;var b=s(r>>>16,t),m=(65535&b)+(d>>>16)+o;o=m>>>16,a=b>>>16,l.__setDigit(u,m<<16|65535&h);}if(l.length>g)for(l.__setDigit(g++,o+a);g<l.length;)l.__setDigit(g++,0);else if(0!==o+a)throw new Error("implementation bug")}},{key:"__absoluteDivSmall",value:function(e,t,_){null===_&&(_=new l(e.length,!1));for(var n=0,g=2*e.length-1;0<=g;g-=2){var o=(n<<16|e.__halfDigit(g))>>>0,a=0|o/t;n=0|o%t,o=(n<<16|e.__halfDigit(g-1))>>>0;var s=0|o/t;n=0|o%t,_.__setDigit(g>>>1,a<<16|s);}return _}},{key:"__absoluteModSmall",value:function(e,t){for(var _,n=0,g=2*e.length-1;0<=g;g--)_=(n<<16|e.__halfDigit(g))>>>0,n=0|_%t;return n}},{key:"__absoluteDivLarge",value:function(e,i,t,_){var g=i.__halfDigitLength(),n=i.length,o=e.__halfDigitLength()-g,a=null;t&&(a=new l(o+2>>>1,!1),a.__initializeDigits());var r=new l(g+2>>>1,!1);r.__initializeDigits();var d=l.__clz16(i.__halfDigit(g-1));0<d&&(i=l.__specialLeftShift(i,d,0));for(var h=l.__specialLeftShift(e,d,1),u=i.__halfDigit(g-1),b=0,m=o;0<=m;m--){var v=65535,y=h.__halfDigit(m+g);if(y!==u){var f=(y<<16|h.__halfDigit(m+g-1))>>>0;v=0|f/u;for(var D=0|f%u,k=i.__halfDigit(g-2),p=h.__halfDigit(m+g-2);s(v,k)>>>0>(D<<16|p)>>>0&&(v--,D+=u,!(65535<D)););}l.__internalMultiplyAdd(i,v,0,n,r);var B=h.__inplaceSub(r,m,g+1);0!==B&&(B=h.__inplaceAdd(i,m,g),h.__setHalfDigit(m+g,h.__halfDigit(m+g)+B),v--),t&&(1&m?b=v<<16:a.__setDigit(m>>>1,b|v));}return _?(h.__inplaceRightShift(d),t?{quotient:a,remainder:h}:h):t?a:void 0}},{key:"__clz16",value:function(e){return u(e)-16}},{key:"__specialLeftShift",value:function(e,t,_){var g=e.length,n=new l(g+_,!1);if(0===t){for(var o=0;o<g;o++)n.__setDigit(o,e.__digit(o));return 0<_&&n.__setDigit(g,0),n}for(var a,s=0,u=0;u<g;u++)a=e.__digit(u),n.__setDigit(u,a<<t|s),s=a>>>32-t;return 0<_&&n.__setDigit(g,s),n}},{key:"__leftShiftByAbsolute",value:function(e,t){var _=l.__toShiftAmount(t);if(0>_)throw new RangeError("BigInt too big");var n=_>>>5,g=31&_,o=e.length,a=0!==g&&0!=e.__digit(o-1)>>>32-g,s=o+n+(a?1:0),u=new l(s,e.sign);if(0===g){for(var r=0;r<n;r++)u.__setDigit(r,0);for(;r<s;r++)u.__setDigit(r,e.__digit(r-n));}else{for(var h=0,b=0;b<n;b++)u.__setDigit(b,0);for(var m,c=0;c<o;c++)m=e.__digit(c),u.__setDigit(c+n,m<<g|h),h=m>>>32-g;if(a)u.__setDigit(o+n,h);else if(0!==h)throw new Error("implementation bug")}return u.__trim()}},{key:"__rightShiftByAbsolute",value:function(e,t){var _=e.length,n=e.sign,g=l.__toShiftAmount(t);if(0>g)return l.__rightShiftByMaximum(n);var o=g>>>5,a=31&g,s=_-o;if(0>=s)return l.__rightShiftByMaximum(n);var u=!1;if(n){if(0!=(e.__digit(o)&(1<<a)-1))u=!0;else for(var r=0;r<o;r++)if(0!==e.__digit(r)){u=!0;break}}if(u&&0===a){var h=e.__digit(_-1);0==~h&&s++;}var b=new l(s,n);if(0===a)for(var m=o;m<_;m++)b.__setDigit(m-o,e.__digit(m));else{for(var c,v=e.__digit(o)>>>a,y=_-o-1,f=0;f<y;f++)c=e.__digit(f+o+1),b.__setDigit(f,c<<32-a|v),v=c>>>a;b.__setDigit(y,v);}return u&&(b=l.__absoluteAddOne(b,!0,b)),b.__trim()}},{key:"__rightShiftByMaximum",value:function(e){return e?l.__oneDigit(1,!0):l.__zero()}},{key:"__toShiftAmount",value:function(e){if(1<e.length)return -1;var i=e.__unsignedDigit(0);return i>l.__kMaxLengthBits?-1:i}},{key:"__toPrimitive",value:function(i){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"default";if("object"!==e(i))return i;if(i.constructor===l)return i;var _=i[Symbol.toPrimitive];if(_){var n=_(t);if("object"!==e(n))return n;throw new TypeError("Cannot convert object to primitive value")}var g=i.valueOf;if(g){var o=g.call(i);if("object"!==e(o))return o}var a=i.toString;if(a){var s=a.call(i);if("object"!==e(s))return s}throw new TypeError("Cannot convert object to primitive value")}},{key:"__toNumeric",value:function(e){return l.__isBigInt(e)?e:+e}},{key:"__isBigInt",value:function(i){return "object"===e(i)&&i.constructor===l}},{key:"__digitPow",value:function(e,i){for(var t=1;0<i;)1&i&&(t*=e),i>>>=1,e*=e;return t}}]),l}(u(Array));return h.__kMaxLength=33554432,h.__kMaxLengthBits=h.__kMaxLength<<5,h.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],h.__kBitsPerCharTableShift=5,h.__kBitsPerCharTableMultiplier=1<<h.__kBitsPerCharTableShift,h.__kConversionChars=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],h.__kBitConversionBuffer=new ArrayBuffer(8),h.__kBitConversionDouble=new Float64Array(h.__kBitConversionBuffer),h.__kBitConversionInts=new Int32Array(h.__kBitConversionBuffer),h});
  });

  var isBigInt = function isBigInt(num) {
    return num instanceof jsbiUmd;
  };

  function polyBigInt() {
    var useBigInt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return useBigInt ? {
      // BigInt numbers
      // constructor
      num: jsbiUmd.BigInt,
      // converters
      toNum: jsbiUmd.toNumber,
      toBigInt: function toBigInt(bi) {
        return bi;
      },
      toString: function toString(num, radix) {
        return num.toString(radix);
      },
      // arithmetic
      add: jsbiUmd.add,
      sub: jsbiUmd.subtract,
      mult: jsbiUmd.multiply,
      div: jsbiUmd.divide,
      rem: jsbiUmd.remainder,
      exp: jsbiUmd.exponentiate,
      neg: jsbiUmd.unaryMinus,
      // inc / dec
      inc: function inc(num) {
        return jsbiUmd.add(num, jsbiUmd.BigInt(1));
      },
      dec: function dec(num) {
        return jsbiUmd.subtract(num, jsbiUmd.BigInt(1));
      },
      // bit operators
      bitNeg: jsbiUmd.bitwiseNot,
      bitAnd: jsbiUmd.bitwiseAnd,
      bitOr: jsbiUmd.bitwiseOr,
      bitXor: jsbiUmd.bitwiseXor,
      shiftLeft: jsbiUmd.leftShift,
      shiftRight: jsbiUmd.signedRightShift,
      // comparison
      eq: jsbiUmd.equal,
      lt: jsbiUmd.lessThan,
      leq: jsbiUmd.lessThanOrEqual,
      gt: jsbiUmd.greaterThan,
      geq: jsbiUmd.greaterThanOrEqual
    } : {
      // regular numbers
      // constructor
      num: function num(_num) {
        return _num;
      },
      // converters
      toNum: Number,
      toBigInt: jsbiUmd.BigInt,
      toString: function toString(num, radix) {
        return num.toString(radix);
      },
      // arithmetic
      add: function add(a, b) {
        return a + b;
      },
      sub: function sub(a, b) {
        return a - b;
      },
      mult: function mult(a, b) {
        return a * b;
      },
      div: function div(a, b) {
        return Math.floor(a / b);
      },
      rem: function rem(a, b) {
        return a % b;
      },
      exp: function exp(a, b) {
        return Math.pow(a, b);
      },
      neg: function neg(num) {
        return -num;
      },
      // inc / dec
      inc: function inc(num) {
        return num + 1;
      },
      dec: function dec(num) {
        return num - 1;
      },
      // bit operators
      bitNeg: function bitNeg(num) {
        return ~num;
      },
      bitAnd: function bitAnd(a, b) {
        return a & b;
      },
      bitOr: function bitOr(a, b) {
        return a | b;
      },
      bitXor: function bitXor(a, b) {
        return a ^ b;
      },
      shiftLeft: function shiftLeft(num, bits) {
        return num << bits;
      },
      shiftRight: function shiftRight(num, bits) {
        return num >> bits;
      },
      // comparison
      eq: function eq(a, b) {
        return a === b;
      },
      lt: function lt(a, b) {
        return a < b;
      },
      leq: function leq(a, b) {
        return a <= b;
      },
      gt: function gt(a, b) {
        return a > b;
      },
      geq: function geq(a, b) {
        return a >= b;
      }
    };
  }

  var numOp = polyBigInt(false);
  var bigintOp = polyBigInt(true);

  var Addr =
  /*#__PURE__*/
  function () {
    function Addr(ip, isV4) {
      var _this = this;

      _classCallCheck(this, Addr);

      _defineProperty(this, "version", function () {
        return _this.isV4 ? 4 : 6;
      });

      _defineProperty(this, "isIPv4", function () {
        return _this.isV4;
      });

      _defineProperty(this, "toNum", function () {
        return _this.num;
      });

      _defineProperty(this, "addIp", function (another) {
        return new Addr(_this.op.add(_this.toNum(), another.toNum()));
      });

      _defineProperty(this, "subIp", function (another) {
        return new Addr(_this.op.sub(_this.toNum(), another.toNum()));
      });

      var deriveFamily = isV4 === undefined;
      !deriveFamily && (this.isV4 = !!isV4);

      if (ip instanceof Addr) {
        deriveFamily && (this.isV4 = ip.isIPv4());
        this.num = ip.toNum();
      } else if (typeof ip === 'number') {
        deriveFamily && (this.isV4 = ip < Math.pow(2, 32));
        this.num = ip;
      } else if (isBigInt(ip)) {
        deriveFamily && (this.isV4 = bigintOp.lt(ip, Math.pow(2, 32)));
        this.num = ip;
      } else {
        // Parse as string
        var _isV = ip.indexOf(':') === -1;

        var op = _isV ? numOp : bigintOp; // use bigint to parse strings

        var num = op.num(0);
        var exp = _isV ? 32 - 8 : 128 - 16;
        var maxSegmentNum = Math.pow(2, _isV ? 8 : 16) - 1;
        var numFinalSegments = _isV ? 0 : (ip.split('::')[1] || '').split(':').length;
        var segments = ip.split(_isV ? '.' : ':');

        if (segments.length > (_isV ? 4 : 16)) {
          throw new Error("Failed to parse ".concat(ip, ": too many octets."));
        }

        segments.forEach(function (seg) {
          if (!seg.length) {
            return exp = (numFinalSegments - 1) * (_isV ? 4 : 16);
          }

          var segNum = parseInt(seg, _isV ? 10 : 16);

          if (isNaN(segNum)) {
            throw new Error("Unable to parse address portion \"".concat(seg, "\" from ").concat(ip));
          }

          if (segNum < 0 || segNum > maxSegmentNum) {
            throw new Error("Octet \"".concat(seg, "\" outside bounds in ").concat(ip));
          }

          num = op.add(num, op.mult(op.num(segNum), op.num(Math.pow(2, exp))));
          exp -= _isV ? 8 : 16;
        });
        deriveFamily && (this.isV4 = _isV);
        this.num = num;
      }

      this.op = this.isV4 ? numOp : bigintOp; // use big int operations for IPv6
      // ensure num is of same type as operations

      this.num = (isBigInt(this.num) ? bigintOp : numOp)[this.isV4 ? 'toNum' : 'toBigInt'](this.num);
    }

    _createClass(Addr, [{
      key: "toString",
      value: function toString() {
        var op = this.op;
        var segLen = op.num(Math.pow(2, this.isV4 ? 8 : 16));
        var num = this.num; // let str = (num%segLen).toString(this.isV4 ? 10 : 16);

        var str = op.toString(op.rem(num, segLen), this.isV4 ? 10 : 16);

        for (var i = 1; i < (this.isV4 ? 4 : 8); i++) {
          num = op.div(num, segLen);
          str = "".concat(op.toString(op.rem(num, segLen), this.isV4 ? 10 : 16)).concat(this.isV4 ? '.' : ':').concat(str);
        }

        return this.isV4 ? str : compressV6(str); //

        function compressV6(addrStr) {
          var chunks = addrStr.split(/:/);
          var out = '';

          for (var _i = 0; _i < chunks.length; _i++) {
            var chunk = chunks[_i].replace(/^0+/, '');

            if (!chunk) chunk = 0;
            out += "".concat(chunk, ":");
          }

          out = out.replace(/(:0)+/, ':');
          out = out.replace(/^0/, '');
          out = out.replace(/:0$/, ':');
          out = out.substr(0, out.length - 1);
          if (!out.match(/::/)) if (out.match(/:$/)) out += ':';
          return out;
        }
      }
    }, {
      key: "toBin",
      // Returns a string with the binary representation of the IP (v4: 32 bits long, v6: 128 bits long)
      value: function toBin() {
        var bin = this.op.toString(this.num, 2); // Pad with 0s

        while (bin.length < (this.isV4 ? 32 : 128)) {
          bin = "0".concat(bin);
        }

        return bin;
      }
    }, {
      key: "compare2Ip",
      // Return value: -1: this<that, 0: this=that, 1: this>that, null: different families
      value: function compare2Ip(that) {
        var op = this.op;
        if (this.version() !== that.version()) return null;
        return compareNums(this.toNum(), that.toNum());

        function compareNums(numa, numb) {
          return op.eq(numa, numb) ? 0 : op.lt(numa, numb) ? -1 : 1;
        }
      }
    }]);

    return Addr;
  }();

  var Prefix =
  /*#__PURE__*/
  function () {
    function Prefix(ipPrefix, cidr, isV4) {
      var _this = this;

      _classCallCheck(this, Prefix);

      _defineProperty(this, "isIPv4", function () {
        return _this.ip.isIPv4();
      });

      _defineProperty(this, "toString", function () {
        return "".concat(_this.ip.toString(), "/").concat(_this.cidr);
      });

      _defineProperty(this, "getCidr", function () {
        return _this.cidr;
      });

      _defineProperty(this, "firstIp", function () {
        return _this.ip;
      });

      _defineProperty(this, "lastIp", function () {
        return new Addr(_this.op.sub(_this.op.add(_this.ip.toNum(), _this.countIps()), _this.op.num(1)), _this.isIPv4());
      });

      _defineProperty(this, "toRange", function () {
        return new Range(_this.firstIp(), _this.lastIp(), _this.isIPv4());
      });

      if (cidr !== undefined) {
        this.ip = new Addr(ipPrefix, isV4);
        this.cidr = cidr;
      } else {
        // Parse as string
        var prefix = ipPrefix.split('/');
        this.ip = new Addr(prefix[0], isV4);
        this.cidr = prefix.length > 1 ? +prefix[1] : this.ip.isIPv4() ? 32 : 128; // auto-add single IP CIDR if not included
      }

      if (isNaN(this.cidr)) {
        throw new Error("Invalid numeric CIDR in prefix ".concat(ipPrefix));
      }

      if (this.cidr < 0 || this.cidr > (this.ip.isIPv4() ? 32 : 128)) {
        throw new Error("Cidr /".concat(this.cidr, " outside bounds in prefix ").concat(ipPrefix));
      }

      this.op = this.ip.op;
    }

    _createClass(Prefix, [{
      key: "countIps",
      value: function countIps() {
        var op = this.op;
        return op.exp(op.num(2), op.num((this.isIPv4() ? 32 : 128) - this.cidr));
      }
    }, {
      key: "correctBitBoundary",
      // Return a valid prefix by setting the correct start IP that fits this prefix length
      value: function correctBitBoundary() {
        var op = this.op;
        var mask = op.sub(op.exp(op.num(2), op.num((this.isIPv4() ? 32 : 128) - this.cidr)), op.num(1));
        var correctedNum = op.bitAnd(this.ip.toNum(), op.bitNeg(mask));
        return new Prefix(new Addr(correctedNum), this.cidr, this.isIPv4());
      } // Slice the prefix into an array of smaller prefixes of a specified CIDR size

    }, {
      key: "slice",
      value: function slice(cidr) {
        if (this.cidr >= cidr) return [this];
        var oneIP = new Addr(1, this.isIPv4());
        var slices = [];
        var runningIp = this.ip;

        for (var i = 0, len = Math.pow(2, cidr - this.cidr); i < len; i++) {
          var slice = new Prefix(runningIp, cidr, this.isIPv4());
          slices.push(slice);
          runningIp = slice.lastIp().addIp(oneIP);
        }

        return slices;
      }
    }]);

    return Prefix;
  }(); // ********************* //


  var Range =
  /*#__PURE__*/
  function () {
    function Range(firstIp, lastIp, isV4) {
      var _this2 = this;

      _classCallCheck(this, Range);

      _defineProperty(this, "isIPv4", function () {
        return _this2.start.isIPv4();
      });

      _defineProperty(this, "toString", function () {
        return "".concat(_this2.start.toString(), " - ").concat(_this2.end.toString());
      });

      _defineProperty(this, "countIps", function () {
        return _this2.op.add(_this2.op.sub(_this2.end.toNum(), _this2.start.toNum()), _this2.op.num(1));
      });

      _defineProperty(this, "firstIp", function () {
        return _this2.start;
      });

      _defineProperty(this, "lastIp", function () {
        return _this2.end;
      });

      this.start = new Addr(firstIp, isV4);
      this.end = new Addr(lastIp, isV4);
      if (this.start.version() !== this.end.version()) throw new Error("Range addresses have different families: ".concat(this.start.toString(), " - ").concat(this.end.toString()));
      this.op = this.start.op;
    }

    _createClass(Range, [{
      key: "cidrCount",
      value: function cidrCount() {
        return (this.isIPv4() ? 32 : 128) - Math.log(this.op.toNum(this.countIps())) / Math.log(2);
      }
    }, {
      key: "toPrefixes",
      value: function toPrefixes() {
        var endIp = this.end;
        var topCidr = Math.ceil(this.cidrCount());
        var zeroIP = new Addr(0, this.isIPv4());
        var oneIP = new Addr(1, this.isIPv4());
        var prefixes = [];
        var sweepIp = this.start;

        while (sweepIp.compare2Ip(endIp) <= 0) {
          var cidr = topCidr;
          var prefix = new Prefix(sweepIp, cidr, this.isIPv4());

          while (prefix.correctBitBoundary().firstIp().compare2Ip(sweepIp) !== 0 || prefix.lastIp().compare2Ip(endIp) > 0) {
            cidr++;
            prefix = new Prefix(sweepIp, cidr, this.isIPv4());
          }

          prefixes.push(prefix);
          sweepIp = prefix.lastIp().addIp(oneIP);
          if (sweepIp.compare2Ip(zeroIP) === 0) // Counter flipped back to start
            break;
        }

        return prefixes;
      }
    }, {
      key: "toEncompassingPrefix",
      value: function toEncompassingPrefix() {
        var startIp = this.start;
        var endIp = this.end;
        var cidr = Math.floor(this.cidrCount());
        var prefix = new Prefix(startIp, cidr, this.isIPv4()).correctBitBoundary();

        while (prefix.lastIp().compare2Ip(endIp) < 0) {
          cidr--;
          prefix = new Prefix(startIp, cidr, this.isIPv4()).correctBitBoundary();
        }

        return prefix;
      } // Returns the percentual value (0 to 1) of what is the relative position of ip within the specified range
      // Values of <0 or >1 are possible if IP is outside of the range
      // False indicates if the value should be calculated for right before the IP address(false) or right after(true)
      // Returns null if IP and range are not of the same family

    }, {
      key: "ipRelPosition",
      value: function ipRelPosition(ip, after) {
        var op = this.op;
        if (!after) after = false;
        if (ip.isIPv4() !== this.isIPv4()) return null; // Different IP families

        var ipnum = ip.toNum();
        var first = this.start.toNum();
        var last = this.end.toNum();
        return percentVal(op.add(ipnum, op.num(after ? 1 : 0)), first, last);

        function percentVal(pos, start, end) {
          return op.toNum(op.sub(pos, start)) / (op.toNum(op.sub(end, start)) + 1);
        }
      } // Returns the ip that is at the percentual position of the range

    }, {
      key: "ipAtPerc",
      value: function ipAtPerc(perc) {
        var op = this.op;
        return new Addr(numPercentValue(perc, this.start.toNum(), op.add(this.end.toNum(), op.num(1))), this.isIPv4());

        function numPercentValue(perc, start, end) {
          return op.add(start, op.num(Math.round(op.toNum(op.sub(end, start)) * (perc / 100))));
        }
      } // Returns the start and end percentage of overlap between this range and a child range
      // Values <0 or >100 are possible if the ranges only partially overlap or not overlap at all
      // Percentages are relative to the this range

    }, {
      key: "overlapPerc",
      value: function overlapPerc(childRange) {
        return [this.ipRelPosition(childRange.firstIp()) * 100, this.ipRelPosition(childRange.lastIp(), true) * 100];
      } // Returns the 5 CIDR neighbor prefixes: one CIDR up, two side siblings left and right, first and second half down

    }, {
      key: "getNeighborPrefixes",
      value: function getNeighborPrefixes() {
        var cidrSize = this.cidrCount(); // Spot the boundaries

        var top = Math.ceil(cidrSize) === 0;
        var bottom = Math.floor(cidrSize) === (this.isIPv4() ? 32 : 128);
        var leftmost = this.firstIp().toBin().indexOf('1') === -1;
        var rightmost = this.lastIp().toBin().indexOf('0') === -1;
        var neighbors = {
          up: null,
          left: null,
          right: null,
          downleft: null,
          downright: null
        };

        if (!top) {
          var upCidr = Math.ceil(cidrSize) - 1;
          neighbors.up = new Prefix(this.firstIp(), upCidr, this.isIPv4()).correctBitBoundary();
        }

        var sideCidr = Math.ceil(cidrSize);
        var oneIp = new Addr(1, this.isIPv4());
        if (!leftmost) neighbors.left = new Prefix(this.firstIp().subIp(oneIp), sideCidr, this.isIPv4()).correctBitBoundary();
        if (!rightmost) neighbors.right = new Prefix(this.lastIp().addIp(oneIp), sideCidr, this.isIPv4()).correctBitBoundary();

        if (!bottom) {
          var downCidr = Math.min(this.isIPv4() ? 32 : 128, Math.floor(cidrSize) + 1);
          neighbors.downleft = new Prefix(this.firstIp(), downCidr, this.isIPv4()).correctBitBoundary();
          neighbors.downright = new Prefix(this.lastIp(), downCidr, this.isIPv4()).correctBitBoundary();
        }

        return neighbors;
      }
    }]);

    return Range;
  }();

  exports.Addr = Addr;
  exports.Prefix = Prefix;
  exports.Range = Range;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ip.js.map
