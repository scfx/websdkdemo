{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","path","replace","split","isArray","slice","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","isObject","test","clone","getFieldValue","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","splice","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","called","emitEvent","_a","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","lazyRender","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_resolver","_injector","resolveComponentFactory","destroy","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","ChangeDetectorRef","markForCheck","_buildField","ComponentFactoryResolver","Injector","unregisterControl","control","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","FormGroup","key_2","removeControl","setParent","findControl","registerControl","templateOptions","disabled","disable","enable","registerOnDisabledChange","FormControl","patchValue","setControl","_hide","status","updateValueAndValidity","emit","_forEachChild","cb","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","checkExpressionChange","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","clearControl","setValidators","setAsyncValidators","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","resetModel","_initialModel","resetForm","reset","emitModelChange","rootKey","control_1","valueChanges","distinctUntilChanged","y","modelOptions","updateOn","debounce","default","debounceTime","onlySelf","parsers","parserFn","tslib_1.__spread","join","observers","unshift","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","hooksObservers","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","resetRefs","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","changeDetectorRef","detectChanges","hooks","sub_1","lifecycle","render","setStyle","setAttribute","filter","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","listener","eventName","to","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","id","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","Directive","host","(focus)","(blur)","(change)","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","of","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","checkLocked","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","this_1","_evalExpression","Observable","subscribe_1","setExprValue","subscription_1","onInit_1","onInit","onDestroy_1","onDestroy","hideExpression","hide","parentExpression","evalStringExpression","argNames","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","hideExpressionResult","hidden","setDisabledState","every","target","lastIndex","emitExpressionChanges","property","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLength","maxLength","min","max","validatorOption","isPromise","obj","then","handleAsyncResult","handleResult","ctrl","childCtrl","setErrors","childErrors","FieldFormExtension","addFormControl","fieldsToUpdate","controlOptions","componentType","c_1","enabled","updateControlValidity","asyncValidator","mergeValidators","composeAsync","childrenToUpdate","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","getFieldId","label","placeholder","resetFieldOnHide","setDefaultValue","parent_1","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    let path: string[] = [];\n    if (typeof field.key === 'string') {\n      const key = field.key.indexOf('[') === -1\n        ? field.key\n        : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n      path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n    } else if (Array.isArray(field.key)) {\n      path = field.key.slice(0);\n    } else {\n      path = [`${field.key}`];\n    }\n\n    field._keyPath = { key: field.key, path };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignFieldValue(field: FormlyFieldConfigCache, value: any) {\n  let paths = getKeyPath(field);\n  if (paths.length === 0) {\n    return;\n  }\n\n  let root = field;\n  while (root.parent) {\n    root = root.parent;\n    paths = [...getKeyPath(root), ...paths];\n  }\n\n  if (value === undefined && field.resetOnHide) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, root.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(root.model, paths, value);\n}\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns: typeof setFn[] = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => fns.splice(fns.indexOf(setFn), 1);\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = { called: false, emitEvent: false };\n  form._updateTreeValidity = ({ emitEvent } = { emitEvent: true }) => updateValidityArgs = { called: true, emitEvent: emitEvent || updateValidityArgs.emitEvent };\n  action();\n\n  updateValidityArgs.called && updateValidity({ emitEvent: updateValidityArgs.emitEvent });\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { Observable } from 'rxjs';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: ValidationMessageOption['message'] } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    lazyRender: false,\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions', 'wrappers'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.parent.options;\n    const componentRef = _resolver\n      .resolveComponentFactory<FieldType>(type.component)\n      .create(_injector);\n\n    defineHiddenProp(type, '_componentRef', componentRef);\n    componentRef.destroy();\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: ValidationMessageOption['message']) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig, options?: { [id: string]: any; }): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n  options?: { [id: string]: any };\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes (Will be set by default in the next major version).\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n     *\n     * Defaults to `changeDetectionCheck`.\n     */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n\n    /**\n     * Whether to lazily render field components or not when marked as hidden.\n     * - `true`: lazily render field components (Will be set by default in the next major version).\n     * - `false`: render field components and use CSS to control their visibility.\n     *\n     * Defaults to `false`.\n     */\n    lazyRender?: boolean,\n\n    /**\n     * When true, reset the value of hidden fields.\n     *\n     * Defaults to `false`.\n     */\n    resetFieldOnHide?: boolean,\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n    reduceFormUpdateValidityCalls(formControl, () => this._buildForm(field));\n    field.options._checkField(field, true);\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => {\n            // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n          });\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    if (!options._buildField) {\n      options._buildField = (field: FormlyFieldConfig) => {\n        this.buildForm(field.form, field.fieldGroup, field.model, field.options);\n        return field;\n      };\n    }\n\n    return options;\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { EventEmitter } from '@angular/core';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  if (field['shareFormControl'] === false) {\n    return null;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => {\n          field.templateOptions['___$disabled'] = value;\n          // TODO remove in V6\n          field.options && field.options._markForCheck(field);\n        },\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent || !field.key) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      updateControl(\n        parent,\n        { emitEvent },\n        () => parent.setControl(path, new FormGroup({})),\n      );\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nexport function updateValidity(c: AbstractControl) {\n  const status = c.status;\n  c.updateValueAndValidity({ emitEvent: false });\n  if (status !== c.status) {\n    (c.statusChanges as EventEmitter<string>).emit(c.status);\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n\nexport function clearControl(form: AbstractControl) {\n  form['_fields'] && delete form['_fields'];\n  form.setValidators(null);\n  form.setAsyncValidators(null);\n\n  if (form instanceof FormGroup || form instanceof FormArray) {\n    Object.keys(form.controls)\n      .forEach((k) => clearControl(form.controls[k]));\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignFieldValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath, isObject } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\nimport { clearControl } from '../extensions/field-form/utils';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() {\n    if (!this._model) {\n      this._model = {};\n    }\n\n    return this._model;\n  }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _modelChangeValue: any = {};\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => this.ngZone.runGuarded(() => {\n    // runGuarded is used to keep the expression changes in-sync\n    // https://github.com/ngx-formly/ngx-formly/issues/2095\n    this.checkExpressionChange();\n    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n  }));\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // https://github.com/ngx-formly/ngx-formly/issues/2294\n    if (changes.model && this.field) {\n      this.field.model = this.model;\n    }\n\n    if (changes.fields && this.form) {\n      clearControl(this.form);\n    }\n\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    assignFieldValue(field, value);\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(this.model);\n        } else {\n          this.form.reset(this.model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(\n          distinctUntilChanged((x, y) => {\n            if (x !== y || Array.isArray(x) || isObject(x)) {\n              return false;\n            }\n\n            return true;\n          }),\n        );\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private get field(): any {\n    return this.fields && this.fields[0] && this.fields[0].parent;\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\nimport { isObservable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n  private componentRefs: any[] = [];\n  private hooksObservers: Function[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hooksObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[] = []) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n      wrappers = this.field ? this.field.wrappers : [];\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty<ViewContainerRef>(ref.instance, 'fieldComponent', ({ firstChange, previousValue, currentValue }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const { component } = this.formlyConfig.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.resetRefs(changes.field.previousValue);\n      this.render();\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private render() {\n    if (!this.field) {\n      return;\n    }\n\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!this.formlyConfig.extras.lazyRender) {\n          firstChange && this.renderField(this.containerRef, this.field);\n          if (!firstChange || (firstChange && currentValue)) {\n            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n          }\n        } else {\n          if (currentValue) {\n            this.containerRef.clear();\n          } else {\n            this.renderField(this.containerRef, this.field);\n          }\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(change)': 'onChange($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements(): ElementRef[] { return (this.field && this.field['_elementRefs']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.to && this.to[eventName]) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => this.to[eventName](this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignFieldValue } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl, findControl } from '../extensions/field-form/utils';\nimport { Directive } from '@angular/core';\n\n// TODO remove `selector` in V6\n// tslint:disable-next-line\n@Directive({ selector: '[ÉµfieldArray]' })\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  get formControl() {\n    return this.field.formControl as FormArray;\n  }\n\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl && field.key) {\n      const control = findControl(field);\n      registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any, { markAsDirty } = { markAsDirty: true }) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i: number, { markAsDirty } = { markAsDirty: true }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig, ValidationMessageOption } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable, isObservable, of } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      switchMap(() => isObservable(this.errorMessage)\n        ? this.errorMessage\n        : of(this.errorMessage),\n      ),\n    );\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: ValidationMessageOption['message'] = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {\n  get template() {\n    if (this.field && (this.field.template !== this.innerHtml.template)) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml\n          ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n          : this.field.template,\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n  private innerHtml = { content: null, template: null };\n  constructor(private sanitizer: DomSanitizer) {\n    super();\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isUndefined, isFunction, defineHiddenProp, wrapProperty, reduceFormUpdateValidityCalls, getFieldValue, assignFieldValue } from '../../utils';\nimport { evalExpression, evalStringExpression } from './utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl, updateValidity } from '../field-form/utils';\nimport { FormArray } from '@angular/forms';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    let checkLocked = false;\n    field.options._checkField = (f, ignoreCache) => {\n      if (!checkLocked) {\n        checkLocked = true;\n        reduceFormUpdateValidityCalls(\n          f.formControl,\n          () => this.checkField(f, ignoreCache),\n        );\n        checkLocked = false;\n      }\n    };\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key];\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              key,\n              expressionProperty,\n              key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscribe = () => (expressionProperty as Observable<any>)\n            .subscribe(v => {\n              this.setExprValue(field, key, v);\n              if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n              }\n            });\n\n          let subscription: Subscription = subscribe();\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit = () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      field.hideExpression = this._evalExpression(\n        'hide',\n        field.hideExpression,\n        () => {\n          let root = field.parent;\n          while (root.parent && !root.hide) {\n            root = root.parent;\n          }\n\n          return root.hide;\n        },\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  private _evalExpression(prop: string, expression, parentExpression?) {\n    return (model: any, formState: any, field: FormlyFieldConfig) => {\n      try {\n        if (typeof expression === 'string') {\n          expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n        }\n\n        if (typeof expression !== 'function') {\n          expression = () => !!expression;\n        }\n\n        return (parentExpression && parentExpression()) || expression(model, formState, field);\n      } catch (error) {\n        error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n        throw error;\n      }\n    };\n  }\n\n  private checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    this._checkField(field, ignoreCache);\n\n    field.options._hiddenFieldsForCheck\n      .sort(f => f.hide ? -1 : 1)\n      .forEach(f => this.toggleFormControl(f, !!f.hide, !ignoreCache));\n\n    field.options._hiddenFieldsForCheck = [];\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        this.setExprValue(field, key, expressionValue);\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean, resetOnHide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n\n      if (hide === true && c['_fields'].every(f => !!f._hide)) {\n        unregisterControl(field, true);\n        if (resetOnHide && field.resetOnHide) {\n          field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n          if (field.fieldGroup) {\n            assignFieldValue(field, undefined);\n\n            if (field.formControl instanceof FormArray) {\n              field.fieldGroup.length = 0;\n            }\n          }\n        }\n      } else if (hide === false) {\n        if (field.resetOnHide && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n          assignFieldValue(field, field.defaultValue);\n        }\n        registerControl(field, undefined, true);\n        if (field.resetOnHide && field.fieldArray && (field.fieldGroup || []).length !== (field.model || []).length) {\n          (<any> field.options)._buildForm(true);\n        }\n      }\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide, resetOnHide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field, type: 'hidden', value: hide });\n    }\n  }\n\n  private setExprValue(field: FormlyFieldConfigCache, prop: string, value: any) {\n    try {\n      let target = field;\n      const paths = (prop.indexOf('[') === -1 ? prop : prop.replace(/\\[(\\w+)\\]/g, '.$1')).split('.');\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const path = prop.replace(/^model\\./, ''),\n        control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n\n      if (\n        control\n        && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n      ) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n\n    this.emitExpressionChanges(field, prop, value);\n  }\n\n  private emitExpressionChanges(field: FormlyFieldConfigCache, property: string, value: any) {\n    if (!field.options.fieldChanges) {\n      return;\n    }\n\n    field.options.fieldChanges.next({\n      field: field,\n      type: 'expressionChanges',\n      property,\n      value,\n    });\n  }\n}\n","import { FormlyExtension, FormlyConfig, ValidatorOption } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty, clone, isObject } from '../../utils';\nimport { updateValidity } from '../field-form/utils';\nimport { isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: any, validatorName?: string) {\n    let validatorOption: ValidatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.formlyConfig.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const { expression, ...options } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null,\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator,\n      };\n    }\n\n    return (control: AbstractControl) => {\n      const errors: any = validatorOption.validation(control, field, validatorOption.options);\n      if (isPromise(errors)) {\n        return errors.then(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n      }\n\n      if (isObservable(errors)) {\n        return errors.pipe(map(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n      }\n\n      return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n    };\n  }\n\n  private handleAsyncResult(field: FormlyFieldConfigCache, errors: any, options: ValidatorOption) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    if (field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n\n    return this.handleResult(field, errors, options);\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, errors: any, { name, options }: ValidatorOption) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : { [name]: options ? options : true };\n    }\n\n    const ctrl = field.formControl;\n    ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n\n    if (isObject(errors)) {\n      Object.keys(errors).forEach(name => {\n        const errorPath = errors[name].errorPath\n          ? errors[name].errorPath\n          : (options || {}).errorPath;\n\n        const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n        if (childCtrl) {\n          const { errorPath, ...opts } = errors[name];\n          childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n\n          !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n          ctrl['_childrenErrors'][name] = () => {\n            const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};\n            childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n          };\n        }\n      });\n    }\n\n    return errors;\n  }\n}\n","import { FormlyExtension, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators, ValidatorFn, AsyncValidatorFn } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl, updateValidity as updateControlValidity } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) { }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent) {\n      return;\n    }\n\n    if (field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    } else {\n      this.addFormControl(field);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const fieldsToUpdate = this.setValidators(field);\n    if (fieldsToUpdate.length === 0) {\n      return;\n    }\n\n    if (fieldsToUpdate.length === 1) {\n      fieldsToUpdate[0].formControl.updateValueAndValidity();\n    } else {\n      (field.formControl as any)._updateTreeValidity();\n    }\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = field.key ? getFieldValue(field) : field.defaultValue;\n\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key || !field.parent || (!field.key && !field.fieldGroup)) {\n      const { formControl: c } = field;\n      const disabled = field.templateOptions ? field.templateOptions.disabled : false;\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const v = Validators.compose(this.mergeValidators<ValidatorFn>(field, '_validators'));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const v = Validators.composeAsync(this.mergeValidators<AsyncValidatorFn>(field, '_asyncValidators'));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    const fieldsToUpdate = updateValidity ? [field] : [];\n    (field.fieldGroup || []).forEach(f => {\n      const childrenToUpdate = this.setValidators(f);\n      if (!updateValidity) {\n        fieldsToUpdate.push(...childrenToUpdate);\n      }\n    });\n\n    return fieldsToUpdate;\n  }\n\n  private mergeValidators<T>(field: FormlyFieldConfigCache, type: '_validators' | '_asyncValidators'): T[] {\n    const validators: any = [];\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields']\n        .filter((f: FormlyFieldConfigCache) => !f._hide)\n        .forEach((f: FormlyFieldConfigCache) => validators.push(...f[type]));\n    } else {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.key && f.fieldGroup)\n        .forEach(f => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, isUndefined, getFieldValue, reverseDeepMerge, assignFieldValue } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (this.formlyConfig.extras.resetFieldOnHide && field.resetOnHide !== false) {\n      field.resetOnHide = true;\n    }\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.template\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (field.parent) {\n      let setDefaultValue = !isUndefined(field.key)\n        && !isUndefined(field.defaultValue)\n        && isUndefined(getFieldValue(field))\n        && (!field.resetOnHide || !(field.hide || field.hideExpression));\n      if (setDefaultValue && field.resetOnHide) {\n        let parent = field.parent;\n        while (parent && !parent.hideExpression && !parent.hide) {\n          parent = parent.parent;\n        }\n        setDefaultValue = !parent || !(parent.hideExpression || parent.hide);\n      }\n\n      if (setDefaultValue) {\n        assignFieldValue(field, field.defaultValue);\n      }\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\nimport { FieldArrayType } from './templates/field-array.type';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n    FieldArrayType as any,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}