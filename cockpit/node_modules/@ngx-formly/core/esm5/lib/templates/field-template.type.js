/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { FieldType } from './field.type';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
var FormlyTemplateType = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyTemplateType, _super);
    function FormlyTemplateType(sanitizer) {
        var _this = _super.call(this) || this;
        _this.sanitizer = sanitizer;
        _this.innerHtml = { content: null, template: null };
        return _this;
    }
    Object.defineProperty(FormlyTemplateType.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.field && (this.field.template !== this.innerHtml.template)) {
                this.innerHtml = {
                    template: this.field.template,
                    content: this.to.safeHtml
                        ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)
                        : this.field.template,
                };
            }
            return this.innerHtml.content;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    FormlyTemplateType.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
FormlyTemplateType.ɵfac = function FormlyTemplateType_Factory(t) { return new (t || FormlyTemplateType)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
FormlyTemplateType.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyTemplateType, selectors: [["formly-template"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "innerHtml"]], template: function FormlyTemplateType_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("innerHtml", ctx.template, ɵngcc0.ɵɵsanitizeHtml);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyTemplateType, [{
        type: Component,
        args: [{
                selector: 'formly-template',
                template: "<div [innerHtml]=\"template\"></div>"
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, null); })();
    return FormlyTemplateType;
}(FieldType));
export { FormlyTemplateType };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormlyTemplateType.prototype.innerHtml;
    /**
     * @type {?}
     * @private
     */
    FormlyTemplateType.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtdGVtcGxhdGUudHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvY29yZS9saWIvdGVtcGxhdGVzL2ZpZWxkLXRlbXBsYXRlLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFFekM7QUFFZ0IsSUFFd0IsOENBQVM7QUFBQyxJQWVoRCw0QkFBb0IsU0FBdUI7QUFDN0MsUUFERSxZQUNFLGlCQUFPLFNBQ1I7QUFDSCxRQUhzQixlQUFTLEdBQVQsU0FBUyxDQUFjO0FBQUMsUUFEcEMsZUFBUyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDeEQ7QUFBc0IsSUFFcEIsQ0FBQztBQUNILElBakJFLHNCQUFJLHdDQUFRO0FBQUk7QUFDRjtBQUF1QjtBQUFZLFFBRGpEO0FBQWMsWUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3pFLGdCQUFNLElBQUksQ0FBQyxTQUFTLEdBQUc7QUFDdkIsb0JBQVEsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUTtBQUNyQyxvQkFBUSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRO0FBQ2pDLHdCQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ3ZFLHdCQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVE7QUFDL0IsaUJBQU8sQ0FBQztBQUNSLGFBQUs7QUFDTCxZQUNJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDbEMsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFBMkIsT0FGbEQsQUFaSztBQUFDOytCQUpSLFNBQVMsU0FBQyxqREFJcUI7UUFIOUIsUUFBUSxFQUFFLGxCQUtZLGdCQVRmLFlBQVk7SUFJUSxKQUpMO2dCQUt0QixRQUFRLEVBQUUsc0NBQW9DLGtCQUMvQzs7Ozs7Ozs7Ozs7OzZFQU5nQztBQUFDLElBeUJsQyx5QkFBQztBQUNBLENBREEsQUF0QkQsQ0FJd0MsU0FBUyxHQWtCaEQ7QUFDRCxTQW5CYSxrQkFBa0I7QUFBSTtBQUFhO0FBQzVDO0FBQ0Y7QUFBZ0I7QUFBUSxJQVl4Qix1Q0FBc0Q7QUFDeEQ7QUFBUTtBQUFpQjtBQUFnQjtBQUN6QyxJQURjLHVDQUErQjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi9maWVsZC50eXBlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LXRlbXBsYXRlJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IFtpbm5lckh0bWxdPVwidGVtcGxhdGVcIj48L2Rpdj5gLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlUZW1wbGF0ZVR5cGUgZXh0ZW5kcyBGaWVsZFR5cGUge1xuICBnZXQgdGVtcGxhdGUoKSB7XG4gICAgaWYgKHRoaXMuZmllbGQgJiYgKHRoaXMuZmllbGQudGVtcGxhdGUgIT09IHRoaXMuaW5uZXJIdG1sLnRlbXBsYXRlKSkge1xuICAgICAgdGhpcy5pbm5lckh0bWwgPSB7XG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLmZpZWxkLnRlbXBsYXRlLFxuICAgICAgICBjb250ZW50OiB0aGlzLnRvLnNhZmVIdG1sXG4gICAgICAgICAgPyB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLmZpZWxkLnRlbXBsYXRlKVxuICAgICAgICAgIDogdGhpcy5maWVsZC50ZW1wbGF0ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJIdG1sLmNvbnRlbnQ7XG4gIH1cblxuICBwcml2YXRlIGlubmVySHRtbCA9IHsgY29udGVudDogbnVsbCwgdGVtcGxhdGU6IG51bGwgfTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgIHN1cGVyKCk7XG4gIH1cbn1cbiJdfQ==