/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
/**
 * @abstract
 * @template F
 */
import * as ɵngcc0 from '@angular/core';
var FieldType = /** @class */ (function () {
    function FieldType() {
    }
    Object.defineProperty(FieldType.prototype, "model", {
        get: /**
         * @return {?}
         */
        function () { return this.field.model; },
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) { console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "form", {
        get: /**
         * @return {?}
         */
        function () { return (/** @type {?} */ (this.field.parent.formControl)); },
        set: /**
         * @param {?} form
         * @return {?}
         */
        function (form) { console.warn("NgxFormly: passing 'form' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () { return this.field.options; },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) { console.warn("NgxFormly: passing 'options' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () { return this.field.key; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "formControl", {
        get: /**
         * @return {?}
         */
        function () { return this.field.formControl; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "to", {
        get: /**
         * @return {?}
         */
        function () { return this.field.templateOptions || {}; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "showError", {
        get: /**
         * @return {?}
         */
        function () { return this.options.showError(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () { return this.field.id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldType.prototype, "formState", {
        get: /**
         * @return {?}
         */
        function () { return this.options.formState || {}; },
        enumerable: true,
        configurable: true
    });
    FieldType.propDecorators = {
        field: [{ type: Input }],
        model: [{ type: Input }],
        form: [{ type: Input }],
        options: [{ type: Input }]
    };
FieldType.ɵfac = function FieldType_Factory(t) { return new (t || FieldType)(); };
FieldType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldType, inputs: { model: "model", form: "form", options: "options", field: "field" } });

    return FieldType;
}());
export { FieldType };
if (false) {
    /** @type {?} */
    FieldType.prototype.field;
    /** @type {?} */
    FieldType.prototype.defaultOptions;
}
/**
 * @deprecated use `FieldType` instead
 * @abstract
 */
var /**
 * @deprecated use `FieldType` instead
 * @abstract
 */
Field = /** @class */ (function (_super) {
    tslib_1.__extends(Field, _super);
    function Field() {
        var _this = _super.call(this) || this;
        console.warn("NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.");
        return _this;
    }
    return Field;
}(FieldType));
/**
 * @deprecated use `FieldType` instead
 * @abstract
 */
export { Field };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQudHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvY29yZS9saWIvdGVtcGxhdGVzL2ZpZWxkLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RDO0FBQUk7QUFBYTtBQUFlOztBQUdoQztBQUE2QyxJQUE3QztBQUF1QixJQTJCdkIsQ0FBQztBQUNELElBeEJFLHNCQUNJLDRCQUFLO0FBQUk7QUFBaUI7QUFDcEI7QUFBWSxRQUZ0QixjQUNjLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pDO0FBQWlCO0FBQXdCO0FBQXVCO0FBQVksUUFBM0UsVUFBVSxDQUFNLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBd0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLDREQUF5RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdKO0FBQ2U7QUFBMkIsT0FKQTtBQUMxQyxJQUVFLHNCQUNJLDJCQUFJO0FBQUk7QUFBaUI7QUFBdUI7QUFBWSxRQURoRSxjQUNhLE9BQU8sbUJBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFBLENBQUMsQ0FBQyxDQUFDO0FBQ2pFO0FBQWlCO0FBQTJCO0FBQXVCO0FBQVksUUFBOUUsVUFBUyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyx5Q0FBdUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLDREQUF5RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXpKO0FBQ2U7QUFBMkIsT0FKd0I7QUFDbEUsSUFFRSxzQkFDSSw4QkFBTztBQUFJO0FBQWlCO0FBQ3hCO0FBQVksUUFGcEIsY0FDZ0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDN0M7QUFBaUI7QUFBOEI7QUFBdUI7QUFBWSxRQUFqRixVQUFZLE9BQXFCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyw0Q0FBMEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLDREQUF5RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWhMO0FBQTBCO0FBRWIsT0FMaUM7QUFDOUMsSUFFRSxzQkFBSSwwQkFBRztBQUFJO0FBQWlCO0FBRWpCO0FBQVksUUFGdkIsY0FBWSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUV0QztBQUEwQjtBQUEyQixPQUZmO0FBQ3RDLElBQ0Usc0JBQUksa0NBQVc7QUFBSTtBQUFpQjtBQUVqQztBQUFZLFFBRmYsY0FBb0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFFdEQ7QUFBMEI7QUFBMkIsT0FGQztBQUN0RCxJQUNFLHNCQUFJLHlCQUFFO0FBQUk7QUFBaUI7QUFBdUI7QUFFN0MsUUFGTCxjQUFXLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV2RDtBQUEwQjtBQUEyQixPQUZFO0FBQ3ZELElBQ0Usc0JBQUksZ0NBQVM7QUFBSTtBQUFpQjtBQUF1QjtBQUV6RCxRQUZBLGNBQTJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRW5FO0FBQTBCO0FBRW5CLE9BSjREO0FBQ25FLElBQ0Usc0JBQUkseUJBQUU7QUFBSTtBQUFpQjtBQUV2QjtBQUFZLFFBRmhCLGNBQW1CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTVDO0FBQTBCO0FBQTJCLE9BRlQ7QUFDNUMsSUFDRSxzQkFBSSxnQ0FBUztBQUFJO0FBQWlCO0FBQ3BDO0FBR0ssUUFKSCxjQUFrQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekQ7QUFHbUI7QUFFaEIsT0FOc0Q7QUFDMUQ7QUFHMEIsd0JBN0J2QixLQUFLO0FBQUssd0JBR1YsS0FBSztBQUNOLHVCQUdDLEtBQUs7QUFDTiwwQkFHQyxLQUFLO0FBQ1A7OztBQUFNO0FBQUMsSUFjUixnQkFBQztBQUVELENBRkMsQUEzQkQsSUEyQkM7QUFDRCxTQTVCc0IsU0FBUztBQUFJO0FBQWE7QUFBcUIsSUFDbkUsMEJBQWtCO0FBQ3BCO0FBQXFCLElBQW5CLG1DQUFtQjtBQUNyQjtBQUNDO0FBQUk7QUFDNEI7QUFDOUI7QUEwQkg7QUFBUTtBQUF1QztBQUNuQztBQUFJO0FBRVksSUFIUSxpQ0FBUztBQUFDLElBQzVDO0FBQ0MsUUFERCxZQUNFLGlCQUFPLFNBRVI7QUFDSCxRQUZJLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUZBQWlGLENBQUMsQ0FBQztBQUNwRztBQUVnQixJQUZkLENBQUM7QUFDSCxJQUFBLFlBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBb0MsU0FBUyxHQUs1QztBQUNEO0FBQUk7QUFBdUM7QUFBYTtBQUFJO0FBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkVHlwZTxGIGV4dGVuZHMgRm9ybWx5RmllbGRDb25maWcgPSBGb3JtbHlGaWVsZENvbmZpZz4ge1xuICBASW5wdXQoKSBmaWVsZDogRjtcbiAgZGVmYXVsdE9wdGlvbnM/OiBGO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBtb2RlbCgpIHsgcmV0dXJuIHRoaXMuZmllbGQubW9kZWw7IH1cbiAgc2V0IG1vZGVsKG06IGFueSkgeyBjb25zb2xlLndhcm4oYE5neEZvcm1seTogcGFzc2luZyAnbW9kZWwnIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBASW5wdXQoKVxuICBnZXQgZm9ybSgpIHsgcmV0dXJuIDxGb3JtR3JvdXA+IHRoaXMuZmllbGQucGFyZW50LmZvcm1Db250cm9sOyB9XG4gIHNldCBmb3JtKGZvcm0pIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ2Zvcm0nIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBASW5wdXQoKVxuICBnZXQgb3B0aW9ucygpIHsgcmV0dXJuIHRoaXMuZmllbGQub3B0aW9uczsgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zOiBGWydvcHRpb25zJ10pIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ29wdGlvbnMnIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBnZXQga2V5KCkgeyByZXR1cm4gdGhpcy5maWVsZC5rZXk7IH1cblxuICBnZXQgZm9ybUNvbnRyb2woKSB7IHJldHVybiB0aGlzLmZpZWxkLmZvcm1Db250cm9sOyB9XG5cbiAgZ2V0IHRvKCkgeyByZXR1cm4gdGhpcy5maWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307IH1cblxuICBnZXQgc2hvd0Vycm9yKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5vcHRpb25zLnNob3dFcnJvcih0aGlzKTsgfVxuXG4gIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5maWVsZC5pZDsgfVxuXG4gIGdldCBmb3JtU3RhdGUoKSB7IHJldHVybiB0aGlzLm9wdGlvbnMuZm9ybVN0YXRlIHx8IHt9OyB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBGaWVsZFR5cGVgIGluc3RlYWRcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkIGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zb2xlLndhcm4oYE5neEZvcm1seTogJ0ZpZWxkJyBoYXMgYmVlbiByZW5hbWVkIHRvICdGaWVsZFR5cGUnLCBleHRlbmQgJ0ZpZWxkVHlwZScgaW5zdGVhZC5gKTtcbiAgfVxufVxuIl19