/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Provides default configuration values for timepicker
 */
import * as ɵngcc0 from '@angular/core';
export class TimepickerConfig {
    constructor() {
        /**
         * hours change step
         */
        this.hourStep = 1;
        /**
         * minutes change step
         */
        this.minuteStep = 5;
        /**
         * seconds changes step
         */
        this.secondsStep = 10;
        /**
         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
         */
        this.showMeridian = true;
        /**
         * meridian labels based on locale
         */
        this.meridians = ['AM', 'PM'];
        /**
         * if true hours and minutes fields will be readonly
         */
        this.readonlyInput = false;
        /**
         * if true hours and minutes fields will be disabled
         */
        this.disabled = false;
        /**
         * if true scroll inside hours and minutes inputs will change time
         */
        this.mousewheel = true;
        /**
         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
         */
        this.arrowkeys = true;
        /**
         * if true spinner arrows above and below the inputs will be shown
         */
        this.showSpinners = true;
        /**
         * show seconds in timepicker
         */
        this.showSeconds = false;
        /**
         * show minutes in timepicker
         */
        this.showMinutes = true;
        /**
         * placeholder for hours field in timepicker
         */
        this.hoursPlaceholder = 'HH';
        /**
         * placeholder for minutes field in timepicker
         */
        this.minutesPlaceholder = 'MM';
        /**
         * placeholder for seconds field in timepicker
         */
        this.secondsPlaceholder = 'SS';
        /**
         * hours aria label
         */
        this.ariaLabelHours = 'hours';
        /**
         * minutes aria label
         */
        this.ariaLabelMinutes = 'minutes';
        /**
         * seconds aria label
         */
        this.ariaLabelSeconds = 'seconds';
    }
}
TimepickerConfig.ɵfac = function TimepickerConfig_Factory(t) { return new (t || TimepickerConfig)(); };
/** @nocollapse */ TimepickerConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function TimepickerConfig_Factory() { return new TimepickerConfig(); }, token: TimepickerConfig, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.hourStep;
    /**
     * minutes change step
     * @type {?}
     */
    TimepickerConfig.prototype.minuteStep;
    /**
     * seconds changes step
     * @type {?}
     */
    TimepickerConfig.prototype.secondsStep;
    /**
     * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
     * @type {?}
     */
    TimepickerConfig.prototype.showMeridian;
    /**
     * meridian labels based on locale
     * @type {?}
     */
    TimepickerConfig.prototype.meridians;
    /**
     * if true hours and minutes fields will be readonly
     * @type {?}
     */
    TimepickerConfig.prototype.readonlyInput;
    /**
     * if true hours and minutes fields will be disabled
     * @type {?}
     */
    TimepickerConfig.prototype.disabled;
    /**
     * if true scroll inside hours and minutes inputs will change time
     * @type {?}
     */
    TimepickerConfig.prototype.mousewheel;
    /**
     * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
     * @type {?}
     */
    TimepickerConfig.prototype.arrowkeys;
    /**
     * if true spinner arrows above and below the inputs will be shown
     * @type {?}
     */
    TimepickerConfig.prototype.showSpinners;
    /**
     * show seconds in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showSeconds;
    /**
     * show minutes in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showMinutes;
    /**
     * minimum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.min;
    /**
     * maximum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.max;
    /**
     * placeholder for hours field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.hoursPlaceholder;
    /**
     * placeholder for minutes field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.minutesPlaceholder;
    /**
     * placeholder for seconds field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.secondsPlaceholder;
    /**
     * hours aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelHours;
    /**
     * minutes aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelMinutes;
    /**
     * seconds aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelSeconds;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvdGltZXBpY2tlci90aW1lcGlja2VyLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQztBQUNvQztBQUFJO0FBR3ZDOztBQUNELE1BQU0sT0FBTyxnQkFBZ0I7QUFDN0IsSUFKQTtBQUNFO0FBQVk7QUFFSztBQUFZLFFBRTdCLGFBQVEsR0FBRyxDQUFDLENBQUM7QUFDZjtBQUFZO0FBQ0U7QUFDTixRQUROLGVBQVUsR0FBRyxDQUFDLENBQUM7QUFDakI7QUFBWTtBQUNFO0FBQ1IsUUFESixnQkFBVyxHQUFHLEVBQUUsQ0FBQztBQUNuQjtBQUFZO0FBQ0U7QUFDWCxRQURELGlCQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3RCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLGNBQVMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQjtBQUFZO0FBQ0U7QUFDYixRQURDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3hCO0FBQVk7QUFDRTtBQUNSLFFBREosYUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQjtBQUFZO0FBQ0U7QUFDVCxRQURILGVBQVUsR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFBWTtBQUNFO0FBQ1IsUUFESixjQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ25CO0FBQVk7QUFDRTtBQUNYLFFBREQsaUJBQVksR0FBRyxJQUFJLENBQUM7QUFDdEI7QUFBWTtBQUNFO0FBQ1gsUUFERCxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUN0QjtBQUFZO0FBQ0U7QUFDVixRQURGLGdCQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3JCO0FBQVk7QUFFRTtBQUFZLFFBR3hCLHFCQUFnQixHQUFHLElBQUksQ0FBQztBQUMxQjtBQUFZO0FBQ0U7QUFBWSxRQUF4Qix1QkFBa0IsR0FBRyxJQUFJLENBQUM7QUFDNUI7QUFBWTtBQUNFO0FBQVksUUFBeEIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQzVCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLG1CQUFjLEdBQUcsT0FBTyxDQUFDO0FBQzNCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLHFCQUFnQixHQUFHLFNBQVMsQ0FBQztBQUMvQjtBQUFZO0FBQ0U7QUFBWSxRQUF4QixxQkFBZ0IsR0FBRyxTQUFTLENBQUM7QUFDL0IsS0FBQztBQUNEOzRDQTdDQyxVQUFVLFNBQUMsa0JBQ1YsVUFBVSxFQUFFLE1BQU0sSUFFZjtTQURKLFRBQ0s7Ozs7OztnREFPd0I7QUFBQztBQUFhO0FBQVE7QUFBeUI7QUFBaUI7QUFDMUYsSUFORixvQ0FBYTtBQUNmO0FBQVE7QUFDRjtBQUNEO0FBQVEsSUFEWCxzQ0FBZTtBQUNqQjtBQUFRO0FBQ0Y7QUFDSDtBQUFRLElBRFQsdUNBQWlCO0FBQ25CO0FBQVE7QUFDRjtBQUNOO0FBQVEsSUFETix3Q0FBb0I7QUFDdEI7QUFBUTtBQUNGO0FBQWlCO0FBQ3BCLElBREQscUNBQXlCO0FBQzNCO0FBQVE7QUFDRjtBQUFpQjtBQUNqQixJQURKLHlDQUFzQjtBQUN4QjtBQUFRO0FBQ0Y7QUFDSDtBQUFRLElBRFQsb0NBQWlCO0FBQ25CO0FBQVE7QUFDRjtBQUNKO0FBQVEsSUFEUixzQ0FBa0I7QUFDcEI7QUFBUTtBQUNGO0FBQ0g7QUFBUSxJQURULHFDQUFpQjtBQUNuQjtBQUFRO0FBQ0Y7QUFDTjtBQUFRLElBRE4sd0NBQW9CO0FBQ3RCO0FBQVE7QUFDRjtBQUNOO0FBQVEsSUFETix1Q0FBb0I7QUFDdEI7QUFBUTtBQUNGO0FBQ0w7QUFBUSxJQURQLHVDQUFtQjtBQUNyQjtBQUFRO0FBQ0Y7QUFDSTtBQUFRLElBRGhCLCtCQUFVO0FBQ1o7QUFBUTtBQUNGO0FBQ0k7QUFBUSxJQURoQiwrQkFBVTtBQUNaO0FBQVE7QUFDRjtBQUFpQjtBQUNuQixJQURGLDRDQUF3QjtBQUMxQjtBQUFRO0FBQ0Y7QUFBaUI7QUFDckIsSUFEQSw4Q0FBMEI7QUFDNUI7QUFBUTtBQUNGO0FBQWlCO0FBQ3JCLElBREEsOENBQTBCO0FBQzVCO0FBQVE7QUFDRjtBQUFpQjtBQUNwQixJQURELDBDQUF5QjtBQUMzQjtBQUFRO0FBQ0Y7QUFBaUI7QUFBUSxJQUE3Qiw0Q0FBNkI7QUFDL0I7QUFBUTtBQUNGO0FBQWlCO0FBQVEsSUFBN0IsNENBQTZCO0FBQy9CO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBQcm92aWRlcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdmFsdWVzIGZvciB0aW1lcGlja2VyICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUaW1lcGlja2VyQ29uZmlnIHtcbiAgLyoqIGhvdXJzIGNoYW5nZSBzdGVwICovXG4gIGhvdXJTdGVwID0gMTtcbiAgLyoqIG1pbnV0ZXMgY2hhbmdlIHN0ZXAgKi9cbiAgbWludXRlU3RlcCA9IDU7XG4gIC8qKiBzZWNvbmRzIGNoYW5nZXMgc3RlcCAqL1xuICBzZWNvbmRzU3RlcCA9IDEwO1xuICAvKiogaWYgdHJ1ZSB3b3JrcyBpbiAxMkggbW9kZSBhbmQgZGlzcGxheXMgQU0vUE0uIElmIGZhbHNlIHdvcmtzIGluIDI0SCBtb2RlIGFuZCBoaWRlcyBBTS9QTSAqL1xuICBzaG93TWVyaWRpYW4gPSB0cnVlO1xuICAvKiogbWVyaWRpYW4gbGFiZWxzIGJhc2VkIG9uIGxvY2FsZSAqL1xuICBtZXJpZGlhbnMgPSBbJ0FNJywgJ1BNJ107XG4gIC8qKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIHJlYWRvbmx5ICovXG4gIHJlYWRvbmx5SW5wdXQgPSBmYWxzZTtcbiAgLyoqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgZGlzYWJsZWQgKi9cbiAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgLyoqIGlmIHRydWUgc2Nyb2xsIGluc2lkZSBob3VycyBhbmQgbWludXRlcyBpbnB1dHMgd2lsbCBjaGFuZ2UgdGltZSAqL1xuICBtb3VzZXdoZWVsID0gdHJ1ZTtcbiAgLyoqIGlmIHRydWUgdGhlIHZhbHVlcyBvZiBob3VycyBhbmQgbWludXRlcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgdXAvZG93biBhcnJvdyBrZXlzIG9uIHRoZSBrZXlib2FyZCAqL1xuICBhcnJvd2tleXMgPSB0cnVlO1xuICAvKiogaWYgdHJ1ZSBzcGlubmVyIGFycm93cyBhYm92ZSBhbmQgYmVsb3cgdGhlIGlucHV0cyB3aWxsIGJlIHNob3duICovXG4gIHNob3dTcGlubmVycyA9IHRydWU7XG4gIC8qKiBzaG93IHNlY29uZHMgaW4gdGltZXBpY2tlciAqL1xuICBzaG93U2Vjb25kcyA9IGZhbHNlO1xuICAvKiogc2hvdyBtaW51dGVzIGluIHRpbWVwaWNrZXIgKi9cbiAgc2hvd01pbnV0ZXMgPSB0cnVlO1xuICAvKiogbWluaW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdCAqL1xuICBtaW46IERhdGU7XG4gIC8qKiBtYXhpbXVtIHRpbWUgdXNlciBjYW4gc2VsZWN0ICovXG4gIG1heDogRGF0ZTtcbiAgLyoqIHBsYWNlaG9sZGVyIGZvciBob3VycyBmaWVsZCBpbiB0aW1lcGlja2VyICovXG4gIGhvdXJzUGxhY2Vob2xkZXIgPSAnSEgnO1xuICAvKiogcGxhY2Vob2xkZXIgZm9yIG1pbnV0ZXMgZmllbGQgaW4gdGltZXBpY2tlciAqL1xuICBtaW51dGVzUGxhY2Vob2xkZXIgPSAnTU0nO1xuICAvKiogcGxhY2Vob2xkZXIgZm9yIHNlY29uZHMgZmllbGQgaW4gdGltZXBpY2tlciAqL1xuICBzZWNvbmRzUGxhY2Vob2xkZXIgPSAnU1MnO1xuICAvKiogaG91cnMgYXJpYSBsYWJlbCAqL1xuICBhcmlhTGFiZWxIb3VycyA9ICdob3Vycyc7XG4gIC8qKiBtaW51dGVzIGFyaWEgbGFiZWwgKi9cbiAgYXJpYUxhYmVsTWludXRlcyA9ICdtaW51dGVzJztcbiAgLyoqIHNlY29uZHMgYXJpYSBsYWJlbCAqL1xuICBhcmlhTGFiZWxTZWNvbmRzID0gJ3NlY29uZHMnO1xufVxuIl19