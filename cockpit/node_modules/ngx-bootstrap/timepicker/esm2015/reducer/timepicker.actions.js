/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class TimepickerActions {
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        return {
            type: TimepickerActions.WRITE_VALUE,
            payload: value
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeHours(event) {
        return {
            type: TimepickerActions.CHANGE_HOURS,
            payload: event
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeMinutes(event) {
        return {
            type: TimepickerActions.CHANGE_MINUTES,
            payload: event
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeSeconds(event) {
        return {
            type: TimepickerActions.CHANGE_SECONDS,
            payload: event
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setTime(value) {
        return {
            type: TimepickerActions.SET_TIME_UNIT,
            payload: value
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateControls(value) {
        return {
            type: TimepickerActions.UPDATE_CONTROLS,
            payload: value
        };
    }
}
TimepickerActions.ɵfac = function TimepickerActions_Factory(t) { return new (t || TimepickerActions)(); };
TimepickerActions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TimepickerActions, factory: TimepickerActions.ɵfac });
TimepickerActions.WRITE_VALUE = '[timepicker] write value from ng model';
TimepickerActions.CHANGE_HOURS = '[timepicker] change hours';
TimepickerActions.CHANGE_MINUTES = '[timepicker] change minutes';
TimepickerActions.CHANGE_SECONDS = '[timepicker] change seconds';
TimepickerActions.SET_TIME_UNIT = '[timepicker] set time unit';
TimepickerActions.UPDATE_CONTROLS = '[timepicker] update controls';
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimepickerActions, [{
        type: Injectable
    }], null, null); })();
if (false) {
    /** @type {?} */
    TimepickerActions.WRITE_VALUE;
    /** @type {?} */
    TimepickerActions.CHANGE_HOURS;
    /** @type {?} */
    TimepickerActions.CHANGE_MINUTES;
    /** @type {?} */
    TimepickerActions.CHANGE_SECONDS;
    /** @type {?} */
    TimepickerActions.SET_TIME_UNIT;
    /** @type {?} */
    TimepickerActions.UPDATE_CONTROLS;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5hY3Rpb25zLmpzIiwic291cmNlcyI6WyJuZ3gtYm9vdHN0cmFwL3RpbWVwaWNrZXIvcmVkdWNlci90aW1lcGlja2VyLmFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBUzNDLE1BQU0sT0FBTyxpQkFBaUI7QUFDOUI7QUFBUTtBQUF3QjtBQUFtQjtBQUFRLElBT3pELFVBQVUsQ0FBQyxLQUFvQjtBQUNqQyxRQUFJLE9BQU87QUFDWCxZQUFNLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxXQUFXO0FBQ3pDLFlBQU0sT0FBTyxFQUFFLEtBQUs7QUFDcEIsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUNyQjtBQUNMLElBRkgsV0FBVyxDQUFDLEtBQXNCO0FBQ3BDLFFBQUksT0FBTztBQUNYLFlBQU0sSUFBSSxFQUFFLGlCQUFpQixDQUFDLFlBQVk7QUFDMUMsWUFBTSxPQUFPLEVBQUUsS0FBSztBQUNwQixTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXdCO0FBQ3ZCO0FBQ0wsSUFGRCxhQUFhLENBQUMsS0FBc0I7QUFDdEMsUUFBSSxPQUFPO0FBQ1gsWUFBTSxJQUFJLEVBQUUsaUJBQWlCLENBQUMsY0FBYztBQUM1QyxZQUFNLE9BQU8sRUFBRSxLQUFLO0FBQ3BCLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBd0I7QUFDL0I7QUFBUSxJQUROLGFBQWEsQ0FBQyxLQUFzQjtBQUFJLFFBQ3RDLE9BQU87QUFDWCxZQUFNLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxjQUFjO0FBQzVDLFlBQU0sT0FBTyxFQUFFLEtBQUs7QUFDcEIsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUUzQjtBQUFRLElBRlYsT0FBTyxDQUFDLEtBQVc7QUFBSSxRQUNyQixPQUFPO0FBQ1gsWUFBTSxJQUFJLEVBQUUsaUJBQWlCLENBQUMsYUFBYTtBQUMzQyxZQUFNLE9BQU8sRUFBRSxLQUFLO0FBQ3BCLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBd0I7QUFBbUI7QUFBUSxJQUF4RCxjQUFjLENBQUMsS0FBK0I7QUFBSSxRQUNoRCxPQUFPO0FBQ1gsWUFBTSxJQUFJLEVBQUUsaUJBQWlCLENBQUMsZUFBZTtBQUM3QyxZQUFNLE9BQU8sRUFBRSxLQUFLO0FBQ3BCLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOztpSUFBQztBQWhEaUIsNkJBQVcsR0FBRyx3Q0FBd0MsQ0FBQztBQUN2RCw4QkFBWSxHQUFHLDJCQUEyQixDQUFDO0FBQzNDLGdDQUFjLEdBQUcsNkJBQTZCLENBQUM7QUFDL0MsZ0NBQWMsR0FBRyw2QkFBNkIsQ0FBQztBQUMvQywrQkFBYSxHQUFHLDRCQUE0QixDQUFDO0FBQzdDLGlDQUFlLEdBQUcsOEJBQThCLENBQUM7NkNBUGxFLFVBQVU7OzBCQUNUO0FBQUM7QUFBYTtBQUNaLElBQUYsOEJBQXVFO0FBQ3pFO0FBQXFCLElBQW5CLCtCQUEyRDtBQUM3RDtBQUFxQixJQUFuQixpQ0FBK0Q7QUFDakU7QUFBcUIsSUFBbkIsaUNBQStEO0FBQ2pFO0FBQXFCLElBQW5CLGdDQUE2RDtBQUMvRDtBQUFxQixJQUFuQixrQ0FBaUU7QUFDbkU7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ25neC1ib290c3RyYXAvbWluaS1uZ3J4JztcbmltcG9ydCB7XG4gIFRpbWVDaGFuZ2VFdmVudCxcbiAgVGltZXBpY2tlckNvbXBvbmVudFN0YXRlLFxuICBUaW1lXG59IGZyb20gJy4uL3RpbWVwaWNrZXIubW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVwaWNrZXJBY3Rpb25zIHtcbiAgc3RhdGljIHJlYWRvbmx5IFdSSVRFX1ZBTFVFID0gJ1t0aW1lcGlja2VyXSB3cml0ZSB2YWx1ZSBmcm9tIG5nIG1vZGVsJztcbiAgc3RhdGljIHJlYWRvbmx5IENIQU5HRV9IT1VSUyA9ICdbdGltZXBpY2tlcl0gY2hhbmdlIGhvdXJzJztcbiAgc3RhdGljIHJlYWRvbmx5IENIQU5HRV9NSU5VVEVTID0gJ1t0aW1lcGlja2VyXSBjaGFuZ2UgbWludXRlcyc7XG4gIHN0YXRpYyByZWFkb25seSBDSEFOR0VfU0VDT05EUyA9ICdbdGltZXBpY2tlcl0gY2hhbmdlIHNlY29uZHMnO1xuICBzdGF0aWMgcmVhZG9ubHkgU0VUX1RJTUVfVU5JVCA9ICdbdGltZXBpY2tlcl0gc2V0IHRpbWUgdW5pdCc7XG4gIHN0YXRpYyByZWFkb25seSBVUERBVEVfQ09OVFJPTFMgPSAnW3RpbWVwaWNrZXJdIHVwZGF0ZSBjb250cm9scyc7XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSB8IHN0cmluZykge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBUaW1lcGlja2VyQWN0aW9ucy5XUklURV9WQUxVRSxcbiAgICAgIHBheWxvYWQ6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIGNoYW5nZUhvdXJzKGV2ZW50OiBUaW1lQ2hhbmdlRXZlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogVGltZXBpY2tlckFjdGlvbnMuQ0hBTkdFX0hPVVJTLFxuICAgICAgcGF5bG9hZDogZXZlbnRcbiAgICB9O1xuICB9XG5cbiAgY2hhbmdlTWludXRlcyhldmVudDogVGltZUNoYW5nZUV2ZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFRpbWVwaWNrZXJBY3Rpb25zLkNIQU5HRV9NSU5VVEVTLFxuICAgICAgcGF5bG9hZDogZXZlbnRcbiAgICB9O1xuICB9XG5cbiAgY2hhbmdlU2Vjb25kcyhldmVudDogVGltZUNoYW5nZUV2ZW50KTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogVGltZXBpY2tlckFjdGlvbnMuQ0hBTkdFX1NFQ09ORFMsXG4gICAgICBwYXlsb2FkOiBldmVudFxuICAgIH07XG4gIH1cblxuICBzZXRUaW1lKHZhbHVlOiBUaW1lKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogVGltZXBpY2tlckFjdGlvbnMuU0VUX1RJTUVfVU5JVCxcbiAgICAgIHBheWxvYWQ6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZUNvbnRyb2xzKHZhbHVlOiBUaW1lcGlja2VyQ29tcG9uZW50U3RhdGUpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBUaW1lcGlja2VyQWN0aW9ucy5VUERBVEVfQ09OVFJPTFMsXG4gICAgICBwYXlsb2FkOiB2YWx1ZVxuICAgIH07XG4gIH1cbn1cbiJdfQ==