/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @template T
 */
import * as ɵngcc0 from '@angular/core';
var BsModalRef = /** @class */ (function () {
    function BsModalRef() {
        /**
         * Hides the modal
         */
        this.hide = Function;
        /**
         * Sets new class to modal window
         */
        this.setClass = Function;
    }
BsModalRef.ɵfac = function BsModalRef_Factory(t) { return new (t || BsModalRef)(); };
BsModalRef.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BsModalRef, factory: function (t) { return BsModalRef.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BsModalRef, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return BsModalRef;
}());
export { BsModalRef };
if (false) {
    /**
     *  Allow user to ID for the modal. Otherwise, a unique number will be given
     * @type {?}
     */
    BsModalRef.prototype.id;
    /**
     * Reference to a component inside the modal. Null if modal's been created with TemplateRef
     * @type {?}
     */
    BsModalRef.prototype.content;
    /**
     * Hides the modal
     * @type {?}
     */
    BsModalRef.prototype.hide;
    /**
     * Sets new class to modal window
     * @type {?}
     */
    BsModalRef.prototype.setClass;
    /**
     * Event that is fired when the modal behind the ref starts hiding
     * @type {?}
     */
    BsModalRef.prototype.onHide;
    /**
     * Event that is fired when the modal behind the ref finishes hiding
     * @type {?}
     */
    BsModalRef.prototype.onHidden;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtbW9kYWwtcmVmLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvbW9kYWwvYnMtbW9kYWwtcmVmLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3pEO0FBQ0c7QUFDQzs7QUFESjtBQUNnQyxJQURoQztBQUNVO0FBQVk7QUFDUjtBQUFZLFFBY3hCLFNBQUksR0FBZSxRQUFRLENBQUM7QUFDOUI7QUFDTTtBQUVBO0FBQVksUUFBaEIsYUFBUSxHQUErQixRQUFRLENBQUM7QUFDbEQsSUFVQSxDQUFDOzhDQS9CQSxVQUFVOzs7O2dEQUNMO0FBQUMsSUE4QlAsaUJBQUM7QUFDQSxDQURBLEFBL0JELElBK0JDO0FBQ0QsU0E5QmEsVUFBVTtBQUFJO0FBQ3RCO0FBQ0U7QUFFSjtBQUVFO0FBQ0UsSUFITCx3QkFBVztBQUNiO0FBRUM7QUFDRTtBQUNXO0FBQ2QsSUFERSw2QkFBbUI7QUFDckI7QUFFQztBQUNFO0FBQ1c7QUFBUSxJQUFwQiwwQkFBNEI7QUFDOUI7QUFDRTtBQUNFO0FBQ1c7QUFBUSxJQUFyQiw4QkFBZ0Q7QUFDbEQ7QUFDRTtBQUNFO0FBQ1c7QUFBUSxJQUNyQiw0QkFBMEI7QUFDNUI7QUFDRTtBQUNFO0FBQ1c7QUFBUSxJQUNyQiw4QkFBNEI7QUFDOUI7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgY2xhc3MgQnNNb2RhbFJlZjxUID0gYW55PiB7XG4gIC8qKlxuICAgKiAgQWxsb3cgdXNlciB0byBJRCBmb3IgdGhlIG1vZGFsLiBPdGhlcndpc2UsIGEgdW5pcXVlIG51bWJlciB3aWxsIGJlIGdpdmVuXG4gICAqL1xuICBpZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gYSBjb21wb25lbnQgaW5zaWRlIHRoZSBtb2RhbC4gTnVsbCBpZiBtb2RhbCdzIGJlZW4gY3JlYXRlZCB3aXRoIFRlbXBsYXRlUmVmXG4gICAqL1xuICBjb250ZW50PzogVCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBtb2RhbFxuICAgKi9cbiAgaGlkZTogKCkgPT4gdm9pZCA9IEZ1bmN0aW9uO1xuICAvKipcbiAgICogU2V0cyBuZXcgY2xhc3MgdG8gbW9kYWwgd2luZG93XG4gICAqL1xuICBzZXRDbGFzczogKG5ld0NsYXNzOiBzdHJpbmcpID0+IHZvaWQgPSBGdW5jdGlvbjtcbiAgLyoqXG4gICAqIEV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgbW9kYWwgYmVoaW5kIHRoZSByZWYgc3RhcnRzIGhpZGluZ1xuICAgKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBvbkhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAvKipcbiAgICogRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBtb2RhbCBiZWhpbmQgdGhlIHJlZiBmaW5pc2hlcyBoaWRpbmdcbiAgICovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgb25IaWRkZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xufVxuIl19