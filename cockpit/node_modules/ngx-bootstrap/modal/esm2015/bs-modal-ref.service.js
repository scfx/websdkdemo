/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @template T
 */
// tslint:disable-next-line:no-any
import * as ɵngcc0 from '@angular/core';
export class BsModalRef {
    constructor() {
        /**
         * Hides the modal
         */
        this.hide = Function;
        /**
         * Sets new class to modal window
         */
        this.setClass = Function;
    }
}
BsModalRef.ɵfac = function BsModalRef_Factory(t) { return new (t || BsModalRef)(); };
BsModalRef.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BsModalRef, factory: BsModalRef.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BsModalRef, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     *  Allow user to ID for the modal. Otherwise, a unique number will be given
     * @type {?}
     */
    BsModalRef.prototype.id;
    /**
     * Reference to a component inside the modal. Null if modal's been created with TemplateRef
     * @type {?}
     */
    BsModalRef.prototype.content;
    /**
     * Hides the modal
     * @type {?}
     */
    BsModalRef.prototype.hide;
    /**
     * Sets new class to modal window
     * @type {?}
     */
    BsModalRef.prototype.setClass;
    /**
     * Event that is fired when the modal behind the ref starts hiding
     * @type {?}
     */
    BsModalRef.prototype.onHide;
    /**
     * Event that is fired when the modal behind the ref finishes hiding
     * @type {?}
     */
    BsModalRef.prototype.onHidden;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtbW9kYWwtcmVmLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvbW9kYWwvYnMtbW9kYWwtcmVmLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3pEO0FBQ0c7QUFDQztBQUFKLGtDQUFrQzs7QUFDbEMsTUFBTSxPQUFPLFVBQVU7QUFBRyxJQUYxQjtBQUNFO0FBQVk7QUFDUjtBQUFZLFFBY2hCLFNBQUksR0FBZSxRQUFRLENBQUM7QUFDOUI7QUFDTTtBQUVBO0FBQVksUUFBaEIsYUFBUSxHQUErQixRQUFRLENBQUM7QUFDbEQsSUFVQSxDQUFDO0FBQ0Q7c0NBaENDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQztBQUFhO0FBQVE7QUFHSztBQUFpQjtBQUFRLElBRXBELHdCQUFXO0FBQ2I7QUFFQztBQUNFO0FBQ1c7QUFDZCxJQURFLDZCQUFtQjtBQUNyQjtBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLDBCQUE0QjtBQUM5QjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQXJCLDhCQUFnRDtBQUNsRDtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQ3JCLDRCQUEwQjtBQUM1QjtBQUNFO0FBQ0U7QUFDVztBQUFRLElBQ3JCLDhCQUE0QjtBQUM5QjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBjbGFzcyBCc01vZGFsUmVmPFQgPSBhbnk+IHtcbiAgLyoqXG4gICAqICBBbGxvdyB1c2VyIHRvIElEIGZvciB0aGUgbW9kYWwuIE90aGVyd2lzZSwgYSB1bmlxdWUgbnVtYmVyIHdpbGwgYmUgZ2l2ZW5cbiAgICovXG4gIGlkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byBhIGNvbXBvbmVudCBpbnNpZGUgdGhlIG1vZGFsLiBOdWxsIGlmIG1vZGFsJ3MgYmVlbiBjcmVhdGVkIHdpdGggVGVtcGxhdGVSZWZcbiAgICovXG4gIGNvbnRlbnQ/OiBUIHwgbnVsbDtcblxuICAvKipcbiAgICogSGlkZXMgdGhlIG1vZGFsXG4gICAqL1xuICBoaWRlOiAoKSA9PiB2b2lkID0gRnVuY3Rpb247XG4gIC8qKlxuICAgKiBTZXRzIG5ldyBjbGFzcyB0byBtb2RhbCB3aW5kb3dcbiAgICovXG4gIHNldENsYXNzOiAobmV3Q2xhc3M6IHN0cmluZykgPT4gdm9pZCA9IEZ1bmN0aW9uO1xuICAvKipcbiAgICogRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBtb2RhbCBiZWhpbmQgdGhlIHJlZiBzdGFydHMgaGlkaW5nXG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gIC8qKlxuICAgKiBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIG1vZGFsIGJlaGluZCB0aGUgcmVmIGZpbmlzaGVzIGhpZGluZ1xuICAgKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBvbkhpZGRlbjogRXZlbnRFbWl0dGVyPGFueT47XG59XG4iXX0=