/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class DatepickerConfig {
    constructor() {
        this.locale = 'en';
        this.datepickerMode = 'day';
        this.startingDay = 0;
        this.yearRange = 20;
        this.minMode = 'day';
        this.maxMode = 'year';
        this.showWeeks = true;
        this.formatDay = 'DD';
        this.formatMonth = 'MMMM';
        this.formatYear = 'YYYY';
        this.formatDayHeader = 'dd';
        this.formatDayTitle = 'MMMM YYYY';
        this.formatMonthTitle = 'YYYY';
        this.onlyCurrentMonth = false;
        this.monthColLimit = 3;
        this.yearColLimit = 5;
        this.shortcutPropagation = false;
    }
}
DatepickerConfig.ɵfac = function DatepickerConfig_Factory(t) { return new (t || DatepickerConfig)(); };
/** @nocollapse */ DatepickerConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatepickerConfig_Factory() { return new DatepickerConfig(); }, token: DatepickerConfig, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatepickerConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    DatepickerConfig.prototype.locale;
    /** @type {?} */
    DatepickerConfig.prototype.datepickerMode;
    /** @type {?} */
    DatepickerConfig.prototype.startingDay;
    /** @type {?} */
    DatepickerConfig.prototype.yearRange;
    /** @type {?} */
    DatepickerConfig.prototype.minMode;
    /** @type {?} */
    DatepickerConfig.prototype.maxMode;
    /** @type {?} */
    DatepickerConfig.prototype.showWeeks;
    /** @type {?} */
    DatepickerConfig.prototype.formatDay;
    /** @type {?} */
    DatepickerConfig.prototype.formatMonth;
    /** @type {?} */
    DatepickerConfig.prototype.formatYear;
    /** @type {?} */
    DatepickerConfig.prototype.formatDayHeader;
    /** @type {?} */
    DatepickerConfig.prototype.formatDayTitle;
    /** @type {?} */
    DatepickerConfig.prototype.formatMonthTitle;
    /** @type {?} */
    DatepickerConfig.prototype.onlyCurrentMonth;
    /** @type {?} */
    DatepickerConfig.prototype.monthColLimit;
    /** @type {?} */
    DatepickerConfig.prototype.yearColLimit;
    /** @type {?} */
    DatepickerConfig.prototype.shortcutPropagation;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFJQSxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBSkE7QUFDRSxRQUdBLFdBQU0sR0FBRyxJQUFJLENBQUM7QUFDaEIsUUFBRSxtQkFBYyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFFLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFFBQUUsY0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNqQixRQUFFLFlBQU8sR0FBRyxLQUFLLENBQUM7QUFDbEIsUUFBRSxZQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ25CLFFBQUUsY0FBUyxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFFLGNBQVMsR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBRSxnQkFBVyxHQUFHLE1BQU0sQ0FBQztBQUN2QixRQUFFLGVBQVUsR0FBRyxNQUFNLENBQUM7QUFDdEIsUUFBRSxvQkFBZSxHQUFHLElBQUksQ0FBQztBQUN6QixRQUFFLG1CQUFjLEdBQUcsV0FBVyxDQUFDO0FBQy9CLFFBQUUscUJBQWdCLEdBQUcsTUFBTSxDQUFDO0FBQzVCLFFBQUUscUJBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQUUsa0JBQWEsR0FBRyxDQUFDLENBQUM7QUFDcEIsUUFBRSxpQkFBWSxHQUFHLENBQUMsQ0FBQztBQUNuQixRQUFFLHdCQUFtQixHQUFHLEtBQUssQ0FBQztBQUM5QixLQUFDO0FBQ0Q7NENBdEJDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxJQUVmO1NBREosVEFDSzs7Ozs7O2dEQVNLO0FBQUM7QUFDWDtBQUFxQixJQVRwQixrQ0FBYztBQUNoQjtBQUFxQixJQUFuQiwwQ0FBdUI7QUFDekI7QUFDRSxJQURBLHVDQUFnQjtBQUNsQjtBQUNHLElBREQscUNBQWU7QUFDakI7QUFDRSxJQURBLG1DQUFnQjtBQUNsQjtBQUNDLElBREMsbUNBQWlCO0FBQ25CO0FBQ0MsSUFEQyxxQ0FBaUI7QUFDbkI7QUFDQyxJQURDLHFDQUFpQjtBQUNuQjtBQUFxQixJQUFuQix1Q0FBcUI7QUFDdkI7QUFBcUIsSUFBbkIsc0NBQW9CO0FBQ3RCO0FBQXFCLElBQW5CLDJDQUF1QjtBQUN6QjtBQUFxQixJQUFuQiwwQ0FBNkI7QUFDL0I7QUFBcUIsSUFBbkIsNENBQTBCO0FBQzVCO0FBQXFCLElBQW5CLDRDQUF5QjtBQUMzQjtBQUNBLElBREUseUNBQWtCO0FBQ3BCO0FBQ0MsSUFEQyx3Q0FBaUI7QUFDbkI7QUFBcUIsSUFBbkIsK0NBQTRCO0FBQzlCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhdGVwaWNrZXJDb25maWcge1xuICBsb2NhbGUgPSAnZW4nO1xuICBkYXRlcGlja2VyTW9kZSA9ICdkYXknO1xuICBzdGFydGluZ0RheSA9IDA7XG4gIHllYXJSYW5nZSA9IDIwO1xuICBtaW5Nb2RlID0gJ2RheSc7XG4gIG1heE1vZGUgPSAneWVhcic7XG4gIHNob3dXZWVrcyA9IHRydWU7XG4gIGZvcm1hdERheSA9ICdERCc7XG4gIGZvcm1hdE1vbnRoID0gJ01NTU0nO1xuICBmb3JtYXRZZWFyID0gJ1lZWVknO1xuICBmb3JtYXREYXlIZWFkZXIgPSAnZGQnO1xuICBmb3JtYXREYXlUaXRsZSA9ICdNTU1NIFlZWVknO1xuICBmb3JtYXRNb250aFRpdGxlID0gJ1lZWVknO1xuICBvbmx5Q3VycmVudE1vbnRoID0gZmFsc2U7XG4gIG1vbnRoQ29sTGltaXQgPSAzO1xuICB5ZWFyQ29sTGltaXQgPSA1O1xuICBzaG9ydGN1dFByb3BhZ2F0aW9uID0gZmFsc2U7XG59XG4iXX0=